
painter.elf:     file format elf32-littlenios2
painter.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00074614 memsz 0x00074614 flags r-x
    LOAD off    0x00075634 vaddr 0x00074634 paddr 0x00077c54 align 2**12
         filesz 0x00003620 memsz 0x00003620 flags rw-
    LOAD off    0x00079274 vaddr 0x0007b274 paddr 0x0007b274 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000156e0  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0005ed9c  00015898  00015898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003620  00074634  00077c54  00075634  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  0007b274  0007b274  00079274  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00078c54  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010c0  00000000  00000000  00078c78  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002de5c  00000000  00000000  00079d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b164  00000000  00000000  000a7b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000d3f4  00000000  00000000  000b2cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002898  00000000  00000000  000c00ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005281  00000000  00000000  000c2984  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00013137  00000000  00000000  000c7c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  000dad3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  000dada0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000e1398  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000e139b  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000e139e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000e139f  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000e13a0  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000e13a4  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000e13a8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000e13ac  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000e13b5  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000e13be  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  000e13c7  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  000e13cb  2**0
                  CONTENTS, READONLY
 28 .jdi          00004221  00000000  00000000  000e13fa  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00079269  00000000  00000000  000e561b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00015898 l    d  .rodata	00000000 .rodata
00074634 l    d  .rwdata	00000000 .rwdata
0007b274 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../painter_bsp//obj/HAL/src/crt0.o
00000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
00015898 l     O .rodata	000000b6 tahomabold_20_33
0001594e l     O .rodata	00000104 tahomabold_20_34
00015a52 l     O .rodata	000001a0 tahomabold_20_35
00015bf2 l     O .rodata	00000152 tahomabold_20_36
00015d44 l     O .rodata	00000270 tahomabold_20_37
00015fb4 l     O .rodata	000001ba tahomabold_20_38
0001616e l     O .rodata	0000009c tahomabold_20_39
0001620a l     O .rodata	000000ea tahomabold_20_40
000162f4 l     O .rodata	000000ea tahomabold_20_41
000163de l     O .rodata	00000152 tahomabold_20_42
00016530 l     O .rodata	000001a0 tahomabold_20_43
000166d0 l     O .rodata	0000009c tahomabold_20_44
0001676c l     O .rodata	000000ea tahomabold_20_45
00016856 l     O .rodata	0000009c tahomabold_20_46
000168f2 l     O .rodata	00000138 tahomabold_20_47
00016a2a l     O .rodata	00000152 tahomabold_20_48
00016b7c l     O .rodata	00000152 tahomabold_20_49
00016cce l     O .rodata	00000152 tahomabold_20_50
00016e20 l     O .rodata	00000152 tahomabold_20_51
00016f72 l     O .rodata	00000152 tahomabold_20_52
000170c4 l     O .rodata	00000152 tahomabold_20_53
00017216 l     O .rodata	00000152 tahomabold_20_54
00017368 l     O .rodata	00000152 tahomabold_20_55
000174ba l     O .rodata	00000152 tahomabold_20_56
0001760c l     O .rodata	00000152 tahomabold_20_57
0001775e l     O .rodata	000000b6 tahomabold_20_58
00017814 l     O .rodata	000000b6 tahomabold_20_59
000178ca l     O .rodata	000001a0 tahomabold_20_60
00017a6a l     O .rodata	000001a0 tahomabold_20_61
00017c0a l     O .rodata	000001a0 tahomabold_20_62
00017daa l     O .rodata	0000011e tahomabold_20_63
00017ec8 l     O .rodata	000001d4 tahomabold_20_64
0001809c l     O .rodata	0000016c tahomabold_20_65
00018208 l     O .rodata	0000016c tahomabold_20_66
00018374 l     O .rodata	00000152 tahomabold_20_67
000184c6 l     O .rodata	00000186 tahomabold_20_68
0001864c l     O .rodata	00000138 tahomabold_20_69
00018784 l     O .rodata	00000138 tahomabold_20_70
000188bc l     O .rodata	00000186 tahomabold_20_71
00018a42 l     O .rodata	00000186 tahomabold_20_72
00018bc8 l     O .rodata	00000104 tahomabold_20_73
00018ccc l     O .rodata	00000104 tahomabold_20_74
00018dd0 l     O .rodata	0000016c tahomabold_20_75
00018f3c l     O .rodata	0000011e tahomabold_20_76
0001905a l     O .rodata	000001d4 tahomabold_20_77
0001922e l     O .rodata	00000186 tahomabold_20_78
000193b4 l     O .rodata	00000186 tahomabold_20_79
0001953a l     O .rodata	00000152 tahomabold_20_80
0001968c l     O .rodata	00000186 tahomabold_20_81
00019812 l     O .rodata	00000186 tahomabold_20_82
00019998 l     O .rodata	00000152 tahomabold_20_83
00019aea l     O .rodata	00000138 tahomabold_20_84
00019c22 l     O .rodata	00000186 tahomabold_20_85
00019da8 l     O .rodata	0000016c tahomabold_20_86
00019f14 l     O .rodata	00000222 tahomabold_20_87
0001a136 l     O .rodata	0000016c tahomabold_20_88
0001a2a2 l     O .rodata	0000016c tahomabold_20_89
0001a40e l     O .rodata	00000138 tahomabold_20_90
0001a546 l     O .rodata	000000ea tahomabold_20_91
0001a630 l     O .rodata	00000138 tahomabold_20_92
0001a768 l     O .rodata	000000ea tahomabold_20_93
0001a852 l     O .rodata	000001a0 tahomabold_20_94
0001a9f2 l     O .rodata	00000152 tahomabold_20_95
0001ab44 l     O .rodata	0000011e tahomabold_20_96
0001ac62 l     O .rodata	00000138 tahomabold_20_97
0001ad9a l     O .rodata	00000152 tahomabold_20_98
0001aeec l     O .rodata	0000011e tahomabold_20_99
0001b00a l     O .rodata	00000152 tahomabold_20_100
0001b15c l     O .rodata	00000138 tahomabold_20_101
0001b294 l     O .rodata	000000d0 tahomabold_20_102
0001b364 l     O .rodata	00000152 tahomabold_20_103
0001b4b6 l     O .rodata	00000152 tahomabold_20_104
0001b608 l     O .rodata	0000009c tahomabold_20_105
0001b6a4 l     O .rodata	000000ea tahomabold_20_106
0001b78e l     O .rodata	00000138 tahomabold_20_107
0001b8c6 l     O .rodata	0000009c tahomabold_20_108
0001b962 l     O .rodata	000001ee tahomabold_20_109
0001bb50 l     O .rodata	00000152 tahomabold_20_110
0001bca2 l     O .rodata	00000138 tahomabold_20_111
0001bdda l     O .rodata	00000152 tahomabold_20_112
0001bf2c l     O .rodata	00000152 tahomabold_20_113
0001c07e l     O .rodata	000000ea tahomabold_20_114
0001c168 l     O .rodata	00000104 tahomabold_20_115
0001c26c l     O .rodata	000000d0 tahomabold_20_116
0001c33c l     O .rodata	00000152 tahomabold_20_117
0001c48e l     O .rodata	00000138 tahomabold_20_118
0001c5c6 l     O .rodata	000001d4 tahomabold_20_119
0001c79a l     O .rodata	00000138 tahomabold_20_120
0001c8d2 l     O .rodata	00000138 tahomabold_20_121
0001ca0a l     O .rodata	0000011e tahomabold_20_122
0001cb28 l     O .rodata	00000138 tahomabold_20_123
0001cc60 l     O .rodata	00000152 tahomabold_20_124
0001cdb2 l     O .rodata	00000138 tahomabold_20_125
0001ceea l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
0001d08a l     O .rodata	000001b8 tahomabold_32_33
0001d242 l     O .rodata	00000280 tahomabold_32_34
0001d4c2 l     O .rodata	00000410 tahomabold_32_35
0001d8d2 l     O .rodata	00000320 tahomabold_32_36
0001dbf2 l     O .rodata	000005f0 tahomabold_32_37
0001e1e2 l     O .rodata	00000410 tahomabold_32_38
0001e5f2 l     O .rodata	00000168 tahomabold_32_39
0001e75a l     O .rodata	00000258 tahomabold_32_40
0001e9b2 l     O .rodata	00000258 tahomabold_32_41
0001ec0a l     O .rodata	00000320 tahomabold_32_42
0001ef2a l     O .rodata	00000410 tahomabold_32_43
0001f33a l     O .rodata	00000190 tahomabold_32_44
0001f4ca l     O .rodata	00000230 tahomabold_32_45
0001f6fa l     O .rodata	00000190 tahomabold_32_46
0001f88a l     O .rodata	000002d0 tahomabold_32_47
0001fb5a l     O .rodata	00000320 tahomabold_32_48
0001fe7a l     O .rodata	00000320 tahomabold_32_49
0002019a l     O .rodata	00000320 tahomabold_32_50
000204ba l     O .rodata	00000320 tahomabold_32_51
000207da l     O .rodata	00000320 tahomabold_32_52
00020afa l     O .rodata	00000320 tahomabold_32_53
00020e1a l     O .rodata	00000320 tahomabold_32_54
0002113a l     O .rodata	00000320 tahomabold_32_55
0002145a l     O .rodata	00000320 tahomabold_32_56
0002177a l     O .rodata	00000320 tahomabold_32_57
00021a9a l     O .rodata	000001e0 tahomabold_32_58
00021c7a l     O .rodata	000001e0 tahomabold_32_59
00021e5a l     O .rodata	00000410 tahomabold_32_60
0002226a l     O .rodata	00000410 tahomabold_32_61
0002267a l     O .rodata	00000410 tahomabold_32_62
00022a8a l     O .rodata	000002d0 tahomabold_32_63
00022d5a l     O .rodata	00000488 tahomabold_32_64
000231e2 l     O .rodata	00000370 tahomabold_32_65
00023552 l     O .rodata	00000370 tahomabold_32_66
000238c2 l     O .rodata	00000348 tahomabold_32_67
00023c0a l     O .rodata	000003c0 tahomabold_32_68
00023fca l     O .rodata	00000320 tahomabold_32_69
000242ea l     O .rodata	000002f8 tahomabold_32_70
000245e2 l     O .rodata	000003c0 tahomabold_32_71
000249a2 l     O .rodata	000003c0 tahomabold_32_72
00024d62 l     O .rodata	00000258 tahomabold_32_73
00024fba l     O .rodata	00000280 tahomabold_32_74
0002523a l     O .rodata	00000398 tahomabold_32_75
000255d2 l     O .rodata	000002d0 tahomabold_32_76
000258a2 l     O .rodata	00000488 tahomabold_32_77
00025d2a l     O .rodata	000003e8 tahomabold_32_78
00026112 l     O .rodata	000003e8 tahomabold_32_79
000264fa l     O .rodata	00000348 tahomabold_32_80
00026842 l     O .rodata	000003e8 tahomabold_32_81
00026c2a l     O .rodata	000003c0 tahomabold_32_82
00026fea l     O .rodata	00000320 tahomabold_32_83
0002730a l     O .rodata	00000320 tahomabold_32_84
0002762a l     O .rodata	000003c0 tahomabold_32_85
000279ea l     O .rodata	00000370 tahomabold_32_86
00027d5a l     O .rodata	00000528 tahomabold_32_87
00028282 l     O .rodata	00000370 tahomabold_32_88
000285f2 l     O .rodata	00000370 tahomabold_32_89
00028962 l     O .rodata	00000320 tahomabold_32_90
00028c82 l     O .rodata	00000258 tahomabold_32_91
00028eda l     O .rodata	000002d0 tahomabold_32_92
000291aa l     O .rodata	00000258 tahomabold_32_93
00029402 l     O .rodata	00000410 tahomabold_32_94
00029812 l     O .rodata	00000320 tahomabold_32_95
00029b32 l     O .rodata	000002a8 tahomabold_32_96
00029dda l     O .rodata	000002f8 tahomabold_32_97
0002a0d2 l     O .rodata	00000320 tahomabold_32_98
0002a3f2 l     O .rodata	000002a8 tahomabold_32_99
0002a69a l     O .rodata	00000320 tahomabold_32_100
0002a9ba l     O .rodata	000002f8 tahomabold_32_101
0002acb2 l     O .rodata	00000230 tahomabold_32_102
0002aee2 l     O .rodata	00000320 tahomabold_32_103
0002b202 l     O .rodata	00000320 tahomabold_32_104
0002b522 l     O .rodata	00000190 tahomabold_32_105
0002b6b2 l     O .rodata	00000208 tahomabold_32_106
0002b8ba l     O .rodata	000002f8 tahomabold_32_107
0002bbb2 l     O .rodata	00000190 tahomabold_32_108
0002bd42 l     O .rodata	000004d8 tahomabold_32_109
0002c21a l     O .rodata	00000320 tahomabold_32_110
0002c53a l     O .rodata	00000320 tahomabold_32_111
0002c85a l     O .rodata	00000320 tahomabold_32_112
0002cb7a l     O .rodata	00000320 tahomabold_32_113
0002ce9a l     O .rodata	00000230 tahomabold_32_114
0002d0ca l     O .rodata	00000280 tahomabold_32_115
0002d34a l     O .rodata	00000208 tahomabold_32_116
0002d552 l     O .rodata	00000320 tahomabold_32_117
0002d872 l     O .rodata	000002f8 tahomabold_32_118
0002db6a l     O .rodata	00000460 tahomabold_32_119
0002dfca l     O .rodata	000002f8 tahomabold_32_120
0002e2c2 l     O .rodata	000002d0 tahomabold_32_121
0002e592 l     O .rodata	000002a8 tahomabold_32_122
0002e83a l     O .rodata	00000320 tahomabold_32_123
0002eb5a l     O .rodata	00000320 tahomabold_32_124
0002ee7a l     O .rodata	00000320 tahomabold_32_125
0002f19a l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 gesture.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
0007b274 l     O .bss	00000004 x.3969
00077c10 l     O .rwdata	00000004 y.3970
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 multi_touch2.c
00007ea8 l     F .text	00000360 mtc2_QueryData
00008208 l     F .text	00000074 mtc2_ISR
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 vip_fr.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 fp-bit.c
00009218 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009cbc l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
000761f0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000b194 l     F .text	00000034 __sprint_r
00074472 l     O .rodata	00000010 blanks.3515
00074482 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d2c8 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000ed38 l     F .text	00000008 __fp_lock
0000ed40 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000744b4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000745fc l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00012e8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012fec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013018 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000133e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000134d4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000135c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001379c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00077c48 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00013bdc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013d1c l     F .text	00000038 alt_dev_reg
00076bac l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014008 l     F .text	00000204 altera_avalon_jtag_uart_irq
0001420c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014848 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014bd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014db0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00014f08 l     F .text	00000050 alt_get_errno
00014f58 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000ae98 g     F .text	0000001c putchar
00001528 g     F .text	000002fc vid_draw_horiz_line
00010e58 g     F .text	00000074 _mprec_log10
000063b4 g     F .text	00000118 I2C_Read
00010f48 g     F .text	00000084 __any_on
00011e3c g     F .text	00000064 _isatty_r
000744e4 g     O .rodata	00000028 __mprec_tinytens
000136e4 g     F .text	00000078 alt_main
0000b074 g     F .text	00000094 strcpy
0000a40c g     F .text	00000044 __ashldi3
0000aeb4 g     F .text	00000084 _puts_r
0007b2d4 g     O .bss	00000100 alt_irq
00011ea0 g     F .text	0000006c _lseek_r
0000748c g     F .text	00000068 ACK_check
00001910 g     F .text	0000006c vid_color_convert16_24
00008dd8 g     F .text	00000148 sqrt
00007134 g     F .text	000000a0 I2CL_Read16
00077c54 g       *ABS*	00000000 __flash_rwdata_start
00007400 g     F .text	0000008c ACK_single_check
00012bf0 g     F .text	0000005c __eqdf2
0007b564 g       *ABS*	00000000 __alt_heap_start
00008630 g     F .text	00000064 QUEUE_IsFull
0000ae54 g     F .text	0000003c printf
00004148 g     F .text	00000200 GUI_DeskInit
00011888 g     F .text	0000005c __sseek
0000eddc g     F .text	0000010c __sinit
00011990 g     F .text	0000013c __swbuf_r
0000fa74 g     F .text	0000009c _setlocale_r
0000ed54 g     F .text	00000078 __sfmoreglue
0001377c g     F .text	00000020 __malloc_unlock
00000e78 g     F .text	00000150 vid_draw_box
000005c0 g     F .text	00000044 PtCopy
000034cc g     F .text	0000025c vid_print_string_alpha
0000fdf0 g     F .text	0000018c memmove
000074f4 g     F .text	000001fc OC_I2C_Write
00004a10 g     F .text	00000308 GUI_ShowGesture
0000edcc g     F .text	00000010 _cleanup
0000ff7c g     F .text	000000a8 _Balloc
00075db4 g     O .rwdata	00000415 cour10_font_array
00012ca8 g     F .text	00000064 __gtdf2
00000c54 g     F .text	0000011c vid_move_block
0000a450 g     F .text	00000010 __errno
00006fb8 g     F .text	0000017c I2CL_MultipleWrite
00004068 g     F .text	000000e0 vid_string_pixel_length_alpha
000068bc g     F .text	00000144 i2c_write
00000000 g     F .entry	0000001c __reset
00008b08 g     F .text	00000090 DRAW_EraseScreen
00006138 g     F .text	00000040 my_wait
00000020 g       *ABS*	00000000 __flash_exceptions_start
00011dd4 g     F .text	00000068 _fstat_r
0007b284 g     O .bss	00000004 errno
000064cc g     F .text	00000178 I2C_Read16
0007b29c g     O .bss	00000004 alt_argv
0007fc0c g       *ABS*	00000000 _gp
00013bac g     F .text	00000030 usleep
000058bc g     F .text	000000a4 VPG_ColorPanel
00003728 g     F .text	00000154 seperate_color_channels
00076a2c g     O .rwdata	00000180 alt_fd_list
00008ce8 g     F .text	00000038 FrameReader_Go
0000ae90 g     F .text	00000008 _putchar_r
000151c0 g     F .text	00000090 alt_find_dev
0000ac0c g     F .text	00000140 memcpy
0000ed48 g     F .text	0000000c _cleanup_r
00009b14 g     F .text	000000d4 __floatsidf
0000239c g     F .text	00000758 vid_round_corner_points
00014e90 g     F .text	00000078 alt_io_redirect
00009ab8 g     F .text	0000005c __ltdf2
00008518 g     F .text	00000038 MTC2_ClearEvent
00015898 g       *ABS*	00000000 __DTOR_END__
00004348 g     F .text	00000094 GUI_CheckButton
0000af38 g     F .text	00000014 puts
00000604 g     F .text	00000060 vid_clean_screen
00010db4 g     F .text	000000a4 __ratio
000085f0 g     F .text	00000040 QUEUE_IsEmpty
00000770 g     F .text	00000154 vid_scroll_string_init
0001440c g     F .text	00000218 altera_avalon_jtag_uart_read
0000a460 g     F .text	00000014 malloc
0000ae28 g     F .text	0000002c _printf_r
00009ddc g     F .text	00000008 __udivsi3
00013430 g     F .text	000000a4 isatty
00074534 g     O .rodata	000000c8 __mprec_tens
000083b8 g     F .text	00000160 MTC2_GetStatus
0000fb10 g     F .text	0000000c __locale_charset
0000d114 g     F .text	00000040 vsnprintf
000043dc g     F .text	000005a8 GUI_DeskDraw
00015438 g     F .text	0000008c alt_icache_flush
00006644 g     F .text	0000017c I2C_MultipleRead
0007b280 g     O .bss	00000004 __malloc_top_pad
000087b8 g     F .text	00000030 QUEUE_Empty
00077c28 g     O .rwdata	00000004 __mb_cur_max
0000fb1c g     F .text	0000000c _localeconv_r
000103ac g     F .text	0000003c __i2b
0000f430 g     F .text	000004e4 __sfvwrite_r
00008728 g     F .text	00000090 QUEUE_Pop
0000af4c g     F .text	00000064 _sbrk_r
000004cc g     F .text	00000034 RectHeight
00008a80 g     F .text	00000088 VIPFR_ActiveDrawFrame
00008b98 g     F .text	0000008c FrameReader_SetFrame0
00011f0c g     F .text	0000006c _read_r
000769f8 g     O .rwdata	0000000c __lc_ctype
00077c3c g     O .rwdata	00000004 alt_max_fd
0000a1f4 g     F .text	00000104 __unpack_d
00005804 g     F .text	000000b8 VPG_XLine
00011c84 g     F .text	0000013c _fclose_r
0000ed08 g     F .text	00000030 fflush
0007b27c g     O .bss	00000004 __malloc_max_sbrked_mem
00006c90 g     F .text	00000168 I2CL_Read
000751f4 g     O .rwdata	00000bc0 tahomabold_32
0000956c g     F .text	00000054 __adddf3
00004d60 g     F .text	000000c4 GUI_ClearPaintArea
00000288 g     F .text	00000040 PtSet
00010b28 g     F .text	00000148 __b2d
000125c8 g     F .text	00000628 __umoddi3
00013610 g     F .text	000000d4 lseek
00077c14 g     O .rwdata	00000004 __fdlib_version
00077c18 g     O .rwdata	00000004 _global_impure_ptr
00001ea0 g     F .text	00000140 vid_draw_circle
00011178 g     F .text	000005fc _realloc_r
0007b564 g       *ABS*	00000000 __bss_end
000132f0 g     F .text	000000f0 alt_iic_isr_register
00013aa8 g     F .text	00000104 alt_tick
00006274 g     F .text	00000140 I2C_Write16
000003ac g     F .text	00000088 RectOffset
0000827c g     F .text	000000f4 MTC2_Init
00011f78 g     F .text	00000650 __udivdi3
0007450c g     O .rodata	00000028 __mprec_bigtens
00010190 g     F .text	00000104 __s2b
00001c3c g     F .text	00000264 vid_draw_sloped_line
00012d70 g     F .text	0000011c __floatunsidf
000108c8 g     F .text	00000058 __mcmp
00005a6c g     F .text	000000f4 VPG_VGrid
0000eff4 g     F .text	00000018 __fp_lock_all
000132a4 g     F .text	0000004c alt_ic_irq_enabled
00006178 g     F .text	000000fc I2C_Write
00001fe0 g     F .text	000003bc vid_draw_round_corner_box
00007904 g     F .text	000001d8 OC_I2CL_Write
00013a10 g     F .text	00000098 alt_alarm_stop
0007b294 g     O .bss	00000004 alt_irq_active
000076f0 g     F .text	00000064 ACK_judge_for_read
000000ec g     F .exceptions	000000cc alt_irq_handler
00076a04 g     O .rwdata	00000028 alt_dev_null
00007260 g     F .text	00000054 Write32_Data
000071d4 g     F .text	0000008c I2CL_Write16
000067c0 g     F .text	00000084 i2c_start
00012fa8 g     F .text	00000044 alt_dcache_flush_all
00010294 g     F .text	00000068 __hi0bits
00009be8 g     F .text	000000d4 __fixdfsi
00077c54 g       *ABS*	00000000 __ram_rwdata_end
00002f28 g     F .text	00000394 vid_draw_triangle
00077c34 g     O .rwdata	00000008 alt_dev_list
00013c2c g     F .text	000000f0 write
00010fcc g     F .text	000000bc _putc_r
000761cc g     O .rwdata	00000024 szPallete
00003398 g     F .text	00000134 CropImage16
00074634 g       *ABS*	00000000 __ram_rodata_end
00013068 g     F .text	000000b0 fstat
0000a3c8 g     F .text	00000044 __lshrdi3
000008c4 g     F .text	00000390 vid_scroll_string
00007d28 g     F .text	0000006c myprintf
00010640 g     F .text	0000012c __pow5mult
0007b290 g     O .bss	00000004 __nlocale_changed
00009de4 g     F .text	00000008 __umodsi3
00000498 g     F .text	00000034 RectWidth
000032bc g     F .text	000000dc CopyImage16
0007b564 g       *ABS*	00000000 end
00005f38 g     F .text	00000134 GUI_VPG
00008a00 g     F .text	0000003c VIPFR_Go
000056d8 g     F .text	0000006c GUI_ShowInfo
00013f48 g     F .text	000000c0 altera_avalon_jtag_uart_init
00000fc8 g     F .text	000000f8 vid_print_char
00015898 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
000148bc g     F .text	00000088 alt_avalon_timer_sc_init
00009f24 g     F .text	000000ac __clzsi2
00014624 g     F .text	00000224 altera_avalon_jtag_uart_write
00005db8 g     F .text	00000180 GUI_ShowPAT
00002b48 g     F .text	00000054 min3
00000664 g     F .text	000000cc vid_draw_line
000087e8 g     F .text	000000d8 VIPFR_Init
0000efe4 g     F .text	00000004 __sfp_lock_acquire
0000fcf8 g     F .text	000000f8 memchr
0000b1c8 g     F .text	00001e7c ___vfprintf_internal_r
0000afb0 g     F .text	00000058 _sprintf_r
0000f160 g     F .text	000002d0 _free_r
000156bc g     F .text	000001a0 __call_exitprocs
0007b28c g     O .bss	00000004 __mlocale_changed
00005960 g     F .text	0000010c VPG_Grid
00077c20 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000004c _start
0007b2a4 g     O .bss	00000004 _alt_tick_rate
00008370 g     F .text	00000048 MTC2_UnInit
0001076c g     F .text	0000015c __lshift
00008694 g     F .text	00000094 QUEUE_Push
0007b2a8 g     O .bss	00000004 _alt_nticks
00002c00 g     F .text	000000f0 vid_put_pixel_in_span_map
000137ec g     F .text	000000f4 read
000088c0 g     F .text	00000038 VIPFR_UnInit
00005c54 g     F .text	00000164 VPG_ColorBar
00013d88 g     F .text	0000005c alt_sys_init
0001558c g     F .text	00000130 __register_exitproc
000103e8 g     F .text	00000258 __multiply
000012c8 g     F .text	00000260 vid_paint_block
000142b0 g     F .text	00000068 altera_avalon_jtag_uart_close
00009dec g     F .text	00000028 __mulsi3
00074634 g       *ABS*	00000000 __ram_rwdata_start
00015898 g       *ABS*	00000000 __ram_rodata_start
0007b2ac g     O .bss	00000028 __malloc_current_mallinfo
00010c70 g     F .text	00000144 __d2b
00005b60 g     F .text	000000f4 VPG_HGrid
00001870 g     F .text	000000a0 vid_color_convert24_16
00013de4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015364 g     F .text	000000d4 alt_get_fd
00014a84 g     F .text	00000154 alt_busy_sleep
0000a2f8 g     F .text	000000d0 __fpcmp_parts_d
00011c20 g     F .text	00000064 _close_r
00004e24 g     F .text	000008b4 GUI
00003c10 g     F .text	00000298 alpha_blending
00015510 g     F .text	0000007c memcmp
00013ea4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0007b564 g       *ABS*	00000000 __alt_stack_base
00013ef4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0002f5ac g     O .rodata	000448f0 gesture_bmp
0000d154 g     F .text	00000174 __swsetup_r
0000730c g     F .text	000000f4 oc_i2c_init
00009904 g     F .text	000001b4 __divdf3
0000eee8 g     F .text	000000fc __sfp
00010ecc g     F .text	0000007c __copybits
000765f0 g     O .rwdata	00000408 __malloc_av_
0000eff0 g     F .text	00000004 __sinit_lock_release
0000d068 g     F .text	000000ac _vsnprintf_r
00006844 g     F .text	00000078 i2c_stop
00009620 g     F .text	000002e4 __muldf3
000117ac g     F .text	00000054 __sread
00015250 g     F .text	00000114 alt_find_file
00014c28 g     F .text	000000a0 alt_dev_llist_insert
0001375c g     F .text	00000020 __malloc_lock
0000197c g     F .text	000002c0 vid_copy_line_to_frame_buffer
00013960 g     F .text	000000b0 sbrk
0000eb20 g     F .text	000001e8 _fflush_r
00011b54 g     F .text	000000cc _calloc_r
00008550 g     F .text	00000070 QUEUE_New
0007b274 g       *ABS*	00000000 __bss_start
0000ad4c g     F .text	000000dc memset
0000606c g     F .text	000000cc main
0007b2a0 g     O .bss	00000004 alt_envp
0007b278 g     O .bss	00000004 __malloc_max_total_mem
00007d94 g     F .text	00000088 myprintf_hexarray
00013e44 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00005744 g     F .text	00000060 GUI_ShowTouchPoint
00006a00 g     F .text	00000150 i2c_read
00011acc g     F .text	0000001c __swbuf
00008cb0 g     F .text	00000038 FrameReader_SelectFrame
00074634 g     O .rwdata	00000bc0 tahomabold_20
000118e4 g     F .text	00000008 __sclose
00009210 g     F .text	00000008 matherr
02000000 g       *ABS*	00000000 __alt_heap_limit
00003ea8 g     F .text	000001c0 vid_print_char_alpha
00011dc0 g     F .text	00000014 fclose
00077c0c g     O .rwdata	00000004 cour10_font
0007b3d4 g     O .bss	00000190 _atexit0
0000d504 g     F .text	0000161c _dtoa_r
0000a488 g     F .text	00000784 _malloc_r
00077c40 g     O .rwdata	00000004 alt_errno
0000f914 g     F .text	000000a8 _fwalk
00000500 g     F .text	000000c0 PtDistance
000002c8 g     F .text	0000005c RectSet
00011088 g     F .text	000000f0 putc
00009d30 g     F .text	00000050 __divsi3
00000434 g     F .text	00000064 RectCopy
00074314 g     O .rodata	00000014 __thenan_df
0000f024 g     F .text	0000013c _malloc_trim_r
00015898 g       *ABS*	00000000 __CTOR_END__
00008a3c g     F .text	00000044 VIPFR_GetDrawFrame
000118ec g     F .text	000000a4 strcmp
000039c4 g     F .text	0000024c read_from_frame
00015898 g       *ABS*	00000000 __flash_rodata_start
00015898 g       *ABS*	00000000 __DTOR_LIST__
0000124c g     F .text	0000007c vid_get_pixel
00012c4c g     F .text	0000005c __nedf2
00013d54 g     F .text	00000034 alt_irq_init
000138e0 g     F .text	00000080 alt_release_fd
0000b008 g     F .text	0000006c sprintf
00074328 g     O .rodata	00000100 __clz_tab
00007cf8 g     F .text	00000030 debug_output
0007b288 g     O .bss	00000004 _PathLocale
000154c4 g     F .text	00000014 atexit
00011ae8 g     F .text	0000006c _write_r
00000204 g     F .text	00000084 IsPtInRect
0000fb28 g     F .text	0000001c setlocale
00077c1c g     O .rwdata	00000004 _impure_ptr
0007b298 g     O .bss	00000004 alt_argc
00014d24 g     F .text	0000005c _do_dtors
00007e1c g     F .text	0000008c myprintf_dwordarray
00006df8 g     F .text	000001c0 I2CL_MultipleRead
00000020 g       .exceptions	00000000 alt_irq_entry
00010ac8 g     F .text	00000060 __ulp
00011774 g     F .text	00000038 __isinfd
0000f00c g     F .text	00000018 __fp_unlock_all
00077c2c g     O .rwdata	00000008 alt_fs_list
000072b4 g     F .text	00000058 Read32_Data
00000d70 g     F .text	00000108 vid_print_string
00007754 g     F .text	000001b0 OC_I2C_Read
00008c24 g     F .text	0000008c FrameReader_SetFrame1
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000fb44 g     F .text	0000000c localeconv
00008f20 g     F .text	000002c4 __ieee754_sqrt
00013118 g     F .text	00000050 alt_ic_isr_register
00077c54 g       *ABS*	00000000 _edata
00004d18 g     F .text	00000048 GUI_TraceGesture
0007b564 g       *ABS*	00000000 _end
000057a4 g     F .text	00000060 ShowInfo
00002af4 g     F .text	00000054 max3
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00014318 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00008d20 g     F .text	000000b8 VIPFR_ReserveBackground
00013204 g     F .text	000000a0 alt_ic_irq_disable
00001824 g     F .text	0000004c vid_merge_colors
00011800 g     F .text	00000088 __swrite
00077c24 g     O .rwdata	00000004 __malloc_trim_threshold
000151a0 g     F .text	00000020 altera_nios2_qsys_irq_init
000154d8 g     F .text	00000038 exit
0000f9bc g     F .text	000000b8 _fwalk_reent
00010920 g     F .text	000001a8 __mdiff
00004984 g     F .text	0000008c IsContinuedPoint
00009d80 g     F .text	0000005c __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000efe8 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000085c0 g     F .text	00000030 QUEUE_Delete
000010c0 g     F .text	0000018c vid_set_pixel
000088f8 g     F .text	00000108 VIPFR_SetFrameSize
00007adc g     F .text	0000021c OC_I2CL_Read
0001585c g     F .text	0000003c _exit
000091e4 g     F .text	0000002c __isnand
00014944 g     F .text	00000140 alt_alarm_start
00000730 g     F .text	00000040 vid_scroll_string_quit
00009e14 g     F .text	00000110 __muldi3
0000fb50 g     F .text	000001a8 __smakebuf_r
0000b108 g     F .text	0000008c strlen
00015048 g     F .text	00000158 open
00012d0c g     F .text	00000064 __gedf2
00000324 g     F .text	00000088 RectInflate
00014d80 g     F .text	00000030 alt_icache_flush_all
00077c44 g     O .rwdata	00000004 alt_priority_mask
00013168 g     F .text	0000009c alt_ic_irq_enable
0000d044 g     F .text	00000024 __vfprintf_internal
000095c0 g     F .text	00000060 __subdf3
00002cf0 g     F .text	00000238 vid_bres_scan_edges
000102fc g     F .text	000000b0 __lo0bits
00077c4c g     O .rwdata	00000008 alt_alarm_list
00002b9c g     F .text	00000064 max_diff3
00014cc8 g     F .text	0000005c _do_ctors
00006b50 g     F .text	00000140 I2CL_Write
0000387c g     F .text	00000148 merge_color_channels
00012edc g     F .text	000000cc close
00013540 g     F .text	00000080 alt_load
00009fd0 g     F .text	00000224 __pack_d
0000a474 g     F .text	00000014 free
0000efec g     F .text	00000004 __sinit_lock_acquire
0001004c g     F .text	00000144 __multadd
00010024 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c00234 	movhi	r3,8
 130:	18ecb504 	addi	r3,r3,-19756
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	01000234 	movhi	r4,8
 148:	212cb504 	addi	r4,r4,-19756
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1c4:	00bffd16 	blt	zero,r2,1bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c8:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d0:	068001f4 	movhi	gp,7
    ori gp, gp, %lo(_gp)
     1d4:	d6bf0314 	ori	gp,gp,64524
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d8:	008001f4 	movhi	r2,7
    ori r2, r2, %lo(__bss_start)
     1dc:	10ac9d14 	ori	r2,r2,45684

    movhi r3, %hi(__bss_end)
     1e0:	00c001f4 	movhi	r3,7
    ori r3, r3, %lo(__bss_end)
     1e4:	18ed5914 	ori	r3,r3,46436

    beq r2, r3, 1f
     1e8:	10c00326 	beq	r2,r3,1f8 <_start+0x40>

0:
    stw zero, (r2)
     1ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f4:	10fffd36 	bltu	r2,r3,1ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f8:	00135400 	call	13540 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1fc:	00136e40 	call	136e4 <alt_main>

00000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     200:	003fff06 	br	200 <alt_after_alt_main>

00000204 <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
     204:	defffc04 	addi	sp,sp,-16
     208:	df000315 	stw	fp,12(sp)
     20c:	df000304 	addi	fp,sp,12
     210:	e13ffe15 	stw	r4,-8(fp)
     214:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
     218:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
     21c:	e0bffe17 	ldw	r2,-8(fp)
     220:	10c00017 	ldw	r3,0(r2)
     224:	e0bfff17 	ldw	r2,-4(fp)
     228:	10800017 	ldw	r2,0(r2)
     22c:	18801116 	blt	r3,r2,274 <IsPtInRect+0x70>
     230:	e0bffe17 	ldw	r2,-8(fp)
     234:	10800017 	ldw	r2,0(r2)
     238:	e0ffff17 	ldw	r3,-4(fp)
     23c:	18c00117 	ldw	r3,4(r3)
     240:	18800c16 	blt	r3,r2,274 <IsPtInRect+0x70>
     244:	e0bffe17 	ldw	r2,-8(fp)
     248:	10c00117 	ldw	r3,4(r2)
     24c:	e0bfff17 	ldw	r2,-4(fp)
     250:	10800217 	ldw	r2,8(r2)
     254:	18800716 	blt	r3,r2,274 <IsPtInRect+0x70>
     258:	e0bffe17 	ldw	r2,-8(fp)
     25c:	10800117 	ldw	r2,4(r2)
     260:	e0ffff17 	ldw	r3,-4(fp)
     264:	18c00317 	ldw	r3,12(r3)
     268:	18800216 	blt	r3,r2,274 <IsPtInRect+0x70>
        bYes = TRUE;
     26c:	00800044 	movi	r2,1
     270:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
     274:	e0bffd17 	ldw	r2,-12(fp)
}
     278:	e037883a 	mov	sp,fp
     27c:	df000017 	ldw	fp,0(sp)
     280:	dec00104 	addi	sp,sp,4
     284:	f800283a 	ret

00000288 <PtSet>:

void PtSet(POINT *pt, int x, int y){
     288:	defffc04 	addi	sp,sp,-16
     28c:	df000315 	stw	fp,12(sp)
     290:	df000304 	addi	fp,sp,12
     294:	e13ffd15 	stw	r4,-12(fp)
     298:	e17ffe15 	stw	r5,-8(fp)
     29c:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
     2a0:	e0bffd17 	ldw	r2,-12(fp)
     2a4:	e0fffe17 	ldw	r3,-8(fp)
     2a8:	10c00015 	stw	r3,0(r2)
    pt->y = y;
     2ac:	e0bffd17 	ldw	r2,-12(fp)
     2b0:	e0ffff17 	ldw	r3,-4(fp)
     2b4:	10c00115 	stw	r3,4(r2)
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
     2c8:	defffb04 	addi	sp,sp,-20
     2cc:	df000415 	stw	fp,16(sp)
     2d0:	df000404 	addi	fp,sp,16
     2d4:	e13ffc15 	stw	r4,-16(fp)
     2d8:	e17ffd15 	stw	r5,-12(fp)
     2dc:	e1bffe15 	stw	r6,-8(fp)
     2e0:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
     2e4:	e0bffc17 	ldw	r2,-16(fp)
     2e8:	e0fffd17 	ldw	r3,-12(fp)
     2ec:	10c00015 	stw	r3,0(r2)
    rc->right = right;
     2f0:	e0bffc17 	ldw	r2,-16(fp)
     2f4:	e0fffe17 	ldw	r3,-8(fp)
     2f8:	10c00115 	stw	r3,4(r2)
    rc->top = top;
     2fc:	e0bffc17 	ldw	r2,-16(fp)
     300:	e0ffff17 	ldw	r3,-4(fp)
     304:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
     308:	e0bffc17 	ldw	r2,-16(fp)
     30c:	e0c00117 	ldw	r3,4(fp)
     310:	10c00315 	stw	r3,12(r2)
}
     314:	e037883a 	mov	sp,fp
     318:	df000017 	ldw	fp,0(sp)
     31c:	dec00104 	addi	sp,sp,4
     320:	f800283a 	ret

00000324 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
     324:	defffc04 	addi	sp,sp,-16
     328:	df000315 	stw	fp,12(sp)
     32c:	df000304 	addi	fp,sp,12
     330:	e13ffd15 	stw	r4,-12(fp)
     334:	e17ffe15 	stw	r5,-8(fp)
     338:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
     33c:	e0bffd17 	ldw	r2,-12(fp)
     340:	10c00017 	ldw	r3,0(r2)
     344:	e0bffe17 	ldw	r2,-8(fp)
     348:	1887c83a 	sub	r3,r3,r2
     34c:	e0bffd17 	ldw	r2,-12(fp)
     350:	10c00015 	stw	r3,0(r2)
    rc->right += x;
     354:	e0bffd17 	ldw	r2,-12(fp)
     358:	10c00117 	ldw	r3,4(r2)
     35c:	e0bffe17 	ldw	r2,-8(fp)
     360:	1887883a 	add	r3,r3,r2
     364:	e0bffd17 	ldw	r2,-12(fp)
     368:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
     36c:	e0bffd17 	ldw	r2,-12(fp)
     370:	10c00217 	ldw	r3,8(r2)
     374:	e0bfff17 	ldw	r2,-4(fp)
     378:	1887c83a 	sub	r3,r3,r2
     37c:	e0bffd17 	ldw	r2,-12(fp)
     380:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
     384:	e0bffd17 	ldw	r2,-12(fp)
     388:	10c00317 	ldw	r3,12(r2)
     38c:	e0bfff17 	ldw	r2,-4(fp)
     390:	1887883a 	add	r3,r3,r2
     394:	e0bffd17 	ldw	r2,-12(fp)
     398:	10c00315 	stw	r3,12(r2)
}
     39c:	e037883a 	mov	sp,fp
     3a0:	df000017 	ldw	fp,0(sp)
     3a4:	dec00104 	addi	sp,sp,4
     3a8:	f800283a 	ret

000003ac <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
     3ac:	defffc04 	addi	sp,sp,-16
     3b0:	df000315 	stw	fp,12(sp)
     3b4:	df000304 	addi	fp,sp,12
     3b8:	e13ffd15 	stw	r4,-12(fp)
     3bc:	e17ffe15 	stw	r5,-8(fp)
     3c0:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
     3c4:	e0bffd17 	ldw	r2,-12(fp)
     3c8:	10c00017 	ldw	r3,0(r2)
     3cc:	e0bffe17 	ldw	r2,-8(fp)
     3d0:	1887883a 	add	r3,r3,r2
     3d4:	e0bffd17 	ldw	r2,-12(fp)
     3d8:	10c00015 	stw	r3,0(r2)
    rc->right += x;
     3dc:	e0bffd17 	ldw	r2,-12(fp)
     3e0:	10c00117 	ldw	r3,4(r2)
     3e4:	e0bffe17 	ldw	r2,-8(fp)
     3e8:	1887883a 	add	r3,r3,r2
     3ec:	e0bffd17 	ldw	r2,-12(fp)
     3f0:	10c00115 	stw	r3,4(r2)
    rc->top += y;
     3f4:	e0bffd17 	ldw	r2,-12(fp)
     3f8:	10c00217 	ldw	r3,8(r2)
     3fc:	e0bfff17 	ldw	r2,-4(fp)
     400:	1887883a 	add	r3,r3,r2
     404:	e0bffd17 	ldw	r2,-12(fp)
     408:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
     40c:	e0bffd17 	ldw	r2,-12(fp)
     410:	10c00317 	ldw	r3,12(r2)
     414:	e0bfff17 	ldw	r2,-4(fp)
     418:	1887883a 	add	r3,r3,r2
     41c:	e0bffd17 	ldw	r2,-12(fp)
     420:	10c00315 	stw	r3,12(r2)
}
     424:	e037883a 	mov	sp,fp
     428:	df000017 	ldw	fp,0(sp)
     42c:	dec00104 	addi	sp,sp,4
     430:	f800283a 	ret

00000434 <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
     434:	defffd04 	addi	sp,sp,-12
     438:	df000215 	stw	fp,8(sp)
     43c:	df000204 	addi	fp,sp,8
     440:	e13ffe15 	stw	r4,-8(fp)
     444:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
     448:	e0bfff17 	ldw	r2,-4(fp)
     44c:	10c00017 	ldw	r3,0(r2)
     450:	e0bffe17 	ldw	r2,-8(fp)
     454:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
     458:	e0bfff17 	ldw	r2,-4(fp)
     45c:	10c00117 	ldw	r3,4(r2)
     460:	e0bffe17 	ldw	r2,-8(fp)
     464:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
     468:	e0bfff17 	ldw	r2,-4(fp)
     46c:	10c00217 	ldw	r3,8(r2)
     470:	e0bffe17 	ldw	r2,-8(fp)
     474:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
     478:	e0bfff17 	ldw	r2,-4(fp)
     47c:	10c00317 	ldw	r3,12(r2)
     480:	e0bffe17 	ldw	r2,-8(fp)
     484:	10c00315 	stw	r3,12(r2)
}
     488:	e037883a 	mov	sp,fp
     48c:	df000017 	ldw	fp,0(sp)
     490:	dec00104 	addi	sp,sp,4
     494:	f800283a 	ret

00000498 <RectWidth>:

int RectWidth(RECT *rc){
     498:	defffe04 	addi	sp,sp,-8
     49c:	df000115 	stw	fp,4(sp)
     4a0:	df000104 	addi	fp,sp,4
     4a4:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
     4a8:	e0bfff17 	ldw	r2,-4(fp)
     4ac:	10c00117 	ldw	r3,4(r2)
     4b0:	e0bfff17 	ldw	r2,-4(fp)
     4b4:	10800017 	ldw	r2,0(r2)
     4b8:	1885c83a 	sub	r2,r3,r2
}
     4bc:	e037883a 	mov	sp,fp
     4c0:	df000017 	ldw	fp,0(sp)
     4c4:	dec00104 	addi	sp,sp,4
     4c8:	f800283a 	ret

000004cc <RectHeight>:

int RectHeight(RECT *rc){
     4cc:	defffe04 	addi	sp,sp,-8
     4d0:	df000115 	stw	fp,4(sp)
     4d4:	df000104 	addi	fp,sp,4
     4d8:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
     4dc:	e0bfff17 	ldw	r2,-4(fp)
     4e0:	10c00317 	ldw	r3,12(r2)
     4e4:	e0bfff17 	ldw	r2,-4(fp)
     4e8:	10800217 	ldw	r2,8(r2)
     4ec:	1885c83a 	sub	r2,r3,r2
}
     4f0:	e037883a 	mov	sp,fp
     4f4:	df000017 	ldw	fp,0(sp)
     4f8:	dec00104 	addi	sp,sp,4
     4fc:	f800283a 	ret

00000500 <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
     500:	defff804 	addi	sp,sp,-32
     504:	dfc00715 	stw	ra,28(sp)
     508:	df000615 	stw	fp,24(sp)
     50c:	dc000515 	stw	r16,20(sp)
     510:	df000504 	addi	fp,sp,20
     514:	e13ffe15 	stw	r4,-8(fp)
     518:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10c00017 	ldw	r3,0(r2)
     524:	e0bfff17 	ldw	r2,-4(fp)
     528:	10800017 	ldw	r2,0(r2)
     52c:	1885c83a 	sub	r2,r3,r2
     530:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
     534:	e0bffe17 	ldw	r2,-8(fp)
     538:	10c00117 	ldw	r3,4(r2)
     53c:	e0bfff17 	ldw	r2,-4(fp)
     540:	10800117 	ldw	r2,4(r2)
     544:	1885c83a 	sub	r2,r3,r2
     548:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
     54c:	e13ffb17 	ldw	r4,-20(fp)
     550:	e17ffb17 	ldw	r5,-20(fp)
     554:	0009dec0 	call	9dec <__mulsi3>
     558:	1021883a 	mov	r16,r2
     55c:	e13ffc17 	ldw	r4,-16(fp)
     560:	e17ffc17 	ldw	r5,-16(fp)
     564:	0009dec0 	call	9dec <__mulsi3>
     568:	8085883a 	add	r2,r16,r2
     56c:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
     570:	e13ffd17 	ldw	r4,-12(fp)
     574:	0009b140 	call	9b14 <__floatsidf>
     578:	100b883a 	mov	r5,r2
     57c:	180d883a 	mov	r6,r3
     580:	2809883a 	mov	r4,r5
     584:	300b883a 	mov	r5,r6
     588:	0008dd80 	call	8dd8 <sqrt>
     58c:	100b883a 	mov	r5,r2
     590:	180d883a 	mov	r6,r3
     594:	2809883a 	mov	r4,r5
     598:	300b883a 	mov	r5,r6
     59c:	0009be80 	call	9be8 <__fixdfsi>
     5a0:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
     5a4:	e0bffd17 	ldw	r2,-12(fp)
}
     5a8:	e037883a 	mov	sp,fp
     5ac:	dfc00217 	ldw	ra,8(sp)
     5b0:	df000117 	ldw	fp,4(sp)
     5b4:	dc000017 	ldw	r16,0(sp)
     5b8:	dec00304 	addi	sp,sp,12
     5bc:	f800283a 	ret

000005c0 <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
     5c0:	defffd04 	addi	sp,sp,-12
     5c4:	df000215 	stw	fp,8(sp)
     5c8:	df000204 	addi	fp,sp,8
     5cc:	e13ffe15 	stw	r4,-8(fp)
     5d0:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
     5d4:	e0bfff17 	ldw	r2,-4(fp)
     5d8:	10c00017 	ldw	r3,0(r2)
     5dc:	e0bffe17 	ldw	r2,-8(fp)
     5e0:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c00117 	ldw	r3,4(r2)
     5ec:	e0bffe17 	ldw	r2,-8(fp)
     5f0:	10c00115 	stw	r3,4(r2)
}
     5f4:	e037883a 	mov	sp,fp
     5f8:	df000017 	ldw	fp,0(sp)
     5fc:	dec00104 	addi	sp,sp,4
     600:	f800283a 	ret

00000604 <vid_clean_screen>:
#include "sys/alt_cache.h"
#include "system.h"


// richard add
void vid_clean_screen(alt_video_display* display, int color){
     604:	defffa04 	addi	sp,sp,-24
     608:	dfc00515 	stw	ra,20(sp)
     60c:	df000415 	stw	fp,16(sp)
     610:	df000404 	addi	fp,sp,16
     614:	e13ffe15 	stw	r4,-8(fp)
     618:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
     61c:	e0bffe17 	ldw	r2,-8(fp)
     620:	10c00517 	ldw	r3,20(r2)
     624:	e0bffe17 	ldw	r2,-8(fp)
     628:	10800617 	ldw	r2,24(r2)
     62c:	e13fff17 	ldw	r4,-4(fp)
     630:	d9000015 	stw	r4,0(sp)
     634:	e13ffe17 	ldw	r4,-8(fp)
     638:	d9000115 	stw	r4,4(sp)
     63c:	0009883a 	mov	r4,zero
     640:	000b883a 	mov	r5,zero
     644:	180d883a 	mov	r6,r3
     648:	100f883a 	mov	r7,r2
     64c:	00012c80 	call	12c8 <vid_paint_block>
}
     650:	e037883a 	mov	sp,fp
     654:	dfc00117 	ldw	ra,4(sp)
     658:	df000017 	ldw	fp,0(sp)
     65c:	dec00204 	addi	sp,sp,8
     660:	f800283a 	ret

00000664 <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
     664:	defff704 	addi	sp,sp,-36
     668:	dfc00815 	stw	ra,32(sp)
     66c:	df000715 	stw	fp,28(sp)
     670:	df000704 	addi	fp,sp,28
     674:	e13ffc15 	stw	r4,-16(fp)
     678:	e17ffd15 	stw	r5,-12(fp)
     67c:	e1bffe15 	stw	r6,-8(fp)
     680:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
     684:	e0fffd17 	ldw	r3,-12(fp)
     688:	e0bfff17 	ldw	r2,-4(fp)
     68c:	1880111e 	bne	r3,r2,6d4 <vid_draw_line+0x70>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
     690:	e0bffc17 	ldw	r2,-16(fp)
     694:	113fffcc 	andi	r4,r2,65535
     698:	2120001c 	xori	r4,r4,32768
     69c:	21200004 	addi	r4,r4,-32768
     6a0:	e0bffe17 	ldw	r2,-8(fp)
     6a4:	10ffffcc 	andi	r3,r2,65535
     6a8:	18e0001c 	xori	r3,r3,32768
     6ac:	18e00004 	addi	r3,r3,-32768
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
     6b0:	e0bffd17 	ldw	r2,-12(fp)
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
     6b4:	10bfffcc 	andi	r2,r2,65535
     6b8:	e1400417 	ldw	r5,16(fp)
     6bc:	d9400015 	stw	r5,0(sp)
     6c0:	180b883a 	mov	r5,r3
     6c4:	100d883a 	mov	r6,r2
     6c8:	e1c00317 	ldw	r7,12(fp)
     6cc:	00015280 	call	1528 <vid_draw_horiz_line>
     6d0:	00001206 	br	71c <vid_draw_line+0xb8>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
     6d4:	e0bffc17 	ldw	r2,-16(fp)
     6d8:	113fffcc 	andi	r4,r2,65535
                          (unsigned short)vert_start, 
     6dc:	e0bffd17 	ldw	r2,-12(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
     6e0:	117fffcc 	andi	r5,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
     6e4:	e0bffe17 	ldw	r2,-8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
     6e8:	10ffffcc 	andi	r3,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
     6ec:	e0bfff17 	ldw	r2,-4(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
     6f0:	10bfffcc 	andi	r2,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
     6f4:	e1800217 	ldw	r6,8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
     6f8:	31bfffcc 	andi	r6,r6,65535
     6fc:	d9800015 	stw	r6,0(sp)
     700:	e1800317 	ldw	r6,12(fp)
     704:	d9800115 	stw	r6,4(sp)
     708:	e1800417 	ldw	r6,16(fp)
     70c:	d9800215 	stw	r6,8(sp)
     710:	180d883a 	mov	r6,r3
     714:	100f883a 	mov	r7,r2
     718:	0001c3c0 	call	1c3c <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
     71c:	e037883a 	mov	sp,fp
     720:	dfc00117 	ldw	ra,4(sp)
     724:	df000017 	ldw	fp,0(sp)
     728:	dec00204 	addi	sp,sp,8
     72c:	f800283a 	ret

00000730 <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
     730:	defffd04 	addi	sp,sp,-12
     734:	dfc00215 	stw	ra,8(sp)
     738:	df000115 	stw	fp,4(sp)
     73c:	df000104 	addi	fp,sp,4
     740:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
     744:	e0bfff17 	ldw	r2,-4(fp)
     748:	10800517 	ldw	r2,20(r2)
     74c:	1009883a 	mov	r4,r2
     750:	000a4740 	call	a474 <free>
  free(scroll);
     754:	e13fff17 	ldw	r4,-4(fp)
     758:	000a4740 	call	a474 <free>
}
     75c:	e037883a 	mov	sp,fp
     760:	dfc00117 	ldw	ra,4(sp)
     764:	df000017 	ldw	fp,0(sp)
     768:	dec00204 	addi	sp,sp,8
     76c:	f800283a 	ret

00000770 <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
     770:	defff904 	addi	sp,sp,-28
     774:	dfc00615 	stw	ra,24(sp)
     778:	df000515 	stw	fp,20(sp)
     77c:	df000504 	addi	fp,sp,20
     780:	e13ffc15 	stw	r4,-16(fp)
     784:	e17ffd15 	stw	r5,-12(fp)
     788:	e1bffe15 	stw	r6,-8(fp)
     78c:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
     790:	01000f04 	movi	r4,60
     794:	000a4600 	call	a460 <malloc>
     798:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
     79c:	e0bffb17 	ldw	r2,-20(fp)
     7a0:	e0fffc17 	ldw	r3,-16(fp)
     7a4:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
     7a8:	e0bffb17 	ldw	r2,-20(fp)
     7ac:	e0fffd17 	ldw	r3,-12(fp)
     7b0:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
     7b4:	e0bffb17 	ldw	r2,-20(fp)
     7b8:	e0fffe17 	ldw	r3,-8(fp)
     7bc:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
     7c0:	e0bffb17 	ldw	r2,-20(fp)
     7c4:	e0ffff17 	ldw	r3,-4(fp)
     7c8:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
     7cc:	e0bffb17 	ldw	r2,-20(fp)
     7d0:	e0c00217 	ldw	r3,8(fp)
     7d4:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
     7d8:	e1000517 	ldw	r4,20(fp)
     7dc:	000b1080 	call	b108 <strlen>
     7e0:	10800084 	addi	r2,r2,2
     7e4:	1009883a 	mov	r4,r2
     7e8:	000a4600 	call	a460 <malloc>
     7ec:	1007883a 	mov	r3,r2
     7f0:	e0bffb17 	ldw	r2,-20(fp)
     7f4:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
     7f8:	e0bffb17 	ldw	r2,-20(fp)
     7fc:	10800517 	ldw	r2,20(r2)
     800:	1009883a 	mov	r4,r2
     804:	e1400517 	ldw	r5,20(fp)
     808:	000b0740 	call	b074 <strcpy>
  scroll->font = font;
     80c:	e0bffb17 	ldw	r2,-20(fp)
     810:	e0c00317 	ldw	r3,12(fp)
     814:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
     818:	e0bffb17 	ldw	r2,-20(fp)
     81c:	e0c00417 	ldw	r3,16(fp)
     820:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     824:	00800234 	movhi	r2,8
     828:	10acaa04 	addi	r2,r2,-19800
     82c:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
     830:	1007883a 	mov	r3,r2
     834:	e0bffb17 	ldw	r2,-20(fp)
     838:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
     83c:	e0bffb17 	ldw	r2,-20(fp)
     840:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
     844:	e0bffb17 	ldw	r2,-20(fp)
     848:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
     84c:	e0bffb17 	ldw	r2,-20(fp)
     850:	10c00217 	ldw	r3,8(r2)
     854:	e0bffb17 	ldw	r2,-20(fp)
     858:	10800017 	ldw	r2,0(r2)
     85c:	1887c83a 	sub	r3,r3,r2
     860:	e0bffb17 	ldw	r2,-20(fp)
     864:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
     868:	e1000517 	ldw	r4,20(fp)
     86c:	000b1080 	call	b108 <strlen>
     870:	1007883a 	mov	r3,r2
     874:	e0bffb17 	ldw	r2,-20(fp)
     878:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
     87c:	e0bffb17 	ldw	r2,-20(fp)
     880:	10800c17 	ldw	r2,48(r2)
     884:	100690fa 	slli	r3,r2,3
     888:	e0bffb17 	ldw	r2,-20(fp)
     88c:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
     890:	e0bffb17 	ldw	r2,-20(fp)
     894:	10c00b17 	ldw	r3,44(r2)
     898:	e0bffb17 	ldw	r2,-20(fp)
     89c:	10800e17 	ldw	r2,56(r2)
     8a0:	1887883a 	add	r3,r3,r2
     8a4:	e0bffb17 	ldw	r2,-20(fp)
     8a8:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
     8ac:	e0bffb17 	ldw	r2,-20(fp)
  
}
     8b0:	e037883a 	mov	sp,fp
     8b4:	dfc00117 	ldw	ra,4(sp)
     8b8:	df000017 	ldw	fp,0(sp)
     8bc:	dec00204 	addi	sp,sp,8
     8c0:	f800283a 	ret

000008c4 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
     8c4:	deffec04 	addi	sp,sp,-80
     8c8:	dfc01315 	stw	ra,76(sp)
     8cc:	df001215 	stw	fp,72(sp)
     8d0:	dc401115 	stw	r17,68(sp)
     8d4:	dc001015 	stw	r16,64(sp)
     8d8:	df001004 	addi	fp,sp,64
     8dc:	e13ffe15 	stw	r4,-8(fp)
     8e0:	e17fff15 	stw	r5,-4(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
     8e4:	00800044 	movi	r2,1
     8e8:	e0bff805 	stb	r2,-32(fp)
     8ec:	00800234 	movhi	r2,8
     8f0:	10acaa04 	addi	r2,r2,-19800
     8f4:	10800017 	ldw	r2,0(r2)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
     8f8:	1021883a 	mov	r16,r2
     8fc:	e0bffe17 	ldw	r2,-8(fp)
     900:	10800817 	ldw	r2,32(r2)
     904:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     908:	00800234 	movhi	r2,8
     90c:	10aca904 	addi	r2,r2,-19804
     910:	10800017 	ldw	r2,0(r2)
     914:	1007883a 	mov	r3,r2
     918:	e0bffe17 	ldw	r2,-8(fp)
     91c:	10800717 	ldw	r2,28(r2)
     920:	1809883a 	mov	r4,r3
     924:	100b883a 	mov	r5,r2
     928:	0009dec0 	call	9dec <__mulsi3>
     92c:	1009883a 	mov	r4,r2
     930:	0140fa04 	movi	r5,1000
     934:	0009ddc0 	call	9ddc <__udivsi3>
     938:	8885883a 	add	r2,r17,r2
     93c:	8080bd36 	bltu	r16,r2,c34 <vid_scroll_string+0x370>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     940:	00800234 	movhi	r2,8
     944:	10acaa04 	addi	r2,r2,-19800
     948:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
     94c:	1007883a 	mov	r3,r2
     950:	e0bffe17 	ldw	r2,-8(fp)
     954:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
     958:	e0bffe17 	ldw	r2,-8(fp)
     95c:	10800a03 	ldbu	r2,40(r2)
     960:	10803fcc 	andi	r2,r2,255
     964:	1080201c 	xori	r2,r2,128
     968:	10bfe004 	addi	r2,r2,-128
     96c:	1000061e 	bne	r2,zero,988 <vid_scroll_string+0xc4>
      scroll->text_scroll_index = 0;
     970:	e0bffe17 	ldw	r2,-8(fp)
     974:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
     978:	e0bffe17 	ldw	r2,-8(fp)
     97c:	00c00044 	movi	r3,1
     980:	10c00a05 	stb	r3,40(r2)
     984:	00000e06 	br	9c0 <vid_scroll_string+0xfc>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
     988:	e0bffe17 	ldw	r2,-8(fp)
     98c:	10c00917 	ldw	r3,36(r2)
     990:	e0bffe17 	ldw	r2,-8(fp)
     994:	10800d17 	ldw	r2,52(r2)
     998:	18800316 	blt	r3,r2,9a8 <vid_scroll_string+0xe4>
      scroll->text_scroll_started = 0;
     99c:	e0bffe17 	ldw	r2,-8(fp)
     9a0:	10000a05 	stb	zero,40(r2)
     9a4:	00000606 	br	9c0 <vid_scroll_string+0xfc>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
     9a8:	e0bffe17 	ldw	r2,-8(fp)
     9ac:	10c00917 	ldw	r3,36(r2)
     9b0:	e0bff807 	ldb	r2,-32(fp)
     9b4:	1887883a 	add	r3,r3,r2
     9b8:	e0bffe17 	ldw	r2,-8(fp)
     9bc:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
     9c0:	e0bffe17 	ldw	r2,-8(fp)
     9c4:	10c00917 	ldw	r3,36(r2)
     9c8:	e0bffe17 	ldw	r2,-8(fp)
     9cc:	10800b17 	ldw	r2,44(r2)
     9d0:	18800a0e 	bge	r3,r2,9fc <vid_scroll_string+0x138>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
     9d4:	e0bffe17 	ldw	r2,-8(fp)
     9d8:	10c00017 	ldw	r3,0(r2)
     9dc:	e0bffe17 	ldw	r2,-8(fp)
     9e0:	10800b17 	ldw	r2,44(r2)
     9e4:	1887883a 	add	r3,r3,r2
     9e8:	e0bffe17 	ldw	r2,-8(fp)
     9ec:	10800917 	ldw	r2,36(r2)
     9f0:	1885c83a 	sub	r2,r3,r2
     9f4:	e0bff315 	stw	r2,-52(fp)
     9f8:	00000306 	br	a08 <vid_scroll_string+0x144>
    } else {
      x_start = scroll->hbegin;
     9fc:	e0bffe17 	ldw	r2,-8(fp)
     a00:	10800017 	ldw	r2,0(r2)
     a04:	e0bff315 	stw	r2,-52(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
     a08:	e0bffe17 	ldw	r2,-8(fp)
     a0c:	10800e17 	ldw	r2,56(r2)
     a10:	e0fffe17 	ldw	r3,-8(fp)
     a14:	18c00917 	ldw	r3,36(r3)
     a18:	1880040e 	bge	r3,r2,a2c <vid_scroll_string+0x168>
      x_end = scroll->hend;
     a1c:	e0bffe17 	ldw	r2,-8(fp)
     a20:	10800217 	ldw	r2,8(r2)
     a24:	e0bff415 	stw	r2,-48(fp)
     a28:	00000906 	br	a50 <vid_scroll_string+0x18c>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
     a2c:	e0bffe17 	ldw	r2,-8(fp)
     a30:	10c00217 	ldw	r3,8(r2)
     a34:	e0bffe17 	ldw	r2,-8(fp)
     a38:	10800917 	ldw	r2,36(r2)
     a3c:	1887c83a 	sub	r3,r3,r2
     a40:	e0bffe17 	ldw	r2,-8(fp)
     a44:	10800e17 	ldw	r2,56(r2)
     a48:	1885883a 	add	r2,r3,r2
     a4c:	e0bff415 	stw	r2,-48(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
     a50:	e0bff317 	ldw	r2,-52(fp)
     a54:	e0bff515 	stw	r2,-44(fp)
     a58:	00006206 	br	be4 <vid_scroll_string+0x320>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
     a5c:	e0bffe17 	ldw	r2,-8(fp)
     a60:	10c00917 	ldw	r3,36(r2)
     a64:	e0bffe17 	ldw	r2,-8(fp)
     a68:	10800b17 	ldw	r2,44(r2)
     a6c:	1880050e 	bge	r3,r2,a84 <vid_scroll_string+0x1c0>
        string_x_index = (x_index - x_start);
     a70:	e0fff517 	ldw	r3,-44(fp)
     a74:	e0bff317 	ldw	r2,-52(fp)
     a78:	1885c83a 	sub	r2,r3,r2
     a7c:	e0bff615 	stw	r2,-40(fp)
     a80:	00000a06 	br	aac <vid_scroll_string+0x1e8>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
     a84:	e0bffe17 	ldw	r2,-8(fp)
     a88:	10c00917 	ldw	r3,36(r2)
     a8c:	e0bffe17 	ldw	r2,-8(fp)
     a90:	10800b17 	ldw	r2,44(r2)
     a94:	1887c83a 	sub	r3,r3,r2
     a98:	e0bff517 	ldw	r2,-44(fp)
     a9c:	1887883a 	add	r3,r3,r2
     aa0:	e0bff317 	ldw	r2,-52(fp)
     aa4:	1885c83a 	sub	r2,r3,r2
     aa8:	e0bff615 	stw	r2,-40(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
     aac:	e0bff617 	ldw	r2,-40(fp)
     ab0:	1000010e 	bge	r2,zero,ab8 <vid_scroll_string+0x1f4>
     ab4:	108001c4 	addi	r2,r2,7
     ab8:	1005d0fa 	srai	r2,r2,3
     abc:	e0bff915 	stw	r2,-28(fp)
      character = scroll->string[string_char_index];
     ac0:	e0bffe17 	ldw	r2,-8(fp)
     ac4:	10c00517 	ldw	r3,20(r2)
     ac8:	e0bff917 	ldw	r2,-28(fp)
     acc:	1885883a 	add	r2,r3,r2
     ad0:	10800003 	ldbu	r2,0(r2)
     ad4:	e0bffa05 	stb	r2,-24(fp)
      char_column = (string_x_index % 8);
     ad8:	e0fff617 	ldw	r3,-40(fp)
     adc:	00a00034 	movhi	r2,32768
     ae0:	108001c4 	addi	r2,r2,7
     ae4:	1884703a 	and	r2,r3,r2
     ae8:	1000040e 	bge	r2,zero,afc <vid_scroll_string+0x238>
     aec:	10bfffc4 	addi	r2,r2,-1
     af0:	00fffe04 	movi	r3,-8
     af4:	10c4b03a 	or	r2,r2,r3
     af8:	10800044 	addi	r2,r2,1
     afc:	e0bffb15 	stw	r2,-20(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
     b00:	00c02004 	movi	r3,128
     b04:	e0bffb17 	ldw	r2,-20(fp)
     b08:	1884d83a 	srl	r2,r3,r2
     b0c:	e0bffc05 	stb	r2,-16(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
     b10:	e0bffe17 	ldw	r2,-8(fp)
     b14:	14000617 	ldw	r16,24(r2)
     b18:	e0bffa07 	ldb	r2,-24(fp)
     b1c:	1009883a 	mov	r4,r2
     b20:	014002c4 	movi	r5,11
     b24:	0009dec0 	call	9dec <__mulsi3>
     b28:	10bfa804 	addi	r2,r2,-352
     b2c:	8085883a 	add	r2,r16,r2
     b30:	e0bffd15 	stw	r2,-12(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
     b34:	e03ff715 	stw	zero,-36(fp)
     b38:	00002406 	br	bcc <vid_scroll_string+0x308>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
     b3c:	e0bff717 	ldw	r2,-36(fp)
     b40:	e0fffd17 	ldw	r3,-12(fp)
     b44:	1885883a 	add	r2,r3,r2
     b48:	10c00003 	ldbu	r3,0(r2)
     b4c:	e0bffc03 	ldbu	r2,-16(fp)
     b50:	1884703a 	and	r2,r3,r2
     b54:	10803fcc 	andi	r2,r2,255
     b58:	1080201c 	xori	r2,r2,128
     b5c:	10bfe004 	addi	r2,r2,-128
     b60:	10000c26 	beq	r2,zero,b94 <vid_scroll_string+0x2d0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
     b64:	e0bffe17 	ldw	r2,-8(fp)
     b68:	10c00117 	ldw	r3,4(r2)
     b6c:	e0bff717 	ldw	r2,-36(fp)
     b70:	1887883a 	add	r3,r3,r2
     b74:	e0bffe17 	ldw	r2,-8(fp)
     b78:	10800317 	ldw	r2,12(r2)
     b7c:	e13ff517 	ldw	r4,-44(fp)
     b80:	180b883a 	mov	r5,r3
     b84:	100d883a 	mov	r6,r2
     b88:	e1ffff17 	ldw	r7,-4(fp)
     b8c:	00010c00 	call	10c0 <vid_set_pixel>
     b90:	00000b06 	br	bc0 <vid_scroll_string+0x2fc>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
     b94:	e0bffe17 	ldw	r2,-8(fp)
     b98:	10c00117 	ldw	r3,4(r2)
     b9c:	e0bff717 	ldw	r2,-36(fp)
     ba0:	1887883a 	add	r3,r3,r2
     ba4:	e0bffe17 	ldw	r2,-8(fp)
     ba8:	10800417 	ldw	r2,16(r2)
     bac:	e13ff517 	ldw	r4,-44(fp)
     bb0:	180b883a 	mov	r5,r3
     bb4:	100d883a 	mov	r6,r2
     bb8:	e1ffff17 	ldw	r7,-4(fp)
     bbc:	00010c00 	call	10c0 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
     bc0:	e0bff717 	ldw	r2,-36(fp)
     bc4:	10800044 	addi	r2,r2,1
     bc8:	e0bff715 	stw	r2,-36(fp)
     bcc:	e0bff717 	ldw	r2,-36(fp)
     bd0:	108002d0 	cmplti	r2,r2,11
     bd4:	103fd91e 	bne	r2,zero,b3c <vid_scroll_string+0x278>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
     bd8:	e0bff517 	ldw	r2,-44(fp)
     bdc:	10800044 	addi	r2,r2,1
     be0:	e0bff515 	stw	r2,-44(fp)
     be4:	e0fff517 	ldw	r3,-44(fp)
     be8:	e0bff417 	ldw	r2,-48(fp)
     bec:	18bf9b16 	blt	r3,r2,a5c <vid_scroll_string+0x198>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
     bf0:	e0bffe17 	ldw	r2,-8(fp)
     bf4:	10c00117 	ldw	r3,4(r2)
     bf8:	e0bffe17 	ldw	r2,-8(fp)
     bfc:	10800117 	ldw	r2,4(r2)
     c00:	10800284 	addi	r2,r2,10
     c04:	e13ffe17 	ldw	r4,-8(fp)
     c08:	21000417 	ldw	r4,16(r4)
     c0c:	01400044 	movi	r5,1
     c10:	d9400015 	stw	r5,0(sp)
     c14:	d9000115 	stw	r4,4(sp)
     c18:	e13fff17 	ldw	r4,-4(fp)
     c1c:	d9000215 	stw	r4,8(sp)
     c20:	e13ff417 	ldw	r4,-48(fp)
     c24:	180b883a 	mov	r5,r3
     c28:	e1bff417 	ldw	r6,-48(fp)
     c2c:	100f883a 	mov	r7,r2
     c30:	00006640 	call	664 <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
     c34:	0005883a 	mov	r2,zero
}
     c38:	e037883a 	mov	sp,fp
     c3c:	dfc00317 	ldw	ra,12(sp)
     c40:	df000217 	ldw	fp,8(sp)
     c44:	dc400117 	ldw	r17,4(sp)
     c48:	dc000017 	ldw	r16,0(sp)
     c4c:	dec00404 	addi	sp,sp,16
     c50:	f800283a 	ret

00000c54 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
     c54:	defff504 	addi	sp,sp,-44
     c58:	dfc00a15 	stw	ra,40(sp)
     c5c:	df000915 	stw	fp,36(sp)
     c60:	df000904 	addi	fp,sp,36
     c64:	e13ffc15 	stw	r4,-16(fp)
     c68:	e17ffd15 	stw	r5,-12(fp)
     c6c:	e1bffe15 	stw	r6,-8(fp)
     c70:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
     c74:	e0800217 	ldw	r2,8(fp)
     c78:	00803716 	blt	zero,r2,d58 <vid_move_block+0x104>
     c7c:	e0800317 	ldw	r2,12(fp)
     c80:	00803516 	blt	zero,r2,d58 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
     c84:	e0bffd17 	ldw	r2,-12(fp)
     c88:	e0bff815 	stw	r2,-32(fp)
     c8c:	00002f06 	br	d4c <vid_move_block+0xf8>
      write_y = read_y + y_distance;
     c90:	e0fff817 	ldw	r3,-32(fp)
     c94:	e0800317 	ldw	r2,12(fp)
     c98:	1885883a 	add	r2,r3,r2
     c9c:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
     ca0:	e0bffc17 	ldw	r2,-16(fp)
     ca4:	e0bff715 	stw	r2,-36(fp)
     ca8:	00002206 	br	d34 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
     cac:	e0fff717 	ldw	r3,-36(fp)
     cb0:	e0800217 	ldw	r2,8(fp)
     cb4:	1885883a 	add	r2,r3,r2
     cb8:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
     cbc:	e13ff717 	ldw	r4,-36(fp)
     cc0:	e17ff817 	ldw	r5,-32(fp)
     cc4:	e1800517 	ldw	r6,20(fp)
     cc8:	000124c0 	call	124c <vid_get_pixel>
     ccc:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
     cd0:	e0bffb0f 	ldh	r2,-20(fp)
     cd4:	e13ffa17 	ldw	r4,-24(fp)
     cd8:	e17ff917 	ldw	r5,-28(fp)
     cdc:	100d883a 	mov	r6,r2
     ce0:	e1c00517 	ldw	r7,20(fp)
     ce4:	00010c00 	call	10c0 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
     ce8:	e0fffe17 	ldw	r3,-8(fp)
     cec:	e0800217 	ldw	r2,8(fp)
     cf0:	1885883a 	add	r2,r3,r2
     cf4:	e0fff717 	ldw	r3,-36(fp)
     cf8:	1880050e 	bge	r3,r2,d10 <vid_move_block+0xbc>
     cfc:	e0ffff17 	ldw	r3,-4(fp)
     d00:	e0800317 	ldw	r2,12(fp)
     d04:	1885883a 	add	r2,r3,r2
     d08:	e0fff817 	ldw	r3,-32(fp)
     d0c:	18800616 	blt	r3,r2,d28 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
     d10:	e0800417 	ldw	r2,16(fp)
     d14:	e13ff717 	ldw	r4,-36(fp)
     d18:	e17ff817 	ldw	r5,-32(fp)
     d1c:	100d883a 	mov	r6,r2
     d20:	e1c00517 	ldw	r7,20(fp)
     d24:	00010c00 	call	10c0 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
     d28:	e0bff717 	ldw	r2,-36(fp)
     d2c:	10800044 	addi	r2,r2,1
     d30:	e0bff715 	stw	r2,-36(fp)
     d34:	e0fff717 	ldw	r3,-36(fp)
     d38:	e0bffe17 	ldw	r2,-8(fp)
     d3c:	18bfdb16 	blt	r3,r2,cac <vid_move_block+0x58>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
     d40:	e0bff817 	ldw	r2,-32(fp)
     d44:	10800044 	addi	r2,r2,1
     d48:	e0bff815 	stw	r2,-32(fp)
     d4c:	e0fff817 	ldw	r3,-32(fp)
     d50:	e0bfff17 	ldw	r2,-4(fp)
     d54:	18bfce16 	blt	r3,r2,c90 <vid_move_block+0x3c>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
     d58:	0005883a 	mov	r2,zero
}
     d5c:	e037883a 	mov	sp,fp
     d60:	dfc00117 	ldw	ra,4(sp)
     d64:	df000017 	ldw	fp,0(sp)
     d68:	dec00204 	addi	sp,sp,8
     d6c:	f800283a 	ret

00000d70 <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
     d70:	defff604 	addi	sp,sp,-40
     d74:	dfc00915 	stw	ra,36(sp)
     d78:	df000815 	stw	fp,32(sp)
     d7c:	df000804 	addi	fp,sp,32
     d80:	e13ffc15 	stw	r4,-16(fp)
     d84:	e17ffd15 	stw	r5,-12(fp)
     d88:	e1bffe15 	stw	r6,-8(fp)
     d8c:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
     d90:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
     d94:	e0bffc17 	ldw	r2,-16(fp)
     d98:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
     d9c:	00002806 	br	e40 <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
     da0:	e0bffa17 	ldw	r2,-24(fp)
     da4:	e0c00317 	ldw	r3,12(fp)
     da8:	1885883a 	add	r2,r3,r2
     dac:	10800003 	ldbu	r2,0(r2)
     db0:	10803fcc 	andi	r2,r2,255
     db4:	1080201c 	xori	r2,r2,128
     db8:	10bfe004 	addi	r2,r2,-128
     dbc:	10800298 	cmpnei	r2,r2,10
     dc0:	1000091e 	bne	r2,zero,de8 <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
     dc4:	e0bffb17 	ldw	r2,-20(fp)
     dc8:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
     dcc:	e0bffd17 	ldw	r2,-12(fp)
     dd0:	10800304 	addi	r2,r2,12
     dd4:	e0bffd15 	stw	r2,-12(fp)
      i++;
     dd8:	e0bffa17 	ldw	r2,-24(fp)
     ddc:	10800044 	addi	r2,r2,1
     de0:	e0bffa15 	stw	r2,-24(fp)
      continue;
     de4:	00001606 	br	e40 <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
     de8:	e0bffa17 	ldw	r2,-24(fp)
     dec:	e0c00317 	ldw	r3,12(fp)
     df0:	1885883a 	add	r2,r3,r2
     df4:	10800003 	ldbu	r2,0(r2)
     df8:	10803fcc 	andi	r2,r2,255
     dfc:	1080201c 	xori	r2,r2,128
     e00:	10bfe004 	addi	r2,r2,-128
     e04:	e0ffff17 	ldw	r3,-4(fp)
     e08:	d8c00015 	stw	r3,0(sp)
     e0c:	e0c00217 	ldw	r3,8(fp)
     e10:	d8c00115 	stw	r3,4(sp)
     e14:	e13ffc17 	ldw	r4,-16(fp)
     e18:	e17ffd17 	ldw	r5,-12(fp)
     e1c:	e1bffe17 	ldw	r6,-8(fp)
     e20:	100f883a 	mov	r7,r2
     e24:	0000fc80 	call	fc8 <vid_print_char>
    i++;
     e28:	e0bffa17 	ldw	r2,-24(fp)
     e2c:	10800044 	addi	r2,r2,1
     e30:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
     e34:	e0bffc17 	ldw	r2,-16(fp)
     e38:	10800204 	addi	r2,r2,8
     e3c:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
     e40:	e0bffa17 	ldw	r2,-24(fp)
     e44:	e0c00317 	ldw	r3,12(fp)
     e48:	1885883a 	add	r2,r3,r2
     e4c:	10800003 	ldbu	r2,0(r2)
     e50:	10803fcc 	andi	r2,r2,255
     e54:	1080201c 	xori	r2,r2,128
     e58:	10bfe004 	addi	r2,r2,-128
     e5c:	103fd01e 	bne	r2,zero,da0 <vid_print_string+0x30>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
     e60:	0005883a 	mov	r2,zero
}
     e64:	e037883a 	mov	sp,fp
     e68:	dfc00117 	ldw	ra,4(sp)
     e6c:	df000017 	ldw	fp,0(sp)
     e70:	dec00204 	addi	sp,sp,8
     e74:	f800283a 	ret

00000e78 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
     e78:	defff704 	addi	sp,sp,-36
     e7c:	dfc00815 	stw	ra,32(sp)
     e80:	df000715 	stw	fp,28(sp)
     e84:	df000704 	addi	fp,sp,28
     e88:	e13ffc15 	stw	r4,-16(fp)
     e8c:	e17ffd15 	stw	r5,-12(fp)
     e90:	e1bffe15 	stw	r6,-8(fp)
     e94:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
     e98:	e0800317 	ldw	r2,12(fp)
     e9c:	10000a26 	beq	r2,zero,ec8 <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
     ea0:	e0800217 	ldw	r2,8(fp)
     ea4:	d8800015 	stw	r2,0(sp)
     ea8:	e0800417 	ldw	r2,16(fp)
     eac:	d8800115 	stw	r2,4(sp)
     eb0:	e13ffc17 	ldw	r4,-16(fp)
     eb4:	e17ffd17 	ldw	r5,-12(fp)
     eb8:	e1bffe17 	ldw	r6,-8(fp)
     ebc:	e1ffff17 	ldw	r7,-4(fp)
     ec0:	00012c80 	call	12c8 <vid_paint_block>
     ec4:	00003a06 	br	fb0 <vid_draw_box+0x138>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
     ec8:	e0bfff17 	ldw	r2,-4(fp)
     ecc:	10bfffc4 	addi	r2,r2,-1
     ed0:	00c00044 	movi	r3,1
     ed4:	d8c00015 	stw	r3,0(sp)
     ed8:	e0c00217 	ldw	r3,8(fp)
     edc:	d8c00115 	stw	r3,4(sp)
     ee0:	e0c00417 	ldw	r3,16(fp)
     ee4:	d8c00215 	stw	r3,8(sp)
     ee8:	e13ffc17 	ldw	r4,-16(fp)
     eec:	e17ffd17 	ldw	r5,-12(fp)
     ef0:	e1bffc17 	ldw	r6,-16(fp)
     ef4:	100f883a 	mov	r7,r2
     ef8:	00006640 	call	664 <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
     efc:	e0bffe17 	ldw	r2,-8(fp)
     f00:	113fffc4 	addi	r4,r2,-1
     f04:	e0bffe17 	ldw	r2,-8(fp)
     f08:	10ffffc4 	addi	r3,r2,-1
     f0c:	e0bfff17 	ldw	r2,-4(fp)
     f10:	10bfffc4 	addi	r2,r2,-1
     f14:	01400044 	movi	r5,1
     f18:	d9400015 	stw	r5,0(sp)
     f1c:	e1400217 	ldw	r5,8(fp)
     f20:	d9400115 	stw	r5,4(sp)
     f24:	e1400417 	ldw	r5,16(fp)
     f28:	d9400215 	stw	r5,8(sp)
     f2c:	e17ffd17 	ldw	r5,-12(fp)
     f30:	180d883a 	mov	r6,r3
     f34:	100f883a 	mov	r7,r2
     f38:	00006640 	call	664 <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
     f3c:	e0bffe17 	ldw	r2,-8(fp)
     f40:	10bfffc4 	addi	r2,r2,-1
     f44:	00c00044 	movi	r3,1
     f48:	d8c00015 	stw	r3,0(sp)
     f4c:	e0c00217 	ldw	r3,8(fp)
     f50:	d8c00115 	stw	r3,4(sp)
     f54:	e0c00417 	ldw	r3,16(fp)
     f58:	d8c00215 	stw	r3,8(sp)
     f5c:	e13ffc17 	ldw	r4,-16(fp)
     f60:	e17ffd17 	ldw	r5,-12(fp)
     f64:	100d883a 	mov	r6,r2
     f68:	e1fffd17 	ldw	r7,-12(fp)
     f6c:	00006640 	call	664 <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
     f70:	e0bfff17 	ldw	r2,-4(fp)
     f74:	117fffc4 	addi	r5,r2,-1
     f78:	e0bffe17 	ldw	r2,-8(fp)
     f7c:	10ffffc4 	addi	r3,r2,-1
     f80:	e0bfff17 	ldw	r2,-4(fp)
     f84:	10bfffc4 	addi	r2,r2,-1
     f88:	01000044 	movi	r4,1
     f8c:	d9000015 	stw	r4,0(sp)
     f90:	e1000217 	ldw	r4,8(fp)
     f94:	d9000115 	stw	r4,4(sp)
     f98:	e1000417 	ldw	r4,16(fp)
     f9c:	d9000215 	stw	r4,8(sp)
     fa0:	e13ffc17 	ldw	r4,-16(fp)
     fa4:	180d883a 	mov	r6,r3
     fa8:	100f883a 	mov	r7,r2
     fac:	00006640 	call	664 <vid_draw_line>
  }

  return (0);
     fb0:	0005883a 	mov	r2,zero
}
     fb4:	e037883a 	mov	sp,fp
     fb8:	dfc00117 	ldw	ra,4(sp)
     fbc:	df000017 	ldw	fp,0(sp)
     fc0:	dec00204 	addi	sp,sp,8
     fc4:	f800283a 	ret

00000fc8 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
     fc8:	defff704 	addi	sp,sp,-36
     fcc:	dfc00815 	stw	ra,32(sp)
     fd0:	df000715 	stw	fp,28(sp)
     fd4:	df000704 	addi	fp,sp,28
     fd8:	e13ffc15 	stw	r4,-16(fp)
     fdc:	e17ffd15 	stw	r5,-12(fp)
     fe0:	e1bffe15 	stw	r6,-8(fp)
     fe4:	3805883a 	mov	r2,r7
     fe8:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
     fec:	e0bfff03 	ldbu	r2,-4(fp)
     ff0:	10bff804 	addi	r2,r2,-32
     ff4:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
     ff8:	e03ff915 	stw	zero,-28(fp)
     ffc:	00002706 	br	109c <vid_print_char+0xd4>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    1000:	e0bffb07 	ldb	r2,-20(fp)
    1004:	1009883a 	mov	r4,r2
    1008:	014002c4 	movi	r5,11
    100c:	0009dec0 	call	9dec <__mulsi3>
    1010:	1007883a 	mov	r3,r2
    1014:	e0bff917 	ldw	r2,-28(fp)
    1018:	1885883a 	add	r2,r3,r2
    101c:	e0c00217 	ldw	r3,8(fp)
    1020:	1885883a 	add	r2,r3,r2
    1024:	10800003 	ldbu	r2,0(r2)
    1028:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
    102c:	e03ffa15 	stw	zero,-24(fp)
    1030:	00001406 	br	1084 <vid_print_char+0xbc>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
    1034:	e0fffb47 	ldb	r3,-19(fp)
    1038:	01002004 	movi	r4,128
    103c:	e0bffa17 	ldw	r2,-24(fp)
    1040:	2085d83a 	sra	r2,r4,r2
    1044:	1884703a 	and	r2,r3,r2
    1048:	10000b26 	beq	r2,zero,1078 <vid_print_char+0xb0>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
    104c:	e0fffc17 	ldw	r3,-16(fp)
    1050:	e0bffa17 	ldw	r2,-24(fp)
    1054:	1889883a 	add	r4,r3,r2
    1058:	e0fffd17 	ldw	r3,-12(fp)
    105c:	e0bff917 	ldw	r2,-28(fp)
    1060:	1887883a 	add	r3,r3,r2
    1064:	e0bffe17 	ldw	r2,-8(fp)
    1068:	180b883a 	mov	r5,r3
    106c:	100d883a 	mov	r6,r2
    1070:	e1c00317 	ldw	r7,12(fp)
    1074:	00010c00 	call	10c0 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
    1078:	e0bffa17 	ldw	r2,-24(fp)
    107c:	10800044 	addi	r2,r2,1
    1080:	e0bffa15 	stw	r2,-24(fp)
    1084:	e0bffa17 	ldw	r2,-24(fp)
    1088:	10800210 	cmplti	r2,r2,8
    108c:	103fe91e 	bne	r2,zero,1034 <vid_print_char+0x6c>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
    1090:	e0bff917 	ldw	r2,-28(fp)
    1094:	10800044 	addi	r2,r2,1
    1098:	e0bff915 	stw	r2,-28(fp)
    109c:	e0bff917 	ldw	r2,-28(fp)
    10a0:	108002d0 	cmplti	r2,r2,11
    10a4:	103fd61e 	bne	r2,zero,1000 <vid_print_char+0x38>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
    10a8:	0005883a 	mov	r2,zero
}
    10ac:	e037883a 	mov	sp,fp
    10b0:	dfc00117 	ldw	ra,4(sp)
    10b4:	df000017 	ldw	fp,0(sp)
    10b8:	dec00204 	addi	sp,sp,8
    10bc:	f800283a 	ret

000010c0 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
    10c0:	defff804 	addi	sp,sp,-32
    10c4:	dfc00715 	stw	ra,28(sp)
    10c8:	df000615 	stw	fp,24(sp)
    10cc:	dc000515 	stw	r16,20(sp)
    10d0:	df000504 	addi	fp,sp,20
    10d4:	e13ffc15 	stw	r4,-16(fp)
    10d8:	e17ffd15 	stw	r5,-12(fp)
    10dc:	e1bffe15 	stw	r6,-8(fp)
    10e0:	e1ffff15 	stw	r7,-4(fp)
  int addr;
  
  if( display->color_depth == 32 )
    10e4:	e0bfff17 	ldw	r2,-4(fp)
    10e8:	10800417 	ldw	r2,16(r2)
    10ec:	10800818 	cmpnei	r2,r2,32
    10f0:	1000141e 	bne	r2,zero,1144 <vid_set_pixel+0x84>
  {
//  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 4)) + horiz * 4);
    10f4:	e13fff17 	ldw	r4,-4(fp)
    10f8:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    10fc:	1021883a 	mov	r16,r2
    1100:	e0bfff17 	ldw	r2,-4(fp)
    1104:	10800517 	ldw	r2,20(r2)
    1108:	1085883a 	add	r2,r2,r2
    110c:	1085883a 	add	r2,r2,r2
    1110:	1009883a 	mov	r4,r2
    1114:	e17ffd17 	ldw	r5,-12(fp)
    1118:	0009dec0 	call	9dec <__mulsi3>
    111c:	8087883a 	add	r3,r16,r2
    1120:	e0bffc17 	ldw	r2,-16(fp)
    1124:	1085883a 	add	r2,r2,r2
    1128:	1085883a 	add	r2,r2,r2
    112c:	1885883a 	add	r2,r3,r2
    1130:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT( addr, 0, (unsigned int)(color));
    1134:	e0bffb17 	ldw	r2,-20(fp)
    1138:	e0fffe17 	ldw	r3,-8(fp)
    113c:	10c00035 	stwio	r3,0(r2)
    1140:	00003c06 	br	1234 <vid_set_pixel+0x174>
  }
  
  else if( display->color_depth == 24 )
    1144:	e0bfff17 	ldw	r2,-4(fp)
    1148:	10800417 	ldw	r2,16(r2)
    114c:	10800618 	cmpnei	r2,r2,24
    1150:	1000231e 	bne	r2,zero,11e0 <vid_set_pixel+0x120>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 3)) + horiz * 3);
    1154:	e13fff17 	ldw	r4,-4(fp)
    1158:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    115c:	1021883a 	mov	r16,r2
    1160:	e0bfff17 	ldw	r2,-4(fp)
    1164:	10c00517 	ldw	r3,20(r2)
    1168:	1805883a 	mov	r2,r3
    116c:	1085883a 	add	r2,r2,r2
    1170:	10c5883a 	add	r2,r2,r3
    1174:	1009883a 	mov	r4,r2
    1178:	e17ffd17 	ldw	r5,-12(fp)
    117c:	0009dec0 	call	9dec <__mulsi3>
    1180:	8089883a 	add	r4,r16,r2
    1184:	e0fffc17 	ldw	r3,-16(fp)
    1188:	1805883a 	mov	r2,r3
    118c:	1085883a 	add	r2,r2,r2
    1190:	10c5883a 	add	r2,r2,r3
    1194:	2085883a 	add	r2,r4,r2
    1198:	e0bffb15 	stw	r2,-20(fp)
		IOWR_8DIRECT( addr, 0, (unsigned char)(color));
    119c:	e0bffb17 	ldw	r2,-20(fp)
    11a0:	e0fffe17 	ldw	r3,-8(fp)
    11a4:	18c03fcc 	andi	r3,r3,255
    11a8:	10c00025 	stbio	r3,0(r2)
 		IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
    11ac:	e0bffb17 	ldw	r2,-20(fp)
    11b0:	10800044 	addi	r2,r2,1
    11b4:	e0fffe17 	ldw	r3,-8(fp)
    11b8:	1806d23a 	srli	r3,r3,8
    11bc:	18c03fcc 	andi	r3,r3,255
    11c0:	10c00025 	stbio	r3,0(r2)
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
    11c4:	e0bffb17 	ldw	r2,-20(fp)
    11c8:	10800084 	addi	r2,r2,2
    11cc:	e0fffe17 	ldw	r3,-8(fp)
    11d0:	1806d43a 	srli	r3,r3,16
    11d4:	18c03fcc 	andi	r3,r3,255
    11d8:	10c00025 	stbio	r3,0(r2)
    11dc:	00001506 	br	1234 <vid_set_pixel+0x174>
  }
  
  else if( display->color_depth == 16 )
    11e0:	e0bfff17 	ldw	r2,-4(fp)
    11e4:	10800417 	ldw	r2,16(r2)
    11e8:	10800418 	cmpnei	r2,r2,16
    11ec:	1000111e 	bne	r2,zero,1234 <vid_set_pixel+0x174>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
    11f0:	e13fff17 	ldw	r4,-4(fp)
    11f4:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    11f8:	1021883a 	mov	r16,r2
    11fc:	e0bfff17 	ldw	r2,-4(fp)
    1200:	10800517 	ldw	r2,20(r2)
    1204:	1085883a 	add	r2,r2,r2
    1208:	1009883a 	mov	r4,r2
    120c:	e17ffd17 	ldw	r5,-12(fp)
    1210:	0009dec0 	call	9dec <__mulsi3>
    1214:	8087883a 	add	r3,r16,r2
    1218:	e0bffc17 	ldw	r2,-16(fp)
    121c:	1085883a 	add	r2,r2,r2
    1220:	1885883a 	add	r2,r3,r2
    1224:	e0bffb15 	stw	r2,-20(fp)
  	IOWR_16DIRECT( addr, 0, (int)(color));
    1228:	e0bffb17 	ldw	r2,-20(fp)
    122c:	e0fffe17 	ldw	r3,-8(fp)
    1230:	10c0002d 	sthio	r3,0(r2)
	}


}
    1234:	e037883a 	mov	sp,fp
    1238:	dfc00217 	ldw	ra,8(sp)
    123c:	df000117 	ldw	fp,4(sp)
    1240:	dc000017 	ldw	r16,0(sp)
    1244:	dec00304 	addi	sp,sp,12
    1248:	f800283a 	ret

0000124c <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
    124c:	defff904 	addi	sp,sp,-28
    1250:	dfc00615 	stw	ra,24(sp)
    1254:	df000515 	stw	fp,20(sp)
    1258:	dc000415 	stw	r16,16(sp)
    125c:	df000404 	addi	fp,sp,16
    1260:	e13ffd15 	stw	r4,-12(fp)
    1264:	e17ffe15 	stw	r5,-8(fp)
    1268:	e1bfff15 	stw	r6,-4(fp)
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
    126c:	e13fff17 	ldw	r4,-4(fp)
    1270:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    1274:	1021883a 	mov	r16,r2
    1278:	e0bfff17 	ldw	r2,-4(fp)
    127c:	10800517 	ldw	r2,20(r2)
    1280:	1085883a 	add	r2,r2,r2
    1284:	1009883a 	mov	r4,r2
    1288:	e17ffe17 	ldw	r5,-8(fp)
    128c:	0009dec0 	call	9dec <__mulsi3>
    1290:	8087883a 	add	r3,r16,r2
    1294:	e0bffd17 	ldw	r2,-12(fp)
    1298:	1085883a 	add	r2,r2,r2
    129c:	1885883a 	add	r2,r3,r2
    12a0:	e0bffc15 	stw	r2,-16(fp)
  return(IORD_16DIRECT(addr, 0));
    12a4:	e0bffc17 	ldw	r2,-16(fp)
    12a8:	1080002b 	ldhuio	r2,0(r2)
    12ac:	10bfffcc 	andi	r2,r2,65535

}
    12b0:	e037883a 	mov	sp,fp
    12b4:	dfc00217 	ldw	ra,8(sp)
    12b8:	df000117 	ldw	fp,4(sp)
    12bc:	dc000017 	ldw	r16,0(sp)
    12c0:	dec00304 	addi	sp,sp,12
    12c4:	f800283a 	ret

000012c8 <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
    12c8:	defff304 	addi	sp,sp,-52
    12cc:	dfc00c15 	stw	ra,48(sp)
    12d0:	df000b15 	stw	fp,44(sp)
    12d4:	dc400a15 	stw	r17,40(sp)
    12d8:	dc000915 	stw	r16,36(sp)
    12dc:	df000904 	addi	fp,sp,36
    12e0:	e13ffc15 	stw	r4,-16(fp)
    12e4:	e17ffd15 	stw	r5,-12(fp)
    12e8:	e1bffe15 	stw	r6,-8(fp)
    12ec:	e1ffff15 	stw	r7,-4(fp)
  int i;
  unsigned int addr; // richard add unsigned
  int bytes_per_line, bytes_per_pixel;
  char* line;
  
  bytes_per_pixel = (display->color_depth / 8);
    12f0:	e0800517 	ldw	r2,20(fp)
    12f4:	10800417 	ldw	r2,16(r2)
    12f8:	1000010e 	bge	r2,zero,1300 <vid_paint_block+0x38>
    12fc:	108001c4 	addi	r2,r2,7
    1300:	1005d0fa 	srai	r2,r2,3
    1304:	e0bff915 	stw	r2,-28(fp)
  bytes_per_line = ((Hend - Hstart) * bytes_per_pixel);
    1308:	e0fffe17 	ldw	r3,-8(fp)
    130c:	e0bffc17 	ldw	r2,-16(fp)
    1310:	1885c83a 	sub	r2,r3,r2
    1314:	1009883a 	mov	r4,r2
    1318:	e17ff917 	ldw	r5,-28(fp)
    131c:	0009dec0 	call	9dec <__mulsi3>
    1320:	e0bffa15 	stw	r2,-24(fp)

  line = malloc(bytes_per_line + 12);
    1324:	e0bffa17 	ldw	r2,-24(fp)
    1328:	10800304 	addi	r2,r2,12
    132c:	1009883a 	mov	r4,r2
    1330:	000a4600 	call	a460 <malloc>
    1334:	e0bffb15 	stw	r2,-20(fp)

	if(display->color_depth == 16)
    1338:	e0800517 	ldw	r2,20(fp)
    133c:	10800417 	ldw	r2,16(r2)
    1340:	10800418 	cmpnei	r2,r2,16
    1344:	1000151e 	bne	r2,zero,139c <vid_paint_block+0xd4>
	{
    for (i = 0; i < bytes_per_line; i+=2) 
    1348:	e03ff715 	stw	zero,-36(fp)
    134c:	00000f06 	br	138c <vid_paint_block+0xc4>
    {
      *(line + i) = (unsigned char)color;
    1350:	e0bff717 	ldw	r2,-36(fp)
    1354:	e0fffb17 	ldw	r3,-20(fp)
    1358:	1885883a 	add	r2,r3,r2
    135c:	e0c00417 	ldw	r3,16(fp)
    1360:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
    1364:	e0bff717 	ldw	r2,-36(fp)
    1368:	10800044 	addi	r2,r2,1
    136c:	e0fffb17 	ldw	r3,-20(fp)
    1370:	1885883a 	add	r2,r3,r2
    1374:	e0c00417 	ldw	r3,16(fp)
    1378:	1807d23a 	srai	r3,r3,8
    137c:	10c00005 	stb	r3,0(r2)

  line = malloc(bytes_per_line + 12);

	if(display->color_depth == 16)
	{
    for (i = 0; i < bytes_per_line; i+=2) 
    1380:	e0bff717 	ldw	r2,-36(fp)
    1384:	10800084 	addi	r2,r2,2
    1388:	e0bff715 	stw	r2,-36(fp)
    138c:	e0fff717 	ldw	r3,-36(fp)
    1390:	e0bffa17 	ldw	r2,-24(fp)
    1394:	18bfee16 	blt	r3,r2,1350 <vid_paint_block+0x88>
    1398:	00003106 	br	1460 <vid_paint_block+0x198>
    {
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
    139c:	e0800517 	ldw	r2,20(fp)
    13a0:	10800417 	ldw	r2,16(r2)
    13a4:	10800618 	cmpnei	r2,r2,24
    13a8:	10001c1e 	bne	r2,zero,141c <vid_paint_block+0x154>
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
    13ac:	e03ff715 	stw	zero,-36(fp)
    13b0:	00001606 	br	140c <vid_paint_block+0x144>
    {
      *(line + i) = (unsigned char)color;
    13b4:	e0bff717 	ldw	r2,-36(fp)
    13b8:	e0fffb17 	ldw	r3,-20(fp)
    13bc:	1885883a 	add	r2,r3,r2
    13c0:	e0c00417 	ldw	r3,16(fp)
    13c4:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
    13c8:	e0bff717 	ldw	r2,-36(fp)
    13cc:	10800044 	addi	r2,r2,1
    13d0:	e0fffb17 	ldw	r3,-20(fp)
    13d4:	1885883a 	add	r2,r3,r2
    13d8:	e0c00417 	ldw	r3,16(fp)
    13dc:	1807d23a 	srai	r3,r3,8
    13e0:	10c00005 	stb	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
    13e4:	e0bff717 	ldw	r2,-36(fp)
    13e8:	10800084 	addi	r2,r2,2
    13ec:	e0fffb17 	ldw	r3,-20(fp)
    13f0:	1885883a 	add	r2,r3,r2
    13f4:	e0c00417 	ldw	r3,16(fp)
    13f8:	1807d43a 	srai	r3,r3,16
    13fc:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
    1400:	e0bff717 	ldw	r2,-36(fp)
    1404:	108000c4 	addi	r2,r2,3
    1408:	e0bff715 	stw	r2,-36(fp)
    140c:	e0fff717 	ldw	r3,-36(fp)
    1410:	e0bffa17 	ldw	r2,-24(fp)
    1414:	18bfe716 	blt	r3,r2,13b4 <vid_paint_block+0xec>
    1418:	00001106 	br	1460 <vid_paint_block+0x198>
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
    141c:	e0800517 	ldw	r2,20(fp)
    1420:	10800417 	ldw	r2,16(r2)
    1424:	10800818 	cmpnei	r2,r2,32
    1428:	10000d1e 	bne	r2,zero,1460 <vid_paint_block+0x198>
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
    142c:	e03ff715 	stw	zero,-36(fp)
    1430:	00000806 	br	1454 <vid_paint_block+0x18c>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(line + i) = (unsigned int)color;
    1434:	e0bff717 	ldw	r2,-36(fp)
    1438:	e0fffb17 	ldw	r3,-20(fp)
    143c:	1885883a 	add	r2,r3,r2
    1440:	e0c00417 	ldw	r3,16(fp)
    1444:	10c00015 	stw	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
    1448:	e0bff717 	ldw	r2,-36(fp)
    144c:	10800104 	addi	r2,r2,4
    1450:	e0bff715 	stw	r2,-36(fp)
    1454:	e0fff717 	ldw	r3,-36(fp)
    1458:	e0bffa17 	ldw	r2,-24(fp)
    145c:	18bff516 	blt	r3,r2,1434 <vid_paint_block+0x16c>
      *(int*)(line + i) = (unsigned int)color;
    }
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
    1460:	e1000517 	ldw	r4,20(fp)
    1464:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    1468:	1021883a 	mov	r16,r2
    146c:	e0800517 	ldw	r2,20(fp)
    1470:	10800517 	ldw	r2,20(r2)
    1474:	1009883a 	mov	r4,r2
    1478:	e17ff917 	ldw	r5,-28(fp)
    147c:	0009dec0 	call	9dec <__mulsi3>
    1480:	1009883a 	mov	r4,r2
    1484:	e17ffd17 	ldw	r5,-12(fp)
    1488:	0009dec0 	call	9dec <__mulsi3>
    148c:	1023883a 	mov	r17,r2
    1490:	e13ffc17 	ldw	r4,-16(fp)
    1494:	e17ff917 	ldw	r5,-28(fp)
    1498:	0009dec0 	call	9dec <__mulsi3>
    149c:	8885883a 	add	r2,r17,r2
    14a0:	8085883a 	add	r2,r16,r2
    14a4:	e0bff815 	stw	r2,-32(fp)
  
  for (i = Vstart; i < Vend; i++)
    14a8:	e0bffd17 	ldw	r2,-12(fp)
    14ac:	e0bff715 	stw	r2,-36(fp)
    14b0:	00001106 	br	14f8 <vid_paint_block+0x230>
  {
    memcpy( (void*)addr, line, bytes_per_line );
    14b4:	e0fff817 	ldw	r3,-32(fp)
    14b8:	e0bffa17 	ldw	r2,-24(fp)
    14bc:	1809883a 	mov	r4,r3
    14c0:	e17ffb17 	ldw	r5,-20(fp)
    14c4:	100d883a 	mov	r6,r2
    14c8:	000ac0c0 	call	ac0c <memcpy>
    addr += (display->width * bytes_per_pixel);
    14cc:	e0800517 	ldw	r2,20(fp)
    14d0:	10800517 	ldw	r2,20(r2)
    14d4:	1009883a 	mov	r4,r2
    14d8:	e17ff917 	ldw	r5,-28(fp)
    14dc:	0009dec0 	call	9dec <__mulsi3>
    14e0:	e0fff817 	ldw	r3,-32(fp)
    14e4:	1885883a 	add	r2,r3,r2
    14e8:	e0bff815 	stw	r2,-32(fp)
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
  
  for (i = Vstart; i < Vend; i++)
    14ec:	e0bff717 	ldw	r2,-36(fp)
    14f0:	10800044 	addi	r2,r2,1
    14f4:	e0bff715 	stw	r2,-36(fp)
    14f8:	e0fff717 	ldw	r3,-36(fp)
    14fc:	e0bfff17 	ldw	r2,-4(fp)
    1500:	18bfec16 	blt	r3,r2,14b4 <vid_paint_block+0x1ec>
  {
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
    1504:	e13ffb17 	ldw	r4,-20(fp)
    1508:	000a4740 	call	a474 <free>
}
    150c:	e037883a 	mov	sp,fp
    1510:	dfc00317 	ldw	ra,12(sp)
    1514:	df000217 	ldw	fp,8(sp)
    1518:	dc400117 	ldw	r17,4(sp)
    151c:	dc000017 	ldw	r16,0(sp)
    1520:	dec00404 	addi	sp,sp,16
    1524:	f800283a 	ret

00001528 <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
    1528:	defff404 	addi	sp,sp,-48
    152c:	dfc00b15 	stw	ra,44(sp)
    1530:	df000a15 	stw	fp,40(sp)
    1534:	dc000915 	stw	r16,36(sp)
    1538:	df000904 	addi	fp,sp,36
    153c:	2007883a 	mov	r3,r4
    1540:	2805883a 	mov	r2,r5
    1544:	e1bffe15 	stw	r6,-8(fp)
    1548:	e1ffff15 	stw	r7,-4(fp)
    154c:	e0fffc0d 	sth	r3,-16(fp)
    1550:	e0bffd0d 	sth	r2,-12(fp)

  int i;
  int addr;
  int bytes_per_line;

  char *fast_buffer = malloc(1024 * 3);
    1554:	01030004 	movi	r4,3072
    1558:	000a4600 	call	a460 <malloc>
    155c:	e0bff815 	stw	r2,-32(fp)

  if( Hstart > Hend )
    1560:	e0bffc0f 	ldh	r2,-16(fp)
    1564:	e0fffd0f 	ldh	r3,-12(fp)
    1568:	1880060e 	bge	r3,r2,1584 <vid_draw_horiz_line+0x5c>
  {
    short temp = Hstart;
    156c:	e0bffc0b 	ldhu	r2,-16(fp)
    1570:	e0bff90d 	sth	r2,-28(fp)
    Hstart = Hend;
    1574:	e0bffd0b 	ldhu	r2,-12(fp)
    1578:	e0bffc0d 	sth	r2,-16(fp)
    Hend = temp;
    157c:	e0bff90b 	ldhu	r2,-28(fp)
    1580:	e0bffd0d 	sth	r2,-12(fp)
  }
  
  if(display->color_depth == 32)
    1584:	e0800317 	ldw	r2,12(fp)
    1588:	10800417 	ldw	r2,16(r2)
    158c:	10800818 	cmpnei	r2,r2,32
    1590:	10002a1e 	bne	r2,zero,163c <vid_draw_horiz_line+0x114>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
    1594:	e1000317 	ldw	r4,12(fp)
    1598:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    159c:	1021883a 	mov	r16,r2
    15a0:	e0800317 	ldw	r2,12(fp)
    15a4:	10800517 	ldw	r2,20(r2)
    15a8:	1085883a 	add	r2,r2,r2
    15ac:	1085883a 	add	r2,r2,r2
    15b0:	1009883a 	mov	r4,r2
    15b4:	e17ffe17 	ldw	r5,-8(fp)
    15b8:	0009dec0 	call	9dec <__mulsi3>
    15bc:	1007883a 	mov	r3,r2
    15c0:	e0bffc0f 	ldh	r2,-16(fp)
    15c4:	1085883a 	add	r2,r2,r2
    15c8:	1085883a 	add	r2,r2,r2
    15cc:	1885883a 	add	r2,r3,r2
    15d0:	8085883a 	add	r2,r16,r2
    15d4:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 4);
    15d8:	e0fffd0f 	ldh	r3,-12(fp)
    15dc:	e0bffc0f 	ldh	r2,-16(fp)
    15e0:	1885c83a 	sub	r2,r3,r2
    15e4:	1085883a 	add	r2,r2,r2
    15e8:	1085883a 	add	r2,r2,r2
    15ec:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=4) 
    15f0:	e03ff715 	stw	zero,-36(fp)
    15f4:	00000806 	br	1618 <vid_draw_horiz_line+0xf0>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
    15f8:	e0bff717 	ldw	r2,-36(fp)
    15fc:	e0fff817 	ldw	r3,-32(fp)
    1600:	1885883a 	add	r2,r3,r2
    1604:	e0ffff17 	ldw	r3,-4(fp)
    1608:	10c00015 	stw	r3,0(r2)
  
  if(display->color_depth == 32)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
    bytes_per_line = ((Hend - Hstart) * 4);
    for (i = 0; i < bytes_per_line; i+=4) 
    160c:	e0bff717 	ldw	r2,-36(fp)
    1610:	10800104 	addi	r2,r2,4
    1614:	e0bff715 	stw	r2,-36(fp)
    1618:	e0fff717 	ldw	r3,-36(fp)
    161c:	e0bffb17 	ldw	r2,-20(fp)
    1620:	18bff516 	blt	r3,r2,15f8 <vid_draw_horiz_line+0xd0>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
    1624:	e0fffa17 	ldw	r3,-24(fp)
    1628:	e0bffb17 	ldw	r2,-20(fp)
    162c:	1809883a 	mov	r4,r3
    1630:	e17ff817 	ldw	r5,-32(fp)
    1634:	100d883a 	mov	r6,r2
    1638:	000ac0c0 	call	ac0c <memcpy>
  }
  if(display->color_depth == 24)
    163c:	e0800317 	ldw	r2,12(fp)
    1640:	10800417 	ldw	r2,16(r2)
    1644:	10800618 	cmpnei	r2,r2,24
    1648:	10003c1e 	bne	r2,zero,173c <vid_draw_horiz_line+0x214>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
    164c:	e1000317 	ldw	r4,12(fp)
    1650:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    1654:	1021883a 	mov	r16,r2
    1658:	e0800317 	ldw	r2,12(fp)
    165c:	10c00517 	ldw	r3,20(r2)
    1660:	1805883a 	mov	r2,r3
    1664:	1085883a 	add	r2,r2,r2
    1668:	10c5883a 	add	r2,r2,r3
    166c:	1009883a 	mov	r4,r2
    1670:	e17ffe17 	ldw	r5,-8(fp)
    1674:	0009dec0 	call	9dec <__mulsi3>
    1678:	1009883a 	mov	r4,r2
    167c:	e0fffc0f 	ldh	r3,-16(fp)
    1680:	1805883a 	mov	r2,r3
    1684:	1085883a 	add	r2,r2,r2
    1688:	10c5883a 	add	r2,r2,r3
    168c:	2085883a 	add	r2,r4,r2
    1690:	8085883a 	add	r2,r16,r2
    1694:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 3);
    1698:	e0fffd0f 	ldh	r3,-12(fp)
    169c:	e0bffc0f 	ldh	r2,-16(fp)
    16a0:	1887c83a 	sub	r3,r3,r2
    16a4:	1805883a 	mov	r2,r3
    16a8:	1085883a 	add	r2,r2,r2
    16ac:	10c5883a 	add	r2,r2,r3
    16b0:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=3) 
    16b4:	e03ff715 	stw	zero,-36(fp)
    16b8:	00001606 	br	1714 <vid_draw_horiz_line+0x1ec>
    {
      *(fast_buffer + i) = (unsigned char)color;
    16bc:	e0bff717 	ldw	r2,-36(fp)
    16c0:	e0fff817 	ldw	r3,-32(fp)
    16c4:	1885883a 	add	r2,r3,r2
    16c8:	e0ffff17 	ldw	r3,-4(fp)
    16cc:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    16d0:	e0bff717 	ldw	r2,-36(fp)
    16d4:	10800044 	addi	r2,r2,1
    16d8:	e0fff817 	ldw	r3,-32(fp)
    16dc:	1885883a 	add	r2,r3,r2
    16e0:	e0ffff17 	ldw	r3,-4(fp)
    16e4:	1807d23a 	srai	r3,r3,8
    16e8:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
    16ec:	e0bff717 	ldw	r2,-36(fp)
    16f0:	10800084 	addi	r2,r2,2
    16f4:	e0fff817 	ldw	r3,-32(fp)
    16f8:	1885883a 	add	r2,r3,r2
    16fc:	e0ffff17 	ldw	r3,-4(fp)
    1700:	1807d43a 	srai	r3,r3,16
    1704:	10c00005 	stb	r3,0(r2)
  }
  if(display->color_depth == 24)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
    bytes_per_line = ((Hend - Hstart) * 3);
    for (i = 0; i < bytes_per_line; i+=3) 
    1708:	e0bff717 	ldw	r2,-36(fp)
    170c:	108000c4 	addi	r2,r2,3
    1710:	e0bff715 	stw	r2,-36(fp)
    1714:	e0fff717 	ldw	r3,-36(fp)
    1718:	e0bffb17 	ldw	r2,-20(fp)
    171c:	18bfe716 	blt	r3,r2,16bc <vid_draw_horiz_line+0x194>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
    1720:	e0fffa17 	ldw	r3,-24(fp)
    1724:	e0bffb17 	ldw	r2,-20(fp)
    1728:	1809883a 	mov	r4,r3
    172c:	e17ff817 	ldw	r5,-32(fp)
    1730:	100d883a 	mov	r6,r2
    1734:	000ac0c0 	call	ac0c <memcpy>
    1738:	00003206 	br	1804 <vid_draw_horiz_line+0x2dc>
  }
  else if(display->color_depth == 16)
    173c:	e0800317 	ldw	r2,12(fp)
    1740:	10800417 	ldw	r2,16(r2)
    1744:	10800418 	cmpnei	r2,r2,16
    1748:	10002e1e 	bne	r2,zero,1804 <vid_draw_horiz_line+0x2dc>
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
    174c:	e1000317 	ldw	r4,12(fp)
    1750:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    1754:	1021883a 	mov	r16,r2
    1758:	e0800317 	ldw	r2,12(fp)
    175c:	10800517 	ldw	r2,20(r2)
    1760:	1085883a 	add	r2,r2,r2
    1764:	1009883a 	mov	r4,r2
    1768:	e17ffe17 	ldw	r5,-8(fp)
    176c:	0009dec0 	call	9dec <__mulsi3>
    1770:	1007883a 	mov	r3,r2
    1774:	e0bffc0f 	ldh	r2,-16(fp)
    1778:	1085883a 	add	r2,r2,r2
    177c:	1885883a 	add	r2,r3,r2
    1780:	8085883a 	add	r2,r16,r2
    1784:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 2);
    1788:	e0fffd0f 	ldh	r3,-12(fp)
    178c:	e0bffc0f 	ldh	r2,-16(fp)
    1790:	1885c83a 	sub	r2,r3,r2
    1794:	1085883a 	add	r2,r2,r2
    1798:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=2) 
    179c:	e03ff715 	stw	zero,-36(fp)
    17a0:	00000f06 	br	17e0 <vid_draw_horiz_line+0x2b8>
    {
      *(fast_buffer + i) = (unsigned char)color;
    17a4:	e0bff717 	ldw	r2,-36(fp)
    17a8:	e0fff817 	ldw	r3,-32(fp)
    17ac:	1885883a 	add	r2,r3,r2
    17b0:	e0ffff17 	ldw	r3,-4(fp)
    17b4:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    17b8:	e0bff717 	ldw	r2,-36(fp)
    17bc:	10800044 	addi	r2,r2,1
    17c0:	e0fff817 	ldw	r3,-32(fp)
    17c4:	1885883a 	add	r2,r3,r2
    17c8:	e0ffff17 	ldw	r3,-4(fp)
    17cc:	1807d23a 	srai	r3,r3,8
    17d0:	10c00005 	stb	r3,0(r2)
  }
  else if(display->color_depth == 16)
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
    bytes_per_line = ((Hend - Hstart) * 2);
    for (i = 0; i < bytes_per_line; i+=2) 
    17d4:	e0bff717 	ldw	r2,-36(fp)
    17d8:	10800084 	addi	r2,r2,2
    17dc:	e0bff715 	stw	r2,-36(fp)
    17e0:	e0fff717 	ldw	r3,-36(fp)
    17e4:	e0bffb17 	ldw	r2,-20(fp)
    17e8:	18bfee16 	blt	r3,r2,17a4 <vid_draw_horiz_line+0x27c>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
    17ec:	e0fffa17 	ldw	r3,-24(fp)
    17f0:	e0bffb17 	ldw	r2,-20(fp)
    17f4:	1809883a 	mov	r4,r3
    17f8:	e17ff817 	ldw	r5,-32(fp)
    17fc:	100d883a 	mov	r6,r2
    1800:	000ac0c0 	call	ac0c <memcpy>
  }
  free(fast_buffer);
    1804:	e13ff817 	ldw	r4,-32(fp)
    1808:	000a4740 	call	a474 <free>
}
    180c:	e037883a 	mov	sp,fp
    1810:	dfc00217 	ldw	ra,8(sp)
    1814:	df000117 	ldw	fp,4(sp)
    1818:	dc000017 	ldw	r16,0(sp)
    181c:	dec00304 	addi	sp,sp,12
    1820:	f800283a 	ret

00001824 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
    1824:	defffc04 	addi	sp,sp,-16
    1828:	df000315 	stw	fp,12(sp)
    182c:	df000304 	addi	fp,sp,12
    1830:	e13ffd15 	stw	r4,-12(fp)
    1834:	e17ffe15 	stw	r5,-8(fp)
    1838:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
    183c:	e0bffe17 	ldw	r2,-8(fp)
    1840:	1085883a 	add	r2,r2,r2
    1844:	10800054 	ori	r2,r2,1
    1848:	1006917a 	slli	r3,r2,5
    184c:	e0bfff17 	ldw	r2,-4(fp)
    1850:	1886b03a 	or	r3,r3,r2
    1854:	e0bffd17 	ldw	r2,-12(fp)
    1858:	100492fa 	slli	r2,r2,11
    185c:	1884b03a 	or	r2,r3,r2
}
    1860:	e037883a 	mov	sp,fp
    1864:	df000017 	ldw	fp,0(sp)
    1868:	dec00104 	addi	sp,sp,4
    186c:	f800283a 	ret

00001870 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
    1870:	defffc04 	addi	sp,sp,-16
    1874:	df000315 	stw	fp,12(sp)
    1878:	df000304 	addi	fp,sp,12
    187c:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
    1880:	e0bfff17 	ldw	r2,-4(fp)
    1884:	10800003 	ldbu	r2,0(r2)
    1888:	1007883a 	mov	r3,r2
    188c:	00bffe04 	movi	r2,-8
    1890:	1884703a 	and	r2,r3,r2
    1894:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
    1898:	e0bfff17 	ldw	r2,-4(fp)
    189c:	10800044 	addi	r2,r2,1
    18a0:	10800003 	ldbu	r2,0(r2)
    18a4:	1007883a 	mov	r3,r2
    18a8:	00bfff04 	movi	r2,-4
    18ac:	1884703a 	and	r2,r3,r2
    18b0:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
    18b4:	e0bfff17 	ldw	r2,-4(fp)
    18b8:	10800084 	addi	r2,r2,2
    18bc:	10800003 	ldbu	r2,0(r2)
    18c0:	1007883a 	mov	r3,r2
    18c4:	00bffe04 	movi	r2,-8
    18c8:	1884703a 	and	r2,r3,r2
    18cc:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
    18d0:	e0bffd83 	ldbu	r2,-10(fp)
    18d4:	1004d0fa 	srli	r2,r2,3
    18d8:	10c03fcc 	andi	r3,r2,255
    18dc:	e0bffd43 	ldbu	r2,-11(fp)
    18e0:	100490fa 	slli	r2,r2,3
    18e4:	1884b03a 	or	r2,r3,r2
    18e8:	1007883a 	mov	r3,r2
    18ec:	e0bffd03 	ldbu	r2,-12(fp)
    18f0:	1004923a 	slli	r2,r2,8
    18f4:	1884b03a 	or	r2,r3,r2
    18f8:	e0bffe0d 	sth	r2,-8(fp)
	return output;
    18fc:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1900:	e037883a 	mov	sp,fp
    1904:	df000017 	ldw	fp,0(sp)
    1908:	dec00104 	addi	sp,sp,4
    190c:	f800283a 	ret

00001910 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
    1910:	defffd04 	addi	sp,sp,-12
    1914:	df000215 	stw	fp,8(sp)
    1918:	df000204 	addi	fp,sp,8
    191c:	2005883a 	mov	r2,r4
    1920:	e17fff15 	stw	r5,-4(fp)
    1924:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
    1928:	e0bffe0b 	ldhu	r2,-8(fp)
    192c:	1004d2fa 	srli	r2,r2,11
    1930:	1007883a 	mov	r3,r2
    1934:	e0bfff17 	ldw	r2,-4(fp)
    1938:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
    193c:	e0bfff17 	ldw	r2,-4(fp)
    1940:	10800044 	addi	r2,r2,1
    1944:	e0fffe0b 	ldhu	r3,-8(fp)
    1948:	18c00f8c 	andi	r3,r3,62
    194c:	1807d17a 	srai	r3,r3,5
    1950:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
    1954:	e0bfff17 	ldw	r2,-4(fp)
    1958:	10800084 	addi	r2,r2,2
    195c:	e0fffe0b 	ldhu	r3,-8(fp)
    1960:	18c007cc 	andi	r3,r3,31
    1964:	10c00005 	stb	r3,0(r2)
	
	return (0);
    1968:	0005883a 	mov	r2,zero
}
    196c:	e037883a 	mov	sp,fp
    1970:	df000017 	ldw	fp,0(sp)
    1974:	dec00104 	addi	sp,sp,4
    1978:	f800283a 	ret

0000197c <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
    197c:	defff304 	addi	sp,sp,-52
    1980:	dfc00c15 	stw	ra,48(sp)
    1984:	df000b15 	stw	fp,44(sp)
    1988:	dc400a15 	stw	r17,40(sp)
    198c:	dc000915 	stw	r16,36(sp)
    1990:	df000904 	addi	fp,sp,36
    1994:	e13ffc15 	stw	r4,-16(fp)
    1998:	e17ffd15 	stw	r5,-12(fp)
    199c:	e1bffe15 	stw	r6,-8(fp)
    19a0:	e1ffff15 	stw	r7,-4(fp)
  unsigned short* temp_line;
  int index_24 = 0;
    19a4:	e03ff715 	stw	zero,-36(fp)
  int index_16 = 0;
    19a8:	e03ff815 	stw	zero,-32(fp)
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
    19ac:	e1000517 	ldw	r4,20(fp)
    19b0:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    19b4:	1021883a 	mov	r16,r2
    ((y * (display->width * (display->bytes_per_pixel))) + 
    19b8:	e0800517 	ldw	r2,20(fp)
    19bc:	10c00517 	ldw	r3,20(r2)
    19c0:	e0800517 	ldw	r2,20(fp)
    19c4:	10800717 	ldw	r2,28(r2)
    19c8:	1809883a 	mov	r4,r3
    19cc:	100b883a 	mov	r5,r2
    19d0:	0009dec0 	call	9dec <__mulsi3>
    19d4:	1009883a 	mov	r4,r2
    19d8:	e17ffd17 	ldw	r5,-12(fp)
    19dc:	0009dec0 	call	9dec <__mulsi3>
    19e0:	1023883a 	mov	r17,r2
    (x * (display->bytes_per_pixel)));
    19e4:	e0800517 	ldw	r2,20(fp)
    19e8:	10800717 	ldw	r2,28(r2)
    19ec:	1009883a 	mov	r4,r2
    19f0:	e17ffc17 	ldw	r5,-16(fp)
    19f4:	0009dec0 	call	9dec <__mulsi3>
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
    ((y * (display->width * (display->bytes_per_pixel))) + 
    19f8:	8885883a 	add	r2,r17,r2
  int index_24 = 0;
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
    19fc:	8085883a 	add	r2,r16,r2
    1a00:	e0bff915 	stw	r2,-28(fp)
    ((y * (display->width * (display->bytes_per_pixel))) + 
    (x * (display->bytes_per_pixel)));
  
  bytes_in_line = num_pixels * display->bytes_per_pixel;
    1a04:	e0800517 	ldw	r2,20(fp)
    1a08:	10800717 	ldw	r2,28(r2)
    1a0c:	1009883a 	mov	r4,r2
    1a10:	e17fff17 	ldw	r5,-4(fp)
    1a14:	0009dec0 	call	9dec <__mulsi3>
    1a18:	e0bffa15 	stw	r2,-24(fp)
  
  if(source_color_depth == 24)
    1a1c:	e0800417 	ldw	r2,16(fp)
    1a20:	10800618 	cmpnei	r2,r2,24
    1a24:	1000491e 	bne	r2,zero,1b4c <vid_copy_line_to_frame_buffer+0x1d0>
  {
    if(display->color_depth == 16)
    1a28:	e0800517 	ldw	r2,20(fp)
    1a2c:	10800417 	ldw	r2,16(r2)
    1a30:	10800418 	cmpnei	r2,r2,16
    1a34:	10003b1e 	bne	r2,zero,1b24 <vid_copy_line_to_frame_buffer+0x1a8>
    {
      temp_line = malloc(bytes_in_line);
    1a38:	e13ffa17 	ldw	r4,-24(fp)
    1a3c:	000a4600 	call	a460 <malloc>
    1a40:	e0bffb15 	stw	r2,-20(fp)
      while(index_24 < bytes_in_line)
    1a44:	00002c06 	br	1af8 <vid_copy_line_to_frame_buffer+0x17c>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
    1a48:	e0bff817 	ldw	r2,-32(fp)
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	e0fffb17 	ldw	r3,-20(fp)
    1a54:	1885883a 	add	r2,r3,r2
    1a58:	e0fff717 	ldw	r3,-36(fp)
    1a5c:	18c00084 	addi	r3,r3,2
    1a60:	e13ffe17 	ldw	r4,-8(fp)
    1a64:	20c7883a 	add	r3,r4,r3
    1a68:	18c00003 	ldbu	r3,0(r3)
    1a6c:	18c03fcc 	andi	r3,r3,255
    1a70:	18c0201c 	xori	r3,r3,128
    1a74:	18ffe004 	addi	r3,r3,-128
    1a78:	18c03e0c 	andi	r3,r3,248
    1a7c:	1807d0fa 	srai	r3,r3,3
    1a80:	1809883a 	mov	r4,r3
    1a84:	e0fff717 	ldw	r3,-36(fp)
    1a88:	18c00044 	addi	r3,r3,1
    1a8c:	e17ffe17 	ldw	r5,-8(fp)
    1a90:	28c7883a 	add	r3,r5,r3
    1a94:	18c00003 	ldbu	r3,0(r3)
    1a98:	18c03fcc 	andi	r3,r3,255
    1a9c:	18c0201c 	xori	r3,r3,128
    1aa0:	18ffe004 	addi	r3,r3,-128
    1aa4:	18c03f0c 	andi	r3,r3,252
    1aa8:	180690fa 	slli	r3,r3,3
    1aac:	20c6b03a 	or	r3,r4,r3
    1ab0:	1809883a 	mov	r4,r3
    1ab4:	e0fff717 	ldw	r3,-36(fp)
    1ab8:	e17ffe17 	ldw	r5,-8(fp)
    1abc:	28c7883a 	add	r3,r5,r3
    1ac0:	18c00003 	ldbu	r3,0(r3)
    1ac4:	18c03fcc 	andi	r3,r3,255
    1ac8:	18c0201c 	xori	r3,r3,128
    1acc:	18ffe004 	addi	r3,r3,-128
    1ad0:	18c03e0c 	andi	r3,r3,248
    1ad4:	1806923a 	slli	r3,r3,8
    1ad8:	20c6b03a 	or	r3,r4,r3
    1adc:	10c0000d 	sth	r3,0(r2)
        index_16++;
    1ae0:	e0bff817 	ldw	r2,-32(fp)
    1ae4:	10800044 	addi	r2,r2,1
    1ae8:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
    1aec:	e0bff717 	ldw	r2,-36(fp)
    1af0:	108000c4 	addi	r2,r2,3
    1af4:	e0bff715 	stw	r2,-36(fp)
  if(source_color_depth == 24)
  {
    if(display->color_depth == 16)
    {
      temp_line = malloc(bytes_in_line);
      while(index_24 < bytes_in_line)
    1af8:	e0fff717 	ldw	r3,-36(fp)
    1afc:	e0bffa17 	ldw	r2,-24(fp)
    1b00:	18bfd136 	bltu	r3,r2,1a48 <vid_copy_line_to_frame_buffer+0xcc>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
    1b04:	e0bff917 	ldw	r2,-28(fp)
    1b08:	1009883a 	mov	r4,r2
    1b0c:	e17ffb17 	ldw	r5,-20(fp)
    1b10:	e1bffa17 	ldw	r6,-24(fp)
    1b14:	000ac0c0 	call	ac0c <memcpy>
      free(temp_line);
    1b18:	e13ffb17 	ldw	r4,-20(fp)
    1b1c:	000a4740 	call	a474 <free>
    1b20:	00003e06 	br	1c1c <vid_copy_line_to_frame_buffer+0x2a0>
    }
    else if(display->color_depth == 24)
    1b24:	e0800517 	ldw	r2,20(fp)
    1b28:	10800417 	ldw	r2,16(r2)
    1b2c:	10800618 	cmpnei	r2,r2,24
    1b30:	10003a1e 	bne	r2,zero,1c1c <vid_copy_line_to_frame_buffer+0x2a0>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    1b34:	e0bff917 	ldw	r2,-28(fp)
    1b38:	1009883a 	mov	r4,r2
    1b3c:	e17ffe17 	ldw	r5,-8(fp)
    1b40:	e1bffa17 	ldw	r6,-24(fp)
    1b44:	000ac0c0 	call	ac0c <memcpy>
    1b48:	00003406 	br	1c1c <vid_copy_line_to_frame_buffer+0x2a0>
    }
  }
  else if(source_color_depth == 16)
    1b4c:	e0800417 	ldw	r2,16(fp)
    1b50:	10800418 	cmpnei	r2,r2,16
    1b54:	1000311e 	bne	r2,zero,1c1c <vid_copy_line_to_frame_buffer+0x2a0>
  {
    if(display->color_depth == 24)
    1b58:	e0800517 	ldw	r2,20(fp)
    1b5c:	10800417 	ldw	r2,16(r2)
    1b60:	10800618 	cmpnei	r2,r2,24
    1b64:	1000241e 	bne	r2,zero,1bf8 <vid_copy_line_to_frame_buffer+0x27c>
    {
      temp_line = malloc(bytes_in_line);
    1b68:	e13ffa17 	ldw	r4,-24(fp)
    1b6c:	000a4600 	call	a460 <malloc>
    1b70:	e0bffb15 	stw	r2,-20(fp)
      while(index_16 < num_pixels )
    1b74:	00001506 	br	1bcc <vid_copy_line_to_frame_buffer+0x250>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
    1b78:	e0bff817 	ldw	r2,-32(fp)
    1b7c:	e0fffe17 	ldw	r3,-8(fp)
    1b80:	1885883a 	add	r2,r3,r2
    1b84:	10800003 	ldbu	r2,0(r2)
    1b88:	10803fcc 	andi	r2,r2,255
    1b8c:	1080201c 	xori	r2,r2,128
    1b90:	10bfe004 	addi	r2,r2,-128
    1b94:	10ffffcc 	andi	r3,r2,65535
    1b98:	e0bff717 	ldw	r2,-36(fp)
    1b9c:	1085883a 	add	r2,r2,r2
    1ba0:	e13ffb17 	ldw	r4,-20(fp)
    1ba4:	2085883a 	add	r2,r4,r2
    1ba8:	1809883a 	mov	r4,r3
    1bac:	100b883a 	mov	r5,r2
    1bb0:	00019100 	call	1910 <vid_color_convert16_24>
        index_16++;
    1bb4:	e0bff817 	ldw	r2,-32(fp)
    1bb8:	10800044 	addi	r2,r2,1
    1bbc:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
    1bc0:	e0bff717 	ldw	r2,-36(fp)
    1bc4:	108000c4 	addi	r2,r2,3
    1bc8:	e0bff715 	stw	r2,-36(fp)
  else if(source_color_depth == 16)
  {
    if(display->color_depth == 24)
    {
      temp_line = malloc(bytes_in_line);
      while(index_16 < num_pixels )
    1bcc:	e0fff817 	ldw	r3,-32(fp)
    1bd0:	e0bfff17 	ldw	r2,-4(fp)
    1bd4:	18bfe816 	blt	r3,r2,1b78 <vid_copy_line_to_frame_buffer+0x1fc>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
    1bd8:	e0bff917 	ldw	r2,-28(fp)
    1bdc:	1009883a 	mov	r4,r2
    1be0:	e17ffb17 	ldw	r5,-20(fp)
    1be4:	e1bffa17 	ldw	r6,-24(fp)
    1be8:	000ac0c0 	call	ac0c <memcpy>
      free(temp_line);
    1bec:	e13ffb17 	ldw	r4,-20(fp)
    1bf0:	000a4740 	call	a474 <free>
    1bf4:	00000906 	br	1c1c <vid_copy_line_to_frame_buffer+0x2a0>
      
    }
    else if(display->color_depth == 16)
    1bf8:	e0800517 	ldw	r2,20(fp)
    1bfc:	10800417 	ldw	r2,16(r2)
    1c00:	10800418 	cmpnei	r2,r2,16
    1c04:	1000051e 	bne	r2,zero,1c1c <vid_copy_line_to_frame_buffer+0x2a0>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    1c08:	e0bff917 	ldw	r2,-28(fp)
    1c0c:	1009883a 	mov	r4,r2
    1c10:	e17ffe17 	ldw	r5,-8(fp)
    1c14:	e1bffa17 	ldw	r6,-24(fp)
    1c18:	000ac0c0 	call	ac0c <memcpy>
    }
  }
  return(0);
    1c1c:	0005883a 	mov	r2,zero
}
    1c20:	e037883a 	mov	sp,fp
    1c24:	dfc00317 	ldw	ra,12(sp)
    1c28:	df000217 	ldw	fp,8(sp)
    1c2c:	dc400117 	ldw	r17,4(sp)
    1c30:	dc000017 	ldw	r16,0(sp)
    1c34:	dec00404 	addi	sp,sp,16
    1c38:	f800283a 	ret

00001c3c <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
    1c3c:	deffef04 	addi	sp,sp,-68
    1c40:	dfc01015 	stw	ra,64(sp)
    1c44:	df000f15 	stw	fp,60(sp)
    1c48:	df000f04 	addi	fp,sp,60
    1c4c:	2011883a 	mov	r8,r4
    1c50:	2809883a 	mov	r4,r5
    1c54:	3007883a 	mov	r3,r6
    1c58:	3805883a 	mov	r2,r7
    1c5c:	e1400217 	ldw	r5,8(fp)
    1c60:	e23ffb0d 	sth	r8,-20(fp)
    1c64:	e13ffc0d 	sth	r4,-16(fp)
    1c68:	e0fffd0d 	sth	r3,-12(fp)
    1c6c:	e0bffe0d 	sth	r2,-8(fp)
    1c70:	e17fff0d 	sth	r5,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
    1c74:	e0fffd0b 	ldhu	r3,-12(fp)
    1c78:	e0bffb0b 	ldhu	r2,-20(fp)
    1c7c:	1885c83a 	sub	r2,r3,r2
    1c80:	1000010e 	bge	r2,zero,1c88 <vid_draw_sloped_line+0x4c>
    1c84:	0085c83a 	sub	r2,zero,r2
    1c88:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
    1c8c:	e0fffe0b 	ldhu	r3,-8(fp)
    1c90:	e0bffc0b 	ldhu	r2,-16(fp)
    1c94:	1885c83a 	sub	r2,r3,r2
    1c98:	1000010e 	bge	r2,zero,1ca0 <vid_draw_sloped_line+0x64>
    1c9c:	0085c83a 	sub	r2,zero,r2
    1ca0:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
    1ca4:	e0bffb0b 	ldhu	r2,-20(fp)
    1ca8:	e0fffd0b 	ldhu	r3,-12(fp)
    1cac:	1880032e 	bgeu	r3,r2,1cbc <vid_draw_sloped_line+0x80>
    1cb0:	00bfffc4 	movi	r2,-1
    1cb4:	e0bff315 	stw	r2,-52(fp)
    1cb8:	00000206 	br	1cc4 <vid_draw_sloped_line+0x88>
    1cbc:	00800044 	movi	r2,1
    1cc0:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
    1cc4:	e0bffc0b 	ldhu	r2,-16(fp)
    1cc8:	e0fffe0b 	ldhu	r3,-8(fp)
    1ccc:	1880032e 	bgeu	r3,r2,1cdc <vid_draw_sloped_line+0xa0>
    1cd0:	00bfffc4 	movi	r2,-1
    1cd4:	e0bff415 	stw	r2,-48(fp)
    1cd8:	00000206 	br	1ce4 <vid_draw_sloped_line+0xa8>
    1cdc:	00800044 	movi	r2,1
    1ce0:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
    1ce4:	e0fff117 	ldw	r3,-60(fp)
    1ce8:	e0bff217 	ldw	r2,-56(fp)
    1cec:	18803416 	blt	r3,r2,1dc0 <vid_draw_sloped_line+0x184>
    int dPr   = vert_delta<<1;
    1cf0:	e0bff217 	ldw	r2,-56(fp)
    1cf4:	1085883a 	add	r2,r2,r2
    1cf8:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
    1cfc:	e0bff117 	ldw	r2,-60(fp)
    1d00:	1085883a 	add	r2,r2,r2
    1d04:	e0fff717 	ldw	r3,-36(fp)
    1d08:	1885c83a 	sub	r2,r3,r2
    1d0c:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
    1d10:	e0fff717 	ldw	r3,-36(fp)
    1d14:	e0bff117 	ldw	r2,-60(fp)
    1d18:	1885c83a 	sub	r2,r3,r2
    1d1c:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
    1d20:	00002406 	br	1db4 <vid_draw_sloped_line+0x178>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
    1d24:	e13ffb0b 	ldhu	r4,-20(fp)
    1d28:	e0fffc0b 	ldhu	r3,-16(fp)
    1d2c:	e0800317 	ldw	r2,12(fp)
    1d30:	180b883a 	mov	r5,r3
    1d34:	100d883a 	mov	r6,r2
    1d38:	e1c00417 	ldw	r7,16(fp)
    1d3c:	00010c00 	call	10c0 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
    1d40:	e0bff517 	ldw	r2,-44(fp)
    1d44:	00800f0e 	bge	zero,r2,1d84 <vid_draw_sloped_line+0x148>
        horiz_start+=horiz_incr;
    1d48:	e0bff317 	ldw	r2,-52(fp)
    1d4c:	1007883a 	mov	r3,r2
    1d50:	e0bffb0b 	ldhu	r2,-20(fp)
    1d54:	1885883a 	add	r2,r3,r2
    1d58:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
    1d5c:	e0bff417 	ldw	r2,-48(fp)
    1d60:	1007883a 	mov	r3,r2
    1d64:	e0bffc0b 	ldhu	r2,-16(fp)
    1d68:	1885883a 	add	r2,r3,r2
    1d6c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
    1d70:	e0fff517 	ldw	r3,-44(fp)
    1d74:	e0bff817 	ldw	r2,-32(fp)
    1d78:	1885883a 	add	r2,r3,r2
    1d7c:	e0bff515 	stw	r2,-44(fp)
    1d80:	00000906 	br	1da8 <vid_draw_sloped_line+0x16c>
      } else {
        horiz_start+=horiz_incr;
    1d84:	e0bff317 	ldw	r2,-52(fp)
    1d88:	1007883a 	mov	r3,r2
    1d8c:	e0bffb0b 	ldhu	r2,-20(fp)
    1d90:	1885883a 	add	r2,r3,r2
    1d94:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
    1d98:	e0fff517 	ldw	r3,-44(fp)
    1d9c:	e0bff717 	ldw	r2,-36(fp)
    1da0:	1885883a 	add	r2,r3,r2
    1da4:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
    1da8:	e0bff117 	ldw	r2,-60(fp)
    1dac:	10bfffc4 	addi	r2,r2,-1
    1db0:	e0bff115 	stw	r2,-60(fp)
    1db4:	e0bff117 	ldw	r2,-60(fp)
    1db8:	103fda0e 	bge	r2,zero,1d24 <vid_draw_sloped_line+0xe8>
    1dbc:	00003306 	br	1e8c <vid_draw_sloped_line+0x250>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
    1dc0:	e0bff117 	ldw	r2,-60(fp)
    1dc4:	1085883a 	add	r2,r2,r2
    1dc8:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
    1dcc:	e0bff217 	ldw	r2,-56(fp)
    1dd0:	1085883a 	add	r2,r2,r2
    1dd4:	e0fff917 	ldw	r3,-28(fp)
    1dd8:	1885c83a 	sub	r2,r3,r2
    1ddc:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
    1de0:	e0fff917 	ldw	r3,-28(fp)
    1de4:	e0bff217 	ldw	r2,-56(fp)
    1de8:	1885c83a 	sub	r2,r3,r2
    1dec:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
    1df0:	00002406 	br	1e84 <vid_draw_sloped_line+0x248>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
    1df4:	e13ffb0b 	ldhu	r4,-20(fp)
    1df8:	e0fffc0b 	ldhu	r3,-16(fp)
    1dfc:	e0800317 	ldw	r2,12(fp)
    1e00:	180b883a 	mov	r5,r3
    1e04:	100d883a 	mov	r6,r2
    1e08:	e1c00417 	ldw	r7,16(fp)
    1e0c:	00010c00 	call	10c0 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
    1e10:	e0bff617 	ldw	r2,-40(fp)
    1e14:	00800f0e 	bge	zero,r2,1e54 <vid_draw_sloped_line+0x218>
        horiz_start+=horiz_incr;
    1e18:	e0bff317 	ldw	r2,-52(fp)
    1e1c:	1007883a 	mov	r3,r2
    1e20:	e0bffb0b 	ldhu	r2,-20(fp)
    1e24:	1885883a 	add	r2,r3,r2
    1e28:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
    1e2c:	e0bff417 	ldw	r2,-48(fp)
    1e30:	1007883a 	mov	r3,r2
    1e34:	e0bffc0b 	ldhu	r2,-16(fp)
    1e38:	1885883a 	add	r2,r3,r2
    1e3c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
    1e40:	e0fff617 	ldw	r3,-40(fp)
    1e44:	e0bffa17 	ldw	r2,-24(fp)
    1e48:	1885883a 	add	r2,r3,r2
    1e4c:	e0bff615 	stw	r2,-40(fp)
    1e50:	00000906 	br	1e78 <vid_draw_sloped_line+0x23c>
      } else {
        vert_start+=vert_incr;
    1e54:	e0bff417 	ldw	r2,-48(fp)
    1e58:	1007883a 	mov	r3,r2
    1e5c:	e0bffc0b 	ldhu	r2,-16(fp)
    1e60:	1885883a 	add	r2,r3,r2
    1e64:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
    1e68:	e0fff617 	ldw	r3,-40(fp)
    1e6c:	e0bff917 	ldw	r2,-28(fp)
    1e70:	1885883a 	add	r2,r3,r2
    1e74:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
    1e78:	e0bff217 	ldw	r2,-56(fp)
    1e7c:	10bfffc4 	addi	r2,r2,-1
    1e80:	e0bff215 	stw	r2,-56(fp)
    1e84:	e0bff217 	ldw	r2,-56(fp)
    1e88:	103fda0e 	bge	r2,zero,1df4 <vid_draw_sloped_line+0x1b8>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
    1e8c:	e037883a 	mov	sp,fp
    1e90:	dfc00117 	ldw	ra,4(sp)
    1e94:	df000017 	ldw	fp,0(sp)
    1e98:	dec00204 	addi	sp,sp,8
    1e9c:	f800283a 	ret

00001ea0 <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
    1ea0:	defff104 	addi	sp,sp,-60
    1ea4:	dfc00e15 	stw	ra,56(sp)
    1ea8:	df000d15 	stw	fp,52(sp)
    1eac:	df000d04 	addi	fp,sp,52
    1eb0:	e13ffb15 	stw	r4,-20(fp)
    1eb4:	e17ffc15 	stw	r5,-16(fp)
    1eb8:	e1bffd15 	stw	r6,-12(fp)
    1ebc:	e1fffe15 	stw	r7,-8(fp)
    1ec0:	e0800217 	ldw	r2,8(fp)
    1ec4:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
    1ec8:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
    1ecc:	e0bffd17 	ldw	r2,-12(fp)
    1ed0:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
    1ed4:	e13ffd17 	ldw	r4,-12(fp)
    1ed8:	017fff04 	movi	r5,-4
    1edc:	0009dec0 	call	9dec <__mulsi3>
    1ee0:	10800144 	addi	r2,r2,5
    1ee4:	1000010e 	bge	r2,zero,1eec <vid_draw_circle+0x4c>
    1ee8:	108000c4 	addi	r2,r2,3
    1eec:	1005d0ba 	srai	r2,r2,2
    1ef0:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
    1ef4:	e0bfff07 	ldb	r2,-4(fp)
    1ef8:	d8000015 	stw	zero,0(sp)
    1efc:	d8000115 	stw	zero,4(sp)
    1f00:	e0fffe17 	ldw	r3,-8(fp)
    1f04:	d8c00215 	stw	r3,8(sp)
    1f08:	d8800315 	stw	r2,12(sp)
    1f0c:	e0800317 	ldw	r2,12(fp)
    1f10:	d8800415 	stw	r2,16(sp)
    1f14:	e13ffb17 	ldw	r4,-20(fp)
    1f18:	e17ffc17 	ldw	r5,-16(fp)
    1f1c:	e1bff817 	ldw	r6,-32(fp)
    1f20:	e1fff917 	ldw	r7,-28(fp)
    1f24:	000239c0 	call	239c <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
    1f28:	00002406 	br	1fbc <vid_draw_circle+0x11c>
    x++;
    1f2c:	e0bff817 	ldw	r2,-32(fp)
    1f30:	10800044 	addi	r2,r2,1
    1f34:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
    1f38:	e0bffa17 	ldw	r2,-24(fp)
    1f3c:	1000070e 	bge	r2,zero,1f5c <vid_draw_circle+0xbc>
      p += 2*x+1;
    1f40:	e0bff817 	ldw	r2,-32(fp)
    1f44:	1085883a 	add	r2,r2,r2
    1f48:	10800044 	addi	r2,r2,1
    1f4c:	e0fffa17 	ldw	r3,-24(fp)
    1f50:	1885883a 	add	r2,r3,r2
    1f54:	e0bffa15 	stw	r2,-24(fp)
    1f58:	00000b06 	br	1f88 <vid_draw_circle+0xe8>
    } else {
      y--;
    1f5c:	e0bff917 	ldw	r2,-28(fp)
    1f60:	10bfffc4 	addi	r2,r2,-1
    1f64:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
    1f68:	e0fff817 	ldw	r3,-32(fp)
    1f6c:	e0bff917 	ldw	r2,-28(fp)
    1f70:	1885c83a 	sub	r2,r3,r2
    1f74:	1085883a 	add	r2,r2,r2
    1f78:	10800044 	addi	r2,r2,1
    1f7c:	e0fffa17 	ldw	r3,-24(fp)
    1f80:	1885883a 	add	r2,r3,r2
    1f84:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
    1f88:	e0bfff07 	ldb	r2,-4(fp)
    1f8c:	d8000015 	stw	zero,0(sp)
    1f90:	d8000115 	stw	zero,4(sp)
    1f94:	e0fffe17 	ldw	r3,-8(fp)
    1f98:	d8c00215 	stw	r3,8(sp)
    1f9c:	d8800315 	stw	r2,12(sp)
    1fa0:	e0800317 	ldw	r2,12(fp)
    1fa4:	d8800415 	stw	r2,16(sp)
    1fa8:	e13ffb17 	ldw	r4,-20(fp)
    1fac:	e17ffc17 	ldw	r5,-16(fp)
    1fb0:	e1bff817 	ldw	r6,-32(fp)
    1fb4:	e1fff917 	ldw	r7,-28(fp)
    1fb8:	000239c0 	call	239c <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
    1fbc:	e0fff817 	ldw	r3,-32(fp)
    1fc0:	e0bff917 	ldw	r2,-28(fp)
    1fc4:	18bfd916 	blt	r3,r2,1f2c <vid_draw_circle+0x8c>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
    1fc8:	0005883a 	mov	r2,zero
}
    1fcc:	e037883a 	mov	sp,fp
    1fd0:	dfc00117 	ldw	ra,4(sp)
    1fd4:	df000017 	ldw	fp,0(sp)
    1fd8:	dec00204 	addi	sp,sp,8
    1fdc:	f800283a 	ret

00001fe0 <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
    1fe0:	deffec04 	addi	sp,sp,-80
    1fe4:	dfc01315 	stw	ra,76(sp)
    1fe8:	df001215 	stw	fp,72(sp)
    1fec:	df001204 	addi	fp,sp,72
    1ff0:	e13ffc15 	stw	r4,-16(fp)
    1ff4:	e17ffd15 	stw	r5,-12(fp)
    1ff8:	e1bffe15 	stw	r6,-8(fp)
    1ffc:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
    2000:	e0bffc17 	ldw	r2,-16(fp)
    2004:	e0fffe17 	ldw	r3,-8(fp)
    2008:	1880060e 	bge	r3,r2,2024 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
    200c:	e0bffe17 	ldw	r2,-8(fp)
    2010:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
    2014:	e0bffc17 	ldw	r2,-16(fp)
    2018:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
    201c:	e0bff617 	ldw	r2,-40(fp)
    2020:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
    2024:	e0bffd17 	ldw	r2,-12(fp)
    2028:	e0ffff17 	ldw	r3,-4(fp)
    202c:	1880060e 	bge	r3,r2,2048 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
    2030:	e0bfff17 	ldw	r2,-4(fp)
    2034:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
    2038:	e0bffd17 	ldw	r2,-12(fp)
    203c:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
    2040:	e0bff617 	ldw	r2,-40(fp)
    2044:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
    2048:	e0fffe17 	ldw	r3,-8(fp)
    204c:	e0bffc17 	ldw	r2,-16(fp)
    2050:	1885c83a 	sub	r2,r3,r2
    2054:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
    2058:	e0ffff17 	ldw	r3,-4(fp)
    205c:	e0bffd17 	ldw	r2,-12(fp)
    2060:	1885c83a 	sub	r2,r3,r2
    2064:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
    2068:	e0800217 	ldw	r2,8(fp)
    206c:	e0fff717 	ldw	r3,-36(fp)
    2070:	1806d07a 	srli	r3,r3,1
    2074:	1880032e 	bgeu	r3,r2,2084 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
    2078:	e0bff717 	ldw	r2,-36(fp)
    207c:	1004d07a 	srli	r2,r2,1
    2080:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
    2084:	e0800217 	ldw	r2,8(fp)
    2088:	e0fff817 	ldw	r3,-32(fp)
    208c:	1806d07a 	srli	r3,r3,1
    2090:	1880032e 	bgeu	r3,r2,20a0 <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
    2094:	e0bff817 	ldw	r2,-32(fp)
    2098:	1004d07a 	srli	r2,r2,1
    209c:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
    20a0:	e0800217 	ldw	r2,8(fp)
    20a4:	1085883a 	add	r2,r2,r2
    20a8:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
    20ac:	e0bff917 	ldw	r2,-28(fp)
    20b0:	e0fff717 	ldw	r3,-36(fp)
    20b4:	1885c83a 	sub	r2,r3,r2
    20b8:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
    20bc:	e0bff917 	ldw	r2,-28(fp)
    20c0:	e0fff817 	ldw	r3,-32(fp)
    20c4:	1885c83a 	sub	r2,r3,r2
    20c8:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
    20cc:	e03ff315 	stw	zero,-52(fp)
  y = radius;
    20d0:	e0800217 	ldw	r2,8(fp)
    20d4:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
    20d8:	e1000217 	ldw	r4,8(fp)
    20dc:	017fff04 	movi	r5,-4
    20e0:	0009dec0 	call	9dec <__mulsi3>
    20e4:	10800144 	addi	r2,r2,5
    20e8:	1000010e 	bge	r2,zero,20f0 <vid_draw_round_corner_box+0x110>
    20ec:	108000c4 	addi	r2,r2,3
    20f0:	1005d0ba 	srai	r2,r2,2
    20f4:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
    20f8:	e0fffc17 	ldw	r3,-16(fp)
    20fc:	e0800217 	ldw	r2,8(fp)
    2100:	1889883a 	add	r4,r3,r2
    2104:	e0fffd17 	ldw	r3,-12(fp)
    2108:	e0800217 	ldw	r2,8(fp)
    210c:	188b883a 	add	r5,r3,r2
    2110:	e0fff317 	ldw	r3,-52(fp)
    2114:	e0bff417 	ldw	r2,-48(fp)
    2118:	e23ffa17 	ldw	r8,-24(fp)
    211c:	e1fffb17 	ldw	r7,-20(fp)
    2120:	e1800417 	ldw	r6,16(fp)
    2124:	31803fcc 	andi	r6,r6,255
    2128:	3180201c 	xori	r6,r6,128
    212c:	31bfe004 	addi	r6,r6,-128
    2130:	da000015 	stw	r8,0(sp)
    2134:	d9c00115 	stw	r7,4(sp)
    2138:	e1c00317 	ldw	r7,12(fp)
    213c:	d9c00215 	stw	r7,8(sp)
    2140:	d9800315 	stw	r6,12(sp)
    2144:	e1800517 	ldw	r6,20(fp)
    2148:	d9800415 	stw	r6,16(sp)
    214c:	180d883a 	mov	r6,r3
    2150:	100f883a 	mov	r7,r2
    2154:	000239c0 	call	239c <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
    2158:	00003106 	br	2220 <vid_draw_round_corner_box+0x240>
    x++;
    215c:	e0bff317 	ldw	r2,-52(fp)
    2160:	10800044 	addi	r2,r2,1
    2164:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
    2168:	e0bff517 	ldw	r2,-44(fp)
    216c:	1000080e 	bge	r2,zero,2190 <vid_draw_round_corner_box+0x1b0>
      p += 2*x+1;
    2170:	e0bff317 	ldw	r2,-52(fp)
    2174:	1085883a 	add	r2,r2,r2
    2178:	1007883a 	mov	r3,r2
    217c:	e0bff517 	ldw	r2,-44(fp)
    2180:	1885883a 	add	r2,r3,r2
    2184:	10800044 	addi	r2,r2,1
    2188:	e0bff515 	stw	r2,-44(fp)
    218c:	00000c06 	br	21c0 <vid_draw_round_corner_box+0x1e0>
    } else {
      y--;
    2190:	e0bff417 	ldw	r2,-48(fp)
    2194:	10bfffc4 	addi	r2,r2,-1
    2198:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
    219c:	e0fff317 	ldw	r3,-52(fp)
    21a0:	e0bff417 	ldw	r2,-48(fp)
    21a4:	1885c83a 	sub	r2,r3,r2
    21a8:	1085883a 	add	r2,r2,r2
    21ac:	1007883a 	mov	r3,r2
    21b0:	e0bff517 	ldw	r2,-44(fp)
    21b4:	1885883a 	add	r2,r3,r2
    21b8:	10800044 	addi	r2,r2,1
    21bc:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
    21c0:	e0fffc17 	ldw	r3,-16(fp)
    21c4:	e0800217 	ldw	r2,8(fp)
    21c8:	1889883a 	add	r4,r3,r2
    21cc:	e0fffd17 	ldw	r3,-12(fp)
    21d0:	e0800217 	ldw	r2,8(fp)
    21d4:	188b883a 	add	r5,r3,r2
    21d8:	e0fff317 	ldw	r3,-52(fp)
    21dc:	e0bff417 	ldw	r2,-48(fp)
    21e0:	e23ffa17 	ldw	r8,-24(fp)
    21e4:	e1fffb17 	ldw	r7,-20(fp)
    21e8:	e1800417 	ldw	r6,16(fp)
    21ec:	31803fcc 	andi	r6,r6,255
    21f0:	3180201c 	xori	r6,r6,128
    21f4:	31bfe004 	addi	r6,r6,-128
    21f8:	da000015 	stw	r8,0(sp)
    21fc:	d9c00115 	stw	r7,4(sp)
    2200:	e1c00317 	ldw	r7,12(fp)
    2204:	d9c00215 	stw	r7,8(sp)
    2208:	d9800315 	stw	r6,12(sp)
    220c:	e1800517 	ldw	r6,20(fp)
    2210:	d9800415 	stw	r6,16(sp)
    2214:	180d883a 	mov	r6,r3
    2218:	100f883a 	mov	r7,r2
    221c:	000239c0 	call	239c <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
    2220:	e0fff317 	ldw	r3,-52(fp)
    2224:	e0bff417 	ldw	r2,-48(fp)
    2228:	18bfcc36 	bltu	r3,r2,215c <vid_draw_round_corner_box+0x17c>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
    222c:	e0800417 	ldw	r2,16(fp)
    2230:	10001026 	beq	r2,zero,2274 <vid_draw_round_corner_box+0x294>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
    2234:	e0fffd17 	ldw	r3,-12(fp)
    2238:	e0800217 	ldw	r2,8(fp)
    223c:	1887883a 	add	r3,r3,r2
    2240:	e13fff17 	ldw	r4,-4(fp)
    2244:	e0800217 	ldw	r2,8(fp)
    2248:	2085c83a 	sub	r2,r4,r2
    224c:	e1000317 	ldw	r4,12(fp)
    2250:	d9000015 	stw	r4,0(sp)
    2254:	e1000517 	ldw	r4,20(fp)
    2258:	d9000115 	stw	r4,4(sp)
    225c:	e13ffc17 	ldw	r4,-16(fp)
    2260:	180b883a 	mov	r5,r3
    2264:	e1bffe17 	ldw	r6,-8(fp)
    2268:	100f883a 	mov	r7,r2
    226c:	00012c80 	call	12c8 <vid_paint_block>
    2270:	00004406 	br	2384 <vid_draw_round_corner_box+0x3a4>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
    2274:	e0fffd17 	ldw	r3,-12(fp)
    2278:	e0800217 	ldw	r2,8(fp)
    227c:	1887883a 	add	r3,r3,r2
    2280:	e13fff17 	ldw	r4,-4(fp)
    2284:	e0800217 	ldw	r2,8(fp)
    2288:	2085c83a 	sub	r2,r4,r2
    228c:	01000044 	movi	r4,1
    2290:	d9000015 	stw	r4,0(sp)
    2294:	e1000317 	ldw	r4,12(fp)
    2298:	d9000115 	stw	r4,4(sp)
    229c:	e1000517 	ldw	r4,20(fp)
    22a0:	d9000215 	stw	r4,8(sp)
    22a4:	e13ffc17 	ldw	r4,-16(fp)
    22a8:	180b883a 	mov	r5,r3
    22ac:	e1bffc17 	ldw	r6,-16(fp)
    22b0:	100f883a 	mov	r7,r2
    22b4:	00006640 	call	664 <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
    22b8:	e0fffd17 	ldw	r3,-12(fp)
    22bc:	e0800217 	ldw	r2,8(fp)
    22c0:	1887883a 	add	r3,r3,r2
    22c4:	e13fff17 	ldw	r4,-4(fp)
    22c8:	e0800217 	ldw	r2,8(fp)
    22cc:	2085c83a 	sub	r2,r4,r2
    22d0:	01000044 	movi	r4,1
    22d4:	d9000015 	stw	r4,0(sp)
    22d8:	e1000317 	ldw	r4,12(fp)
    22dc:	d9000115 	stw	r4,4(sp)
    22e0:	e1000517 	ldw	r4,20(fp)
    22e4:	d9000215 	stw	r4,8(sp)
    22e8:	e13ffe17 	ldw	r4,-8(fp)
    22ec:	180b883a 	mov	r5,r3
    22f0:	e1bffe17 	ldw	r6,-8(fp)
    22f4:	100f883a 	mov	r7,r2
    22f8:	00006640 	call	664 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
    22fc:	e0fffc17 	ldw	r3,-16(fp)
    2300:	e0800217 	ldw	r2,8(fp)
    2304:	1887883a 	add	r3,r3,r2
    2308:	e13ffe17 	ldw	r4,-8(fp)
    230c:	e0800217 	ldw	r2,8(fp)
    2310:	2085c83a 	sub	r2,r4,r2
    2314:	01000044 	movi	r4,1
    2318:	d9000015 	stw	r4,0(sp)
    231c:	e1000317 	ldw	r4,12(fp)
    2320:	d9000115 	stw	r4,4(sp)
    2324:	e1000517 	ldw	r4,20(fp)
    2328:	d9000215 	stw	r4,8(sp)
    232c:	1809883a 	mov	r4,r3
    2330:	e17ffd17 	ldw	r5,-12(fp)
    2334:	100d883a 	mov	r6,r2
    2338:	e1fffd17 	ldw	r7,-12(fp)
    233c:	00006640 	call	664 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
    2340:	e0fffc17 	ldw	r3,-16(fp)
    2344:	e0800217 	ldw	r2,8(fp)
    2348:	1887883a 	add	r3,r3,r2
    234c:	e13ffe17 	ldw	r4,-8(fp)
    2350:	e0800217 	ldw	r2,8(fp)
    2354:	2085c83a 	sub	r2,r4,r2
    2358:	01000044 	movi	r4,1
    235c:	d9000015 	stw	r4,0(sp)
    2360:	e1000317 	ldw	r4,12(fp)
    2364:	d9000115 	stw	r4,4(sp)
    2368:	e1000517 	ldw	r4,20(fp)
    236c:	d9000215 	stw	r4,8(sp)
    2370:	1809883a 	mov	r4,r3
    2374:	e17fff17 	ldw	r5,-4(fp)
    2378:	100d883a 	mov	r6,r2
    237c:	e1ffff17 	ldw	r7,-4(fp)
    2380:	00006640 	call	664 <vid_draw_line>
  }

  return (0);
    2384:	0005883a 	mov	r2,zero
}
    2388:	e037883a 	mov	sp,fp
    238c:	dfc00117 	ldw	ra,4(sp)
    2390:	df000017 	ldw	fp,0(sp)
    2394:	dec00204 	addi	sp,sp,8
    2398:	f800283a 	ret

0000239c <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
    239c:	defff604 	addi	sp,sp,-40
    23a0:	dfc00915 	stw	ra,36(sp)
    23a4:	df000815 	stw	fp,32(sp)
    23a8:	df000804 	addi	fp,sp,32
    23ac:	e13ffb15 	stw	r4,-20(fp)
    23b0:	e17ffc15 	stw	r5,-16(fp)
    23b4:	e1bffd15 	stw	r6,-12(fp)
    23b8:	e1fffe15 	stw	r7,-8(fp)
    23bc:	e0800517 	ldw	r2,20(fp)
    23c0:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
    23c4:	e0bffd17 	ldw	r2,-12(fp)
    23c8:	1000861e 	bne	r2,zero,25e4 <vid_round_corner_points+0x248>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
    23cc:	e0fffc17 	ldw	r3,-16(fp)
    23d0:	e0bffe17 	ldw	r2,-8(fp)
    23d4:	1887883a 	add	r3,r3,r2
    23d8:	e0800317 	ldw	r2,12(fp)
    23dc:	1887883a 	add	r3,r3,r2
    23e0:	e0800417 	ldw	r2,16(fp)
    23e4:	e13ffb17 	ldw	r4,-20(fp)
    23e8:	180b883a 	mov	r5,r3
    23ec:	100d883a 	mov	r6,r2
    23f0:	e1c00617 	ldw	r7,24(fp)
    23f4:	00010c00 	call	10c0 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
    23f8:	e0fffb17 	ldw	r3,-20(fp)
    23fc:	e0800217 	ldw	r2,8(fp)
    2400:	1889883a 	add	r4,r3,r2
    2404:	e0fffc17 	ldw	r3,-16(fp)
    2408:	e0bffe17 	ldw	r2,-8(fp)
    240c:	1887883a 	add	r3,r3,r2
    2410:	e0800317 	ldw	r2,12(fp)
    2414:	1887883a 	add	r3,r3,r2
    2418:	e0800417 	ldw	r2,16(fp)
    241c:	180b883a 	mov	r5,r3
    2420:	100d883a 	mov	r6,r2
    2424:	e1c00617 	ldw	r7,24(fp)
    2428:	00010c00 	call	10c0 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
    242c:	e0fffc17 	ldw	r3,-16(fp)
    2430:	e0bffe17 	ldw	r2,-8(fp)
    2434:	1887c83a 	sub	r3,r3,r2
    2438:	e0800417 	ldw	r2,16(fp)
    243c:	e13ffb17 	ldw	r4,-20(fp)
    2440:	180b883a 	mov	r5,r3
    2444:	100d883a 	mov	r6,r2
    2448:	e1c00617 	ldw	r7,24(fp)
    244c:	00010c00 	call	10c0 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
    2450:	e0fffb17 	ldw	r3,-20(fp)
    2454:	e0800217 	ldw	r2,8(fp)
    2458:	1889883a 	add	r4,r3,r2
    245c:	e0fffc17 	ldw	r3,-16(fp)
    2460:	e0bffe17 	ldw	r2,-8(fp)
    2464:	1887c83a 	sub	r3,r3,r2
    2468:	e0800417 	ldw	r2,16(fp)
    246c:	180b883a 	mov	r5,r3
    2470:	100d883a 	mov	r6,r2
    2474:	e1c00617 	ldw	r7,24(fp)
    2478:	00010c00 	call	10c0 <vid_set_pixel>

        if(fill) {
    247c:	e0bfff07 	ldb	r2,-4(fp)
    2480:	10002b26 	beq	r2,zero,2530 <vid_round_corner_points+0x194>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
    2484:	e0fffb17 	ldw	r3,-20(fp)
    2488:	e0bffe17 	ldw	r2,-8(fp)
    248c:	1887c83a 	sub	r3,r3,r2
    2490:	e13ffb17 	ldw	r4,-20(fp)
    2494:	e0bffe17 	ldw	r2,-8(fp)
    2498:	2089883a 	add	r4,r4,r2
    249c:	e0800217 	ldw	r2,8(fp)
    24a0:	2085883a 	add	r2,r4,r2
    24a4:	01000044 	movi	r4,1
    24a8:	d9000015 	stw	r4,0(sp)
    24ac:	e1000417 	ldw	r4,16(fp)
    24b0:	d9000115 	stw	r4,4(sp)
    24b4:	e1000617 	ldw	r4,24(fp)
    24b8:	d9000215 	stw	r4,8(sp)
    24bc:	1809883a 	mov	r4,r3
    24c0:	e17ffc17 	ldw	r5,-16(fp)
    24c4:	100d883a 	mov	r6,r2
    24c8:	e1fffc17 	ldw	r7,-16(fp)
    24cc:	00006640 	call	664 <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
    24d0:	e0fffb17 	ldw	r3,-20(fp)
    24d4:	e0bffe17 	ldw	r2,-8(fp)
    24d8:	1889c83a 	sub	r4,r3,r2
    24dc:	e0fffc17 	ldw	r3,-16(fp)
    24e0:	e0800317 	ldw	r2,12(fp)
    24e4:	188b883a 	add	r5,r3,r2
    24e8:	e0fffb17 	ldw	r3,-20(fp)
    24ec:	e0bffe17 	ldw	r2,-8(fp)
    24f0:	1887883a 	add	r3,r3,r2
    24f4:	e0800217 	ldw	r2,8(fp)
    24f8:	1887883a 	add	r3,r3,r2
    24fc:	e1bffc17 	ldw	r6,-16(fp)
    2500:	e0800317 	ldw	r2,12(fp)
    2504:	3085883a 	add	r2,r6,r2
    2508:	01800044 	movi	r6,1
    250c:	d9800015 	stw	r6,0(sp)
    2510:	e1800417 	ldw	r6,16(fp)
    2514:	d9800115 	stw	r6,4(sp)
    2518:	e1800617 	ldw	r6,24(fp)
    251c:	d9800215 	stw	r6,8(sp)
    2520:	180d883a 	mov	r6,r3
    2524:	100f883a 	mov	r7,r2
    2528:	00006640 	call	664 <vid_draw_line>
    252c:	00016c06 	br	2ae0 <vid_round_corner_points+0x744>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
    2530:	e0fffb17 	ldw	r3,-20(fp)
    2534:	e0bffe17 	ldw	r2,-8(fp)
    2538:	1887883a 	add	r3,r3,r2
    253c:	e0800217 	ldw	r2,8(fp)
    2540:	1887883a 	add	r3,r3,r2
    2544:	e0800417 	ldw	r2,16(fp)
    2548:	1809883a 	mov	r4,r3
    254c:	e17ffc17 	ldw	r5,-16(fp)
    2550:	100d883a 	mov	r6,r2
    2554:	e1c00617 	ldw	r7,24(fp)
    2558:	00010c00 	call	10c0 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
    255c:	e0fffb17 	ldw	r3,-20(fp)
    2560:	e0bffe17 	ldw	r2,-8(fp)
    2564:	1887883a 	add	r3,r3,r2
    2568:	e0800217 	ldw	r2,8(fp)
    256c:	1889883a 	add	r4,r3,r2
    2570:	e0fffc17 	ldw	r3,-16(fp)
    2574:	e0800317 	ldw	r2,12(fp)
    2578:	1887883a 	add	r3,r3,r2
    257c:	e0800417 	ldw	r2,16(fp)
    2580:	180b883a 	mov	r5,r3
    2584:	100d883a 	mov	r6,r2
    2588:	e1c00617 	ldw	r7,24(fp)
    258c:	00010c00 	call	10c0 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
    2590:	e0fffb17 	ldw	r3,-20(fp)
    2594:	e0bffe17 	ldw	r2,-8(fp)
    2598:	1887c83a 	sub	r3,r3,r2
    259c:	e0800417 	ldw	r2,16(fp)
    25a0:	1809883a 	mov	r4,r3
    25a4:	e17ffc17 	ldw	r5,-16(fp)
    25a8:	100d883a 	mov	r6,r2
    25ac:	e1c00617 	ldw	r7,24(fp)
    25b0:	00010c00 	call	10c0 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
    25b4:	e0fffb17 	ldw	r3,-20(fp)
    25b8:	e0bffe17 	ldw	r2,-8(fp)
    25bc:	1889c83a 	sub	r4,r3,r2
    25c0:	e0fffc17 	ldw	r3,-16(fp)
    25c4:	e0800317 	ldw	r2,12(fp)
    25c8:	1887883a 	add	r3,r3,r2
    25cc:	e0800417 	ldw	r2,16(fp)
    25d0:	180b883a 	mov	r5,r3
    25d4:	100d883a 	mov	r6,r2
    25d8:	e1c00617 	ldw	r7,24(fp)
    25dc:	00010c00 	call	10c0 <vid_set_pixel>
    25e0:	00013f06 	br	2ae0 <vid_round_corner_points+0x744>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
    25e4:	e0fffd17 	ldw	r3,-12(fp)
    25e8:	e0bffe17 	ldw	r2,-8(fp)
    25ec:	18806a1e 	bne	r3,r2,2798 <vid_round_corner_points+0x3fc>
      if(fill) {
    25f0:	e0bfff07 	ldb	r2,-4(fp)
    25f4:	10003326 	beq	r2,zero,26c4 <vid_round_corner_points+0x328>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
    25f8:	e0fffb17 	ldw	r3,-20(fp)
    25fc:	e0bffd17 	ldw	r2,-12(fp)
    2600:	1889c83a 	sub	r4,r3,r2
    2604:	e0fffc17 	ldw	r3,-16(fp)
    2608:	e0bffe17 	ldw	r2,-8(fp)
    260c:	1887883a 	add	r3,r3,r2
    2610:	e0800317 	ldw	r2,12(fp)
    2614:	188b883a 	add	r5,r3,r2
    2618:	e0fffb17 	ldw	r3,-20(fp)
    261c:	e0bffd17 	ldw	r2,-12(fp)
    2620:	1887883a 	add	r3,r3,r2
    2624:	e0800217 	ldw	r2,8(fp)
    2628:	1887883a 	add	r3,r3,r2
    262c:	e1bffc17 	ldw	r6,-16(fp)
    2630:	e0bffe17 	ldw	r2,-8(fp)
    2634:	308d883a 	add	r6,r6,r2
    2638:	e0800317 	ldw	r2,12(fp)
    263c:	3085883a 	add	r2,r6,r2
    2640:	01800044 	movi	r6,1
    2644:	d9800015 	stw	r6,0(sp)
    2648:	e1800417 	ldw	r6,16(fp)
    264c:	d9800115 	stw	r6,4(sp)
    2650:	e1800617 	ldw	r6,24(fp)
    2654:	d9800215 	stw	r6,8(sp)
    2658:	180d883a 	mov	r6,r3
    265c:	100f883a 	mov	r7,r2
    2660:	00006640 	call	664 <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
    2664:	e0fffb17 	ldw	r3,-20(fp)
    2668:	e0bffd17 	ldw	r2,-12(fp)
    266c:	1889c83a 	sub	r4,r3,r2
    2670:	e0fffc17 	ldw	r3,-16(fp)
    2674:	e0bffe17 	ldw	r2,-8(fp)
    2678:	188bc83a 	sub	r5,r3,r2
    267c:	e0fffb17 	ldw	r3,-20(fp)
    2680:	e0bffd17 	ldw	r2,-12(fp)
    2684:	1887883a 	add	r3,r3,r2
    2688:	e0800217 	ldw	r2,8(fp)
    268c:	1887883a 	add	r3,r3,r2
    2690:	e1bffc17 	ldw	r6,-16(fp)
    2694:	e0bffe17 	ldw	r2,-8(fp)
    2698:	3085c83a 	sub	r2,r6,r2
    269c:	01800044 	movi	r6,1
    26a0:	d9800015 	stw	r6,0(sp)
    26a4:	e1800417 	ldw	r6,16(fp)
    26a8:	d9800115 	stw	r6,4(sp)
    26ac:	e1800617 	ldw	r6,24(fp)
    26b0:	d9800215 	stw	r6,8(sp)
    26b4:	180d883a 	mov	r6,r3
    26b8:	100f883a 	mov	r7,r2
    26bc:	00006640 	call	664 <vid_draw_line>
    26c0:	00010706 	br	2ae0 <vid_round_corner_points+0x744>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
    26c4:	e0fffb17 	ldw	r3,-20(fp)
    26c8:	e0bffd17 	ldw	r2,-12(fp)
    26cc:	1887883a 	add	r3,r3,r2
    26d0:	e0800217 	ldw	r2,8(fp)
    26d4:	1889883a 	add	r4,r3,r2
    26d8:	e0fffc17 	ldw	r3,-16(fp)
    26dc:	e0bffe17 	ldw	r2,-8(fp)
    26e0:	1887883a 	add	r3,r3,r2
    26e4:	e0800317 	ldw	r2,12(fp)
    26e8:	1887883a 	add	r3,r3,r2
    26ec:	e0800417 	ldw	r2,16(fp)
    26f0:	180b883a 	mov	r5,r3
    26f4:	100d883a 	mov	r6,r2
    26f8:	e1c00617 	ldw	r7,24(fp)
    26fc:	00010c00 	call	10c0 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
    2700:	e0fffb17 	ldw	r3,-20(fp)
    2704:	e0bffd17 	ldw	r2,-12(fp)
    2708:	1889c83a 	sub	r4,r3,r2
    270c:	e0fffc17 	ldw	r3,-16(fp)
    2710:	e0bffe17 	ldw	r2,-8(fp)
    2714:	1887883a 	add	r3,r3,r2
    2718:	e0800317 	ldw	r2,12(fp)
    271c:	1887883a 	add	r3,r3,r2
    2720:	e0800417 	ldw	r2,16(fp)
    2724:	180b883a 	mov	r5,r3
    2728:	100d883a 	mov	r6,r2
    272c:	e1c00617 	ldw	r7,24(fp)
    2730:	00010c00 	call	10c0 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
    2734:	e0fffb17 	ldw	r3,-20(fp)
    2738:	e0bffd17 	ldw	r2,-12(fp)
    273c:	1887883a 	add	r3,r3,r2
    2740:	e0800217 	ldw	r2,8(fp)
    2744:	1889883a 	add	r4,r3,r2
    2748:	e0fffc17 	ldw	r3,-16(fp)
    274c:	e0bffe17 	ldw	r2,-8(fp)
    2750:	1887c83a 	sub	r3,r3,r2
    2754:	e0800417 	ldw	r2,16(fp)
    2758:	180b883a 	mov	r5,r3
    275c:	100d883a 	mov	r6,r2
    2760:	e1c00617 	ldw	r7,24(fp)
    2764:	00010c00 	call	10c0 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
    2768:	e0fffb17 	ldw	r3,-20(fp)
    276c:	e0bffd17 	ldw	r2,-12(fp)
    2770:	1889c83a 	sub	r4,r3,r2
    2774:	e0fffc17 	ldw	r3,-16(fp)
    2778:	e0bffe17 	ldw	r2,-8(fp)
    277c:	1887c83a 	sub	r3,r3,r2
    2780:	e0800417 	ldw	r2,16(fp)
    2784:	180b883a 	mov	r5,r3
    2788:	100d883a 	mov	r6,r2
    278c:	e1c00617 	ldw	r7,24(fp)
    2790:	00010c00 	call	10c0 <vid_set_pixel>
    2794:	0000d206 	br	2ae0 <vid_round_corner_points+0x744>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
    2798:	e0fffd17 	ldw	r3,-12(fp)
    279c:	e0bffe17 	ldw	r2,-8(fp)
    27a0:	1880cf0e 	bge	r3,r2,2ae0 <vid_round_corner_points+0x744>
        if(fill) {
    27a4:	e0bfff07 	ldb	r2,-4(fp)
    27a8:	10006526 	beq	r2,zero,2940 <vid_round_corner_points+0x5a4>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
    27ac:	e0fffb17 	ldw	r3,-20(fp)
    27b0:	e0bffd17 	ldw	r2,-12(fp)
    27b4:	1889c83a 	sub	r4,r3,r2
    27b8:	e0fffc17 	ldw	r3,-16(fp)
    27bc:	e0bffe17 	ldw	r2,-8(fp)
    27c0:	1887883a 	add	r3,r3,r2
    27c4:	e0800317 	ldw	r2,12(fp)
    27c8:	188b883a 	add	r5,r3,r2
    27cc:	e0fffb17 	ldw	r3,-20(fp)
    27d0:	e0bffd17 	ldw	r2,-12(fp)
    27d4:	1887883a 	add	r3,r3,r2
    27d8:	e0800217 	ldw	r2,8(fp)
    27dc:	1887883a 	add	r3,r3,r2
    27e0:	e1bffc17 	ldw	r6,-16(fp)
    27e4:	e0bffe17 	ldw	r2,-8(fp)
    27e8:	308d883a 	add	r6,r6,r2
    27ec:	e0800317 	ldw	r2,12(fp)
    27f0:	3085883a 	add	r2,r6,r2
    27f4:	01800044 	movi	r6,1
    27f8:	d9800015 	stw	r6,0(sp)
    27fc:	e1800417 	ldw	r6,16(fp)
    2800:	d9800115 	stw	r6,4(sp)
    2804:	e1800617 	ldw	r6,24(fp)
    2808:	d9800215 	stw	r6,8(sp)
    280c:	180d883a 	mov	r6,r3
    2810:	100f883a 	mov	r7,r2
    2814:	00006640 	call	664 <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
    2818:	e0fffb17 	ldw	r3,-20(fp)
    281c:	e0bffe17 	ldw	r2,-8(fp)
    2820:	1889c83a 	sub	r4,r3,r2
    2824:	e0fffc17 	ldw	r3,-16(fp)
    2828:	e0bffd17 	ldw	r2,-12(fp)
    282c:	1887883a 	add	r3,r3,r2
    2830:	e0800317 	ldw	r2,12(fp)
    2834:	188b883a 	add	r5,r3,r2
    2838:	e0fffb17 	ldw	r3,-20(fp)
    283c:	e0bffe17 	ldw	r2,-8(fp)
    2840:	1887883a 	add	r3,r3,r2
    2844:	e0800217 	ldw	r2,8(fp)
    2848:	1887883a 	add	r3,r3,r2
    284c:	e1bffc17 	ldw	r6,-16(fp)
    2850:	e0bffd17 	ldw	r2,-12(fp)
    2854:	308d883a 	add	r6,r6,r2
    2858:	e0800317 	ldw	r2,12(fp)
    285c:	3085883a 	add	r2,r6,r2
    2860:	01800044 	movi	r6,1
    2864:	d9800015 	stw	r6,0(sp)
    2868:	e1800417 	ldw	r6,16(fp)
    286c:	d9800115 	stw	r6,4(sp)
    2870:	e1800617 	ldw	r6,24(fp)
    2874:	d9800215 	stw	r6,8(sp)
    2878:	180d883a 	mov	r6,r3
    287c:	100f883a 	mov	r7,r2
    2880:	00006640 	call	664 <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
    2884:	e0fffb17 	ldw	r3,-20(fp)
    2888:	e0bffe17 	ldw	r2,-8(fp)
    288c:	1889c83a 	sub	r4,r3,r2
    2890:	e0fffc17 	ldw	r3,-16(fp)
    2894:	e0bffd17 	ldw	r2,-12(fp)
    2898:	188bc83a 	sub	r5,r3,r2
    289c:	e0fffb17 	ldw	r3,-20(fp)
    28a0:	e0bffe17 	ldw	r2,-8(fp)
    28a4:	1887883a 	add	r3,r3,r2
    28a8:	e0800217 	ldw	r2,8(fp)
    28ac:	1887883a 	add	r3,r3,r2
    28b0:	e1bffc17 	ldw	r6,-16(fp)
    28b4:	e0bffd17 	ldw	r2,-12(fp)
    28b8:	3085c83a 	sub	r2,r6,r2
    28bc:	01800044 	movi	r6,1
    28c0:	d9800015 	stw	r6,0(sp)
    28c4:	e1800417 	ldw	r6,16(fp)
    28c8:	d9800115 	stw	r6,4(sp)
    28cc:	e1800617 	ldw	r6,24(fp)
    28d0:	d9800215 	stw	r6,8(sp)
    28d4:	180d883a 	mov	r6,r3
    28d8:	100f883a 	mov	r7,r2
    28dc:	00006640 	call	664 <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
    28e0:	e0fffb17 	ldw	r3,-20(fp)
    28e4:	e0bffd17 	ldw	r2,-12(fp)
    28e8:	1889c83a 	sub	r4,r3,r2
    28ec:	e0fffc17 	ldw	r3,-16(fp)
    28f0:	e0bffe17 	ldw	r2,-8(fp)
    28f4:	188bc83a 	sub	r5,r3,r2
    28f8:	e0fffb17 	ldw	r3,-20(fp)
    28fc:	e0bffd17 	ldw	r2,-12(fp)
    2900:	1887883a 	add	r3,r3,r2
    2904:	e0800217 	ldw	r2,8(fp)
    2908:	1887883a 	add	r3,r3,r2
    290c:	e1bffc17 	ldw	r6,-16(fp)
    2910:	e0bffe17 	ldw	r2,-8(fp)
    2914:	3085c83a 	sub	r2,r6,r2
    2918:	01800044 	movi	r6,1
    291c:	d9800015 	stw	r6,0(sp)
    2920:	e1800417 	ldw	r6,16(fp)
    2924:	d9800115 	stw	r6,4(sp)
    2928:	e1800617 	ldw	r6,24(fp)
    292c:	d9800215 	stw	r6,8(sp)
    2930:	180d883a 	mov	r6,r3
    2934:	100f883a 	mov	r7,r2
    2938:	00006640 	call	664 <vid_draw_line>
    293c:	00006806 	br	2ae0 <vid_round_corner_points+0x744>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
    2940:	e0fffb17 	ldw	r3,-20(fp)
    2944:	e0bffd17 	ldw	r2,-12(fp)
    2948:	1887883a 	add	r3,r3,r2
    294c:	e0800217 	ldw	r2,8(fp)
    2950:	1889883a 	add	r4,r3,r2
    2954:	e0fffc17 	ldw	r3,-16(fp)
    2958:	e0bffe17 	ldw	r2,-8(fp)
    295c:	1887883a 	add	r3,r3,r2
    2960:	e0800317 	ldw	r2,12(fp)
    2964:	1887883a 	add	r3,r3,r2
    2968:	e0800417 	ldw	r2,16(fp)
    296c:	180b883a 	mov	r5,r3
    2970:	100d883a 	mov	r6,r2
    2974:	e1c00617 	ldw	r7,24(fp)
    2978:	00010c00 	call	10c0 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
    297c:	e0fffb17 	ldw	r3,-20(fp)
    2980:	e0bffd17 	ldw	r2,-12(fp)
    2984:	1889c83a 	sub	r4,r3,r2
    2988:	e0fffc17 	ldw	r3,-16(fp)
    298c:	e0bffe17 	ldw	r2,-8(fp)
    2990:	1887883a 	add	r3,r3,r2
    2994:	e0800317 	ldw	r2,12(fp)
    2998:	1887883a 	add	r3,r3,r2
    299c:	e0800417 	ldw	r2,16(fp)
    29a0:	180b883a 	mov	r5,r3
    29a4:	100d883a 	mov	r6,r2
    29a8:	e1c00617 	ldw	r7,24(fp)
    29ac:	00010c00 	call	10c0 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
    29b0:	e0fffb17 	ldw	r3,-20(fp)
    29b4:	e0bffd17 	ldw	r2,-12(fp)
    29b8:	1887883a 	add	r3,r3,r2
    29bc:	e0800217 	ldw	r2,8(fp)
    29c0:	1889883a 	add	r4,r3,r2
    29c4:	e0fffc17 	ldw	r3,-16(fp)
    29c8:	e0bffe17 	ldw	r2,-8(fp)
    29cc:	1887c83a 	sub	r3,r3,r2
    29d0:	e0800417 	ldw	r2,16(fp)
    29d4:	180b883a 	mov	r5,r3
    29d8:	100d883a 	mov	r6,r2
    29dc:	e1c00617 	ldw	r7,24(fp)
    29e0:	00010c00 	call	10c0 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
    29e4:	e0fffb17 	ldw	r3,-20(fp)
    29e8:	e0bffd17 	ldw	r2,-12(fp)
    29ec:	1889c83a 	sub	r4,r3,r2
    29f0:	e0fffc17 	ldw	r3,-16(fp)
    29f4:	e0bffe17 	ldw	r2,-8(fp)
    29f8:	1887c83a 	sub	r3,r3,r2
    29fc:	e0800417 	ldw	r2,16(fp)
    2a00:	180b883a 	mov	r5,r3
    2a04:	100d883a 	mov	r6,r2
    2a08:	e1c00617 	ldw	r7,24(fp)
    2a0c:	00010c00 	call	10c0 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
    2a10:	e0fffb17 	ldw	r3,-20(fp)
    2a14:	e0bffe17 	ldw	r2,-8(fp)
    2a18:	1887883a 	add	r3,r3,r2
    2a1c:	e0800217 	ldw	r2,8(fp)
    2a20:	1889883a 	add	r4,r3,r2
    2a24:	e0fffc17 	ldw	r3,-16(fp)
    2a28:	e0bffd17 	ldw	r2,-12(fp)
    2a2c:	1887883a 	add	r3,r3,r2
    2a30:	e0800317 	ldw	r2,12(fp)
    2a34:	1887883a 	add	r3,r3,r2
    2a38:	e0800417 	ldw	r2,16(fp)
    2a3c:	180b883a 	mov	r5,r3
    2a40:	100d883a 	mov	r6,r2
    2a44:	e1c00617 	ldw	r7,24(fp)
    2a48:	00010c00 	call	10c0 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
    2a4c:	e0fffb17 	ldw	r3,-20(fp)
    2a50:	e0bffe17 	ldw	r2,-8(fp)
    2a54:	1889c83a 	sub	r4,r3,r2
    2a58:	e0fffc17 	ldw	r3,-16(fp)
    2a5c:	e0bffd17 	ldw	r2,-12(fp)
    2a60:	1887883a 	add	r3,r3,r2
    2a64:	e0800317 	ldw	r2,12(fp)
    2a68:	1887883a 	add	r3,r3,r2
    2a6c:	e0800417 	ldw	r2,16(fp)
    2a70:	180b883a 	mov	r5,r3
    2a74:	100d883a 	mov	r6,r2
    2a78:	e1c00617 	ldw	r7,24(fp)
    2a7c:	00010c00 	call	10c0 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
    2a80:	e0fffb17 	ldw	r3,-20(fp)
    2a84:	e0bffe17 	ldw	r2,-8(fp)
    2a88:	1887883a 	add	r3,r3,r2
    2a8c:	e0800217 	ldw	r2,8(fp)
    2a90:	1889883a 	add	r4,r3,r2
    2a94:	e0fffc17 	ldw	r3,-16(fp)
    2a98:	e0bffd17 	ldw	r2,-12(fp)
    2a9c:	1887c83a 	sub	r3,r3,r2
    2aa0:	e0800417 	ldw	r2,16(fp)
    2aa4:	180b883a 	mov	r5,r3
    2aa8:	100d883a 	mov	r6,r2
    2aac:	e1c00617 	ldw	r7,24(fp)
    2ab0:	00010c00 	call	10c0 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
    2ab4:	e0fffb17 	ldw	r3,-20(fp)
    2ab8:	e0bffe17 	ldw	r2,-8(fp)
    2abc:	1889c83a 	sub	r4,r3,r2
    2ac0:	e0fffc17 	ldw	r3,-16(fp)
    2ac4:	e0bffd17 	ldw	r2,-12(fp)
    2ac8:	1887c83a 	sub	r3,r3,r2
    2acc:	e0800417 	ldw	r2,16(fp)
    2ad0:	180b883a 	mov	r5,r3
    2ad4:	100d883a 	mov	r6,r2
    2ad8:	e1c00617 	ldw	r7,24(fp)
    2adc:	00010c00 	call	10c0 <vid_set_pixel>
        }
    }
}
    2ae0:	e037883a 	mov	sp,fp
    2ae4:	dfc00117 	ldw	ra,4(sp)
    2ae8:	df000017 	ldw	fp,0(sp)
    2aec:	dec00204 	addi	sp,sp,8
    2af0:	f800283a 	ret

00002af4 <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
    2af4:	defffc04 	addi	sp,sp,-16
    2af8:	df000315 	stw	fp,12(sp)
    2afc:	df000304 	addi	fp,sp,12
    2b00:	e13ffd15 	stw	r4,-12(fp)
    2b04:	e17ffe15 	stw	r5,-8(fp)
    2b08:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
    2b0c:	e0fffd17 	ldw	r3,-12(fp)
    2b10:	e0bffe17 	ldw	r2,-8(fp)
    2b14:	1880020e 	bge	r3,r2,2b20 <max3+0x2c>
    a = b;
    2b18:	e0bffe17 	ldw	r2,-8(fp)
    2b1c:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
    2b20:	e0fffd17 	ldw	r3,-12(fp)
    2b24:	e0bfff17 	ldw	r2,-4(fp)
    2b28:	1880020e 	bge	r3,r2,2b34 <max3+0x40>
    a = c;
    2b2c:	e0bfff17 	ldw	r2,-4(fp)
    2b30:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
    2b34:	e0bffd17 	ldw	r2,-12(fp)
}
    2b38:	e037883a 	mov	sp,fp
    2b3c:	df000017 	ldw	fp,0(sp)
    2b40:	dec00104 	addi	sp,sp,4
    2b44:	f800283a 	ret

00002b48 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
    2b48:	defffc04 	addi	sp,sp,-16
    2b4c:	df000315 	stw	fp,12(sp)
    2b50:	df000304 	addi	fp,sp,12
    2b54:	e13ffd15 	stw	r4,-12(fp)
    2b58:	e17ffe15 	stw	r5,-8(fp)
    2b5c:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
    2b60:	e0bffd17 	ldw	r2,-12(fp)
    2b64:	e0fffe17 	ldw	r3,-8(fp)
    2b68:	1880020e 	bge	r3,r2,2b74 <min3+0x2c>
    a = b;
    2b6c:	e0bffe17 	ldw	r2,-8(fp)
    2b70:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
    2b74:	e0bffd17 	ldw	r2,-12(fp)
    2b78:	e0ffff17 	ldw	r3,-4(fp)
    2b7c:	1880020e 	bge	r3,r2,2b88 <min3+0x40>
    a = c;
    2b80:	e0bfff17 	ldw	r2,-4(fp)
    2b84:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
    2b88:	e0bffd17 	ldw	r2,-12(fp)
}
    2b8c:	e037883a 	mov	sp,fp
    2b90:	df000017 	ldw	fp,0(sp)
    2b94:	dec00104 	addi	sp,sp,4
    2b98:	f800283a 	ret

00002b9c <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
    2b9c:	defff904 	addi	sp,sp,-28
    2ba0:	dfc00615 	stw	ra,24(sp)
    2ba4:	df000515 	stw	fp,20(sp)
    2ba8:	df000504 	addi	fp,sp,20
    2bac:	e13ffd15 	stw	r4,-12(fp)
    2bb0:	e17ffe15 	stw	r5,-8(fp)
    2bb4:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
    2bb8:	e13ffd17 	ldw	r4,-12(fp)
    2bbc:	e17ffe17 	ldw	r5,-8(fp)
    2bc0:	e1bfff17 	ldw	r6,-4(fp)
    2bc4:	0002af40 	call	2af4 <max3>
    2bc8:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
    2bcc:	e13ffd17 	ldw	r4,-12(fp)
    2bd0:	e17ffe17 	ldw	r5,-8(fp)
    2bd4:	e1bfff17 	ldw	r6,-4(fp)
    2bd8:	0002b480 	call	2b48 <min3>
    2bdc:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
    2be0:	e0fffb17 	ldw	r3,-20(fp)
    2be4:	e0bffc17 	ldw	r2,-16(fp)
    2be8:	1885c83a 	sub	r2,r3,r2
}
    2bec:	e037883a 	mov	sp,fp
    2bf0:	dfc00117 	ldw	ra,4(sp)
    2bf4:	df000017 	ldw	fp,0(sp)
    2bf8:	dec00204 	addi	sp,sp,8
    2bfc:	f800283a 	ret

00002c00 <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
    2c00:	defffc04 	addi	sp,sp,-16
    2c04:	df000315 	stw	fp,12(sp)
    2c08:	df000304 	addi	fp,sp,12
    2c0c:	e13ffd15 	stw	r4,-12(fp)
    2c10:	e17ffe15 	stw	r5,-8(fp)
    2c14:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
    2c18:	e0bffe17 	ldw	r2,-8(fp)
    2c1c:	100490fa 	slli	r2,r2,3
    2c20:	e0ffff17 	ldw	r3,-4(fp)
    2c24:	1885883a 	add	r2,r3,r2
    2c28:	10800017 	ldw	r2,0(r2)
    2c2c:	10bfffd8 	cmpnei	r2,r2,-1
    2c30:	10000e1e 	bne	r2,zero,2c6c <vid_put_pixel_in_span_map+0x6c>
  {
    span_array[y*2] = x;
    2c34:	e0bffe17 	ldw	r2,-8(fp)
    2c38:	100490fa 	slli	r2,r2,3
    2c3c:	e0ffff17 	ldw	r3,-4(fp)
    2c40:	1885883a 	add	r2,r3,r2
    2c44:	e0fffd17 	ldw	r3,-12(fp)
    2c48:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
    2c4c:	e0bffe17 	ldw	r2,-8(fp)
    2c50:	100490fa 	slli	r2,r2,3
    2c54:	10800104 	addi	r2,r2,4
    2c58:	e0ffff17 	ldw	r3,-4(fp)
    2c5c:	1885883a 	add	r2,r3,r2
    2c60:	e0fffd17 	ldw	r3,-12(fp)
    2c64:	10c00015 	stw	r3,0(r2)
    2c68:	00001d06 	br	2ce0 <vid_put_pixel_in_span_map+0xe0>
  }
  else if( span_array[y*2] > x )
    2c6c:	e0bffe17 	ldw	r2,-8(fp)
    2c70:	100490fa 	slli	r2,r2,3
    2c74:	e0ffff17 	ldw	r3,-4(fp)
    2c78:	1885883a 	add	r2,r3,r2
    2c7c:	10800017 	ldw	r2,0(r2)
    2c80:	e0fffd17 	ldw	r3,-12(fp)
    2c84:	1880070e 	bge	r3,r2,2ca4 <vid_put_pixel_in_span_map+0xa4>
    span_array[y*2] = x;
    2c88:	e0bffe17 	ldw	r2,-8(fp)
    2c8c:	100490fa 	slli	r2,r2,3
    2c90:	e0ffff17 	ldw	r3,-4(fp)
    2c94:	1885883a 	add	r2,r3,r2
    2c98:	e0fffd17 	ldw	r3,-12(fp)
    2c9c:	10c00015 	stw	r3,0(r2)
    2ca0:	00000f06 	br	2ce0 <vid_put_pixel_in_span_map+0xe0>
  else if( span_array[(y*2)+1] < x )
    2ca4:	e0bffe17 	ldw	r2,-8(fp)
    2ca8:	100490fa 	slli	r2,r2,3
    2cac:	10800104 	addi	r2,r2,4
    2cb0:	e0ffff17 	ldw	r3,-4(fp)
    2cb4:	1885883a 	add	r2,r3,r2
    2cb8:	10c00017 	ldw	r3,0(r2)
    2cbc:	e0bffd17 	ldw	r2,-12(fp)
    2cc0:	1880070e 	bge	r3,r2,2ce0 <vid_put_pixel_in_span_map+0xe0>
    span_array[(y*2)+1] = x;
    2cc4:	e0bffe17 	ldw	r2,-8(fp)
    2cc8:	100490fa 	slli	r2,r2,3
    2ccc:	10800104 	addi	r2,r2,4
    2cd0:	e0ffff17 	ldw	r3,-4(fp)
    2cd4:	1885883a 	add	r2,r3,r2
    2cd8:	e0fffd17 	ldw	r3,-12(fp)
    2cdc:	10c00015 	stw	r3,0(r2)
}
    2ce0:	e037883a 	mov	sp,fp
    2ce4:	df000017 	ldw	fp,0(sp)
    2ce8:	dec00104 	addi	sp,sp,4
    2cec:	f800283a 	ret

00002cf0 <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
    2cf0:	deffee04 	addi	sp,sp,-72
    2cf4:	dfc01115 	stw	ra,68(sp)
    2cf8:	df001015 	stw	fp,64(sp)
    2cfc:	df001004 	addi	fp,sp,64
    2d00:	e13ffc15 	stw	r4,-16(fp)
    2d04:	e17ffd15 	stw	r5,-12(fp)
    2d08:	e1bffe15 	stw	r6,-8(fp)
    2d0c:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
    2d10:	e0bffc17 	ldw	r2,-16(fp)
    2d14:	e0fffe17 	ldw	r3,-8(fp)
    2d18:	18800c0e 	bge	r3,r2,2d4c <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
    2d1c:	e0bffe17 	ldw	r2,-8(fp)
    2d20:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
    2d24:	e0bffc17 	ldw	r2,-16(fp)
    2d28:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
    2d2c:	e0bff517 	ldw	r2,-44(fp)
    2d30:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
    2d34:	e0bfff17 	ldw	r2,-4(fp)
    2d38:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
    2d3c:	e0bffd17 	ldw	r2,-12(fp)
    2d40:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
    2d44:	e0bff617 	ldw	r2,-40(fp)
    2d48:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
    2d4c:	e0fffd17 	ldw	r3,-12(fp)
    2d50:	e0bfff17 	ldw	r2,-4(fp)
    2d54:	1885c83a 	sub	r2,r3,r2
    2d58:	1000010e 	bge	r2,zero,2d60 <vid_bres_scan_edges+0x70>
    2d5c:	0085c83a 	sub	r2,zero,r2
    2d60:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
    2d64:	e0fffe17 	ldw	r3,-8(fp)
    2d68:	e0bffc17 	ldw	r2,-16(fp)
    2d6c:	1885c83a 	sub	r2,r3,r2
    2d70:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
    2d74:	e0bffd17 	ldw	r2,-12(fp)
    2d78:	e0ffff17 	ldw	r3,-4(fp)
    2d7c:	1880030e 	bge	r3,r2,2d8c <vid_bres_scan_edges+0x9c>
    2d80:	00bfffc4 	movi	r2,-1
    2d84:	e0bff015 	stw	r2,-64(fp)
    2d88:	00000206 	br	2d94 <vid_bres_scan_edges+0xa4>
    2d8c:	00800044 	movi	r2,1
    2d90:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
    2d94:	00800044 	movi	r2,1
    2d98:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
    2d9c:	e0fff217 	ldw	r3,-56(fp)
    2da0:	e0bff117 	ldw	r2,-60(fp)
    2da4:	18802e16 	blt	r3,r2,2e60 <vid_bres_scan_edges+0x170>
    int dPr   = y_delta<<1;
    2da8:	e0bff117 	ldw	r2,-60(fp)
    2dac:	1085883a 	add	r2,r2,r2
    2db0:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
    2db4:	e0bff217 	ldw	r2,-56(fp)
    2db8:	1085883a 	add	r2,r2,r2
    2dbc:	e0fff817 	ldw	r3,-32(fp)
    2dc0:	1885c83a 	sub	r2,r3,r2
    2dc4:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
    2dc8:	e0fff817 	ldw	r3,-32(fp)
    2dcc:	e0bff217 	ldw	r2,-56(fp)
    2dd0:	1885c83a 	sub	r2,r3,r2
    2dd4:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
    2dd8:	00001e06 	br	2e54 <vid_bres_scan_edges+0x164>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
    2ddc:	e13ffc17 	ldw	r4,-16(fp)
    2de0:	e17ffd17 	ldw	r5,-12(fp)
    2de4:	e1800217 	ldw	r6,8(fp)
    2de8:	0002c000 	call	2c00 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
    2dec:	e0bff317 	ldw	r2,-52(fp)
    2df0:	00800d0e 	bge	zero,r2,2e28 <vid_bres_scan_edges+0x138>
        x1+=x_incr;
    2df4:	e0fffc17 	ldw	r3,-16(fp)
    2df8:	e0bff717 	ldw	r2,-36(fp)
    2dfc:	1885883a 	add	r2,r3,r2
    2e00:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
    2e04:	e0fffd17 	ldw	r3,-12(fp)
    2e08:	e0bff017 	ldw	r2,-64(fp)
    2e0c:	1885883a 	add	r2,r3,r2
    2e10:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
    2e14:	e0fff317 	ldw	r3,-52(fp)
    2e18:	e0bff917 	ldw	r2,-28(fp)
    2e1c:	1885883a 	add	r2,r3,r2
    2e20:	e0bff315 	stw	r2,-52(fp)
    2e24:	00000806 	br	2e48 <vid_bres_scan_edges+0x158>
      } else {
        x1+=x_incr;
    2e28:	e0fffc17 	ldw	r3,-16(fp)
    2e2c:	e0bff717 	ldw	r2,-36(fp)
    2e30:	1885883a 	add	r2,r3,r2
    2e34:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
    2e38:	e0fff317 	ldw	r3,-52(fp)
    2e3c:	e0bff817 	ldw	r2,-32(fp)
    2e40:	1885883a 	add	r2,r3,r2
    2e44:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
    2e48:	e0bff217 	ldw	r2,-56(fp)
    2e4c:	10bfffc4 	addi	r2,r2,-1
    2e50:	e0bff215 	stw	r2,-56(fp)
    2e54:	e0bff217 	ldw	r2,-56(fp)
    2e58:	103fe00e 	bge	r2,zero,2ddc <vid_bres_scan_edges+0xec>
    2e5c:	00002d06 	br	2f14 <vid_bres_scan_edges+0x224>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
    2e60:	e0bff217 	ldw	r2,-56(fp)
    2e64:	1085883a 	add	r2,r2,r2
    2e68:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
    2e6c:	e0bff117 	ldw	r2,-60(fp)
    2e70:	1085883a 	add	r2,r2,r2
    2e74:	e0fffa17 	ldw	r3,-24(fp)
    2e78:	1885c83a 	sub	r2,r3,r2
    2e7c:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
    2e80:	e0fffa17 	ldw	r3,-24(fp)
    2e84:	e0bff117 	ldw	r2,-60(fp)
    2e88:	1885c83a 	sub	r2,r3,r2
    2e8c:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
    2e90:	00001e06 	br	2f0c <vid_bres_scan_edges+0x21c>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
    2e94:	e13ffc17 	ldw	r4,-16(fp)
    2e98:	e17ffd17 	ldw	r5,-12(fp)
    2e9c:	e1800217 	ldw	r6,8(fp)
    2ea0:	0002c000 	call	2c00 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
    2ea4:	e0bff417 	ldw	r2,-48(fp)
    2ea8:	00800d0e 	bge	zero,r2,2ee0 <vid_bres_scan_edges+0x1f0>
        x1+=x_incr;
    2eac:	e0fffc17 	ldw	r3,-16(fp)
    2eb0:	e0bff717 	ldw	r2,-36(fp)
    2eb4:	1885883a 	add	r2,r3,r2
    2eb8:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
    2ebc:	e0fffd17 	ldw	r3,-12(fp)
    2ec0:	e0bff017 	ldw	r2,-64(fp)
    2ec4:	1885883a 	add	r2,r3,r2
    2ec8:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
    2ecc:	e0fff417 	ldw	r3,-48(fp)
    2ed0:	e0bffb17 	ldw	r2,-20(fp)
    2ed4:	1885883a 	add	r2,r3,r2
    2ed8:	e0bff415 	stw	r2,-48(fp)
    2edc:	00000806 	br	2f00 <vid_bres_scan_edges+0x210>
      } else {
        y1+=y_incr;
    2ee0:	e0fffd17 	ldw	r3,-12(fp)
    2ee4:	e0bff017 	ldw	r2,-64(fp)
    2ee8:	1885883a 	add	r2,r3,r2
    2eec:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
    2ef0:	e0fff417 	ldw	r3,-48(fp)
    2ef4:	e0bffa17 	ldw	r2,-24(fp)
    2ef8:	1885883a 	add	r2,r3,r2
    2efc:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
    2f00:	e0bff117 	ldw	r2,-60(fp)
    2f04:	10bfffc4 	addi	r2,r2,-1
    2f08:	e0bff115 	stw	r2,-60(fp)
    2f0c:	e0bff117 	ldw	r2,-60(fp)
    2f10:	103fe00e 	bge	r2,zero,2e94 <vid_bres_scan_edges+0x1a4>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
    2f14:	e037883a 	mov	sp,fp
    2f18:	dfc00117 	ldw	ra,4(sp)
    2f1c:	df000017 	ldw	fp,0(sp)
    2f20:	dec00204 	addi	sp,sp,8
    2f24:	f800283a 	ret

00002f28 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
    2f28:	defff804 	addi	sp,sp,-32
    2f2c:	dfc00715 	stw	ra,28(sp)
    2f30:	df000615 	stw	fp,24(sp)
    2f34:	df000604 	addi	fp,sp,24
    2f38:	e13ffe15 	stw	r4,-8(fp)
    2f3c:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
    2f40:	e0bffe17 	ldw	r2,-8(fp)
    2f44:	11000017 	ldw	r4,0(r2)
    2f48:	e0bffe17 	ldw	r2,-8(fp)
    2f4c:	11400317 	ldw	r5,12(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
    2f50:	e0bffe17 	ldw	r2,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
    2f54:	10c00117 	ldw	r3,4(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
    2f58:	e0bffe17 	ldw	r2,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
    2f5c:	10800417 	ldw	r2,16(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    2f60:	e1bffe17 	ldw	r6,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
    2f64:	31800a17 	ldw	r6,40(r6)
    2f68:	01c00044 	movi	r7,1
    2f6c:	d9c00015 	stw	r7,0(sp)
    2f70:	d9800115 	stw	r6,4(sp)
    2f74:	e1bfff17 	ldw	r6,-4(fp)
    2f78:	d9800215 	stw	r6,8(sp)
    2f7c:	180d883a 	mov	r6,r3
    2f80:	100f883a 	mov	r7,r2
    2f84:	00006640 	call	664 <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
    2f88:	e0bffe17 	ldw	r2,-8(fp)
    2f8c:	11000117 	ldw	r4,4(r2)
    2f90:	e0bffe17 	ldw	r2,-8(fp)
    2f94:	11400417 	ldw	r5,16(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
    2f98:	e0bffe17 	ldw	r2,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
    2f9c:	10c00217 	ldw	r3,8(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
    2fa0:	e0bffe17 	ldw	r2,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
    2fa4:	10800517 	ldw	r2,20(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    2fa8:	e1bffe17 	ldw	r6,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
    2fac:	31800a17 	ldw	r6,40(r6)
    2fb0:	01c00044 	movi	r7,1
    2fb4:	d9c00015 	stw	r7,0(sp)
    2fb8:	d9800115 	stw	r6,4(sp)
    2fbc:	e1bfff17 	ldw	r6,-4(fp)
    2fc0:	d9800215 	stw	r6,8(sp)
    2fc4:	180d883a 	mov	r6,r3
    2fc8:	100f883a 	mov	r7,r2
    2fcc:	00006640 	call	664 <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
    2fd0:	e0bffe17 	ldw	r2,-8(fp)
    2fd4:	11000217 	ldw	r4,8(r2)
    2fd8:	e0bffe17 	ldw	r2,-8(fp)
    2fdc:	11400517 	ldw	r5,20(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
    2fe0:	e0bffe17 	ldw	r2,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
    2fe4:	10c00017 	ldw	r3,0(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
    2fe8:	e0bffe17 	ldw	r2,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
    2fec:	10800317 	ldw	r2,12(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
    2ff0:	e1bffe17 	ldw	r6,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
    2ff4:	31800a17 	ldw	r6,40(r6)
    2ff8:	01c00044 	movi	r7,1
    2ffc:	d9c00015 	stw	r7,0(sp)
    3000:	d9800115 	stw	r6,4(sp)
    3004:	e1bfff17 	ldw	r6,-4(fp)
    3008:	d9800215 	stw	r6,8(sp)
    300c:	180d883a 	mov	r6,r3
    3010:	100f883a 	mov	r7,r2
    3014:	00006640 	call	664 <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
    3018:	e0bffe17 	ldw	r2,-8(fp)
    301c:	10800b17 	ldw	r2,44(r2)
    3020:	10800058 	cmpnei	r2,r2,1
    3024:	1000a01e 	bne	r2,zero,32a8 <vid_draw_triangle+0x380>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    3028:	e0bffe17 	ldw	r2,-8(fp)
    302c:	11000317 	ldw	r4,12(r2)
    3030:	e0bffe17 	ldw	r2,-8(fp)
    3034:	10c00417 	ldw	r3,16(r2)
    3038:	e0bffe17 	ldw	r2,-8(fp)
    303c:	10800517 	ldw	r2,20(r2)
    3040:	180b883a 	mov	r5,r3
    3044:	100d883a 	mov	r6,r2
    3048:	0002b480 	call	2b48 <min3>
    304c:	e0fffe17 	ldw	r3,-8(fp)
    3050:	18800815 	stw	r2,32(r3)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    3054:	e0bffe17 	ldw	r2,-8(fp)
    3058:	11000317 	ldw	r4,12(r2)
    305c:	e0bffe17 	ldw	r2,-8(fp)
    3060:	10c00417 	ldw	r3,16(r2)
    3064:	e0bffe17 	ldw	r2,-8(fp)
    3068:	10800517 	ldw	r2,20(r2)
    306c:	180b883a 	mov	r5,r3
    3070:	100d883a 	mov	r6,r2
    3074:	0002af40 	call	2af4 <max3>
    3078:	e0fffe17 	ldw	r3,-8(fp)
    307c:	18800915 	stw	r2,36(r3)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    3080:	e0bffe17 	ldw	r2,-8(fp)
    3084:	11000317 	ldw	r4,12(r2)
    3088:	e0bffe17 	ldw	r2,-8(fp)
    308c:	10c00417 	ldw	r3,16(r2)
    3090:	e0bffe17 	ldw	r2,-8(fp)
    3094:	10800517 	ldw	r2,20(r2)
    3098:	180b883a 	mov	r5,r3
    309c:	100d883a 	mov	r6,r2
    30a0:	0002b9c0 	call	2b9c <max_diff3>
    30a4:	e0fffe17 	ldw	r3,-8(fp)
    30a8:	18800615 	stw	r2,24(r3)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    30ac:	e0bffe17 	ldw	r2,-8(fp)
    30b0:	11000017 	ldw	r4,0(r2)
    30b4:	e0bffe17 	ldw	r2,-8(fp)
    30b8:	10c00117 	ldw	r3,4(r2)
    30bc:	e0bffe17 	ldw	r2,-8(fp)
    30c0:	10800217 	ldw	r2,8(r2)
    30c4:	180b883a 	mov	r5,r3
    30c8:	100d883a 	mov	r6,r2
    30cc:	0002b9c0 	call	2b9c <max_diff3>
    30d0:	e0fffe17 	ldw	r3,-8(fp)
    30d4:	18800715 	stw	r2,28(r3)
    tri->span_array = malloc(display->height * 4 * 2);
    30d8:	e0bfff17 	ldw	r2,-4(fp)
    30dc:	10800617 	ldw	r2,24(r2)
    30e0:	100490fa 	slli	r2,r2,3
    30e4:	1009883a 	mov	r4,r2
    30e8:	000a4600 	call	a460 <malloc>
    30ec:	1007883a 	mov	r3,r2
    30f0:	e0bffe17 	ldw	r2,-8(fp)
    30f4:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
    30f8:	e0bffe17 	ldw	r2,-8(fp)
    30fc:	10800817 	ldw	r2,32(r2)
    3100:	e0bffd15 	stw	r2,-12(fp)
    3104:	00001206 	br	3150 <vid_draw_triangle+0x228>
    {
      tri->span_array[i*2] = -1;
    3108:	e0bffe17 	ldw	r2,-8(fp)
    310c:	10c00d17 	ldw	r3,52(r2)
    3110:	e0bffd17 	ldw	r2,-12(fp)
    3114:	100490fa 	slli	r2,r2,3
    3118:	1885883a 	add	r2,r3,r2
    311c:	00ffffc4 	movi	r3,-1
    3120:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
    3124:	e0bffe17 	ldw	r2,-8(fp)
    3128:	10c00d17 	ldw	r3,52(r2)
    312c:	e0bffd17 	ldw	r2,-12(fp)
    3130:	100490fa 	slli	r2,r2,3
    3134:	10800104 	addi	r2,r2,4
    3138:	1885883a 	add	r2,r3,r2
    313c:	00ffffc4 	movi	r3,-1
    3140:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
    3144:	e0bffd17 	ldw	r2,-12(fp)
    3148:	10800044 	addi	r2,r2,1
    314c:	e0bffd15 	stw	r2,-12(fp)
    3150:	e0bffe17 	ldw	r2,-8(fp)
    3154:	10c00917 	ldw	r3,36(r2)
    3158:	e0bffd17 	ldw	r2,-12(fp)
    315c:	18bfea0e 	bge	r3,r2,3108 <vid_draw_triangle+0x1e0>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
    3160:	e0bffe17 	ldw	r2,-8(fp)
    3164:	11000017 	ldw	r4,0(r2)
    3168:	e0bffe17 	ldw	r2,-8(fp)
    316c:	11400317 	ldw	r5,12(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    3170:	e0bffe17 	ldw	r2,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
    3174:	10c00117 	ldw	r3,4(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    3178:	e0bffe17 	ldw	r2,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
    317c:	10800417 	ldw	r2,16(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    3180:	e1bffe17 	ldw	r6,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
    3184:	31800d17 	ldw	r6,52(r6)
    3188:	d9800015 	stw	r6,0(sp)
    318c:	180d883a 	mov	r6,r3
    3190:	100f883a 	mov	r7,r2
    3194:	0002cf00 	call	2cf0 <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
    3198:	e0bffe17 	ldw	r2,-8(fp)
    319c:	11000117 	ldw	r4,4(r2)
    31a0:	e0bffe17 	ldw	r2,-8(fp)
    31a4:	11400417 	ldw	r5,16(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    31a8:	e0bffe17 	ldw	r2,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
    31ac:	10c00217 	ldw	r3,8(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    31b0:	e0bffe17 	ldw	r2,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
    31b4:	10800517 	ldw	r2,20(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    31b8:	e1bffe17 	ldw	r6,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
    31bc:	31800d17 	ldw	r6,52(r6)
    31c0:	d9800015 	stw	r6,0(sp)
    31c4:	180d883a 	mov	r6,r3
    31c8:	100f883a 	mov	r7,r2
    31cc:	0002cf00 	call	2cf0 <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
    31d0:	e0bffe17 	ldw	r2,-8(fp)
    31d4:	11000217 	ldw	r4,8(r2)
    31d8:	e0bffe17 	ldw	r2,-8(fp)
    31dc:	11400517 	ldw	r5,20(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
    31e0:	e0bffe17 	ldw	r2,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
    31e4:	10c00017 	ldw	r3,0(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
    31e8:	e0bffe17 	ldw	r2,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
    31ec:	10800317 	ldw	r2,12(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
    31f0:	e1bffe17 	ldw	r6,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
    31f4:	31800d17 	ldw	r6,52(r6)
    31f8:	d9800015 	stw	r6,0(sp)
    31fc:	180d883a 	mov	r6,r3
    3200:	100f883a 	mov	r7,r2
    3204:	0002cf00 	call	2cf0 <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
    3208:	e0bffe17 	ldw	r2,-8(fp)
    320c:	10800817 	ldw	r2,32(r2)
    3210:	e0bffd15 	stw	r2,-12(fp)
    3214:	00001c06 	br	3288 <vid_draw_triangle+0x360>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
    3218:	e0bffe17 	ldw	r2,-8(fp)
    321c:	10c00d17 	ldw	r3,52(r2)
    3220:	e0bffd17 	ldw	r2,-12(fp)
    3224:	100490fa 	slli	r2,r2,3
    3228:	1885883a 	add	r2,r3,r2
    322c:	10c00017 	ldw	r3,0(r2)
    3230:	e0bffe17 	ldw	r2,-8(fp)
    3234:	11000d17 	ldw	r4,52(r2)
    3238:	e0bffd17 	ldw	r2,-12(fp)
    323c:	100490fa 	slli	r2,r2,3
    3240:	10800104 	addi	r2,r2,4
    3244:	2085883a 	add	r2,r4,r2
    3248:	10800017 	ldw	r2,0(r2)
    324c:	e13ffe17 	ldw	r4,-8(fp)
    3250:	21000a17 	ldw	r4,40(r4)
    3254:	01400044 	movi	r5,1
    3258:	d9400015 	stw	r5,0(sp)
    325c:	d9000115 	stw	r4,4(sp)
    3260:	e13fff17 	ldw	r4,-4(fp)
    3264:	d9000215 	stw	r4,8(sp)
    3268:	1809883a 	mov	r4,r3
    326c:	e17ffd17 	ldw	r5,-12(fp)
    3270:	100d883a 	mov	r6,r2
    3274:	e1fffd17 	ldw	r7,-12(fp)
    3278:	00006640 	call	664 <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
    327c:	e0bffd17 	ldw	r2,-12(fp)
    3280:	10800044 	addi	r2,r2,1
    3284:	e0bffd15 	stw	r2,-12(fp)
    3288:	e0bffe17 	ldw	r2,-8(fp)
    328c:	10c00917 	ldw	r3,36(r2)
    3290:	e0bffd17 	ldw	r2,-12(fp)
    3294:	18bfe00e 	bge	r3,r2,3218 <vid_draw_triangle+0x2f0>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
    3298:	e0bffe17 	ldw	r2,-8(fp)
    329c:	10800d17 	ldw	r2,52(r2)
    32a0:	1009883a 	mov	r4,r2
    32a4:	000a4740 	call	a474 <free>
  }
}
    32a8:	e037883a 	mov	sp,fp
    32ac:	dfc00117 	ldw	ra,4(sp)
    32b0:	df000017 	ldw	fp,0(sp)
    32b4:	dec00204 	addi	sp,sp,8
    32b8:	f800283a 	ret

000032bc <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
    32bc:	defff404 	addi	sp,sp,-48
    32c0:	dfc00b15 	stw	ra,44(sp)
    32c4:	df000a15 	stw	fp,40(sp)
    32c8:	df000a04 	addi	fp,sp,40
    32cc:	e13ffa15 	stw	r4,-24(fp)
    32d0:	e17ffb15 	stw	r5,-20(fp)
    32d4:	3007883a 	mov	r3,r6
    32d8:	3805883a 	mov	r2,r7
    32dc:	e1400217 	ldw	r5,8(fp)
    32e0:	e1000317 	ldw	r4,12(fp)
    32e4:	e0fffc0d 	sth	r3,-16(fp)
    32e8:	e0bffd0d 	sth	r2,-12(fp)
    32ec:	e17ffe0d 	sth	r5,-8(fp)
    32f0:	e13fff0d 	sth	r4,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
    32f4:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
    32f8:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
    32fc:	e03ff615 	stw	zero,-40(fp)
    3300:	e03ff715 	stw	zero,-36(fp)
    3304:	00001b06 	br	3374 <CopyImage16+0xb8>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
    3308:	e0bff917 	ldw	r2,-28(fp)
    330c:	1085883a 	add	r2,r2,r2
    3310:	e0fffb17 	ldw	r3,-20(fp)
    3314:	1889883a 	add	r4,r3,r2
    3318:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
    331c:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
    3320:	e0fffa17 	ldw	r3,-24(fp)
    3324:	1887883a 	add	r3,r3,r2
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
    3328:	e0bffc0f 	ldh	r2,-16(fp)
    332c:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
    3330:	180b883a 	mov	r5,r3
    3334:	100d883a 	mov	r6,r2
    3338:	000ac0c0 	call	ac0c <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
    333c:	e0bff617 	ldw	r2,-40(fp)
    3340:	10800044 	addi	r2,r2,1
    3344:	e0bff615 	stw	r2,-40(fp)
    3348:	e0bff717 	ldw	r2,-36(fp)
    334c:	10800044 	addi	r2,r2,1
    3350:	e0bff715 	stw	r2,-36(fp)
    3354:	e0bffc0f 	ldh	r2,-16(fp)
    3358:	e0fff817 	ldw	r3,-32(fp)
    335c:	1885883a 	add	r2,r3,r2
    3360:	e0bff815 	stw	r2,-32(fp)
    3364:	e0bffe0f 	ldh	r2,-8(fp)
    3368:	e0fff917 	ldw	r3,-28(fp)
    336c:	1885883a 	add	r2,r3,r2
    3370:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
    3374:	e0bffd0f 	ldh	r2,-12(fp)
    3378:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
    337c:	e0bff617 	ldw	r2,-40(fp)
    3380:	18bfe10e 	bge	r3,r2,3308 <CopyImage16+0x4c>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
    3384:	e037883a 	mov	sp,fp
    3388:	dfc00117 	ldw	ra,4(sp)
    338c:	df000017 	ldw	fp,0(sp)
    3390:	dec00204 	addi	sp,sp,8
    3394:	f800283a 	ret

00003398 <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
    3398:	defff004 	addi	sp,sp,-64
    339c:	dfc00f15 	stw	ra,60(sp)
    33a0:	df000e15 	stw	fp,56(sp)
    33a4:	df000e04 	addi	fp,sp,56
    33a8:	e13ff615 	stw	r4,-40(fp)
    33ac:	e17ff715 	stw	r5,-36(fp)
    33b0:	3007883a 	mov	r3,r6
    33b4:	3805883a 	mov	r2,r7
    33b8:	e2400217 	ldw	r9,8(fp)
    33bc:	e2000317 	ldw	r8,12(fp)
    33c0:	e1c00417 	ldw	r7,16(fp)
    33c4:	e1800517 	ldw	r6,20(fp)
    33c8:	e1400617 	ldw	r5,24(fp)
    33cc:	e1000717 	ldw	r4,28(fp)
    33d0:	e0fff80d 	sth	r3,-32(fp)
    33d4:	e0bff90d 	sth	r2,-28(fp)
    33d8:	e27ffa0d 	sth	r9,-24(fp)
    33dc:	e23ffb0d 	sth	r8,-20(fp)
    33e0:	e1fffc0d 	sth	r7,-16(fp)
    33e4:	e1bffd0d 	sth	r6,-12(fp)
    33e8:	e17ffe0d 	sth	r5,-8(fp)
    33ec:	e13fff0d 	sth	r4,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
    33f0:	e0fff80f 	ldh	r3,-32(fp)
    33f4:	e0bffc0f 	ldh	r2,-16(fp)
    33f8:	1809883a 	mov	r4,r3
    33fc:	100b883a 	mov	r5,r2
    3400:	0009dec0 	call	9dec <__mulsi3>
    3404:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
    3408:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
    340c:	e0bffc0f 	ldh	r2,-16(fp)
    3410:	e0bff215 	stw	r2,-56(fp)
    3414:	e03ff315 	stw	zero,-52(fp)
    3418:	00002106 	br	34a0 <CropImage16+0x108>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
    341c:	e0bff517 	ldw	r2,-44(fp)
    3420:	1085883a 	add	r2,r2,r2
    3424:	e0fff717 	ldw	r3,-36(fp)
    3428:	1889883a 	add	r4,r3,r2
           ( source_buffer + y_src_offset + crop_left ), 
    342c:	e0fffa0f 	ldh	r3,-24(fp)
    3430:	e0bff417 	ldw	r2,-48(fp)
    3434:	1885883a 	add	r2,r3,r2
    3438:	1085883a 	add	r2,r2,r2
    343c:	e0fff617 	ldw	r3,-40(fp)
    3440:	1887883a 	add	r3,r3,r2
           ((source_width - crop_left - crop_right) << 1));
    3444:	e17ff80f 	ldh	r5,-32(fp)
    3448:	e0bffa0f 	ldh	r2,-24(fp)
    344c:	288bc83a 	sub	r5,r5,r2
    3450:	e0bffb0f 	ldh	r2,-20(fp)
    3454:	2885c83a 	sub	r2,r5,r2
    3458:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
    345c:	180b883a 	mov	r5,r3
    3460:	100d883a 	mov	r6,r2
    3464:	000ac0c0 	call	ac0c <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
    3468:	e0bff217 	ldw	r2,-56(fp)
    346c:	10800044 	addi	r2,r2,1
    3470:	e0bff215 	stw	r2,-56(fp)
    3474:	e0bff317 	ldw	r2,-52(fp)
    3478:	10800044 	addi	r2,r2,1
    347c:	e0bff315 	stw	r2,-52(fp)
    3480:	e0bff80f 	ldh	r2,-32(fp)
    3484:	e0fff417 	ldw	r3,-48(fp)
    3488:	1885883a 	add	r2,r3,r2
    348c:	e0bff415 	stw	r2,-48(fp)
    3490:	e0bffe0f 	ldh	r2,-8(fp)
    3494:	e0fff517 	ldw	r3,-44(fp)
    3498:	1885883a 	add	r2,r3,r2
    349c:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
    34a0:	e0fff90f 	ldh	r3,-28(fp)
    34a4:	e0bffd0f 	ldh	r2,-12(fp)
    34a8:	1885c83a 	sub	r2,r3,r2
    34ac:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
    34b0:	e0bff217 	ldw	r2,-56(fp)
    34b4:	18bfd90e 	bge	r3,r2,341c <CropImage16+0x84>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
    34b8:	e037883a 	mov	sp,fp
    34bc:	dfc00117 	ldw	ra,4(sp)
    34c0:	df000017 	ldw	fp,0(sp)
    34c4:	dec00204 	addi	sp,sp,8
    34c8:	f800283a 	ret

000034cc <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
    34cc:	defff404 	addi	sp,sp,-48
    34d0:	dfc00b15 	stw	ra,44(sp)
    34d4:	df000a15 	stw	fp,40(sp)
    34d8:	df000a04 	addi	fp,sp,40
    34dc:	e13ffc15 	stw	r4,-16(fp)
    34e0:	e17ffd15 	stw	r5,-12(fp)
    34e4:	e1bffe15 	stw	r6,-8(fp)
    34e8:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
    34ec:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
    34f0:	e0bffc17 	ldw	r2,-16(fp)
    34f4:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
    34f8:	00007d06 	br	36f0 <vid_print_string_alpha+0x224>
    //Handle newline char here.
    if (string[i] == '\n') {
    34fc:	e0bff917 	ldw	r2,-28(fp)
    3500:	e0c00417 	ldw	r3,16(fp)
    3504:	1885883a 	add	r2,r3,r2
    3508:	10800003 	ldbu	r2,0(r2)
    350c:	10803fcc 	andi	r2,r2,255
    3510:	1080201c 	xori	r2,r2,128
    3514:	10bfe004 	addi	r2,r2,-128
    3518:	10800298 	cmpnei	r2,r2,10
    351c:	10000c1e 	bne	r2,zero,3550 <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
    3520:	e0bffb17 	ldw	r2,-20(fp)
    3524:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
    3528:	e0800217 	ldw	r2,8(fp)
    352c:	1082d804 	addi	r2,r2,2912
    3530:	10c00517 	ldw	r3,20(r2)
    3534:	e0bffd17 	ldw	r2,-12(fp)
    3538:	1885883a 	add	r2,r3,r2
    353c:	e0bffd15 	stw	r2,-12(fp)
      i++;
    3540:	e0bff917 	ldw	r2,-28(fp)
    3544:	10800044 	addi	r2,r2,1
    3548:	e0bff915 	stw	r2,-28(fp)
      continue;
    354c:	00006806 	br	36f0 <vid_print_string_alpha+0x224>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
    3550:	e0bff917 	ldw	r2,-28(fp)
    3554:	e0c00417 	ldw	r3,16(fp)
    3558:	1885883a 	add	r2,r3,r2
    355c:	10800003 	ldbu	r2,0(r2)
    3560:	10803fcc 	andi	r2,r2,255
    3564:	1080201c 	xori	r2,r2,128
    3568:	10bfe004 	addi	r2,r2,-128
    356c:	10800818 	cmpnei	r2,r2,32
    3570:	1000151e 	bne	r2,zero,35c8 <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
    3574:	e0bfff17 	ldw	r2,-4(fp)
    3578:	10bfffe0 	cmpeqi	r2,r2,-1
    357c:	10000b1e 	bne	r2,zero,35ac <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
    3580:	e0bfff17 	ldw	r2,-4(fp)
    3584:	d8800015 	stw	r2,0(sp)
    3588:	e0800217 	ldw	r2,8(fp)
    358c:	d8800115 	stw	r2,4(sp)
    3590:	e0800317 	ldw	r2,12(fp)
    3594:	d8800215 	stw	r2,8(sp)
    3598:	e13ffc17 	ldw	r4,-16(fp)
    359c:	e17ffd17 	ldw	r5,-12(fp)
    35a0:	e1bfff17 	ldw	r6,-4(fp)
    35a4:	01c00b44 	movi	r7,45
    35a8:	0003ea80 	call	3ea8 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    35ac:	e0800217 	ldw	r2,8(fp)
    35b0:	10806004 	addi	r2,r2,384
    35b4:	10c00417 	ldw	r3,16(r2)
    35b8:	e0bffc17 	ldw	r2,-16(fp)
    35bc:	1885883a 	add	r2,r3,r2
    35c0:	e0bffc15 	stw	r2,-16(fp)
    35c4:	00004706 	br	36e4 <vid_print_string_alpha+0x218>
    }
    else if(string[i] == '\t')  // this is a tab
    35c8:	e0bff917 	ldw	r2,-28(fp)
    35cc:	e0c00417 	ldw	r3,16(fp)
    35d0:	1885883a 	add	r2,r3,r2
    35d4:	10800003 	ldbu	r2,0(r2)
    35d8:	10803fcc 	andi	r2,r2,255
    35dc:	1080201c 	xori	r2,r2,128
    35e0:	10bfe004 	addi	r2,r2,-128
    35e4:	10800258 	cmpnei	r2,r2,9
    35e8:	10001d1e 	bne	r2,zero,3660 <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
    35ec:	e03ffa15 	stw	zero,-24(fp)
    35f0:	00001706 	br	3650 <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
    35f4:	e0bfff17 	ldw	r2,-4(fp)
    35f8:	10bfffe0 	cmpeqi	r2,r2,-1
    35fc:	10000b1e 	bne	r2,zero,362c <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
    3600:	e0bfff17 	ldw	r2,-4(fp)
    3604:	d8800015 	stw	r2,0(sp)
    3608:	e0800217 	ldw	r2,8(fp)
    360c:	d8800115 	stw	r2,4(sp)
    3610:	e0800317 	ldw	r2,12(fp)
    3614:	d8800215 	stw	r2,8(sp)
    3618:	e13ffc17 	ldw	r4,-16(fp)
    361c:	e17ffd17 	ldw	r5,-12(fp)
    3620:	e1bfff17 	ldw	r6,-4(fp)
    3624:	01c00b44 	movi	r7,45
    3628:	0003ea80 	call	3ea8 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    362c:	e0800217 	ldw	r2,8(fp)
    3630:	10806004 	addi	r2,r2,384
    3634:	10c00417 	ldw	r3,16(r2)
    3638:	e0bffc17 	ldw	r2,-16(fp)
    363c:	1885883a 	add	r2,r3,r2
    3640:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
    3644:	e0bffa17 	ldw	r2,-24(fp)
    3648:	10800044 	addi	r2,r2,1
    364c:	e0bffa15 	stw	r2,-24(fp)
    3650:	e0bffa17 	ldw	r2,-24(fp)
    3654:	10800090 	cmplti	r2,r2,2
    3658:	103fe61e 	bne	r2,zero,35f4 <vid_print_string_alpha+0x128>
    365c:	00002106 	br	36e4 <vid_print_string_alpha+0x218>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
    3660:	e0bff917 	ldw	r2,-28(fp)
    3664:	e0c00417 	ldw	r3,16(fp)
    3668:	1885883a 	add	r2,r3,r2
    366c:	10800003 	ldbu	r2,0(r2)
    3670:	10803fcc 	andi	r2,r2,255
    3674:	1080201c 	xori	r2,r2,128
    3678:	10bfe004 	addi	r2,r2,-128
    367c:	e0ffff17 	ldw	r3,-4(fp)
    3680:	d8c00015 	stw	r3,0(sp)
    3684:	e0c00217 	ldw	r3,8(fp)
    3688:	d8c00115 	stw	r3,4(sp)
    368c:	e0c00317 	ldw	r3,12(fp)
    3690:	d8c00215 	stw	r3,8(sp)
    3694:	e13ffc17 	ldw	r4,-16(fp)
    3698:	e17ffd17 	ldw	r5,-12(fp)
    369c:	e1bffe17 	ldw	r6,-8(fp)
    36a0:	100f883a 	mov	r7,r2
    36a4:	0003ea80 	call	3ea8 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
    36a8:	e0bff917 	ldw	r2,-28(fp)
    36ac:	e0c00417 	ldw	r3,16(fp)
    36b0:	1885883a 	add	r2,r3,r2
    36b4:	10800003 	ldbu	r2,0(r2)
    36b8:	10803fcc 	andi	r2,r2,255
    36bc:	1080201c 	xori	r2,r2,128
    36c0:	10bfe004 	addi	r2,r2,-128
    36c4:	10bff7c4 	addi	r2,r2,-33
    36c8:	1004917a 	slli	r2,r2,5
    36cc:	e0c00217 	ldw	r3,8(fp)
    36d0:	1885883a 	add	r2,r3,r2
    36d4:	10c00417 	ldw	r3,16(r2)
    36d8:	e0bffc17 	ldw	r2,-16(fp)
    36dc:	1885883a 	add	r2,r3,r2
    36e0:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
    36e4:	e0bff917 	ldw	r2,-28(fp)
    36e8:	10800044 	addi	r2,r2,1
    36ec:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
    36f0:	e0bff917 	ldw	r2,-28(fp)
    36f4:	e0c00417 	ldw	r3,16(fp)
    36f8:	1885883a 	add	r2,r3,r2
    36fc:	10800003 	ldbu	r2,0(r2)
    3700:	10803fcc 	andi	r2,r2,255
    3704:	1080201c 	xori	r2,r2,128
    3708:	10bfe004 	addi	r2,r2,-128
    370c:	103f7b1e 	bne	r2,zero,34fc <vid_print_string_alpha+0x30>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
    3710:	0005883a 	mov	r2,zero
}
    3714:	e037883a 	mov	sp,fp
    3718:	dfc00117 	ldw	ra,4(sp)
    371c:	df000017 	ldw	fp,0(sp)
    3720:	dec00204 	addi	sp,sp,8
    3724:	f800283a 	ret

00003728 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
    3728:	defff904 	addi	sp,sp,-28
    372c:	df000615 	stw	fp,24(sp)
    3730:	df000604 	addi	fp,sp,24
    3734:	e13ffc15 	stw	r4,-16(fp)
    3738:	e17ffd15 	stw	r5,-12(fp)
    373c:	e1bffe15 	stw	r6,-8(fp)
    3740:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
    3744:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
    3748:	e0bffc17 	ldw	r2,-16(fp)
    374c:	10800418 	cmpnei	r2,r2,16
    3750:	1000231e 	bne	r2,zero,37e0 <seperate_color_channels+0xb8>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
    3754:	e0bffd17 	ldw	r2,-12(fp)
    3758:	10800003 	ldbu	r2,0(r2)
    375c:	10803fcc 	andi	r2,r2,255
    3760:	e0bffb0d 	sth	r2,-20(fp)
    3764:	e0bffd17 	ldw	r2,-12(fp)
    3768:	10800044 	addi	r2,r2,1
    376c:	e0bffd15 	stw	r2,-12(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
    3770:	e0bffd17 	ldw	r2,-12(fp)
    3774:	10800003 	ldbu	r2,0(r2)
    3778:	10803fcc 	andi	r2,r2,255
    377c:	1004923a 	slli	r2,r2,8
    3780:	1007883a 	mov	r3,r2
    3784:	e0bffb0b 	ldhu	r2,-20(fp)
    3788:	1885883a 	add	r2,r3,r2
    378c:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
    3790:	e0bffb0b 	ldhu	r2,-20(fp)
    3794:	108007cc 	andi	r2,r2,31
    3798:	1007883a 	mov	r3,r2
    379c:	e0800117 	ldw	r2,4(fp)
    37a0:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
    37a4:	e0bffb0b 	ldhu	r2,-20(fp)
    37a8:	1004d17a 	srli	r2,r2,5
    37ac:	10800fcc 	andi	r2,r2,63
    37b0:	1007883a 	mov	r3,r2
    37b4:	e0bfff17 	ldw	r2,-4(fp)
    37b8:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
    37bc:	e0bffb0b 	ldhu	r2,-20(fp)
    37c0:	1004d2fa 	srli	r2,r2,11
    37c4:	108007cc 	andi	r2,r2,31
    37c8:	1007883a 	mov	r3,r2
    37cc:	e0bffe17 	ldw	r2,-8(fp)
    37d0:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    37d4:	00800044 	movi	r2,1
    37d8:	e0bffa15 	stw	r2,-24(fp)
    37dc:	00002206 	br	3868 <seperate_color_channels+0x140>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
    37e0:	e0bffc17 	ldw	r2,-16(fp)
    37e4:	10800620 	cmpeqi	r2,r2,24
    37e8:	1000031e 	bne	r2,zero,37f8 <seperate_color_channels+0xd0>
    37ec:	e0bffc17 	ldw	r2,-16(fp)
    37f0:	10800818 	cmpnei	r2,r2,32
    37f4:	1000151e 	bne	r2,zero,384c <seperate_color_channels+0x124>
  {
    *blue = *color++;
    37f8:	e0bffd17 	ldw	r2,-12(fp)
    37fc:	10c00003 	ldbu	r3,0(r2)
    3800:	e0800117 	ldw	r2,4(fp)
    3804:	10c00005 	stb	r3,0(r2)
    3808:	e0bffd17 	ldw	r2,-12(fp)
    380c:	10800044 	addi	r2,r2,1
    3810:	e0bffd15 	stw	r2,-12(fp)
    *green = *color++;
    3814:	e0bffd17 	ldw	r2,-12(fp)
    3818:	10c00003 	ldbu	r3,0(r2)
    381c:	e0bfff17 	ldw	r2,-4(fp)
    3820:	10c00005 	stb	r3,0(r2)
    3824:	e0bffd17 	ldw	r2,-12(fp)
    3828:	10800044 	addi	r2,r2,1
    382c:	e0bffd15 	stw	r2,-12(fp)
    *red = *color;   
    3830:	e0bffd17 	ldw	r2,-12(fp)
    3834:	10c00003 	ldbu	r3,0(r2)
    3838:	e0bffe17 	ldw	r2,-8(fp)
    383c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    3840:	00800044 	movi	r2,1
    3844:	e0bffa15 	stw	r2,-24(fp)
    3848:	00000706 	br	3868 <seperate_color_channels+0x140>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
    384c:	e0bffe17 	ldw	r2,-8(fp)
    3850:	10000005 	stb	zero,0(r2)
    *green = 0;
    3854:	e0bfff17 	ldw	r2,-4(fp)
    3858:	10000005 	stb	zero,0(r2)
    *blue = 0;    
    385c:	e0800117 	ldw	r2,4(fp)
    3860:	10000005 	stb	zero,0(r2)
    return_value = 0;    
    3864:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
    3868:	e0bffa17 	ldw	r2,-24(fp)
}
    386c:	e037883a 	mov	sp,fp
    3870:	df000017 	ldw	fp,0(sp)
    3874:	dec00104 	addi	sp,sp,4
    3878:	f800283a 	ret

0000387c <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
    387c:	defff904 	addi	sp,sp,-28
    3880:	df000615 	stw	fp,24(sp)
    3884:	df000604 	addi	fp,sp,24
    3888:	e13ffc15 	stw	r4,-16(fp)
    388c:	2809883a 	mov	r4,r5
    3890:	3007883a 	mov	r3,r6
    3894:	3805883a 	mov	r2,r7
    3898:	e13ffd05 	stb	r4,-12(fp)
    389c:	e0fffe05 	stb	r3,-8(fp)
    38a0:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
    38a4:	e0bffc17 	ldw	r2,-16(fp)
    38a8:	10800418 	cmpnei	r2,r2,16
    38ac:	10001b1e 	bne	r2,zero,391c <merge_color_channels+0xa0>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
    38b0:	e0bfff03 	ldbu	r2,-4(fp)
    38b4:	108007cc 	andi	r2,r2,31
    38b8:	1007883a 	mov	r3,r2
    38bc:	e0bffe03 	ldbu	r2,-8(fp)
    38c0:	10800fcc 	andi	r2,r2,63
    38c4:	1004917a 	slli	r2,r2,5
    38c8:	1884b03a 	or	r2,r3,r2
    38cc:	1007883a 	mov	r3,r2
    38d0:	e0bffd03 	ldbu	r2,-12(fp)
    38d4:	100492fa 	slli	r2,r2,11
    38d8:	1884b03a 	or	r2,r3,r2
    38dc:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
    38e0:	e0bffb0b 	ldhu	r2,-20(fp)
    38e4:	1007883a 	mov	r3,r2
    38e8:	e0800117 	ldw	r2,4(fp)
    38ec:	10c00005 	stb	r3,0(r2)
    38f0:	e0800117 	ldw	r2,4(fp)
    38f4:	10800044 	addi	r2,r2,1
    38f8:	e0800115 	stw	r2,4(fp)
    *color = (temp_color >> 8) & 0xFF;
    38fc:	e0bffb0b 	ldhu	r2,-20(fp)
    3900:	1004d23a 	srli	r2,r2,8
    3904:	1007883a 	mov	r3,r2
    3908:	e0800117 	ldw	r2,4(fp)
    390c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    3910:	00800044 	movi	r2,1
    3914:	e0bffa15 	stw	r2,-24(fp)
    3918:	00002506 	br	39b0 <merge_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
    391c:	e0bffc17 	ldw	r2,-16(fp)
    3920:	10800620 	cmpeqi	r2,r2,24
    3924:	1000031e 	bne	r2,zero,3934 <merge_color_channels+0xb8>
    3928:	e0bffc17 	ldw	r2,-16(fp)
    392c:	10800818 	cmpnei	r2,r2,32
    3930:	1000121e 	bne	r2,zero,397c <merge_color_channels+0x100>
  {
    *color++ = blue;
    3934:	e0800117 	ldw	r2,4(fp)
    3938:	e0ffff03 	ldbu	r3,-4(fp)
    393c:	10c00005 	stb	r3,0(r2)
    3940:	e0800117 	ldw	r2,4(fp)
    3944:	10800044 	addi	r2,r2,1
    3948:	e0800115 	stw	r2,4(fp)
    *color++ = green;
    394c:	e0800117 	ldw	r2,4(fp)
    3950:	e0fffe03 	ldbu	r3,-8(fp)
    3954:	10c00005 	stb	r3,0(r2)
    3958:	e0800117 	ldw	r2,4(fp)
    395c:	10800044 	addi	r2,r2,1
    3960:	e0800115 	stw	r2,4(fp)
    *color = red;
    3964:	e0800117 	ldw	r2,4(fp)
    3968:	e0fffd03 	ldbu	r3,-12(fp)
    396c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    3970:	00800044 	movi	r2,1
    3974:	e0bffa15 	stw	r2,-24(fp)
    3978:	00000d06 	br	39b0 <merge_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
    397c:	e0800117 	ldw	r2,4(fp)
    3980:	10000005 	stb	zero,0(r2)
    3984:	e0800117 	ldw	r2,4(fp)
    3988:	10800044 	addi	r2,r2,1
    398c:	e0800115 	stw	r2,4(fp)
    *color++ = 0;
    3990:	e0800117 	ldw	r2,4(fp)
    3994:	10000005 	stb	zero,0(r2)
    3998:	e0800117 	ldw	r2,4(fp)
    399c:	10800044 	addi	r2,r2,1
    39a0:	e0800115 	stw	r2,4(fp)
    *color = 0;
    39a4:	e0800117 	ldw	r2,4(fp)
    39a8:	10000005 	stb	zero,0(r2)
    return_value = 0;    
    39ac:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
    39b0:	e0bffa17 	ldw	r2,-24(fp)
}
    39b4:	e037883a 	mov	sp,fp
    39b8:	df000017 	ldw	fp,0(sp)
    39bc:	dec00104 	addi	sp,sp,4
    39c0:	f800283a 	ret

000039c4 <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
    39c4:	defff604 	addi	sp,sp,-40
    39c8:	dfc00915 	stw	ra,36(sp)
    39cc:	df000815 	stw	fp,32(sp)
    39d0:	dc000715 	stw	r16,28(sp)
    39d4:	df000704 	addi	fp,sp,28
    39d8:	e13ffc15 	stw	r4,-16(fp)
    39dc:	e17ffd15 	stw	r5,-12(fp)
    39e0:	e1bffe15 	stw	r6,-8(fp)
    39e4:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned int temp_color;
  unsigned int addr;
  
  if( display->color_depth == 32 )
    39e8:	e0800417 	ldw	r2,16(fp)
    39ec:	10800417 	ldw	r2,16(r2)
    39f0:	10800818 	cmpnei	r2,r2,32
    39f4:	1000231e 	bne	r2,zero,3a84 <read_from_frame+0xc0>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 4) + (horiz * 4)));
    39f8:	e1000417 	ldw	r4,16(fp)
    39fc:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    3a00:	1021883a 	mov	r16,r2
    3a04:	e0800417 	ldw	r2,16(fp)
    3a08:	10800517 	ldw	r2,20(r2)
    3a0c:	1009883a 	mov	r4,r2
    3a10:	e17ffd17 	ldw	r5,-12(fp)
    3a14:	0009dec0 	call	9dec <__mulsi3>
    3a18:	1007883a 	mov	r3,r2
    3a1c:	e0bffc17 	ldw	r2,-16(fp)
    3a20:	1885883a 	add	r2,r3,r2
    3a24:	1085883a 	add	r2,r2,r2
    3a28:	1085883a 	add	r2,r2,r2
    3a2c:	8085883a 	add	r2,r16,r2
    3a30:	e0bffa15 	stw	r2,-24(fp)
    temp_color = IORD_32DIRECT(addr, 0);
    3a34:	e0bffa17 	ldw	r2,-24(fp)
    3a38:	10800037 	ldwio	r2,0(r2)
    3a3c:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0xFF);
    3a40:	e0bffb17 	ldw	r2,-20(fp)
    3a44:	1007883a 	mov	r3,r2
    3a48:	e0800317 	ldw	r2,12(fp)
    3a4c:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 8) & 0xFF);
    3a50:	e0bffb17 	ldw	r2,-20(fp)
    3a54:	1004d23a 	srli	r2,r2,8
    3a58:	1007883a 	mov	r3,r2
    3a5c:	e0bfff17 	ldw	r2,-4(fp)
    3a60:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 16) & 0xFF);
    3a64:	e0bffb17 	ldw	r2,-20(fp)
    3a68:	1004d43a 	srli	r2,r2,16
    3a6c:	1007883a 	mov	r3,r2
    3a70:	e0bffe17 	ldw	r2,-8(fp)
    3a74:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    3a78:	00800044 	movi	r2,1
    3a7c:	e0bff915 	stw	r2,-28(fp)
    3a80:	00005c06 	br	3bf4 <read_from_frame+0x230>
  }
  else if( display->color_depth == 24 )
    3a84:	e0800417 	ldw	r2,16(fp)
    3a88:	10800417 	ldw	r2,16(r2)
    3a8c:	10800618 	cmpnei	r2,r2,24
    3a90:	1000271e 	bne	r2,zero,3b30 <read_from_frame+0x16c>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 3) + (horiz * 3)));
    3a94:	e1000417 	ldw	r4,16(fp)
    3a98:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    3a9c:	1021883a 	mov	r16,r2
    3aa0:	e0800417 	ldw	r2,16(fp)
    3aa4:	10800517 	ldw	r2,20(r2)
    3aa8:	1009883a 	mov	r4,r2
    3aac:	e17ffd17 	ldw	r5,-12(fp)
    3ab0:	0009dec0 	call	9dec <__mulsi3>
    3ab4:	1007883a 	mov	r3,r2
    3ab8:	e0bffc17 	ldw	r2,-16(fp)
    3abc:	1887883a 	add	r3,r3,r2
    3ac0:	1805883a 	mov	r2,r3
    3ac4:	1085883a 	add	r2,r2,r2
    3ac8:	10c5883a 	add	r2,r2,r3
    3acc:	8085883a 	add	r2,r16,r2
    3ad0:	e0bffa15 	stw	r2,-24(fp)
    *blue = IORD_8DIRECT(addr, 0);
    3ad4:	e0bffa17 	ldw	r2,-24(fp)
    3ad8:	10800023 	ldbuio	r2,0(r2)
    3adc:	10803fcc 	andi	r2,r2,255
    3ae0:	1007883a 	mov	r3,r2
    3ae4:	e0800317 	ldw	r2,12(fp)
    3ae8:	10c00005 	stb	r3,0(r2)
    *green = IORD_8DIRECT(addr, 1);
    3aec:	e0bffa17 	ldw	r2,-24(fp)
    3af0:	10800044 	addi	r2,r2,1
    3af4:	10800023 	ldbuio	r2,0(r2)
    3af8:	10803fcc 	andi	r2,r2,255
    3afc:	1007883a 	mov	r3,r2
    3b00:	e0bfff17 	ldw	r2,-4(fp)
    3b04:	10c00005 	stb	r3,0(r2)
    *red = IORD_8DIRECT(addr, 2);
    3b08:	e0bffa17 	ldw	r2,-24(fp)
    3b0c:	10800084 	addi	r2,r2,2
    3b10:	10800023 	ldbuio	r2,0(r2)
    3b14:	10803fcc 	andi	r2,r2,255
    3b18:	1007883a 	mov	r3,r2
    3b1c:	e0bffe17 	ldw	r2,-8(fp)
    3b20:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    3b24:	00800044 	movi	r2,1
    3b28:	e0bff915 	stw	r2,-28(fp)
    3b2c:	00003106 	br	3bf4 <read_from_frame+0x230>
  }
  else if( display->color_depth == 16 )
    3b30:	e0800417 	ldw	r2,16(fp)
    3b34:	10800417 	ldw	r2,16(r2)
    3b38:	10800418 	cmpnei	r2,r2,16
    3b3c:	1000261e 	bne	r2,zero,3bd8 <read_from_frame+0x214>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 2) + (horiz * 2)));
    3b40:	e1000417 	ldw	r4,16(fp)
    3b44:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    3b48:	1021883a 	mov	r16,r2
    3b4c:	e0800417 	ldw	r2,16(fp)
    3b50:	10800517 	ldw	r2,20(r2)
    3b54:	1009883a 	mov	r4,r2
    3b58:	e17ffd17 	ldw	r5,-12(fp)
    3b5c:	0009dec0 	call	9dec <__mulsi3>
    3b60:	1007883a 	mov	r3,r2
    3b64:	e0bffc17 	ldw	r2,-16(fp)
    3b68:	1885883a 	add	r2,r3,r2
    3b6c:	1085883a 	add	r2,r2,r2
    3b70:	8085883a 	add	r2,r16,r2
    3b74:	e0bffa15 	stw	r2,-24(fp)
    temp_color = (unsigned int)IORD_16DIRECT(addr, 0);
    3b78:	e0bffa17 	ldw	r2,-24(fp)
    3b7c:	1080002b 	ldhuio	r2,0(r2)
    3b80:	10bfffcc 	andi	r2,r2,65535
    3b84:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0x1F); 
    3b88:	e0bffb17 	ldw	r2,-20(fp)
    3b8c:	108007cc 	andi	r2,r2,31
    3b90:	1007883a 	mov	r3,r2
    3b94:	e0800317 	ldw	r2,12(fp)
    3b98:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 5) & 0x3F);
    3b9c:	e0bffb17 	ldw	r2,-20(fp)
    3ba0:	1004d17a 	srli	r2,r2,5
    3ba4:	10800fcc 	andi	r2,r2,63
    3ba8:	1007883a 	mov	r3,r2
    3bac:	e0bfff17 	ldw	r2,-4(fp)
    3bb0:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 11) & 0x1F);
    3bb4:	e0bffb17 	ldw	r2,-20(fp)
    3bb8:	1004d2fa 	srli	r2,r2,11
    3bbc:	108007cc 	andi	r2,r2,31
    3bc0:	1007883a 	mov	r3,r2
    3bc4:	e0bffe17 	ldw	r2,-8(fp)
    3bc8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    3bcc:	00800044 	movi	r2,1
    3bd0:	e0bff915 	stw	r2,-28(fp)
    3bd4:	00000706 	br	3bf4 <read_from_frame+0x230>
  }
  else
  {
    *blue = 0;
    3bd8:	e0800317 	ldw	r2,12(fp)
    3bdc:	10000005 	stb	zero,0(r2)
    *red = 0;
    3be0:	e0bffe17 	ldw	r2,-8(fp)
    3be4:	10000005 	stb	zero,0(r2)
    *green = 0;
    3be8:	e0bfff17 	ldw	r2,-4(fp)
    3bec:	10000005 	stb	zero,0(r2)
    return_value = 0; 
    3bf0:	e03ff915 	stw	zero,-28(fp)
  }

  return return_value;
    3bf4:	e0bff917 	ldw	r2,-28(fp)
}
    3bf8:	e037883a 	mov	sp,fp
    3bfc:	dfc00217 	ldw	ra,8(sp)
    3c00:	df000117 	ldw	fp,4(sp)
    3c04:	dc000017 	ldw	r16,0(sp)
    3c08:	dec00304 	addi	sp,sp,12
    3c0c:	f800283a 	ret

00003c10 <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
    3c10:	defff204 	addi	sp,sp,-56
    3c14:	dfc00d15 	stw	ra,52(sp)
    3c18:	df000c15 	stw	fp,48(sp)
    3c1c:	dc000b15 	stw	r16,44(sp)
    3c20:	df000b04 	addi	fp,sp,44
    3c24:	e13ffc15 	stw	r4,-16(fp)
    3c28:	e17ffd15 	stw	r5,-12(fp)
    3c2c:	e1bffe15 	stw	r6,-8(fp)
    3c30:	3805883a 	mov	r2,r7
    3c34:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
    3c38:	e0bffe17 	ldw	r2,-8(fp)
    3c3c:	10bfffd8 	cmpnei	r2,r2,-1
    3c40:	10000c1e 	bne	r2,zero,3c74 <alpha_blending+0x64>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
    3c44:	e0fffb04 	addi	r3,fp,-20
    3c48:	e0bffb44 	addi	r2,fp,-19
    3c4c:	e13ffb84 	addi	r4,fp,-18
    3c50:	d9000015 	stw	r4,0(sp)
    3c54:	e1000617 	ldw	r4,24(fp)
    3c58:	d9000115 	stw	r4,4(sp)
    3c5c:	e13ffc17 	ldw	r4,-16(fp)
    3c60:	e17ffd17 	ldw	r5,-12(fp)
    3c64:	180d883a 	mov	r6,r3
    3c68:	100f883a 	mov	r7,r2
    3c6c:	00039c40 	call	39c4 <read_from_frame>
    3c70:	00000a06 	br	3c9c <alpha_blending+0x8c>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
    3c74:	e0800617 	ldw	r2,24(fp)
    3c78:	11000417 	ldw	r4,16(r2)
    3c7c:	e17ffe04 	addi	r5,fp,-8
    3c80:	e0fffb04 	addi	r3,fp,-20
    3c84:	e0bffb44 	addi	r2,fp,-19
    3c88:	e1bffb84 	addi	r6,fp,-18
    3c8c:	d9800015 	stw	r6,0(sp)
    3c90:	180d883a 	mov	r6,r3
    3c94:	100f883a 	mov	r7,r2
    3c98:	00037280 	call	3728 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
    3c9c:	e0800317 	ldw	r2,12(fp)
    3ca0:	10800003 	ldbu	r2,0(r2)
    3ca4:	10c03fcc 	andi	r3,r2,255
    3ca8:	e0bfff03 	ldbu	r2,-4(fp)
    3cac:	1809883a 	mov	r4,r3
    3cb0:	100b883a 	mov	r5,r2
    3cb4:	0009dec0 	call	9dec <__mulsi3>
    3cb8:	1021883a 	mov	r16,r2
    3cbc:	e0bffb03 	ldbu	r2,-20(fp)
    3cc0:	10c03fcc 	andi	r3,r2,255
    3cc4:	e0bfff03 	ldbu	r2,-4(fp)
    3cc8:	01003fc4 	movi	r4,255
    3ccc:	2085c83a 	sub	r2,r4,r2
    3cd0:	1809883a 	mov	r4,r3
    3cd4:	100b883a 	mov	r5,r2
    3cd8:	0009dec0 	call	9dec <__mulsi3>
    3cdc:	8085883a 	add	r2,r16,r2
    3ce0:	1009883a 	mov	r4,r2
    3ce4:	01403fc4 	movi	r5,255
    3ce8:	0009d300 	call	9d30 <__divsi3>
    3cec:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
    3cf0:	e0800417 	ldw	r2,16(fp)
    3cf4:	10800003 	ldbu	r2,0(r2)
    3cf8:	10c03fcc 	andi	r3,r2,255
    3cfc:	e0bfff03 	ldbu	r2,-4(fp)
    3d00:	1809883a 	mov	r4,r3
    3d04:	100b883a 	mov	r5,r2
    3d08:	0009dec0 	call	9dec <__mulsi3>
    3d0c:	1021883a 	mov	r16,r2
    3d10:	e0bffb43 	ldbu	r2,-19(fp)
    3d14:	10c03fcc 	andi	r3,r2,255
    3d18:	e0bfff03 	ldbu	r2,-4(fp)
    3d1c:	01003fc4 	movi	r4,255
    3d20:	2085c83a 	sub	r2,r4,r2
    3d24:	1809883a 	mov	r4,r3
    3d28:	100b883a 	mov	r5,r2
    3d2c:	0009dec0 	call	9dec <__mulsi3>
    3d30:	8085883a 	add	r2,r16,r2
    3d34:	1009883a 	mov	r4,r2
    3d38:	01403fc4 	movi	r5,255
    3d3c:	0009d300 	call	9d30 <__divsi3>
    3d40:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
    3d44:	e0800517 	ldw	r2,20(fp)
    3d48:	10800003 	ldbu	r2,0(r2)
    3d4c:	10c03fcc 	andi	r3,r2,255
    3d50:	e0bfff03 	ldbu	r2,-4(fp)
    3d54:	1809883a 	mov	r4,r3
    3d58:	100b883a 	mov	r5,r2
    3d5c:	0009dec0 	call	9dec <__mulsi3>
    3d60:	1021883a 	mov	r16,r2
    3d64:	e0bffb83 	ldbu	r2,-18(fp)
    3d68:	10c03fcc 	andi	r3,r2,255
    3d6c:	e0bfff03 	ldbu	r2,-4(fp)
    3d70:	01003fc4 	movi	r4,255
    3d74:	2085c83a 	sub	r2,r4,r2
    3d78:	1809883a 	mov	r4,r3
    3d7c:	100b883a 	mov	r5,r2
    3d80:	0009dec0 	call	9dec <__mulsi3>
    3d84:	8085883a 	add	r2,r16,r2
    3d88:	1009883a 	mov	r4,r2
    3d8c:	01403fc4 	movi	r5,255
    3d90:	0009d300 	call	9d30 <__divsi3>
    3d94:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
    3d98:	e0800617 	ldw	r2,24(fp)
    3d9c:	10800417 	ldw	r2,16(r2)
    3da0:	10800418 	cmpnei	r2,r2,16
    3da4:	1000181e 	bne	r2,zero,3e08 <alpha_blending+0x1f8>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
    3da8:	e0bff817 	ldw	r2,-32(fp)
    3dac:	10c00830 	cmpltui	r3,r2,32
    3db0:	1800011e 	bne	r3,zero,3db8 <alpha_blending+0x1a8>
    3db4:	008007c4 	movi	r2,31
    3db8:	1007883a 	mov	r3,r2
    3dbc:	e0800317 	ldw	r2,12(fp)
    3dc0:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
    3dc4:	e0bff917 	ldw	r2,-28(fp)
    3dc8:	10c01030 	cmpltui	r3,r2,64
    3dcc:	1800011e 	bne	r3,zero,3dd4 <alpha_blending+0x1c4>
    3dd0:	00800fc4 	movi	r2,63
    3dd4:	1007883a 	mov	r3,r2
    3dd8:	e0800417 	ldw	r2,16(fp)
    3ddc:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
    3de0:	e0bffa17 	ldw	r2,-24(fp)
    3de4:	10c00830 	cmpltui	r3,r2,32
    3de8:	1800011e 	bne	r3,zero,3df0 <alpha_blending+0x1e0>
    3dec:	008007c4 	movi	r2,31
    3df0:	1007883a 	mov	r3,r2
    3df4:	e0800517 	ldw	r2,20(fp)
    3df8:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
    3dfc:	00800044 	movi	r2,1
    3e00:	e0bff715 	stw	r2,-36(fp)
    3e04:	00002106 	br	3e8c <alpha_blending+0x27c>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
    3e08:	e0800617 	ldw	r2,24(fp)
    3e0c:	10800417 	ldw	r2,16(r2)
    3e10:	10800620 	cmpeqi	r2,r2,24
    3e14:	1000041e 	bne	r2,zero,3e28 <alpha_blending+0x218>
    3e18:	e0800617 	ldw	r2,24(fp)
    3e1c:	10800417 	ldw	r2,16(r2)
    3e20:	10800818 	cmpnei	r2,r2,32
    3e24:	1000181e 	bne	r2,zero,3e88 <alpha_blending+0x278>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
    3e28:	e0bff817 	ldw	r2,-32(fp)
    3e2c:	10c04030 	cmpltui	r3,r2,256
    3e30:	1800011e 	bne	r3,zero,3e38 <alpha_blending+0x228>
    3e34:	00803fc4 	movi	r2,255
    3e38:	1007883a 	mov	r3,r2
    3e3c:	e0800317 	ldw	r2,12(fp)
    3e40:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
    3e44:	e0bff917 	ldw	r2,-28(fp)
    3e48:	10c04030 	cmpltui	r3,r2,256
    3e4c:	1800011e 	bne	r3,zero,3e54 <alpha_blending+0x244>
    3e50:	00803fc4 	movi	r2,255
    3e54:	1007883a 	mov	r3,r2
    3e58:	e0800417 	ldw	r2,16(fp)
    3e5c:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
    3e60:	e0bffa17 	ldw	r2,-24(fp)
    3e64:	10c04030 	cmpltui	r3,r2,256
    3e68:	1800011e 	bne	r3,zero,3e70 <alpha_blending+0x260>
    3e6c:	00803fc4 	movi	r2,255
    3e70:	1007883a 	mov	r3,r2
    3e74:	e0800517 	ldw	r2,20(fp)
    3e78:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
    3e7c:	00800044 	movi	r2,1
    3e80:	e0bff715 	stw	r2,-36(fp)
    3e84:	00000106 	br	3e8c <alpha_blending+0x27c>
  }
  else
  {
    return_value = 0;     
    3e88:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
    3e8c:	e0bff717 	ldw	r2,-36(fp)
} 
    3e90:	e037883a 	mov	sp,fp
    3e94:	dfc00217 	ldw	ra,8(sp)
    3e98:	df000117 	ldw	fp,4(sp)
    3e9c:	dc000017 	ldw	r16,0(sp)
    3ea0:	dec00304 	addi	sp,sp,12
    3ea4:	f800283a 	ret

00003ea8 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
    3ea8:	defff004 	addi	sp,sp,-64
    3eac:	dfc00f15 	stw	ra,60(sp)
    3eb0:	df000e15 	stw	fp,56(sp)
    3eb4:	df000e04 	addi	fp,sp,56
    3eb8:	e13ffc15 	stw	r4,-16(fp)
    3ebc:	e17ffd15 	stw	r5,-12(fp)
    3ec0:	e1bffe15 	stw	r6,-8(fp)
    3ec4:	3805883a 	mov	r2,r7
    3ec8:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
    3ecc:	e0bfff07 	ldb	r2,-4(fp)
    3ed0:	10bff7c4 	addi	r2,r2,-33
    3ed4:	1004917a 	slli	r2,r2,5
    3ed8:	e0c00317 	ldw	r3,12(fp)
    3edc:	1885883a 	add	r2,r3,r2
    3ee0:	10800617 	ldw	r2,24(r2)
    3ee4:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
    3ee8:	e0800417 	ldw	r2,16(fp)
    3eec:	11000417 	ldw	r4,16(r2)
    3ef0:	e17ffe04 	addi	r5,fp,-8
    3ef4:	e0fff904 	addi	r3,fp,-28
    3ef8:	e0bff984 	addi	r2,fp,-26
    3efc:	e1bff944 	addi	r6,fp,-27
    3f00:	d9800015 	stw	r6,0(sp)
    3f04:	180d883a 	mov	r6,r3
    3f08:	100f883a 	mov	r7,r2
    3f0c:	00037280 	call	3728 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
    3f10:	e03ff615 	stw	zero,-40(fp)
    3f14:	00004606 	br	4030 <vid_print_char_alpha+0x188>
    for (j = 0; j < font[character-33].bounds_width; j++) {
    3f18:	e03ff715 	stw	zero,-36(fp)
    3f1c:	00003906 	br	4004 <vid_print_char_alpha+0x15c>
      red = original_red;
    3f20:	e0bff903 	ldbu	r2,-28(fp)
    3f24:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
    3f28:	e0bff983 	ldbu	r2,-26(fp)
    3f2c:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
    3f30:	e0bff943 	ldbu	r2,-27(fp)
    3f34:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
    3f38:	e0fffc17 	ldw	r3,-16(fp)
    3f3c:	e0bff717 	ldw	r2,-36(fp)
    3f40:	1889883a 	add	r4,r3,r2
    3f44:	e0fffd17 	ldw	r3,-12(fp)
    3f48:	e0bff617 	ldw	r2,-40(fp)
    3f4c:	1887883a 	add	r3,r3,r2
    3f50:	e0bff817 	ldw	r2,-32(fp)
    3f54:	10800003 	ldbu	r2,0(r2)
    3f58:	10803fcc 	andi	r2,r2,255
    3f5c:	e17ff9c4 	addi	r5,fp,-25
    3f60:	d9400015 	stw	r5,0(sp)
    3f64:	e17ffa04 	addi	r5,fp,-24
    3f68:	d9400115 	stw	r5,4(sp)
    3f6c:	e17ffa44 	addi	r5,fp,-23
    3f70:	d9400215 	stw	r5,8(sp)
    3f74:	e1400417 	ldw	r5,16(fp)
    3f78:	d9400315 	stw	r5,12(sp)
    3f7c:	180b883a 	mov	r5,r3
    3f80:	e1800217 	ldw	r6,8(fp)
    3f84:	100f883a 	mov	r7,r2
    3f88:	0003c100 	call	3c10 <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
    3f8c:	e0800417 	ldw	r2,16(fp)
    3f90:	11000417 	ldw	r4,16(r2)
    3f94:	e0bff9c3 	ldbu	r2,-25(fp)
    3f98:	11403fcc 	andi	r5,r2,255
    3f9c:	e0bffa03 	ldbu	r2,-24(fp)
    3fa0:	10c03fcc 	andi	r3,r2,255
    3fa4:	e0bffa43 	ldbu	r2,-23(fp)
    3fa8:	10803fcc 	andi	r2,r2,255
    3fac:	e1bffb04 	addi	r6,fp,-20
    3fb0:	d9800015 	stw	r6,0(sp)
    3fb4:	180d883a 	mov	r6,r3
    3fb8:	100f883a 	mov	r7,r2
    3fbc:	000387c0 	call	387c <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
    3fc0:	e0fffc17 	ldw	r3,-16(fp)
    3fc4:	e0bff717 	ldw	r2,-36(fp)
    3fc8:	1889883a 	add	r4,r3,r2
    3fcc:	e0fffd17 	ldw	r3,-12(fp)
    3fd0:	e0bff617 	ldw	r2,-40(fp)
    3fd4:	1887883a 	add	r3,r3,r2
    3fd8:	e0bffb17 	ldw	r2,-20(fp)
    3fdc:	180b883a 	mov	r5,r3
    3fe0:	100d883a 	mov	r6,r2
    3fe4:	e1c00417 	ldw	r7,16(fp)
    3fe8:	00010c00 	call	10c0 <vid_set_pixel>

      alpha++;
    3fec:	e0bff817 	ldw	r2,-32(fp)
    3ff0:	10800044 	addi	r2,r2,1
    3ff4:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
    3ff8:	e0bff717 	ldw	r2,-36(fp)
    3ffc:	10800044 	addi	r2,r2,1
    4000:	e0bff715 	stw	r2,-36(fp)
    4004:	e0fff717 	ldw	r3,-36(fp)
    4008:	e0bfff07 	ldb	r2,-4(fp)
    400c:	10bff7c4 	addi	r2,r2,-33
    4010:	1004917a 	slli	r2,r2,5
    4014:	e1000317 	ldw	r4,12(fp)
    4018:	2085883a 	add	r2,r4,r2
    401c:	10800417 	ldw	r2,16(r2)
    4020:	18bfbf36 	bltu	r3,r2,3f20 <vid_print_char_alpha+0x78>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    4024:	e0bff617 	ldw	r2,-40(fp)
    4028:	10800044 	addi	r2,r2,1
    402c:	e0bff615 	stw	r2,-40(fp)
    4030:	e0fff617 	ldw	r3,-40(fp)
    4034:	e0bfff07 	ldb	r2,-4(fp)
    4038:	10bff7c4 	addi	r2,r2,-33
    403c:	1004917a 	slli	r2,r2,5
    4040:	e1000317 	ldw	r4,12(fp)
    4044:	2085883a 	add	r2,r4,r2
    4048:	10800517 	ldw	r2,20(r2)
    404c:	18bfb236 	bltu	r3,r2,3f18 <vid_print_char_alpha+0x70>

      alpha++;
    }
  }

  return(0);
    4050:	0005883a 	mov	r2,zero
}
    4054:	e037883a 	mov	sp,fp
    4058:	dfc00117 	ldw	ra,4(sp)
    405c:	df000017 	ldw	fp,0(sp)
    4060:	dec00204 	addi	sp,sp,8
    4064:	f800283a 	ret

00004068 <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
    4068:	defffb04 	addi	sp,sp,-20
    406c:	df000415 	stw	fp,16(sp)
    4070:	df000404 	addi	fp,sp,16
    4074:	e13ffe15 	stw	r4,-8(fp)
    4078:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
    407c:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
    4080:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
    4084:	e03ffc15 	stw	zero,-16(fp)
    4088:	00002206 	br	4114 <vid_string_pixel_length_alpha+0xac>
  {
    if( string[i] == ' ' )
    408c:	e0bffc17 	ldw	r2,-16(fp)
    4090:	e0ffff17 	ldw	r3,-4(fp)
    4094:	1885883a 	add	r2,r3,r2
    4098:	10800003 	ldbu	r2,0(r2)
    409c:	10803fcc 	andi	r2,r2,255
    40a0:	1080201c 	xori	r2,r2,128
    40a4:	10bfe004 	addi	r2,r2,-128
    40a8:	10800818 	cmpnei	r2,r2,32
    40ac:	1000071e 	bne	r2,zero,40cc <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
    40b0:	e0bffe17 	ldw	r2,-8(fp)
    40b4:	10806004 	addi	r2,r2,384
    40b8:	10c00417 	ldw	r3,16(r2)
    40bc:	e0bffd17 	ldw	r2,-12(fp)
    40c0:	1885883a 	add	r2,r3,r2
    40c4:	e0bffd15 	stw	r2,-12(fp)
    40c8:	00000f06 	br	4108 <vid_string_pixel_length_alpha+0xa0>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
    40cc:	e0bffc17 	ldw	r2,-16(fp)
    40d0:	e0ffff17 	ldw	r3,-4(fp)
    40d4:	1885883a 	add	r2,r3,r2
    40d8:	10800003 	ldbu	r2,0(r2)
    40dc:	10803fcc 	andi	r2,r2,255
    40e0:	1080201c 	xori	r2,r2,128
    40e4:	10bfe004 	addi	r2,r2,-128
    40e8:	10bff7c4 	addi	r2,r2,-33
    40ec:	1004917a 	slli	r2,r2,5
    40f0:	e0fffe17 	ldw	r3,-8(fp)
    40f4:	1885883a 	add	r2,r3,r2
    40f8:	10c00417 	ldw	r3,16(r2)
    40fc:	e0bffd17 	ldw	r2,-12(fp)
    4100:	1885883a 	add	r2,r3,r2
    4104:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
    4108:	e0bffc17 	ldw	r2,-16(fp)
    410c:	10800044 	addi	r2,r2,1
    4110:	e0bffc15 	stw	r2,-16(fp)
    4114:	e0bffc17 	ldw	r2,-16(fp)
    4118:	e0ffff17 	ldw	r3,-4(fp)
    411c:	1885883a 	add	r2,r3,r2
    4120:	10800003 	ldbu	r2,0(r2)
    4124:	10803fcc 	andi	r2,r2,255
    4128:	1080201c 	xori	r2,r2,128
    412c:	10bfe004 	addi	r2,r2,-128
    4130:	103fd61e 	bne	r2,zero,408c <vid_string_pixel_length_alpha+0x24>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
    4134:	e0bffd17 	ldw	r2,-12(fp)
}
    4138:	e037883a 	mov	sp,fp
    413c:	df000017 	ldw	fp,0(sp)
    4140:	dec00104 	addi	sp,sp,4
    4144:	f800283a 	ret

00004148 <GUI_DeskInit>:
    int Paint4_Index;
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;

void GUI_DeskInit(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
    4148:	deffee04 	addi	sp,sp,-72
    414c:	dfc01115 	stw	ra,68(sp)
    4150:	df001015 	stw	fp,64(sp)
    4154:	dc400f15 	stw	r17,60(sp)
    4158:	dc000e15 	stw	r16,56(sp)
    415c:	df000e04 	addi	fp,sp,56
    4160:	e13ffe15 	stw	r4,-8(fp)
    4164:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 70;
    4168:	00801184 	movi	r2,70
    416c:	e0bff415 	stw	r2,-48(fp)
    const int BoxW = 70;
    4170:	00801184 	movi	r2,70
    4174:	e0bff515 	stw	r2,-44(fp)
    const int GapH = 10;
    4178:	00800284 	movi	r2,10
    417c:	e0bff615 	stw	r2,-40(fp)
    const int DrawBorder = 2;
    4180:	00800084 	movi	r2,2
    4184:	e0bff715 	stw	r2,-36(fp)
    const int TextW = 120;
    4188:	00801e04 	movi	r2,120
    418c:	e0bff815 	stw	r2,-32(fp)
    int GapW;

    
    GapW = (pReader->width - TextW - (BTN_NUM*BoxW))/(BTN_NUM+1);
    4190:	e0bffe17 	ldw	r2,-8(fp)
    4194:	10c00517 	ldw	r3,20(r2)
    4198:	e0bff817 	ldw	r2,-32(fp)
    419c:	18a1c83a 	sub	r16,r3,r2
    41a0:	e13ff517 	ldw	r4,-44(fp)
    41a4:	017ffdc4 	movi	r5,-9
    41a8:	0009dec0 	call	9dec <__mulsi3>
    41ac:	8085883a 	add	r2,r16,r2
    41b0:	1009883a 	mov	r4,r2
    41b4:	01400284 	movi	r5,10
    41b8:	0009d300 	call	9d30 <__divsi3>
    41bc:	e0bff915 	stw	r2,-28(fp)
    rc.top = pReader->height - BoxH - GapH;
    41c0:	e0bffe17 	ldw	r2,-8(fp)
    41c4:	10c00617 	ldw	r3,24(r2)
    41c8:	e0bff417 	ldw	r2,-48(fp)
    41cc:	1887c83a 	sub	r3,r3,r2
    41d0:	e0bff617 	ldw	r2,-40(fp)
    41d4:	1885c83a 	sub	r2,r3,r2
    41d8:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
    41dc:	e0fffc17 	ldw	r3,-16(fp)
    41e0:	e0bff417 	ldw	r2,-48(fp)
    41e4:	1885883a 	add	r2,r3,r2
    41e8:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW;
    41ec:	e0fff917 	ldw	r3,-28(fp)
    41f0:	e0bff817 	ldw	r2,-32(fp)
    41f4:	1885883a 	add	r2,r3,r2
    41f8:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
    41fc:	e0fffa17 	ldw	r3,-24(fp)
    4200:	e0bff517 	ldw	r2,-44(fp)
    4204:	1885883a 	add	r2,r3,r2
    4208:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pReader->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    420c:	e0bfff17 	ldw	r2,-4(fp)
    4210:	10c00504 	addi	r3,r2,20
    4214:	e0bffe17 	ldw	r2,-8(fp)
    4218:	11000517 	ldw	r4,20(r2)
    421c:	e0bff717 	ldw	r2,-36(fp)
    4220:	2085c83a 	sub	r2,r4,r2
    4224:	e17ffc17 	ldw	r5,-16(fp)
    4228:	e13ff717 	ldw	r4,-36(fp)
    422c:	2909c83a 	sub	r4,r5,r4
    4230:	d9000015 	stw	r4,0(sp)
    4234:	1809883a 	mov	r4,r3
    4238:	e17ff717 	ldw	r5,-36(fp)
    423c:	100d883a 	mov	r6,r2
    4240:	e1fff717 	ldw	r7,-36(fp)
    4244:	00002c80 	call	2c8 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
    4248:	e03ff315 	stw	zero,-52(fp)
    424c:	00002506 	br	42e4 <GUI_DeskInit+0x19c>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
    4250:	e13ff317 	ldw	r4,-52(fp)
    4254:	01400504 	movi	r5,20
    4258:	0009dec0 	call	9dec <__mulsi3>
    425c:	10800904 	addi	r2,r2,36
    4260:	e0ffff17 	ldw	r3,-4(fp)
    4264:	1887883a 	add	r3,r3,r2
    4268:	e0bffa04 	addi	r2,fp,-24
    426c:	1809883a 	mov	r4,r3
    4270:	100b883a 	mov	r5,r2
    4274:	00004340 	call	434 <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
    4278:	00c001f4 	movhi	r3,7
    427c:	18d87304 	addi	r3,r3,25036
    4280:	e0bff317 	ldw	r2,-52(fp)
    4284:	1085883a 	add	r2,r2,r2
    4288:	1085883a 	add	r2,r2,r2
    428c:	1885883a 	add	r2,r3,r2
    4290:	10800017 	ldw	r2,0(r2)
    4294:	1021883a 	mov	r16,r2
    4298:	e47fff17 	ldw	r17,-4(fp)
    429c:	e0bff317 	ldw	r2,-52(fp)
    42a0:	1009883a 	mov	r4,r2
    42a4:	01400504 	movi	r5,20
    42a8:	0009dec0 	call	9dec <__mulsi3>
    42ac:	8885883a 	add	r2,r17,r2
    42b0:	10800d04 	addi	r2,r2,52
    42b4:	14000015 	stw	r16,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
    42b8:	e0fff517 	ldw	r3,-44(fp)
    42bc:	e0bff917 	ldw	r2,-28(fp)
    42c0:	1885883a 	add	r2,r3,r2
    42c4:	e0fffa04 	addi	r3,fp,-24
    42c8:	1809883a 	mov	r4,r3
    42cc:	100b883a 	mov	r5,r2
    42d0:	000d883a 	mov	r6,zero
    42d4:	00003ac0 	call	3ac <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pReader->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
    42d8:	e0bff317 	ldw	r2,-52(fp)
    42dc:	10800044 	addi	r2,r2,1
    42e0:	e0bff315 	stw	r2,-52(fp)
    42e4:	e0bff317 	ldw	r2,-52(fp)
    42e8:	10800250 	cmplti	r2,r2,9
    42ec:	103fd81e 	bne	r2,zero,4250 <GUI_DeskInit+0x108>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->Paint0_Index = BTN_BLUE;
    42f0:	e0bfff17 	ldw	r2,-4(fp)
    42f4:	00c000c4 	movi	r3,3
    42f8:	10c00015 	stw	r3,0(r2)
    pDeskInfo->Paint1_Index = BTN_GREEN;
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	00c00104 	movi	r3,4
    4304:	10c00115 	stw	r3,4(r2)
    //add by matthew for mtl2
    pDeskInfo->Paint2_Index = BTN_RED;
    4308:	e0bfff17 	ldw	r2,-4(fp)
    430c:	00c00144 	movi	r3,5
    4310:	10c00215 	stw	r3,8(r2)
    pDeskInfo->Paint3_Index = BTN_SKY;
    4314:	e0bfff17 	ldw	r2,-4(fp)
    4318:	00c00184 	movi	r3,6
    431c:	10c00315 	stw	r3,12(r2)
    pDeskInfo->Paint4_Index = BTN_YELLOW;
    4320:	e0bfff17 	ldw	r2,-4(fp)
    4324:	00c001c4 	movi	r3,7
    4328:	10c00415 	stw	r3,16(r2)
}
    432c:	e037883a 	mov	sp,fp
    4330:	dfc00317 	ldw	ra,12(sp)
    4334:	df000217 	ldw	fp,8(sp)
    4338:	dc400117 	ldw	r17,4(sp)
    433c:	dc000017 	ldw	r16,0(sp)
    4340:	dec00404 	addi	sp,sp,16
    4344:	f800283a 	ret

00004348 <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    4348:	defffa04 	addi	sp,sp,-24
    434c:	dfc00515 	stw	ra,20(sp)
    4350:	df000415 	stw	fp,16(sp)
    4354:	df000404 	addi	fp,sp,16
    4358:	e13ffe15 	stw	r4,-8(fp)
    435c:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
    4360:	00800284 	movi	r2,10
    4364:	e0bffc15 	stw	r2,-16(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
    4368:	e03ffd15 	stw	zero,-12(fp)
    436c:	00000f06 	br	43ac <GUI_CheckButton+0x64>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
    4370:	e13ffd17 	ldw	r4,-12(fp)
    4374:	01400504 	movi	r5,20
    4378:	0009dec0 	call	9dec <__mulsi3>
    437c:	10800904 	addi	r2,r2,36
    4380:	e0fffe17 	ldw	r3,-8(fp)
    4384:	1885883a 	add	r2,r3,r2
    4388:	e13fff17 	ldw	r4,-4(fp)
    438c:	100b883a 	mov	r5,r2
    4390:	00002040 	call	204 <IsPtInRect>
    4394:	10000226 	beq	r2,zero,43a0 <GUI_CheckButton+0x58>
            ButtonId = i;
    4398:	e0bffd17 	ldw	r2,-12(fp)
    439c:	e0bffc15 	stw	r2,-16(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
    43a0:	e0bffd17 	ldw	r2,-12(fp)
    43a4:	10800044 	addi	r2,r2,1
    43a8:	e0bffd15 	stw	r2,-12(fp)
    43ac:	e0bffd17 	ldw	r2,-12(fp)
    43b0:	10800248 	cmpgei	r2,r2,9
    43b4:	1000031e 	bne	r2,zero,43c4 <GUI_CheckButton+0x7c>
    43b8:	e0bffc17 	ldw	r2,-16(fp)
    43bc:	108002a0 	cmpeqi	r2,r2,10
    43c0:	103feb1e 	bne	r2,zero,4370 <GUI_CheckButton+0x28>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
    43c4:	e0bffc17 	ldw	r2,-16(fp)
}
    43c8:	e037883a 	mov	sp,fp
    43cc:	dfc00117 	ldw	ra,4(sp)
    43d0:	df000017 	ldw	fp,0(sp)
    43d4:	dec00204 	addi	sp,sp,8
    43d8:	f800283a 	ret

000043dc <GUI_DeskDraw>:

void GUI_DeskDraw(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
    43dc:	deffee04 	addi	sp,sp,-72
    43e0:	dfc01115 	stw	ra,68(sp)
    43e4:	df001015 	stw	fp,64(sp)
    43e8:	dd000f15 	stw	r20,60(sp)
    43ec:	dcc00e15 	stw	r19,56(sp)
    43f0:	dc800d15 	stw	r18,52(sp)
    43f4:	dc400c15 	stw	r17,48(sp)
    43f8:	dc000b15 	stw	r16,44(sp)
    43fc:	df000b04 	addi	fp,sp,44
    4400:	e13ffe15 	stw	r4,-8(fp)
    4404:	e17fff15 	stw	r5,-4(fp)
    int i, active;
    RECT rc;
    
    
    // show text
    vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pReader, "Terasic");
    4408:	e0bfff17 	ldw	r2,-4(fp)
    440c:	10c00517 	ldw	r3,20(r2)
    4410:	e0bfff17 	ldw	r2,-4(fp)
    4414:	10800b17 	ldw	r2,44(r2)
    4418:	010001f4 	movhi	r4,7
    441c:	21118d04 	addi	r4,r4,17972
    4420:	d9000015 	stw	r4,0(sp)
    4424:	e13ffe17 	ldw	r4,-8(fp)
    4428:	d9000115 	stw	r4,4(sp)
    442c:	010001f4 	movhi	r4,7
    4430:	210fa704 	addi	r4,r4,16028
    4434:	d9000215 	stw	r4,8(sp)
    4438:	1809883a 	mov	r4,r3
    443c:	100b883a 	mov	r5,r2
    4440:	01803fc4 	movi	r6,255
    4444:	000f883a 	mov	r7,zero
    4448:	00034cc0 	call	34cc <vid_print_string_alpha>
    vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pReader, "Multi-Touch");
    444c:	e0bfff17 	ldw	r2,-4(fp)
    4450:	10c00517 	ldw	r3,20(r2)
    4454:	e0bfff17 	ldw	r2,-4(fp)
    4458:	10800b17 	ldw	r2,44(r2)
    445c:	10800584 	addi	r2,r2,22
    4460:	010001f4 	movhi	r4,7
    4464:	21118d04 	addi	r4,r4,17972
    4468:	d9000015 	stw	r4,0(sp)
    446c:	e13ffe17 	ldw	r4,-8(fp)
    4470:	d9000115 	stw	r4,4(sp)
    4474:	010001f4 	movhi	r4,7
    4478:	210fa904 	addi	r4,r4,16036
    447c:	d9000215 	stw	r4,8(sp)
    4480:	1809883a 	mov	r4,r3
    4484:	100b883a 	mov	r5,r2
    4488:	01803fc4 	movi	r6,255
    448c:	000f883a 	mov	r7,zero
    4490:	00034cc0 	call	34cc <vid_print_string_alpha>

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
    4494:	e0bfff17 	ldw	r2,-4(fp)
    4498:	10800504 	addi	r2,r2,20
    449c:	e0fffa04 	addi	r3,fp,-24
    44a0:	1809883a 	mov	r4,r3
    44a4:	100b883a 	mov	r5,r2
    44a8:	00004340 	call	434 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pReader);
    44ac:	e13ffa17 	ldw	r4,-24(fp)
    44b0:	e17ffc17 	ldw	r5,-16(fp)
    44b4:	e0fffb17 	ldw	r3,-20(fp)
    44b8:	e0bffd17 	ldw	r2,-12(fp)
    44bc:	01804034 	movhi	r6,256
    44c0:	31bfffc4 	addi	r6,r6,-1
    44c4:	d9800015 	stw	r6,0(sp)
    44c8:	d8000115 	stw	zero,4(sp)
    44cc:	e1bffe17 	ldw	r6,-8(fp)
    44d0:	d9800215 	stw	r6,8(sp)
    44d4:	180d883a 	mov	r6,r3
    44d8:	100f883a 	mov	r7,r2
    44dc:	0000e780 	call	e78 <vid_draw_box>
    

    // draw palette
    for(i=0;i<BTN_NUM;i++){
    44e0:	e03ff815 	stw	zero,-32(fp)
    44e4:	00005c06 	br	4658 <GUI_DeskDraw+0x27c>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
    44e8:	e13ff817 	ldw	r4,-32(fp)
    44ec:	01400504 	movi	r5,20
    44f0:	0009dec0 	call	9dec <__mulsi3>
    44f4:	10800904 	addi	r2,r2,36
    44f8:	e0ffff17 	ldw	r3,-4(fp)
    44fc:	1885883a 	add	r2,r3,r2
    4500:	e0fffa04 	addi	r3,fp,-24
    4504:	1809883a 	mov	r4,r3
    4508:	100b883a 	mov	r5,r2
    450c:	00004340 	call	434 <RectCopy>
        if (i == BTN_CLEAR){
    4510:	e0bff817 	ldw	r2,-32(fp)
    4514:	10800058 	cmpnei	r2,r2,1
    4518:	1000361e 	bne	r2,zero,45f4 <GUI_DeskDraw+0x218>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pReader);
    451c:	e4fffa17 	ldw	r19,-24(fp)
    4520:	e4bffc17 	ldw	r18,-16(fp)
    4524:	e47ffb17 	ldw	r17,-20(fp)
    4528:	e43ffd17 	ldw	r16,-12(fp)
    452c:	e53fff17 	ldw	r20,-4(fp)
    4530:	e0bff817 	ldw	r2,-32(fp)
    4534:	1009883a 	mov	r4,r2
    4538:	01400504 	movi	r5,20
    453c:	0009dec0 	call	9dec <__mulsi3>
    4540:	a085883a 	add	r2,r20,r2
    4544:	10800d04 	addi	r2,r2,52
    4548:	10800017 	ldw	r2,0(r2)
    454c:	d8800015 	stw	r2,0(sp)
    4550:	d8000115 	stw	zero,4(sp)
    4554:	e0bffe17 	ldw	r2,-8(fp)
    4558:	d8800215 	stw	r2,8(sp)
    455c:	9809883a 	mov	r4,r19
    4560:	900b883a 	mov	r5,r18
    4564:	880d883a 	mov	r6,r17
    4568:	800f883a 	mov	r7,r16
    456c:	0000e780 	call	e78 <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pReader, "Clear");
    4570:	e0bffa17 	ldw	r2,-24(fp)
    4574:	14400204 	addi	r17,r2,8
    4578:	e43ffc17 	ldw	r16,-16(fp)
    457c:	e0bffa04 	addi	r2,fp,-24
    4580:	1009883a 	mov	r4,r2
    4584:	00004cc0 	call	4cc <RectHeight>
    4588:	10bffa84 	addi	r2,r2,-22
    458c:	1006d7fa 	srli	r3,r2,31
    4590:	1885883a 	add	r2,r3,r2
    4594:	1005d07a 	srai	r2,r2,1
    4598:	80a1883a 	add	r16,r16,r2
    459c:	e4bfff17 	ldw	r18,-4(fp)
    45a0:	e0bff817 	ldw	r2,-32(fp)
    45a4:	1009883a 	mov	r4,r2
    45a8:	01400504 	movi	r5,20
    45ac:	0009dec0 	call	9dec <__mulsi3>
    45b0:	9085883a 	add	r2,r18,r2
    45b4:	10800d04 	addi	r2,r2,52
    45b8:	10800017 	ldw	r2,0(r2)
    45bc:	00c001f4 	movhi	r3,7
    45c0:	18d18d04 	addi	r3,r3,17972
    45c4:	d8c00015 	stw	r3,0(sp)
    45c8:	e0fffe17 	ldw	r3,-8(fp)
    45cc:	d8c00115 	stw	r3,4(sp)
    45d0:	00c001f4 	movhi	r3,7
    45d4:	18cfac04 	addi	r3,r3,16048
    45d8:	d8c00215 	stw	r3,8(sp)
    45dc:	8809883a 	mov	r4,r17
    45e0:	800b883a 	mov	r5,r16
    45e4:	100d883a 	mov	r6,r2
    45e8:	000f883a 	mov	r7,zero
    45ec:	00034cc0 	call	34cc <vid_print_string_alpha>
    45f0:	00001606 	br	464c <GUI_DeskDraw+0x270>
        }else{
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pReader);
    45f4:	e4fffa17 	ldw	r19,-24(fp)
    45f8:	e4bffc17 	ldw	r18,-16(fp)
    45fc:	e47ffb17 	ldw	r17,-20(fp)
    4600:	e43ffd17 	ldw	r16,-12(fp)
    4604:	e53fff17 	ldw	r20,-4(fp)
    4608:	e0bff817 	ldw	r2,-32(fp)
    460c:	1009883a 	mov	r4,r2
    4610:	01400504 	movi	r5,20
    4614:	0009dec0 	call	9dec <__mulsi3>
    4618:	a085883a 	add	r2,r20,r2
    461c:	10800d04 	addi	r2,r2,52
    4620:	10800017 	ldw	r2,0(r2)
    4624:	d8800015 	stw	r2,0(sp)
    4628:	00800044 	movi	r2,1
    462c:	d8800115 	stw	r2,4(sp)
    4630:	e0bffe17 	ldw	r2,-8(fp)
    4634:	d8800215 	stw	r2,8(sp)
    4638:	9809883a 	mov	r4,r19
    463c:	900b883a 	mov	r5,r18
    4640:	880d883a 	mov	r6,r17
    4644:	800f883a 	mov	r7,r16
    4648:	0000e780 	call	e78 <vid_draw_box>
    RectCopy(&rc, &pDeskInfo->rcPaint);
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pReader);
    

    // draw palette
    for(i=0;i<BTN_NUM;i++){
    464c:	e0bff817 	ldw	r2,-32(fp)
    4650:	10800044 	addi	r2,r2,1
    4654:	e0bff815 	stw	r2,-32(fp)
    4658:	e0bff817 	ldw	r2,-32(fp)
    465c:	10800250 	cmplti	r2,r2,9
    4660:	103fa11e 	bne	r2,zero,44e8 <GUI_DeskDraw+0x10c>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pReader);
        }            
    }
  
    // draw activce color
    active = pDeskInfo->Paint0_Index;
    4664:	e0bfff17 	ldw	r2,-4(fp)
    4668:	10800017 	ldw	r2,0(r2)
    466c:	e0bff915 	stw	r2,-28(fp)
    RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    4670:	e13ff917 	ldw	r4,-28(fp)
    4674:	01400504 	movi	r5,20
    4678:	0009dec0 	call	9dec <__mulsi3>
    467c:	10800904 	addi	r2,r2,36
    4680:	e0ffff17 	ldw	r3,-4(fp)
    4684:	1885883a 	add	r2,r3,r2
    4688:	e0fffa04 	addi	r3,fp,-24
    468c:	1809883a 	mov	r4,r3
    4690:	100b883a 	mov	r5,r2
    4694:	00004340 	call	434 <RectCopy>
    vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "1");
    4698:	e0bffa17 	ldw	r2,-24(fp)
    469c:	14400084 	addi	r17,r2,2
    46a0:	e0bffc17 	ldw	r2,-16(fp)
    46a4:	14000084 	addi	r16,r2,2
    46a8:	e4bfff17 	ldw	r18,-4(fp)
    46ac:	e0bff917 	ldw	r2,-28(fp)
    46b0:	1009883a 	mov	r4,r2
    46b4:	01400504 	movi	r5,20
    46b8:	0009dec0 	call	9dec <__mulsi3>
    46bc:	9085883a 	add	r2,r18,r2
    46c0:	10800d04 	addi	r2,r2,52
    46c4:	10800017 	ldw	r2,0(r2)
    46c8:	00c001f4 	movhi	r3,7
    46cc:	18d18d04 	addi	r3,r3,17972
    46d0:	d8c00015 	stw	r3,0(sp)
    46d4:	e0fffe17 	ldw	r3,-8(fp)
    46d8:	d8c00115 	stw	r3,4(sp)
    46dc:	00c001f4 	movhi	r3,7
    46e0:	18cfae04 	addi	r3,r3,16056
    46e4:	d8c00215 	stw	r3,8(sp)
    46e8:	8809883a 	mov	r4,r17
    46ec:	800b883a 	mov	r5,r16
    46f0:	000d883a 	mov	r6,zero
    46f4:	100f883a 	mov	r7,r2
    46f8:	00034cc0 	call	34cc <vid_print_string_alpha>
        
    active = pDeskInfo->Paint1_Index;
    46fc:	e0bfff17 	ldw	r2,-4(fp)
    4700:	10800117 	ldw	r2,4(r2)
    4704:	e0bff915 	stw	r2,-28(fp)
    RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    4708:	e13ff917 	ldw	r4,-28(fp)
    470c:	01400504 	movi	r5,20
    4710:	0009dec0 	call	9dec <__mulsi3>
    4714:	10800904 	addi	r2,r2,36
    4718:	e0ffff17 	ldw	r3,-4(fp)
    471c:	1885883a 	add	r2,r3,r2
    4720:	e0fffa04 	addi	r3,fp,-24
    4724:	1809883a 	mov	r4,r3
    4728:	100b883a 	mov	r5,r2
    472c:	00004340 	call	434 <RectCopy>
    vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "2");
    4730:	e0bffa17 	ldw	r2,-24(fp)
    4734:	14400084 	addi	r17,r2,2
    4738:	e0bffc17 	ldw	r2,-16(fp)
    473c:	14000084 	addi	r16,r2,2
    4740:	e4bfff17 	ldw	r18,-4(fp)
    4744:	e0bff917 	ldw	r2,-28(fp)
    4748:	1009883a 	mov	r4,r2
    474c:	01400504 	movi	r5,20
    4750:	0009dec0 	call	9dec <__mulsi3>
    4754:	9085883a 	add	r2,r18,r2
    4758:	10800d04 	addi	r2,r2,52
    475c:	10800017 	ldw	r2,0(r2)
    4760:	00c001f4 	movhi	r3,7
    4764:	18d18d04 	addi	r3,r3,17972
    4768:	d8c00015 	stw	r3,0(sp)
    476c:	e0fffe17 	ldw	r3,-8(fp)
    4770:	d8c00115 	stw	r3,4(sp)
    4774:	00c001f4 	movhi	r3,7
    4778:	18cfaf04 	addi	r3,r3,16060
    477c:	d8c00215 	stw	r3,8(sp)
    4780:	8809883a 	mov	r4,r17
    4784:	800b883a 	mov	r5,r16
    4788:	000d883a 	mov	r6,zero
    478c:	100f883a 	mov	r7,r2
    4790:	00034cc0 	call	34cc <vid_print_string_alpha>
    active = pDeskInfo->Paint2_Index;
    4794:	e0bfff17 	ldw	r2,-4(fp)
    4798:	10800217 	ldw	r2,8(r2)
    479c:	e0bff915 	stw	r2,-28(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    47a0:	e13ff917 	ldw	r4,-28(fp)
    47a4:	01400504 	movi	r5,20
    47a8:	0009dec0 	call	9dec <__mulsi3>
    47ac:	10800904 	addi	r2,r2,36
    47b0:	e0ffff17 	ldw	r3,-4(fp)
    47b4:	1885883a 	add	r2,r3,r2
    47b8:	e0fffa04 	addi	r3,fp,-24
    47bc:	1809883a 	mov	r4,r3
    47c0:	100b883a 	mov	r5,r2
    47c4:	00004340 	call	434 <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "3");
    47c8:	e0bffa17 	ldw	r2,-24(fp)
    47cc:	14400084 	addi	r17,r2,2
    47d0:	e0bffc17 	ldw	r2,-16(fp)
    47d4:	14000084 	addi	r16,r2,2
    47d8:	e4bfff17 	ldw	r18,-4(fp)
    47dc:	e0bff917 	ldw	r2,-28(fp)
    47e0:	1009883a 	mov	r4,r2
    47e4:	01400504 	movi	r5,20
    47e8:	0009dec0 	call	9dec <__mulsi3>
    47ec:	9085883a 	add	r2,r18,r2
    47f0:	10800d04 	addi	r2,r2,52
    47f4:	10800017 	ldw	r2,0(r2)
    47f8:	00c001f4 	movhi	r3,7
    47fc:	18d18d04 	addi	r3,r3,17972
    4800:	d8c00015 	stw	r3,0(sp)
    4804:	e0fffe17 	ldw	r3,-8(fp)
    4808:	d8c00115 	stw	r3,4(sp)
    480c:	00c001f4 	movhi	r3,7
    4810:	18cfb004 	addi	r3,r3,16064
    4814:	d8c00215 	stw	r3,8(sp)
    4818:	8809883a 	mov	r4,r17
    481c:	800b883a 	mov	r5,r16
    4820:	000d883a 	mov	r6,zero
    4824:	100f883a 	mov	r7,r2
    4828:	00034cc0 	call	34cc <vid_print_string_alpha>
	active = pDeskInfo->Paint3_Index;
    482c:	e0bfff17 	ldw	r2,-4(fp)
    4830:	10800317 	ldw	r2,12(r2)
    4834:	e0bff915 	stw	r2,-28(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    4838:	e13ff917 	ldw	r4,-28(fp)
    483c:	01400504 	movi	r5,20
    4840:	0009dec0 	call	9dec <__mulsi3>
    4844:	10800904 	addi	r2,r2,36
    4848:	e0ffff17 	ldw	r3,-4(fp)
    484c:	1885883a 	add	r2,r3,r2
    4850:	e0fffa04 	addi	r3,fp,-24
    4854:	1809883a 	mov	r4,r3
    4858:	100b883a 	mov	r5,r2
    485c:	00004340 	call	434 <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "4");
    4860:	e0bffa17 	ldw	r2,-24(fp)
    4864:	14400084 	addi	r17,r2,2
    4868:	e0bffc17 	ldw	r2,-16(fp)
    486c:	14000084 	addi	r16,r2,2
    4870:	e4bfff17 	ldw	r18,-4(fp)
    4874:	e0bff917 	ldw	r2,-28(fp)
    4878:	1009883a 	mov	r4,r2
    487c:	01400504 	movi	r5,20
    4880:	0009dec0 	call	9dec <__mulsi3>
    4884:	9085883a 	add	r2,r18,r2
    4888:	10800d04 	addi	r2,r2,52
    488c:	10800017 	ldw	r2,0(r2)
    4890:	00c001f4 	movhi	r3,7
    4894:	18d18d04 	addi	r3,r3,17972
    4898:	d8c00015 	stw	r3,0(sp)
    489c:	e0fffe17 	ldw	r3,-8(fp)
    48a0:	d8c00115 	stw	r3,4(sp)
    48a4:	00c001f4 	movhi	r3,7
    48a8:	18cfb104 	addi	r3,r3,16068
    48ac:	d8c00215 	stw	r3,8(sp)
    48b0:	8809883a 	mov	r4,r17
    48b4:	800b883a 	mov	r5,r16
    48b8:	000d883a 	mov	r6,zero
    48bc:	100f883a 	mov	r7,r2
    48c0:	00034cc0 	call	34cc <vid_print_string_alpha>
	active = pDeskInfo->Paint4_Index;
    48c4:	e0bfff17 	ldw	r2,-4(fp)
    48c8:	10800417 	ldw	r2,16(r2)
    48cc:	e0bff915 	stw	r2,-28(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    48d0:	e13ff917 	ldw	r4,-28(fp)
    48d4:	01400504 	movi	r5,20
    48d8:	0009dec0 	call	9dec <__mulsi3>
    48dc:	10800904 	addi	r2,r2,36
    48e0:	e0ffff17 	ldw	r3,-4(fp)
    48e4:	1885883a 	add	r2,r3,r2
    48e8:	e0fffa04 	addi	r3,fp,-24
    48ec:	1809883a 	mov	r4,r3
    48f0:	100b883a 	mov	r5,r2
    48f4:	00004340 	call	434 <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "5");
    48f8:	e0bffa17 	ldw	r2,-24(fp)
    48fc:	14400084 	addi	r17,r2,2
    4900:	e0bffc17 	ldw	r2,-16(fp)
    4904:	14000084 	addi	r16,r2,2
    4908:	e4bfff17 	ldw	r18,-4(fp)
    490c:	e0bff917 	ldw	r2,-28(fp)
    4910:	1009883a 	mov	r4,r2
    4914:	01400504 	movi	r5,20
    4918:	0009dec0 	call	9dec <__mulsi3>
    491c:	9085883a 	add	r2,r18,r2
    4920:	10800d04 	addi	r2,r2,52
    4924:	10800017 	ldw	r2,0(r2)
    4928:	00c001f4 	movhi	r3,7
    492c:	18d18d04 	addi	r3,r3,17972
    4930:	d8c00015 	stw	r3,0(sp)
    4934:	e0fffe17 	ldw	r3,-8(fp)
    4938:	d8c00115 	stw	r3,4(sp)
    493c:	00c001f4 	movhi	r3,7
    4940:	18cfb204 	addi	r3,r3,16072
    4944:	d8c00215 	stw	r3,8(sp)
    4948:	8809883a 	mov	r4,r17
    494c:	800b883a 	mov	r5,r16
    4950:	000d883a 	mov	r6,zero
    4954:	100f883a 	mov	r7,r2
    4958:	00034cc0 	call	34cc <vid_print_string_alpha>
        
        
}
    495c:	e037883a 	mov	sp,fp
    4960:	dfc00617 	ldw	ra,24(sp)
    4964:	df000517 	ldw	fp,20(sp)
    4968:	dd000417 	ldw	r20,16(sp)
    496c:	dcc00317 	ldw	r19,12(sp)
    4970:	dc800217 	ldw	r18,8(sp)
    4974:	dc400117 	ldw	r17,4(sp)
    4978:	dc000017 	ldw	r16,0(sp)
    497c:	dec00704 	addi	sp,sp,28
    4980:	f800283a 	ret

00004984 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
    4984:	defffb04 	addi	sp,sp,-20
    4988:	df000415 	stw	fp,16(sp)
    498c:	df000404 	addi	fp,sp,16
    4990:	e13ffe15 	stw	r4,-8(fp)
    4994:	e17fff15 	stw	r5,-4(fp)
    bool bYes = TRUE;
    4998:	00800044 	movi	r2,1
    499c:	e0bffc15 	stw	r2,-16(fp)
    const int nMax = 50;
    49a0:	00800c84 	movi	r2,50
    49a4:	e0bffd15 	stw	r2,-12(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
    49a8:	e0bffe17 	ldw	r2,-8(fp)
    49ac:	10c00017 	ldw	r3,0(r2)
    49b0:	e0bfff17 	ldw	r2,-4(fp)
    49b4:	10800017 	ldw	r2,0(r2)
    49b8:	1885c83a 	sub	r2,r3,r2
    49bc:	1000010e 	bge	r2,zero,49c4 <IsContinuedPoint+0x40>
    49c0:	0085c83a 	sub	r2,zero,r2
    49c4:	e0fffd17 	ldw	r3,-12(fp)
    49c8:	1880020e 	bge	r3,r2,49d4 <IsContinuedPoint+0x50>
        bYes = FALSE;
    49cc:	e03ffc15 	stw	zero,-16(fp)
    49d0:	00000a06 	br	49fc <IsContinuedPoint+0x78>
    else if (abs(ptPre->y - ptNew->y) > nMax)
    49d4:	e0bffe17 	ldw	r2,-8(fp)
    49d8:	10c00117 	ldw	r3,4(r2)
    49dc:	e0bfff17 	ldw	r2,-4(fp)
    49e0:	10800117 	ldw	r2,4(r2)
    49e4:	1885c83a 	sub	r2,r3,r2
    49e8:	1000010e 	bge	r2,zero,49f0 <IsContinuedPoint+0x6c>
    49ec:	0085c83a 	sub	r2,zero,r2
    49f0:	e0fffd17 	ldw	r3,-12(fp)
    49f4:	1880010e 	bge	r3,r2,49fc <IsContinuedPoint+0x78>
        bYes = FALSE;
    49f8:	e03ffc15 	stw	zero,-16(fp)
        
    return bYes;        
    49fc:	e0bffc17 	ldw	r2,-16(fp)
        
}
    4a00:	e037883a 	mov	sp,fp
    4a04:	df000017 	ldw	fp,0(sp)
    4a08:	dec00104 	addi	sp,sp,4
    4a0c:	f800283a 	ret

00004a10 <GUI_ShowGesture>:

void GUI_ShowGesture(VIP_FRAME_READER *pReader, POINT *ptDraw, alt_u8 GestureId ){
    4a10:	defff104 	addi	sp,sp,-60
    4a14:	dfc00e15 	stw	ra,56(sp)
    4a18:	df000d15 	stw	fp,52(sp)
    4a1c:	dc400c15 	stw	r17,48(sp)
    4a20:	dc000b15 	stw	r16,44(sp)
    4a24:	df000b04 	addi	fp,sp,44
    4a28:	e13ffd15 	stw	r4,-12(fp)
    4a2c:	e17ffe15 	stw	r5,-8(fp)
    4a30:	3005883a 	mov	r2,r6
    4a34:	e0bfff05 	stb	r2,-4(fp)
    // show bitmap
    int nIndex = -1, x, y;
    4a38:	00bfffc4 	movi	r2,-1
    4a3c:	e0bff515 	stw	r2,-44(fp)
    const int BmpW = 60;
    4a40:	00800f04 	movi	r2,60
    4a44:	e0bffb15 	stw	r2,-20(fp)
    const int BmpH = 60;
    4a48:	00800f04 	movi	r2,60
    4a4c:	e0bffc15 	stw	r2,-16(fp)
    alt_u8 *pDes, *pSrc, *pDesStart;

    // find gesture bitmap id
    switch(GestureId){
    4a50:	e0bfff03 	ldbu	r2,-4(fp)
    4a54:	10bffc04 	addi	r2,r2,-16
    4a58:	10c00ea8 	cmpgeui	r3,r2,58
    4a5c:	1800521e 	bne	r3,zero,4ba8 <GUI_ShowGesture+0x198>
    4a60:	1085883a 	add	r2,r2,r2
    4a64:	1087883a 	add	r3,r2,r2
    4a68:	00800034 	movhi	r2,0
    4a6c:	10929f04 	addi	r2,r2,19068
    4a70:	1885883a 	add	r2,r3,r2
    4a74:	10800017 	ldw	r2,0(r2)
    4a78:	1000683a 	jmp	r2
    4a7c:	00004b84 	movi	zero,302
    4a80:	00004ba8 	cmpgeui	zero,zero,302
    4a84:	00004ba8 	cmpgeui	zero,zero,302
    4a88:	00004ba8 	cmpgeui	zero,zero,302
    4a8c:	00004b6c 	andhi	zero,zero,301
    4a90:	00004ba8 	cmpgeui	zero,zero,302
    4a94:	00004ba8 	cmpgeui	zero,zero,302
    4a98:	00004ba8 	cmpgeui	zero,zero,302
    4a9c:	00004b78 	rdprs	zero,zero,301
    4aa0:	00004ba8 	cmpgeui	zero,zero,302
    4aa4:	00004ba8 	cmpgeui	zero,zero,302
    4aa8:	00004ba8 	cmpgeui	zero,zero,302
    4aac:	00004b64 	muli	zero,zero,301
    4ab0:	00004ba8 	cmpgeui	zero,zero,302
    4ab4:	00004ba8 	cmpgeui	zero,zero,302
    4ab8:	00004ba8 	cmpgeui	zero,zero,302
    4abc:	00004ba8 	cmpgeui	zero,zero,302
    4ac0:	00004ba8 	cmpgeui	zero,zero,302
    4ac4:	00004ba8 	cmpgeui	zero,zero,302
    4ac8:	00004ba8 	cmpgeui	zero,zero,302
    4acc:	00004ba8 	cmpgeui	zero,zero,302
    4ad0:	00004ba8 	cmpgeui	zero,zero,302
    4ad4:	00004ba8 	cmpgeui	zero,zero,302
    4ad8:	00004ba8 	cmpgeui	zero,zero,302
    4adc:	00004ba8 	cmpgeui	zero,zero,302
    4ae0:	00004ba8 	cmpgeui	zero,zero,302
    4ae4:	00004ba8 	cmpgeui	zero,zero,302
    4ae8:	00004ba8 	cmpgeui	zero,zero,302
    4aec:	00004ba8 	cmpgeui	zero,zero,302
    4af0:	00004ba8 	cmpgeui	zero,zero,302
    4af4:	00004ba8 	cmpgeui	zero,zero,302
    4af8:	00004ba8 	cmpgeui	zero,zero,302
    4afc:	00004ba8 	cmpgeui	zero,zero,302
    4b00:	00004ba8 	cmpgeui	zero,zero,302
    4b04:	00004ba8 	cmpgeui	zero,zero,302
    4b08:	00004ba8 	cmpgeui	zero,zero,302
    4b0c:	00004ba8 	cmpgeui	zero,zero,302
    4b10:	00004ba8 	cmpgeui	zero,zero,302
    4b14:	00004ba8 	cmpgeui	zero,zero,302
    4b18:	00004ba8 	cmpgeui	zero,zero,302
    4b1c:	00004ba8 	cmpgeui	zero,zero,302
    4b20:	00004ba8 	cmpgeui	zero,zero,302
    4b24:	00004ba8 	cmpgeui	zero,zero,302
    4b28:	00004ba8 	cmpgeui	zero,zero,302
    4b2c:	00004ba8 	cmpgeui	zero,zero,302
    4b30:	00004ba8 	cmpgeui	zero,zero,302
    4b34:	00004ba8 	cmpgeui	zero,zero,302
    4b38:	00004ba8 	cmpgeui	zero,zero,302
    4b3c:	00004ba8 	cmpgeui	zero,zero,302
    4b40:	00004ba8 	cmpgeui	zero,zero,302
    4b44:	00004ba8 	cmpgeui	zero,zero,302
    4b48:	00004ba8 	cmpgeui	zero,zero,302
    4b4c:	00004ba8 	cmpgeui	zero,zero,302
    4b50:	00004ba8 	cmpgeui	zero,zero,302
    4b54:	00004ba8 	cmpgeui	zero,zero,302
    4b58:	00004ba8 	cmpgeui	zero,zero,302
    4b5c:	00004b90 	cmplti	zero,zero,302
    4b60:	00004b9c 	xori	zero,zero,302
        case MTC_ST_UP:  nIndex = 0; break;
    4b64:	e03ff515 	stw	zero,-44(fp)
    4b68:	00000f06 	br	4ba8 <GUI_ShowGesture+0x198>
        case MTC_ST_DOWN:  nIndex = 1; break;
    4b6c:	00800044 	movi	r2,1
    4b70:	e0bff515 	stw	r2,-44(fp)
    4b74:	00000c06 	br	4ba8 <GUI_ShowGesture+0x198>
        case MTC_ST_RIGHT:   nIndex = 2; break;
    4b78:	00800084 	movi	r2,2
    4b7c:	e0bff515 	stw	r2,-44(fp)
    4b80:	00000906 	br	4ba8 <GUI_ShowGesture+0x198>
        case MTC_ST_LEFT:   nIndex = 3; break;
    4b84:	008000c4 	movi	r2,3
    4b88:	e0bff515 	stw	r2,-44(fp)
    4b8c:	00000606 	br	4ba8 <GUI_ShowGesture+0x198>

        case MTC_ZOOM_IN:         nIndex = 24; break;
    4b90:	00800604 	movi	r2,24
    4b94:	e0bff515 	stw	r2,-44(fp)
    4b98:	00000306 	br	4ba8 <GUI_ShowGesture+0x198>
        case MTC_ZOOM_OUT:        nIndex = 25; break;
    4b9c:	00800644 	movi	r2,25
    4ba0:	e0bff515 	stw	r2,-44(fp)
    4ba4:	0001883a 	nop
    }

    if (nIndex  == -1)
    4ba8:	e0bff517 	ldw	r2,-44(fp)
    4bac:	10bfffd8 	cmpnei	r2,r2,-1
    4bb0:	10005126 	beq	r2,zero,4cf8 <GUI_ShowGesture+0x2e8>
        return;

    pSrc = (alt_u8 *)gesture_bmp.pixel_data + nIndex * BmpW * BmpH * 3;
    4bb4:	e13ff517 	ldw	r4,-44(fp)
    4bb8:	e17ffb17 	ldw	r5,-20(fp)
    4bbc:	0009dec0 	call	9dec <__mulsi3>
    4bc0:	1009883a 	mov	r4,r2
    4bc4:	e17ffc17 	ldw	r5,-16(fp)
    4bc8:	0009dec0 	call	9dec <__mulsi3>
    4bcc:	1007883a 	mov	r3,r2
    4bd0:	1805883a 	mov	r2,r3
    4bd4:	1085883a 	add	r2,r2,r2
    4bd8:	10c5883a 	add	r2,r2,r3
    4bdc:	10c00304 	addi	r3,r2,12
    4be0:	008000f4 	movhi	r2,3
    4be4:	10bd6b04 	addi	r2,r2,-2644
    4be8:	1885883a 	add	r2,r3,r2
    4bec:	e0bff915 	stw	r2,-28(fp)

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);
    4bf0:	e13ffd17 	ldw	r4,-12(fp)
    4bf4:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    4bf8:	1021883a 	mov	r16,r2
    4bfc:	e0bffe17 	ldw	r2,-8(fp)
    4c00:	10c00117 	ldw	r3,4(r2)
    4c04:	e0bffd17 	ldw	r2,-12(fp)
    4c08:	10800517 	ldw	r2,20(r2)
    4c0c:	1809883a 	mov	r4,r3
    4c10:	100b883a 	mov	r5,r2
    4c14:	0009dec0 	call	9dec <__mulsi3>
    4c18:	1007883a 	mov	r3,r2
    4c1c:	e0bffd17 	ldw	r2,-12(fp)
    4c20:	10800717 	ldw	r2,28(r2)
    4c24:	1809883a 	mov	r4,r3
    4c28:	100b883a 	mov	r5,r2
    4c2c:	0009dec0 	call	9dec <__mulsi3>
    4c30:	1023883a 	mov	r17,r2
    4c34:	e0bffe17 	ldw	r2,-8(fp)
    4c38:	10c00017 	ldw	r3,0(r2)
    4c3c:	e0bffd17 	ldw	r2,-12(fp)
    4c40:	10800717 	ldw	r2,28(r2)
    4c44:	1809883a 	mov	r4,r3
    4c48:	100b883a 	mov	r5,r2
    4c4c:	0009dec0 	call	9dec <__mulsi3>
    4c50:	8885883a 	add	r2,r17,r2
    4c54:	8085883a 	add	r2,r16,r2
    4c58:	e0bffa15 	stw	r2,-24(fp)

    for(y=0;y<BmpH;y++){
    4c5c:	e03ff715 	stw	zero,-36(fp)
    4c60:	00002106 	br	4ce8 <GUI_ShowGesture+0x2d8>
        pDes = pDesStart;
    4c64:	e0bffa17 	ldw	r2,-24(fp)
    4c68:	e0bff815 	stw	r2,-32(fp)
        for(x=0;x<BmpW;x++){
    4c6c:	e03ff615 	stw	zero,-40(fp)
    4c70:	00000d06 	br	4ca8 <GUI_ShowGesture+0x298>
            memcpy(pDes, pSrc, 3);
    4c74:	e13ff817 	ldw	r4,-32(fp)
    4c78:	e17ff917 	ldw	r5,-28(fp)
    4c7c:	018000c4 	movi	r6,3
    4c80:	000ac0c0 	call	ac0c <memcpy>
            pDes += 4;
    4c84:	e0bff817 	ldw	r2,-32(fp)
    4c88:	10800104 	addi	r2,r2,4
    4c8c:	e0bff815 	stw	r2,-32(fp)
            pSrc += 3;
    4c90:	e0bff917 	ldw	r2,-28(fp)
    4c94:	108000c4 	addi	r2,r2,3
    4c98:	e0bff915 	stw	r2,-28(fp)

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);

    for(y=0;y<BmpH;y++){
        pDes = pDesStart;
        for(x=0;x<BmpW;x++){
    4c9c:	e0bff617 	ldw	r2,-40(fp)
    4ca0:	10800044 	addi	r2,r2,1
    4ca4:	e0bff615 	stw	r2,-40(fp)
    4ca8:	e0fff617 	ldw	r3,-40(fp)
    4cac:	e0bffb17 	ldw	r2,-20(fp)
    4cb0:	18bff016 	blt	r3,r2,4c74 <GUI_ShowGesture+0x264>
            memcpy(pDes, pSrc, 3);
            pDes += 4;
            pSrc += 3;
        }
        pDesStart += pReader->width*pReader->bytes_per_pixel;
    4cb4:	e0bffd17 	ldw	r2,-12(fp)
    4cb8:	10c00517 	ldw	r3,20(r2)
    4cbc:	e0bffd17 	ldw	r2,-12(fp)
    4cc0:	10800717 	ldw	r2,28(r2)
    4cc4:	1809883a 	mov	r4,r3
    4cc8:	100b883a 	mov	r5,r2
    4ccc:	0009dec0 	call	9dec <__mulsi3>
    4cd0:	e0fffa17 	ldw	r3,-24(fp)
    4cd4:	1885883a 	add	r2,r3,r2
    4cd8:	e0bffa15 	stw	r2,-24(fp)

    pSrc = (alt_u8 *)gesture_bmp.pixel_data + nIndex * BmpW * BmpH * 3;

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);

    for(y=0;y<BmpH;y++){
    4cdc:	e0bff717 	ldw	r2,-36(fp)
    4ce0:	10800044 	addi	r2,r2,1
    4ce4:	e0bff715 	stw	r2,-36(fp)
    4ce8:	e0fff717 	ldw	r3,-36(fp)
    4cec:	e0bffc17 	ldw	r2,-16(fp)
    4cf0:	18bfdc16 	blt	r3,r2,4c64 <GUI_ShowGesture+0x254>
    4cf4:	00000106 	br	4cfc <GUI_ShowGesture+0x2ec>
        case MTC_ZOOM_IN:         nIndex = 24; break;
        case MTC_ZOOM_OUT:        nIndex = 25; break;
    }

    if (nIndex  == -1)
        return;
    4cf8:	0001883a 	nop
            pDes += 4;
            pSrc += 3;
        }
        pDesStart += pReader->width*pReader->bytes_per_pixel;
    }
}
    4cfc:	e037883a 	mov	sp,fp
    4d00:	dfc00317 	ldw	ra,12(sp)
    4d04:	df000217 	ldw	fp,8(sp)
    4d08:	dc400117 	ldw	r17,4(sp)
    4d0c:	dc000017 	ldw	r16,0(sp)
    4d10:	dec00404 	addi	sp,sp,16
    4d14:	f800283a 	ret

00004d18 <GUI_TraceGesture>:

void GUI_TraceGesture(VIP_FRAME_READER *pReader, POINT *ptDraw, alt_u8 GestureId ){
    4d18:	defffb04 	addi	sp,sp,-20
    4d1c:	dfc00415 	stw	ra,16(sp)
    4d20:	df000315 	stw	fp,12(sp)
    4d24:	df000304 	addi	fp,sp,12
    4d28:	e13ffd15 	stw	r4,-12(fp)
    4d2c:	e17ffe15 	stw	r5,-8(fp)
    4d30:	3005883a 	mov	r2,r6
    4d34:	e0bfff05 	stb	r2,-4(fp)
      GUI_ShowGesture(pReader, ptDraw, GestureId);
    4d38:	e0bfff03 	ldbu	r2,-4(fp)
    4d3c:	e13ffd17 	ldw	r4,-12(fp)
    4d40:	e17ffe17 	ldw	r5,-8(fp)
    4d44:	100d883a 	mov	r6,r2
    4d48:	0004a100 	call	4a10 <GUI_ShowGesture>
}
    4d4c:	e037883a 	mov	sp,fp
    4d50:	dfc00117 	ldw	ra,4(sp)
    4d54:	df000017 	ldw	fp,0(sp)
    4d58:	dec00204 	addi	sp,sp,8
    4d5c:	f800283a 	ret

00004d60 <GUI_ClearPaintArea>:

void GUI_ClearPaintArea(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
    4d60:	defff504 	addi	sp,sp,-44
    4d64:	dfc00a15 	stw	ra,40(sp)
    4d68:	df000915 	stw	fp,36(sp)
    4d6c:	df000904 	addi	fp,sp,36
    4d70:	e13ffe15 	stw	r4,-8(fp)
    4d74:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
    4d78:	e0bfff17 	ldw	r2,-4(fp)
    4d7c:	10800504 	addi	r2,r2,20
    4d80:	e13ffa04 	addi	r4,fp,-24
    4d84:	100b883a 	mov	r5,r2
    4d88:	00004340 	call	434 <RectCopy>
    RectInflate(&rc, -1, -1);
    4d8c:	e13ffa04 	addi	r4,fp,-24
    4d90:	017fffc4 	movi	r5,-1
    4d94:	01bfffc4 	movi	r6,-1
    4d98:	00003240 	call	324 <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pReader);
    4d9c:	e13ffa17 	ldw	r4,-24(fp)
    4da0:	e17ffc17 	ldw	r5,-16(fp)
    4da4:	e0fffb17 	ldw	r3,-20(fp)
    4da8:	e0bffd17 	ldw	r2,-12(fp)
    4dac:	d8000015 	stw	zero,0(sp)
    4db0:	01800044 	movi	r6,1
    4db4:	d9800115 	stw	r6,4(sp)
    4db8:	e1bffe17 	ldw	r6,-8(fp)
    4dbc:	d9800215 	stw	r6,8(sp)
    4dc0:	180d883a 	mov	r6,r3
    4dc4:	100f883a 	mov	r7,r2
    4dc8:	0000e780 	call	e78 <vid_draw_box>
    //
    RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
    4dcc:	e0bfff17 	ldw	r2,-4(fp)
    4dd0:	10800904 	addi	r2,r2,36
    4dd4:	e13ffa04 	addi	r4,fp,-24
    4dd8:	100b883a 	mov	r5,r2
    4ddc:	00004340 	call	434 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pReader);
    4de0:	e13ffa17 	ldw	r4,-24(fp)
    4de4:	e17ffc17 	ldw	r5,-16(fp)
    4de8:	e0fffb17 	ldw	r3,-20(fp)
    4dec:	e0bffd17 	ldw	r2,-12(fp)
    4df0:	d8000015 	stw	zero,0(sp)
    4df4:	01800044 	movi	r6,1
    4df8:	d9800115 	stw	r6,4(sp)
    4dfc:	e1bffe17 	ldw	r6,-8(fp)
    4e00:	d9800215 	stw	r6,8(sp)
    4e04:	180d883a 	mov	r6,r3
    4e08:	100f883a 	mov	r7,r2
    4e0c:	0000e780 	call	e78 <vid_draw_box>
}
    4e10:	e037883a 	mov	sp,fp
    4e14:	dfc00117 	ldw	ra,4(sp)
    4e18:	df000017 	ldw	fp,0(sp)
    4e1c:	dec00204 	addi	sp,sp,8
    4e20:	f800283a 	ret

00004e24 <GUI>:

void GUI(MTC2_INFO *pTouch){
    4e24:	deff9504 	addi	sp,sp,-428
    4e28:	dfc06a15 	stw	ra,424(sp)
    4e2c:	df006915 	stw	fp,420(sp)
    4e30:	df006904 	addi	fp,sp,420
    4e34:	e13fff15 	stw	r4,-4(fp)
    // video
    DESK_INFO DeskInfo;
    VIP_FRAME_READER *pReader;
    int X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5 ;
    POINT Pt1, Pt2, Pt3, Pt4, Pt5, ptGesture;
    alt_u8 Event, TouchNum, LedMask = 0x01;
    4e38:	00800044 	movi	r2,1
    4e3c:	e0bfa005 	stb	r2,-384(fp)
    const int nDotSize = DOT_SIZE;
    4e40:	00800184 	movi	r2,6
    4e44:	e0bfa715 	stw	r2,-356(fp)
    /////////////////////////////////////////////
    // frame reader
#ifdef DUAL_FRAME_BUFFER    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
#else    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_0, FRAME_WIDTH, FRAME_HEIGHT);
    4e48:	00807804 	movi	r2,480
    4e4c:	d8800015 	stw	r2,0(sp)
    4e50:	01024434 	movhi	r4,2320
    4e54:	21040004 	addi	r4,r4,4096
    4e58:	01404034 	movhi	r5,256
    4e5c:	01804034 	movhi	r6,256
    4e60:	01c0c804 	movi	r7,800
    4e64:	00087e80 	call	87e8 <VIPFR_Init>
    4e68:	e0bfa815 	stw	r2,-352(fp)
#endif // DUAL_FRAME_BUFFER    
    VIPFR_Go(pReader, TRUE);
    4e6c:	e13fa817 	ldw	r4,-352(fp)
    4e70:	01400044 	movi	r5,1
    4e74:	0008a000 	call	8a00 <VIPFR_Go>
    
    
    // clean screen
    vid_clean_screen(pReader, BLACK_24);
    4e78:	e13fa817 	ldw	r4,-352(fp)
    4e7c:	000b883a 	mov	r5,zero
    4e80:	00006040 	call	604 <vid_clean_screen>
    
   
    GUI_DeskInit(pReader, &DeskInfo);
    4e84:	e0bfae04 	addi	r2,fp,-328
    4e88:	e13fa817 	ldw	r4,-352(fp)
    4e8c:	100b883a 	mov	r5,r2
    4e90:	00041480 	call	4148 <GUI_DeskInit>
    GUI_DeskDraw(pReader, &DeskInfo);
    4e94:	e0bfae04 	addi	r2,fp,-328
    4e98:	e13fa817 	ldw	r4,-352(fp)
    4e9c:	100b883a 	mov	r5,r2
    4ea0:	00043dc0 	call	43dc <GUI_DeskDraw>
    
    VIPFR_ActiveDrawFrame(pReader);
    4ea4:	e13fa817 	ldw	r4,-352(fp)
    4ea8:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
    4eac:	e0fffb04 	addi	r3,fp,-20
    4eb0:	e0bfae04 	addi	r2,fp,-328
    4eb4:	10800504 	addi	r2,r2,20
    4eb8:	1809883a 	mov	r4,r3
    4ebc:	100b883a 	mov	r5,r2
    4ec0:	00004340 	call	434 <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
    4ec4:	00ffff84 	movi	r3,-2
    4ec8:	e0bfa717 	ldw	r2,-356(fp)
    4ecc:	1887c83a 	sub	r3,r3,r2
    4ed0:	013fff84 	movi	r4,-2
    4ed4:	e0bfa717 	ldw	r2,-356(fp)
    4ed8:	2085c83a 	sub	r2,r4,r2
    4edc:	e13ffb04 	addi	r4,fp,-20
    4ee0:	180b883a 	mov	r5,r3
    4ee4:	100d883a 	mov	r6,r2
    4ee8:	00003240 	call	324 <RectInflate>
    
    ColorPen0 = DeskInfo.szPalette[DeskInfo.Paint0_Index].color;
    4eec:	e0bfae17 	ldw	r2,-328(fp)
    4ef0:	1009883a 	mov	r4,r2
    4ef4:	01400504 	movi	r5,20
    4ef8:	0009dec0 	call	9dec <__mulsi3>
    4efc:	e0ffa004 	addi	r3,fp,-384
    4f00:	1885883a 	add	r2,r3,r2
    4f04:	10801b04 	addi	r2,r2,108
    4f08:	10800017 	ldw	r2,0(r2)
    4f0c:	e0bfa115 	stw	r2,-380(fp)
    ColorPen1 = DeskInfo.szPalette[DeskInfo.Paint1_Index].color;
    4f10:	e0bfaf17 	ldw	r2,-324(fp)
    4f14:	1009883a 	mov	r4,r2
    4f18:	01400504 	movi	r5,20
    4f1c:	0009dec0 	call	9dec <__mulsi3>
    4f20:	e0ffa004 	addi	r3,fp,-384
    4f24:	1885883a 	add	r2,r3,r2
    4f28:	10801b04 	addi	r2,r2,108
    4f2c:	10800017 	ldw	r2,0(r2)
    4f30:	e0bfa215 	stw	r2,-376(fp)
    ColorPen2 = DeskInfo.szPalette[DeskInfo.Paint2_Index].color;
    4f34:	e0bfb017 	ldw	r2,-320(fp)
    4f38:	1009883a 	mov	r4,r2
    4f3c:	01400504 	movi	r5,20
    4f40:	0009dec0 	call	9dec <__mulsi3>
    4f44:	e0ffa004 	addi	r3,fp,-384
    4f48:	1885883a 	add	r2,r3,r2
    4f4c:	10801b04 	addi	r2,r2,108
    4f50:	10800017 	ldw	r2,0(r2)
    4f54:	e0bfa315 	stw	r2,-372(fp)
    ColorPen3 = DeskInfo.szPalette[DeskInfo.Paint3_Index].color;
    4f58:	e0bfb117 	ldw	r2,-316(fp)
    4f5c:	1009883a 	mov	r4,r2
    4f60:	01400504 	movi	r5,20
    4f64:	0009dec0 	call	9dec <__mulsi3>
    4f68:	e0ffa004 	addi	r3,fp,-384
    4f6c:	1885883a 	add	r2,r3,r2
    4f70:	10801b04 	addi	r2,r2,108
    4f74:	10800017 	ldw	r2,0(r2)
    4f78:	e0bfa415 	stw	r2,-368(fp)
    ColorPen4 = DeskInfo.szPalette[DeskInfo.Paint4_Index].color;
    4f7c:	e0bfb217 	ldw	r2,-312(fp)
    4f80:	1009883a 	mov	r4,r2
    4f84:	01400504 	movi	r5,20
    4f88:	0009dec0 	call	9dec <__mulsi3>
    4f8c:	e0ffa004 	addi	r3,fp,-384
    4f90:	1885883a 	add	r2,r3,r2
    4f94:	10801b04 	addi	r2,r2,108
    4f98:	10800017 	ldw	r2,0(r2)
    4f9c:	e0bfa515 	stw	r2,-364(fp)
    
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
    PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);
    4fa0:	e0bfb717 	ldw	r2,-292(fp)
    4fa4:	10c00144 	addi	r3,r2,5
    4fa8:	e0bfb917 	ldw	r2,-284(fp)
    4fac:	10800144 	addi	r2,r2,5
    4fb0:	e13ff804 	addi	r4,fp,-32
    4fb4:	180b883a 	mov	r5,r3
    4fb8:	100d883a 	mov	r6,r2
    4fbc:	00002880 	call	288 <PtSet>
    4fc0:	00000106 	br	4fc8 <GUI+0x1a4>
					VIPFR_ActiveDrawFrame(pReader);
					MTC2_ClearEvent(pTouch);
				}
                }
        }
    }
    4fc4:	0001883a 	nop
    PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);
    
    while(1)
    {
        // touch
        if (MTC2_GetStatus(pTouch,&Event, &TouchNum, &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)){
    4fc8:	e17ffa04 	addi	r5,fp,-24
    4fcc:	e0fffa44 	addi	r3,fp,-23
    4fd0:	e0bfe404 	addi	r2,fp,-112
    4fd4:	e13fe504 	addi	r4,fp,-108
    4fd8:	d9000015 	stw	r4,0(sp)
    4fdc:	e13fe604 	addi	r4,fp,-104
    4fe0:	d9000115 	stw	r4,4(sp)
    4fe4:	e13fe704 	addi	r4,fp,-100
    4fe8:	d9000215 	stw	r4,8(sp)
    4fec:	e13fe804 	addi	r4,fp,-96
    4ff0:	d9000315 	stw	r4,12(sp)
    4ff4:	e13fe904 	addi	r4,fp,-92
    4ff8:	d9000415 	stw	r4,16(sp)
    4ffc:	e13fea04 	addi	r4,fp,-88
    5000:	d9000515 	stw	r4,20(sp)
    5004:	e13feb04 	addi	r4,fp,-84
    5008:	d9000615 	stw	r4,24(sp)
    500c:	e13fec04 	addi	r4,fp,-80
    5010:	d9000715 	stw	r4,28(sp)
    5014:	e13fed04 	addi	r4,fp,-76
    5018:	d9000815 	stw	r4,32(sp)
    501c:	e13fff17 	ldw	r4,-4(fp)
    5020:	180d883a 	mov	r6,r3
    5024:	100f883a 	mov	r7,r2
    5028:	00083b80 	call	83b8 <MTC2_GetStatus>
    502c:	103fe526 	beq	r2,zero,4fc4 <GUI+0x1a0>
            IOWR(LED_BASE, 0x00, LedMask);
    5030:	e0ffa003 	ldbu	r3,-384(fp)
    5034:	00820034 	movhi	r2,2048
    5038:	10801004 	addi	r2,r2,64
    503c:	10c00035 	stwio	r3,0(r2)
            LedMask <<= 1;
    5040:	e0bfa003 	ldbu	r2,-384(fp)
    5044:	1085883a 	add	r2,r2,r2
    5048:	e0bfa005 	stb	r2,-384(fp)
            if (LedMask == 0x00)
    504c:	e0bfa003 	ldbu	r2,-384(fp)
    5050:	1000021e 	bne	r2,zero,505c <GUI+0x238>
                LedMask = 0x01;
    5054:	00800044 	movi	r2,1
    5058:	e0bfa005 	stb	r2,-384(fp)

           GUI_TraceGesture(pReader, &ptGesture, Event);
    505c:	e0bffa03 	ldbu	r2,-24(fp)
    5060:	10803fcc 	andi	r2,r2,255
    5064:	e0fff804 	addi	r3,fp,-32
    5068:	e13fa817 	ldw	r4,-352(fp)
    506c:	180b883a 	mov	r5,r3
    5070:	100d883a 	mov	r6,r2
    5074:	0004d180 	call	4d18 <GUI_TraceGesture>
           printf(".");
    5078:	01000b84 	movi	r4,46
    507c:	000ae980 	call	ae98 <putchar>
            switch(TouchNum)
    5080:	e0bffa43 	ldbu	r2,-23(fp)
    5084:	10803fcc 	andi	r2,r2,255
    5088:	10c001a8 	cmpgeui	r3,r2,6
    508c:	18002c1e 	bne	r3,zero,5140 <GUI+0x31c>
    5090:	1085883a 	add	r2,r2,r2
    5094:	1087883a 	add	r3,r2,r2
    5098:	00800034 	movhi	r2,0
    509c:	10942b04 	addi	r2,r2,20652
    50a0:	1885883a 	add	r2,r3,r2
    50a4:	10800017 	ldw	r2,0(r2)
    50a8:	1000683a 	jmp	r2
    50ac:	00005140 	call	514 <PtDistance+0x14>
    50b0:	00005124 	muli	zero,zero,324
    50b4:	0000510c 	andi	zero,zero,324
    50b8:	000050f4 	movhi	zero,323
    50bc:	000050dc 	xori	zero,zero,323
    50c0:	000050c4 	movi	zero,323
            {
            case 5 :
            	PtSet(&Pt5, X5, Y5);
    50c4:	e0ffec17 	ldw	r3,-80(fp)
    50c8:	e0bfed17 	ldw	r2,-76(fp)
    50cc:	e13ff604 	addi	r4,fp,-40
    50d0:	180b883a 	mov	r5,r3
    50d4:	100d883a 	mov	r6,r2
    50d8:	00002880 	call	288 <PtSet>
            case 4 :
            	PtSet(&Pt4, X4, Y4);
    50dc:	e0ffea17 	ldw	r3,-88(fp)
    50e0:	e0bfeb17 	ldw	r2,-84(fp)
    50e4:	e13ff404 	addi	r4,fp,-48
    50e8:	180b883a 	mov	r5,r3
    50ec:	100d883a 	mov	r6,r2
    50f0:	00002880 	call	288 <PtSet>
            case 3:
            	PtSet(&Pt3, X3, Y3);
    50f4:	e0ffe817 	ldw	r3,-96(fp)
    50f8:	e0bfe917 	ldw	r2,-92(fp)
    50fc:	e13ff204 	addi	r4,fp,-56
    5100:	180b883a 	mov	r5,r3
    5104:	100d883a 	mov	r6,r2
    5108:	00002880 	call	288 <PtSet>
            case 2:
            	PtSet(&Pt2, X2, Y2);
    510c:	e0ffe617 	ldw	r3,-104(fp)
    5110:	e0bfe717 	ldw	r2,-100(fp)
    5114:	e13ff004 	addi	r4,fp,-64
    5118:	180b883a 	mov	r5,r3
    511c:	100d883a 	mov	r6,r2
    5120:	00002880 	call	288 <PtSet>
            case 1:
            	PtSet(&Pt1, X1, Y1); break;
    5124:	e0ffe417 	ldw	r3,-112(fp)
    5128:	e0bfe517 	ldw	r2,-108(fp)
    512c:	e13fee04 	addi	r4,fp,-72
    5130:	180b883a 	mov	r5,r3
    5134:	100d883a 	mov	r6,r2
    5138:	00002880 	call	288 <PtSet>
    513c:	00000106 	br	5144 <GUI+0x320>
            default:break;
    5140:	0001883a 	nop
            }

            if (TouchNum >= 1 && IsPtInRect(&Pt1, &rcTouch)){
    5144:	e0bffa43 	ldbu	r2,-23(fp)
    5148:	10803fcc 	andi	r2,r2,255
    514c:	10006826 	beq	r2,zero,52f0 <GUI+0x4cc>
    5150:	e0ffee04 	addi	r3,fp,-72
    5154:	e0bffb04 	addi	r2,fp,-20
    5158:	1809883a 	mov	r4,r3
    515c:	100b883a 	mov	r5,r2
    5160:	00002040 	call	204 <IsPtInRect>
    5164:	10006226 	beq	r2,zero,52f0 <GUI+0x4cc>
                    }
                }else{
                    printf("invalid pt1(%d,%d) pre(%d,%d)\r\n", Pt1.x, Pt1.y, LastPt1.x, LastPt1.y);
                }
#else
                vid_draw_circle(Pt1.x, Pt1.y, nDotSize, ColorPen0, DO_FILL, pReader);
    5168:	e0ffee17 	ldw	r3,-72(fp)
    516c:	e0bfef17 	ldw	r2,-68(fp)
    5170:	01000044 	movi	r4,1
    5174:	d9000015 	stw	r4,0(sp)
    5178:	e13fa817 	ldw	r4,-352(fp)
    517c:	d9000115 	stw	r4,4(sp)
    5180:	1809883a 	mov	r4,r3
    5184:	100b883a 	mov	r5,r2
    5188:	e1bfa717 	ldw	r6,-356(fp)
    518c:	e1ffa117 	ldw	r7,-380(fp)
    5190:	0001ea00 	call	1ea0 <vid_draw_circle>
                if (TouchNum >= 2 && IsPtInRect(&Pt2, &rcTouch))
    5194:	e0bffa43 	ldbu	r2,-23(fp)
    5198:	10803fcc 	andi	r2,r2,255
    519c:	108000b0 	cmpltui	r2,r2,2
    51a0:	1000111e 	bne	r2,zero,51e8 <GUI+0x3c4>
    51a4:	e0fff004 	addi	r3,fp,-64
    51a8:	e0bffb04 	addi	r2,fp,-20
    51ac:	1809883a 	mov	r4,r3
    51b0:	100b883a 	mov	r5,r2
    51b4:	00002040 	call	204 <IsPtInRect>
    51b8:	10000b26 	beq	r2,zero,51e8 <GUI+0x3c4>
                    vid_draw_circle(Pt2.x, Pt2.y, nDotSize, ColorPen1, DO_FILL, pReader);
    51bc:	e0fff017 	ldw	r3,-64(fp)
    51c0:	e0bff117 	ldw	r2,-60(fp)
    51c4:	01000044 	movi	r4,1
    51c8:	d9000015 	stw	r4,0(sp)
    51cc:	e13fa817 	ldw	r4,-352(fp)
    51d0:	d9000115 	stw	r4,4(sp)
    51d4:	1809883a 	mov	r4,r3
    51d8:	100b883a 	mov	r5,r2
    51dc:	e1bfa717 	ldw	r6,-356(fp)
    51e0:	e1ffa217 	ldw	r7,-376(fp)
    51e4:	0001ea00 	call	1ea0 <vid_draw_circle>
                if (TouchNum >= 3 && IsPtInRect(&Pt3, &rcTouch))
    51e8:	e0bffa43 	ldbu	r2,-23(fp)
    51ec:	10803fcc 	andi	r2,r2,255
    51f0:	108000f0 	cmpltui	r2,r2,3
    51f4:	1000111e 	bne	r2,zero,523c <GUI+0x418>
    51f8:	e0fff204 	addi	r3,fp,-56
    51fc:	e0bffb04 	addi	r2,fp,-20
    5200:	1809883a 	mov	r4,r3
    5204:	100b883a 	mov	r5,r2
    5208:	00002040 	call	204 <IsPtInRect>
    520c:	10000b26 	beq	r2,zero,523c <GUI+0x418>
                    vid_draw_circle(Pt3.x, Pt3.y, nDotSize, ColorPen2, DO_FILL, pReader);
    5210:	e0fff217 	ldw	r3,-56(fp)
    5214:	e0bff317 	ldw	r2,-52(fp)
    5218:	01000044 	movi	r4,1
    521c:	d9000015 	stw	r4,0(sp)
    5220:	e13fa817 	ldw	r4,-352(fp)
    5224:	d9000115 	stw	r4,4(sp)
    5228:	1809883a 	mov	r4,r3
    522c:	100b883a 	mov	r5,r2
    5230:	e1bfa717 	ldw	r6,-356(fp)
    5234:	e1ffa317 	ldw	r7,-372(fp)
    5238:	0001ea00 	call	1ea0 <vid_draw_circle>
                if (TouchNum >= 4 && IsPtInRect(&Pt4, &rcTouch))
    523c:	e0bffa43 	ldbu	r2,-23(fp)
    5240:	10803fcc 	andi	r2,r2,255
    5244:	10800130 	cmpltui	r2,r2,4
    5248:	1000111e 	bne	r2,zero,5290 <GUI+0x46c>
    524c:	e0fff404 	addi	r3,fp,-48
    5250:	e0bffb04 	addi	r2,fp,-20
    5254:	1809883a 	mov	r4,r3
    5258:	100b883a 	mov	r5,r2
    525c:	00002040 	call	204 <IsPtInRect>
    5260:	10000b26 	beq	r2,zero,5290 <GUI+0x46c>
                    vid_draw_circle(Pt4.x, Pt4.y, nDotSize, ColorPen3, DO_FILL, pReader);
    5264:	e0fff417 	ldw	r3,-48(fp)
    5268:	e0bff517 	ldw	r2,-44(fp)
    526c:	01000044 	movi	r4,1
    5270:	d9000015 	stw	r4,0(sp)
    5274:	e13fa817 	ldw	r4,-352(fp)
    5278:	d9000115 	stw	r4,4(sp)
    527c:	1809883a 	mov	r4,r3
    5280:	100b883a 	mov	r5,r2
    5284:	e1bfa717 	ldw	r6,-356(fp)
    5288:	e1ffa417 	ldw	r7,-368(fp)
    528c:	0001ea00 	call	1ea0 <vid_draw_circle>
                if (TouchNum >= 5 && IsPtInRect(&Pt5, &rcTouch))
    5290:	e0bffa43 	ldbu	r2,-23(fp)
    5294:	10803fcc 	andi	r2,r2,255
    5298:	10800170 	cmpltui	r2,r2,5
    529c:	1000111e 	bne	r2,zero,52e4 <GUI+0x4c0>
    52a0:	e0fff604 	addi	r3,fp,-40
    52a4:	e0bffb04 	addi	r2,fp,-20
    52a8:	1809883a 	mov	r4,r3
    52ac:	100b883a 	mov	r5,r2
    52b0:	00002040 	call	204 <IsPtInRect>
    52b4:	10000b26 	beq	r2,zero,52e4 <GUI+0x4c0>
                     vid_draw_circle(Pt5.x, Pt5.y, nDotSize, ColorPen4, DO_FILL, pReader);
    52b8:	e0fff617 	ldw	r3,-40(fp)
    52bc:	e0bff717 	ldw	r2,-36(fp)
    52c0:	01000044 	movi	r4,1
    52c4:	d9000015 	stw	r4,0(sp)
    52c8:	e13fa817 	ldw	r4,-352(fp)
    52cc:	d9000115 	stw	r4,4(sp)
    52d0:	1809883a 	mov	r4,r3
    52d4:	100b883a 	mov	r5,r2
    52d8:	e1bfa717 	ldw	r6,-356(fp)
    52dc:	e1ffa517 	ldw	r7,-364(fp)
    52e0:	0001ea00 	call	1ea0 <vid_draw_circle>
#endif
//            }else if (Event == MTC_ST_DOUBLECLICK || (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR)){
                VIPFR_ActiveDrawFrame(pReader);
    52e4:	e13fa817 	ldw	r4,-352(fp)
    52e8:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
    52ec:	0000f906 	br	56d4 <GUI+0x8b0>
            }else if (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR){
    52f0:	e0bffa43 	ldbu	r2,-23(fp)
    52f4:	10803fcc 	andi	r2,r2,255
    52f8:	10800058 	cmpnei	r2,r2,1
    52fc:	1000101e 	bne	r2,zero,5340 <GUI+0x51c>
    5300:	e0ffae04 	addi	r3,fp,-328
    5304:	e0bfee04 	addi	r2,fp,-72
    5308:	1809883a 	mov	r4,r3
    530c:	100b883a 	mov	r5,r2
    5310:	00043480 	call	4348 <GUI_CheckButton>
    5314:	10800058 	cmpnei	r2,r2,1
    5318:	1000091e 	bne	r2,zero,5340 <GUI+0x51c>
                GUI_ClearPaintArea(pReader, &DeskInfo);
    531c:	e0bfae04 	addi	r2,fp,-328
    5320:	e13fa817 	ldw	r4,-352(fp)
    5324:	100b883a 	mov	r5,r2
    5328:	0004d600 	call	4d60 <GUI_ClearPaintArea>
                //vid_clean_screen(pReader, BLACK_24);
                //GUI_DeskDraw(pReader, &DeskInfo);
                VIPFR_ActiveDrawFrame(pReader);
    532c:	e13fa817 	ldw	r4,-352(fp)
    5330:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
                MTC2_ClearEvent(pTouch);
    5334:	e13fff17 	ldw	r4,-4(fp)
    5338:	00085180 	call	8518 <MTC2_ClearEvent>
    533c:	0000e506 	br	56d4 <GUI+0x8b0>
            }else if (TouchNum >= 1){
    5340:	e0bffa43 	ldbu	r2,-23(fp)
    5344:	10803fcc 	andi	r2,r2,255
    5348:	103f1e26 	beq	r2,zero,4fc4 <GUI+0x1a0>
                ButtonId = GUI_CheckButton(&DeskInfo, &Pt1);
    534c:	e0ffae04 	addi	r3,fp,-328
    5350:	e0bfee04 	addi	r2,fp,-72
    5354:	1809883a 	mov	r4,r3
    5358:	100b883a 	mov	r5,r2
    535c:	00043480 	call	4348 <GUI_CheckButton>
    5360:	e0bfa915 	stw	r2,-348(fp)
                UpdatePalette = FALSE;
    5364:	e03fa615 	stw	zero,-360(fp)
                switch(TouchNum)
    5368:	e0bffa43 	ldbu	r2,-23(fp)
    536c:	10803fcc 	andi	r2,r2,255
    5370:	10c001a8 	cmpgeui	r3,r2,6
    5374:	18009c1e 	bne	r3,zero,55e8 <GUI+0x7c4>
    5378:	1085883a 	add	r2,r2,r2
    537c:	1087883a 	add	r3,r2,r2
    5380:	00800034 	movhi	r2,0
    5384:	1094e504 	addi	r2,r2,21396
    5388:	1885883a 	add	r2,r3,r2
    538c:	10800017 	ldw	r2,0(r2)
    5390:	1000683a 	jmp	r2
    5394:	000055e8 	cmpgeui	zero,zero,343
    5398:	0000556c 	andhi	zero,zero,341
    539c:	000054fc 	xorhi	zero,zero,339
    53a0:	0000548c 	andi	zero,zero,338
    53a4:	0000541c 	xori	zero,zero,336
    53a8:	000053ac 	andhi	zero,zero,334
                {
                	case 5:
					{
						ButtonId5 = GUI_CheckButton(&DeskInfo, &Pt5);
    53ac:	e0ffae04 	addi	r3,fp,-328
    53b0:	e0bff604 	addi	r2,fp,-40
    53b4:	1809883a 	mov	r4,r3
    53b8:	100b883a 	mov	r5,r2
    53bc:	00043480 	call	4348 <GUI_CheckButton>
    53c0:	e0bfaa15 	stw	r2,-344(fp)
						if(ButtonId5 != BTN_NONE && ButtonId5 != BTN_CLEAR && ButtonId5 != BTN_GESTRUE &&ButtonId5 != DeskInfo.Paint0_Index  &&  ButtonId5 != DeskInfo.Paint1_Index&&  ButtonId5 != DeskInfo.Paint2_Index && ButtonId5 != DeskInfo.Paint3_Index)
    53c4:	e0bfaa17 	ldw	r2,-344(fp)
    53c8:	108002a0 	cmpeqi	r2,r2,10
    53cc:	1000131e 	bne	r2,zero,541c <GUI+0x5f8>
    53d0:	e0bfaa17 	ldw	r2,-344(fp)
    53d4:	10800060 	cmpeqi	r2,r2,1
    53d8:	1000101e 	bne	r2,zero,541c <GUI+0x5f8>
    53dc:	e0bfaa17 	ldw	r2,-344(fp)
    53e0:	10000e26 	beq	r2,zero,541c <GUI+0x5f8>
    53e4:	e0ffae17 	ldw	r3,-328(fp)
    53e8:	e0bfaa17 	ldw	r2,-344(fp)
    53ec:	18800b26 	beq	r3,r2,541c <GUI+0x5f8>
    53f0:	e0ffaf17 	ldw	r3,-324(fp)
    53f4:	e0bfaa17 	ldw	r2,-344(fp)
    53f8:	18800826 	beq	r3,r2,541c <GUI+0x5f8>
    53fc:	e0ffb017 	ldw	r3,-320(fp)
    5400:	e0bfaa17 	ldw	r2,-344(fp)
    5404:	18800526 	beq	r3,r2,541c <GUI+0x5f8>
    5408:	e0ffb117 	ldw	r3,-316(fp)
    540c:	e0bfaa17 	ldw	r2,-344(fp)
    5410:	18800226 	beq	r3,r2,541c <GUI+0x5f8>
						DeskInfo.Paint4_Index = ButtonId5;
    5414:	e0bfaa17 	ldw	r2,-344(fp)
    5418:	e0bfb215 	stw	r2,-312(fp)
					}
                	case 4:
                	{
                		ButtonId4 = GUI_CheckButton(&DeskInfo, &Pt4);
    541c:	e0ffae04 	addi	r3,fp,-328
    5420:	e0bff404 	addi	r2,fp,-48
    5424:	1809883a 	mov	r4,r3
    5428:	100b883a 	mov	r5,r2
    542c:	00043480 	call	4348 <GUI_CheckButton>
    5430:	e0bfab15 	stw	r2,-340(fp)
                		if(ButtonId4 != BTN_NONE && ButtonId4 != BTN_CLEAR && ButtonId4 != BTN_GESTRUE &&ButtonId4 != DeskInfo.Paint0_Index  &&  ButtonId4 != DeskInfo.Paint1_Index&&  ButtonId4 != DeskInfo.Paint2_Index && ButtonId4 != DeskInfo.Paint4_Index)
    5434:	e0bfab17 	ldw	r2,-340(fp)
    5438:	108002a0 	cmpeqi	r2,r2,10
    543c:	1000131e 	bne	r2,zero,548c <GUI+0x668>
    5440:	e0bfab17 	ldw	r2,-340(fp)
    5444:	10800060 	cmpeqi	r2,r2,1
    5448:	1000101e 	bne	r2,zero,548c <GUI+0x668>
    544c:	e0bfab17 	ldw	r2,-340(fp)
    5450:	10000e26 	beq	r2,zero,548c <GUI+0x668>
    5454:	e0ffae17 	ldw	r3,-328(fp)
    5458:	e0bfab17 	ldw	r2,-340(fp)
    545c:	18800b26 	beq	r3,r2,548c <GUI+0x668>
    5460:	e0ffaf17 	ldw	r3,-324(fp)
    5464:	e0bfab17 	ldw	r2,-340(fp)
    5468:	18800826 	beq	r3,r2,548c <GUI+0x668>
    546c:	e0ffb017 	ldw	r3,-320(fp)
    5470:	e0bfab17 	ldw	r2,-340(fp)
    5474:	18800526 	beq	r3,r2,548c <GUI+0x668>
    5478:	e0ffb217 	ldw	r3,-312(fp)
    547c:	e0bfab17 	ldw	r2,-340(fp)
    5480:	18800226 	beq	r3,r2,548c <GUI+0x668>
                		DeskInfo.Paint3_Index = ButtonId4;
    5484:	e0bfab17 	ldw	r2,-340(fp)
    5488:	e0bfb115 	stw	r2,-316(fp)
                	}
                	case 3:
                	{
                		ButtonId3 = GUI_CheckButton(&DeskInfo, &Pt3);
    548c:	e0ffae04 	addi	r3,fp,-328
    5490:	e0bff204 	addi	r2,fp,-56
    5494:	1809883a 	mov	r4,r3
    5498:	100b883a 	mov	r5,r2
    549c:	00043480 	call	4348 <GUI_CheckButton>
    54a0:	e0bfac15 	stw	r2,-336(fp)
                		 if(ButtonId3 != BTN_NONE && ButtonId3 != BTN_CLEAR && ButtonId3 != BTN_GESTRUE && ButtonId3 != DeskInfo.Paint4_Index && ButtonId3 != DeskInfo.Paint3_Index &&ButtonId3 != DeskInfo.Paint0_Index  &&  ButtonId3 != DeskInfo.Paint1_Index)
    54a4:	e0bfac17 	ldw	r2,-336(fp)
    54a8:	108002a0 	cmpeqi	r2,r2,10
    54ac:	1000131e 	bne	r2,zero,54fc <GUI+0x6d8>
    54b0:	e0bfac17 	ldw	r2,-336(fp)
    54b4:	10800060 	cmpeqi	r2,r2,1
    54b8:	1000101e 	bne	r2,zero,54fc <GUI+0x6d8>
    54bc:	e0bfac17 	ldw	r2,-336(fp)
    54c0:	10000e26 	beq	r2,zero,54fc <GUI+0x6d8>
    54c4:	e0ffb217 	ldw	r3,-312(fp)
    54c8:	e0bfac17 	ldw	r2,-336(fp)
    54cc:	18800b26 	beq	r3,r2,54fc <GUI+0x6d8>
    54d0:	e0ffb117 	ldw	r3,-316(fp)
    54d4:	e0bfac17 	ldw	r2,-336(fp)
    54d8:	18800826 	beq	r3,r2,54fc <GUI+0x6d8>
    54dc:	e0ffae17 	ldw	r3,-328(fp)
    54e0:	e0bfac17 	ldw	r2,-336(fp)
    54e4:	18800526 	beq	r3,r2,54fc <GUI+0x6d8>
    54e8:	e0ffaf17 	ldw	r3,-324(fp)
    54ec:	e0bfac17 	ldw	r2,-336(fp)
    54f0:	18800226 	beq	r3,r2,54fc <GUI+0x6d8>
                		DeskInfo.Paint2_Index = ButtonId3;
    54f4:	e0bfac17 	ldw	r2,-336(fp)
    54f8:	e0bfb015 	stw	r2,-320(fp)
                	}
                	case 2:
					{
						ButtonId2 = GUI_CheckButton(&DeskInfo, &Pt2);
    54fc:	e0ffae04 	addi	r3,fp,-328
    5500:	e0bff004 	addi	r2,fp,-64
    5504:	1809883a 	mov	r4,r3
    5508:	100b883a 	mov	r5,r2
    550c:	00043480 	call	4348 <GUI_CheckButton>
    5510:	e0bfad15 	stw	r2,-332(fp)
					   if(ButtonId2 != BTN_NONE && ButtonId2 != BTN_CLEAR && ButtonId2 != BTN_GESTRUE && ButtonId2 != DeskInfo.Paint4_Index && ButtonId2 != DeskInfo.Paint3_Index && ButtonId2 != DeskInfo.Paint2_Index &&ButtonId2 != DeskInfo.Paint0_Index )
    5514:	e0bfad17 	ldw	r2,-332(fp)
    5518:	108002a0 	cmpeqi	r2,r2,10
    551c:	1000131e 	bne	r2,zero,556c <GUI+0x748>
    5520:	e0bfad17 	ldw	r2,-332(fp)
    5524:	10800060 	cmpeqi	r2,r2,1
    5528:	1000101e 	bne	r2,zero,556c <GUI+0x748>
    552c:	e0bfad17 	ldw	r2,-332(fp)
    5530:	10000e26 	beq	r2,zero,556c <GUI+0x748>
    5534:	e0ffb217 	ldw	r3,-312(fp)
    5538:	e0bfad17 	ldw	r2,-332(fp)
    553c:	18800b26 	beq	r3,r2,556c <GUI+0x748>
    5540:	e0ffb117 	ldw	r3,-316(fp)
    5544:	e0bfad17 	ldw	r2,-332(fp)
    5548:	18800826 	beq	r3,r2,556c <GUI+0x748>
    554c:	e0ffb017 	ldw	r3,-320(fp)
    5550:	e0bfad17 	ldw	r2,-332(fp)
    5554:	18800526 	beq	r3,r2,556c <GUI+0x748>
    5558:	e0ffae17 	ldw	r3,-328(fp)
    555c:	e0bfad17 	ldw	r2,-332(fp)
    5560:	18800226 	beq	r3,r2,556c <GUI+0x748>
						DeskInfo.Paint1_Index = ButtonId2;
    5564:	e0bfad17 	ldw	r2,-332(fp)
    5568:	e0bfaf15 	stw	r2,-324(fp)
					}
                	case 1:
					{
						ButtonId = GUI_CheckButton(&DeskInfo, &Pt1);
    556c:	e0ffae04 	addi	r3,fp,-328
    5570:	e0bfee04 	addi	r2,fp,-72
    5574:	1809883a 	mov	r4,r3
    5578:	100b883a 	mov	r5,r2
    557c:	00043480 	call	4348 <GUI_CheckButton>
    5580:	e0bfa915 	stw	r2,-348(fp)
						if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR && ButtonId != BTN_GESTRUE && ButtonId != DeskInfo.Paint4_Index && ButtonId != DeskInfo.Paint3_Index && ButtonId != DeskInfo.Paint2_Index && ButtonId != DeskInfo.Paint1_Index)
    5584:	e0bfa917 	ldw	r2,-348(fp)
    5588:	108002a0 	cmpeqi	r2,r2,10
    558c:	1000181e 	bne	r2,zero,55f0 <GUI+0x7cc>
    5590:	e0bfa917 	ldw	r2,-348(fp)
    5594:	10800060 	cmpeqi	r2,r2,1
    5598:	1000151e 	bne	r2,zero,55f0 <GUI+0x7cc>
    559c:	e0bfa917 	ldw	r2,-348(fp)
    55a0:	10001326 	beq	r2,zero,55f0 <GUI+0x7cc>
    55a4:	e0ffb217 	ldw	r3,-312(fp)
    55a8:	e0bfa917 	ldw	r2,-348(fp)
    55ac:	18801026 	beq	r3,r2,55f0 <GUI+0x7cc>
    55b0:	e0ffb117 	ldw	r3,-316(fp)
    55b4:	e0bfa917 	ldw	r2,-348(fp)
    55b8:	18800d26 	beq	r3,r2,55f0 <GUI+0x7cc>
    55bc:	e0ffb017 	ldw	r3,-320(fp)
    55c0:	e0bfa917 	ldw	r2,-348(fp)
    55c4:	18800a26 	beq	r3,r2,55f0 <GUI+0x7cc>
    55c8:	e0ffaf17 	ldw	r3,-324(fp)
    55cc:	e0bfa917 	ldw	r2,-348(fp)
    55d0:	18800726 	beq	r3,r2,55f0 <GUI+0x7cc>
						{
						       UpdatePalette = TRUE;
    55d4:	00800044 	movi	r2,1
    55d8:	e0bfa615 	stw	r2,-360(fp)
						       DeskInfo.Paint0_Index = ButtonId;
    55dc:	e0bfa917 	ldw	r2,-348(fp)
    55e0:	e0bfae15 	stw	r2,-328(fp)
						}
					}break;
    55e4:	00000206 	br	55f0 <GUI+0x7cc>
                	default:break;
    55e8:	0001883a 	nop
    55ec:	00000106 	br	55f4 <GUI+0x7d0>
						if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR && ButtonId != BTN_GESTRUE && ButtonId != DeskInfo.Paint4_Index && ButtonId != DeskInfo.Paint3_Index && ButtonId != DeskInfo.Paint2_Index && ButtonId != DeskInfo.Paint1_Index)
						{
						       UpdatePalette = TRUE;
						       DeskInfo.Paint0_Index = ButtonId;
						}
					}break;
    55f0:	0001883a 	nop
                	default:break;
                }
				if (UpdatePalette){
    55f4:	e0bfa617 	ldw	r2,-360(fp)
    55f8:	103e7226 	beq	r2,zero,4fc4 <GUI+0x1a0>
					ColorPen0 = DeskInfo.szPalette[DeskInfo.Paint0_Index].color;
    55fc:	e0bfae17 	ldw	r2,-328(fp)
    5600:	1009883a 	mov	r4,r2
    5604:	01400504 	movi	r5,20
    5608:	0009dec0 	call	9dec <__mulsi3>
    560c:	e0ffa004 	addi	r3,fp,-384
    5610:	1885883a 	add	r2,r3,r2
    5614:	10801b04 	addi	r2,r2,108
    5618:	10800017 	ldw	r2,0(r2)
    561c:	e0bfa115 	stw	r2,-380(fp)
					ColorPen1 = DeskInfo.szPalette[DeskInfo.Paint1_Index].color;
    5620:	e0bfaf17 	ldw	r2,-324(fp)
    5624:	1009883a 	mov	r4,r2
    5628:	01400504 	movi	r5,20
    562c:	0009dec0 	call	9dec <__mulsi3>
    5630:	e0ffa004 	addi	r3,fp,-384
    5634:	1885883a 	add	r2,r3,r2
    5638:	10801b04 	addi	r2,r2,108
    563c:	10800017 	ldw	r2,0(r2)
    5640:	e0bfa215 	stw	r2,-376(fp)
					ColorPen2 = DeskInfo.szPalette[DeskInfo.Paint2_Index].color;
    5644:	e0bfb017 	ldw	r2,-320(fp)
    5648:	1009883a 	mov	r4,r2
    564c:	01400504 	movi	r5,20
    5650:	0009dec0 	call	9dec <__mulsi3>
    5654:	e0ffa004 	addi	r3,fp,-384
    5658:	1885883a 	add	r2,r3,r2
    565c:	10801b04 	addi	r2,r2,108
    5660:	10800017 	ldw	r2,0(r2)
    5664:	e0bfa315 	stw	r2,-372(fp)
					ColorPen3 = DeskInfo.szPalette[DeskInfo.Paint3_Index].color;
    5668:	e0bfb117 	ldw	r2,-316(fp)
    566c:	1009883a 	mov	r4,r2
    5670:	01400504 	movi	r5,20
    5674:	0009dec0 	call	9dec <__mulsi3>
    5678:	e0ffa004 	addi	r3,fp,-384
    567c:	1885883a 	add	r2,r3,r2
    5680:	10801b04 	addi	r2,r2,108
    5684:	10800017 	ldw	r2,0(r2)
    5688:	e0bfa415 	stw	r2,-368(fp)
					ColorPen4 = DeskInfo.szPalette[DeskInfo.Paint4_Index].color;
    568c:	e0bfb217 	ldw	r2,-312(fp)
    5690:	1009883a 	mov	r4,r2
    5694:	01400504 	movi	r5,20
    5698:	0009dec0 	call	9dec <__mulsi3>
    569c:	e0ffa004 	addi	r3,fp,-384
    56a0:	1885883a 	add	r2,r3,r2
    56a4:	10801b04 	addi	r2,r2,108
    56a8:	10800017 	ldw	r2,0(r2)
    56ac:	e0bfa515 	stw	r2,-364(fp)
					GUI_DeskDraw(pReader, &DeskInfo);
    56b0:	e0bfae04 	addi	r2,fp,-328
    56b4:	e13fa817 	ldw	r4,-352(fp)
    56b8:	100b883a 	mov	r5,r2
    56bc:	00043dc0 	call	43dc <GUI_DeskDraw>
					VIPFR_ActiveDrawFrame(pReader);
    56c0:	e13fa817 	ldw	r4,-352(fp)
    56c4:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
					MTC2_ClearEvent(pTouch);
    56c8:	e13fff17 	ldw	r4,-4(fp)
    56cc:	00085180 	call	8518 <MTC2_ClearEvent>
				}
                }
        }
    }
    56d0:	003e3c06 	br	4fc4 <GUI+0x1a0>
    56d4:	003e3b06 	br	4fc4 <GUI+0x1a0>

000056d8 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(VIP_FRAME_READER *pReader, char *pText){
    56d8:	defff904 	addi	sp,sp,-28
    56dc:	dfc00615 	stw	ra,24(sp)
    56e0:	df000515 	stw	fp,20(sp)
    56e4:	df000504 	addi	fp,sp,20
    56e8:	e13ffe15 	stw	r4,-8(fp)
    56ec:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pReader, pText);
    56f0:	d0ed9a17 	ldw	r3,-18840(gp)
    56f4:	d0a00117 	ldw	r2,-32764(gp)
    56f8:	010001f4 	movhi	r4,7
    56fc:	21118d04 	addi	r4,r4,17972
    5700:	d9000015 	stw	r4,0(sp)
    5704:	e13ffe17 	ldw	r4,-8(fp)
    5708:	d9000115 	stw	r4,4(sp)
    570c:	e13fff17 	ldw	r4,-4(fp)
    5710:	d9000215 	stw	r4,8(sp)
    5714:	1809883a 	mov	r4,r3
    5718:	100b883a 	mov	r5,r2
    571c:	01803fc4 	movi	r6,255
    5720:	000f883a 	mov	r7,zero
    5724:	00034cc0 	call	34cc <vid_print_string_alpha>
    VIPFR_ActiveDrawFrame(pReader);
    5728:	e13ffe17 	ldw	r4,-8(fp)
    572c:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
}
    5730:	e037883a 	mov	sp,fp
    5734:	dfc00117 	ldw	ra,4(sp)
    5738:	df000017 	ldw	fp,0(sp)
    573c:	dec00204 	addi	sp,sp,8
    5740:	f800283a 	ret

00005744 <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(VIP_FRAME_READER *pReader, int X, int Y, int color){
    5744:	defff804 	addi	sp,sp,-32
    5748:	dfc00715 	stw	ra,28(sp)
    574c:	df000615 	stw	fp,24(sp)
    5750:	df000604 	addi	fp,sp,24
    5754:	e13ffc15 	stw	r4,-16(fp)
    5758:	e17ffd15 	stw	r5,-12(fp)
    575c:	e1bffe15 	stw	r6,-8(fp)
    5760:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pReader);
    5764:	00800044 	movi	r2,1
    5768:	d8800015 	stw	r2,0(sp)
    576c:	e0bffc17 	ldw	r2,-16(fp)
    5770:	d8800115 	stw	r2,4(sp)
    5774:	e13ffd17 	ldw	r4,-12(fp)
    5778:	e17ffe17 	ldw	r5,-8(fp)
    577c:	01800284 	movi	r6,10
    5780:	e1ffff17 	ldw	r7,-4(fp)
    5784:	0001ea00 	call	1ea0 <vid_draw_circle>
    VIPFR_ActiveDrawFrame(pReader);    
    5788:	e13ffc17 	ldw	r4,-16(fp)
    578c:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
}
    5790:	e037883a 	mov	sp,fp
    5794:	dfc00117 	ldw	ra,4(sp)
    5798:	df000017 	ldw	fp,0(sp)
    579c:	dec00204 	addi	sp,sp,8
    57a0:	f800283a 	ret

000057a4 <ShowInfo>:
#define FRAME_HEIGHT 480

#define FR_FRAME_0  (SDRAM_BASE + SDRAM_SPAN/2)
#define FR_FRAME_1  (SDRAM_BASE + SDRAM_SPAN/2 + FRAME_WIDTH*FRAME_HEIGHT*4)

void ShowInfo(VIP_FRAME_READER *pReader, char *pText){
    57a4:	defff904 	addi	sp,sp,-28
    57a8:	dfc00615 	stw	ra,24(sp)
    57ac:	df000515 	stw	fp,20(sp)
    57b0:	df000504 	addi	fp,sp,20
    57b4:	e13ffe15 	stw	r4,-8(fp)
    57b8:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pReader, pText);    
    57bc:	008001f4 	movhi	r2,7
    57c0:	10918d04 	addi	r2,r2,17972
    57c4:	d8800015 	stw	r2,0(sp)
    57c8:	e0bffe17 	ldw	r2,-8(fp)
    57cc:	d8800115 	stw	r2,4(sp)
    57d0:	e0bfff17 	ldw	r2,-4(fp)
    57d4:	d8800215 	stw	r2,8(sp)
    57d8:	01000044 	movi	r4,1
    57dc:	01400044 	movi	r5,1
    57e0:	01804034 	movhi	r6,256
    57e4:	31bfffc4 	addi	r6,r6,-1
    57e8:	000f883a 	mov	r7,zero
    57ec:	00034cc0 	call	34cc <vid_print_string_alpha>
}
    57f0:	e037883a 	mov	sp,fp
    57f4:	dfc00117 	ldw	ra,4(sp)
    57f8:	df000017 	ldw	fp,0(sp)
    57fc:	dec00204 	addi	sp,sp,8
    5800:	f800283a 	ret

00005804 <VPG_XLine>:

void VPG_XLine(VIP_FRAME_READER *pReader){
    5804:	defff904 	addi	sp,sp,-28
    5808:	dfc00615 	stw	ra,24(sp)
    580c:	df000515 	stw	fp,20(sp)
    5810:	df000504 	addi	fp,sp,20
    5814:	e13fff15 	stw	r4,-4(fp)
    alt_u32 *p;
    
    p = VIPFR_GetDrawFrame(pReader);
    5818:	e13fff17 	ldw	r4,-4(fp)
    581c:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    5820:	e0bffe15 	stw	r2,-8(fp)

    // erase background
     vid_clean_screen(pReader, BLACK_24);
    5824:	e13fff17 	ldw	r4,-4(fp)
    5828:	000b883a 	mov	r5,zero
    582c:	00006040 	call	604 <vid_clean_screen>
    
    // draw line    
    vid_draw_line(0, 0, FRAME_HEIGHT-1, FRAME_HEIGHT-1, 1, WHITE_24, pReader);
    5830:	00800044 	movi	r2,1
    5834:	d8800015 	stw	r2,0(sp)
    5838:	00804034 	movhi	r2,256
    583c:	10bfffc4 	addi	r2,r2,-1
    5840:	d8800115 	stw	r2,4(sp)
    5844:	e0bfff17 	ldw	r2,-4(fp)
    5848:	d8800215 	stw	r2,8(sp)
    584c:	0009883a 	mov	r4,zero
    5850:	000b883a 	mov	r5,zero
    5854:	018077c4 	movi	r6,479
    5858:	01c077c4 	movi	r7,479
    585c:	00006640 	call	664 <vid_draw_line>
    vid_draw_line(FRAME_HEIGHT-1, 0, 0, FRAME_HEIGHT-1, 1, WHITE_24, pReader);
    5860:	00800044 	movi	r2,1
    5864:	d8800015 	stw	r2,0(sp)
    5868:	00804034 	movhi	r2,256
    586c:	10bfffc4 	addi	r2,r2,-1
    5870:	d8800115 	stw	r2,4(sp)
    5874:	e0bfff17 	ldw	r2,-4(fp)
    5878:	d8800215 	stw	r2,8(sp)
    587c:	010077c4 	movi	r4,479
    5880:	000b883a 	mov	r5,zero
    5884:	000d883a 	mov	r6,zero
    5888:	01c077c4 	movi	r7,479
    588c:	00006640 	call	664 <vid_draw_line>

    // show text
    ShowInfo(pReader, "X Line");
    5890:	e13fff17 	ldw	r4,-4(fp)
    5894:	014001f4 	movhi	r5,7
    5898:	294fb304 	addi	r5,r5,16076
    589c:	00057a40 	call	57a4 <ShowInfo>
    
    //    
    VIPFR_ActiveDrawFrame(pReader);        
    58a0:	e13fff17 	ldw	r4,-4(fp)
    58a4:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
}
    58a8:	e037883a 	mov	sp,fp
    58ac:	dfc00117 	ldw	ra,4(sp)
    58b0:	df000017 	ldw	fp,0(sp)
    58b4:	dec00204 	addi	sp,sp,8
    58b8:	f800283a 	ret

000058bc <VPG_ColorPanel>:

void VPG_ColorPanel(VIP_FRAME_READER *pReader, alt_u32 Color){
    58bc:	defff204 	addi	sp,sp,-56
    58c0:	dfc00d15 	stw	ra,52(sp)
    58c4:	df000c15 	stw	fp,48(sp)
    58c8:	df000c04 	addi	fp,sp,48
    58cc:	e13ffe15 	stw	r4,-8(fp)
    58d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *p;
    int i;
    char szText[32];
    
    
    p = VIPFR_GetDrawFrame(pReader);
    58d4:	e13ffe17 	ldw	r4,-8(fp)
    58d8:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    58dc:	e0bff415 	stw	r2,-48(fp)
    for(i=0;i<FRAME_HEIGHT*FRAME_WIDTH;i++)
    58e0:	e03ff515 	stw	zero,-44(fp)
    58e4:	00000906 	br	590c <VPG_ColorPanel+0x50>
        *p++ = Color;
    58e8:	e0bff417 	ldw	r2,-48(fp)
    58ec:	e0ffff17 	ldw	r3,-4(fp)
    58f0:	10c00015 	stw	r3,0(r2)
    58f4:	e0bff417 	ldw	r2,-48(fp)
    58f8:	10800104 	addi	r2,r2,4
    58fc:	e0bff415 	stw	r2,-48(fp)
    int i;
    char szText[32];
    
    
    p = VIPFR_GetDrawFrame(pReader);
    for(i=0;i<FRAME_HEIGHT*FRAME_WIDTH;i++)
    5900:	e0bff517 	ldw	r2,-44(fp)
    5904:	10800044 	addi	r2,r2,1
    5908:	e0bff515 	stw	r2,-44(fp)
    590c:	e0bff517 	ldw	r2,-44(fp)
    5910:	00c001b4 	movhi	r3,6
    5914:	18f6ffc4 	addi	r3,r3,-9217
    5918:	18bff30e 	bge	r3,r2,58e8 <VPG_ColorPanel+0x2c>
        *p++ = Color;
        
    // show text
    sprintf(szText,"Panel: %08xh", Color);
    591c:	e0bff604 	addi	r2,fp,-40
    5920:	1009883a 	mov	r4,r2
    5924:	014001f4 	movhi	r5,7
    5928:	294fb504 	addi	r5,r5,16084
    592c:	e1bfff17 	ldw	r6,-4(fp)
    5930:	000b0080 	call	b008 <sprintf>
    ShowInfo(pReader, szText);
    5934:	e0bff604 	addi	r2,fp,-40
    5938:	e13ffe17 	ldw	r4,-8(fp)
    593c:	100b883a 	mov	r5,r2
    5940:	00057a40 	call	57a4 <ShowInfo>
        
    VIPFR_ActiveDrawFrame(pReader);        
    5944:	e13ffe17 	ldw	r4,-8(fp)
    5948:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
    
}
    594c:	e037883a 	mov	sp,fp
    5950:	dfc00117 	ldw	ra,4(sp)
    5954:	df000017 	ldw	fp,0(sp)
    5958:	dec00204 	addi	sp,sp,8
    595c:	f800283a 	ret

00005960 <VPG_Grid>:

void VPG_Grid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
    5960:	defff004 	addi	sp,sp,-64
    5964:	dfc00f15 	stw	ra,60(sp)
    5968:	df000e15 	stw	fp,56(sp)
    596c:	df000e04 	addi	fp,sp,56
    5970:	e13ffe15 	stw	r4,-8(fp)
    5974:	2805883a 	mov	r2,r5
    5978:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    597c:	e13ffe17 	ldw	r4,-8(fp)
    5980:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    5984:	e0bff415 	stw	r2,-48(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
    5988:	e03ff315 	stw	zero,-52(fp)
    598c:	00002206 	br	5a18 <VPG_Grid+0xb8>
        for(x=0;x<FRAME_WIDTH;x++){
    5990:	e03ff215 	stw	zero,-56(fp)
    5994:	00001a06 	br	5a00 <VPG_Grid+0xa0>
            if (x%GridSize == 0 || y%GridSize == 0)
    5998:	e0bfff03 	ldbu	r2,-4(fp)
    599c:	e0fff217 	ldw	r3,-56(fp)
    59a0:	1809883a 	mov	r4,r3
    59a4:	100b883a 	mov	r5,r2
    59a8:	0009d800 	call	9d80 <__modsi3>
    59ac:	10000626 	beq	r2,zero,59c8 <VPG_Grid+0x68>
    59b0:	e0bfff03 	ldbu	r2,-4(fp)
    59b4:	e0fff317 	ldw	r3,-52(fp)
    59b8:	1809883a 	mov	r4,r3
    59bc:	100b883a 	mov	r5,r2
    59c0:	0009d800 	call	9d80 <__modsi3>
    59c4:	1000041e 	bne	r2,zero,59d8 <VPG_Grid+0x78>
                Value32 = WHITE_24;
    59c8:	00804034 	movhi	r2,256
    59cc:	10bfffc4 	addi	r2,r2,-1
    59d0:	e0bff515 	stw	r2,-44(fp)
    59d4:	00000106 	br	59dc <VPG_Grid+0x7c>
            else
                Value32 = BLACK_24;
    59d8:	e03ff515 	stw	zero,-44(fp)
            *p++ = Value32;
    59dc:	e0bff417 	ldw	r2,-48(fp)
    59e0:	e0fff517 	ldw	r3,-44(fp)
    59e4:	10c00015 	stw	r3,0(r2)
    59e8:	e0bff417 	ldw	r2,-48(fp)
    59ec:	10800104 	addi	r2,r2,4
    59f0:	e0bff415 	stw	r2,-48(fp)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
    59f4:	e0bff217 	ldw	r2,-56(fp)
    59f8:	10800044 	addi	r2,r2,1
    59fc:	e0bff215 	stw	r2,-56(fp)
    5a00:	e0bff217 	ldw	r2,-56(fp)
    5a04:	1080c810 	cmplti	r2,r2,800
    5a08:	103fe31e 	bne	r2,zero,5998 <VPG_Grid+0x38>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
    5a0c:	e0bff317 	ldw	r2,-52(fp)
    5a10:	10800044 	addi	r2,r2,1
    5a14:	e0bff315 	stw	r2,-52(fp)
    5a18:	e0bff317 	ldw	r2,-52(fp)
    5a1c:	10807810 	cmplti	r2,r2,480
    5a20:	103fdb1e 	bne	r2,zero,5990 <VPG_Grid+0x30>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
    5a24:	e0bfff03 	ldbu	r2,-4(fp)
    5a28:	e0fff604 	addi	r3,fp,-40
    5a2c:	1809883a 	mov	r4,r3
    5a30:	014001f4 	movhi	r5,7
    5a34:	294fb904 	addi	r5,r5,16100
    5a38:	100d883a 	mov	r6,r2
    5a3c:	000b0080 	call	b008 <sprintf>
    ShowInfo(pReader, szText);
    5a40:	e0bff604 	addi	r2,fp,-40
    5a44:	e13ffe17 	ldw	r4,-8(fp)
    5a48:	100b883a 	mov	r5,r2
    5a4c:	00057a40 	call	57a4 <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
    5a50:	e13ffe17 	ldw	r4,-8(fp)
    5a54:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
}
    5a58:	e037883a 	mov	sp,fp
    5a5c:	dfc00117 	ldw	ra,4(sp)
    5a60:	df000017 	ldw	fp,0(sp)
    5a64:	dec00204 	addi	sp,sp,8
    5a68:	f800283a 	ret

00005a6c <VPG_VGrid>:

void VPG_VGrid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
    5a6c:	defff004 	addi	sp,sp,-64
    5a70:	dfc00f15 	stw	ra,60(sp)
    5a74:	df000e15 	stw	fp,56(sp)
    5a78:	df000e04 	addi	fp,sp,56
    5a7c:	e13ffe15 	stw	r4,-8(fp)
    5a80:	2805883a 	mov	r2,r5
    5a84:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    5a88:	e13ffe17 	ldw	r4,-8(fp)
    5a8c:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    5a90:	e0bff415 	stw	r2,-48(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
    5a94:	e03ff315 	stw	zero,-52(fp)
    5a98:	00001c06 	br	5b0c <VPG_VGrid+0xa0>
        for(x=0;x<FRAME_WIDTH;x++){
    5a9c:	e03ff215 	stw	zero,-56(fp)
    5aa0:	00001406 	br	5af4 <VPG_VGrid+0x88>
            if (x%GridSize == 0)
    5aa4:	e0bfff03 	ldbu	r2,-4(fp)
    5aa8:	e0fff217 	ldw	r3,-56(fp)
    5aac:	1809883a 	mov	r4,r3
    5ab0:	100b883a 	mov	r5,r2
    5ab4:	0009d800 	call	9d80 <__modsi3>
    5ab8:	1000041e 	bne	r2,zero,5acc <VPG_VGrid+0x60>
                Value32 = WHITE_24;
    5abc:	00804034 	movhi	r2,256
    5ac0:	10bfffc4 	addi	r2,r2,-1
    5ac4:	e0bff515 	stw	r2,-44(fp)
    5ac8:	00000106 	br	5ad0 <VPG_VGrid+0x64>
            else
                Value32 = BLACK_24;
    5acc:	e03ff515 	stw	zero,-44(fp)
            *p++ = Value32;
    5ad0:	e0bff417 	ldw	r2,-48(fp)
    5ad4:	e0fff517 	ldw	r3,-44(fp)
    5ad8:	10c00015 	stw	r3,0(r2)
    5adc:	e0bff417 	ldw	r2,-48(fp)
    5ae0:	10800104 	addi	r2,r2,4
    5ae4:	e0bff415 	stw	r2,-48(fp)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
    5ae8:	e0bff217 	ldw	r2,-56(fp)
    5aec:	10800044 	addi	r2,r2,1
    5af0:	e0bff215 	stw	r2,-56(fp)
    5af4:	e0bff217 	ldw	r2,-56(fp)
    5af8:	1080c810 	cmplti	r2,r2,800
    5afc:	103fe91e 	bne	r2,zero,5aa4 <VPG_VGrid+0x38>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
    5b00:	e0bff317 	ldw	r2,-52(fp)
    5b04:	10800044 	addi	r2,r2,1
    5b08:	e0bff315 	stw	r2,-52(fp)
    5b0c:	e0bff317 	ldw	r2,-52(fp)
    5b10:	10807810 	cmplti	r2,r2,480
    5b14:	103fe11e 	bne	r2,zero,5a9c <VPG_VGrid+0x30>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
    5b18:	e0bfff03 	ldbu	r2,-4(fp)
    5b1c:	e0fff604 	addi	r3,fp,-40
    5b20:	1809883a 	mov	r4,r3
    5b24:	014001f4 	movhi	r5,7
    5b28:	294fbb04 	addi	r5,r5,16108
    5b2c:	100d883a 	mov	r6,r2
    5b30:	000b0080 	call	b008 <sprintf>
    ShowInfo(pReader, szText);
    5b34:	e0bff604 	addi	r2,fp,-40
    5b38:	e13ffe17 	ldw	r4,-8(fp)
    5b3c:	100b883a 	mov	r5,r2
    5b40:	00057a40 	call	57a4 <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
    5b44:	e13ffe17 	ldw	r4,-8(fp)
    5b48:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
}
    5b4c:	e037883a 	mov	sp,fp
    5b50:	dfc00117 	ldw	ra,4(sp)
    5b54:	df000017 	ldw	fp,0(sp)
    5b58:	dec00204 	addi	sp,sp,8
    5b5c:	f800283a 	ret

00005b60 <VPG_HGrid>:

void VPG_HGrid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
    5b60:	defff004 	addi	sp,sp,-64
    5b64:	dfc00f15 	stw	ra,60(sp)
    5b68:	df000e15 	stw	fp,56(sp)
    5b6c:	df000e04 	addi	fp,sp,56
    5b70:	e13ffe15 	stw	r4,-8(fp)
    5b74:	2805883a 	mov	r2,r5
    5b78:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    5b7c:	e13ffe17 	ldw	r4,-8(fp)
    5b80:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    5b84:	e0bff415 	stw	r2,-48(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
    5b88:	e03ff315 	stw	zero,-52(fp)
    5b8c:	00001c06 	br	5c00 <VPG_HGrid+0xa0>
        for(x=0;x<FRAME_WIDTH;x++){
    5b90:	e03ff215 	stw	zero,-56(fp)
    5b94:	00001406 	br	5be8 <VPG_HGrid+0x88>
            if (y%GridSize == 0)
    5b98:	e0bfff03 	ldbu	r2,-4(fp)
    5b9c:	e0fff317 	ldw	r3,-52(fp)
    5ba0:	1809883a 	mov	r4,r3
    5ba4:	100b883a 	mov	r5,r2
    5ba8:	0009d800 	call	9d80 <__modsi3>
    5bac:	1000041e 	bne	r2,zero,5bc0 <VPG_HGrid+0x60>
                Value32 = WHITE_24;
    5bb0:	00804034 	movhi	r2,256
    5bb4:	10bfffc4 	addi	r2,r2,-1
    5bb8:	e0bff515 	stw	r2,-44(fp)
    5bbc:	00000106 	br	5bc4 <VPG_HGrid+0x64>
            else
                Value32 = BLACK_24;
    5bc0:	e03ff515 	stw	zero,-44(fp)
            *p++ = Value32;
    5bc4:	e0bff417 	ldw	r2,-48(fp)
    5bc8:	e0fff517 	ldw	r3,-44(fp)
    5bcc:	10c00015 	stw	r3,0(r2)
    5bd0:	e0bff417 	ldw	r2,-48(fp)
    5bd4:	10800104 	addi	r2,r2,4
    5bd8:	e0bff415 	stw	r2,-48(fp)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
    5bdc:	e0bff217 	ldw	r2,-56(fp)
    5be0:	10800044 	addi	r2,r2,1
    5be4:	e0bff215 	stw	r2,-56(fp)
    5be8:	e0bff217 	ldw	r2,-56(fp)
    5bec:	1080c810 	cmplti	r2,r2,800
    5bf0:	103fe91e 	bne	r2,zero,5b98 <VPG_HGrid+0x38>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
    5bf4:	e0bff317 	ldw	r2,-52(fp)
    5bf8:	10800044 	addi	r2,r2,1
    5bfc:	e0bff315 	stw	r2,-52(fp)
    5c00:	e0bff317 	ldw	r2,-52(fp)
    5c04:	10807810 	cmplti	r2,r2,480
    5c08:	103fe11e 	bne	r2,zero,5b90 <VPG_HGrid+0x30>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
    5c0c:	e0bfff03 	ldbu	r2,-4(fp)
    5c10:	e0fff604 	addi	r3,fp,-40
    5c14:	1809883a 	mov	r4,r3
    5c18:	014001f4 	movhi	r5,7
    5c1c:	294fbd04 	addi	r5,r5,16116
    5c20:	100d883a 	mov	r6,r2
    5c24:	000b0080 	call	b008 <sprintf>
    ShowInfo(pReader, szText);
    5c28:	e0bff604 	addi	r2,fp,-40
    5c2c:	e13ffe17 	ldw	r4,-8(fp)
    5c30:	100b883a 	mov	r5,r2
    5c34:	00057a40 	call	57a4 <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
    5c38:	e13ffe17 	ldw	r4,-8(fp)
    5c3c:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
}
    5c40:	e037883a 	mov	sp,fp
    5c44:	dfc00117 	ldw	ra,4(sp)
    5c48:	df000017 	ldw	fp,0(sp)
    5c4c:	dec00204 	addi	sp,sp,8
    5c50:	f800283a 	ret

00005c54 <VPG_ColorBar>:




void VPG_ColorBar(VIP_FRAME_READER *pReader){
    5c54:	defff904 	addi	sp,sp,-28
    5c58:	dfc00615 	stw	ra,24(sp)
    5c5c:	df000515 	stw	fp,20(sp)
    5c60:	df000504 	addi	fp,sp,20
    5c64:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    5c68:	e13fff17 	ldw	r4,-4(fp)
    5c6c:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    5c70:	e0bffd15 	stw	r2,-12(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
    5c74:	e03ffc15 	stw	zero,-16(fp)
    5c78:	00004506 	br	5d90 <VPG_ColorBar+0x13c>
        for(x=0;x<FRAME_WIDTH;x++){
    5c7c:	e03ffb15 	stw	zero,-20(fp)
    5c80:	00003d06 	br	5d78 <VPG_ColorBar+0x124>
            if (x == 0 || y == 0 || x == FRAME_WIDTH-1 || y == FRAME_HEIGHT-1){
    5c84:	e0bffb17 	ldw	r2,-20(fp)
    5c88:	10000826 	beq	r2,zero,5cac <VPG_ColorBar+0x58>
    5c8c:	e0bffc17 	ldw	r2,-16(fp)
    5c90:	10000626 	beq	r2,zero,5cac <VPG_ColorBar+0x58>
    5c94:	e0bffb17 	ldw	r2,-20(fp)
    5c98:	1080c7e0 	cmpeqi	r2,r2,799
    5c9c:	1000031e 	bne	r2,zero,5cac <VPG_ColorBar+0x58>
    5ca0:	e0bffc17 	ldw	r2,-16(fp)
    5ca4:	108077d8 	cmpnei	r2,r2,479
    5ca8:	1000041e 	bne	r2,zero,5cbc <VPG_ColorBar+0x68>
                Value32 = WHITE_24;
    5cac:	00804034 	movhi	r2,256
    5cb0:	10bfffc4 	addi	r2,r2,-1
    5cb4:	e0bffe15 	stw	r2,-8(fp)
    5cb8:	00002606 	br	5d54 <VPG_ColorBar+0x100>
            }else if (y < FRAME_HEIGHT/4){
    5cbc:	e0bffc17 	ldw	r2,-16(fp)
    5cc0:	10801e08 	cmpgei	r2,r2,120
    5cc4:	1000041e 	bne	r2,zero,5cd8 <VPG_ColorBar+0x84>
                // red
                Value32 = x & 0xFF;
    5cc8:	e0bffb17 	ldw	r2,-20(fp)
    5ccc:	10803fcc 	andi	r2,r2,255
    5cd0:	e0bffe15 	stw	r2,-8(fp)
    5cd4:	00001f06 	br	5d54 <VPG_ColorBar+0x100>
            }else if (y < FRAME_HEIGHT/2){
    5cd8:	e0bffc17 	ldw	r2,-16(fp)
    5cdc:	10803c08 	cmpgei	r2,r2,240
    5ce0:	1000051e 	bne	r2,zero,5cf8 <VPG_ColorBar+0xa4>
                Value32 = (x & 0xFF) << 8;
    5ce4:	e0bffb17 	ldw	r2,-20(fp)
    5ce8:	1004923a 	slli	r2,r2,8
    5cec:	10bfffcc 	andi	r2,r2,65535
    5cf0:	e0bffe15 	stw	r2,-8(fp)
    5cf4:	00001706 	br	5d54 <VPG_ColorBar+0x100>
            }else if (y < FRAME_HEIGHT*3/4){
    5cf8:	e0bffc17 	ldw	r2,-16(fp)
    5cfc:	10805a08 	cmpgei	r2,r2,360
    5d00:	1000051e 	bne	r2,zero,5d18 <VPG_ColorBar+0xc4>
                Value32 = (x & 0xFF) << 16;
    5d04:	e0bffb17 	ldw	r2,-20(fp)
    5d08:	10803fcc 	andi	r2,r2,255
    5d0c:	1004943a 	slli	r2,r2,16
    5d10:	e0bffe15 	stw	r2,-8(fp)
    5d14:	00000f06 	br	5d54 <VPG_ColorBar+0x100>
            }else{
                Value32 = x & 0xFF;
    5d18:	e0bffb17 	ldw	r2,-20(fp)
    5d1c:	10803fcc 	andi	r2,r2,255
    5d20:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 8;
    5d24:	e0bffb17 	ldw	r2,-20(fp)
    5d28:	1004923a 	slli	r2,r2,8
    5d2c:	10bfffcc 	andi	r2,r2,65535
    5d30:	e0fffe17 	ldw	r3,-8(fp)
    5d34:	1884b03a 	or	r2,r3,r2
    5d38:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 16;
    5d3c:	e0bffb17 	ldw	r2,-20(fp)
    5d40:	10803fcc 	andi	r2,r2,255
    5d44:	1004943a 	slli	r2,r2,16
    5d48:	e0fffe17 	ldw	r3,-8(fp)
    5d4c:	1884b03a 	or	r2,r3,r2
    5d50:	e0bffe15 	stw	r2,-8(fp)
            }
            *p++ = Value32;
    5d54:	e0bffd17 	ldw	r2,-12(fp)
    5d58:	e0fffe17 	ldw	r3,-8(fp)
    5d5c:	10c00015 	stw	r3,0(r2)
    5d60:	e0bffd17 	ldw	r2,-12(fp)
    5d64:	10800104 	addi	r2,r2,4
    5d68:	e0bffd15 	stw	r2,-12(fp)
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
    5d6c:	e0bffb17 	ldw	r2,-20(fp)
    5d70:	10800044 	addi	r2,r2,1
    5d74:	e0bffb15 	stw	r2,-20(fp)
    5d78:	e0bffb17 	ldw	r2,-20(fp)
    5d7c:	1080c810 	cmplti	r2,r2,800
    5d80:	103fc01e 	bne	r2,zero,5c84 <VPG_ColorBar+0x30>
void VPG_ColorBar(VIP_FRAME_READER *pReader){
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
    5d84:	e0bffc17 	ldw	r2,-16(fp)
    5d88:	10800044 	addi	r2,r2,1
    5d8c:	e0bffc15 	stw	r2,-16(fp)
    5d90:	e0bffc17 	ldw	r2,-16(fp)
    5d94:	10807810 	cmplti	r2,r2,480
    5d98:	103fb81e 	bne	r2,zero,5c7c <VPG_ColorBar+0x28>
            *p++ = Value32;
        }            
        
    }
    
    VIPFR_ActiveDrawFrame(pReader);
    5d9c:	e13fff17 	ldw	r4,-4(fp)
    5da0:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
}
    5da4:	e037883a 	mov	sp,fp
    5da8:	dfc00117 	ldw	ra,4(sp)
    5dac:	df000017 	ldw	fp,0(sp)
    5db0:	dec00204 	addi	sp,sp,8
    5db4:	f800283a 	ret

00005db8 <GUI_ShowPAT>:

void GUI_ShowPAT(VIP_FRAME_READER *pReader, int PatId){
    5db8:	defffc04 	addi	sp,sp,-16
    5dbc:	dfc00315 	stw	ra,12(sp)
    5dc0:	df000215 	stw	fp,8(sp)
    5dc4:	df000204 	addi	fp,sp,8
    5dc8:	e13ffe15 	stw	r4,-8(fp)
    5dcc:	e17fff15 	stw	r5,-4(fp)
                switch(PatId){
    5dd0:	e0bfff17 	ldw	r2,-4(fp)
    5dd4:	108003e8 	cmpgeui	r2,r2,15
    5dd8:	1000521e 	bne	r2,zero,5f24 <GUI_ShowPAT+0x16c>
    5ddc:	e0bfff17 	ldw	r2,-4(fp)
    5de0:	1085883a 	add	r2,r2,r2
    5de4:	1087883a 	add	r3,r2,r2
    5de8:	00800034 	movhi	r2,0
    5dec:	10977f04 	addi	r2,r2,24060
    5df0:	1885883a 	add	r2,r3,r2
    5df4:	10800017 	ldw	r2,0(r2)
    5df8:	1000683a 	jmp	r2
    5dfc:	00005e38 	rdprs	zero,zero,376
    5e00:	00005e44 	movi	zero,377
    5e04:	00005e58 	cmpnei	zero,zero,377
    5e08:	00005e68 	cmpgeui	zero,zero,377
    5e0c:	00005e78 	rdprs	zero,zero,377
    5e10:	00005e88 	cmpgei	zero,zero,378
    5e14:	00005e94 	movui	zero,378
    5e18:	00005ea4 	muli	zero,zero,378
    5e1c:	00005eb4 	movhi	zero,378
    5e20:	00005ec4 	movi	zero,379
    5e24:	00005ed4 	movui	zero,379
    5e28:	00005ee4 	muli	zero,zero,379
    5e2c:	00005ef4 	movhi	zero,379
    5e30:	00005f04 	movi	zero,380
    5e34:	00005f14 	movui	zero,380
                    case 0: VPG_ColorBar(pReader); break;
    5e38:	e13ffe17 	ldw	r4,-8(fp)
    5e3c:	0005c540 	call	5c54 <VPG_ColorBar>
    5e40:	00003806 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 1: VPG_ColorPanel(pReader, WHITE_24); break;
    5e44:	e13ffe17 	ldw	r4,-8(fp)
    5e48:	01404034 	movhi	r5,256
    5e4c:	297fffc4 	addi	r5,r5,-1
    5e50:	00058bc0 	call	58bc <VPG_ColorPanel>
    5e54:	00003306 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 2: VPG_ColorPanel(pReader, RED_24); break;
    5e58:	e13ffe17 	ldw	r4,-8(fp)
    5e5c:	01403ff4 	movhi	r5,255
    5e60:	00058bc0 	call	58bc <VPG_ColorPanel>
    5e64:	00002f06 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 3: VPG_ColorPanel(pReader, GREEN_24); break;
    5e68:	e13ffe17 	ldw	r4,-8(fp)
    5e6c:	01600014 	movui	r5,32768
    5e70:	00058bc0 	call	58bc <VPG_ColorPanel>
    5e74:	00002b06 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 4: VPG_ColorPanel(pReader, BLUE_24); break;
    5e78:	e13ffe17 	ldw	r4,-8(fp)
    5e7c:	01403fc4 	movi	r5,255
    5e80:	00058bc0 	call	58bc <VPG_ColorPanel>
    5e84:	00002706 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 5: VPG_XLine(pReader); break;
    5e88:	e13ffe17 	ldw	r4,-8(fp)
    5e8c:	00058040 	call	5804 <VPG_XLine>
    5e90:	00002406 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 6: VPG_VGrid(pReader, 2); break;
    5e94:	e13ffe17 	ldw	r4,-8(fp)
    5e98:	01400084 	movi	r5,2
    5e9c:	0005a6c0 	call	5a6c <VPG_VGrid>
    5ea0:	00002006 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 7: VPG_VGrid(pReader, 4); break;
    5ea4:	e13ffe17 	ldw	r4,-8(fp)
    5ea8:	01400104 	movi	r5,4
    5eac:	0005a6c0 	call	5a6c <VPG_VGrid>
    5eb0:	00001c06 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 8: VPG_VGrid(pReader, 8); break;
    5eb4:	e13ffe17 	ldw	r4,-8(fp)
    5eb8:	01400204 	movi	r5,8
    5ebc:	0005a6c0 	call	5a6c <VPG_VGrid>
    5ec0:	00001806 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 9: VPG_HGrid(pReader, 2); break;
    5ec4:	e13ffe17 	ldw	r4,-8(fp)
    5ec8:	01400084 	movi	r5,2
    5ecc:	0005b600 	call	5b60 <VPG_HGrid>
    5ed0:	00001406 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 10: VPG_HGrid(pReader, 4); break;
    5ed4:	e13ffe17 	ldw	r4,-8(fp)
    5ed8:	01400104 	movi	r5,4
    5edc:	0005b600 	call	5b60 <VPG_HGrid>
    5ee0:	00001006 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 11: VPG_HGrid(pReader, 8); break;
    5ee4:	e13ffe17 	ldw	r4,-8(fp)
    5ee8:	01400204 	movi	r5,8
    5eec:	0005b600 	call	5b60 <VPG_HGrid>
    5ef0:	00000c06 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 12: VPG_Grid(pReader, 2); break;
    5ef4:	e13ffe17 	ldw	r4,-8(fp)
    5ef8:	01400084 	movi	r5,2
    5efc:	00059600 	call	5960 <VPG_Grid>
    5f00:	00000806 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 13: VPG_Grid(pReader, 4); break;
    5f04:	e13ffe17 	ldw	r4,-8(fp)
    5f08:	01400104 	movi	r5,4
    5f0c:	00059600 	call	5960 <VPG_Grid>
    5f10:	00000406 	br	5f24 <GUI_ShowPAT+0x16c>
                    case 14: VPG_Grid(pReader, 8); break;
    5f14:	e13ffe17 	ldw	r4,-8(fp)
    5f18:	01400204 	movi	r5,8
    5f1c:	00059600 	call	5960 <VPG_Grid>
    5f20:	0001883a 	nop
                }
    
}
    5f24:	e037883a 	mov	sp,fp
    5f28:	dfc00117 	ldw	ra,4(sp)
    5f2c:	df000017 	ldw	fp,0(sp)
    5f30:	dec00204 	addi	sp,sp,8
    5f34:	f800283a 	ret

00005f38 <GUI_VPG>:

void GUI_VPG(MTC2_INFO *pTouch){
    5f38:	deffe704 	addi	sp,sp,-100
    5f3c:	dfc01815 	stw	ra,96(sp)
    5f40:	df001715 	stw	fp,92(sp)
    5f44:	df001704 	addi	fp,sp,92
    5f48:	e13fff15 	stw	r4,-4(fp)
    // video
    VIP_FRAME_READER *pReader;
    int X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5;
    alt_u8 Event, TouchNum;    
    alt_u8 PatId = 0;
    5f4c:	e03ff205 	stb	zero,-56(fp)
    /////////////////////////////////////////////
    // frame reader
#ifdef DUAL_FRAME_BUFFER
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
#else    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_0, FRAME_WIDTH, FRAME_HEIGHT);
    5f50:	00807804 	movi	r2,480
    5f54:	d8800015 	stw	r2,0(sp)
    5f58:	01024434 	movhi	r4,2320
    5f5c:	21040004 	addi	r4,r4,4096
    5f60:	01404034 	movhi	r5,256
    5f64:	01804034 	movhi	r6,256
    5f68:	01c0c804 	movi	r7,800
    5f6c:	00087e80 	call	87e8 <VIPFR_Init>
    5f70:	e0bff315 	stw	r2,-52(fp)
#endif // DUAL_FRAME_BUFFER    
    VIPFR_Go(pReader, TRUE);
    5f74:	e13ff317 	ldw	r4,-52(fp)
    5f78:	01400044 	movi	r5,1
    5f7c:	0008a000 	call	8a00 <VIPFR_Go>
    
    
    // clean screen
    vid_clean_screen(pReader, BLACK_24);
    5f80:	e13ff317 	ldw	r4,-52(fp)
    5f84:	000b883a 	mov	r5,zero
    5f88:	00006040 	call	604 <vid_clean_screen>
    
   
    VIPFR_ActiveDrawFrame(pReader);
    5f8c:	e13ff317 	ldw	r4,-52(fp)
    5f90:	0008a800 	call	8a80 <VIPFR_ActiveDrawFrame>
    
    VPG_ColorBar(pReader);
    5f94:	e13ff317 	ldw	r4,-52(fp)
    5f98:	0005c540 	call	5c54 <VPG_ColorBar>

   GUI_ShowPAT(pReader, PatId);    
    5f9c:	e0bff203 	ldbu	r2,-56(fp)
    5fa0:	e13ff317 	ldw	r4,-52(fp)
    5fa4:	100b883a 	mov	r5,r2
    5fa8:	0005db80 	call	5db8 <GUI_ShowPAT>
    5fac:	00000106 	br	5fb4 <GUI_VPG+0x7c>
                GUI_ShowPAT(pReader, PatId);
                usleep(300*1000); // debounce
                MTC2_ClearEvent(pTouch);
            }
        }
    }
    5fb0:	0001883a 	nop
    VPG_ColorBar(pReader);

   GUI_ShowPAT(pReader, PatId);    
    
    while(1){
        if (MTC2_GetStatus(pTouch,&Event, &TouchNum, &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)){
    5fb4:	e17ffe04 	addi	r5,fp,-8
    5fb8:	e0fffe44 	addi	r3,fp,-7
    5fbc:	e0bff404 	addi	r2,fp,-48
    5fc0:	e13ff504 	addi	r4,fp,-44
    5fc4:	d9000015 	stw	r4,0(sp)
    5fc8:	e13ff604 	addi	r4,fp,-40
    5fcc:	d9000115 	stw	r4,4(sp)
    5fd0:	e13ff704 	addi	r4,fp,-36
    5fd4:	d9000215 	stw	r4,8(sp)
    5fd8:	e13ff804 	addi	r4,fp,-32
    5fdc:	d9000315 	stw	r4,12(sp)
    5fe0:	e13ff904 	addi	r4,fp,-28
    5fe4:	d9000415 	stw	r4,16(sp)
    5fe8:	e13ffa04 	addi	r4,fp,-24
    5fec:	d9000515 	stw	r4,20(sp)
    5ff0:	e13ffb04 	addi	r4,fp,-20
    5ff4:	d9000615 	stw	r4,24(sp)
    5ff8:	e13ffc04 	addi	r4,fp,-16
    5ffc:	d9000715 	stw	r4,28(sp)
    6000:	e13ffd04 	addi	r4,fp,-12
    6004:	d9000815 	stw	r4,32(sp)
    6008:	e13fff17 	ldw	r4,-4(fp)
    600c:	180d883a 	mov	r6,r3
    6010:	100f883a 	mov	r7,r2
    6014:	00083b80 	call	83b8 <MTC2_GetStatus>
    6018:	103fe526 	beq	r2,zero,5fb0 <GUI_VPG+0x78>
           // printf(".");
            //
            if (TouchNum > 0){
    601c:	e0bffe43 	ldbu	r2,-7(fp)
    6020:	10803fcc 	andi	r2,r2,255
    6024:	103fe226 	beq	r2,zero,5fb0 <GUI_VPG+0x78>
                // change patter
                PatId++;
    6028:	e0bff203 	ldbu	r2,-56(fp)
    602c:	10800044 	addi	r2,r2,1
    6030:	e0bff205 	stb	r2,-56(fp)
                if (PatId > 14)
    6034:	e0bff203 	ldbu	r2,-56(fp)
    6038:	108003f0 	cmpltui	r2,r2,15
    603c:	1000011e 	bne	r2,zero,6044 <GUI_VPG+0x10c>
                    PatId = 0;
    6040:	e03ff205 	stb	zero,-56(fp)
                GUI_ShowPAT(pReader, PatId);
    6044:	e0bff203 	ldbu	r2,-56(fp)
    6048:	e13ff317 	ldw	r4,-52(fp)
    604c:	100b883a 	mov	r5,r2
    6050:	0005db80 	call	5db8 <GUI_ShowPAT>
                usleep(300*1000); // debounce
    6054:	01000174 	movhi	r4,5
    6058:	2124f804 	addi	r4,r4,-27680
    605c:	0013bac0 	call	13bac <usleep>
                MTC2_ClearEvent(pTouch);
    6060:	e13fff17 	ldw	r4,-4(fp)
    6064:	00085180 	call	8518 <MTC2_ClearEvent>
            }
        }
    }
    6068:	003fd106 	br	5fb0 <GUI_VPG+0x78>

0000606c <main>:
#include "gui.h"
#include "system.h"


int main()
{
    606c:	defffc04 	addi	sp,sp,-16
    6070:	dfc00315 	stw	ra,12(sp)
    6074:	df000215 	stw	fp,8(sp)
    6078:	df000204 	addi	fp,sp,8

    // touch
    MTC2_INFO *pTouch;
    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
    607c:	00820034 	movhi	r2,2048
    6080:	10800804 	addi	r2,r2,32
    6084:	10800037 	ldwio	r2,0(r2)
    6088:	1080004c 	andi	r2,r2,1
    608c:	1005003a 	cmpeq	r2,r2,zero
    6090:	10803fcc 	andi	r2,r2,255
    6094:	e0bffe15 	stw	r2,-8(fp)
    IOWR(LED_BASE, 0x00, 0xFF); // high-active
    6098:	00c03fc4 	movi	r3,255
    609c:	00820034 	movhi	r2,2048
    60a0:	10801004 	addi	r2,r2,64
    60a4:	10c00035 	stwio	r3,0(r2)
//    if (LCD_Open()){
//        LCD_TextOut(bVPG?"Multi-Touch\nPattern\n" : "Multi-Touch\nPainter\n");
//    }
    printf("Terasic Painter Demo\r\n");
    60a8:	010001f4 	movhi	r4,7
    60ac:	210fbf04 	addi	r4,r4,16124
    60b0:	000af380 	call	af38 <puts>

    oc_i2c_init(I2C_OPENCORES_0_BASE);
    60b4:	01024434 	movhi	r4,2320
    60b8:	21042004 	addi	r4,r4,4224
    60bc:	000730c0 	call	730c <oc_i2c_init>

    usleep(1000);
    60c0:	0100fa04 	movi	r4,1000
    60c4:	0013bac0 	call	13bac <usleep>

    pTouch=MTC2_Init(I2C_OPENCORES_0_BASE,LCD_TOUCH_INT_BASE,LCD_TOUCH_INT_IRQ);
    60c8:	01024434 	movhi	r4,2320
    60cc:	21042004 	addi	r4,r4,4224
    60d0:	01424434 	movhi	r5,2320
    60d4:	29443404 	addi	r5,r5,4304
    60d8:	01800144 	movi	r6,5
    60dc:	000827c0 	call	827c <MTC2_Init>
    60e0:	e0bfff15 	stw	r2,-4(fp)
    if (!pTouch){
    60e4:	e0bfff17 	ldw	r2,-4(fp)
    60e8:	1000041e 	bne	r2,zero,60fc <main+0x90>
        printf("Failed to init multi-touch\r\n");
    60ec:	010001f4 	movhi	r4,7
    60f0:	210fc504 	addi	r4,r4,16148
    60f4:	000af380 	call	af38 <puts>
    60f8:	00000306 	br	6108 <main+0x9c>
    }else{
        printf("Init touch successfully\r\n");
    60fc:	010001f4 	movhi	r4,7
    6100:	210fcc04 	addi	r4,r4,16176
    6104:	000af380 	call	af38 <puts>

    }
   if (bVPG)
    6108:	e0bffe17 	ldw	r2,-8(fp)
    610c:	10000226 	beq	r2,zero,6118 <main+0xac>
       GUI_VPG(pTouch); // enter vpg mode when users press KEY0
    6110:	e13fff17 	ldw	r4,-4(fp)
    6114:	0005f380 	call	5f38 <GUI_VPG>
       GUI(pTouch);
    6118:	e13fff17 	ldw	r4,-4(fp)
    611c:	0004e240 	call	4e24 <GUI>
  return 0;
    6120:	0005883a 	mov	r2,zero
}
    6124:	e037883a 	mov	sp,fp
    6128:	dfc00117 	ldw	ra,4(sp)
    612c:	df000017 	ldw	fp,0(sp)
    6130:	dec00204 	addi	sp,sp,8
    6134:	f800283a 	ret

00006138 <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
    6138:	defffd04 	addi	sp,sp,-12
    613c:	df000215 	stw	fp,8(sp)
    6140:	df000204 	addi	fp,sp,8
    6144:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
    6148:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
    614c:	00000306 	br	615c <my_wait+0x24>
        i++;
    6150:	e0bffe17 	ldw	r2,-8(fp)
    6154:	10800044 	addi	r2,r2,1
    6158:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
    615c:	e0fffe17 	ldw	r3,-8(fp)
    6160:	e0bfff17 	ldw	r2,-4(fp)
    6164:	18bffa16 	blt	r3,r2,6150 <my_wait+0x18>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
    6168:	e037883a 	mov	sp,fp
    616c:	df000017 	ldw	fp,0(sp)
    6170:	dec00104 	addi	sp,sp,4
    6174:	f800283a 	ret

00006178 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
    6178:	defff804 	addi	sp,sp,-32
    617c:	dfc00715 	stw	ra,28(sp)
    6180:	df000615 	stw	fp,24(sp)
    6184:	df000604 	addi	fp,sp,24
    6188:	e13ffb15 	stw	r4,-20(fp)
    618c:	e17ffc15 	stw	r5,-16(fp)
    6190:	3007883a 	mov	r3,r6
    6194:	3805883a 	mov	r2,r7
    6198:	e1000217 	ldw	r4,8(fp)
    619c:	e0fffd05 	stb	r3,-12(fp)
    61a0:	e0bffe05 	stb	r2,-8(fp)
    61a4:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
    61a8:	00800044 	movi	r2,1
    61ac:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
    61b0:	e13ffb17 	ldw	r4,-20(fp)
    61b4:	e17ffc17 	ldw	r5,-16(fp)
    61b8:	00067c00 	call	67c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    61bc:	e0bffd03 	ldbu	r2,-12(fp)
    61c0:	10803fcc 	andi	r2,r2,255
    61c4:	e13ffb17 	ldw	r4,-20(fp)
    61c8:	e17ffc17 	ldw	r5,-16(fp)
    61cc:	100d883a 	mov	r6,r2
    61d0:	00068bc0 	call	68bc <i2c_write>
    61d4:	1000041e 	bne	r2,zero,61e8 <I2C_Write+0x70>
        bSuccess = FALSE;
    61d8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    61dc:	010001f4 	movhi	r4,7
    61e0:	210fd304 	addi	r4,r4,16204
    61e4:	0007d280 	call	7d28 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
    61e8:	e0bffa17 	ldw	r2,-24(fp)
    61ec:	10000a26 	beq	r2,zero,6218 <I2C_Write+0xa0>
    61f0:	e0bffe03 	ldbu	r2,-8(fp)
    61f4:	e13ffb17 	ldw	r4,-20(fp)
    61f8:	e17ffc17 	ldw	r5,-16(fp)
    61fc:	100d883a 	mov	r6,r2
    6200:	00068bc0 	call	68bc <i2c_write>
    6204:	1000041e 	bne	r2,zero,6218 <I2C_Write+0xa0>
        bSuccess = FALSE;
    6208:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    620c:	010001f4 	movhi	r4,7
    6210:	210fdb04 	addi	r4,r4,16236
    6214:	0007d280 	call	7d28 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
    6218:	e0bffa17 	ldw	r2,-24(fp)
    621c:	10000a26 	beq	r2,zero,6248 <I2C_Write+0xd0>
    6220:	e0bfff03 	ldbu	r2,-4(fp)
    6224:	e13ffb17 	ldw	r4,-20(fp)
    6228:	e17ffc17 	ldw	r5,-16(fp)
    622c:	100d883a 	mov	r6,r2
    6230:	00068bc0 	call	68bc <i2c_write>
    6234:	1000041e 	bne	r2,zero,6248 <I2C_Write+0xd0>
        bSuccess = FALSE;
    6238:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    623c:	010001f4 	movhi	r4,7
    6240:	210fe404 	addi	r4,r4,16272
    6244:	0007d280 	call	7d28 <myprintf>
    }
    i2c_stop(clk_base, data_base);
    6248:	e13ffb17 	ldw	r4,-20(fp)
    624c:	e17ffc17 	ldw	r5,-16(fp)
    6250:	00068440 	call	6844 <i2c_stop>
    
    usleep(7*100); // delay to wait EE2 ready (at least 5 ms delay is required)
    6254:	0100af04 	movi	r4,700
    6258:	0013bac0 	call	13bac <usleep>
    
    return bSuccess;
    625c:	e0bffa17 	ldw	r2,-24(fp)

    
}
    6260:	e037883a 	mov	sp,fp
    6264:	dfc00117 	ldw	ra,4(sp)
    6268:	df000017 	ldw	fp,0(sp)
    626c:	dec00204 	addi	sp,sp,8
    6270:	f800283a 	ret

00006274 <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
    6274:	defff704 	addi	sp,sp,-36
    6278:	dfc00815 	stw	ra,32(sp)
    627c:	df000715 	stw	fp,28(sp)
    6280:	df000704 	addi	fp,sp,28
    6284:	e13ffb15 	stw	r4,-20(fp)
    6288:	e17ffc15 	stw	r5,-16(fp)
    628c:	3007883a 	mov	r3,r6
    6290:	3805883a 	mov	r2,r7
    6294:	e1000217 	ldw	r4,8(fp)
    6298:	e0fffd05 	stb	r3,-12(fp)
    629c:	e0bffe05 	stb	r2,-8(fp)
    62a0:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
    62a4:	00800044 	movi	r2,1
    62a8:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
    62ac:	e0bfff0b 	ldhu	r2,-4(fp)
    62b0:	1004d23a 	srli	r2,r2,8
    62b4:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
    62b8:	e0bfff0b 	ldhu	r2,-4(fp)
    62bc:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
    62c0:	e13ffb17 	ldw	r4,-20(fp)
    62c4:	e17ffc17 	ldw	r5,-16(fp)
    62c8:	00067c00 	call	67c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    62cc:	e0bffd03 	ldbu	r2,-12(fp)
    62d0:	10803fcc 	andi	r2,r2,255
    62d4:	e13ffb17 	ldw	r4,-20(fp)
    62d8:	e17ffc17 	ldw	r5,-16(fp)
    62dc:	100d883a 	mov	r6,r2
    62e0:	00068bc0 	call	68bc <i2c_write>
    62e4:	1000041e 	bne	r2,zero,62f8 <I2C_Write16+0x84>
        bSuccess = FALSE;
    62e8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    62ec:	010001f4 	movhi	r4,7
    62f0:	210fd304 	addi	r4,r4,16204
    62f4:	0007d280 	call	7d28 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
    62f8:	e0bff917 	ldw	r2,-28(fp)
    62fc:	10000a26 	beq	r2,zero,6328 <I2C_Write16+0xb4>
    6300:	e0bffe03 	ldbu	r2,-8(fp)
    6304:	e13ffb17 	ldw	r4,-20(fp)
    6308:	e17ffc17 	ldw	r5,-16(fp)
    630c:	100d883a 	mov	r6,r2
    6310:	00068bc0 	call	68bc <i2c_write>
    6314:	1000041e 	bne	r2,zero,6328 <I2C_Write16+0xb4>
        bSuccess = FALSE;
    6318:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    631c:	010001f4 	movhi	r4,7
    6320:	210fdb04 	addi	r4,r4,16236
    6324:	0007d280 	call	7d28 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
    6328:	e0bff917 	ldw	r2,-28(fp)
    632c:	10000a26 	beq	r2,zero,6358 <I2C_Write16+0xe4>
    6330:	e0bffa03 	ldbu	r2,-24(fp)
    6334:	e13ffb17 	ldw	r4,-20(fp)
    6338:	e17ffc17 	ldw	r5,-16(fp)
    633c:	100d883a 	mov	r6,r2
    6340:	00068bc0 	call	68bc <i2c_write>
    6344:	1000041e 	bne	r2,zero,6358 <I2C_Write16+0xe4>
        bSuccess = FALSE;
    6348:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    634c:	010001f4 	movhi	r4,7
    6350:	210fe404 	addi	r4,r4,16272
    6354:	0007d280 	call	7d28 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
    6358:	e0bff917 	ldw	r2,-28(fp)
    635c:	10000a26 	beq	r2,zero,6388 <I2C_Write16+0x114>
    6360:	e0bffa43 	ldbu	r2,-23(fp)
    6364:	e13ffb17 	ldw	r4,-20(fp)
    6368:	e17ffc17 	ldw	r5,-16(fp)
    636c:	100d883a 	mov	r6,r2
    6370:	00068bc0 	call	68bc <i2c_write>
    6374:	1000041e 	bne	r2,zero,6388 <I2C_Write16+0x114>
        bSuccess = FALSE;
    6378:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    637c:	010001f4 	movhi	r4,7
    6380:	210fe404 	addi	r4,r4,16272
    6384:	0007d280 	call	7d28 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
    6388:	e13ffb17 	ldw	r4,-20(fp)
    638c:	e17ffc17 	ldw	r5,-16(fp)
    6390:	00068440 	call	6844 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
    6394:	0106d604 	movi	r4,7000
    6398:	0013bac0 	call	13bac <usleep>
    
    return bSuccess;
    639c:	e0bff917 	ldw	r2,-28(fp)
}
    63a0:	e037883a 	mov	sp,fp
    63a4:	dfc00117 	ldw	ra,4(sp)
    63a8:	df000017 	ldw	fp,0(sp)
    63ac:	dec00204 	addi	sp,sp,8
    63b0:	f800283a 	ret

000063b4 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
    63b4:	defff904 	addi	sp,sp,-28
    63b8:	dfc00615 	stw	ra,24(sp)
    63bc:	df000515 	stw	fp,20(sp)
    63c0:	df000504 	addi	fp,sp,20
    63c4:	e13ffc15 	stw	r4,-16(fp)
    63c8:	e17ffd15 	stw	r5,-12(fp)
    63cc:	3007883a 	mov	r3,r6
    63d0:	3805883a 	mov	r2,r7
    63d4:	e0fffe05 	stb	r3,-8(fp)
    63d8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
    63dc:	00800044 	movi	r2,1
    63e0:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    63e4:	e0bffe03 	ldbu	r2,-8(fp)
    63e8:	10803fcc 	andi	r2,r2,255
    63ec:	e13ffc17 	ldw	r4,-16(fp)
    63f0:	e17ffd17 	ldw	r5,-12(fp)
    63f4:	100d883a 	mov	r6,r2
    63f8:	00068bc0 	call	68bc <i2c_write>
    63fc:	1000041e 	bne	r2,zero,6410 <I2C_Read+0x5c>
        bSuccess = FALSE;
    6400:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
    6404:	010001f4 	movhi	r4,7
    6408:	210fec04 	addi	r4,r4,16304
    640c:	0007d280 	call	7d28 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
    6410:	e0bffb17 	ldw	r2,-20(fp)
    6414:	10000a26 	beq	r2,zero,6440 <I2C_Read+0x8c>
    6418:	e0bfff03 	ldbu	r2,-4(fp)
    641c:	e13ffc17 	ldw	r4,-16(fp)
    6420:	e17ffd17 	ldw	r5,-12(fp)
    6424:	100d883a 	mov	r6,r2
    6428:	00068bc0 	call	68bc <i2c_write>
    642c:	1000041e 	bne	r2,zero,6440 <I2C_Read+0x8c>
        bSuccess = FALSE;
    6430:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
    6434:	010001f4 	movhi	r4,7
    6438:	210ff504 	addi	r4,r4,16340
    643c:	0007d280 	call	7d28 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
    6440:	e13ffc17 	ldw	r4,-16(fp)
    6444:	e17ffd17 	ldw	r5,-12(fp)
    6448:	00067c00 	call	67c0 <i2c_start>
    DeviceAddr |= 1; // Read
    644c:	e0bffe03 	ldbu	r2,-8(fp)
    6450:	10800054 	ori	r2,r2,1
    6454:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
    6458:	e0bffb17 	ldw	r2,-20(fp)
    645c:	10000b26 	beq	r2,zero,648c <I2C_Read+0xd8>
    6460:	e0bffe03 	ldbu	r2,-8(fp)
    6464:	10803fcc 	andi	r2,r2,255
    6468:	e13ffc17 	ldw	r4,-16(fp)
    646c:	e17ffd17 	ldw	r5,-12(fp)
    6470:	100d883a 	mov	r6,r2
    6474:	00068bc0 	call	68bc <i2c_write>
    6478:	1000041e 	bne	r2,zero,648c <I2C_Read+0xd8>
        bSuccess = FALSE;
    647c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
    6480:	010001f4 	movhi	r4,7
    6484:	210ffe04 	addi	r4,r4,16376
    6488:	0007d280 	call	7d28 <myprintf>
    }
    
    if (bSuccess){
    648c:	e0bffb17 	ldw	r2,-20(fp)
    6490:	10000526 	beq	r2,zero,64a8 <I2C_Read+0xf4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
    6494:	e13ffc17 	ldw	r4,-16(fp)
    6498:	e17ffd17 	ldw	r5,-12(fp)
    649c:	e1800217 	ldw	r6,8(fp)
    64a0:	000f883a 	mov	r7,zero
    64a4:	0006a000 	call	6a00 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
    64a8:	e13ffc17 	ldw	r4,-16(fp)
    64ac:	e17ffd17 	ldw	r5,-12(fp)
    64b0:	00068440 	call	6844 <i2c_stop>
    
    return bSuccess;
    64b4:	e0bffb17 	ldw	r2,-20(fp)
}
    64b8:	e037883a 	mov	sp,fp
    64bc:	dfc00117 	ldw	ra,4(sp)
    64c0:	df000017 	ldw	fp,0(sp)
    64c4:	dec00204 	addi	sp,sp,8
    64c8:	f800283a 	ret

000064cc <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
    64cc:	defff804 	addi	sp,sp,-32
    64d0:	dfc00715 	stw	ra,28(sp)
    64d4:	df000615 	stw	fp,24(sp)
    64d8:	df000604 	addi	fp,sp,24
    64dc:	e13ffc15 	stw	r4,-16(fp)
    64e0:	e17ffd15 	stw	r5,-12(fp)
    64e4:	3007883a 	mov	r3,r6
    64e8:	3805883a 	mov	r2,r7
    64ec:	e0fffe05 	stb	r3,-8(fp)
    64f0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
    64f4:	00800044 	movi	r2,1
    64f8:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 LowByte, HighByte;
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
    64fc:	e13ffc17 	ldw	r4,-16(fp)
    6500:	e17ffd17 	ldw	r5,-12(fp)
    6504:	00067c00 	call	67c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    6508:	e0bffe03 	ldbu	r2,-8(fp)
    650c:	10803fcc 	andi	r2,r2,255
    6510:	e13ffc17 	ldw	r4,-16(fp)
    6514:	e17ffd17 	ldw	r5,-12(fp)
    6518:	100d883a 	mov	r6,r2
    651c:	00068bc0 	call	68bc <i2c_write>
    6520:	1000041e 	bne	r2,zero,6534 <I2C_Read16+0x68>
        bSuccess = FALSE;
    6524:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    6528:	010001f4 	movhi	r4,7
    652c:	210fd304 	addi	r4,r4,16204
    6530:	0007d280 	call	7d28 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
    6534:	e0bffa17 	ldw	r2,-24(fp)
    6538:	10000a26 	beq	r2,zero,6564 <I2C_Read16+0x98>
    653c:	e0bfff03 	ldbu	r2,-4(fp)
    6540:	e13ffc17 	ldw	r4,-16(fp)
    6544:	e17ffd17 	ldw	r5,-12(fp)
    6548:	100d883a 	mov	r6,r2
    654c:	00068bc0 	call	68bc <i2c_write>
    6550:	1000041e 	bne	r2,zero,6564 <I2C_Read16+0x98>
        bSuccess = FALSE;
    6554:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    6558:	010001f4 	movhi	r4,7
    655c:	210fdb04 	addi	r4,r4,16236
    6560:	0007d280 	call	7d28 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
    6564:	e13ffc17 	ldw	r4,-16(fp)
    6568:	e17ffd17 	ldw	r5,-12(fp)
    656c:	00067c00 	call	67c0 <i2c_start>
    DeviceAddr |= 1; // Read
    6570:	e0bffe03 	ldbu	r2,-8(fp)
    6574:	10800054 	ori	r2,r2,1
    6578:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
    657c:	e0bffa17 	ldw	r2,-24(fp)
    6580:	10000b26 	beq	r2,zero,65b0 <I2C_Read16+0xe4>
    6584:	e0bffe03 	ldbu	r2,-8(fp)
    6588:	10803fcc 	andi	r2,r2,255
    658c:	e13ffc17 	ldw	r4,-16(fp)
    6590:	e17ffd17 	ldw	r5,-12(fp)
    6594:	100d883a 	mov	r6,r2
    6598:	00068bc0 	call	68bc <i2c_write>
    659c:	1000041e 	bne	r2,zero,65b0 <I2C_Read16+0xe4>
        bSuccess = FALSE;
    65a0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    65a4:	010001f4 	movhi	r4,7
    65a8:	21100704 	addi	r4,r4,16412
    65ac:	0007d280 	call	7d28 <myprintf>
    }
    
    if (bSuccess){
    65b0:	e0bffa17 	ldw	r2,-24(fp)
    65b4:	10000626 	beq	r2,zero,65d0 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
    65b8:	e0bffb44 	addi	r2,fp,-19
    65bc:	e13ffc17 	ldw	r4,-16(fp)
    65c0:	e17ffd17 	ldw	r5,-12(fp)
    65c4:	100d883a 	mov	r6,r2
    65c8:	01c00044 	movi	r7,1
    65cc:	0006a000 	call	6a00 <i2c_read>
    }        
    if (bSuccess){
    65d0:	e0bffa17 	ldw	r2,-24(fp)
    65d4:	10000626 	beq	r2,zero,65f0 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
    65d8:	e0bffb04 	addi	r2,fp,-20
    65dc:	e13ffc17 	ldw	r4,-16(fp)
    65e0:	e17ffd17 	ldw	r5,-12(fp)
    65e4:	100d883a 	mov	r6,r2
    65e8:	000f883a 	mov	r7,zero
    65ec:	0006a000 	call	6a00 <i2c_read>
    }        
    if (bSuccess)
    65f0:	e0bffa17 	ldw	r2,-24(fp)
    65f4:	10000a26 	beq	r2,zero,6620 <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
    65f8:	e0bffb43 	ldbu	r2,-19(fp)
    65fc:	10803fcc 	andi	r2,r2,255
    6600:	1004923a 	slli	r2,r2,8
    6604:	1007883a 	mov	r3,r2
    6608:	e0bffb03 	ldbu	r2,-20(fp)
    660c:	10803fcc 	andi	r2,r2,255
    6610:	1884b03a 	or	r2,r3,r2
    6614:	1007883a 	mov	r3,r2
    6618:	e0800217 	ldw	r2,8(fp)
    661c:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
    6620:	e13ffc17 	ldw	r4,-16(fp)
    6624:	e17ffd17 	ldw	r5,-12(fp)
    6628:	00068440 	call	6844 <i2c_stop>
    return bSuccess;
    662c:	e0bffa17 	ldw	r2,-24(fp)
}
    6630:	e037883a 	mov	sp,fp
    6634:	dfc00117 	ldw	ra,4(sp)
    6638:	df000017 	ldw	fp,0(sp)
    663c:	dec00204 	addi	sp,sp,8
    6640:	f800283a 	ret

00006644 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
    6644:	defff704 	addi	sp,sp,-36
    6648:	dfc00815 	stw	ra,32(sp)
    664c:	df000715 	stw	fp,28(sp)
    6650:	df000704 	addi	fp,sp,28
    6654:	e13ffb15 	stw	r4,-20(fp)
    6658:	e17ffc15 	stw	r5,-16(fp)
    665c:	3007883a 	mov	r3,r6
    6660:	3805883a 	mov	r2,r7
    6664:	e1000317 	ldw	r4,12(fp)
    6668:	e0fffd05 	stb	r3,-12(fp)
    666c:	e0bffe05 	stb	r2,-8(fp)
    6670:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
    6674:	00800044 	movi	r2,1
    6678:	e0bffa15 	stw	r2,-24(fp)
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
    667c:	e13ffb17 	ldw	r4,-20(fp)
    6680:	e17ffc17 	ldw	r5,-16(fp)
    6684:	00067c00 	call	67c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    6688:	e0bffd03 	ldbu	r2,-12(fp)
    668c:	10803fcc 	andi	r2,r2,255
    6690:	e13ffb17 	ldw	r4,-20(fp)
    6694:	e17ffc17 	ldw	r5,-16(fp)
    6698:	100d883a 	mov	r6,r2
    669c:	00068bc0 	call	68bc <i2c_write>
    66a0:	1000041e 	bne	r2,zero,66b4 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
    66a4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
    66a8:	010001f4 	movhi	r4,7
    66ac:	21101004 	addi	r4,r4,16448
    66b0:	0007d280 	call	7d28 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
    66b4:	e0bffa17 	ldw	r2,-24(fp)
    66b8:	10000a26 	beq	r2,zero,66e4 <I2C_MultipleRead+0xa0>
    66bc:	e0bffe03 	ldbu	r2,-8(fp)
    66c0:	e13ffb17 	ldw	r4,-20(fp)
    66c4:	e17ffc17 	ldw	r5,-16(fp)
    66c8:	100d883a 	mov	r6,r2
    66cc:	00068bc0 	call	68bc <i2c_write>
    66d0:	1000041e 	bne	r2,zero,66e4 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
    66d4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
    66d8:	010001f4 	movhi	r4,7
    66dc:	21101b04 	addi	r4,r4,16492
    66e0:	0007d280 	call	7d28 <myprintf>
    }    
    if (bSuccess)        
    66e4:	e0bffa17 	ldw	r2,-24(fp)
    66e8:	10000326 	beq	r2,zero,66f8 <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
    66ec:	e13ffb17 	ldw	r4,-20(fp)
    66f0:	e17ffc17 	ldw	r5,-16(fp)
    66f4:	00067c00 	call	67c0 <i2c_start>
    DeviceAddr |= 1; // Read
    66f8:	e0bffd03 	ldbu	r2,-12(fp)
    66fc:	10800054 	ori	r2,r2,1
    6700:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
    6704:	e0bffa17 	ldw	r2,-24(fp)
    6708:	10000b26 	beq	r2,zero,6738 <I2C_MultipleRead+0xf4>
    670c:	e0bffd03 	ldbu	r2,-12(fp)
    6710:	10803fcc 	andi	r2,r2,255
    6714:	e13ffb17 	ldw	r4,-20(fp)
    6718:	e17ffc17 	ldw	r5,-16(fp)
    671c:	100d883a 	mov	r6,r2
    6720:	00068bc0 	call	68bc <i2c_write>
    6724:	1000041e 	bne	r2,zero,6738 <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
    6728:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    672c:	010001f4 	movhi	r4,7
    6730:	21102604 	addi	r4,r4,16536
    6734:	0007d280 	call	7d28 <myprintf>
    }
    
    if (bSuccess){
    6738:	e0bffa17 	ldw	r2,-24(fp)
    673c:	10001726 	beq	r2,zero,679c <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
    6740:	e03ff915 	stw	zero,-28(fp)
    6744:	00001006 	br	6788 <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
    6748:	e0bfff0b 	ldhu	r2,-4(fp)
    674c:	10ffffc4 	addi	r3,r2,-1
    6750:	e0bff917 	ldw	r2,-28(fp)
    6754:	1884c03a 	cmpne	r2,r3,r2
    6758:	10803fcc 	andi	r2,r2,255
    675c:	e13ffb17 	ldw	r4,-20(fp)
    6760:	e17ffc17 	ldw	r5,-16(fp)
    6764:	e1800217 	ldw	r6,8(fp)
    6768:	100f883a 	mov	r7,r2
    676c:	0006a000 	call	6a00 <i2c_read>
            pBuf++;
    6770:	e0800217 	ldw	r2,8(fp)
    6774:	10800044 	addi	r2,r2,1
    6778:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
    677c:	e0bff917 	ldw	r2,-28(fp)
    6780:	10800044 	addi	r2,r2,1
    6784:	e0bff915 	stw	r2,-28(fp)
    6788:	e0bfff0b 	ldhu	r2,-4(fp)
    678c:	e0fff917 	ldw	r3,-28(fp)
    6790:	1880020e 	bge	r3,r2,679c <I2C_MultipleRead+0x158>
    6794:	e0bffa17 	ldw	r2,-24(fp)
    6798:	103feb1e 	bne	r2,zero,6748 <I2C_MultipleRead+0x104>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
    679c:	e13ffb17 	ldw	r4,-20(fp)
    67a0:	e17ffc17 	ldw	r5,-16(fp)
    67a4:	00068440 	call	6844 <i2c_stop>
    
    return bSuccess;    
    67a8:	e0bffa17 	ldw	r2,-24(fp)
    
}
    67ac:	e037883a 	mov	sp,fp
    67b0:	dfc00117 	ldw	ra,4(sp)
    67b4:	df000017 	ldw	fp,0(sp)
    67b8:	dec00204 	addi	sp,sp,8
    67bc:	f800283a 	ret

000067c0 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
    67c0:	defffc04 	addi	sp,sp,-16
    67c4:	dfc00315 	stw	ra,12(sp)
    67c8:	df000215 	stw	fp,8(sp)
    67cc:	df000204 	addi	fp,sp,8
    67d0:	e13ffe15 	stw	r4,-8(fp)
    67d4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
    67d8:	e0bfff17 	ldw	r2,-4(fp)
    67dc:	10800104 	addi	r2,r2,4
    67e0:	00c00044 	movi	r3,1
    67e4:	10c00035 	stwio	r3,0(r2)
    // start condition
    SDA_HIGH(data_base); // data high
    67e8:	e0bfff17 	ldw	r2,-4(fp)
    67ec:	00c00044 	movi	r3,1
    67f0:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
    67f4:	e0bffe17 	ldw	r2,-8(fp)
    67f8:	00c00044 	movi	r3,1
    67fc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
    6800:	01000784 	movi	r4,30
    6804:	0013bac0 	call	13bac <usleep>
    SDA_LOW(data_base); // data low
    6808:	e0bfff17 	ldw	r2,-4(fp)
    680c:	0007883a 	mov	r3,zero
    6810:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
    6814:	01000784 	movi	r4,30
    6818:	0013bac0 	call	13bac <usleep>
    SCL_LOW(clk_base); // clock low
    681c:	e0bffe17 	ldw	r2,-8(fp)
    6820:	0007883a 	mov	r3,zero
    6824:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
    6828:	01000784 	movi	r4,30
    682c:	0013bac0 	call	13bac <usleep>
}
    6830:	e037883a 	mov	sp,fp
    6834:	dfc00117 	ldw	ra,4(sp)
    6838:	df000017 	ldw	fp,0(sp)
    683c:	dec00204 	addi	sp,sp,8
    6840:	f800283a 	ret

00006844 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
    6844:	defffc04 	addi	sp,sp,-16
    6848:	dfc00315 	stw	ra,12(sp)
    684c:	df000215 	stw	fp,8(sp)
    6850:	df000204 	addi	fp,sp,8
    6854:	e13ffe15 	stw	r4,-8(fp)
    6858:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
    685c:	e0bfff17 	ldw	r2,-4(fp)
    6860:	10800104 	addi	r2,r2,4
    6864:	00c00044 	movi	r3,1
    6868:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
    686c:	e0bfff17 	ldw	r2,-4(fp)
    6870:	0007883a 	mov	r3,zero
    6874:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
    6878:	01000784 	movi	r4,30
    687c:	0013bac0 	call	13bac <usleep>
    SCL_HIGH(clk_base);  // clock high
    6880:	e0bffe17 	ldw	r2,-8(fp)
    6884:	00c00044 	movi	r3,1
    6888:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
    688c:	01000784 	movi	r4,30
    6890:	0013bac0 	call	13bac <usleep>
    SDA_HIGH(data_base); // data high
    6894:	e0bfff17 	ldw	r2,-4(fp)
    6898:	00c00044 	movi	r3,1
    689c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
    68a0:	01000784 	movi	r4,30
    68a4:	0013bac0 	call	13bac <usleep>
 //   SDA_DIR_IN(data_base);  // data read modes
}
    68a8:	e037883a 	mov	sp,fp
    68ac:	dfc00117 	ldw	ra,4(sp)
    68b0:	df000017 	ldw	fp,0(sp)
    68b4:	dec00204 	addi	sp,sp,8
    68b8:	f800283a 	ret

000068bc <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    68bc:	defff804 	addi	sp,sp,-32
    68c0:	dfc00715 	stw	ra,28(sp)
    68c4:	df000615 	stw	fp,24(sp)
    68c8:	df000604 	addi	fp,sp,24
    68cc:	e13ffd15 	stw	r4,-12(fp)
    68d0:	e17ffe15 	stw	r5,-8(fp)
    68d4:	3005883a 	mov	r2,r6
    68d8:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
    68dc:	00bfe004 	movi	r2,-128
    68e0:	e0bffa05 	stb	r2,-24(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    68e4:	e0bffe17 	ldw	r2,-8(fp)
    68e8:	10800104 	addi	r2,r2,4
    68ec:	00c00044 	movi	r3,1
    68f0:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
    68f4:	e03ffb15 	stw	zero,-20(fp)
    68f8:	00002106 	br	6980 <i2c_write+0xc4>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
    68fc:	e0bffd17 	ldw	r2,-12(fp)
    6900:	0007883a 	mov	r3,zero
    6904:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
    6908:	e0ffff03 	ldbu	r3,-4(fp)
    690c:	e0bffa03 	ldbu	r2,-24(fp)
    6910:	1884703a 	and	r2,r3,r2
    6914:	10803fcc 	andi	r2,r2,255
    6918:	10000426 	beq	r2,zero,692c <i2c_write+0x70>
            SDA_HIGH(data_base);
    691c:	e0bffe17 	ldw	r2,-8(fp)
    6920:	00c00044 	movi	r3,1
    6924:	10c00035 	stwio	r3,0(r2)
    6928:	00000306 	br	6938 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
    692c:	e0bffe17 	ldw	r2,-8(fp)
    6930:	0007883a 	mov	r3,zero
    6934:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
    6938:	e0bffa03 	ldbu	r2,-24(fp)
    693c:	1004d07a 	srli	r2,r2,1
    6940:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_DELAY;
    6944:	01000784 	movi	r4,30
    6948:	0013bac0 	call	13bac <usleep>
        SCL_HIGH(clk_base);
    694c:	e0bffd17 	ldw	r2,-12(fp)
    6950:	00c00044 	movi	r3,1
    6954:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
    6958:	01000784 	movi	r4,30
    695c:	0013bac0 	call	13bac <usleep>
        SCL_LOW(clk_base);
    6960:	e0bffd17 	ldw	r2,-12(fp)
    6964:	0007883a 	mov	r3,zero
    6968:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
    696c:	01000784 	movi	r4,30
    6970:	0013bac0 	call	13bac <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
    6974:	e0bffb17 	ldw	r2,-20(fp)
    6978:	10800044 	addi	r2,r2,1
    697c:	e0bffb15 	stw	r2,-20(fp)
    6980:	e0bffb17 	ldw	r2,-20(fp)
    6984:	10800210 	cmplti	r2,r2,8
    6988:	103fdc1e 	bne	r2,zero,68fc <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
    698c:	e0bffe17 	ldw	r2,-8(fp)
    6990:	10800104 	addi	r2,r2,4
    6994:	0007883a 	mov	r3,zero
    6998:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
    SCL_DELAY;
    699c:	01000784 	movi	r4,30
    69a0:	0013bac0 	call	13bac <usleep>
//	while(SDA_READ(data_base) && w++ < 1000000){
//	}


    // clock high
    SCL_HIGH(clk_base);  // clock high
    69a4:	e0bffd17 	ldw	r2,-12(fp)
    69a8:	00c00044 	movi	r3,1
    69ac:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
    69b0:	01000784 	movi	r4,30
    69b4:	0013bac0 	call	13bac <usleep>
    SCL_DELAY;  // clock high delay
    69b8:	01000784 	movi	r4,30
    69bc:	0013bac0 	call	13bac <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
    69c0:	e0bffe17 	ldw	r2,-8(fp)
    69c4:	10800037 	ldwio	r2,0(r2)
    69c8:	1005003a 	cmpeq	r2,r2,zero
    69cc:	10803fcc 	andi	r2,r2,255
    69d0:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
    69d4:	e0bffd17 	ldw	r2,-12(fp)
    69d8:	0007883a 	mov	r3,zero
    69dc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
    69e0:	01000784 	movi	r4,30
    69e4:	0013bac0 	call	13bac <usleep>
    return bAck;
    69e8:	e0bffc17 	ldw	r2,-16(fp)
}    
    69ec:	e037883a 	mov	sp,fp
    69f0:	dfc00117 	ldw	ra,4(sp)
    69f4:	df000017 	ldw	fp,0(sp)
    69f8:	dec00204 	addi	sp,sp,8
    69fc:	f800283a 	ret

00006a00 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
    6a00:	defff804 	addi	sp,sp,-32
    6a04:	dfc00715 	stw	ra,28(sp)
    6a08:	df000615 	stw	fp,24(sp)
    6a0c:	df000604 	addi	fp,sp,24
    6a10:	e13ffc15 	stw	r4,-16(fp)
    6a14:	e17ffd15 	stw	r5,-12(fp)
    6a18:	e1bffe15 	stw	r6,-8(fp)
    6a1c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
    6a20:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    SDA_DIR_IN(data_base);  // set data read mode
    6a24:	e0bffd17 	ldw	r2,-12(fp)
    6a28:	10800104 	addi	r2,r2,4
    6a2c:	0007883a 	mov	r3,zero
    6a30:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
    6a34:	e0bffc17 	ldw	r2,-16(fp)
    6a38:	0007883a 	mov	r3,zero
    6a3c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
    6a40:	01000784 	movi	r4,30
    6a44:	0013bac0 	call	13bac <usleep>

    for(i=0;i<8;i++){
    6a48:	e03ffb15 	stw	zero,-20(fp)
    6a4c:	00001606 	br	6aa8 <i2c_read+0xa8>
        Data <<= 1;
    6a50:	e0bffa03 	ldbu	r2,-24(fp)
    6a54:	1085883a 	add	r2,r2,r2
    6a58:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
    6a5c:	e0bffc17 	ldw	r2,-16(fp)
    6a60:	00c00044 	movi	r3,1
    6a64:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
    6a68:	01000784 	movi	r4,30
    6a6c:	0013bac0 	call	13bac <usleep>
        if (SDA_READ(data_base))  // read data   
    6a70:	e0bffd17 	ldw	r2,-12(fp)
    6a74:	10800037 	ldwio	r2,0(r2)
    6a78:	10000326 	beq	r2,zero,6a88 <i2c_read+0x88>
            Data |= 0x01;
    6a7c:	e0bffa03 	ldbu	r2,-24(fp)
    6a80:	10800054 	ori	r2,r2,1
    6a84:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
    6a88:	e0bffc17 	ldw	r2,-16(fp)
    6a8c:	0007883a 	mov	r3,zero
    6a90:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
    6a94:	01000784 	movi	r4,30
    6a98:	0013bac0 	call	13bac <usleep>
    // assume SCL = low
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
    6a9c:	e0bffb17 	ldw	r2,-20(fp)
    6aa0:	10800044 	addi	r2,r2,1
    6aa4:	e0bffb15 	stw	r2,-20(fp)
    6aa8:	e0bffb17 	ldw	r2,-20(fp)
    6aac:	10800210 	cmplti	r2,r2,8
    6ab0:	103fe71e 	bne	r2,zero,6a50 <i2c_read+0x50>
            Data |= 0x01;
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
    6ab4:	e0bffc17 	ldw	r2,-16(fp)
    6ab8:	0007883a 	mov	r3,zero
    6abc:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
    6ac0:	e0bffd17 	ldw	r2,-12(fp)
    6ac4:	10800104 	addi	r2,r2,4
    6ac8:	00c00044 	movi	r3,1
    6acc:	10c00035 	stwio	r3,0(r2)
    if (bAck)
    6ad0:	e0bfff17 	ldw	r2,-4(fp)
    6ad4:	10000426 	beq	r2,zero,6ae8 <i2c_read+0xe8>
        SDA_LOW(data_base);
    6ad8:	e0bffd17 	ldw	r2,-12(fp)
    6adc:	0007883a 	mov	r3,zero
    6ae0:	10c00035 	stwio	r3,0(r2)
    6ae4:	00000306 	br	6af4 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
    6ae8:	e0bffd17 	ldw	r2,-12(fp)
    6aec:	00c00044 	movi	r3,1
    6af0:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
    6af4:	e0bffc17 	ldw	r2,-16(fp)
    6af8:	00c00044 	movi	r3,1
    6afc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
    6b00:	01000784 	movi	r4,30
    6b04:	0013bac0 	call	13bac <usleep>
    SCL_LOW(clk_base); // clock low
    6b08:	e0bffc17 	ldw	r2,-16(fp)
    6b0c:	0007883a 	mov	r3,zero
    6b10:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
    6b14:	01000784 	movi	r4,30
    6b18:	0013bac0 	call	13bac <usleep>
    SDA_LOW(data_base);  // data low
    6b1c:	e0bffd17 	ldw	r2,-12(fp)
    6b20:	0007883a 	mov	r3,zero
    6b24:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
    6b28:	01000784 	movi	r4,30
    6b2c:	0013bac0 	call	13bac <usleep>
//    SDA_DIR_IN;  // set data read mode
    *pData = Data;
    6b30:	e0bffe17 	ldw	r2,-8(fp)
    6b34:	e0fffa03 	ldbu	r3,-24(fp)
    6b38:	10c00005 	stb	r3,0(r2)
}
    6b3c:	e037883a 	mov	sp,fp
    6b40:	dfc00117 	ldw	ra,4(sp)
    6b44:	df000017 	ldw	fp,0(sp)
    6b48:	dec00204 	addi	sp,sp,8
    6b4c:	f800283a 	ret

00006b50 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
    6b50:	defff704 	addi	sp,sp,-36
    6b54:	dfc00815 	stw	ra,32(sp)
    6b58:	df000715 	stw	fp,28(sp)
    6b5c:	df000704 	addi	fp,sp,28
    6b60:	e13ffb15 	stw	r4,-20(fp)
    6b64:	e17ffc15 	stw	r5,-16(fp)
    6b68:	3007883a 	mov	r3,r6
    6b6c:	3805883a 	mov	r2,r7
    6b70:	e1000217 	ldw	r4,8(fp)
    6b74:	e0fffd05 	stb	r3,-12(fp)
    6b78:	e0bffe0d 	sth	r2,-8(fp)
    6b7c:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
    6b80:	00800044 	movi	r2,1
    6b84:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
    6b88:	e0bffe0b 	ldhu	r2,-8(fp)
    6b8c:	1004d23a 	srli	r2,r2,8
    6b90:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
    6b94:	e0bffe0b 	ldhu	r2,-8(fp)
    6b98:	e0bffa45 	stb	r2,-23(fp)

    i2c_start(clk_base, data_base);
    6b9c:	e13ffb17 	ldw	r4,-20(fp)
    6ba0:	e17ffc17 	ldw	r5,-16(fp)
    6ba4:	00067c00 	call	67c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    6ba8:	e0bffd03 	ldbu	r2,-12(fp)
    6bac:	10803fcc 	andi	r2,r2,255
    6bb0:	e13ffb17 	ldw	r4,-20(fp)
    6bb4:	e17ffc17 	ldw	r5,-16(fp)
    6bb8:	100d883a 	mov	r6,r2
    6bbc:	00068bc0 	call	68bc <i2c_write>
    6bc0:	1000041e 	bne	r2,zero,6bd4 <I2CL_Write+0x84>
        bSuccess = FALSE;
    6bc4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    6bc8:	010001f4 	movhi	r4,7
    6bcc:	210fd304 	addi	r4,r4,16204
    6bd0:	0007d280 	call	7d28 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
    6bd4:	e0bff917 	ldw	r2,-28(fp)
    6bd8:	10000a26 	beq	r2,zero,6c04 <I2CL_Write+0xb4>
    6bdc:	e0bffa03 	ldbu	r2,-24(fp)
    6be0:	e13ffb17 	ldw	r4,-20(fp)
    6be4:	e17ffc17 	ldw	r5,-16(fp)
    6be8:	100d883a 	mov	r6,r2
    6bec:	00068bc0 	call	68bc <i2c_write>
    6bf0:	1000041e 	bne	r2,zero,6c04 <I2CL_Write+0xb4>
        bSuccess = FALSE;
    6bf4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    6bf8:	010001f4 	movhi	r4,7
    6bfc:	21103104 	addi	r4,r4,16580
    6c00:	0007d280 	call	7d28 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
    6c04:	e0bff917 	ldw	r2,-28(fp)
    6c08:	10000a26 	beq	r2,zero,6c34 <I2CL_Write+0xe4>
    6c0c:	e0bffa43 	ldbu	r2,-23(fp)
    6c10:	e13ffb17 	ldw	r4,-20(fp)
    6c14:	e17ffc17 	ldw	r5,-16(fp)
    6c18:	100d883a 	mov	r6,r2
    6c1c:	00068bc0 	call	68bc <i2c_write>
    6c20:	1000041e 	bne	r2,zero,6c34 <I2CL_Write+0xe4>
        bSuccess = FALSE;
    6c24:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    6c28:	010001f4 	movhi	r4,7
    6c2c:	21103b04 	addi	r4,r4,16620
    6c30:	0007d280 	call	7d28 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
    6c34:	e0bff917 	ldw	r2,-28(fp)
    6c38:	10000a26 	beq	r2,zero,6c64 <I2CL_Write+0x114>
    6c3c:	e0bfff03 	ldbu	r2,-4(fp)
    6c40:	e13ffb17 	ldw	r4,-20(fp)
    6c44:	e17ffc17 	ldw	r5,-16(fp)
    6c48:	100d883a 	mov	r6,r2
    6c4c:	00068bc0 	call	68bc <i2c_write>
    6c50:	1000041e 	bne	r2,zero,6c64 <I2CL_Write+0x114>
        bSuccess = FALSE;
    6c54:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    6c58:	010001f4 	movhi	r4,7
    6c5c:	210fe404 	addi	r4,r4,16272
    6c60:	0007d280 	call	7d28 <myprintf>
    }
    i2c_stop(clk_base, data_base);
    6c64:	e13ffb17 	ldw	r4,-20(fp)
    6c68:	e17ffc17 	ldw	r5,-16(fp)
    6c6c:	00068440 	call	6844 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
    6c70:	0106d604 	movi	r4,7000
    6c74:	0013bac0 	call	13bac <usleep>
    
    return bSuccess;
    6c78:	e0bff917 	ldw	r2,-28(fp)
    
}
    6c7c:	e037883a 	mov	sp,fp
    6c80:	dfc00117 	ldw	ra,4(sp)
    6c84:	df000017 	ldw	fp,0(sp)
    6c88:	dec00204 	addi	sp,sp,8
    6c8c:	f800283a 	ret

00006c90 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
    6c90:	defff804 	addi	sp,sp,-32
    6c94:	dfc00715 	stw	ra,28(sp)
    6c98:	df000615 	stw	fp,24(sp)
    6c9c:	df000604 	addi	fp,sp,24
    6ca0:	e13ffc15 	stw	r4,-16(fp)
    6ca4:	e17ffd15 	stw	r5,-12(fp)
    6ca8:	3007883a 	mov	r3,r6
    6cac:	3805883a 	mov	r2,r7
    6cb0:	e0fffe05 	stb	r3,-8(fp)
    6cb4:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
    6cb8:	00800044 	movi	r2,1
    6cbc:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
    6cc0:	e0bfff0b 	ldhu	r2,-4(fp)
    6cc4:	1004d23a 	srli	r2,r2,8
    6cc8:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
    6ccc:	e0bfff0b 	ldhu	r2,-4(fp)
    6cd0:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
    6cd4:	e13ffc17 	ldw	r4,-16(fp)
    6cd8:	e17ffd17 	ldw	r5,-12(fp)
    6cdc:	00067c00 	call	67c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    6ce0:	e0bffe03 	ldbu	r2,-8(fp)
    6ce4:	10803fcc 	andi	r2,r2,255
    6ce8:	e13ffc17 	ldw	r4,-16(fp)
    6cec:	e17ffd17 	ldw	r5,-12(fp)
    6cf0:	100d883a 	mov	r6,r2
    6cf4:	00068bc0 	call	68bc <i2c_write>
    6cf8:	1000041e 	bne	r2,zero,6d0c <I2CL_Read+0x7c>
        bSuccess = FALSE;
    6cfc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    6d00:	010001f4 	movhi	r4,7
    6d04:	210fd304 	addi	r4,r4,16204
    6d08:	0007d280 	call	7d28 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
    6d0c:	e0bffa17 	ldw	r2,-24(fp)
    6d10:	10000a26 	beq	r2,zero,6d3c <I2CL_Read+0xac>
    6d14:	e0bffb03 	ldbu	r2,-20(fp)
    6d18:	e13ffc17 	ldw	r4,-16(fp)
    6d1c:	e17ffd17 	ldw	r5,-12(fp)
    6d20:	100d883a 	mov	r6,r2
    6d24:	00068bc0 	call	68bc <i2c_write>
    6d28:	1000041e 	bne	r2,zero,6d3c <I2CL_Read+0xac>
        bSuccess = FALSE;
    6d2c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    6d30:	010001f4 	movhi	r4,7
    6d34:	21103104 	addi	r4,r4,16580
    6d38:	0007d280 	call	7d28 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
    6d3c:	e0bffa17 	ldw	r2,-24(fp)
    6d40:	10000a26 	beq	r2,zero,6d6c <I2CL_Read+0xdc>
    6d44:	e0bffb43 	ldbu	r2,-19(fp)
    6d48:	e13ffc17 	ldw	r4,-16(fp)
    6d4c:	e17ffd17 	ldw	r5,-12(fp)
    6d50:	100d883a 	mov	r6,r2
    6d54:	00068bc0 	call	68bc <i2c_write>
    6d58:	1000041e 	bne	r2,zero,6d6c <I2CL_Read+0xdc>
        bSuccess = FALSE;
    6d5c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    6d60:	010001f4 	movhi	r4,7
    6d64:	21103b04 	addi	r4,r4,16620
    6d68:	0007d280 	call	7d28 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
    6d6c:	e13ffc17 	ldw	r4,-16(fp)
    6d70:	e17ffd17 	ldw	r5,-12(fp)
    6d74:	00067c00 	call	67c0 <i2c_start>
    DeviceAddr |= 1; // Read
    6d78:	e0bffe03 	ldbu	r2,-8(fp)
    6d7c:	10800054 	ori	r2,r2,1
    6d80:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
    6d84:	e0bffa17 	ldw	r2,-24(fp)
    6d88:	10000b26 	beq	r2,zero,6db8 <I2CL_Read+0x128>
    6d8c:	e0bffe03 	ldbu	r2,-8(fp)
    6d90:	10803fcc 	andi	r2,r2,255
    6d94:	e13ffc17 	ldw	r4,-16(fp)
    6d98:	e17ffd17 	ldw	r5,-12(fp)
    6d9c:	100d883a 	mov	r6,r2
    6da0:	00068bc0 	call	68bc <i2c_write>
    6da4:	1000041e 	bne	r2,zero,6db8 <I2CL_Read+0x128>
        bSuccess = FALSE;
    6da8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    6dac:	010001f4 	movhi	r4,7
    6db0:	21100704 	addi	r4,r4,16412
    6db4:	0007d280 	call	7d28 <myprintf>
    }
    
    if (bSuccess){
    6db8:	e0bffa17 	ldw	r2,-24(fp)
    6dbc:	10000526 	beq	r2,zero,6dd4 <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
    6dc0:	e13ffc17 	ldw	r4,-16(fp)
    6dc4:	e17ffd17 	ldw	r5,-12(fp)
    6dc8:	e1800217 	ldw	r6,8(fp)
    6dcc:	000f883a 	mov	r7,zero
    6dd0:	0006a000 	call	6a00 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
    6dd4:	e13ffc17 	ldw	r4,-16(fp)
    6dd8:	e17ffd17 	ldw	r5,-12(fp)
    6ddc:	00068440 	call	6844 <i2c_stop>
    
    return bSuccess;    
    6de0:	e0bffa17 	ldw	r2,-24(fp)
}
    6de4:	e037883a 	mov	sp,fp
    6de8:	dfc00117 	ldw	ra,4(sp)
    6dec:	df000017 	ldw	fp,0(sp)
    6df0:	dec00204 	addi	sp,sp,8
    6df4:	f800283a 	ret

00006df8 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
    6df8:	defff604 	addi	sp,sp,-40
    6dfc:	dfc00915 	stw	ra,36(sp)
    6e00:	df000815 	stw	fp,32(sp)
    6e04:	df000804 	addi	fp,sp,32
    6e08:	e13ffb15 	stw	r4,-20(fp)
    6e0c:	e17ffc15 	stw	r5,-16(fp)
    6e10:	3007883a 	mov	r3,r6
    6e14:	3805883a 	mov	r2,r7
    6e18:	e1000317 	ldw	r4,12(fp)
    6e1c:	e0fffd05 	stb	r3,-12(fp)
    6e20:	e0bffe0d 	sth	r2,-8(fp)
    6e24:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
    6e28:	00800044 	movi	r2,1
    6e2c:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
    6e30:	e0bffe0b 	ldhu	r2,-8(fp)
    6e34:	1004d23a 	srli	r2,r2,8
    6e38:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
    6e3c:	e0bffe0b 	ldhu	r2,-8(fp)
    6e40:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
    6e44:	e13ffb17 	ldw	r4,-20(fp)
    6e48:	e17ffc17 	ldw	r5,-16(fp)
    6e4c:	00067c00 	call	67c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    6e50:	e0bffd03 	ldbu	r2,-12(fp)
    6e54:	10803fcc 	andi	r2,r2,255
    6e58:	e13ffb17 	ldw	r4,-20(fp)
    6e5c:	e17ffc17 	ldw	r5,-16(fp)
    6e60:	100d883a 	mov	r6,r2
    6e64:	00068bc0 	call	68bc <i2c_write>
    6e68:	1000041e 	bne	r2,zero,6e7c <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
    6e6c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    6e70:	010001f4 	movhi	r4,7
    6e74:	210fd304 	addi	r4,r4,16204
    6e78:	0007d280 	call	7d28 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
    6e7c:	e0bff917 	ldw	r2,-28(fp)
    6e80:	10000a26 	beq	r2,zero,6eac <I2CL_MultipleRead+0xb4>
    6e84:	e0bffa03 	ldbu	r2,-24(fp)
    6e88:	e13ffb17 	ldw	r4,-20(fp)
    6e8c:	e17ffc17 	ldw	r5,-16(fp)
    6e90:	100d883a 	mov	r6,r2
    6e94:	00068bc0 	call	68bc <i2c_write>
    6e98:	1000041e 	bne	r2,zero,6eac <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
    6e9c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    6ea0:	010001f4 	movhi	r4,7
    6ea4:	21103104 	addi	r4,r4,16580
    6ea8:	0007d280 	call	7d28 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
    6eac:	e0bff917 	ldw	r2,-28(fp)
    6eb0:	10000a26 	beq	r2,zero,6edc <I2CL_MultipleRead+0xe4>
    6eb4:	e0bffa43 	ldbu	r2,-23(fp)
    6eb8:	e13ffb17 	ldw	r4,-20(fp)
    6ebc:	e17ffc17 	ldw	r5,-16(fp)
    6ec0:	100d883a 	mov	r6,r2
    6ec4:	00068bc0 	call	68bc <i2c_write>
    6ec8:	1000041e 	bne	r2,zero,6edc <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
    6ecc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    6ed0:	010001f4 	movhi	r4,7
    6ed4:	21103b04 	addi	r4,r4,16620
    6ed8:	0007d280 	call	7d28 <myprintf>
    }    
    if (bSuccess)        
    6edc:	e0bff917 	ldw	r2,-28(fp)
    6ee0:	10000326 	beq	r2,zero,6ef0 <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
    6ee4:	e13ffb17 	ldw	r4,-20(fp)
    6ee8:	e17ffc17 	ldw	r5,-16(fp)
    6eec:	00067c00 	call	67c0 <i2c_start>
    DeviceAddr |= 1; // Read
    6ef0:	e0bffd03 	ldbu	r2,-12(fp)
    6ef4:	10800054 	ori	r2,r2,1
    6ef8:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
    6efc:	e0bff917 	ldw	r2,-28(fp)
    6f00:	10000b26 	beq	r2,zero,6f30 <I2CL_MultipleRead+0x138>
    6f04:	e0bffd03 	ldbu	r2,-12(fp)
    6f08:	10803fcc 	andi	r2,r2,255
    6f0c:	e13ffb17 	ldw	r4,-20(fp)
    6f10:	e17ffc17 	ldw	r5,-16(fp)
    6f14:	100d883a 	mov	r6,r2
    6f18:	00068bc0 	call	68bc <i2c_write>
    6f1c:	1000041e 	bne	r2,zero,6f30 <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
    6f20:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    6f24:	010001f4 	movhi	r4,7
    6f28:	21104504 	addi	r4,r4,16660
    6f2c:	0007d280 	call	7d28 <myprintf>
    }
    
    if (bSuccess){
    6f30:	e0bff917 	ldw	r2,-28(fp)
    6f34:	10001726 	beq	r2,zero,6f94 <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
    6f38:	e03ff815 	stw	zero,-32(fp)
    6f3c:	00001006 	br	6f80 <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
    6f40:	e0bff817 	ldw	r2,-32(fp)
    6f44:	e0c00217 	ldw	r3,8(fp)
    6f48:	1887883a 	add	r3,r3,r2
    6f4c:	e0bfff0b 	ldhu	r2,-4(fp)
    6f50:	113fffc4 	addi	r4,r2,-1
    6f54:	e0bff817 	ldw	r2,-32(fp)
    6f58:	2084c03a 	cmpne	r2,r4,r2
    6f5c:	10803fcc 	andi	r2,r2,255
    6f60:	e13ffb17 	ldw	r4,-20(fp)
    6f64:	e17ffc17 	ldw	r5,-16(fp)
    6f68:	180d883a 	mov	r6,r3
    6f6c:	100f883a 	mov	r7,r2
    6f70:	0006a000 	call	6a00 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
    6f74:	e0bff817 	ldw	r2,-32(fp)
    6f78:	10800044 	addi	r2,r2,1
    6f7c:	e0bff815 	stw	r2,-32(fp)
    6f80:	e0bfff0b 	ldhu	r2,-4(fp)
    6f84:	e0fff817 	ldw	r3,-32(fp)
    6f88:	1880020e 	bge	r3,r2,6f94 <I2CL_MultipleRead+0x19c>
    6f8c:	e0bff917 	ldw	r2,-28(fp)
    6f90:	103feb1e 	bne	r2,zero,6f40 <I2CL_MultipleRead+0x148>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
    6f94:	e13ffb17 	ldw	r4,-20(fp)
    6f98:	e17ffc17 	ldw	r5,-16(fp)
    6f9c:	00068440 	call	6844 <i2c_stop>
    
    return bSuccess;    
    6fa0:	e0bff917 	ldw	r2,-28(fp)
    
} 
    6fa4:	e037883a 	mov	sp,fp
    6fa8:	dfc00117 	ldw	ra,4(sp)
    6fac:	df000017 	ldw	fp,0(sp)
    6fb0:	dec00204 	addi	sp,sp,8
    6fb4:	f800283a 	ret

00006fb8 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
    6fb8:	defff604 	addi	sp,sp,-40
    6fbc:	dfc00915 	stw	ra,36(sp)
    6fc0:	df000815 	stw	fp,32(sp)
    6fc4:	df000804 	addi	fp,sp,32
    6fc8:	e13ffb15 	stw	r4,-20(fp)
    6fcc:	e17ffc15 	stw	r5,-16(fp)
    6fd0:	3007883a 	mov	r3,r6
    6fd4:	3805883a 	mov	r2,r7
    6fd8:	e1000317 	ldw	r4,12(fp)
    6fdc:	e0fffd05 	stb	r3,-12(fp)
    6fe0:	e0bffe0d 	sth	r2,-8(fp)
    6fe4:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
    6fe8:	00800044 	movi	r2,1
    6fec:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
    6ff0:	e0bffe0b 	ldhu	r2,-8(fp)
    6ff4:	1004d23a 	srli	r2,r2,8
    6ff8:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
    6ffc:	e0bffe0b 	ldhu	r2,-8(fp)
    7000:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
    7004:	e13ffb17 	ldw	r4,-20(fp)
    7008:	e17ffc17 	ldw	r5,-16(fp)
    700c:	00067c00 	call	67c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    7010:	e0bffd03 	ldbu	r2,-12(fp)
    7014:	10803fcc 	andi	r2,r2,255
    7018:	e13ffb17 	ldw	r4,-20(fp)
    701c:	e17ffc17 	ldw	r5,-16(fp)
    7020:	100d883a 	mov	r6,r2
    7024:	00068bc0 	call	68bc <i2c_write>
    7028:	1000041e 	bne	r2,zero,703c <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
    702c:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    7030:	010001f4 	movhi	r4,7
    7034:	210fd304 	addi	r4,r4,16204
    7038:	0007d280 	call	7d28 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
    703c:	e0bff817 	ldw	r2,-32(fp)
    7040:	10000a26 	beq	r2,zero,706c <I2CL_MultipleWrite+0xb4>
    7044:	e0bffa03 	ldbu	r2,-24(fp)
    7048:	e13ffb17 	ldw	r4,-20(fp)
    704c:	e17ffc17 	ldw	r5,-16(fp)
    7050:	100d883a 	mov	r6,r2
    7054:	00068bc0 	call	68bc <i2c_write>
    7058:	1000041e 	bne	r2,zero,706c <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
    705c:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    7060:	010001f4 	movhi	r4,7
    7064:	21103104 	addi	r4,r4,16580
    7068:	0007d280 	call	7d28 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
    706c:	e0bff817 	ldw	r2,-32(fp)
    7070:	10000a26 	beq	r2,zero,709c <I2CL_MultipleWrite+0xe4>
    7074:	e0bffa43 	ldbu	r2,-23(fp)
    7078:	e13ffb17 	ldw	r4,-20(fp)
    707c:	e17ffc17 	ldw	r5,-16(fp)
    7080:	100d883a 	mov	r6,r2
    7084:	00068bc0 	call	68bc <i2c_write>
    7088:	1000041e 	bne	r2,zero,709c <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
    708c:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    7090:	010001f4 	movhi	r4,7
    7094:	21103b04 	addi	r4,r4,16620
    7098:	0007d280 	call	7d28 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
    709c:	e0bff817 	ldw	r2,-32(fp)
    70a0:	10001926 	beq	r2,zero,7108 <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
    70a4:	e03ff915 	stw	zero,-28(fp)
    70a8:	00000d06 	br	70e0 <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
    70ac:	e0bff917 	ldw	r2,-28(fp)
    70b0:	e0c00217 	ldw	r3,8(fp)
    70b4:	1885883a 	add	r2,r3,r2
    70b8:	10800003 	ldbu	r2,0(r2)
    70bc:	10803fcc 	andi	r2,r2,255
    70c0:	e13ffb17 	ldw	r4,-20(fp)
    70c4:	e17ffc17 	ldw	r5,-16(fp)
    70c8:	100d883a 	mov	r6,r2
    70cc:	00068bc0 	call	68bc <i2c_write>
    70d0:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
    70d4:	e0bff917 	ldw	r2,-28(fp)
    70d8:	10800044 	addi	r2,r2,1
    70dc:	e0bff915 	stw	r2,-28(fp)
    70e0:	e0bfff0b 	ldhu	r2,-4(fp)
    70e4:	e0fff917 	ldw	r3,-28(fp)
    70e8:	1880020e 	bge	r3,r2,70f4 <I2CL_MultipleWrite+0x13c>
    70ec:	e0bff817 	ldw	r2,-32(fp)
    70f0:	103fee1e 	bne	r2,zero,70ac <I2CL_MultipleWrite+0xf4>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
    70f4:	e0bff817 	ldw	r2,-32(fp)
    70f8:	1000031e 	bne	r2,zero,7108 <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    70fc:	010001f4 	movhi	r4,7
    7100:	210fe404 	addi	r4,r4,16272
    7104:	0007d280 	call	7d28 <myprintf>
    }
    i2c_stop(clk_base, data_base);
    7108:	e13ffb17 	ldw	r4,-20(fp)
    710c:	e17ffc17 	ldw	r5,-16(fp)
    7110:	00068440 	call	6844 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
    7114:	0106d604 	movi	r4,7000
    7118:	0013bac0 	call	13bac <usleep>
    
    return bSuccess;
    711c:	e0bff817 	ldw	r2,-32(fp)
    
}
    7120:	e037883a 	mov	sp,fp
    7124:	dfc00117 	ldw	ra,4(sp)
    7128:	df000017 	ldw	fp,0(sp)
    712c:	dec00204 	addi	sp,sp,8
    7130:	f800283a 	ret

00007134 <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
    7134:	defff604 	addi	sp,sp,-40
    7138:	dfc00915 	stw	ra,36(sp)
    713c:	df000815 	stw	fp,32(sp)
    7140:	df000804 	addi	fp,sp,32
    7144:	e13ffc15 	stw	r4,-16(fp)
    7148:	e17ffd15 	stw	r5,-12(fp)
    714c:	3007883a 	mov	r3,r6
    7150:	3805883a 	mov	r2,r7
    7154:	e0fffe05 	stb	r3,-8(fp)
    7158:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
    715c:	e0fffe07 	ldb	r3,-8(fp)
    7160:	e0bfff0b 	ldhu	r2,-4(fp)
    7164:	e13ffb04 	addi	r4,fp,-20
    7168:	d9000015 	stw	r4,0(sp)
    716c:	01000084 	movi	r4,2
    7170:	d9000115 	stw	r4,4(sp)
    7174:	e13ffc17 	ldw	r4,-16(fp)
    7178:	e17ffd17 	ldw	r5,-12(fp)
    717c:	180d883a 	mov	r6,r3
    7180:	100f883a 	mov	r7,r2
    7184:	0006df80 	call	6df8 <I2CL_MultipleRead>
    7188:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
    718c:	e0bffa17 	ldw	r2,-24(fp)
    7190:	10000a26 	beq	r2,zero,71bc <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
    7194:	e0bffb03 	ldbu	r2,-20(fp)
    7198:	10803fcc 	andi	r2,r2,255
    719c:	1004923a 	slli	r2,r2,8
    71a0:	1007883a 	mov	r3,r2
    71a4:	e0bffb43 	ldbu	r2,-19(fp)
    71a8:	10803fcc 	andi	r2,r2,255
    71ac:	1884b03a 	or	r2,r3,r2
    71b0:	1007883a 	mov	r3,r2
    71b4:	e0800217 	ldw	r2,8(fp)
    71b8:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
    71bc:	e0bffa17 	ldw	r2,-24(fp)
}
    71c0:	e037883a 	mov	sp,fp
    71c4:	dfc00117 	ldw	ra,4(sp)
    71c8:	df000017 	ldw	fp,0(sp)
    71cc:	dec00204 	addi	sp,sp,8
    71d0:	f800283a 	ret

000071d4 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
    71d4:	defff504 	addi	sp,sp,-44
    71d8:	dfc00a15 	stw	ra,40(sp)
    71dc:	df000915 	stw	fp,36(sp)
    71e0:	df000904 	addi	fp,sp,36
    71e4:	e13ffb15 	stw	r4,-20(fp)
    71e8:	e17ffc15 	stw	r5,-16(fp)
    71ec:	3007883a 	mov	r3,r6
    71f0:	3805883a 	mov	r2,r7
    71f4:	e1000217 	ldw	r4,8(fp)
    71f8:	e0fffd05 	stb	r3,-12(fp)
    71fc:	e0bffe0d 	sth	r2,-8(fp)
    7200:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
    7204:	e0bfff0b 	ldhu	r2,-4(fp)
    7208:	1004d23a 	srli	r2,r2,8
    720c:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
    7210:	e0bfff0b 	ldhu	r2,-4(fp)
    7214:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
    7218:	e0fffd07 	ldb	r3,-12(fp)
    721c:	e0bffe0b 	ldhu	r2,-8(fp)
    7220:	e13ffa04 	addi	r4,fp,-24
    7224:	d9000015 	stw	r4,0(sp)
    7228:	01000084 	movi	r4,2
    722c:	d9000115 	stw	r4,4(sp)
    7230:	e13ffb17 	ldw	r4,-20(fp)
    7234:	e17ffc17 	ldw	r5,-16(fp)
    7238:	180d883a 	mov	r6,r3
    723c:	100f883a 	mov	r7,r2
    7240:	0006fb80 	call	6fb8 <I2CL_MultipleWrite>
    7244:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
    7248:	e0bff917 	ldw	r2,-28(fp)
}
    724c:	e037883a 	mov	sp,fp
    7250:	dfc00117 	ldw	ra,4(sp)
    7254:	df000017 	ldw	fp,0(sp)
    7258:	dec00204 	addi	sp,sp,8
    725c:	f800283a 	ret

00007260 <Write32_Data>:

#define SLEEP_TIME 15  //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
    7260:	defffb04 	addi	sp,sp,-20
    7264:	df000415 	stw	fp,16(sp)
    7268:	df000404 	addi	fp,sp,16
    726c:	e13ffd15 	stw	r4,-12(fp)
    7270:	e17ffe15 	stw	r5,-8(fp)
    7274:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
    7278:	e0bffe17 	ldw	r2,-8(fp)
    727c:	1085883a 	add	r2,r2,r2
    7280:	1085883a 	add	r2,r2,r2
    7284:	1007883a 	mov	r3,r2
    7288:	e0bffd17 	ldw	r2,-12(fp)
    728c:	1885883a 	add	r2,r3,r2
    7290:	e0ffff17 	ldw	r3,-4(fp)
    7294:	10c00035 	stwio	r3,0(r2)
    bPass=TRUE;
    7298:	00800044 	movi	r2,1
    729c:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
    72a0:	e0bffc17 	ldw	r2,-16(fp)
}
    72a4:	e037883a 	mov	sp,fp
    72a8:	df000017 	ldw	fp,0(sp)
    72ac:	dec00104 	addi	sp,sp,4
    72b0:	f800283a 	ret

000072b4 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
    72b4:	defffb04 	addi	sp,sp,-20
    72b8:	df000415 	stw	fp,16(sp)
    72bc:	df000404 	addi	fp,sp,16
    72c0:	e13ffd15 	stw	r4,-12(fp)
    72c4:	e17ffe15 	stw	r5,-8(fp)
    72c8:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
    72cc:	e0bffe17 	ldw	r2,-8(fp)
    72d0:	1085883a 	add	r2,r2,r2
    72d4:	1085883a 	add	r2,r2,r2
    72d8:	1007883a 	mov	r3,r2
    72dc:	e0bffd17 	ldw	r2,-12(fp)
    72e0:	1885883a 	add	r2,r3,r2
    72e4:	10c00037 	ldwio	r3,0(r2)
    72e8:	e0bfff17 	ldw	r2,-4(fp)
    72ec:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
    72f0:	00800044 	movi	r2,1
    72f4:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
    72f8:	e0bffc17 	ldw	r2,-16(fp)
}
    72fc:	e037883a 	mov	sp,fp
    7300:	df000017 	ldw	fp,0(sp)
    7304:	dec00104 	addi	sp,sp,4
    7308:	f800283a 	ret

0000730c <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base)
{
    730c:	defffb04 	addi	sp,sp,-20
    7310:	dfc00415 	stw	ra,16(sp)
    7314:	df000315 	stw	fp,12(sp)
    7318:	df000304 	addi	fp,sp,12
    731c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
    7320:	00800044 	movi	r2,1
    7324:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;
    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
   IOWR(i2c_base, 0,0x18);//write high prescale
    7328:	e0bfff17 	ldw	r2,-4(fp)
    732c:	00c00604 	movi	r3,24
    7330:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1,0x00);//write low prescale
    7334:	e0bfff17 	ldw	r2,-4(fp)
    7338:	10800104 	addi	r2,r2,4
    733c:	0007883a 	mov	r3,zero
    7340:	10c00035 	stwio	r3,0(r2)
   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2,0x80);
    7344:	e0bfff17 	ldw	r2,-4(fp)
    7348:	10800204 	addi	r2,r2,8
    734c:	00c02004 	movi	r3,128
    7350:	10c00035 	stwio	r3,0(r2)

    read_data =IORD(i2c_base, 0);
    7354:	e0bfff17 	ldw	r2,-4(fp)
    7358:	10800037 	ldwio	r2,0(r2)
    735c:	e0bffe15 	stw	r2,-8(fp)
    if( (read_data & 0x00ff) != 0x18)
    7360:	e0bffe17 	ldw	r2,-8(fp)
    7364:	10803fcc 	andi	r2,r2,255
    7368:	10800620 	cmpeqi	r2,r2,24
    736c:	10000a1e 	bne	r2,zero,7398 <oc_i2c_init+0x8c>
    {
    	bSuccess = FALSE;
    7370:	e03ffd15 	stw	zero,-12(fp)
       	read_data =IORD(i2c_base, 1);
    7374:	e0bfff17 	ldw	r2,-4(fp)
    7378:	10800104 	addi	r2,r2,4
    737c:	10800037 	ldwio	r2,0(r2)
    7380:	e0bffe15 	stw	r2,-8(fp)
		if((read_data & 0x00ff) != 0x00){
    7384:	e0bffe17 	ldw	r2,-8(fp)
    7388:	10803fcc 	andi	r2,r2,255
    738c:	10000d26 	beq	r2,zero,73c4 <oc_i2c_init+0xb8>
			bSuccess = FALSE;
    7390:	e03ffd15 	stw	zero,-12(fp)
    7394:	00000b06 	br	73c4 <oc_i2c_init+0xb8>
		}
    }
    else if (bSuccess){
    7398:	e0bffd17 	ldw	r2,-12(fp)
    739c:	10000926 	beq	r2,zero,73c4 <oc_i2c_init+0xb8>
    	read_data =IORD(i2c_base, 2);
    73a0:	e0bfff17 	ldw	r2,-4(fp)
    73a4:	10800204 	addi	r2,r2,8
    73a8:	10800037 	ldwio	r2,0(r2)
    73ac:	e0bffe15 	stw	r2,-8(fp)
        if( (read_data & 0x00ff) != 0x80 ){
    73b0:	e0bffe17 	ldw	r2,-8(fp)
    73b4:	10803fcc 	andi	r2,r2,255
    73b8:	10802020 	cmpeqi	r2,r2,128
    73bc:	1000011e 	bne	r2,zero,73c4 <oc_i2c_init+0xb8>
            bSuccess = FALSE;
    73c0:	e03ffd15 	stw	zero,-12(fp)
        }
    }

   if (bSuccess)
    73c4:	e0bffd17 	ldw	r2,-12(fp)
    73c8:	10000426 	beq	r2,zero,73dc <oc_i2c_init+0xd0>
       printf("\nI2C core is enabled! \r\n");
    73cc:	010001f4 	movhi	r4,7
    73d0:	21105004 	addi	r4,r4,16704
    73d4:	000af380 	call	af38 <puts>
    73d8:	00000306 	br	73e8 <oc_i2c_init+0xdc>
   else
       printf("\nI2C core is not enabled! \r\n");
    73dc:	010001f4 	movhi	r4,7
    73e0:	21105604 	addi	r4,r4,16728
    73e4:	000af380 	call	af38 <puts>

   return bSuccess;
    73e8:	e0bffd17 	ldw	r2,-12(fp)

}
    73ec:	e037883a 	mov	sp,fp
    73f0:	dfc00117 	ldw	ra,4(sp)
    73f4:	df000017 	ldw	fp,0(sp)
    73f8:	dec00204 	addi	sp,sp,8
    73fc:	f800283a 	ret

00007400 <ACK_single_check>:

bool  ACK_single_check(alt_32 i2c_base)
{
    7400:	defffb04 	addi	sp,sp,-20
    7404:	dfc00415 	stw	ra,16(sp)
    7408:	df000315 	stw	fp,12(sp)
    740c:	df000304 	addi	fp,sp,12
    7410:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
    7414:	00800044 	movi	r2,1
    7418:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;

    usleep(SLEEP_TIME);
    741c:	010003c4 	movi	r4,15
    7420:	0013bac0 	call	13bac <usleep>
    read_data =IORD(i2c_base, 4);
    7424:	e0bfff17 	ldw	r2,-4(fp)
    7428:	10800404 	addi	r2,r2,16
    742c:	10800037 	ldwio	r2,0(r2)
    7430:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
    7434:	e0bffe17 	ldw	r2,-8(fp)
    7438:	1080008c 	andi	r2,r2,2
    743c:	10000126 	beq	r2,zero,7444 <ACK_single_check+0x44>
            bSuccess = FALSE;
    7440:	e03ffd15 	stw	zero,-12(fp)
     if (bSuccess){
    7444:	e0bffd17 	ldw	r2,-12(fp)
    7448:	10000a26 	beq	r2,zero,7474 <ACK_single_check+0x74>
            usleep(SLEEP_TIME);
    744c:	010003c4 	movi	r4,15
    7450:	0013bac0 	call	13bac <usleep>
            read_data =IORD(i2c_base, 4);
    7454:	e0bfff17 	ldw	r2,-4(fp)
    7458:	10800404 	addi	r2,r2,16
    745c:	10800037 	ldwio	r2,0(r2)
    7460:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
    7464:	e0bffe17 	ldw	r2,-8(fp)
    7468:	1080200c 	andi	r2,r2,128
    746c:	10000126 	beq	r2,zero,7474 <ACK_single_check+0x74>
                    bSuccess = FALSE;
    7470:	e03ffd15 	stw	zero,-12(fp)
     }
    return bSuccess;
    7474:	e0bffd17 	ldw	r2,-12(fp)
}
    7478:	e037883a 	mov	sp,fp
    747c:	dfc00117 	ldw	ra,4(sp)
    7480:	df000017 	ldw	fp,0(sp)
    7484:	dec00204 	addi	sp,sp,8
    7488:	f800283a 	ret

0000748c <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
    748c:	defffb04 	addi	sp,sp,-20
    7490:	dfc00415 	stw	ra,16(sp)
    7494:	df000315 	stw	fp,12(sp)
    7498:	df000304 	addi	fp,sp,12
    749c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
    74a0:	e03ffd15 	stw	zero,-12(fp)
    int i=0;
    74a4:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
    74a8:	00000306 	br	74b8 <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
    74ac:	e13fff17 	ldw	r4,-4(fp)
    74b0:	00074000 	call	7400 <ACK_single_check>
    74b4:	e0bffd15 	stw	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
    74b8:	e0bffd17 	ldw	r2,-12(fp)
    74bc:	1000071e 	bne	r2,zero,74dc <ACK_check+0x50>
    74c0:	e0bffe17 	ldw	r2,-8(fp)
    74c4:	10800290 	cmplti	r2,r2,10
    74c8:	e0fffe17 	ldw	r3,-8(fp)
    74cc:	18c00044 	addi	r3,r3,1
    74d0:	e0fffe15 	stw	r3,-8(fp)
    74d4:	10803fcc 	andi	r2,r2,255
    74d8:	103ff41e 	bne	r2,zero,74ac <ACK_check+0x20>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
    74dc:	e0bffd17 	ldw	r2,-12(fp)
}
    74e0:	e037883a 	mov	sp,fp
    74e4:	dfc00117 	ldw	ra,4(sp)
    74e8:	df000017 	ldw	fp,0(sp)
    74ec:	dec00204 	addi	sp,sp,8
    74f0:	f800283a 	ret

000074f4 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
    74f4:	defff904 	addi	sp,sp,-28
    74f8:	dfc00615 	stw	ra,24(sp)
    74fc:	df000515 	stw	fp,20(sp)
    7500:	df000504 	addi	fp,sp,20
    7504:	e13ffc15 	stw	r4,-16(fp)
    7508:	2807883a 	mov	r3,r5
    750c:	3005883a 	mov	r2,r6
    7510:	e1ffff15 	stw	r7,-4(fp)
    7514:	e0fffd05 	stb	r3,-12(fp)
    7518:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;
   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
    751c:	e0bffd03 	ldbu	r2,-12(fp)
    7520:	e13ffc17 	ldw	r4,-16(fp)
    7524:	014000c4 	movi	r5,3
    7528:	100d883a 	mov	r6,r2
    752c:	00072600 	call	7260 <Write32_Data>
    7530:	1000051e 	bne	r2,zero,7548 <OC_I2C_Write+0x54>
       printf("OC_I2C_Write error[0]\r\n");
    7534:	010001f4 	movhi	r4,7
    7538:	21105d04 	addi	r4,r4,16756
    753c:	000af380 	call	af38 <puts>
       return FALSE;
    7540:	0005883a 	mov	r2,zero
    7544:	00006506 	br	76dc <OC_I2C_Write+0x1e8>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
    7548:	e13ffc17 	ldw	r4,-16(fp)
    754c:	01400104 	movi	r5,4
    7550:	01802404 	movi	r6,144
    7554:	00072600 	call	7260 <Write32_Data>
    7558:	1000051e 	bne	r2,zero,7570 <OC_I2C_Write+0x7c>
       printf("OC_I2C_Write error[1]\r\n");
    755c:	010001f4 	movhi	r4,7
    7560:	21106304 	addi	r4,r4,16780
    7564:	000af380 	call	af38 <puts>
       return FALSE;
    7568:	0005883a 	mov	r2,zero
    756c:	00005b06 	br	76dc <OC_I2C_Write+0x1e8>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
    7570:	e13ffc17 	ldw	r4,-16(fp)
    7574:	000748c0 	call	748c <ACK_check>
    7578:	1000051e 	bne	r2,zero,7590 <OC_I2C_Write+0x9c>
        printf("OC_I2C_Write error[2]\r\n");
    757c:	010001f4 	movhi	r4,7
    7580:	21106904 	addi	r4,r4,16804
    7584:	000af380 	call	af38 <puts>
        return FALSE;
    7588:	0005883a 	mov	r2,zero
    758c:	00005306 	br	76dc <OC_I2C_Write+0x1e8>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
    7590:	e0bffe03 	ldbu	r2,-8(fp)
    7594:	e13ffc17 	ldw	r4,-16(fp)
    7598:	014000c4 	movi	r5,3
    759c:	100d883a 	mov	r6,r2
    75a0:	00072600 	call	7260 <Write32_Data>
    75a4:	1000051e 	bne	r2,zero,75bc <OC_I2C_Write+0xc8>
       printf("OC_I2C_Write error[3]\r\n");
    75a8:	010001f4 	movhi	r4,7
    75ac:	21106f04 	addi	r4,r4,16828
    75b0:	000af380 	call	af38 <puts>
       return FALSE;
    75b4:	0005883a 	mov	r2,zero
    75b8:	00004806 	br	76dc <OC_I2C_Write+0x1e8>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
    75bc:	e13ffc17 	ldw	r4,-16(fp)
    75c0:	01400104 	movi	r5,4
    75c4:	01800404 	movi	r6,16
    75c8:	00072600 	call	7260 <Write32_Data>
    75cc:	1000051e 	bne	r2,zero,75e4 <OC_I2C_Write+0xf0>
        printf("OC_I2C_Write error[4]\r\n");
    75d0:	010001f4 	movhi	r4,7
    75d4:	21107504 	addi	r4,r4,16852
    75d8:	000af380 	call	af38 <puts>
        return FALSE;
    75dc:	0005883a 	mov	r2,zero
    75e0:	00003e06 	br	76dc <OC_I2C_Write+0x1e8>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
    75e4:	e13ffc17 	ldw	r4,-16(fp)
    75e8:	000748c0 	call	748c <ACK_check>
    75ec:	1000051e 	bne	r2,zero,7604 <OC_I2C_Write+0x110>
        printf("OC_I2C_Write error[5]\r\n");
    75f0:	010001f4 	movhi	r4,7
    75f4:	21107b04 	addi	r4,r4,16876
    75f8:	000af380 	call	af38 <puts>
        return FALSE;
    75fc:	0005883a 	mov	r2,zero
    7600:	00003606 	br	76dc <OC_I2C_Write+0x1e8>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
    7604:	e03ffb15 	stw	zero,-20(fp)
    7608:	00002406 	br	769c <OC_I2C_Write+0x1a8>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
    760c:	e0bffb17 	ldw	r2,-20(fp)
    7610:	e0ffff17 	ldw	r3,-4(fp)
    7614:	1885883a 	add	r2,r3,r2
    7618:	10800003 	ldbu	r2,0(r2)
    761c:	10803fcc 	andi	r2,r2,255
    7620:	e13ffc17 	ldw	r4,-16(fp)
    7624:	014000c4 	movi	r5,3
    7628:	100d883a 	mov	r6,r2
    762c:	00072600 	call	7260 <Write32_Data>
    7630:	1000051e 	bne	r2,zero,7648 <OC_I2C_Write+0x154>
              printf("OC_I2C_Write error[6]\r\n");
    7634:	010001f4 	movhi	r4,7
    7638:	21108104 	addi	r4,r4,16900
    763c:	000af380 	call	af38 <puts>
              return FALSE;
    7640:	0005883a 	mov	r2,zero
    7644:	00002506 	br	76dc <OC_I2C_Write+0x1e8>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
    7648:	e13ffc17 	ldw	r4,-16(fp)
    764c:	01400104 	movi	r5,4
    7650:	01800404 	movi	r6,16
    7654:	00072600 	call	7260 <Write32_Data>
    7658:	1000051e 	bne	r2,zero,7670 <OC_I2C_Write+0x17c>
             printf("OC_I2C_Write error[7]\r\n");
    765c:	010001f4 	movhi	r4,7
    7660:	21108704 	addi	r4,r4,16924
    7664:	000af380 	call	af38 <puts>
              return FALSE;
    7668:	0005883a 	mov	r2,zero
    766c:	00001b06 	br	76dc <OC_I2C_Write+0x1e8>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
    7670:	e13ffc17 	ldw	r4,-16(fp)
    7674:	000748c0 	call	748c <ACK_check>
    7678:	1000051e 	bne	r2,zero,7690 <OC_I2C_Write+0x19c>
              printf("OC_I2C_Write error[8]\r\n");
    767c:	010001f4 	movhi	r4,7
    7680:	21108d04 	addi	r4,r4,16948
    7684:	000af380 	call	af38 <puts>
              return FALSE;
    7688:	0005883a 	mov	r2,zero
    768c:	00001306 	br	76dc <OC_I2C_Write+0x1e8>
        return FALSE;
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
    7690:	e0bffb17 	ldw	r2,-20(fp)
    7694:	10800044 	addi	r2,r2,1
    7698:	e0bffb15 	stw	r2,-20(fp)
    769c:	e0fffb17 	ldw	r3,-20(fp)
    76a0:	e0800217 	ldw	r2,8(fp)
    76a4:	18bfd916 	blt	r3,r2,760c <OC_I2C_Write+0x118>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
    76a8:	e13ffc17 	ldw	r4,-16(fp)
    76ac:	01400104 	movi	r5,4
    76b0:	01801004 	movi	r6,64
    76b4:	00072600 	call	7260 <Write32_Data>
    76b8:	1000051e 	bne	r2,zero,76d0 <OC_I2C_Write+0x1dc>
         printf("OC_I2C_Write error[9]\r\n");
    76bc:	010001f4 	movhi	r4,7
    76c0:	21109304 	addi	r4,r4,16972
    76c4:	000af380 	call	af38 <puts>
         return FALSE;
    76c8:	0005883a 	mov	r2,zero
    76cc:	00000306 	br	76dc <OC_I2C_Write+0x1e8>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
    76d0:	010003c4 	movi	r4,15
    76d4:	0013bac0 	call	13bac <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
    76d8:	00800044 	movi	r2,1

}
    76dc:	e037883a 	mov	sp,fp
    76e0:	dfc00117 	ldw	ra,4(sp)
    76e4:	df000017 	ldw	fp,0(sp)
    76e8:	dec00204 	addi	sp,sp,8
    76ec:	f800283a 	ret

000076f0 <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
    76f0:	defffb04 	addi	sp,sp,-20
    76f4:	dfc00415 	stw	ra,16(sp)
    76f8:	df000315 	stw	fp,12(sp)
    76fc:	df000304 	addi	fp,sp,12
    7700:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(SLEEP_TIME);
    7704:	010003c4 	movi	r4,15
    7708:	0013bac0 	call	13bac <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
    770c:	e0bffe04 	addi	r2,fp,-8
    7710:	e13fff17 	ldw	r4,-4(fp)
    7714:	01400104 	movi	r5,4
    7718:	100d883a 	mov	r6,r2
    771c:	00072b40 	call	72b4 <Read32_Data>
    7720:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
    7724:	e0bffd17 	ldw	r2,-12(fp)
    7728:	10000426 	beq	r2,zero,773c <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
    772c:	e0bffe17 	ldw	r2,-8(fp)
    7730:	1080008c 	andi	r2,r2,2
    7734:	10000126 	beq	r2,zero,773c <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
    7738:	e03ffd15 	stw	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
    773c:	e0bffd17 	ldw	r2,-12(fp)

}
    7740:	e037883a 	mov	sp,fp
    7744:	dfc00117 	ldw	ra,4(sp)
    7748:	df000017 	ldw	fp,0(sp)
    774c:	dec00204 	addi	sp,sp,8
    7750:	f800283a 	ret

00007754 <OC_I2C_Read>:


bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
    7754:	defff804 	addi	sp,sp,-32
    7758:	dfc00715 	stw	ra,28(sp)
    775c:	df000615 	stw	fp,24(sp)
    7760:	df000604 	addi	fp,sp,24
    7764:	e13ffc15 	stw	r4,-16(fp)
    7768:	2807883a 	mov	r3,r5
    776c:	3005883a 	mov	r2,r6
    7770:	e1ffff15 	stw	r7,-4(fp)
    7774:	e0fffd05 	stb	r3,-12(fp)
    7778:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
    777c:	e0bffc17 	ldw	r2,-16(fp)
    7780:	10800304 	addi	r2,r2,12
    7784:	e0fffd03 	ldbu	r3,-12(fp)
    7788:	10c00035 	stwio	r3,0(r2)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
    778c:	e0bffc17 	ldw	r2,-16(fp)
    7790:	10800404 	addi	r2,r2,16
    7794:	00c02404 	movi	r3,144
    7798:	10c00035 	stwio	r3,0(r2)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
    779c:	e13ffc17 	ldw	r4,-16(fp)
    77a0:	000748c0 	call	748c <ACK_check>
    77a4:	1000051e 	bne	r2,zero,77bc <OC_I2C_Read+0x68>
       printf("OC_I2C_Read error[2]\r\n");
    77a8:	010001f4 	movhi	r4,7
    77ac:	21109904 	addi	r4,r4,16996
    77b0:	000af380 	call	af38 <puts>
       return FALSE;
    77b4:	0005883a 	mov	r2,zero
    77b8:	00004d06 	br	78f0 <OC_I2C_Read+0x19c>
   }
   IOWR(i2c_base, 3,sub_address);
    77bc:	e0bffc17 	ldw	r2,-16(fp)
    77c0:	10800304 	addi	r2,r2,12
    77c4:	e0fffe03 	ldbu	r3,-8(fp)
    77c8:	10c00035 	stwio	r3,0(r2)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
    77cc:	e0bffc17 	ldw	r2,-16(fp)
    77d0:	10800404 	addi	r2,r2,16
    77d4:	00c00404 	movi	r3,16
    77d8:	10c00035 	stwio	r3,0(r2)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
    77dc:	e13ffc17 	ldw	r4,-16(fp)
    77e0:	000748c0 	call	748c <ACK_check>
    77e4:	1000051e 	bne	r2,zero,77fc <OC_I2C_Read+0xa8>
        printf("OC_I2C_Read error[5]\r\n");
    77e8:	010001f4 	movhi	r4,7
    77ec:	21109f04 	addi	r4,r4,17020
    77f0:	000af380 	call	af38 <puts>
        return FALSE;
    77f4:	0005883a 	mov	r2,zero
    77f8:	00003d06 	br	78f0 <OC_I2C_Read+0x19c>
    }
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
    IOWR(i2c_base, 3,device_address|0x01);
    77fc:	e0bffc17 	ldw	r2,-16(fp)
    7800:	10800304 	addi	r2,r2,12
    7804:	e0fffd03 	ldbu	r3,-12(fp)
    7808:	18c00054 	ori	r3,r3,1
    780c:	18c03fcc 	andi	r3,r3,255
    7810:	10c00035 	stwio	r3,0(r2)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
    7814:	e0bffc17 	ldw	r2,-16(fp)
    7818:	10800404 	addi	r2,r2,16
    781c:	00c02404 	movi	r3,144
    7820:	10c00035 	stwio	r3,0(r2)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
    7824:	e13ffc17 	ldw	r4,-16(fp)
    7828:	000748c0 	call	748c <ACK_check>
    782c:	1000051e 	bne	r2,zero,7844 <OC_I2C_Read+0xf0>
        printf("OC_I2C_Read error[8]\r\n");
    7830:	010001f4 	movhi	r4,7
    7834:	2110a504 	addi	r4,r4,17044
    7838:	000af380 	call	af38 <puts>
        return FALSE;
    783c:	0005883a 	mov	r2,zero
    7840:	00002b06 	br	78f0 <OC_I2C_Read+0x19c>
    }

    for(i=0;i<nReadLength;i++){
    7844:	e03ffa15 	stw	zero,-24(fp)
    7848:	00001f06 	br	78c8 <OC_I2C_Read+0x174>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
    784c:	e0bffc17 	ldw	r2,-16(fp)
    7850:	10800404 	addi	r2,r2,16
    7854:	1007883a 	mov	r3,r2
    7858:	e0bffa17 	ldw	r2,-24(fp)
    785c:	11000044 	addi	r4,r2,1
    7860:	e0800217 	ldw	r2,8(fp)
    7864:	2080021e 	bne	r4,r2,7870 <OC_I2C_Read+0x11c>
    7868:	00800a04 	movi	r2,40
    786c:	00000106 	br	7874 <OC_I2C_Read+0x120>
    7870:	00800804 	movi	r2,32
    7874:	18800035 	stwio	r2,0(r3)

        if (!ACK_judge_for_read( i2c_base)){
    7878:	e13ffc17 	ldw	r4,-16(fp)
    787c:	00076f00 	call	76f0 <ACK_judge_for_read>
    7880:	1000051e 	bne	r2,zero,7898 <OC_I2C_Read+0x144>
            printf("OC_I2C_Read error[10]\r\n");
    7884:	010001f4 	movhi	r4,7
    7888:	2110ab04 	addi	r4,r4,17068
    788c:	000af380 	call	af38 <puts>
            return FALSE;
    7890:	0005883a 	mov	r2,zero
    7894:	00001606 	br	78f0 <OC_I2C_Read+0x19c>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
    7898:	e0bffc17 	ldw	r2,-16(fp)
    789c:	10800304 	addi	r2,r2,12
    78a0:	10800037 	ldwio	r2,0(r2)
    78a4:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
    78a8:	e0bffa17 	ldw	r2,-24(fp)
    78ac:	e0ffff17 	ldw	r3,-4(fp)
    78b0:	1885883a 	add	r2,r3,r2
    78b4:	e0fffb17 	ldw	r3,-20(fp)
    78b8:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
    78bc:	e0bffa17 	ldw	r2,-24(fp)
    78c0:	10800044 	addi	r2,r2,1
    78c4:	e0bffa15 	stw	r2,-24(fp)
    78c8:	e0fffa17 	ldw	r3,-24(fp)
    78cc:	e0800217 	ldw	r2,8(fp)
    78d0:	18bfde16 	blt	r3,r2,784c <OC_I2C_Read+0xf8>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
    78d4:	e0bffc17 	ldw	r2,-16(fp)
    78d8:	10800404 	addi	r2,r2,16
    78dc:	00c01004 	movi	r3,64
    78e0:	10c00035 	stwio	r3,0(r2)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
    78e4:	010003c4 	movi	r4,15
    78e8:	0013bac0 	call	13bac <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
    78ec:	00800044 	movi	r2,1

}
    78f0:	e037883a 	mov	sp,fp
    78f4:	dfc00117 	ldw	ra,4(sp)
    78f8:	df000017 	ldw	fp,0(sp)
    78fc:	dec00204 	addi	sp,sp,8
    7900:	f800283a 	ret

00007904 <OC_I2CL_Write>:
//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,int sub_address,alt_u8 *pData, int nWriteLength)
    {
    7904:	defff804 	addi	sp,sp,-32
    7908:	dfc00715 	stw	ra,28(sp)
    790c:	df000615 	stw	fp,24(sp)
    7910:	df000604 	addi	fp,sp,24
    7914:	e13ffc15 	stw	r4,-16(fp)
    7918:	2805883a 	mov	r2,r5
    791c:	e1bffe15 	stw	r6,-8(fp)
    7920:	e1ffff15 	stw	r7,-4(fp)
    7924:	e0bffd05 	stb	r2,-12(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
    7928:	e0bffe17 	ldw	r2,-8(fp)
    792c:	1005d23a 	srai	r2,r2,8
    7930:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
    7934:	e0bffe17 	ldw	r2,-8(fp)
    7938:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
    793c:	e0bffd03 	ldbu	r2,-12(fp)
    7940:	e13ffc17 	ldw	r4,-16(fp)
    7944:	014000c4 	movi	r5,3
    7948:	100d883a 	mov	r6,r2
    794c:	00072600 	call	7260 <Write32_Data>
    7950:	1000021e 	bne	r2,zero,795c <OC_I2CL_Write+0x58>
       return FALSE;
    7954:	0005883a 	mov	r2,zero
    7958:	00005b06 	br	7ac8 <OC_I2CL_Write+0x1c4>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
    795c:	e13ffc17 	ldw	r4,-16(fp)
    7960:	01400104 	movi	r5,4
    7964:	01802404 	movi	r6,144
    7968:	00072600 	call	7260 <Write32_Data>
    796c:	1000021e 	bne	r2,zero,7978 <OC_I2CL_Write+0x74>
       return FALSE;
    7970:	0005883a 	mov	r2,zero
    7974:	00005406 	br	7ac8 <OC_I2CL_Write+0x1c4>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7978:	e13ffc17 	ldw	r4,-16(fp)
    797c:	000748c0 	call	748c <ACK_check>
    7980:	1000021e 	bne	r2,zero,798c <OC_I2CL_Write+0x88>
        return FALSE;
    7984:	0005883a 	mov	r2,zero
    7988:	00004f06 	br	7ac8 <OC_I2CL_Write+0x1c4>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
    798c:	e0bffb03 	ldbu	r2,-20(fp)
    7990:	e13ffc17 	ldw	r4,-16(fp)
    7994:	014000c4 	movi	r5,3
    7998:	100d883a 	mov	r6,r2
    799c:	00072600 	call	7260 <Write32_Data>
    79a0:	1000021e 	bne	r2,zero,79ac <OC_I2CL_Write+0xa8>
       return FALSE;
    79a4:	0005883a 	mov	r2,zero
    79a8:	00004706 	br	7ac8 <OC_I2CL_Write+0x1c4>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
    79ac:	e13ffc17 	ldw	r4,-16(fp)
    79b0:	01400104 	movi	r5,4
    79b4:	01800404 	movi	r6,16
    79b8:	00072600 	call	7260 <Write32_Data>
    79bc:	1000021e 	bne	r2,zero,79c8 <OC_I2CL_Write+0xc4>
        return FALSE;
    79c0:	0005883a 	mov	r2,zero
    79c4:	00004006 	br	7ac8 <OC_I2CL_Write+0x1c4>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    79c8:	e13ffc17 	ldw	r4,-16(fp)
    79cc:	000748c0 	call	748c <ACK_check>
    79d0:	1000021e 	bne	r2,zero,79dc <OC_I2CL_Write+0xd8>
        return FALSE;
    79d4:	0005883a 	mov	r2,zero
    79d8:	00003b06 	br	7ac8 <OC_I2CL_Write+0x1c4>
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
    79dc:	e0bffb43 	ldbu	r2,-19(fp)
    79e0:	e13ffc17 	ldw	r4,-16(fp)
    79e4:	014000c4 	movi	r5,3
    79e8:	100d883a 	mov	r6,r2
    79ec:	00072600 	call	7260 <Write32_Data>
    79f0:	1000021e 	bne	r2,zero,79fc <OC_I2CL_Write+0xf8>
       return FALSE;
    79f4:	0005883a 	mov	r2,zero
    79f8:	00003306 	br	7ac8 <OC_I2CL_Write+0x1c4>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
    79fc:	e13ffc17 	ldw	r4,-16(fp)
    7a00:	01400104 	movi	r5,4
    7a04:	01800404 	movi	r6,16
    7a08:	00072600 	call	7260 <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7a0c:	e13ffc17 	ldw	r4,-16(fp)
    7a10:	000748c0 	call	748c <ACK_check>
    7a14:	1000021e 	bne	r2,zero,7a20 <OC_I2CL_Write+0x11c>
        return FALSE;
    7a18:	0005883a 	mov	r2,zero
    7a1c:	00002a06 	br	7ac8 <OC_I2CL_Write+0x1c4>
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
    7a20:	e03ffa15 	stw	zero,-24(fp)
    7a24:	00001b06 	br	7a94 <OC_I2CL_Write+0x190>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
    7a28:	e0bffa17 	ldw	r2,-24(fp)
    7a2c:	e0ffff17 	ldw	r3,-4(fp)
    7a30:	1885883a 	add	r2,r3,r2
    7a34:	10800003 	ldbu	r2,0(r2)
    7a38:	10803fcc 	andi	r2,r2,255
    7a3c:	e13ffc17 	ldw	r4,-16(fp)
    7a40:	014000c4 	movi	r5,3
    7a44:	100d883a 	mov	r6,r2
    7a48:	00072600 	call	7260 <Write32_Data>
    7a4c:	1000021e 	bne	r2,zero,7a58 <OC_I2CL_Write+0x154>
            return FALSE;
    7a50:	0005883a 	mov	r2,zero
    7a54:	00001c06 	br	7ac8 <OC_I2CL_Write+0x1c4>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
    7a58:	e13ffc17 	ldw	r4,-16(fp)
    7a5c:	01400104 	movi	r5,4
    7a60:	01800404 	movi	r6,16
    7a64:	00072600 	call	7260 <Write32_Data>
    7a68:	1000021e 	bne	r2,zero,7a74 <OC_I2CL_Write+0x170>
            return FALSE;
    7a6c:	0005883a 	mov	r2,zero
    7a70:	00001506 	br	7ac8 <OC_I2CL_Write+0x1c4>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base))
    7a74:	e13ffc17 	ldw	r4,-16(fp)
    7a78:	000748c0 	call	748c <ACK_check>
    7a7c:	1000021e 	bne	r2,zero,7a88 <OC_I2CL_Write+0x184>
             return FALSE;
    7a80:	0005883a 	mov	r2,zero
    7a84:	00001006 	br	7ac8 <OC_I2CL_Write+0x1c4>
    if(!ACK_check( i2c_base))
        return FALSE;
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
    7a88:	e0bffa17 	ldw	r2,-24(fp)
    7a8c:	10800044 	addi	r2,r2,1
    7a90:	e0bffa15 	stw	r2,-24(fp)
    7a94:	e0fffa17 	ldw	r3,-24(fp)
    7a98:	e0800217 	ldw	r2,8(fp)
    7a9c:	18bfe216 	blt	r3,r2,7a28 <OC_I2CL_Write+0x124>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
    7aa0:	e13ffc17 	ldw	r4,-16(fp)
    7aa4:	01400104 	movi	r5,4
    7aa8:	01801004 	movi	r6,64
    7aac:	00072600 	call	7260 <Write32_Data>
    7ab0:	1000021e 	bne	r2,zero,7abc <OC_I2CL_Write+0x1b8>
         return FALSE;
    7ab4:	0005883a 	mov	r2,zero
    7ab8:	00000306 	br	7ac8 <OC_I2CL_Write+0x1c4>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
    7abc:	010003c4 	movi	r4,15
    7ac0:	0013bac0 	call	13bac <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
    7ac4:	00800044 	movi	r2,1
}
    7ac8:	e037883a 	mov	sp,fp
    7acc:	dfc00117 	ldw	ra,4(sp)
    7ad0:	df000017 	ldw	fp,0(sp)
    7ad4:	dec00204 	addi	sp,sp,8
    7ad8:	f800283a 	ret

00007adc <OC_I2CL_Read>:


bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address,int sub_address, alt_u8 *pData8){
    7adc:	defff804 	addi	sp,sp,-32
    7ae0:	dfc00715 	stw	ra,28(sp)
    7ae4:	df000615 	stw	fp,24(sp)
    7ae8:	df000604 	addi	fp,sp,24
    7aec:	e13ffc15 	stw	r4,-16(fp)
    7af0:	2805883a 	mov	r2,r5
    7af4:	e1bffe15 	stw	r6,-8(fp)
    7af8:	e1ffff15 	stw	r7,-4(fp)
    7afc:	e0bffd05 	stb	r2,-12(fp)
    //DWORD reg_data = 0x0;
    alt_32 Data32;// = 0x0;

    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
    7b00:	e0bffe17 	ldw	r2,-8(fp)
    7b04:	1005d23a 	srai	r2,r2,8
    7b08:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
    7b0c:	e0bffe17 	ldw	r2,-8(fp)
    7b10:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
    7b14:	e0bffd03 	ldbu	r2,-12(fp)
    7b18:	e13ffc17 	ldw	r4,-16(fp)
    7b1c:	014000c4 	movi	r5,3
    7b20:	100d883a 	mov	r6,r2
    7b24:	00072600 	call	7260 <Write32_Data>
    7b28:	1000021e 	bne	r2,zero,7b34 <OC_I2CL_Read+0x58>
       return FALSE;
    7b2c:	0005883a 	mov	r2,zero
    7b30:	00006c06 	br	7ce4 <OC_I2CL_Read+0x208>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
    7b34:	e13ffc17 	ldw	r4,-16(fp)
    7b38:	01400104 	movi	r5,4
    7b3c:	01802404 	movi	r6,144
    7b40:	00072600 	call	7260 <Write32_Data>
    7b44:	1000021e 	bne	r2,zero,7b50 <OC_I2CL_Read+0x74>
       return FALSE;
    7b48:	0005883a 	mov	r2,zero
    7b4c:	00006506 	br	7ce4 <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7b50:	e13ffc17 	ldw	r4,-16(fp)
    7b54:	000748c0 	call	748c <ACK_check>
    7b58:	1000021e 	bne	r2,zero,7b64 <OC_I2CL_Read+0x88>
        return FALSE;
    7b5c:	0005883a 	mov	r2,zero
    7b60:	00006006 	br	7ce4 <OC_I2CL_Read+0x208>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
    7b64:	e0bffa03 	ldbu	r2,-24(fp)
    7b68:	e13ffc17 	ldw	r4,-16(fp)
    7b6c:	014000c4 	movi	r5,3
    7b70:	100d883a 	mov	r6,r2
    7b74:	00072600 	call	7260 <Write32_Data>
    7b78:	1000021e 	bne	r2,zero,7b84 <OC_I2CL_Read+0xa8>
       return FALSE;
    7b7c:	0005883a 	mov	r2,zero
    7b80:	00005806 	br	7ce4 <OC_I2CL_Read+0x208>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
    7b84:	e13ffc17 	ldw	r4,-16(fp)
    7b88:	01400104 	movi	r5,4
    7b8c:	01800404 	movi	r6,16
    7b90:	00072600 	call	7260 <Write32_Data>
    7b94:	1000021e 	bne	r2,zero,7ba0 <OC_I2CL_Read+0xc4>
        return FALSE;
    7b98:	0005883a 	mov	r2,zero
    7b9c:	00005106 	br	7ce4 <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7ba0:	e13ffc17 	ldw	r4,-16(fp)
    7ba4:	000748c0 	call	748c <ACK_check>
    7ba8:	1000021e 	bne	r2,zero,7bb4 <OC_I2CL_Read+0xd8>
        return FALSE;
    7bac:	0005883a 	mov	r2,zero
    7bb0:	00004c06 	br	7ce4 <OC_I2CL_Read+0x208>
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
    7bb4:	e0bffa43 	ldbu	r2,-23(fp)
    7bb8:	e13ffc17 	ldw	r4,-16(fp)
    7bbc:	014000c4 	movi	r5,3
    7bc0:	100d883a 	mov	r6,r2
    7bc4:	00072600 	call	7260 <Write32_Data>
    7bc8:	1000021e 	bne	r2,zero,7bd4 <OC_I2CL_Read+0xf8>
       return FALSE;
    7bcc:	0005883a 	mov	r2,zero
    7bd0:	00004406 	br	7ce4 <OC_I2CL_Read+0x208>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
    7bd4:	e13ffc17 	ldw	r4,-16(fp)
    7bd8:	01400104 	movi	r5,4
    7bdc:	01800404 	movi	r6,16
    7be0:	00072600 	call	7260 <Write32_Data>
    7be4:	1000021e 	bne	r2,zero,7bf0 <OC_I2CL_Read+0x114>
        return FALSE;
    7be8:	0005883a 	mov	r2,zero
    7bec:	00003d06 	br	7ce4 <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7bf0:	e13ffc17 	ldw	r4,-16(fp)
    7bf4:	000748c0 	call	748c <ACK_check>
    7bf8:	1000021e 	bne	r2,zero,7c04 <OC_I2CL_Read+0x128>
        return FALSE;
    7bfc:	0005883a 	mov	r2,zero
    7c00:	00003806 	br	7ce4 <OC_I2CL_Read+0x208>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
    7c04:	e0bffd03 	ldbu	r2,-12(fp)
    7c08:	10800054 	ori	r2,r2,1
    7c0c:	10803fcc 	andi	r2,r2,255
    7c10:	e13ffc17 	ldw	r4,-16(fp)
    7c14:	014000c4 	movi	r5,3
    7c18:	100d883a 	mov	r6,r2
    7c1c:	00072600 	call	7260 <Write32_Data>
    7c20:	1000021e 	bne	r2,zero,7c2c <OC_I2CL_Read+0x150>
         return FALSE;
    7c24:	0005883a 	mov	r2,zero
    7c28:	00002e06 	br	7ce4 <OC_I2CL_Read+0x208>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
    7c2c:	e13ffc17 	ldw	r4,-16(fp)
    7c30:	01400104 	movi	r5,4
    7c34:	01802404 	movi	r6,144
    7c38:	00072600 	call	7260 <Write32_Data>
    7c3c:	1000021e 	bne	r2,zero,7c48 <OC_I2CL_Read+0x16c>
         return FALSE;
    7c40:	0005883a 	mov	r2,zero
    7c44:	00002706 	br	7ce4 <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7c48:	e13ffc17 	ldw	r4,-16(fp)
    7c4c:	000748c0 	call	748c <ACK_check>
    7c50:	1000021e 	bne	r2,zero,7c5c <OC_I2CL_Read+0x180>
        return FALSE;
    7c54:	0005883a 	mov	r2,zero
    7c58:	00002206 	br	7ce4 <OC_I2CL_Read+0x208>

       //read the rxr data


   //set the RD and ACK bit(bit5 and bit3)
    if (!Write32_Data( i2c_base, 4,0x28))
    7c5c:	e13ffc17 	ldw	r4,-16(fp)
    7c60:	01400104 	movi	r5,4
    7c64:	01800a04 	movi	r6,40
    7c68:	00072600 	call	7260 <Write32_Data>
    7c6c:	1000021e 	bne	r2,zero,7c78 <OC_I2CL_Read+0x19c>
        return FALSE;
    7c70:	0005883a 	mov	r2,zero
    7c74:	00001b06 	br	7ce4 <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_judge_for_read( i2c_base))
    7c78:	e13ffc17 	ldw	r4,-16(fp)
    7c7c:	00076f00 	call	76f0 <ACK_judge_for_read>
    7c80:	1000021e 	bne	r2,zero,7c8c <OC_I2CL_Read+0x1b0>
        return FALSE;
    7c84:	0005883a 	mov	r2,zero
    7c88:	00001606 	br	7ce4 <OC_I2CL_Read+0x208>

//    printf("\n read receive ACK-device address(read)! \n");
    if (!Read32_Data ( i2c_base, 3, &Data32))
    7c8c:	e0bffb04 	addi	r2,fp,-20
    7c90:	e13ffc17 	ldw	r4,-16(fp)
    7c94:	014000c4 	movi	r5,3
    7c98:	100d883a 	mov	r6,r2
    7c9c:	00072b40 	call	72b4 <Read32_Data>
    7ca0:	1000021e 	bne	r2,zero,7cac <OC_I2CL_Read+0x1d0>
        return FALSE;
    7ca4:	0005883a 	mov	r2,zero
    7ca8:	00000e06 	br	7ce4 <OC_I2CL_Read+0x208>

    *pData8 =  Data32 & 0xff;
    7cac:	e0bffb17 	ldw	r2,-20(fp)
    7cb0:	1007883a 	mov	r3,r2
    7cb4:	e0bfff17 	ldw	r2,-4(fp)
    7cb8:	10c00005 	stb	r3,0(r2)


   if (!Write32_Data( i2c_base, 4,0x40))
    7cbc:	e13ffc17 	ldw	r4,-16(fp)
    7cc0:	01400104 	movi	r5,4
    7cc4:	01801004 	movi	r6,64
    7cc8:	00072600 	call	7260 <Write32_Data>
    7ccc:	1000021e 	bne	r2,zero,7cd8 <OC_I2CL_Read+0x1fc>
       return FALSE;
    7cd0:	0005883a 	mov	r2,zero
    7cd4:	00000306 	br	7ce4 <OC_I2CL_Read+0x208>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
    7cd8:	010003c4 	movi	r4,15
    7cdc:	0013bac0 	call	13bac <usleep>

   return TRUE;
    7ce0:	00800044 	movi	r2,1

}
    7ce4:	e037883a 	mov	sp,fp
    7ce8:	dfc00117 	ldw	ra,4(sp)
    7cec:	df000017 	ldw	fp,0(sp)
    7cf0:	dec00204 	addi	sp,sp,8
    7cf4:	f800283a 	ret

00007cf8 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
    7cf8:	defffd04 	addi	sp,sp,-12
    7cfc:	dfc00215 	stw	ra,8(sp)
    7d00:	df000115 	stw	fp,4(sp)
    7d04:	df000104 	addi	fp,sp,4
    7d08:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
    7d0c:	e13fff17 	ldw	r4,-4(fp)
    7d10:	000ae540 	call	ae54 <printf>
}
    7d14:	e037883a 	mov	sp,fp
    7d18:	dfc00117 	ldw	ra,4(sp)
    7d1c:	df000017 	ldw	fp,0(sp)
    7d20:	dec00204 	addi	sp,sp,8
    7d24:	f800283a 	ret

00007d28 <myprintf>:





int myprintf(char *format, ...){
    7d28:	deff7804 	addi	sp,sp,-544
    7d2c:	dfc08415 	stw	ra,528(sp)
    7d30:	df008315 	stw	fp,524(sp)
    7d34:	df008304 	addi	fp,sp,524
    7d38:	e1400215 	stw	r5,8(fp)
    7d3c:	e1800315 	stw	r6,12(fp)
    7d40:	e1c00415 	stw	r7,16(fp)
    7d44:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    7d48:	e0800204 	addi	r2,fp,8
    7d4c:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
    7d50:	e0bffe17 	ldw	r2,-8(fp)
    7d54:	e0ff7e04 	addi	r3,fp,-520
    7d58:	1809883a 	mov	r4,r3
    7d5c:	01408004 	movi	r5,512
    7d60:	e1bfff17 	ldw	r6,-4(fp)
    7d64:	100f883a 	mov	r7,r2
    7d68:	000d1140 	call	d114 <vsnprintf>
    7d6c:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
    7d70:	e0bf7e04 	addi	r2,fp,-520
    7d74:	1009883a 	mov	r4,r2
    7d78:	0007cf80 	call	7cf8 <debug_output>

    return rc;    
    7d7c:	e0bf7d17 	ldw	r2,-524(fp)
}
    7d80:	e037883a 	mov	sp,fp
    7d84:	dfc00117 	ldw	ra,4(sp)
    7d88:	df000017 	ldw	fp,0(sp)
    7d8c:	dec00504 	addi	sp,sp,20
    7d90:	f800283a 	ret

00007d94 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
    7d94:	defff704 	addi	sp,sp,-36
    7d98:	dfc00815 	stw	ra,32(sp)
    7d9c:	df000715 	stw	fp,28(sp)
    7da0:	df000704 	addi	fp,sp,28
    7da4:	e13ffe15 	stw	r4,-8(fp)
    7da8:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
    7dac:	e03ff915 	stw	zero,-28(fp)
    7db0:	00001106 	br	7df8 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
    7db4:	e0bff917 	ldw	r2,-28(fp)
    7db8:	e0fffe17 	ldw	r3,-8(fp)
    7dbc:	1885883a 	add	r2,r3,r2
    7dc0:	10800003 	ldbu	r2,0(r2)
    7dc4:	10803fcc 	andi	r2,r2,255
    7dc8:	e0fffa04 	addi	r3,fp,-24
    7dcc:	1809883a 	mov	r4,r3
    7dd0:	014001f4 	movhi	r5,7
    7dd4:	2950b104 	addi	r5,r5,17092
    7dd8:	100d883a 	mov	r6,r2
    7ddc:	000b0080 	call	b008 <sprintf>
        DEBUG((szText));
    7de0:	e0bffa04 	addi	r2,fp,-24
    7de4:	1009883a 	mov	r4,r2
    7de8:	0007d280 	call	7d28 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
    7dec:	e0bff917 	ldw	r2,-28(fp)
    7df0:	10800044 	addi	r2,r2,1
    7df4:	e0bff915 	stw	r2,-28(fp)
    7df8:	e0fff917 	ldw	r3,-28(fp)
    7dfc:	e0bfff17 	ldw	r2,-4(fp)
    7e00:	18bfec16 	blt	r3,r2,7db4 <myprintf_hexarray+0x20>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
    7e04:	e0bfff17 	ldw	r2,-4(fp)
}
    7e08:	e037883a 	mov	sp,fp
    7e0c:	dfc00117 	ldw	ra,4(sp)
    7e10:	df000017 	ldw	fp,0(sp)
    7e14:	dec00204 	addi	sp,sp,8
    7e18:	f800283a 	ret

00007e1c <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    7e1c:	defff704 	addi	sp,sp,-36
    7e20:	dfc00815 	stw	ra,32(sp)
    7e24:	df000715 	stw	fp,28(sp)
    7e28:	df000704 	addi	fp,sp,28
    7e2c:	e13ffe15 	stw	r4,-8(fp)
    7e30:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
    7e34:	e03ff915 	stw	zero,-28(fp)
    7e38:	00001206 	br	7e84 <myprintf_dwordarray+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
    7e3c:	e0bff917 	ldw	r2,-28(fp)
    7e40:	1085883a 	add	r2,r2,r2
    7e44:	1085883a 	add	r2,r2,r2
    7e48:	e0fffe17 	ldw	r3,-8(fp)
    7e4c:	1885883a 	add	r2,r3,r2
    7e50:	10800017 	ldw	r2,0(r2)
    7e54:	e0fffa04 	addi	r3,fp,-24
    7e58:	1809883a 	mov	r4,r3
    7e5c:	014001f4 	movhi	r5,7
    7e60:	2950b304 	addi	r5,r5,17100
    7e64:	100d883a 	mov	r6,r2
    7e68:	000b0080 	call	b008 <sprintf>
        DEBUG((szText));
    7e6c:	e0bffa04 	addi	r2,fp,-24
    7e70:	1009883a 	mov	r4,r2
    7e74:	0007d280 	call	7d28 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
    7e78:	e0bff917 	ldw	r2,-28(fp)
    7e7c:	10800044 	addi	r2,r2,1
    7e80:	e0bff915 	stw	r2,-28(fp)
    7e84:	e0fff917 	ldw	r3,-28(fp)
    7e88:	e0bfff17 	ldw	r2,-4(fp)
    7e8c:	18bfeb16 	blt	r3,r2,7e3c <myprintf_dwordarray+0x20>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
    7e90:	e0bfff17 	ldw	r2,-4(fp)
}
    7e94:	e037883a 	mov	sp,fp
    7e98:	dfc00117 	ldw	ra,4(sp)
    7e9c:	df000017 	ldw	fp,0(sp)
    7ea0:	dec00204 	addi	sp,sp,8
    7ea4:	f800283a 	ret

00007ea8 <mtc2_QueryData>:
#include "alt_types.h"

#define TRUE 1


static void mtc2_QueryData(MTC2_INFO *p){
    7ea8:	deffe804 	addi	sp,sp,-96
    7eac:	dfc01715 	stw	ra,92(sp)
    7eb0:	df001615 	stw	fp,88(sp)
    7eb4:	df001604 	addi	fp,sp,88
    7eb8:	e13fff15 	stw	r4,-4(fp)
    MTC2_EVENT *pEvent, *pOldEvent;
    unsigned char reg_data[31];
    unsigned long x1,y1,x2,y2,x3,y3,x4,y4,x5,y5;
    if(OC_I2C_Read(p->TOUCH_I2C_BASE,I2C_FT5316_ADDR,0x00,reg_data,31))
    7ebc:	e0bfff17 	ldw	r2,-4(fp)
    7ec0:	10800017 	ldw	r2,0(r2)
    7ec4:	1007883a 	mov	r3,r2
    7ec8:	e0bff704 	addi	r2,fp,-36
    7ecc:	010007c4 	movi	r4,31
    7ed0:	d9000015 	stw	r4,0(sp)
    7ed4:	1809883a 	mov	r4,r3
    7ed8:	01401c04 	movi	r5,112
    7edc:	000d883a 	mov	r6,zero
    7ee0:	100f883a 	mov	r7,r2
    7ee4:	00077540 	call	7754 <OC_I2C_Read>
    7ee8:	1000a426 	beq	r2,zero,817c <mtc2_QueryData+0x2d4>
        {
 //   			if(reg_data[1]>0)
//    				printf("reg_data[1]=%x\n",reg_data[1]);
    			 pEvent = (MTC2_EVENT *)malloc(sizeof(MTC2_EVENT));
    7eec:	01000584 	movi	r4,22
    7ef0:	000a4600 	call	a460 <malloc>
    7ef4:	e0bfeb15 	stw	r2,-84(fp)
    			 pEvent->Event=reg_data[1];
    7ef8:	e0fff743 	ldbu	r3,-35(fp)
    7efc:	e0bfeb17 	ldw	r2,-84(fp)
    7f00:	10c00005 	stb	r3,0(r2)
        		 pEvent->TouchNum = reg_data[2];
    7f04:	e0fff783 	ldbu	r3,-34(fp)
    7f08:	e0bfeb17 	ldw	r2,-84(fp)
    7f0c:	10c00045 	stb	r3,1(r2)
        		 x1 = ((reg_data[3]&0x0f)<<8)|reg_data[4];
    7f10:	e0bff7c3 	ldbu	r2,-33(fp)
    7f14:	10803fcc 	andi	r2,r2,255
    7f18:	108003cc 	andi	r2,r2,15
    7f1c:	1006923a 	slli	r3,r2,8
    7f20:	e0bff803 	ldbu	r2,-32(fp)
    7f24:	10803fcc 	andi	r2,r2,255
    7f28:	1884b03a 	or	r2,r3,r2
    7f2c:	e0bfec15 	stw	r2,-80(fp)
        		 y1 = ((reg_data[5]&0x0f)<<8)|reg_data[6];
    7f30:	e0bff843 	ldbu	r2,-31(fp)
    7f34:	10803fcc 	andi	r2,r2,255
    7f38:	108003cc 	andi	r2,r2,15
    7f3c:	1006923a 	slli	r3,r2,8
    7f40:	e0bff883 	ldbu	r2,-30(fp)
    7f44:	10803fcc 	andi	r2,r2,255
    7f48:	1884b03a 	or	r2,r3,r2
    7f4c:	e0bfed15 	stw	r2,-76(fp)
        		 x2 = ((reg_data[9]&0x0f)<<8)|reg_data[10];
    7f50:	e0bff943 	ldbu	r2,-27(fp)
    7f54:	10803fcc 	andi	r2,r2,255
    7f58:	108003cc 	andi	r2,r2,15
    7f5c:	1006923a 	slli	r3,r2,8
    7f60:	e0bff983 	ldbu	r2,-26(fp)
    7f64:	10803fcc 	andi	r2,r2,255
    7f68:	1884b03a 	or	r2,r3,r2
    7f6c:	e0bfee15 	stw	r2,-72(fp)
        		 y2 = ((reg_data[11]&0x0f)<<8)|reg_data[12];
    7f70:	e0bff9c3 	ldbu	r2,-25(fp)
    7f74:	10803fcc 	andi	r2,r2,255
    7f78:	108003cc 	andi	r2,r2,15
    7f7c:	1006923a 	slli	r3,r2,8
    7f80:	e0bffa03 	ldbu	r2,-24(fp)
    7f84:	10803fcc 	andi	r2,r2,255
    7f88:	1884b03a 	or	r2,r3,r2
    7f8c:	e0bfef15 	stw	r2,-68(fp)

        		 x3 = ((reg_data[15]&0x0f)<<8)|reg_data[16];
    7f90:	e0bffac3 	ldbu	r2,-21(fp)
    7f94:	10803fcc 	andi	r2,r2,255
    7f98:	108003cc 	andi	r2,r2,15
    7f9c:	1006923a 	slli	r3,r2,8
    7fa0:	e0bffb03 	ldbu	r2,-20(fp)
    7fa4:	10803fcc 	andi	r2,r2,255
    7fa8:	1884b03a 	or	r2,r3,r2
    7fac:	e0bff015 	stw	r2,-64(fp)
				 y3 = ((reg_data[17]&0x0f)<<8)|reg_data[18];
    7fb0:	e0bffb43 	ldbu	r2,-19(fp)
    7fb4:	10803fcc 	andi	r2,r2,255
    7fb8:	108003cc 	andi	r2,r2,15
    7fbc:	1006923a 	slli	r3,r2,8
    7fc0:	e0bffb83 	ldbu	r2,-18(fp)
    7fc4:	10803fcc 	andi	r2,r2,255
    7fc8:	1884b03a 	or	r2,r3,r2
    7fcc:	e0bff115 	stw	r2,-60(fp)

				 x4 = ((reg_data[21]&0x0f)<<8)|reg_data[22];
    7fd0:	e0bffc43 	ldbu	r2,-15(fp)
    7fd4:	10803fcc 	andi	r2,r2,255
    7fd8:	108003cc 	andi	r2,r2,15
    7fdc:	1006923a 	slli	r3,r2,8
    7fe0:	e0bffc83 	ldbu	r2,-14(fp)
    7fe4:	10803fcc 	andi	r2,r2,255
    7fe8:	1884b03a 	or	r2,r3,r2
    7fec:	e0bff215 	stw	r2,-56(fp)
				 y4 = ((reg_data[23]&0x0f)<<8)|reg_data[24];
    7ff0:	e0bffcc3 	ldbu	r2,-13(fp)
    7ff4:	10803fcc 	andi	r2,r2,255
    7ff8:	108003cc 	andi	r2,r2,15
    7ffc:	1006923a 	slli	r3,r2,8
    8000:	e0bffd03 	ldbu	r2,-12(fp)
    8004:	10803fcc 	andi	r2,r2,255
    8008:	1884b03a 	or	r2,r3,r2
    800c:	e0bff315 	stw	r2,-52(fp)

				 x5 = ((reg_data[27]&0x0f)<<8)|reg_data[28];
    8010:	e0bffdc3 	ldbu	r2,-9(fp)
    8014:	10803fcc 	andi	r2,r2,255
    8018:	108003cc 	andi	r2,r2,15
    801c:	1006923a 	slli	r3,r2,8
    8020:	e0bffe03 	ldbu	r2,-8(fp)
    8024:	10803fcc 	andi	r2,r2,255
    8028:	1884b03a 	or	r2,r3,r2
    802c:	e0bff415 	stw	r2,-48(fp)
				 y5 = ((reg_data[29]&0x0f)<<8)|reg_data[30];
    8030:	e0bffe43 	ldbu	r2,-7(fp)
    8034:	10803fcc 	andi	r2,r2,255
    8038:	108003cc 	andi	r2,r2,15
    803c:	1006923a 	slli	r3,r2,8
    8040:	e0bffe83 	ldbu	r2,-6(fp)
    8044:	10803fcc 	andi	r2,r2,255
    8048:	1884b03a 	or	r2,r3,r2
    804c:	e0bff515 	stw	r2,-44(fp)
				 //the register value (1024,600)
				 //change the value to (800,480)
        		 pEvent->x1=(x1*800)>>10;
    8050:	e13fec17 	ldw	r4,-80(fp)
    8054:	0140c804 	movi	r5,800
    8058:	0009dec0 	call	9dec <__mulsi3>
    805c:	1004d2ba 	srli	r2,r2,10
    8060:	1007883a 	mov	r3,r2
    8064:	e0bfeb17 	ldw	r2,-84(fp)
    8068:	10c0008d 	sth	r3,2(r2)
        		 pEvent->y1=(y1/10)<<3;
    806c:	e0bfed17 	ldw	r2,-76(fp)
    8070:	1009883a 	mov	r4,r2
    8074:	01400284 	movi	r5,10
    8078:	0009ddc0 	call	9ddc <__udivsi3>
    807c:	100490fa 	slli	r2,r2,3
    8080:	1007883a 	mov	r3,r2
    8084:	e0bfeb17 	ldw	r2,-84(fp)
    8088:	10c0010d 	sth	r3,4(r2)
        		 pEvent->x2=(x2*800)>>10;
    808c:	e13fee17 	ldw	r4,-72(fp)
    8090:	0140c804 	movi	r5,800
    8094:	0009dec0 	call	9dec <__mulsi3>
    8098:	1004d2ba 	srli	r2,r2,10
    809c:	1007883a 	mov	r3,r2
    80a0:	e0bfeb17 	ldw	r2,-84(fp)
    80a4:	10c0018d 	sth	r3,6(r2)
        		 pEvent->y2=(y2/10)<<3;
    80a8:	e0bfef17 	ldw	r2,-68(fp)
    80ac:	1009883a 	mov	r4,r2
    80b0:	01400284 	movi	r5,10
    80b4:	0009ddc0 	call	9ddc <__udivsi3>
    80b8:	100490fa 	slli	r2,r2,3
    80bc:	1007883a 	mov	r3,r2
    80c0:	e0bfeb17 	ldw	r2,-84(fp)
    80c4:	10c0020d 	sth	r3,8(r2)
        		 pEvent->x3=(x3*800)>>10;
    80c8:	e13ff017 	ldw	r4,-64(fp)
    80cc:	0140c804 	movi	r5,800
    80d0:	0009dec0 	call	9dec <__mulsi3>
    80d4:	1004d2ba 	srli	r2,r2,10
    80d8:	1007883a 	mov	r3,r2
    80dc:	e0bfeb17 	ldw	r2,-84(fp)
    80e0:	10c0028d 	sth	r3,10(r2)
				 pEvent->y3=(y3/10)<<3;
    80e4:	e0bff117 	ldw	r2,-60(fp)
    80e8:	1009883a 	mov	r4,r2
    80ec:	01400284 	movi	r5,10
    80f0:	0009ddc0 	call	9ddc <__udivsi3>
    80f4:	100490fa 	slli	r2,r2,3
    80f8:	1007883a 	mov	r3,r2
    80fc:	e0bfeb17 	ldw	r2,-84(fp)
    8100:	10c0030d 	sth	r3,12(r2)
				 pEvent->x4=(x4*800)>>10;
    8104:	e13ff217 	ldw	r4,-56(fp)
    8108:	0140c804 	movi	r5,800
    810c:	0009dec0 	call	9dec <__mulsi3>
    8110:	1004d2ba 	srli	r2,r2,10
    8114:	1007883a 	mov	r3,r2
    8118:	e0bfeb17 	ldw	r2,-84(fp)
    811c:	10c0038d 	sth	r3,14(r2)
				 pEvent->y4=(y4/10)<<3;
    8120:	e0bff317 	ldw	r2,-52(fp)
    8124:	1009883a 	mov	r4,r2
    8128:	01400284 	movi	r5,10
    812c:	0009ddc0 	call	9ddc <__udivsi3>
    8130:	100490fa 	slli	r2,r2,3
    8134:	1007883a 	mov	r3,r2
    8138:	e0bfeb17 	ldw	r2,-84(fp)
    813c:	10c0040d 	sth	r3,16(r2)
				 pEvent->x5=(x5*800)>>10;
    8140:	e13ff417 	ldw	r4,-48(fp)
    8144:	0140c804 	movi	r5,800
    8148:	0009dec0 	call	9dec <__mulsi3>
    814c:	1004d2ba 	srli	r2,r2,10
    8150:	1007883a 	mov	r3,r2
    8154:	e0bfeb17 	ldw	r2,-84(fp)
    8158:	10c0048d 	sth	r3,18(r2)
				 pEvent->y5=(y5/10)<<3;
    815c:	e0bff517 	ldw	r2,-44(fp)
    8160:	1009883a 	mov	r4,r2
    8164:	01400284 	movi	r5,10
    8168:	0009ddc0 	call	9ddc <__udivsi3>
    816c:	100490fa 	slli	r2,r2,3
    8170:	1007883a 	mov	r3,r2
    8174:	e0bfeb17 	ldw	r2,-84(fp)
    8178:	10c0050d 	sth	r3,20(r2)

        }
    if((pEvent->TouchNum>0)&&(pEvent->TouchNum<=5))
    817c:	e0bfeb17 	ldw	r2,-84(fp)
    8180:	10800043 	ldbu	r2,1(r2)
    8184:	10803fcc 	andi	r2,r2,255
    8188:	10001826 	beq	r2,zero,81ec <mtc2_QueryData+0x344>
    818c:	e0bfeb17 	ldw	r2,-84(fp)
    8190:	10800043 	ldbu	r2,1(r2)
    8194:	10803fcc 	andi	r2,r2,255
    8198:	108001a8 	cmpgeui	r2,r2,6
    819c:	1000131e 	bne	r2,zero,81ec <mtc2_QueryData+0x344>
    {
		if (QUEUE_IsFull(p->pQueue)){
    81a0:	e0bfff17 	ldw	r2,-4(fp)
    81a4:	10800317 	ldw	r2,12(r2)
    81a8:	1009883a 	mov	r4,r2
    81ac:	00086300 	call	8630 <QUEUE_IsFull>
    81b0:	10000726 	beq	r2,zero,81d0 <mtc2_QueryData+0x328>
					  // remove the old one
		  pOldEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
    81b4:	e0bfff17 	ldw	r2,-4(fp)
    81b8:	10800317 	ldw	r2,12(r2)
    81bc:	1009883a 	mov	r4,r2
    81c0:	00087280 	call	8728 <QUEUE_Pop>
    81c4:	e0bff615 	stw	r2,-40(fp)
		  free(pOldEvent);
    81c8:	e13ff617 	ldw	r4,-40(fp)
    81cc:	000a4740 	call	a474 <free>
		 }
		 QUEUE_Push(p->pQueue, (alt_u32)pEvent);
    81d0:	e0bfff17 	ldw	r2,-4(fp)
    81d4:	10c00317 	ldw	r3,12(r2)
    81d8:	e0bfeb17 	ldw	r2,-84(fp)
    81dc:	1809883a 	mov	r4,r3
    81e0:	100b883a 	mov	r5,r2
    81e4:	00086940 	call	8694 <QUEUE_Push>
    81e8:	00000206 	br	81f4 <mtc2_QueryData+0x34c>
    }
    else
    	free(pEvent);
    81ec:	e13feb17 	ldw	r4,-84(fp)
    81f0:	000a4740 	call	a474 <free>
}
    81f4:	e037883a 	mov	sp,fp
    81f8:	dfc00117 	ldw	ra,4(sp)
    81fc:	df000017 	ldw	fp,0(sp)
    8200:	dec00204 	addi	sp,sp,8
    8204:	f800283a 	ret

00008208 <mtc2_ISR>:


#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void mtc2_ISR(void* context){
    8208:	defffc04 	addi	sp,sp,-16
    820c:	dfc00315 	stw	ra,12(sp)
    8210:	df000215 	stw	fp,8(sp)
    8214:	df000204 	addi	fp,sp,8
    8218:	e13fff15 	stw	r4,-4(fp)
#else
static void mtc2_ISR(void* context, alt_u32 id){
#endif
   MTC2_INFO *p = (MTC2_INFO *)context;
    821c:	e0bfff17 	ldw	r2,-4(fp)
    8220:	e0bffe15 	stw	r2,-8(fp)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,p->INT_IRQ_NUM);
    8224:	e0bffe17 	ldw	r2,-8(fp)
    8228:	10800217 	ldw	r2,8(r2)
    822c:	0009883a 	mov	r4,zero
    8230:	100b883a 	mov	r5,r2
    8234:	00132040 	call	13204 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif
    mtc2_QueryData(p);
    8238:	e13ffe17 	ldw	r4,-8(fp)
    823c:	0007ea80 	call	7ea8 <mtc2_QueryData>

    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE,0);
    8240:	e0bffe17 	ldw	r2,-8(fp)
    8244:	10800117 	ldw	r2,4(r2)
    8248:	10800304 	addi	r2,r2,12
    824c:	0007883a 	mov	r3,zero
    8250:	10c00035 	stwio	r3,0(r2)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,p->INT_IRQ_NUM);
    8254:	e0bffe17 	ldw	r2,-8(fp)
    8258:	10800217 	ldw	r2,8(r2)
    825c:	0009883a 	mov	r4,zero
    8260:	100b883a 	mov	r5,r2
    8264:	00131680 	call	13168 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif
 }
    8268:	e037883a 	mov	sp,fp
    826c:	dfc00117 	ldw	ra,4(sp)
    8270:	df000017 	ldw	fp,0(sp)
    8274:	dec00204 	addi	sp,sp,8
    8278:	f800283a 	ret

0000827c <MTC2_Init>:

MTC2_INFO* MTC2_Init(alt_u32 TOUCH_I2C_BASE,alt_u32 TOUCH_INT_BASE, alt_u32 INT_IRQ_NUM)
{
    827c:	defff904 	addi	sp,sp,-28
    8280:	dfc00615 	stw	ra,24(sp)
    8284:	df000515 	stw	fp,20(sp)
    8288:	df000504 	addi	fp,sp,20
    828c:	e13ffd15 	stw	r4,-12(fp)
    8290:	e17ffe15 	stw	r5,-8(fp)
    8294:	e1bfff15 	stw	r6,-4(fp)
    MTC2_INFO *p;

    p = (MTC2_INFO *)malloc(sizeof(MTC2_INFO));
    8298:	01000404 	movi	r4,16
    829c:	000a4600 	call	a460 <malloc>
    82a0:	e0bffc15 	stw	r2,-16(fp)
    p->TOUCH_I2C_BASE=TOUCH_I2C_BASE;
    82a4:	e0bffc17 	ldw	r2,-16(fp)
    82a8:	e0fffd17 	ldw	r3,-12(fp)
    82ac:	10c00015 	stw	r3,0(r2)
    p->TOUCH_INT_BASE=TOUCH_INT_BASE;
    82b0:	e0bffc17 	ldw	r2,-16(fp)
    82b4:	e0fffe17 	ldw	r3,-8(fp)
    82b8:	10c00115 	stw	r3,4(r2)

    p->INT_IRQ_NUM = INT_IRQ_NUM;
    82bc:	e0bffc17 	ldw	r2,-16(fp)
    82c0:	e0ffff17 	ldw	r3,-4(fp)
    82c4:	10c00215 	stw	r3,8(r2)
    p->pQueue = QUEUE_New(TOUCH_QUEUE_SIZE);
    82c8:	01000804 	movi	r4,32
    82cc:	00085500 	call	8550 <QUEUE_New>
    82d0:	e0fffc17 	ldw	r3,-16(fp)
    82d4:	18800315 	stw	r2,12(r3)


//    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x00);
    82d8:	e0bffc17 	ldw	r2,-16(fp)
    82dc:	10800117 	ldw	r2,4(r2)
    82e0:	10800204 	addi	r2,r2,8
    82e4:	0007883a 	mov	r3,zero
    82e8:	10c00035 	stwio	r3,0(r2)
//    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE, 0x00);
    82ec:	e0bffc17 	ldw	r2,-16(fp)
    82f0:	10800117 	ldw	r2,4(r2)
    82f4:	10800304 	addi	r2,r2,12
    82f8:	0007883a 	mov	r3,zero
    82fc:	10c00035 	stwio	r3,0(r2)
 // register callback function
 //   error = alt_irq_register (p->INT_IRQ_NUM, p, mtc2_ISR);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,
		                   p->INT_IRQ_NUM,
    8300:	e0bffc17 	ldw	r2,-16(fp)
//    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE, 0x00);
 // register callback function
 //   error = alt_irq_register (p->INT_IRQ_NUM, p, mtc2_ISR);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,
    8304:	10800217 	ldw	r2,8(r2)
    8308:	d8000015 	stw	zero,0(sp)
    830c:	0009883a 	mov	r4,zero
    8310:	100b883a 	mov	r5,r2
    8314:	01800074 	movhi	r6,1
    8318:	31a08204 	addi	r6,r6,-32248
    831c:	e1fffc17 	ldw	r7,-16(fp)
    8320:	00131180 	call	13118 <alt_ic_isr_register>
    8324:	10000426 	beq	r2,zero,8338 <MTC2_Init+0xbc>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->INT_IRQ_NUM, (void *)p, mtc2_ISR) != 0)){
 #endif

	  printf(("[TOUCH]register IRQ fail\n"));
    8328:	010001f4 	movhi	r4,7
    832c:	2110b504 	addi	r4,r4,17108
    8330:	000af380 	call	af38 <puts>
    8334:	00000306 	br	8344 <MTC2_Init+0xc8>
		  }else{
			  printf(("[TOUCH]register IRQ success\n"));
    8338:	010001f4 	movhi	r4,7
    833c:	2110bc04 	addi	r4,r4,17136
    8340:	000af380 	call	af38 <puts>
		  }
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x01);
    8344:	e0bffc17 	ldw	r2,-16(fp)
    8348:	10800117 	ldw	r2,4(r2)
    834c:	10800204 	addi	r2,r2,8
    8350:	00c00044 	movi	r3,1
    8354:	10c00035 	stwio	r3,0(r2)
    return p;
    8358:	e0bffc17 	ldw	r2,-16(fp)
}
    835c:	e037883a 	mov	sp,fp
    8360:	dfc00117 	ldw	ra,4(sp)
    8364:	df000017 	ldw	fp,0(sp)
    8368:	dec00204 	addi	sp,sp,8
    836c:	f800283a 	ret

00008370 <MTC2_UnInit>:

void MTC2_UnInit(MTC2_INFO *p){
    8370:	defffd04 	addi	sp,sp,-12
    8374:	dfc00215 	stw	ra,8(sp)
    8378:	df000115 	stw	fp,4(sp)
    837c:	df000104 	addi	fp,sp,4
    8380:	e13fff15 	stw	r4,-4(fp)
    if (p){
    8384:	e0bfff17 	ldw	r2,-4(fp)
    8388:	10000626 	beq	r2,zero,83a4 <MTC2_UnInit+0x34>
        QUEUE_Delete(p->pQueue);
    838c:	e0bfff17 	ldw	r2,-4(fp)
    8390:	10800317 	ldw	r2,12(r2)
    8394:	1009883a 	mov	r4,r2
    8398:	00085c00 	call	85c0 <QUEUE_Delete>
        free(p);
    839c:	e13fff17 	ldw	r4,-4(fp)
    83a0:	000a4740 	call	a474 <free>
    }
}
    83a4:	e037883a 	mov	sp,fp
    83a8:	dfc00117 	ldw	ra,4(sp)
    83ac:	df000017 	ldw	fp,0(sp)
    83b0:	dec00204 	addi	sp,sp,8
    83b4:	f800283a 	ret

000083b8 <MTC2_GetStatus>:

//, int X3,int Y3,int X4,int Y4,int X5,int Y5
bool MTC2_GetStatus(MTC2_INFO *p, alt_u8 *Event, alt_u8 *TouchNum, int *X1, int *Y1, int *X2, int *Y2,int *X3, int *Y3, int *X4, int *Y4,int *X5,int *Y5)
{
    83b8:	defff804 	addi	sp,sp,-32
    83bc:	dfc00715 	stw	ra,28(sp)
    83c0:	df000615 	stw	fp,24(sp)
    83c4:	df000604 	addi	fp,sp,24
    83c8:	e13ffc15 	stw	r4,-16(fp)
    83cc:	e17ffd15 	stw	r5,-12(fp)
    83d0:	e1bffe15 	stw	r6,-8(fp)
    83d4:	e1ffff15 	stw	r7,-4(fp)
    bool bFind;
    MTC2_EVENT *pEvent;
    bFind = QUEUE_IsEmpty(p->pQueue)?FALSE:TRUE;
    83d8:	e0bffc17 	ldw	r2,-16(fp)
    83dc:	10800317 	ldw	r2,12(r2)
    83e0:	1009883a 	mov	r4,r2
    83e4:	00085f00 	call	85f0 <QUEUE_IsEmpty>
    83e8:	1005003a 	cmpeq	r2,r2,zero
    83ec:	10803fcc 	andi	r2,r2,255
    83f0:	e0bffa15 	stw	r2,-24(fp)
    if (bFind){
    83f4:	e0bffa17 	ldw	r2,-24(fp)
    83f8:	10004126 	beq	r2,zero,8500 <MTC2_GetStatus+0x148>
        pEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
    83fc:	e0bffc17 	ldw	r2,-16(fp)
    8400:	10800317 	ldw	r2,12(r2)
    8404:	1009883a 	mov	r4,r2
    8408:	00087280 	call	8728 <QUEUE_Pop>
    840c:	e0bffb15 	stw	r2,-20(fp)
        *Event=pEvent->Event;;
    8410:	e0bffb17 	ldw	r2,-20(fp)
    8414:	10c00003 	ldbu	r3,0(r2)
    8418:	e0bffd17 	ldw	r2,-12(fp)
    841c:	10c00005 	stb	r3,0(r2)
        *TouchNum = pEvent->TouchNum;
    8420:	e0bffb17 	ldw	r2,-20(fp)
    8424:	10c00043 	ldbu	r3,1(r2)
    8428:	e0bffe17 	ldw	r2,-8(fp)
    842c:	10c00005 	stb	r3,0(r2)
        *X1 = pEvent->x1;
    8430:	e0bffb17 	ldw	r2,-20(fp)
    8434:	1080008b 	ldhu	r2,2(r2)
    8438:	10ffffcc 	andi	r3,r2,65535
    843c:	e0bfff17 	ldw	r2,-4(fp)
    8440:	10c00015 	stw	r3,0(r2)
        *Y1 = pEvent->y1;
    8444:	e0bffb17 	ldw	r2,-20(fp)
    8448:	1080010b 	ldhu	r2,4(r2)
    844c:	10ffffcc 	andi	r3,r2,65535
    8450:	e0800217 	ldw	r2,8(fp)
    8454:	10c00015 	stw	r3,0(r2)
        *X2 = pEvent->x2;
    8458:	e0bffb17 	ldw	r2,-20(fp)
    845c:	1080018b 	ldhu	r2,6(r2)
    8460:	10ffffcc 	andi	r3,r2,65535
    8464:	e0800317 	ldw	r2,12(fp)
    8468:	10c00015 	stw	r3,0(r2)
        *Y2 = pEvent->y2;
    846c:	e0bffb17 	ldw	r2,-20(fp)
    8470:	1080020b 	ldhu	r2,8(r2)
    8474:	10ffffcc 	andi	r3,r2,65535
    8478:	e0800417 	ldw	r2,16(fp)
    847c:	10c00015 	stw	r3,0(r2)
        *X3 = pEvent->x3;
    8480:	e0bffb17 	ldw	r2,-20(fp)
    8484:	1080028b 	ldhu	r2,10(r2)
    8488:	10ffffcc 	andi	r3,r2,65535
    848c:	e0800517 	ldw	r2,20(fp)
    8490:	10c00015 	stw	r3,0(r2)
		*Y3 = pEvent->y3;
    8494:	e0bffb17 	ldw	r2,-20(fp)
    8498:	1080030b 	ldhu	r2,12(r2)
    849c:	10ffffcc 	andi	r3,r2,65535
    84a0:	e0800617 	ldw	r2,24(fp)
    84a4:	10c00015 	stw	r3,0(r2)
		*X4 = pEvent->x4;
    84a8:	e0bffb17 	ldw	r2,-20(fp)
    84ac:	1080038b 	ldhu	r2,14(r2)
    84b0:	10ffffcc 	andi	r3,r2,65535
    84b4:	e0800717 	ldw	r2,28(fp)
    84b8:	10c00015 	stw	r3,0(r2)
		*Y4 = pEvent->y4;
    84bc:	e0bffb17 	ldw	r2,-20(fp)
    84c0:	1080040b 	ldhu	r2,16(r2)
    84c4:	10ffffcc 	andi	r3,r2,65535
    84c8:	e0800817 	ldw	r2,32(fp)
    84cc:	10c00015 	stw	r3,0(r2)
		*X5 = pEvent->x5;
    84d0:	e0bffb17 	ldw	r2,-20(fp)
    84d4:	1080048b 	ldhu	r2,18(r2)
    84d8:	10ffffcc 	andi	r3,r2,65535
    84dc:	e0800917 	ldw	r2,36(fp)
    84e0:	10c00015 	stw	r3,0(r2)
		*Y5 = pEvent->y5;
    84e4:	e0bffb17 	ldw	r2,-20(fp)
    84e8:	1080050b 	ldhu	r2,20(r2)
    84ec:	10ffffcc 	andi	r3,r2,65535
    84f0:	e0800a17 	ldw	r2,40(fp)
    84f4:	10c00015 	stw	r3,0(r2)
        free(pEvent);
    84f8:	e13ffb17 	ldw	r4,-20(fp)
    84fc:	000a4740 	call	a474 <free>
    }
    return bFind;
    8500:	e0bffa17 	ldw	r2,-24(fp)
}
    8504:	e037883a 	mov	sp,fp
    8508:	dfc00117 	ldw	ra,4(sp)
    850c:	df000017 	ldw	fp,0(sp)
    8510:	dec00204 	addi	sp,sp,8
    8514:	f800283a 	ret

00008518 <MTC2_ClearEvent>:


void MTC2_ClearEvent(MTC2_INFO *p){
    8518:	defffd04 	addi	sp,sp,-12
    851c:	dfc00215 	stw	ra,8(sp)
    8520:	df000115 	stw	fp,4(sp)
    8524:	df000104 	addi	fp,sp,4
    8528:	e13fff15 	stw	r4,-4(fp)
    QUEUE_Empty(p->pQueue);
    852c:	e0bfff17 	ldw	r2,-4(fp)
    8530:	10800317 	ldw	r2,12(r2)
    8534:	1009883a 	mov	r4,r2
    8538:	00087b80 	call	87b8 <QUEUE_Empty>
}
    853c:	e037883a 	mov	sp,fp
    8540:	dfc00117 	ldw	ra,4(sp)
    8544:	df000017 	ldw	fp,0(sp)
    8548:	dec00204 	addi	sp,sp,8
    854c:	f800283a 	ret

00008550 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
    8550:	defffb04 	addi	sp,sp,-20
    8554:	dfc00415 	stw	ra,16(sp)
    8558:	df000315 	stw	fp,12(sp)
    855c:	df000304 	addi	fp,sp,12
    8560:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
    8564:	e0bfff17 	ldw	r2,-4(fp)
    8568:	10800144 	addi	r2,r2,5
    856c:	1085883a 	add	r2,r2,r2
    8570:	1085883a 	add	r2,r2,r2
    8574:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
    8578:	e0bffd17 	ldw	r2,-12(fp)
    857c:	1009883a 	mov	r4,r2
    8580:	000a4600 	call	a460 <malloc>
    8584:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
    8588:	e0bffd17 	ldw	r2,-12(fp)
    858c:	e13ffe17 	ldw	r4,-8(fp)
    8590:	000b883a 	mov	r5,zero
    8594:	100d883a 	mov	r6,r2
    8598:	000ad4c0 	call	ad4c <memset>
    pQueue->num = nQueueNum;
    859c:	e0ffff17 	ldw	r3,-4(fp)
    85a0:	e0bffe17 	ldw	r2,-8(fp)
    85a4:	10c00015 	stw	r3,0(r2)
    return pQueue;
    85a8:	e0bffe17 	ldw	r2,-8(fp)
}
    85ac:	e037883a 	mov	sp,fp
    85b0:	dfc00117 	ldw	ra,4(sp)
    85b4:	df000017 	ldw	fp,0(sp)
    85b8:	dec00204 	addi	sp,sp,8
    85bc:	f800283a 	ret

000085c0 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
    85c0:	defffd04 	addi	sp,sp,-12
    85c4:	dfc00215 	stw	ra,8(sp)
    85c8:	df000115 	stw	fp,4(sp)
    85cc:	df000104 	addi	fp,sp,4
    85d0:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
    85d4:	e13fff17 	ldw	r4,-4(fp)
    85d8:	000a4740 	call	a474 <free>
}
    85dc:	e037883a 	mov	sp,fp
    85e0:	dfc00117 	ldw	ra,4(sp)
    85e4:	df000017 	ldw	fp,0(sp)
    85e8:	dec00204 	addi	sp,sp,8
    85ec:	f800283a 	ret

000085f0 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
    85f0:	defffe04 	addi	sp,sp,-8
    85f4:	df000115 	stw	fp,4(sp)
    85f8:	df000104 	addi	fp,sp,4
    85fc:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
    8600:	e0bfff17 	ldw	r2,-4(fp)
    8604:	10c00117 	ldw	r3,4(r2)
    8608:	e0bfff17 	ldw	r2,-4(fp)
    860c:	10800217 	ldw	r2,8(r2)
    8610:	1880021e 	bne	r3,r2,861c <QUEUE_IsEmpty+0x2c>
        return TRUE;
    8614:	00800044 	movi	r2,1
    8618:	00000106 	br	8620 <QUEUE_IsEmpty+0x30>
    return FALSE;
    861c:	0005883a 	mov	r2,zero
}
    8620:	e037883a 	mov	sp,fp
    8624:	df000017 	ldw	fp,0(sp)
    8628:	dec00104 	addi	sp,sp,4
    862c:	f800283a 	ret

00008630 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
    8630:	defffd04 	addi	sp,sp,-12
    8634:	dfc00215 	stw	ra,8(sp)
    8638:	df000115 	stw	fp,4(sp)
    863c:	df000104 	addi	fp,sp,4
    8640:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
    8644:	e0bfff17 	ldw	r2,-4(fp)
    8648:	10800117 	ldw	r2,4(r2)
    864c:	10c00044 	addi	r3,r2,1
    8650:	e0bfff17 	ldw	r2,-4(fp)
    8654:	10800017 	ldw	r2,0(r2)
    8658:	1809883a 	mov	r4,r3
    865c:	100b883a 	mov	r5,r2
    8660:	0009de40 	call	9de4 <__umodsi3>
    8664:	1007883a 	mov	r3,r2
    8668:	e0bfff17 	ldw	r2,-4(fp)
    866c:	10800217 	ldw	r2,8(r2)
    8670:	1880021e 	bne	r3,r2,867c <QUEUE_IsFull+0x4c>
        return TRUE;
    8674:	00800044 	movi	r2,1
    8678:	00000106 	br	8680 <QUEUE_IsFull+0x50>
    return FALSE;
    867c:	0005883a 	mov	r2,zero
}
    8680:	e037883a 	mov	sp,fp
    8684:	dfc00117 	ldw	ra,4(sp)
    8688:	df000017 	ldw	fp,0(sp)
    868c:	dec00204 	addi	sp,sp,8
    8690:	f800283a 	ret

00008694 <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
    8694:	defffc04 	addi	sp,sp,-16
    8698:	dfc00315 	stw	ra,12(sp)
    869c:	df000215 	stw	fp,8(sp)
    86a0:	df000204 	addi	fp,sp,8
    86a4:	e13ffe15 	stw	r4,-8(fp)
    86a8:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
    86ac:	e13ffe17 	ldw	r4,-8(fp)
    86b0:	00086300 	call	8630 <QUEUE_IsFull>
    86b4:	10000226 	beq	r2,zero,86c0 <QUEUE_Push+0x2c>
        return FALSE;
    86b8:	0005883a 	mov	r2,zero
    86bc:	00001506 	br	8714 <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
    86c0:	e0bffe17 	ldw	r2,-8(fp)
    86c4:	10800117 	ldw	r2,4(r2)
    86c8:	e0fffe17 	ldw	r3,-8(fp)
    86cc:	108000c4 	addi	r2,r2,3
    86d0:	1085883a 	add	r2,r2,r2
    86d4:	1085883a 	add	r2,r2,r2
    86d8:	1885883a 	add	r2,r3,r2
    86dc:	e0ffff17 	ldw	r3,-4(fp)
    86e0:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
    86e4:	e0bffe17 	ldw	r2,-8(fp)
    86e8:	10800117 	ldw	r2,4(r2)
    86ec:	10c00044 	addi	r3,r2,1
    86f0:	e0bffe17 	ldw	r2,-8(fp)
    86f4:	10800017 	ldw	r2,0(r2)
    86f8:	1809883a 	mov	r4,r3
    86fc:	100b883a 	mov	r5,r2
    8700:	0009de40 	call	9de4 <__umodsi3>
    8704:	1007883a 	mov	r3,r2
    8708:	e0bffe17 	ldw	r2,-8(fp)
    870c:	10c00115 	stw	r3,4(r2)
    return TRUE;
    8710:	00800044 	movi	r2,1
}
    8714:	e037883a 	mov	sp,fp
    8718:	dfc00117 	ldw	ra,4(sp)
    871c:	df000017 	ldw	fp,0(sp)
    8720:	dec00204 	addi	sp,sp,8
    8724:	f800283a 	ret

00008728 <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
    8728:	defffc04 	addi	sp,sp,-16
    872c:	dfc00315 	stw	ra,12(sp)
    8730:	df000215 	stw	fp,8(sp)
    8734:	df000204 	addi	fp,sp,8
    8738:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
    873c:	e13fff17 	ldw	r4,-4(fp)
    8740:	00085f00 	call	85f0 <QUEUE_IsEmpty>
    8744:	10000226 	beq	r2,zero,8750 <QUEUE_Pop+0x28>
        return 0;
    8748:	0005883a 	mov	r2,zero
    874c:	00001506 	br	87a4 <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
    8750:	e0bfff17 	ldw	r2,-4(fp)
    8754:	10800217 	ldw	r2,8(r2)
    8758:	e0ffff17 	ldw	r3,-4(fp)
    875c:	108000c4 	addi	r2,r2,3
    8760:	1085883a 	add	r2,r2,r2
    8764:	1085883a 	add	r2,r2,r2
    8768:	1885883a 	add	r2,r3,r2
    876c:	10800017 	ldw	r2,0(r2)
    8770:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
    8774:	e0bfff17 	ldw	r2,-4(fp)
    8778:	10800217 	ldw	r2,8(r2)
    877c:	10c00044 	addi	r3,r2,1
    8780:	e0bfff17 	ldw	r2,-4(fp)
    8784:	10800017 	ldw	r2,0(r2)
    8788:	1809883a 	mov	r4,r3
    878c:	100b883a 	mov	r5,r2
    8790:	0009de40 	call	9de4 <__umodsi3>
    8794:	1007883a 	mov	r3,r2
    8798:	e0bfff17 	ldw	r2,-4(fp)
    879c:	10c00215 	stw	r3,8(r2)
    return data32;
    87a0:	e0bffe17 	ldw	r2,-8(fp)
}
    87a4:	e037883a 	mov	sp,fp
    87a8:	dfc00117 	ldw	ra,4(sp)
    87ac:	df000017 	ldw	fp,0(sp)
    87b0:	dec00204 	addi	sp,sp,8
    87b4:	f800283a 	ret

000087b8 <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
    87b8:	defffe04 	addi	sp,sp,-8
    87bc:	df000115 	stw	fp,4(sp)
    87c0:	df000104 	addi	fp,sp,4
    87c4:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
    87c8:	e0bfff17 	ldw	r2,-4(fp)
    87cc:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
    87d0:	e0bfff17 	ldw	r2,-4(fp)
    87d4:	10000215 	stw	zero,8(r2)
}
    87d8:	e037883a 	mov	sp,fp
    87dc:	df000017 	ldw	fp,0(sp)
    87e0:	dec00104 	addi	sp,sp,4
    87e4:	f800283a 	ret

000087e8 <VIPFR_Init>:
void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex);
void FrameReader_Go(alt_u32 VipBase, bool bGO);



VIP_FRAME_READER* VIPFR_Init(alt_u32 VipBase, void* Frame0_Base, void* Frame1_Base, alt_u32 Frame_Width, alt_u32 Frame_Height){
    87e8:	defff904 	addi	sp,sp,-28
    87ec:	dfc00615 	stw	ra,24(sp)
    87f0:	df000515 	stw	fp,20(sp)
    87f4:	df000504 	addi	fp,sp,20
    87f8:	e13ffc15 	stw	r4,-16(fp)
    87fc:	e17ffd15 	stw	r5,-12(fp)
    8800:	e1bffe15 	stw	r6,-8(fp)
    8804:	e1ffff15 	stw	r7,-4(fp)

    VIP_FRAME_READER *p;
    
    p = malloc(sizeof(VIP_FRAME_READER));
    8808:	01000904 	movi	r4,36
    880c:	000a4600 	call	a460 <malloc>
    8810:	e0bffb15 	stw	r2,-20(fp)
    p->VipBase = VipBase;
    8814:	e0bffb17 	ldw	r2,-20(fp)
    8818:	e0fffc17 	ldw	r3,-16(fp)
    881c:	10c00015 	stw	r3,0(r2)
    p->Frame0_Base = Frame0_Base;
    8820:	e0bffb17 	ldw	r2,-20(fp)
    8824:	e0fffd17 	ldw	r3,-12(fp)
    8828:	10c00115 	stw	r3,4(r2)
    p->Frame1_Base = Frame1_Base;
    882c:	e0bffb17 	ldw	r2,-20(fp)
    8830:	e0fffe17 	ldw	r3,-8(fp)
    8834:	10c00215 	stw	r3,8(r2)
    p->DisplayFrame = 0;
    8838:	e0bffb17 	ldw	r2,-20(fp)
    883c:	10000305 	stb	zero,12(r2)
     
    p->bytes_per_pixel = 4;
    8840:	e0bffb17 	ldw	r2,-20(fp)
    8844:	00c00104 	movi	r3,4
    8848:	10c00715 	stw	r3,28(r2)
    p->color_depth = 32;
    884c:	e0bffb17 	ldw	r2,-20(fp)
    8850:	00c00804 	movi	r3,32
    8854:	10c00415 	stw	r3,16(r2)
    p->interlace = 0;
    8858:	e0bffb17 	ldw	r2,-20(fp)
    885c:	10000815 	stw	zero,32(r2)
    
    FrameReader_Go(VipBase, FALSE); // stop for config
    8860:	e13ffc17 	ldw	r4,-16(fp)
    8864:	000b883a 	mov	r5,zero
    8868:	0008ce80 	call	8ce8 <FrameReader_Go>
    
    VIPFR_SetFrameSize(p, Frame_Width, Frame_Height);
    886c:	e0ffff17 	ldw	r3,-4(fp)
    8870:	e0800217 	ldw	r2,8(fp)
    8874:	e13ffb17 	ldw	r4,-20(fp)
    8878:	180b883a 	mov	r5,r3
    887c:	100d883a 	mov	r6,r2
    8880:	00088f80 	call	88f8 <VIPFR_SetFrameSize>
    
    FrameReader_SelectFrame(VipBase, p->DisplayFrame);
    8884:	e0bffb17 	ldw	r2,-20(fp)
    8888:	10800303 	ldbu	r2,12(r2)
    888c:	10803fcc 	andi	r2,r2,255
    8890:	e13ffc17 	ldw	r4,-16(fp)
    8894:	100b883a 	mov	r5,r2
    8898:	0008cb00 	call	8cb0 <FrameReader_SelectFrame>
    //
    FrameReader_Go(VipBase, TRUE); // go
    889c:	e13ffc17 	ldw	r4,-16(fp)
    88a0:	01400044 	movi	r5,1
    88a4:	0008ce80 	call	8ce8 <FrameReader_Go>
    
    return p;
    88a8:	e0bffb17 	ldw	r2,-20(fp)
}
    88ac:	e037883a 	mov	sp,fp
    88b0:	dfc00117 	ldw	ra,4(sp)
    88b4:	df000017 	ldw	fp,0(sp)
    88b8:	dec00204 	addi	sp,sp,8
    88bc:	f800283a 	ret

000088c0 <VIPFR_UnInit>:

void VIPFR_UnInit(VIP_FRAME_READER* p){
    88c0:	defffd04 	addi	sp,sp,-12
    88c4:	dfc00215 	stw	ra,8(sp)
    88c8:	df000115 	stw	fp,4(sp)
    88cc:	df000104 	addi	fp,sp,4
    88d0:	e13fff15 	stw	r4,-4(fp)
    if (p)
    88d4:	e0bfff17 	ldw	r2,-4(fp)
    88d8:	10000226 	beq	r2,zero,88e4 <VIPFR_UnInit+0x24>
        free(p);
    88dc:	e13fff17 	ldw	r4,-4(fp)
    88e0:	000a4740 	call	a474 <free>
}
    88e4:	e037883a 	mov	sp,fp
    88e8:	dfc00117 	ldw	ra,4(sp)
    88ec:	df000017 	ldw	fp,0(sp)
    88f0:	dec00204 	addi	sp,sp,8
    88f4:	f800283a 	ret

000088f8 <VIPFR_SetFrameSize>:

void VIPFR_SetFrameSize(VIP_FRAME_READER* p, int width, int height){
    88f8:	defff604 	addi	sp,sp,-40
    88fc:	dfc00915 	stw	ra,36(sp)
    8900:	df000815 	stw	fp,32(sp)
    8904:	df000804 	addi	fp,sp,32
    8908:	e13ffd15 	stw	r4,-12(fp)
    890c:	e17ffe15 	stw	r5,-8(fp)
    8910:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 words, cycle;
    words = width*height;
    8914:	e13ffe17 	ldw	r4,-8(fp)
    8918:	e17fff17 	ldw	r5,-4(fp)
    891c:	0009dec0 	call	9dec <__mulsi3>
    8920:	e0bffb15 	stw	r2,-20(fp)
    cycle = width*height;
    8924:	e13ffe17 	ldw	r4,-8(fp)
    8928:	e17fff17 	ldw	r5,-4(fp)
    892c:	0009dec0 	call	9dec <__mulsi3>
    8930:	e0bffc15 	stw	r2,-16(fp)
    
  //  p->Frame_Width = width;
  //  p->Frame_Height = height;
    //
    p->width = width;
    8934:	e0bffd17 	ldw	r2,-12(fp)
    8938:	e0fffe17 	ldw	r3,-8(fp)
    893c:	10c00515 	stw	r3,20(r2)
    p->height = height;
    8940:	e0bffd17 	ldw	r2,-12(fp)
    8944:	e0ffff17 	ldw	r3,-4(fp)
    8948:	10c00615 	stw	r3,24(r2)
    //
    FrameReader_SetFrame0(p->VipBase, (alt_u32)p->Frame0_Base, words, cycle, p->width, p->height, p->interlace);
    894c:	e0bffd17 	ldw	r2,-12(fp)
    8950:	10c00017 	ldw	r3,0(r2)
    8954:	e0bffd17 	ldw	r2,-12(fp)
    8958:	10800117 	ldw	r2,4(r2)
    895c:	e13ffd17 	ldw	r4,-12(fp)
    8960:	21000517 	ldw	r4,20(r4)
    8964:	200d883a 	mov	r6,r4
    8968:	e13ffd17 	ldw	r4,-12(fp)
    896c:	21000617 	ldw	r4,24(r4)
    8970:	200b883a 	mov	r5,r4
    8974:	e13ffd17 	ldw	r4,-12(fp)
    8978:	21000817 	ldw	r4,32(r4)
    897c:	d9800015 	stw	r6,0(sp)
    8980:	d9400115 	stw	r5,4(sp)
    8984:	d9000215 	stw	r4,8(sp)
    8988:	1809883a 	mov	r4,r3
    898c:	100b883a 	mov	r5,r2
    8990:	e1bffb17 	ldw	r6,-20(fp)
    8994:	e1fffc17 	ldw	r7,-16(fp)
    8998:	0008b980 	call	8b98 <FrameReader_SetFrame0>
    FrameReader_SetFrame1(p->VipBase, (alt_u32)p->Frame1_Base, words, cycle, p->width, p->height, p->interlace);
    899c:	e0bffd17 	ldw	r2,-12(fp)
    89a0:	10c00017 	ldw	r3,0(r2)
    89a4:	e0bffd17 	ldw	r2,-12(fp)
    89a8:	10800217 	ldw	r2,8(r2)
    89ac:	e13ffd17 	ldw	r4,-12(fp)
    89b0:	21000517 	ldw	r4,20(r4)
    89b4:	200d883a 	mov	r6,r4
    89b8:	e13ffd17 	ldw	r4,-12(fp)
    89bc:	21000617 	ldw	r4,24(r4)
    89c0:	200b883a 	mov	r5,r4
    89c4:	e13ffd17 	ldw	r4,-12(fp)
    89c8:	21000817 	ldw	r4,32(r4)
    89cc:	d9800015 	stw	r6,0(sp)
    89d0:	d9400115 	stw	r5,4(sp)
    89d4:	d9000215 	stw	r4,8(sp)
    89d8:	1809883a 	mov	r4,r3
    89dc:	100b883a 	mov	r5,r2
    89e0:	e1bffb17 	ldw	r6,-20(fp)
    89e4:	e1fffc17 	ldw	r7,-16(fp)
    89e8:	0008c240 	call	8c24 <FrameReader_SetFrame1>
    
}
    89ec:	e037883a 	mov	sp,fp
    89f0:	dfc00117 	ldw	ra,4(sp)
    89f4:	df000017 	ldw	fp,0(sp)
    89f8:	dec00204 	addi	sp,sp,8
    89fc:	f800283a 	ret

00008a00 <VIPFR_Go>:

void VIPFR_Go(VIP_FRAME_READER* p, bool bGo){
    8a00:	defffd04 	addi	sp,sp,-12
    8a04:	df000215 	stw	fp,8(sp)
    8a08:	df000204 	addi	fp,sp,8
    8a0c:	e13ffe15 	stw	r4,-8(fp)
    8a10:	e17fff15 	stw	r5,-4(fp)
    IOWR(p->VipBase, 0x00, bGo?0x01:0x00);
    8a14:	e0bffe17 	ldw	r2,-8(fp)
    8a18:	10800017 	ldw	r2,0(r2)
    8a1c:	e0ffff17 	ldw	r3,-4(fp)
    8a20:	1806c03a 	cmpne	r3,r3,zero
    8a24:	18c03fcc 	andi	r3,r3,255
    8a28:	10c00035 	stwio	r3,0(r2)
}
    8a2c:	e037883a 	mov	sp,fp
    8a30:	df000017 	ldw	fp,0(sp)
    8a34:	dec00104 	addi	sp,sp,4
    8a38:	f800283a 	ret

00008a3c <VIPFR_GetDrawFrame>:

void* VIPFR_GetDrawFrame(VIP_FRAME_READER* p){
    8a3c:	defffe04 	addi	sp,sp,-8
    8a40:	df000115 	stw	fp,4(sp)
    8a44:	df000104 	addi	fp,sp,4
    8a48:	e13fff15 	stw	r4,-4(fp)
        if (p->DisplayFrame == 0)
    8a4c:	e0bfff17 	ldw	r2,-4(fp)
    8a50:	10800303 	ldbu	r2,12(r2)
    8a54:	10803fcc 	andi	r2,r2,255
    8a58:	1000031e 	bne	r2,zero,8a68 <VIPFR_GetDrawFrame+0x2c>
            return p->Frame1_Base;
    8a5c:	e0bfff17 	ldw	r2,-4(fp)
    8a60:	10800217 	ldw	r2,8(r2)
    8a64:	00000206 	br	8a70 <VIPFR_GetDrawFrame+0x34>
        return p->Frame0_Base;
    8a68:	e0bfff17 	ldw	r2,-4(fp)
    8a6c:	10800117 	ldw	r2,4(r2)
}
    8a70:	e037883a 	mov	sp,fp
    8a74:	df000017 	ldw	fp,0(sp)
    8a78:	dec00104 	addi	sp,sp,4
    8a7c:	f800283a 	ret

00008a80 <VIPFR_ActiveDrawFrame>:
void VIPFR_ActiveDrawFrame(VIP_FRAME_READER* p){
    8a80:	defffd04 	addi	sp,sp,-12
    8a84:	dfc00215 	stw	ra,8(sp)
    8a88:	df000115 	stw	fp,4(sp)
    8a8c:	df000104 	addi	fp,sp,4
    8a90:	e13fff15 	stw	r4,-4(fp)
     p->DisplayFrame =  (p->DisplayFrame+1)%2;
    8a94:	e0bfff17 	ldw	r2,-4(fp)
    8a98:	10800303 	ldbu	r2,12(r2)
    8a9c:	10803fcc 	andi	r2,r2,255
    8aa0:	10c00044 	addi	r3,r2,1
    8aa4:	00a00034 	movhi	r2,32768
    8aa8:	10800044 	addi	r2,r2,1
    8aac:	1884703a 	and	r2,r3,r2
    8ab0:	1000040e 	bge	r2,zero,8ac4 <VIPFR_ActiveDrawFrame+0x44>
    8ab4:	10bfffc4 	addi	r2,r2,-1
    8ab8:	00ffff84 	movi	r3,-2
    8abc:	10c4b03a 	or	r2,r2,r3
    8ac0:	10800044 	addi	r2,r2,1
    8ac4:	1007883a 	mov	r3,r2
    8ac8:	e0bfff17 	ldw	r2,-4(fp)
    8acc:	10c00305 	stb	r3,12(r2)
     FrameReader_SelectFrame(p->VipBase, p->DisplayFrame);
    8ad0:	e0bfff17 	ldw	r2,-4(fp)
    8ad4:	10c00017 	ldw	r3,0(r2)
    8ad8:	e0bfff17 	ldw	r2,-4(fp)
    8adc:	10800303 	ldbu	r2,12(r2)
    8ae0:	10803fcc 	andi	r2,r2,255
    8ae4:	1809883a 	mov	r4,r3
    8ae8:	100b883a 	mov	r5,r2
    8aec:	0008cb00 	call	8cb0 <FrameReader_SelectFrame>
     alt_dcache_flush_all();
    8af0:	0012fa80 	call	12fa8 <alt_dcache_flush_all>
}
    8af4:	e037883a 	mov	sp,fp
    8af8:	dfc00117 	ldw	ra,4(sp)
    8afc:	df000017 	ldw	fp,0(sp)
    8b00:	dec00204 	addi	sp,sp,8
    8b04:	f800283a 	ret

00008b08 <DRAW_EraseScreen>:

void DRAW_EraseScreen(VIP_FRAME_READER *p, alt_u32 Color){
    8b08:	defffa04 	addi	sp,sp,-24
    8b0c:	dfc00515 	stw	ra,20(sp)
    8b10:	df000415 	stw	fp,16(sp)
    8b14:	dc400315 	stw	r17,12(sp)
    8b18:	dc000215 	stw	r16,8(sp)
    8b1c:	df000204 	addi	fp,sp,8
    8b20:	e13ffe15 	stw	r4,-8(fp)
    8b24:	e17fff15 	stw	r5,-4(fp)
    memset(VIPFR_GetDrawFrame(p), Color, p->width*p->height*p->bytes_per_pixel);
    8b28:	e13ffe17 	ldw	r4,-8(fp)
    8b2c:	0008a3c0 	call	8a3c <VIPFR_GetDrawFrame>
    8b30:	1023883a 	mov	r17,r2
    8b34:	e43fff17 	ldw	r16,-4(fp)
    8b38:	e0bffe17 	ldw	r2,-8(fp)
    8b3c:	10c00517 	ldw	r3,20(r2)
    8b40:	e0bffe17 	ldw	r2,-8(fp)
    8b44:	10800617 	ldw	r2,24(r2)
    8b48:	1809883a 	mov	r4,r3
    8b4c:	100b883a 	mov	r5,r2
    8b50:	0009dec0 	call	9dec <__mulsi3>
    8b54:	1007883a 	mov	r3,r2
    8b58:	e0bffe17 	ldw	r2,-8(fp)
    8b5c:	10800717 	ldw	r2,28(r2)
    8b60:	1809883a 	mov	r4,r3
    8b64:	100b883a 	mov	r5,r2
    8b68:	0009dec0 	call	9dec <__mulsi3>
    8b6c:	8809883a 	mov	r4,r17
    8b70:	800b883a 	mov	r5,r16
    8b74:	100d883a 	mov	r6,r2
    8b78:	000ad4c0 	call	ad4c <memset>
}
    8b7c:	e037883a 	mov	sp,fp
    8b80:	dfc00317 	ldw	ra,12(sp)
    8b84:	df000217 	ldw	fp,8(sp)
    8b88:	dc400117 	ldw	r17,4(sp)
    8b8c:	dc000017 	ldw	r16,0(sp)
    8b90:	dec00404 	addi	sp,sp,16
    8b94:	f800283a 	ret

00008b98 <FrameReader_SetFrame0>:
////////////////////////////////////////////////////////////////////
// internal function
////////////////////////////////////////////////////////////////////


void FrameReader_SetFrame0(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
    8b98:	defffb04 	addi	sp,sp,-20
    8b9c:	df000415 	stw	fp,16(sp)
    8ba0:	df000404 	addi	fp,sp,16
    8ba4:	e13ffc15 	stw	r4,-16(fp)
    8ba8:	e17ffd15 	stw	r5,-12(fp)
    8bac:	e1bffe15 	stw	r6,-8(fp)
    8bb0:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 4, FrameBase); // frame0 base address
    8bb4:	e0bffc17 	ldw	r2,-16(fp)
    8bb8:	10800404 	addi	r2,r2,16
    8bbc:	e0fffd17 	ldw	r3,-12(fp)
    8bc0:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 5, words); // frame0 words
    8bc4:	e0bffc17 	ldw	r2,-16(fp)
    8bc8:	10800504 	addi	r2,r2,20
    8bcc:	e0fffe17 	ldw	r3,-8(fp)
    8bd0:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 6, cycle); // frame0 single cylce color pattern
    8bd4:	e0bffc17 	ldw	r2,-16(fp)
    8bd8:	10800604 	addi	r2,r2,24
    8bdc:	e0ffff17 	ldw	r3,-4(fp)
    8be0:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 8, width); // frame0 width
    8be4:	e0bffc17 	ldw	r2,-16(fp)
    8be8:	10800804 	addi	r2,r2,32
    8bec:	e0c00117 	ldw	r3,4(fp)
    8bf0:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 9, height); // frame0 height
    8bf4:	e0bffc17 	ldw	r2,-16(fp)
    8bf8:	10800904 	addi	r2,r2,36
    8bfc:	e0c00217 	ldw	r3,8(fp)
    8c00:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 10, interlace); // frame0 interlaced
    8c04:	e0bffc17 	ldw	r2,-16(fp)
    8c08:	10800a04 	addi	r2,r2,40
    8c0c:	e0c00317 	ldw	r3,12(fp)
    8c10:	10c00035 	stwio	r3,0(r2)
}
    8c14:	e037883a 	mov	sp,fp
    8c18:	df000017 	ldw	fp,0(sp)
    8c1c:	dec00104 	addi	sp,sp,4
    8c20:	f800283a 	ret

00008c24 <FrameReader_SetFrame1>:

void FrameReader_SetFrame1(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
    8c24:	defffb04 	addi	sp,sp,-20
    8c28:	df000415 	stw	fp,16(sp)
    8c2c:	df000404 	addi	fp,sp,16
    8c30:	e13ffc15 	stw	r4,-16(fp)
    8c34:	e17ffd15 	stw	r5,-12(fp)
    8c38:	e1bffe15 	stw	r6,-8(fp)
    8c3c:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 11, FrameBase); // frame0 base address
    8c40:	e0bffc17 	ldw	r2,-16(fp)
    8c44:	10800b04 	addi	r2,r2,44
    8c48:	e0fffd17 	ldw	r3,-12(fp)
    8c4c:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 12, words); // frame0 words
    8c50:	e0bffc17 	ldw	r2,-16(fp)
    8c54:	10800c04 	addi	r2,r2,48
    8c58:	e0fffe17 	ldw	r3,-8(fp)
    8c5c:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 13, cycle); // frame0 single cylce color pattern
    8c60:	e0bffc17 	ldw	r2,-16(fp)
    8c64:	10800d04 	addi	r2,r2,52
    8c68:	e0ffff17 	ldw	r3,-4(fp)
    8c6c:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 15, width); // frame0 width
    8c70:	e0bffc17 	ldw	r2,-16(fp)
    8c74:	10800f04 	addi	r2,r2,60
    8c78:	e0c00117 	ldw	r3,4(fp)
    8c7c:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 16, height); // frame0 height
    8c80:	e0bffc17 	ldw	r2,-16(fp)
    8c84:	10801004 	addi	r2,r2,64
    8c88:	e0c00217 	ldw	r3,8(fp)
    8c8c:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 17, interlace); // frame0 interlaced
    8c90:	e0bffc17 	ldw	r2,-16(fp)
    8c94:	10801104 	addi	r2,r2,68
    8c98:	e0c00317 	ldw	r3,12(fp)
    8c9c:	10c00035 	stwio	r3,0(r2)
}
    8ca0:	e037883a 	mov	sp,fp
    8ca4:	df000017 	ldw	fp,0(sp)
    8ca8:	dec00104 	addi	sp,sp,4
    8cac:	f800283a 	ret

00008cb0 <FrameReader_SelectFrame>:

void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex){
    8cb0:	defffd04 	addi	sp,sp,-12
    8cb4:	df000215 	stw	fp,8(sp)
    8cb8:	df000204 	addi	fp,sp,8
    8cbc:	e13ffe15 	stw	r4,-8(fp)
    8cc0:	2805883a 	mov	r2,r5
    8cc4:	e0bfff05 	stb	r2,-4(fp)
    IOWR(VipBase, 3, FrameIndex);
    8cc8:	e0bffe17 	ldw	r2,-8(fp)
    8ccc:	10800304 	addi	r2,r2,12
    8cd0:	e0ffff03 	ldbu	r3,-4(fp)
    8cd4:	10c00035 	stwio	r3,0(r2)
}        
    8cd8:	e037883a 	mov	sp,fp
    8cdc:	df000017 	ldw	fp,0(sp)
    8ce0:	dec00104 	addi	sp,sp,4
    8ce4:	f800283a 	ret

00008ce8 <FrameReader_Go>:

void FrameReader_Go(alt_u32 VipBase, bool bGO){
    8ce8:	defffd04 	addi	sp,sp,-12
    8cec:	df000215 	stw	fp,8(sp)
    8cf0:	df000204 	addi	fp,sp,8
    8cf4:	e13ffe15 	stw	r4,-8(fp)
    8cf8:	e17fff15 	stw	r5,-4(fp)
    IOWR(VipBase, 0, bGO?0x01:0x00);
    8cfc:	e0bffe17 	ldw	r2,-8(fp)
    8d00:	e0ffff17 	ldw	r3,-4(fp)
    8d04:	1806c03a 	cmpne	r3,r3,zero
    8d08:	18c03fcc 	andi	r3,r3,255
    8d0c:	10c00035 	stwio	r3,0(r2)
}
    8d10:	e037883a 	mov	sp,fp
    8d14:	df000017 	ldw	fp,0(sp)
    8d18:	dec00104 	addi	sp,sp,4
    8d1c:	f800283a 	ret

00008d20 <VIPFR_ReserveBackground>:


///////////////////////////////////////////////////////////////


void VIPFR_ReserveBackground(VIP_FRAME_READER* p){
    8d20:	defffa04 	addi	sp,sp,-24
    8d24:	dfc00515 	stw	ra,20(sp)
    8d28:	df000415 	stw	fp,16(sp)
    8d2c:	df000404 	addi	fp,sp,16
    8d30:	e13fff15 	stw	r4,-4(fp)
    alt_u32 *pSrc, *pDes;
    int nSize;
    
    nSize = p->width * p->height * p->bytes_per_pixel;
    8d34:	e0bfff17 	ldw	r2,-4(fp)
    8d38:	10c00517 	ldw	r3,20(r2)
    8d3c:	e0bfff17 	ldw	r2,-4(fp)
    8d40:	10800617 	ldw	r2,24(r2)
    8d44:	1809883a 	mov	r4,r3
    8d48:	100b883a 	mov	r5,r2
    8d4c:	0009dec0 	call	9dec <__mulsi3>
    8d50:	1007883a 	mov	r3,r2
    8d54:	e0bfff17 	ldw	r2,-4(fp)
    8d58:	10800717 	ldw	r2,28(r2)
    8d5c:	1809883a 	mov	r4,r3
    8d60:	100b883a 	mov	r5,r2
    8d64:	0009dec0 	call	9dec <__mulsi3>
    8d68:	e0bffe15 	stw	r2,-8(fp)
        
    
    if (p->DisplayFrame == 0){
    8d6c:	e0bfff17 	ldw	r2,-4(fp)
    8d70:	10800303 	ldbu	r2,12(r2)
    8d74:	10803fcc 	andi	r2,r2,255
    8d78:	1000071e 	bne	r2,zero,8d98 <VIPFR_ReserveBackground+0x78>
        pSrc = p->Frame0_Base;
    8d7c:	e0bfff17 	ldw	r2,-4(fp)
    8d80:	10800117 	ldw	r2,4(r2)
    8d84:	e0bffc15 	stw	r2,-16(fp)
        pDes = p->Frame1_Base;
    8d88:	e0bfff17 	ldw	r2,-4(fp)
    8d8c:	10800217 	ldw	r2,8(r2)
    8d90:	e0bffd15 	stw	r2,-12(fp)
    8d94:	00000606 	br	8db0 <VIPFR_ReserveBackground+0x90>
    }else{
        pDes = p->Frame0_Base;
    8d98:	e0bfff17 	ldw	r2,-4(fp)
    8d9c:	10800117 	ldw	r2,4(r2)
    8da0:	e0bffd15 	stw	r2,-12(fp)
        pSrc = p->Frame1_Base;
    8da4:	e0bfff17 	ldw	r2,-4(fp)
    8da8:	10800217 	ldw	r2,8(r2)
    8dac:	e0bffc15 	stw	r2,-16(fp)
    }
#ifdef ENABLE_DMA    
    my_memcpy(pDes, pSrc, nSize);
#else    
    memcpy(pDes, pSrc, nSize);
    8db0:	e0bffe17 	ldw	r2,-8(fp)
    8db4:	e13ffd17 	ldw	r4,-12(fp)
    8db8:	e17ffc17 	ldw	r5,-16(fp)
    8dbc:	100d883a 	mov	r6,r2
    8dc0:	000ac0c0 	call	ac0c <memcpy>
#endif //ENABLE_DMA    
}
    8dc4:	e037883a 	mov	sp,fp
    8dc8:	dfc00117 	ldw	ra,4(sp)
    8dcc:	df000017 	ldw	fp,0(sp)
    8dd0:	dec00204 	addi	sp,sp,8
    8dd4:	f800283a 	ret

00008dd8 <sqrt>:
    8dd8:	defff104 	addi	sp,sp,-60
    8ddc:	dcc00d15 	stw	r19,52(sp)
    8de0:	dc800c15 	stw	r18,48(sp)
    8de4:	dc400b15 	stw	r17,44(sp)
    8de8:	dc000a15 	stw	r16,40(sp)
    8dec:	2023883a 	mov	r17,r4
    8df0:	dfc00e15 	stw	ra,56(sp)
    8df4:	048001f4 	movhi	r18,7
    8df8:	949f0504 	addi	r18,r18,31764
    8dfc:	2821883a 	mov	r16,r5
    8e00:	0008f200 	call	8f20 <__ieee754_sqrt>
    8e04:	91000017 	ldw	r4,0(r18)
    8e08:	1027883a 	mov	r19,r2
    8e0c:	00bfffc4 	movi	r2,-1
    8e10:	20800d26 	beq	r4,r2,8e48 <sqrt+0x70>
    8e14:	8809883a 	mov	r4,r17
    8e18:	800b883a 	mov	r5,r16
    8e1c:	d8c00915 	stw	r3,36(sp)
    8e20:	00091e40 	call	91e4 <__isnand>
    8e24:	d8c00917 	ldw	r3,36(sp)
    8e28:	1000071e 	bne	r2,zero,8e48 <sqrt+0x70>
    8e2c:	8809883a 	mov	r4,r17
    8e30:	800b883a 	mov	r5,r16
    8e34:	000d883a 	mov	r6,zero
    8e38:	000f883a 	mov	r7,zero
    8e3c:	0009ab80 	call	9ab8 <__ltdf2>
    8e40:	d8c00917 	ldw	r3,36(sp)
    8e44:	10000816 	blt	r2,zero,8e68 <sqrt+0x90>
    8e48:	9805883a 	mov	r2,r19
    8e4c:	dfc00e17 	ldw	ra,56(sp)
    8e50:	dcc00d17 	ldw	r19,52(sp)
    8e54:	dc800c17 	ldw	r18,48(sp)
    8e58:	dc400b17 	ldw	r17,44(sp)
    8e5c:	dc000a17 	ldw	r16,40(sp)
    8e60:	dec00f04 	addi	sp,sp,60
    8e64:	f800283a 	ret
    8e68:	94800017 	ldw	r18,0(r18)
    8e6c:	00800044 	movi	r2,1
    8e70:	d8800015 	stw	r2,0(sp)
    8e74:	008001f4 	movhi	r2,7
    8e78:	1090c304 	addi	r2,r2,17164
    8e7c:	d8800115 	stw	r2,4(sp)
    8e80:	d8000815 	stw	zero,32(sp)
    8e84:	dc400415 	stw	r17,16(sp)
    8e88:	dc000515 	stw	r16,20(sp)
    8e8c:	dc400215 	stw	r17,8(sp)
    8e90:	dc000315 	stw	r16,12(sp)
    8e94:	9000111e 	bne	r18,zero,8edc <sqrt+0x104>
    8e98:	d8000615 	stw	zero,24(sp)
    8e9c:	d8000715 	stw	zero,28(sp)
    8ea0:	d809883a 	mov	r4,sp
    8ea4:	00092100 	call	9210 <matherr>
    8ea8:	10001526 	beq	r2,zero,8f00 <sqrt+0x128>
    8eac:	d8800817 	ldw	r2,32(sp)
    8eb0:	1000171e 	bne	r2,zero,8f10 <sqrt+0x138>
    8eb4:	dcc00617 	ldw	r19,24(sp)
    8eb8:	d8c00717 	ldw	r3,28(sp)
    8ebc:	9805883a 	mov	r2,r19
    8ec0:	dfc00e17 	ldw	ra,56(sp)
    8ec4:	dcc00d17 	ldw	r19,52(sp)
    8ec8:	dc800c17 	ldw	r18,48(sp)
    8ecc:	dc400b17 	ldw	r17,44(sp)
    8ed0:	dc000a17 	ldw	r16,40(sp)
    8ed4:	dec00f04 	addi	sp,sp,60
    8ed8:	f800283a 	ret
    8edc:	0009883a 	mov	r4,zero
    8ee0:	000b883a 	mov	r5,zero
    8ee4:	000d883a 	mov	r6,zero
    8ee8:	000f883a 	mov	r7,zero
    8eec:	00099040 	call	9904 <__divdf3>
    8ef0:	d8800615 	stw	r2,24(sp)
    8ef4:	d8c00715 	stw	r3,28(sp)
    8ef8:	00800084 	movi	r2,2
    8efc:	90bfe81e 	bne	r18,r2,8ea0 <sqrt+0xc8>
    8f00:	000a4500 	call	a450 <__errno>
    8f04:	00c00844 	movi	r3,33
    8f08:	10c00015 	stw	r3,0(r2)
    8f0c:	003fe706 	br	8eac <sqrt+0xd4>
    8f10:	000a4500 	call	a450 <__errno>
    8f14:	d8c00817 	ldw	r3,32(sp)
    8f18:	10c00015 	stw	r3,0(r2)
    8f1c:	003fe506 	br	8eb4 <sqrt+0xdc>

00008f20 <__ieee754_sqrt>:
    8f20:	defffd04 	addi	sp,sp,-12
    8f24:	dc400115 	stw	r17,4(sp)
    8f28:	dc000015 	stw	r16,0(sp)
    8f2c:	dfc00215 	stw	ra,8(sp)
    8f30:	28dffc2c 	andhi	r3,r5,32752
    8f34:	009ffc34 	movhi	r2,32752
    8f38:	2821883a 	mov	r16,r5
    8f3c:	2023883a 	mov	r17,r4
    8f40:	2811883a 	mov	r8,r5
    8f44:	2013883a 	mov	r9,r4
    8f48:	18808326 	beq	r3,r2,9158 <__ieee754_sqrt+0x238>
    8f4c:	0140610e 	bge	zero,r5,90d4 <__ieee754_sqrt+0x1b4>
    8f50:	2805d53a 	srai	r2,r5,20
    8f54:	10006a26 	beq	r2,zero,9100 <__ieee754_sqrt+0x1e0>
    8f58:	00c00434 	movhi	r3,16
    8f5c:	18ffffc4 	addi	r3,r3,-1
    8f60:	10bf0044 	addi	r2,r2,-1023
    8f64:	40d0703a 	and	r8,r8,r3
    8f68:	10c0004c 	andi	r3,r2,1
    8f6c:	42000434 	orhi	r8,r8,16
    8f70:	1800511e 	bne	r3,zero,90b8 <__ieee754_sqrt+0x198>
    8f74:	4808d7fa 	srli	r4,r9,31
    8f78:	4211883a 	add	r8,r8,r8
    8f7c:	101bd07a 	srai	r13,r2,1
    8f80:	4107883a 	add	r3,r8,r4
    8f84:	4a4b883a 	add	r5,r9,r9
    8f88:	01000584 	movi	r4,22
    8f8c:	0015883a 	mov	r10,zero
    8f90:	000d883a 	mov	r6,zero
    8f94:	00800834 	movhi	r2,32
    8f98:	308f883a 	add	r7,r6,r2
    8f9c:	2810d7fa 	srli	r8,r5,31
    8fa0:	213fffc4 	addi	r4,r4,-1
    8fa4:	19c00316 	blt	r3,r7,8fb4 <__ieee754_sqrt+0x94>
    8fa8:	19c7c83a 	sub	r3,r3,r7
    8fac:	388d883a 	add	r6,r7,r2
    8fb0:	5095883a 	add	r10,r10,r2
    8fb4:	18c7883a 	add	r3,r3,r3
    8fb8:	1a07883a 	add	r3,r3,r8
    8fbc:	294b883a 	add	r5,r5,r5
    8fc0:	1004d07a 	srli	r2,r2,1
    8fc4:	203ff41e 	bne	r4,zero,8f98 <__ieee754_sqrt+0x78>
    8fc8:	01e00034 	movhi	r7,32768
    8fcc:	02400804 	movi	r9,32
    8fd0:	0005883a 	mov	r2,zero
    8fd4:	0017883a 	mov	r11,zero
    8fd8:	3819883a 	mov	r12,r7
    8fdc:	00000806 	br	9000 <__ieee754_sqrt+0xe0>
    8fe0:	19803226 	beq	r3,r6,90ac <__ieee754_sqrt+0x18c>
    8fe4:	2810d7fa 	srli	r8,r5,31
    8fe8:	18c7883a 	add	r3,r3,r3
    8fec:	4a7fffc4 	addi	r9,r9,-1
    8ff0:	1a07883a 	add	r3,r3,r8
    8ff4:	294b883a 	add	r5,r5,r5
    8ff8:	380ed07a 	srli	r7,r7,1
    8ffc:	48001326 	beq	r9,zero,904c <__ieee754_sqrt+0x12c>
    9000:	59d1883a 	add	r8,r11,r7
    9004:	30fff60e 	bge	r6,r3,8fe0 <__ieee754_sqrt+0xc0>
    9008:	4120002c 	andhi	r4,r8,32768
    900c:	41d7883a 	add	r11,r8,r7
    9010:	23002326 	beq	r4,r12,90a0 <__ieee754_sqrt+0x180>
    9014:	3009883a 	mov	r4,r6
    9018:	1987c83a 	sub	r3,r3,r6
    901c:	2a00012e 	bgeu	r5,r8,9024 <__ieee754_sqrt+0x104>
    9020:	18ffffc4 	addi	r3,r3,-1
    9024:	2a0bc83a 	sub	r5,r5,r8
    9028:	2810d7fa 	srli	r8,r5,31
    902c:	18c7883a 	add	r3,r3,r3
    9030:	4a7fffc4 	addi	r9,r9,-1
    9034:	11c5883a 	add	r2,r2,r7
    9038:	200d883a 	mov	r6,r4
    903c:	1a07883a 	add	r3,r3,r8
    9040:	294b883a 	add	r5,r5,r5
    9044:	380ed07a 	srli	r7,r7,1
    9048:	483fed1e 	bne	r9,zero,9000 <__ieee754_sqrt+0xe0>
    904c:	28c6b03a 	or	r3,r5,r3
    9050:	18000426 	beq	r3,zero,9064 <__ieee754_sqrt+0x144>
    9054:	00ffffc4 	movi	r3,-1
    9058:	10c05026 	beq	r2,r3,919c <__ieee754_sqrt+0x27c>
    905c:	10c0004c 	andi	r3,r2,1
    9060:	1885883a 	add	r2,r3,r2
    9064:	1022d07a 	srli	r17,r2,1
    9068:	5007d07a 	srai	r3,r10,1
    906c:	008ff834 	movhi	r2,16352
    9070:	5280004c 	andi	r10,r10,1
    9074:	1887883a 	add	r3,r3,r2
    9078:	5000141e 	bne	r10,zero,90cc <__ieee754_sqrt+0x1ac>
    907c:	681a953a 	slli	r13,r13,20
    9080:	68e1883a 	add	r16,r13,r3
    9084:	8805883a 	mov	r2,r17
    9088:	8007883a 	mov	r3,r16
    908c:	dfc00217 	ldw	ra,8(sp)
    9090:	dc400117 	ldw	r17,4(sp)
    9094:	dc000017 	ldw	r16,0(sp)
    9098:	dec00304 	addi	sp,sp,12
    909c:	f800283a 	ret
    90a0:	583fdc16 	blt	r11,zero,9014 <__ieee754_sqrt+0xf4>
    90a4:	31000044 	addi	r4,r6,1
    90a8:	003fdb06 	br	9018 <__ieee754_sqrt+0xf8>
    90ac:	2a3fd62e 	bgeu	r5,r8,9008 <__ieee754_sqrt+0xe8>
    90b0:	180d883a 	mov	r6,r3
    90b4:	003fcb06 	br	8fe4 <__ieee754_sqrt+0xc4>
    90b8:	4806d7fa 	srli	r3,r9,31
    90bc:	4211883a 	add	r8,r8,r8
    90c0:	4a53883a 	add	r9,r9,r9
    90c4:	40d1883a 	add	r8,r8,r3
    90c8:	003faa06 	br	8f74 <__ieee754_sqrt+0x54>
    90cc:	8c600034 	orhi	r17,r17,32768
    90d0:	003fea06 	br	907c <__ieee754_sqrt+0x15c>
    90d4:	00a00034 	movhi	r2,32768
    90d8:	10bfffc4 	addi	r2,r2,-1
    90dc:	2884703a 	and	r2,r5,r2
    90e0:	1104b03a 	or	r2,r2,r4
    90e4:	103fe726 	beq	r2,zero,9084 <__ieee754_sqrt+0x164>
    90e8:	2800331e 	bne	r5,zero,91b8 <__ieee754_sqrt+0x298>
    90ec:	0005883a 	mov	r2,zero
    90f0:	4810d2fa 	srli	r8,r9,11
    90f4:	10bffac4 	addi	r2,r2,-21
    90f8:	4812957a 	slli	r9,r9,21
    90fc:	403ffc26 	beq	r8,zero,90f0 <__ieee754_sqrt+0x1d0>
    9100:	40c0042c 	andhi	r3,r8,16
    9104:	1800281e 	bne	r3,zero,91a8 <__ieee754_sqrt+0x288>
    9108:	4211883a 	add	r8,r8,r8
    910c:	4100042c 	andhi	r4,r8,16
    9110:	18c00044 	addi	r3,r3,1
    9114:	203ffc26 	beq	r4,zero,9108 <__ieee754_sqrt+0x1e8>
    9118:	01400044 	movi	r5,1
    911c:	01000804 	movi	r4,32
    9120:	28cbc83a 	sub	r5,r5,r3
    9124:	20c9c83a 	sub	r4,r4,r3
    9128:	4908d83a 	srl	r4,r9,r4
    912c:	1145883a 	add	r2,r2,r5
    9130:	48d2983a 	sll	r9,r9,r3
    9134:	4110b03a 	or	r8,r8,r4
    9138:	00c00434 	movhi	r3,16
    913c:	18ffffc4 	addi	r3,r3,-1
    9140:	10bf0044 	addi	r2,r2,-1023
    9144:	40d0703a 	and	r8,r8,r3
    9148:	10c0004c 	andi	r3,r2,1
    914c:	42000434 	orhi	r8,r8,16
    9150:	183f8826 	beq	r3,zero,8f74 <__ieee754_sqrt+0x54>
    9154:	003fd806 	br	90b8 <__ieee754_sqrt+0x198>
    9158:	200d883a 	mov	r6,r4
    915c:	280f883a 	mov	r7,r5
    9160:	00096200 	call	9620 <__muldf3>
    9164:	8809883a 	mov	r4,r17
    9168:	800b883a 	mov	r5,r16
    916c:	100d883a 	mov	r6,r2
    9170:	180f883a 	mov	r7,r3
    9174:	000956c0 	call	956c <__adddf3>
    9178:	1023883a 	mov	r17,r2
    917c:	1821883a 	mov	r16,r3
    9180:	8805883a 	mov	r2,r17
    9184:	8007883a 	mov	r3,r16
    9188:	dfc00217 	ldw	ra,8(sp)
    918c:	dc400117 	ldw	r17,4(sp)
    9190:	dc000017 	ldw	r16,0(sp)
    9194:	dec00304 	addi	sp,sp,12
    9198:	f800283a 	ret
    919c:	52800044 	addi	r10,r10,1
    91a0:	0023883a 	mov	r17,zero
    91a4:	003fb006 	br	9068 <__ieee754_sqrt+0x148>
    91a8:	01000804 	movi	r4,32
    91ac:	01400044 	movi	r5,1
    91b0:	0007883a 	mov	r3,zero
    91b4:	003fdc06 	br	9128 <__ieee754_sqrt+0x208>
    91b8:	200d883a 	mov	r6,r4
    91bc:	280f883a 	mov	r7,r5
    91c0:	00095c00 	call	95c0 <__subdf3>
    91c4:	1009883a 	mov	r4,r2
    91c8:	180b883a 	mov	r5,r3
    91cc:	100d883a 	mov	r6,r2
    91d0:	180f883a 	mov	r7,r3
    91d4:	00099040 	call	9904 <__divdf3>
    91d8:	1023883a 	mov	r17,r2
    91dc:	1821883a 	mov	r16,r3
    91e0:	003fa806 	br	9084 <__ieee754_sqrt+0x164>

000091e4 <__isnand>:
    91e4:	0105c83a 	sub	r2,zero,r4
    91e8:	1108b03a 	or	r4,r2,r4
    91ec:	2004d7fa 	srli	r2,r4,31
    91f0:	00e00034 	movhi	r3,32768
    91f4:	18ffffc4 	addi	r3,r3,-1
    91f8:	28ca703a 	and	r5,r5,r3
    91fc:	1144b03a 	or	r2,r2,r5
    9200:	00dffc34 	movhi	r3,32752
    9204:	1885c83a 	sub	r2,r3,r2
    9208:	1004d7fa 	srli	r2,r2,31
    920c:	f800283a 	ret

00009210 <matherr>:
    9210:	0005883a 	mov	r2,zero
    9214:	f800283a 	ret

00009218 <_fpadd_parts>:
    9218:	2005883a 	mov	r2,r4
    921c:	21000017 	ldw	r4,0(r4)
    9220:	01c00044 	movi	r7,1
    9224:	3900622e 	bgeu	r7,r4,93b0 <_fpadd_parts+0x198>
    9228:	28c00017 	ldw	r3,0(r5)
    922c:	38c05f2e 	bgeu	r7,r3,93ac <_fpadd_parts+0x194>
    9230:	01c00104 	movi	r7,4
    9234:	21c0c626 	beq	r4,r7,9550 <_fpadd_parts+0x338>
    9238:	19c05c26 	beq	r3,r7,93ac <_fpadd_parts+0x194>
    923c:	01c00084 	movi	r7,2
    9240:	19c06b26 	beq	r3,r7,93f0 <_fpadd_parts+0x1d8>
    9244:	21c05926 	beq	r4,r7,93ac <_fpadd_parts+0x194>
    9248:	11c00217 	ldw	r7,8(r2)
    924c:	2ac00217 	ldw	r11,8(r5)
    9250:	13000317 	ldw	r12,12(r2)
    9254:	13400417 	ldw	r13,16(r2)
    9258:	3ac9c83a 	sub	r4,r7,r11
    925c:	2a000317 	ldw	r8,12(r5)
    9260:	2a400417 	ldw	r9,16(r5)
    9264:	2015883a 	mov	r10,r4
    9268:	20007516 	blt	r4,zero,9440 <_fpadd_parts+0x228>
    926c:	00c00fc4 	movi	r3,63
    9270:	1a805016 	blt	r3,r10,93b4 <_fpadd_parts+0x19c>
    9274:	0100870e 	bge	zero,r4,9494 <_fpadd_parts+0x27c>
    9278:	50fff804 	addi	r3,r10,-32
    927c:	18009916 	blt	r3,zero,94e4 <_fpadd_parts+0x2cc>
    9280:	48d6d83a 	srl	r11,r9,r3
    9284:	001d883a 	mov	r14,zero
    9288:	18009e16 	blt	r3,zero,9504 <_fpadd_parts+0x2ec>
    928c:	01000044 	movi	r4,1
    9290:	20c6983a 	sll	r3,r4,r3
    9294:	0015883a 	mov	r10,zero
    9298:	513fffc4 	addi	r4,r10,-1
    929c:	2295403a 	cmpgeu	r10,r4,r10
    92a0:	1a87c83a 	sub	r3,r3,r10
    92a4:	1a52703a 	and	r9,r3,r9
    92a8:	2210703a 	and	r8,r4,r8
    92ac:	4250b03a 	or	r8,r8,r9
    92b0:	4010c03a 	cmpne	r8,r8,zero
    92b4:	42d0b03a 	or	r8,r8,r11
    92b8:	7013883a 	mov	r9,r14
    92bc:	11000117 	ldw	r4,4(r2)
    92c0:	28800117 	ldw	r2,4(r5)
    92c4:	20804126 	beq	r4,r2,93cc <_fpadd_parts+0x1b4>
    92c8:	20006326 	beq	r4,zero,9458 <_fpadd_parts+0x240>
    92cc:	4305c83a 	sub	r2,r8,r12
    92d0:	4091803a 	cmpltu	r8,r8,r2
    92d4:	4b47c83a 	sub	r3,r9,r13
    92d8:	1a07c83a 	sub	r3,r3,r8
    92dc:	18006316 	blt	r3,zero,946c <_fpadd_parts+0x254>
    92e0:	30000115 	stw	zero,4(r6)
    92e4:	31c00215 	stw	r7,8(r6)
    92e8:	30800315 	stw	r2,12(r6)
    92ec:	30c00415 	stw	r3,16(r6)
    92f0:	11ffffc4 	addi	r7,r2,-1
    92f4:	388b403a 	cmpgeu	r5,r7,r2
    92f8:	194bc83a 	sub	r5,r3,r5
    92fc:	01040034 	movhi	r4,4096
    9300:	213fffc4 	addi	r4,r4,-1
    9304:	21401736 	bltu	r4,r5,9364 <_fpadd_parts+0x14c>
    9308:	29008226 	beq	r5,r4,9514 <_fpadd_parts+0x2fc>
    930c:	31400217 	ldw	r5,8(r6)
    9310:	02840034 	movhi	r10,4096
    9314:	52bfffc4 	addi	r10,r10,-1
    9318:	033fff84 	movi	r12,-2
    931c:	297fffc4 	addi	r5,r5,-1
    9320:	00000106 	br	9328 <_fpadd_parts+0x110>
    9324:	3a804a26 	beq	r7,r10,9450 <_fpadd_parts+0x238>
    9328:	1089883a 	add	r4,r2,r2
    932c:	2091803a 	cmpltu	r8,r4,r2
    9330:	18c7883a 	add	r3,r3,r3
    9334:	227fffc4 	addi	r9,r4,-1
    9338:	40d1883a 	add	r8,r8,r3
    933c:	490f403a 	cmpgeu	r7,r9,r4
    9340:	41cfc83a 	sub	r7,r8,r7
    9344:	2817883a 	mov	r11,r5
    9348:	2005883a 	mov	r2,r4
    934c:	4007883a 	mov	r3,r8
    9350:	297fffc4 	addi	r5,r5,-1
    9354:	51fff32e 	bgeu	r10,r7,9324 <_fpadd_parts+0x10c>
    9358:	31000315 	stw	r4,12(r6)
    935c:	32000415 	stw	r8,16(r6)
    9360:	32c00215 	stw	r11,8(r6)
    9364:	010000c4 	movi	r4,3
    9368:	31000015 	stw	r4,0(r6)
    936c:	01080034 	movhi	r4,8192
    9370:	213fffc4 	addi	r4,r4,-1
    9374:	20c00b2e 	bgeu	r4,r3,93a4 <_fpadd_parts+0x18c>
    9378:	180e97fa 	slli	r7,r3,31
    937c:	1008d07a 	srli	r4,r2,1
    9380:	31400217 	ldw	r5,8(r6)
    9384:	1806d07a 	srli	r3,r3,1
    9388:	1080004c 	andi	r2,r2,1
    938c:	3908b03a 	or	r4,r7,r4
    9390:	1108b03a 	or	r4,r2,r4
    9394:	29400044 	addi	r5,r5,1
    9398:	31000315 	stw	r4,12(r6)
    939c:	30c00415 	stw	r3,16(r6)
    93a0:	31400215 	stw	r5,8(r6)
    93a4:	3005883a 	mov	r2,r6
    93a8:	f800283a 	ret
    93ac:	2805883a 	mov	r2,r5
    93b0:	f800283a 	ret
    93b4:	59c01e0e 	bge	r11,r7,9430 <_fpadd_parts+0x218>
    93b8:	11000117 	ldw	r4,4(r2)
    93bc:	28800117 	ldw	r2,4(r5)
    93c0:	0011883a 	mov	r8,zero
    93c4:	0013883a 	mov	r9,zero
    93c8:	20bfbf1e 	bne	r4,r2,92c8 <_fpadd_parts+0xb0>
    93cc:	4305883a 	add	r2,r8,r12
    93d0:	1207803a 	cmpltu	r3,r2,r8
    93d4:	4b53883a 	add	r9,r9,r13
    93d8:	1a47883a 	add	r3,r3,r9
    93dc:	31000115 	stw	r4,4(r6)
    93e0:	31c00215 	stw	r7,8(r6)
    93e4:	30800315 	stw	r2,12(r6)
    93e8:	30c00415 	stw	r3,16(r6)
    93ec:	003fdd06 	br	9364 <_fpadd_parts+0x14c>
    93f0:	20ffef1e 	bne	r4,r3,93b0 <_fpadd_parts+0x198>
    93f4:	31000015 	stw	r4,0(r6)
    93f8:	10c00117 	ldw	r3,4(r2)
    93fc:	30c00115 	stw	r3,4(r6)
    9400:	10c00217 	ldw	r3,8(r2)
    9404:	11000117 	ldw	r4,4(r2)
    9408:	29400117 	ldw	r5,4(r5)
    940c:	30c00215 	stw	r3,8(r6)
    9410:	10c00317 	ldw	r3,12(r2)
    9414:	2908703a 	and	r4,r5,r4
    9418:	30c00315 	stw	r3,12(r6)
    941c:	10c00417 	ldw	r3,16(r2)
    9420:	31000115 	stw	r4,4(r6)
    9424:	3005883a 	mov	r2,r6
    9428:	30c00415 	stw	r3,16(r6)
    942c:	f800283a 	ret
    9430:	580f883a 	mov	r7,r11
    9434:	0019883a 	mov	r12,zero
    9438:	001b883a 	mov	r13,zero
    943c:	003f9f06 	br	92bc <_fpadd_parts+0xa4>
    9440:	0115c83a 	sub	r10,zero,r4
    9444:	00c00fc4 	movi	r3,63
    9448:	1abfda16 	blt	r3,r10,93b4 <_fpadd_parts+0x19c>
    944c:	003f8906 	br	9274 <_fpadd_parts+0x5c>
    9450:	627fb52e 	bgeu	r12,r9,9328 <_fpadd_parts+0x110>
    9454:	003fc006 	br	9358 <_fpadd_parts+0x140>
    9458:	6205c83a 	sub	r2,r12,r8
    945c:	6099803a 	cmpltu	r12,r12,r2
    9460:	6a47c83a 	sub	r3,r13,r9
    9464:	1b07c83a 	sub	r3,r3,r12
    9468:	183f9d0e 	bge	r3,zero,92e0 <_fpadd_parts+0xc8>
    946c:	0085c83a 	sub	r2,zero,r2
    9470:	1008c03a 	cmpne	r4,r2,zero
    9474:	00c7c83a 	sub	r3,zero,r3
    9478:	1907c83a 	sub	r3,r3,r4
    947c:	01000044 	movi	r4,1
    9480:	31000115 	stw	r4,4(r6)
    9484:	31c00215 	stw	r7,8(r6)
    9488:	30800315 	stw	r2,12(r6)
    948c:	30c00415 	stw	r3,16(r6)
    9490:	003f9706 	br	92f0 <_fpadd_parts+0xd8>
    9494:	203f8926 	beq	r4,zero,92bc <_fpadd_parts+0xa4>
    9498:	50fff804 	addi	r3,r10,-32
    949c:	3a8f883a 	add	r7,r7,r10
    94a0:	18002316 	blt	r3,zero,9530 <_fpadd_parts+0x318>
    94a4:	68d6d83a 	srl	r11,r13,r3
    94a8:	001d883a 	mov	r14,zero
    94ac:	18001c16 	blt	r3,zero,9520 <_fpadd_parts+0x308>
    94b0:	01000044 	movi	r4,1
    94b4:	20c6983a 	sll	r3,r4,r3
    94b8:	0015883a 	mov	r10,zero
    94bc:	513fffc4 	addi	r4,r10,-1
    94c0:	2295403a 	cmpgeu	r10,r4,r10
    94c4:	1a87c83a 	sub	r3,r3,r10
    94c8:	1b5a703a 	and	r13,r3,r13
    94cc:	2318703a 	and	r12,r4,r12
    94d0:	6358b03a 	or	r12,r12,r13
    94d4:	6018c03a 	cmpne	r12,r12,zero
    94d8:	62d8b03a 	or	r12,r12,r11
    94dc:	701b883a 	mov	r13,r14
    94e0:	003f7606 	br	92bc <_fpadd_parts+0xa4>
    94e4:	4808907a 	slli	r4,r9,1
    94e8:	02c007c4 	movi	r11,31
    94ec:	5a97c83a 	sub	r11,r11,r10
    94f0:	22c8983a 	sll	r4,r4,r11
    94f4:	4296d83a 	srl	r11,r8,r10
    94f8:	4a9cd83a 	srl	r14,r9,r10
    94fc:	22d6b03a 	or	r11,r4,r11
    9500:	003f6106 	br	9288 <_fpadd_parts+0x70>
    9504:	00c00044 	movi	r3,1
    9508:	1a94983a 	sll	r10,r3,r10
    950c:	0007883a 	mov	r3,zero
    9510:	003f6106 	br	9298 <_fpadd_parts+0x80>
    9514:	013fff84 	movi	r4,-2
    9518:	21ff7c2e 	bgeu	r4,r7,930c <_fpadd_parts+0xf4>
    951c:	003f9106 	br	9364 <_fpadd_parts+0x14c>
    9520:	00c00044 	movi	r3,1
    9524:	1a94983a 	sll	r10,r3,r10
    9528:	0007883a 	mov	r3,zero
    952c:	003fe306 	br	94bc <_fpadd_parts+0x2a4>
    9530:	6816907a 	slli	r11,r13,1
    9534:	010007c4 	movi	r4,31
    9538:	2289c83a 	sub	r4,r4,r10
    953c:	5908983a 	sll	r4,r11,r4
    9540:	6296d83a 	srl	r11,r12,r10
    9544:	6a9cd83a 	srl	r14,r13,r10
    9548:	22d6b03a 	or	r11,r4,r11
    954c:	003fd706 	br	94ac <_fpadd_parts+0x294>
    9550:	193f971e 	bne	r3,r4,93b0 <_fpadd_parts+0x198>
    9554:	11000117 	ldw	r4,4(r2)
    9558:	28c00117 	ldw	r3,4(r5)
    955c:	20ff9426 	beq	r4,r3,93b0 <_fpadd_parts+0x198>
    9560:	008001f4 	movhi	r2,7
    9564:	1090c504 	addi	r2,r2,17172
    9568:	f800283a 	ret

0000956c <__adddf3>:
    956c:	deffec04 	addi	sp,sp,-80
    9570:	d9001115 	stw	r4,68(sp)
    9574:	d9401215 	stw	r5,72(sp)
    9578:	d9001104 	addi	r4,sp,68
    957c:	d9400a04 	addi	r5,sp,40
    9580:	dfc01315 	stw	ra,76(sp)
    9584:	d9c01015 	stw	r7,64(sp)
    9588:	d9800f15 	stw	r6,60(sp)
    958c:	000a1f40 	call	a1f4 <__unpack_d>
    9590:	d9000f04 	addi	r4,sp,60
    9594:	d9400504 	addi	r5,sp,20
    9598:	000a1f40 	call	a1f4 <__unpack_d>
    959c:	d9000a04 	addi	r4,sp,40
    95a0:	d9400504 	addi	r5,sp,20
    95a4:	d80d883a 	mov	r6,sp
    95a8:	00092180 	call	9218 <_fpadd_parts>
    95ac:	1009883a 	mov	r4,r2
    95b0:	0009fd00 	call	9fd0 <__pack_d>
    95b4:	dfc01317 	ldw	ra,76(sp)
    95b8:	dec01404 	addi	sp,sp,80
    95bc:	f800283a 	ret

000095c0 <__subdf3>:
    95c0:	deffec04 	addi	sp,sp,-80
    95c4:	d9001115 	stw	r4,68(sp)
    95c8:	d9401215 	stw	r5,72(sp)
    95cc:	d9001104 	addi	r4,sp,68
    95d0:	d9400a04 	addi	r5,sp,40
    95d4:	dfc01315 	stw	ra,76(sp)
    95d8:	d9c01015 	stw	r7,64(sp)
    95dc:	d9800f15 	stw	r6,60(sp)
    95e0:	000a1f40 	call	a1f4 <__unpack_d>
    95e4:	d9000f04 	addi	r4,sp,60
    95e8:	d9400504 	addi	r5,sp,20
    95ec:	000a1f40 	call	a1f4 <__unpack_d>
    95f0:	d8800617 	ldw	r2,24(sp)
    95f4:	d9000a04 	addi	r4,sp,40
    95f8:	d9400504 	addi	r5,sp,20
    95fc:	d80d883a 	mov	r6,sp
    9600:	1080005c 	xori	r2,r2,1
    9604:	d8800615 	stw	r2,24(sp)
    9608:	00092180 	call	9218 <_fpadd_parts>
    960c:	1009883a 	mov	r4,r2
    9610:	0009fd00 	call	9fd0 <__pack_d>
    9614:	dfc01317 	ldw	ra,76(sp)
    9618:	dec01404 	addi	sp,sp,80
    961c:	f800283a 	ret

00009620 <__muldf3>:
    9620:	deffe404 	addi	sp,sp,-112
    9624:	d9001115 	stw	r4,68(sp)
    9628:	d9401215 	stw	r5,72(sp)
    962c:	d9001104 	addi	r4,sp,68
    9630:	d9400a04 	addi	r5,sp,40
    9634:	dfc01b15 	stw	ra,108(sp)
    9638:	d9800f15 	stw	r6,60(sp)
    963c:	d9c01015 	stw	r7,64(sp)
    9640:	ddc01a15 	stw	r23,104(sp)
    9644:	dd801915 	stw	r22,100(sp)
    9648:	dd401815 	stw	r21,96(sp)
    964c:	dd001715 	stw	r20,92(sp)
    9650:	dcc01615 	stw	r19,88(sp)
    9654:	dc801515 	stw	r18,84(sp)
    9658:	dc401415 	stw	r17,80(sp)
    965c:	dc001315 	stw	r16,76(sp)
    9660:	000a1f40 	call	a1f4 <__unpack_d>
    9664:	d9000f04 	addi	r4,sp,60
    9668:	d9400504 	addi	r5,sp,20
    966c:	000a1f40 	call	a1f4 <__unpack_d>
    9670:	d8c00a17 	ldw	r3,40(sp)
    9674:	00800044 	movi	r2,1
    9678:	10c01136 	bltu	r2,r3,96c0 <__muldf3+0xa0>
    967c:	d8c00b17 	ldw	r3,44(sp)
    9680:	d8800617 	ldw	r2,24(sp)
    9684:	d9000a04 	addi	r4,sp,40
    9688:	1884c03a 	cmpne	r2,r3,r2
    968c:	d8800b15 	stw	r2,44(sp)
    9690:	0009fd00 	call	9fd0 <__pack_d>
    9694:	dfc01b17 	ldw	ra,108(sp)
    9698:	ddc01a17 	ldw	r23,104(sp)
    969c:	dd801917 	ldw	r22,100(sp)
    96a0:	dd401817 	ldw	r21,96(sp)
    96a4:	dd001717 	ldw	r20,92(sp)
    96a8:	dcc01617 	ldw	r19,88(sp)
    96ac:	dc801517 	ldw	r18,84(sp)
    96b0:	dc401417 	ldw	r17,80(sp)
    96b4:	dc001317 	ldw	r16,76(sp)
    96b8:	dec01c04 	addi	sp,sp,112
    96bc:	f800283a 	ret
    96c0:	d9000517 	ldw	r4,20(sp)
    96c4:	11000636 	bltu	r2,r4,96e0 <__muldf3+0xc0>
    96c8:	d8800617 	ldw	r2,24(sp)
    96cc:	d8c00b17 	ldw	r3,44(sp)
    96d0:	d9000504 	addi	r4,sp,20
    96d4:	1884c03a 	cmpne	r2,r3,r2
    96d8:	d8800615 	stw	r2,24(sp)
    96dc:	003fec06 	br	9690 <__muldf3+0x70>
    96e0:	00800104 	movi	r2,4
    96e4:	1880051e 	bne	r3,r2,96fc <__muldf3+0xdc>
    96e8:	00800084 	movi	r2,2
    96ec:	20bfe31e 	bne	r4,r2,967c <__muldf3+0x5c>
    96f0:	010001f4 	movhi	r4,7
    96f4:	2110c504 	addi	r4,r4,17172
    96f8:	003fe506 	br	9690 <__muldf3+0x70>
    96fc:	2080031e 	bne	r4,r2,970c <__muldf3+0xec>
    9700:	00800084 	movi	r2,2
    9704:	18bffa26 	beq	r3,r2,96f0 <__muldf3+0xd0>
    9708:	003fef06 	br	96c8 <__muldf3+0xa8>
    970c:	00800084 	movi	r2,2
    9710:	18bfda26 	beq	r3,r2,967c <__muldf3+0x5c>
    9714:	20bfec26 	beq	r4,r2,96c8 <__muldf3+0xa8>
    9718:	dc000d17 	ldw	r16,52(sp)
    971c:	dd000817 	ldw	r20,32(sp)
    9720:	dc800917 	ldw	r18,36(sp)
    9724:	8009883a 	mov	r4,r16
    9728:	000b883a 	mov	r5,zero
    972c:	a00d883a 	mov	r6,r20
    9730:	000f883a 	mov	r7,zero
    9734:	0009e140 	call	9e14 <__muldi3>
    9738:	dc400e17 	ldw	r17,56(sp)
    973c:	9009883a 	mov	r4,r18
    9740:	800d883a 	mov	r6,r16
    9744:	000b883a 	mov	r5,zero
    9748:	000f883a 	mov	r7,zero
    974c:	102f883a 	mov	r23,r2
    9750:	1827883a 	mov	r19,r3
    9754:	0009e140 	call	9e14 <__muldi3>
    9758:	900d883a 	mov	r6,r18
    975c:	8809883a 	mov	r4,r17
    9760:	000b883a 	mov	r5,zero
    9764:	000f883a 	mov	r7,zero
    9768:	102b883a 	mov	r21,r2
    976c:	1821883a 	mov	r16,r3
    9770:	0009e140 	call	9e14 <__muldi3>
    9774:	8809883a 	mov	r4,r17
    9778:	000b883a 	mov	r5,zero
    977c:	a00d883a 	mov	r6,r20
    9780:	000f883a 	mov	r7,zero
    9784:	102d883a 	mov	r22,r2
    9788:	1825883a 	mov	r18,r3
    978c:	0009e140 	call	9e14 <__muldi3>
    9790:	154b883a 	add	r5,r2,r21
    9794:	2889803a 	cmpltu	r4,r5,r2
    9798:	1c07883a 	add	r3,r3,r16
    979c:	20c9883a 	add	r4,r4,r3
    97a0:	24004b36 	bltu	r4,r16,98d0 <__muldf3+0x2b0>
    97a4:	8100011e 	bne	r16,r4,97ac <__muldf3+0x18c>
    97a8:	2d404936 	bltu	r5,r21,98d0 <__muldf3+0x2b0>
    97ac:	0011883a 	mov	r8,zero
    97b0:	0007883a 	mov	r3,zero
    97b4:	2ccb883a 	add	r5,r5,r19
    97b8:	b80d883a 	mov	r6,r23
    97bc:	2cc0012e 	bgeu	r5,r19,97c4 <__muldf3+0x1a4>
    97c0:	02000044 	movi	r8,1
    97c4:	258f883a 	add	r7,r4,r22
    97c8:	3909803a 	cmpltu	r4,r7,r4
    97cc:	da400c17 	ldw	r9,48(sp)
    97d0:	2489883a 	add	r4,r4,r18
    97d4:	d8800717 	ldw	r2,28(sp)
    97d8:	20c9883a 	add	r4,r4,r3
    97dc:	da800b17 	ldw	r10,44(sp)
    97e0:	d8c00617 	ldw	r3,24(sp)
    97e4:	3a11883a 	add	r8,r7,r8
    97e8:	4885883a 	add	r2,r9,r2
    97ec:	50c6c03a 	cmpne	r3,r10,r3
    97f0:	41cf803a 	cmpltu	r7,r8,r7
    97f4:	12400104 	addi	r9,r2,4
    97f8:	d8c00115 	stw	r3,4(sp)
    97fc:	3909883a 	add	r4,r7,r4
    9800:	da400215 	stw	r9,8(sp)
    9804:	03480034 	movhi	r13,8192
    9808:	6b7fffc4 	addi	r13,r13,-1
    980c:	4007883a 	mov	r3,r8
    9810:	6900102e 	bgeu	r13,r4,9854 <__muldf3+0x234>
    9814:	10800144 	addi	r2,r2,5
    9818:	180ed07a 	srli	r7,r3,1
    981c:	18c0004c 	andi	r3,r3,1
    9820:	201097fa 	slli	r8,r4,31
    9824:	281697fa 	slli	r11,r5,31
    9828:	2008d07a 	srli	r4,r4,1
    982c:	3014d07a 	srli	r10,r6,1
    9830:	2812d07a 	srli	r9,r5,1
    9834:	1019883a 	mov	r12,r2
    9838:	18000226 	beq	r3,zero,9844 <__muldf3+0x224>
    983c:	5a8cb03a 	or	r6,r11,r10
    9840:	49600034 	orhi	r5,r9,32768
    9844:	41c6b03a 	or	r3,r8,r7
    9848:	10800044 	addi	r2,r2,1
    984c:	693ff236 	bltu	r13,r4,9818 <__muldf3+0x1f8>
    9850:	db000215 	stw	r12,8(sp)
    9854:	03440034 	movhi	r13,4096
    9858:	6b7fffc4 	addi	r13,r13,-1
    985c:	69001336 	bltu	r13,r4,98ac <__muldf3+0x28c>
    9860:	d8800217 	ldw	r2,8(sp)
    9864:	10bfffc4 	addi	r2,r2,-1
    9868:	18d3883a 	add	r9,r3,r3
    986c:	48c7803a 	cmpltu	r3,r9,r3
    9870:	2109883a 	add	r4,r4,r4
    9874:	190f883a 	add	r7,r3,r4
    9878:	3191883a 	add	r8,r6,r6
    987c:	4197803a 	cmpltu	r11,r8,r6
    9880:	2955883a 	add	r10,r5,r5
    9884:	1019883a 	mov	r12,r2
    9888:	4807883a 	mov	r3,r9
    988c:	3809883a 	mov	r4,r7
    9890:	2800010e 	bge	r5,zero,9898 <__muldf3+0x278>
    9894:	48c00054 	ori	r3,r9,1
    9898:	400d883a 	mov	r6,r8
    989c:	5a8b883a 	add	r5,r11,r10
    98a0:	10bfffc4 	addi	r2,r2,-1
    98a4:	69fff02e 	bgeu	r13,r7,9868 <__muldf3+0x248>
    98a8:	db000215 	stw	r12,8(sp)
    98ac:	18803fcc 	andi	r2,r3,255
    98b0:	01c02004 	movi	r7,128
    98b4:	11c00926 	beq	r2,r7,98dc <__muldf3+0x2bc>
    98b8:	008000c4 	movi	r2,3
    98bc:	d9000415 	stw	r4,16(sp)
    98c0:	d8c00315 	stw	r3,12(sp)
    98c4:	d8800015 	stw	r2,0(sp)
    98c8:	d809883a 	mov	r4,sp
    98cc:	003f7006 	br	9690 <__muldf3+0x70>
    98d0:	0011883a 	mov	r8,zero
    98d4:	00c00044 	movi	r3,1
    98d8:	003fb606 	br	97b4 <__muldf3+0x194>
    98dc:	19c0400c 	andi	r7,r3,256
    98e0:	383ff51e 	bne	r7,zero,98b8 <__muldf3+0x298>
    98e4:	314ab03a 	or	r5,r6,r5
    98e8:	283ff326 	beq	r5,zero,98b8 <__muldf3+0x298>
    98ec:	1885883a 	add	r2,r3,r2
    98f0:	10cb803a 	cmpltu	r5,r2,r3
    98f4:	00ffc004 	movi	r3,-256
    98f8:	10c6703a 	and	r3,r2,r3
    98fc:	2909883a 	add	r4,r5,r4
    9900:	003fed06 	br	98b8 <__muldf3+0x298>

00009904 <__divdf3>:
    9904:	defff104 	addi	sp,sp,-60
    9908:	d9000c15 	stw	r4,48(sp)
    990c:	d9400d15 	stw	r5,52(sp)
    9910:	d9000c04 	addi	r4,sp,48
    9914:	d9400504 	addi	r5,sp,20
    9918:	dfc00e15 	stw	ra,56(sp)
    991c:	d9800a15 	stw	r6,40(sp)
    9920:	d9c00b15 	stw	r7,44(sp)
    9924:	000a1f40 	call	a1f4 <__unpack_d>
    9928:	d9000a04 	addi	r4,sp,40
    992c:	d80b883a 	mov	r5,sp
    9930:	000a1f40 	call	a1f4 <__unpack_d>
    9934:	d8c00517 	ldw	r3,20(sp)
    9938:	00800044 	movi	r2,1
    993c:	10c00536 	bltu	r2,r3,9954 <__divdf3+0x50>
    9940:	d9000504 	addi	r4,sp,20
    9944:	0009fd00 	call	9fd0 <__pack_d>
    9948:	dfc00e17 	ldw	ra,56(sp)
    994c:	dec00f04 	addi	sp,sp,60
    9950:	f800283a 	ret
    9954:	d9000017 	ldw	r4,0(sp)
    9958:	11000536 	bltu	r2,r4,9970 <__divdf3+0x6c>
    995c:	d809883a 	mov	r4,sp
    9960:	0009fd00 	call	9fd0 <__pack_d>
    9964:	dfc00e17 	ldw	ra,56(sp)
    9968:	dec00f04 	addi	sp,sp,60
    996c:	f800283a 	ret
    9970:	d9800617 	ldw	r6,24(sp)
    9974:	d9400117 	ldw	r5,4(sp)
    9978:	00800104 	movi	r2,4
    997c:	314af03a 	xor	r5,r6,r5
    9980:	d9400615 	stw	r5,24(sp)
    9984:	18800226 	beq	r3,r2,9990 <__divdf3+0x8c>
    9988:	01400084 	movi	r5,2
    998c:	1940041e 	bne	r3,r5,99a0 <__divdf3+0x9c>
    9990:	193feb1e 	bne	r3,r4,9940 <__divdf3+0x3c>
    9994:	010001f4 	movhi	r4,7
    9998:	2110c504 	addi	r4,r4,17172
    999c:	003fe906 	br	9944 <__divdf3+0x40>
    99a0:	20803326 	beq	r4,r2,9a70 <__divdf3+0x16c>
    99a4:	21403726 	beq	r4,r5,9a84 <__divdf3+0x180>
    99a8:	d8800217 	ldw	r2,8(sp)
    99ac:	d9000717 	ldw	r4,28(sp)
    99b0:	d8c00917 	ldw	r3,36(sp)
    99b4:	da000417 	ldw	r8,16(sp)
    99b8:	2089c83a 	sub	r4,r4,r2
    99bc:	d9000715 	stw	r4,28(sp)
    99c0:	d8800817 	ldw	r2,32(sp)
    99c4:	dbc00317 	ldw	r15,12(sp)
    99c8:	1a000236 	bltu	r3,r8,99d4 <__divdf3+0xd0>
    99cc:	40c0081e 	bne	r8,r3,99f0 <__divdf3+0xec>
    99d0:	13c0072e 	bgeu	r2,r15,99f0 <__divdf3+0xec>
    99d4:	108b883a 	add	r5,r2,r2
    99d8:	288d803a 	cmpltu	r6,r5,r2
    99dc:	18c7883a 	add	r3,r3,r3
    99e0:	213fffc4 	addi	r4,r4,-1
    99e4:	2805883a 	mov	r2,r5
    99e8:	30c7883a 	add	r3,r6,r3
    99ec:	d9000715 	stw	r4,28(sp)
    99f0:	01400f44 	movi	r5,61
    99f4:	000f883a 	mov	r7,zero
    99f8:	01040034 	movhi	r4,4096
    99fc:	0019883a 	mov	r12,zero
    9a00:	001b883a 	mov	r13,zero
    9a04:	201697fa 	slli	r11,r4,31
    9a08:	3814d07a 	srli	r10,r7,1
    9a0c:	297fffc4 	addi	r5,r5,-1
    9a10:	1a000936 	bltu	r3,r8,9a38 <__divdf3+0x134>
    9a14:	13cdc83a 	sub	r6,r2,r15
    9a18:	1193803a 	cmpltu	r9,r2,r6
    9a1c:	1a1dc83a 	sub	r14,r3,r8
    9a20:	40c0011e 	bne	r8,r3,9a28 <__divdf3+0x124>
    9a24:	13c00436 	bltu	r2,r15,9a38 <__divdf3+0x134>
    9a28:	3005883a 	mov	r2,r6
    9a2c:	7247c83a 	sub	r3,r14,r9
    9a30:	61d8b03a 	or	r12,r12,r7
    9a34:	691ab03a 	or	r13,r13,r4
    9a38:	108d883a 	add	r6,r2,r2
    9a3c:	3093803a 	cmpltu	r9,r6,r2
    9a40:	18c7883a 	add	r3,r3,r3
    9a44:	5a8eb03a 	or	r7,r11,r10
    9a48:	2008d07a 	srli	r4,r4,1
    9a4c:	3005883a 	mov	r2,r6
    9a50:	48c7883a 	add	r3,r9,r3
    9a54:	283feb1e 	bne	r5,zero,9a04 <__divdf3+0x100>
    9a58:	61003fcc 	andi	r4,r12,255
    9a5c:	01402004 	movi	r5,128
    9a60:	21400b26 	beq	r4,r5,9a90 <__divdf3+0x18c>
    9a64:	db000815 	stw	r12,32(sp)
    9a68:	db400915 	stw	r13,36(sp)
    9a6c:	003fb406 	br	9940 <__divdf3+0x3c>
    9a70:	d8000815 	stw	zero,32(sp)
    9a74:	d8000915 	stw	zero,36(sp)
    9a78:	d8000715 	stw	zero,28(sp)
    9a7c:	d9000504 	addi	r4,sp,20
    9a80:	003fb006 	br	9944 <__divdf3+0x40>
    9a84:	d8800515 	stw	r2,20(sp)
    9a88:	d9000504 	addi	r4,sp,20
    9a8c:	003fad06 	br	9944 <__divdf3+0x40>
    9a90:	6140400c 	andi	r5,r12,256
    9a94:	283ff31e 	bne	r5,zero,9a64 <__divdf3+0x160>
    9a98:	30c4b03a 	or	r2,r6,r3
    9a9c:	103ff126 	beq	r2,zero,9a64 <__divdf3+0x160>
    9aa0:	6109883a 	add	r4,r12,r4
    9aa4:	2305803a 	cmpltu	r2,r4,r12
    9aa8:	033fc004 	movi	r12,-256
    9aac:	2318703a 	and	r12,r4,r12
    9ab0:	135b883a 	add	r13,r2,r13
    9ab4:	003feb06 	br	9a64 <__divdf3+0x160>

00009ab8 <__ltdf2>:
    9ab8:	defff104 	addi	sp,sp,-60
    9abc:	d9000c15 	stw	r4,48(sp)
    9ac0:	d9400d15 	stw	r5,52(sp)
    9ac4:	d9000c04 	addi	r4,sp,48
    9ac8:	d9400504 	addi	r5,sp,20
    9acc:	dfc00e15 	stw	ra,56(sp)
    9ad0:	d9800a15 	stw	r6,40(sp)
    9ad4:	d9c00b15 	stw	r7,44(sp)
    9ad8:	000a1f40 	call	a1f4 <__unpack_d>
    9adc:	d9000a04 	addi	r4,sp,40
    9ae0:	d80b883a 	mov	r5,sp
    9ae4:	000a1f40 	call	a1f4 <__unpack_d>
    9ae8:	d8c00517 	ldw	r3,20(sp)
    9aec:	00800044 	movi	r2,1
    9af0:	10c0052e 	bgeu	r2,r3,9b08 <__ltdf2+0x50>
    9af4:	d8c00017 	ldw	r3,0(sp)
    9af8:	10c0032e 	bgeu	r2,r3,9b08 <__ltdf2+0x50>
    9afc:	d9000504 	addi	r4,sp,20
    9b00:	d80b883a 	mov	r5,sp
    9b04:	000a2f80 	call	a2f8 <__fpcmp_parts_d>
    9b08:	dfc00e17 	ldw	ra,56(sp)
    9b0c:	dec00f04 	addi	sp,sp,60
    9b10:	f800283a 	ret

00009b14 <__floatsidf>:
    9b14:	2004d7fa 	srli	r2,r4,31
    9b18:	defff904 	addi	sp,sp,-28
    9b1c:	00c000c4 	movi	r3,3
    9b20:	dfc00615 	stw	ra,24(sp)
    9b24:	dc000515 	stw	r16,20(sp)
    9b28:	d8c00015 	stw	r3,0(sp)
    9b2c:	d8800115 	stw	r2,4(sp)
    9b30:	2000081e 	bne	r4,zero,9b54 <__floatsidf+0x40>
    9b34:	00800084 	movi	r2,2
    9b38:	d8800015 	stw	r2,0(sp)
    9b3c:	d809883a 	mov	r4,sp
    9b40:	0009fd00 	call	9fd0 <__pack_d>
    9b44:	dfc00617 	ldw	ra,24(sp)
    9b48:	dc000517 	ldw	r16,20(sp)
    9b4c:	dec00704 	addi	sp,sp,28
    9b50:	f800283a 	ret
    9b54:	00c00f04 	movi	r3,60
    9b58:	d8c00215 	stw	r3,8(sp)
    9b5c:	10000f1e 	bne	r2,zero,9b9c <__floatsidf+0x88>
    9b60:	2021883a 	mov	r16,r4
    9b64:	8009883a 	mov	r4,r16
    9b68:	0009f240 	call	9f24 <__clzsi2>
    9b6c:	11000744 	addi	r4,r2,29
    9b70:	0100110e 	bge	zero,r4,9bb8 <__floatsidf+0xa4>
    9b74:	10ffff44 	addi	r3,r2,-3
    9b78:	18001216 	blt	r3,zero,9bc4 <__floatsidf+0xb0>
    9b7c:	80c6983a 	sll	r3,r16,r3
    9b80:	0009883a 	mov	r4,zero
    9b84:	014007c4 	movi	r5,31
    9b88:	2885c83a 	sub	r2,r5,r2
    9b8c:	d9000315 	stw	r4,12(sp)
    9b90:	d8c00415 	stw	r3,16(sp)
    9b94:	d8800215 	stw	r2,8(sp)
    9b98:	003fe806 	br	9b3c <__floatsidf+0x28>
    9b9c:	00a00034 	movhi	r2,32768
    9ba0:	20800e26 	beq	r4,r2,9bdc <__floatsidf+0xc8>
    9ba4:	0121c83a 	sub	r16,zero,r4
    9ba8:	8009883a 	mov	r4,r16
    9bac:	0009f240 	call	9f24 <__clzsi2>
    9bb0:	11000744 	addi	r4,r2,29
    9bb4:	013fef16 	blt	zero,r4,9b74 <__floatsidf+0x60>
    9bb8:	dc000315 	stw	r16,12(sp)
    9bbc:	d8000415 	stw	zero,16(sp)
    9bc0:	003fde06 	br	9b3c <__floatsidf+0x28>
    9bc4:	800ad07a 	srli	r5,r16,1
    9bc8:	00c007c4 	movi	r3,31
    9bcc:	1907c83a 	sub	r3,r3,r4
    9bd0:	28c6d83a 	srl	r3,r5,r3
    9bd4:	8108983a 	sll	r4,r16,r4
    9bd8:	003fea06 	br	9b84 <__floatsidf+0x70>
    9bdc:	0005883a 	mov	r2,zero
    9be0:	00f07834 	movhi	r3,49632
    9be4:	003fd706 	br	9b44 <__floatsidf+0x30>

00009be8 <__fixdfsi>:
    9be8:	defff804 	addi	sp,sp,-32
    9bec:	d9000515 	stw	r4,20(sp)
    9bf0:	d9400615 	stw	r5,24(sp)
    9bf4:	d9000504 	addi	r4,sp,20
    9bf8:	d80b883a 	mov	r5,sp
    9bfc:	dfc00715 	stw	ra,28(sp)
    9c00:	000a1f40 	call	a1f4 <__unpack_d>
    9c04:	d8800017 	ldw	r2,0(sp)
    9c08:	00c00084 	movi	r3,2
    9c0c:	10c01c26 	beq	r2,r3,9c80 <__fixdfsi+0x98>
    9c10:	00c00044 	movi	r3,1
    9c14:	18801a2e 	bgeu	r3,r2,9c80 <__fixdfsi+0x98>
    9c18:	00c00104 	movi	r3,4
    9c1c:	10c01126 	beq	r2,r3,9c64 <__fixdfsi+0x7c>
    9c20:	d8800217 	ldw	r2,8(sp)
    9c24:	10001616 	blt	r2,zero,9c80 <__fixdfsi+0x98>
    9c28:	00c00784 	movi	r3,30
    9c2c:	18800d16 	blt	r3,r2,9c64 <__fixdfsi+0x7c>
    9c30:	00c00f04 	movi	r3,60
    9c34:	1885c83a 	sub	r2,r3,r2
    9c38:	10fff804 	addi	r3,r2,-32
    9c3c:	d9400317 	ldw	r5,12(sp)
    9c40:	d9000417 	ldw	r4,16(sp)
    9c44:	18001616 	blt	r3,zero,9ca0 <__fixdfsi+0xb8>
    9c48:	20c4d83a 	srl	r2,r4,r3
    9c4c:	d8c00117 	ldw	r3,4(sp)
    9c50:	18000126 	beq	r3,zero,9c58 <__fixdfsi+0x70>
    9c54:	0085c83a 	sub	r2,zero,r2
    9c58:	dfc00717 	ldw	ra,28(sp)
    9c5c:	dec00804 	addi	sp,sp,32
    9c60:	f800283a 	ret
    9c64:	d8800117 	ldw	r2,4(sp)
    9c68:	1000091e 	bne	r2,zero,9c90 <__fixdfsi+0xa8>
    9c6c:	00a00034 	movhi	r2,32768
    9c70:	10bfffc4 	addi	r2,r2,-1
    9c74:	dfc00717 	ldw	ra,28(sp)
    9c78:	dec00804 	addi	sp,sp,32
    9c7c:	f800283a 	ret
    9c80:	0005883a 	mov	r2,zero
    9c84:	dfc00717 	ldw	ra,28(sp)
    9c88:	dec00804 	addi	sp,sp,32
    9c8c:	f800283a 	ret
    9c90:	00a00034 	movhi	r2,32768
    9c94:	dfc00717 	ldw	ra,28(sp)
    9c98:	dec00804 	addi	sp,sp,32
    9c9c:	f800283a 	ret
    9ca0:	2008907a 	slli	r4,r4,1
    9ca4:	018007c4 	movi	r6,31
    9ca8:	308dc83a 	sub	r6,r6,r2
    9cac:	2188983a 	sll	r4,r4,r6
    9cb0:	2884d83a 	srl	r2,r5,r2
    9cb4:	2084b03a 	or	r2,r4,r2
    9cb8:	003fe406 	br	9c4c <__fixdfsi+0x64>

00009cbc <udivmodsi4>:
    9cbc:	2005883a 	mov	r2,r4
    9cc0:	2900182e 	bgeu	r5,r4,9d24 <udivmodsi4+0x68>
    9cc4:	28001716 	blt	r5,zero,9d24 <udivmodsi4+0x68>
    9cc8:	01000804 	movi	r4,32
    9ccc:	00c00044 	movi	r3,1
    9cd0:	00000206 	br	9cdc <udivmodsi4+0x20>
    9cd4:	20001126 	beq	r4,zero,9d1c <udivmodsi4+0x60>
    9cd8:	28000516 	blt	r5,zero,9cf0 <udivmodsi4+0x34>
    9cdc:	294b883a 	add	r5,r5,r5
    9ce0:	213fffc4 	addi	r4,r4,-1
    9ce4:	18c7883a 	add	r3,r3,r3
    9ce8:	28bffa36 	bltu	r5,r2,9cd4 <udivmodsi4+0x18>
    9cec:	18000b26 	beq	r3,zero,9d1c <udivmodsi4+0x60>
    9cf0:	0009883a 	mov	r4,zero
    9cf4:	11400236 	bltu	r2,r5,9d00 <udivmodsi4+0x44>
    9cf8:	1145c83a 	sub	r2,r2,r5
    9cfc:	20c8b03a 	or	r4,r4,r3
    9d00:	1806d07a 	srli	r3,r3,1
    9d04:	280ad07a 	srli	r5,r5,1
    9d08:	183ffa1e 	bne	r3,zero,9cf4 <udivmodsi4+0x38>
    9d0c:	3000021e 	bne	r6,zero,9d18 <udivmodsi4+0x5c>
    9d10:	2005883a 	mov	r2,r4
    9d14:	f800283a 	ret
    9d18:	f800283a 	ret
    9d1c:	0009883a 	mov	r4,zero
    9d20:	003ffa06 	br	9d0c <udivmodsi4+0x50>
    9d24:	00c00044 	movi	r3,1
    9d28:	0009883a 	mov	r4,zero
    9d2c:	003ff106 	br	9cf4 <udivmodsi4+0x38>

00009d30 <__divsi3>:
    9d30:	defffe04 	addi	sp,sp,-8
    9d34:	dfc00115 	stw	ra,4(sp)
    9d38:	dc000015 	stw	r16,0(sp)
    9d3c:	20000a16 	blt	r4,zero,9d68 <__divsi3+0x38>
    9d40:	0021883a 	mov	r16,zero
    9d44:	28000b16 	blt	r5,zero,9d74 <__divsi3+0x44>
    9d48:	000d883a 	mov	r6,zero
    9d4c:	0009cbc0 	call	9cbc <udivmodsi4>
    9d50:	80000126 	beq	r16,zero,9d58 <__divsi3+0x28>
    9d54:	0085c83a 	sub	r2,zero,r2
    9d58:	dfc00117 	ldw	ra,4(sp)
    9d5c:	dc000017 	ldw	r16,0(sp)
    9d60:	dec00204 	addi	sp,sp,8
    9d64:	f800283a 	ret
    9d68:	0109c83a 	sub	r4,zero,r4
    9d6c:	04000044 	movi	r16,1
    9d70:	283ff50e 	bge	r5,zero,9d48 <__divsi3+0x18>
    9d74:	014bc83a 	sub	r5,zero,r5
    9d78:	8400005c 	xori	r16,r16,1
    9d7c:	003ff206 	br	9d48 <__divsi3+0x18>

00009d80 <__modsi3>:
    9d80:	deffff04 	addi	sp,sp,-4
    9d84:	dfc00015 	stw	ra,0(sp)
    9d88:	20000516 	blt	r4,zero,9da0 <__modsi3+0x20>
    9d8c:	28000c16 	blt	r5,zero,9dc0 <__modsi3+0x40>
    9d90:	01800044 	movi	r6,1
    9d94:	dfc00017 	ldw	ra,0(sp)
    9d98:	dec00104 	addi	sp,sp,4
    9d9c:	0009cbc1 	jmpi	9cbc <udivmodsi4>
    9da0:	0109c83a 	sub	r4,zero,r4
    9da4:	28000b16 	blt	r5,zero,9dd4 <__modsi3+0x54>
    9da8:	01800044 	movi	r6,1
    9dac:	0009cbc0 	call	9cbc <udivmodsi4>
    9db0:	0085c83a 	sub	r2,zero,r2
    9db4:	dfc00017 	ldw	ra,0(sp)
    9db8:	dec00104 	addi	sp,sp,4
    9dbc:	f800283a 	ret
    9dc0:	014bc83a 	sub	r5,zero,r5
    9dc4:	01800044 	movi	r6,1
    9dc8:	dfc00017 	ldw	ra,0(sp)
    9dcc:	dec00104 	addi	sp,sp,4
    9dd0:	0009cbc1 	jmpi	9cbc <udivmodsi4>
    9dd4:	014bc83a 	sub	r5,zero,r5
    9dd8:	003ff306 	br	9da8 <__modsi3+0x28>

00009ddc <__udivsi3>:
    9ddc:	000d883a 	mov	r6,zero
    9de0:	0009cbc1 	jmpi	9cbc <udivmodsi4>

00009de4 <__umodsi3>:
    9de4:	01800044 	movi	r6,1
    9de8:	0009cbc1 	jmpi	9cbc <udivmodsi4>

00009dec <__mulsi3>:
    9dec:	0005883a 	mov	r2,zero
    9df0:	20000726 	beq	r4,zero,9e10 <__mulsi3+0x24>
    9df4:	20c0004c 	andi	r3,r4,1
    9df8:	2008d07a 	srli	r4,r4,1
    9dfc:	18000126 	beq	r3,zero,9e04 <__mulsi3+0x18>
    9e00:	1145883a 	add	r2,r2,r5
    9e04:	294b883a 	add	r5,r5,r5
    9e08:	203ffa1e 	bne	r4,zero,9df4 <__mulsi3+0x8>
    9e0c:	f800283a 	ret
    9e10:	f800283a 	ret

00009e14 <__muldi3>:
    9e14:	defff604 	addi	sp,sp,-40
    9e18:	dd400515 	stw	r21,20(sp)
    9e1c:	dd000415 	stw	r20,16(sp)
    9e20:	257fffcc 	andi	r21,r4,65535
    9e24:	353fffcc 	andi	r20,r6,65535
    9e28:	dcc00315 	stw	r19,12(sp)
    9e2c:	3026d43a 	srli	r19,r6,16
    9e30:	dd800615 	stw	r22,24(sp)
    9e34:	dc800215 	stw	r18,8(sp)
    9e38:	dc400115 	stw	r17,4(sp)
    9e3c:	2024d43a 	srli	r18,r4,16
    9e40:	2023883a 	mov	r17,r4
    9e44:	282d883a 	mov	r22,r5
    9e48:	a009883a 	mov	r4,r20
    9e4c:	a80b883a 	mov	r5,r21
    9e50:	dfc00915 	stw	ra,36(sp)
    9e54:	df000815 	stw	fp,32(sp)
    9e58:	ddc00715 	stw	r23,28(sp)
    9e5c:	3839883a 	mov	fp,r7
    9e60:	dc000015 	stw	r16,0(sp)
    9e64:	3021883a 	mov	r16,r6
    9e68:	0009dec0 	call	9dec <__mulsi3>
    9e6c:	a80b883a 	mov	r5,r21
    9e70:	9809883a 	mov	r4,r19
    9e74:	102f883a 	mov	r23,r2
    9e78:	0009dec0 	call	9dec <__mulsi3>
    9e7c:	a009883a 	mov	r4,r20
    9e80:	900b883a 	mov	r5,r18
    9e84:	102b883a 	mov	r21,r2
    9e88:	0009dec0 	call	9dec <__mulsi3>
    9e8c:	9809883a 	mov	r4,r19
    9e90:	900b883a 	mov	r5,r18
    9e94:	1029883a 	mov	r20,r2
    9e98:	0009dec0 	call	9dec <__mulsi3>
    9e9c:	1007883a 	mov	r3,r2
    9ea0:	b804d43a 	srli	r2,r23,16
    9ea4:	a549883a 	add	r4,r20,r21
    9ea8:	2089883a 	add	r4,r4,r2
    9eac:	2500022e 	bgeu	r4,r20,9eb8 <__muldi3+0xa4>
    9eb0:	00800074 	movhi	r2,1
    9eb4:	1887883a 	add	r3,r3,r2
    9eb8:	200cd43a 	srli	r6,r4,16
    9ebc:	2004943a 	slli	r2,r4,16
    9ec0:	e00b883a 	mov	r5,fp
    9ec4:	8809883a 	mov	r4,r17
    9ec8:	bdffffcc 	andi	r23,r23,65535
    9ecc:	19a3883a 	add	r17,r3,r6
    9ed0:	15ef883a 	add	r23,r2,r23
    9ed4:	0009dec0 	call	9dec <__mulsi3>
    9ed8:	8009883a 	mov	r4,r16
    9edc:	b00b883a 	mov	r5,r22
    9ee0:	1025883a 	mov	r18,r2
    9ee4:	0009dec0 	call	9dec <__mulsi3>
    9ee8:	9085883a 	add	r2,r18,r2
    9eec:	1447883a 	add	r3,r2,r17
    9ef0:	b805883a 	mov	r2,r23
    9ef4:	dfc00917 	ldw	ra,36(sp)
    9ef8:	df000817 	ldw	fp,32(sp)
    9efc:	ddc00717 	ldw	r23,28(sp)
    9f00:	dd800617 	ldw	r22,24(sp)
    9f04:	dd400517 	ldw	r21,20(sp)
    9f08:	dd000417 	ldw	r20,16(sp)
    9f0c:	dcc00317 	ldw	r19,12(sp)
    9f10:	dc800217 	ldw	r18,8(sp)
    9f14:	dc400117 	ldw	r17,4(sp)
    9f18:	dc000017 	ldw	r16,0(sp)
    9f1c:	dec00a04 	addi	sp,sp,40
    9f20:	f800283a 	ret

00009f24 <__clzsi2>:
    9f24:	00bfffd4 	movui	r2,65535
    9f28:	11000b36 	bltu	r2,r4,9f58 <__clzsi2+0x34>
    9f2c:	00803fc4 	movi	r2,255
    9f30:	11001e2e 	bgeu	r2,r4,9fac <__clzsi2+0x88>
    9f34:	00c00204 	movi	r3,8
    9f38:	20c8d83a 	srl	r4,r4,r3
    9f3c:	00c001f4 	movhi	r3,7
    9f40:	18d0ca04 	addi	r3,r3,17192
    9f44:	00800604 	movi	r2,24
    9f48:	1909883a 	add	r4,r3,r4
    9f4c:	20c00003 	ldbu	r3,0(r4)
    9f50:	10c5c83a 	sub	r2,r2,r3
    9f54:	f800283a 	ret
    9f58:	00804034 	movhi	r2,256
    9f5c:	10bfffc4 	addi	r2,r2,-1
    9f60:	11000936 	bltu	r2,r4,9f88 <__clzsi2+0x64>
    9f64:	00800404 	movi	r2,16
    9f68:	1007883a 	mov	r3,r2
    9f6c:	20c8d83a 	srl	r4,r4,r3
    9f70:	00c001f4 	movhi	r3,7
    9f74:	18d0ca04 	addi	r3,r3,17192
    9f78:	1909883a 	add	r4,r3,r4
    9f7c:	20c00003 	ldbu	r3,0(r4)
    9f80:	10c5c83a 	sub	r2,r2,r3
    9f84:	f800283a 	ret
    9f88:	00c00604 	movi	r3,24
    9f8c:	20c8d83a 	srl	r4,r4,r3
    9f90:	00c001f4 	movhi	r3,7
    9f94:	18d0ca04 	addi	r3,r3,17192
    9f98:	00800204 	movi	r2,8
    9f9c:	1909883a 	add	r4,r3,r4
    9fa0:	20c00003 	ldbu	r3,0(r4)
    9fa4:	10c5c83a 	sub	r2,r2,r3
    9fa8:	f800283a 	ret
    9fac:	0007883a 	mov	r3,zero
    9fb0:	20c8d83a 	srl	r4,r4,r3
    9fb4:	00c001f4 	movhi	r3,7
    9fb8:	18d0ca04 	addi	r3,r3,17192
    9fbc:	00800804 	movi	r2,32
    9fc0:	1909883a 	add	r4,r3,r4
    9fc4:	20c00003 	ldbu	r3,0(r4)
    9fc8:	10c5c83a 	sub	r2,r2,r3
    9fcc:	f800283a 	ret

00009fd0 <__pack_d>:
    9fd0:	20800017 	ldw	r2,0(r4)
    9fd4:	defff804 	addi	sp,sp,-32
    9fd8:	dcc00315 	stw	r19,12(sp)
    9fdc:	dc800215 	stw	r18,8(sp)
    9fe0:	dfc00715 	stw	ra,28(sp)
    9fe4:	dd800615 	stw	r22,24(sp)
    9fe8:	dd400515 	stw	r21,20(sp)
    9fec:	dd000415 	stw	r20,16(sp)
    9ff0:	dc400115 	stw	r17,4(sp)
    9ff4:	dc000015 	stw	r16,0(sp)
    9ff8:	04800044 	movi	r18,1
    9ffc:	24400317 	ldw	r17,12(r4)
    a000:	24000417 	ldw	r16,16(r4)
    a004:	24c00117 	ldw	r19,4(r4)
    a008:	9080422e 	bgeu	r18,r2,a114 <__pack_d+0x144>
    a00c:	00c00104 	movi	r3,4
    a010:	10c03c26 	beq	r2,r3,a104 <__pack_d+0x134>
    a014:	00c00084 	movi	r3,2
    a018:	10c01926 	beq	r2,r3,a080 <__pack_d+0xb0>
    a01c:	8c04b03a 	or	r2,r17,r16
    a020:	10001726 	beq	r2,zero,a080 <__pack_d+0xb0>
    a024:	21000217 	ldw	r4,8(r4)
    a028:	00bf0084 	movi	r2,-1022
    a02c:	20804016 	blt	r4,r2,a130 <__pack_d+0x160>
    a030:	0080ffc4 	movi	r2,1023
    a034:	11003316 	blt	r2,r4,a104 <__pack_d+0x134>
    a038:	88803fcc 	andi	r2,r17,255
    a03c:	00c02004 	movi	r3,128
    a040:	10c02926 	beq	r2,r3,a0e8 <__pack_d+0x118>
    a044:	88801fc4 	addi	r2,r17,127
    a048:	1463803a 	cmpltu	r17,r2,r17
    a04c:	8c21883a 	add	r16,r17,r16
    a050:	1023883a 	mov	r17,r2
    a054:	00880034 	movhi	r2,8192
    a058:	10bfffc4 	addi	r2,r2,-1
    a05c:	14001c36 	bltu	r2,r16,a0d0 <__pack_d+0x100>
    a060:	2100ffc4 	addi	r4,r4,1023
    a064:	8006963a 	slli	r3,r16,24
    a068:	8804d23a 	srli	r2,r17,8
    a06c:	8020913a 	slli	r16,r16,4
    a070:	2101ffcc 	andi	r4,r4,2047
    a074:	1884b03a 	or	r2,r3,r2
    a078:	8020d33a 	srli	r16,r16,12
    a07c:	00000306 	br	a08c <__pack_d+0xbc>
    a080:	0009883a 	mov	r4,zero
    a084:	0005883a 	mov	r2,zero
    a088:	0021883a 	mov	r16,zero
    a08c:	2008953a 	slli	r4,r4,20
    a090:	982697fa 	slli	r19,r19,31
    a094:	00c00434 	movhi	r3,16
    a098:	18ffffc4 	addi	r3,r3,-1
    a09c:	80e0703a 	and	r16,r16,r3
    a0a0:	8106b03a 	or	r3,r16,r4
    a0a4:	1cc6b03a 	or	r3,r3,r19
    a0a8:	dfc00717 	ldw	ra,28(sp)
    a0ac:	dd800617 	ldw	r22,24(sp)
    a0b0:	dd400517 	ldw	r21,20(sp)
    a0b4:	dd000417 	ldw	r20,16(sp)
    a0b8:	dcc00317 	ldw	r19,12(sp)
    a0bc:	dc800217 	ldw	r18,8(sp)
    a0c0:	dc400117 	ldw	r17,4(sp)
    a0c4:	dc000017 	ldw	r16,0(sp)
    a0c8:	dec00804 	addi	sp,sp,32
    a0cc:	f800283a 	ret
    a0d0:	800697fa 	slli	r3,r16,31
    a0d4:	8804d07a 	srli	r2,r17,1
    a0d8:	21010004 	addi	r4,r4,1024
    a0dc:	8020d07a 	srli	r16,r16,1
    a0e0:	18a2b03a 	or	r17,r3,r2
    a0e4:	003fdf06 	br	a064 <__pack_d+0x94>
    a0e8:	88c0400c 	andi	r3,r17,256
    a0ec:	183fd926 	beq	r3,zero,a054 <__pack_d+0x84>
    a0f0:	8885883a 	add	r2,r17,r2
    a0f4:	1463803a 	cmpltu	r17,r2,r17
    a0f8:	8c21883a 	add	r16,r17,r16
    a0fc:	1023883a 	mov	r17,r2
    a100:	003fd406 	br	a054 <__pack_d+0x84>
    a104:	0101ffc4 	movi	r4,2047
    a108:	0005883a 	mov	r2,zero
    a10c:	0021883a 	mov	r16,zero
    a110:	003fde06 	br	a08c <__pack_d+0xbc>
    a114:	84000234 	orhi	r16,r16,8
    a118:	00c00434 	movhi	r3,16
    a11c:	18ffffc4 	addi	r3,r3,-1
    a120:	8805883a 	mov	r2,r17
    a124:	80e0703a 	and	r16,r16,r3
    a128:	0101ffc4 	movi	r4,2047
    a12c:	003fd706 	br	a08c <__pack_d+0xbc>
    a130:	1129c83a 	sub	r20,r2,r4
    a134:	00800e04 	movi	r2,56
    a138:	15002716 	blt	r2,r20,a1d8 <__pack_d+0x208>
    a13c:	800b883a 	mov	r5,r16
    a140:	a00d883a 	mov	r6,r20
    a144:	8809883a 	mov	r4,r17
    a148:	000a3c80 	call	a3c8 <__lshrdi3>
    a14c:	9009883a 	mov	r4,r18
    a150:	000b883a 	mov	r5,zero
    a154:	a00d883a 	mov	r6,r20
    a158:	102d883a 	mov	r22,r2
    a15c:	182b883a 	mov	r21,r3
    a160:	000a40c0 	call	a40c <__ashldi3>
    a164:	1009003a 	cmpeq	r4,r2,zero
    a168:	1907c83a 	sub	r3,r3,r4
    a16c:	10bfffc4 	addi	r2,r2,-1
    a170:	1c20703a 	and	r16,r3,r16
    a174:	1444703a 	and	r2,r2,r17
    a178:	1404b03a 	or	r2,r2,r16
    a17c:	1004c03a 	cmpne	r2,r2,zero
    a180:	1584b03a 	or	r2,r2,r22
    a184:	11003fcc 	andi	r4,r2,255
    a188:	01402004 	movi	r5,128
    a18c:	a807883a 	mov	r3,r21
    a190:	2140131e 	bne	r4,r5,a1e0 <__pack_d+0x210>
    a194:	1140400c 	andi	r5,r2,256
    a198:	28000426 	beq	r5,zero,a1ac <__pack_d+0x1dc>
    a19c:	1109883a 	add	r4,r2,r4
    a1a0:	2085803a 	cmpltu	r2,r4,r2
    a1a4:	1547883a 	add	r3,r2,r21
    a1a8:	2005883a 	mov	r2,r4
    a1ac:	1808963a 	slli	r4,r3,24
    a1b0:	1004d23a 	srli	r2,r2,8
    a1b4:	1820913a 	slli	r16,r3,4
    a1b8:	01440034 	movhi	r5,4096
    a1bc:	297fffc4 	addi	r5,r5,-1
    a1c0:	2084b03a 	or	r2,r4,r2
    a1c4:	8020d33a 	srli	r16,r16,12
    a1c8:	01000044 	movi	r4,1
    a1cc:	28ffaf36 	bltu	r5,r3,a08c <__pack_d+0xbc>
    a1d0:	0009883a 	mov	r4,zero
    a1d4:	003fad06 	br	a08c <__pack_d+0xbc>
    a1d8:	0005883a 	mov	r2,zero
    a1dc:	0007883a 	mov	r3,zero
    a1e0:	11001fc4 	addi	r4,r2,127
    a1e4:	2085803a 	cmpltu	r2,r4,r2
    a1e8:	10c7883a 	add	r3,r2,r3
    a1ec:	2005883a 	mov	r2,r4
    a1f0:	003fee06 	br	a1ac <__pack_d+0x1dc>

0000a1f4 <__unpack_d>:
    a1f4:	21800117 	ldw	r6,4(r4)
    a1f8:	20c00017 	ldw	r3,0(r4)
    a1fc:	3004d7fa 	srli	r2,r6,31
    a200:	3008d53a 	srli	r4,r6,20
    a204:	28800115 	stw	r2,4(r5)
    a208:	2101ffcc 	andi	r4,r4,2047
    a20c:	00800434 	movhi	r2,16
    a210:	10bfffc4 	addi	r2,r2,-1
    a214:	3084703a 	and	r2,r6,r2
    a218:	20001a1e 	bne	r4,zero,a284 <__unpack_d+0x90>
    a21c:	1888b03a 	or	r4,r3,r2
    a220:	20002626 	beq	r4,zero,a2bc <__unpack_d+0xc8>
    a224:	1808d63a 	srli	r4,r3,24
    a228:	1004923a 	slli	r2,r2,8
    a22c:	01bf0084 	movi	r6,-1022
    a230:	29800215 	stw	r6,8(r5)
    a234:	2084b03a 	or	r2,r4,r2
    a238:	010000c4 	movi	r4,3
    a23c:	29000015 	stw	r4,0(r5)
    a240:	02040034 	movhi	r8,4096
    a244:	423fffc4 	addi	r8,r8,-1
    a248:	1806923a 	slli	r3,r3,8
    a24c:	40801836 	bltu	r8,r2,a2b0 <__unpack_d+0xbc>
    a250:	013f0044 	movi	r4,-1023
    a254:	18cd883a 	add	r6,r3,r3
    a258:	30c7803a 	cmpltu	r3,r6,r3
    a25c:	1085883a 	add	r2,r2,r2
    a260:	1885883a 	add	r2,r3,r2
    a264:	200f883a 	mov	r7,r4
    a268:	3007883a 	mov	r3,r6
    a26c:	213fffc4 	addi	r4,r4,-1
    a270:	40bff82e 	bgeu	r8,r2,a254 <__unpack_d+0x60>
    a274:	29c00215 	stw	r7,8(r5)
    a278:	28c00315 	stw	r3,12(r5)
    a27c:	28800415 	stw	r2,16(r5)
    a280:	f800283a 	ret
    a284:	01c1ffc4 	movi	r7,2047
    a288:	21c00f26 	beq	r4,r7,a2c8 <__unpack_d+0xd4>
    a28c:	180cd63a 	srli	r6,r3,24
    a290:	1004923a 	slli	r2,r2,8
    a294:	213f0044 	addi	r4,r4,-1023
    a298:	1806923a 	slli	r3,r3,8
    a29c:	3084b03a 	or	r2,r6,r2
    a2a0:	29000215 	stw	r4,8(r5)
    a2a4:	010000c4 	movi	r4,3
    a2a8:	10840034 	orhi	r2,r2,4096
    a2ac:	29000015 	stw	r4,0(r5)
    a2b0:	28c00315 	stw	r3,12(r5)
    a2b4:	28800415 	stw	r2,16(r5)
    a2b8:	f800283a 	ret
    a2bc:	00800084 	movi	r2,2
    a2c0:	28800015 	stw	r2,0(r5)
    a2c4:	f800283a 	ret
    a2c8:	1888b03a 	or	r4,r3,r2
    a2cc:	20000526 	beq	r4,zero,a2e4 <__unpack_d+0xf0>
    a2d0:	3180022c 	andhi	r6,r6,8
    a2d4:	30000626 	beq	r6,zero,a2f0 <__unpack_d+0xfc>
    a2d8:	01000044 	movi	r4,1
    a2dc:	29000015 	stw	r4,0(r5)
    a2e0:	003ff306 	br	a2b0 <__unpack_d+0xbc>
    a2e4:	00800104 	movi	r2,4
    a2e8:	28800015 	stw	r2,0(r5)
    a2ec:	f800283a 	ret
    a2f0:	28000015 	stw	zero,0(r5)
    a2f4:	003fee06 	br	a2b0 <__unpack_d+0xbc>

0000a2f8 <__fpcmp_parts_d>:
    a2f8:	20c00017 	ldw	r3,0(r4)
    a2fc:	00800044 	movi	r2,1
    a300:	10c0142e 	bgeu	r2,r3,a354 <__fpcmp_parts_d+0x5c>
    a304:	29800017 	ldw	r6,0(r5)
    a308:	1180122e 	bgeu	r2,r6,a354 <__fpcmp_parts_d+0x5c>
    a30c:	01c00104 	movi	r7,4
    a310:	19c02826 	beq	r3,r7,a3b4 <__fpcmp_parts_d+0xbc>
    a314:	31c00926 	beq	r6,r7,a33c <__fpcmp_parts_d+0x44>
    a318:	01c00084 	movi	r7,2
    a31c:	19c00626 	beq	r3,r7,a338 <__fpcmp_parts_d+0x40>
    a320:	31c00a26 	beq	r6,r7,a34c <__fpcmp_parts_d+0x54>
    a324:	20c00117 	ldw	r3,4(r4)
    a328:	29800117 	ldw	r6,4(r5)
    a32c:	19800b26 	beq	r3,r6,a35c <__fpcmp_parts_d+0x64>
    a330:	1800041e 	bne	r3,zero,a344 <__fpcmp_parts_d+0x4c>
    a334:	f800283a 	ret
    a338:	30c01a26 	beq	r6,r3,a3a4 <__fpcmp_parts_d+0xac>
    a33c:	28800117 	ldw	r2,4(r5)
    a340:	1000041e 	bne	r2,zero,a354 <__fpcmp_parts_d+0x5c>
    a344:	00bfffc4 	movi	r2,-1
    a348:	f800283a 	ret
    a34c:	20800117 	ldw	r2,4(r4)
    a350:	103ffc1e 	bne	r2,zero,a344 <__fpcmp_parts_d+0x4c>
    a354:	00800044 	movi	r2,1
    a358:	f800283a 	ret
    a35c:	21c00217 	ldw	r7,8(r4)
    a360:	29800217 	ldw	r6,8(r5)
    a364:	31c0020e 	bge	r6,r7,a370 <__fpcmp_parts_d+0x78>
    a368:	183ff61e 	bne	r3,zero,a344 <__fpcmp_parts_d+0x4c>
    a36c:	f800283a 	ret
    a370:	39800a16 	blt	r7,r6,a39c <__fpcmp_parts_d+0xa4>
    a374:	20800417 	ldw	r2,16(r4)
    a378:	29800417 	ldw	r6,16(r5)
    a37c:	21c00317 	ldw	r7,12(r4)
    a380:	29000317 	ldw	r4,12(r5)
    a384:	30800936 	bltu	r6,r2,a3ac <__fpcmp_parts_d+0xb4>
    a388:	1180011e 	bne	r2,r6,a390 <__fpcmp_parts_d+0x98>
    a38c:	21c00736 	bltu	r4,r7,a3ac <__fpcmp_parts_d+0xb4>
    a390:	11800236 	bltu	r2,r6,a39c <__fpcmp_parts_d+0xa4>
    a394:	3080031e 	bne	r6,r2,a3a4 <__fpcmp_parts_d+0xac>
    a398:	3900022e 	bgeu	r7,r4,a3a4 <__fpcmp_parts_d+0xac>
    a39c:	183fe926 	beq	r3,zero,a344 <__fpcmp_parts_d+0x4c>
    a3a0:	003fec06 	br	a354 <__fpcmp_parts_d+0x5c>
    a3a4:	0005883a 	mov	r2,zero
    a3a8:	f800283a 	ret
    a3ac:	183fe926 	beq	r3,zero,a354 <__fpcmp_parts_d+0x5c>
    a3b0:	003fe406 	br	a344 <__fpcmp_parts_d+0x4c>
    a3b4:	30ffe51e 	bne	r6,r3,a34c <__fpcmp_parts_d+0x54>
    a3b8:	28c00117 	ldw	r3,4(r5)
    a3bc:	20800117 	ldw	r2,4(r4)
    a3c0:	1885c83a 	sub	r2,r3,r2
    a3c4:	f800283a 	ret

0000a3c8 <__lshrdi3>:
    a3c8:	2005883a 	mov	r2,r4
    a3cc:	2807883a 	mov	r3,r5
    a3d0:	30000826 	beq	r6,zero,a3f4 <__lshrdi3+0x2c>
    a3d4:	01000804 	movi	r4,32
    a3d8:	2189c83a 	sub	r4,r4,r6
    a3dc:	0100060e 	bge	zero,r4,a3f8 <__lshrdi3+0x30>
    a3e0:	1184d83a 	srl	r2,r2,r6
    a3e4:	2908983a 	sll	r4,r5,r4
    a3e8:	298cd83a 	srl	r6,r5,r6
    a3ec:	2084b03a 	or	r2,r4,r2
    a3f0:	3007883a 	mov	r3,r6
    a3f4:	f800283a 	ret
    a3f8:	0105c83a 	sub	r2,zero,r4
    a3fc:	000d883a 	mov	r6,zero
    a400:	2884d83a 	srl	r2,r5,r2
    a404:	3007883a 	mov	r3,r6
    a408:	003ffa06 	br	a3f4 <__lshrdi3+0x2c>

0000a40c <__ashldi3>:
    a40c:	2005883a 	mov	r2,r4
    a410:	2807883a 	mov	r3,r5
    a414:	30000826 	beq	r6,zero,a438 <__ashldi3+0x2c>
    a418:	01000804 	movi	r4,32
    a41c:	2189c83a 	sub	r4,r4,r6
    a420:	0100060e 	bge	zero,r4,a43c <__ashldi3+0x30>
    a424:	1108d83a 	srl	r4,r2,r4
    a428:	2986983a 	sll	r3,r5,r6
    a42c:	118c983a 	sll	r6,r2,r6
    a430:	20c6b03a 	or	r3,r4,r3
    a434:	3005883a 	mov	r2,r6
    a438:	f800283a 	ret
    a43c:	0107c83a 	sub	r3,zero,r4
    a440:	000d883a 	mov	r6,zero
    a444:	10c6983a 	sll	r3,r2,r3
    a448:	3005883a 	mov	r2,r6
    a44c:	003ffa06 	br	a438 <__ashldi3+0x2c>

0000a450 <__errno>:
    a450:	008001f4 	movhi	r2,7
    a454:	109f0704 	addi	r2,r2,31772
    a458:	10800017 	ldw	r2,0(r2)
    a45c:	f800283a 	ret

0000a460 <malloc>:
    a460:	008001f4 	movhi	r2,7
    a464:	109f0704 	addi	r2,r2,31772
    a468:	200b883a 	mov	r5,r4
    a46c:	11000017 	ldw	r4,0(r2)
    a470:	000a4881 	jmpi	a488 <_malloc_r>

0000a474 <free>:
    a474:	008001f4 	movhi	r2,7
    a478:	109f0704 	addi	r2,r2,31772
    a47c:	200b883a 	mov	r5,r4
    a480:	11000017 	ldw	r4,0(r2)
    a484:	000f1601 	jmpi	f160 <_free_r>

0000a488 <_malloc_r>:
    a488:	defff604 	addi	sp,sp,-40
    a48c:	dc800215 	stw	r18,8(sp)
    a490:	dfc00915 	stw	ra,36(sp)
    a494:	df000815 	stw	fp,32(sp)
    a498:	ddc00715 	stw	r23,28(sp)
    a49c:	dd800615 	stw	r22,24(sp)
    a4a0:	dd400515 	stw	r21,20(sp)
    a4a4:	dd000415 	stw	r20,16(sp)
    a4a8:	dcc00315 	stw	r19,12(sp)
    a4ac:	dc400115 	stw	r17,4(sp)
    a4b0:	dc000015 	stw	r16,0(sp)
    a4b4:	288002c4 	addi	r2,r5,11
    a4b8:	00c00584 	movi	r3,22
    a4bc:	2025883a 	mov	r18,r4
    a4c0:	18802b2e 	bgeu	r3,r2,a570 <_malloc_r+0xe8>
    a4c4:	047ffe04 	movi	r17,-8
    a4c8:	1462703a 	and	r17,r2,r17
    a4cc:	88002a16 	blt	r17,zero,a578 <_malloc_r+0xf0>
    a4d0:	89402936 	bltu	r17,r5,a578 <_malloc_r+0xf0>
    a4d4:	9009883a 	mov	r4,r18
    a4d8:	001375c0 	call	1375c <__malloc_lock>
    a4dc:	00807dc4 	movi	r2,503
    a4e0:	14402936 	bltu	r2,r17,a588 <_malloc_r+0x100>
    a4e4:	8808d0fa 	srli	r4,r17,3
    a4e8:	04c001f4 	movhi	r19,7
    a4ec:	9cd97c04 	addi	r19,r19,26096
    a4f0:	2105883a 	add	r2,r4,r4
    a4f4:	1085883a 	add	r2,r2,r2
    a4f8:	1085883a 	add	r2,r2,r2
    a4fc:	9885883a 	add	r2,r19,r2
    a500:	14000317 	ldw	r16,12(r2)
    a504:	80815526 	beq	r16,r2,aa5c <_malloc_r+0x5d4>
    a508:	81000117 	ldw	r4,4(r16)
    a50c:	00bfff04 	movi	r2,-4
    a510:	80c00317 	ldw	r3,12(r16)
    a514:	2084703a 	and	r2,r4,r2
    a518:	8085883a 	add	r2,r16,r2
    a51c:	11800117 	ldw	r6,4(r2)
    a520:	81400217 	ldw	r5,8(r16)
    a524:	9009883a 	mov	r4,r18
    a528:	31800054 	ori	r6,r6,1
    a52c:	11800115 	stw	r6,4(r2)
    a530:	28c00315 	stw	r3,12(r5)
    a534:	19400215 	stw	r5,8(r3)
    a538:	001377c0 	call	1377c <__malloc_unlock>
    a53c:	80800204 	addi	r2,r16,8
    a540:	dfc00917 	ldw	ra,36(sp)
    a544:	df000817 	ldw	fp,32(sp)
    a548:	ddc00717 	ldw	r23,28(sp)
    a54c:	dd800617 	ldw	r22,24(sp)
    a550:	dd400517 	ldw	r21,20(sp)
    a554:	dd000417 	ldw	r20,16(sp)
    a558:	dcc00317 	ldw	r19,12(sp)
    a55c:	dc800217 	ldw	r18,8(sp)
    a560:	dc400117 	ldw	r17,4(sp)
    a564:	dc000017 	ldw	r16,0(sp)
    a568:	dec00a04 	addi	sp,sp,40
    a56c:	f800283a 	ret
    a570:	04400404 	movi	r17,16
    a574:	897fd72e 	bgeu	r17,r5,a4d4 <_malloc_r+0x4c>
    a578:	00800304 	movi	r2,12
    a57c:	90800015 	stw	r2,0(r18)
    a580:	0005883a 	mov	r2,zero
    a584:	003fee06 	br	a540 <_malloc_r+0xb8>
    a588:	8808d27a 	srli	r4,r17,9
    a58c:	20007126 	beq	r4,zero,a754 <_malloc_r+0x2cc>
    a590:	00800104 	movi	r2,4
    a594:	1100eb36 	bltu	r2,r4,a944 <_malloc_r+0x4bc>
    a598:	8808d1ba 	srli	r4,r17,6
    a59c:	21000e04 	addi	r4,r4,56
    a5a0:	210b883a 	add	r5,r4,r4
    a5a4:	294b883a 	add	r5,r5,r5
    a5a8:	294b883a 	add	r5,r5,r5
    a5ac:	04c001f4 	movhi	r19,7
    a5b0:	9cd97c04 	addi	r19,r19,26096
    a5b4:	994b883a 	add	r5,r19,r5
    a5b8:	2c000317 	ldw	r16,12(r5)
    a5bc:	2c000e26 	beq	r5,r16,a5f8 <_malloc_r+0x170>
    a5c0:	80c00117 	ldw	r3,4(r16)
    a5c4:	01ffff04 	movi	r7,-4
    a5c8:	018003c4 	movi	r6,15
    a5cc:	19c6703a 	and	r3,r3,r7
    a5d0:	1c45c83a 	sub	r2,r3,r17
    a5d4:	30800716 	blt	r6,r2,a5f4 <_malloc_r+0x16c>
    a5d8:	1000610e 	bge	r2,zero,a760 <_malloc_r+0x2d8>
    a5dc:	84000317 	ldw	r16,12(r16)
    a5e0:	2c000526 	beq	r5,r16,a5f8 <_malloc_r+0x170>
    a5e4:	80c00117 	ldw	r3,4(r16)
    a5e8:	19c6703a 	and	r3,r3,r7
    a5ec:	1c45c83a 	sub	r2,r3,r17
    a5f0:	30bff90e 	bge	r6,r2,a5d8 <_malloc_r+0x150>
    a5f4:	213fffc4 	addi	r4,r4,-1
    a5f8:	21000044 	addi	r4,r4,1
    a5fc:	9c000417 	ldw	r16,16(r19)
    a600:	00c001f4 	movhi	r3,7
    a604:	18d97c04 	addi	r3,r3,26096
    a608:	1a400204 	addi	r9,r3,8
    a60c:	8240ff26 	beq	r16,r9,aa0c <_malloc_r+0x584>
    a610:	81400117 	ldw	r5,4(r16)
    a614:	00bfff04 	movi	r2,-4
    a618:	018003c4 	movi	r6,15
    a61c:	2884703a 	and	r2,r5,r2
    a620:	144bc83a 	sub	r5,r2,r17
    a624:	3140ea16 	blt	r6,r5,a9d0 <_malloc_r+0x548>
    a628:	1a400515 	stw	r9,20(r3)
    a62c:	1a400415 	stw	r9,16(r3)
    a630:	2800570e 	bge	r5,zero,a790 <_malloc_r+0x308>
    a634:	01407fc4 	movi	r5,511
    a638:	2880ca36 	bltu	r5,r2,a964 <_malloc_r+0x4dc>
    a63c:	1004d0fa 	srli	r2,r2,3
    a640:	02000044 	movi	r8,1
    a644:	19c00117 	ldw	r7,4(r3)
    a648:	108b883a 	add	r5,r2,r2
    a64c:	294b883a 	add	r5,r5,r5
    a650:	1005d0ba 	srai	r2,r2,2
    a654:	294b883a 	add	r5,r5,r5
    a658:	28cb883a 	add	r5,r5,r3
    a65c:	29800217 	ldw	r6,8(r5)
    a660:	4084983a 	sll	r2,r8,r2
    a664:	81400315 	stw	r5,12(r16)
    a668:	81800215 	stw	r6,8(r16)
    a66c:	11c4b03a 	or	r2,r2,r7
    a670:	18800115 	stw	r2,4(r3)
    a674:	2c000215 	stw	r16,8(r5)
    a678:	34000315 	stw	r16,12(r6)
    a67c:	200bd0ba 	srai	r5,r4,2
    a680:	00c00044 	movi	r3,1
    a684:	194a983a 	sll	r5,r3,r5
    a688:	11404936 	bltu	r2,r5,a7b0 <_malloc_r+0x328>
    a68c:	1146703a 	and	r3,r2,r5
    a690:	18000a1e 	bne	r3,zero,a6bc <_malloc_r+0x234>
    a694:	00ffff04 	movi	r3,-4
    a698:	294b883a 	add	r5,r5,r5
    a69c:	20c8703a 	and	r4,r4,r3
    a6a0:	1146703a 	and	r3,r2,r5
    a6a4:	21000104 	addi	r4,r4,4
    a6a8:	1800041e 	bne	r3,zero,a6bc <_malloc_r+0x234>
    a6ac:	294b883a 	add	r5,r5,r5
    a6b0:	1146703a 	and	r3,r2,r5
    a6b4:	21000104 	addi	r4,r4,4
    a6b8:	183ffc26 	beq	r3,zero,a6ac <_malloc_r+0x224>
    a6bc:	023fff04 	movi	r8,-4
    a6c0:	01c003c4 	movi	r7,15
    a6c4:	2105883a 	add	r2,r4,r4
    a6c8:	1085883a 	add	r2,r2,r2
    a6cc:	1085883a 	add	r2,r2,r2
    a6d0:	9899883a 	add	r12,r19,r2
    a6d4:	62800304 	addi	r10,r12,12
    a6d8:	2017883a 	mov	r11,r4
    a6dc:	54000017 	ldw	r16,0(r10)
    a6e0:	51bffd04 	addi	r6,r10,-12
    a6e4:	8180041e 	bne	r16,r6,a6f8 <_malloc_r+0x270>
    a6e8:	0000ca06 	br	aa14 <_malloc_r+0x58c>
    a6ec:	10001c0e 	bge	r2,zero,a760 <_malloc_r+0x2d8>
    a6f0:	84000317 	ldw	r16,12(r16)
    a6f4:	8180c726 	beq	r16,r6,aa14 <_malloc_r+0x58c>
    a6f8:	80c00117 	ldw	r3,4(r16)
    a6fc:	1a06703a 	and	r3,r3,r8
    a700:	1c45c83a 	sub	r2,r3,r17
    a704:	38bff90e 	bge	r7,r2,a6ec <_malloc_r+0x264>
    a708:	81000317 	ldw	r4,12(r16)
    a70c:	81400217 	ldw	r5,8(r16)
    a710:	8447883a 	add	r3,r16,r17
    a714:	8c400054 	ori	r17,r17,1
    a718:	29000315 	stw	r4,12(r5)
    a71c:	21400215 	stw	r5,8(r4)
    a720:	84400115 	stw	r17,4(r16)
    a724:	1889883a 	add	r4,r3,r2
    a728:	11400054 	ori	r5,r2,1
    a72c:	98c00515 	stw	r3,20(r19)
    a730:	98c00415 	stw	r3,16(r19)
    a734:	20800015 	stw	r2,0(r4)
    a738:	1a400315 	stw	r9,12(r3)
    a73c:	1a400215 	stw	r9,8(r3)
    a740:	19400115 	stw	r5,4(r3)
    a744:	9009883a 	mov	r4,r18
    a748:	001377c0 	call	1377c <__malloc_unlock>
    a74c:	80800204 	addi	r2,r16,8
    a750:	003f7b06 	br	a540 <_malloc_r+0xb8>
    a754:	8808d0fa 	srli	r4,r17,3
    a758:	210b883a 	add	r5,r4,r4
    a75c:	003f9106 	br	a5a4 <_malloc_r+0x11c>
    a760:	80c7883a 	add	r3,r16,r3
    a764:	19400117 	ldw	r5,4(r3)
    a768:	80800317 	ldw	r2,12(r16)
    a76c:	81000217 	ldw	r4,8(r16)
    a770:	29400054 	ori	r5,r5,1
    a774:	19400115 	stw	r5,4(r3)
    a778:	20800315 	stw	r2,12(r4)
    a77c:	11000215 	stw	r4,8(r2)
    a780:	9009883a 	mov	r4,r18
    a784:	001377c0 	call	1377c <__malloc_unlock>
    a788:	80800204 	addi	r2,r16,8
    a78c:	003f6c06 	br	a540 <_malloc_r+0xb8>
    a790:	8085883a 	add	r2,r16,r2
    a794:	10c00117 	ldw	r3,4(r2)
    a798:	9009883a 	mov	r4,r18
    a79c:	18c00054 	ori	r3,r3,1
    a7a0:	10c00115 	stw	r3,4(r2)
    a7a4:	001377c0 	call	1377c <__malloc_unlock>
    a7a8:	80800204 	addi	r2,r16,8
    a7ac:	003f6406 	br	a540 <_malloc_r+0xb8>
    a7b0:	9c000217 	ldw	r16,8(r19)
    a7b4:	00bfff04 	movi	r2,-4
    a7b8:	85400117 	ldw	r21,4(r16)
    a7bc:	a8aa703a 	and	r21,r21,r2
    a7c0:	ac400336 	bltu	r21,r17,a7d0 <_malloc_r+0x348>
    a7c4:	ac45c83a 	sub	r2,r21,r17
    a7c8:	00c003c4 	movi	r3,15
    a7cc:	18805316 	blt	r3,r2,a91c <_malloc_r+0x494>
    a7d0:	d5ed9d17 	ldw	r23,-18828(gp)
    a7d4:	d0e00517 	ldw	r3,-32748(gp)
    a7d8:	00bfffc4 	movi	r2,-1
    a7dc:	8579883a 	add	fp,r16,r21
    a7e0:	8def883a 	add	r23,r17,r23
    a7e4:	1880d226 	beq	r3,r2,ab30 <_malloc_r+0x6a8>
    a7e8:	bdc403c4 	addi	r23,r23,4111
    a7ec:	00bc0004 	movi	r2,-4096
    a7f0:	b8ae703a 	and	r23,r23,r2
    a7f4:	9009883a 	mov	r4,r18
    a7f8:	b80b883a 	mov	r5,r23
    a7fc:	000af4c0 	call	af4c <_sbrk_r>
    a800:	1029883a 	mov	r20,r2
    a804:	00bfffc4 	movi	r2,-1
    a808:	a080d126 	beq	r20,r2,ab50 <_malloc_r+0x6c8>
    a80c:	a7009f36 	bltu	r20,fp,aa8c <_malloc_r+0x604>
    a810:	05800234 	movhi	r22,8
    a814:	b5acab04 	addi	r22,r22,-19796
    a818:	b0800017 	ldw	r2,0(r22)
    a81c:	b885883a 	add	r2,r23,r2
    a820:	b0800015 	stw	r2,0(r22)
    a824:	e500cf26 	beq	fp,r20,ab64 <_malloc_r+0x6dc>
    a828:	d1200517 	ldw	r4,-32748(gp)
    a82c:	00ffffc4 	movi	r3,-1
    a830:	20c0e026 	beq	r4,r3,abb4 <_malloc_r+0x72c>
    a834:	a739c83a 	sub	fp,r20,fp
    a838:	1705883a 	add	r2,r2,fp
    a83c:	b0800015 	stw	r2,0(r22)
    a840:	a08001cc 	andi	r2,r20,7
    a844:	1000a526 	beq	r2,zero,aadc <_malloc_r+0x654>
    a848:	a0a9c83a 	sub	r20,r20,r2
    a84c:	00c40204 	movi	r3,4104
    a850:	a5000204 	addi	r20,r20,8
    a854:	1885c83a 	sub	r2,r3,r2
    a858:	a5c7883a 	add	r3,r20,r23
    a85c:	18c3ffcc 	andi	r3,r3,4095
    a860:	10efc83a 	sub	r23,r2,r3
    a864:	9009883a 	mov	r4,r18
    a868:	b80b883a 	mov	r5,r23
    a86c:	000af4c0 	call	af4c <_sbrk_r>
    a870:	00ffffc4 	movi	r3,-1
    a874:	10c0cc26 	beq	r2,r3,aba8 <_malloc_r+0x720>
    a878:	1505c83a 	sub	r2,r2,r20
    a87c:	b887883a 	add	r3,r23,r2
    a880:	18c00054 	ori	r3,r3,1
    a884:	b0800017 	ldw	r2,0(r22)
    a888:	9d000215 	stw	r20,8(r19)
    a88c:	a0c00115 	stw	r3,4(r20)
    a890:	b885883a 	add	r2,r23,r2
    a894:	b0800015 	stw	r2,0(r22)
    a898:	84c00e26 	beq	r16,r19,a8d4 <_malloc_r+0x44c>
    a89c:	00c003c4 	movi	r3,15
    a8a0:	1d40902e 	bgeu	r3,r21,aae4 <_malloc_r+0x65c>
    a8a4:	ad7ffd04 	addi	r21,r21,-12
    a8a8:	013ffe04 	movi	r4,-8
    a8ac:	a908703a 	and	r4,r21,r4
    a8b0:	810b883a 	add	r5,r16,r4
    a8b4:	01800144 	movi	r6,5
    a8b8:	29800115 	stw	r6,4(r5)
    a8bc:	29800215 	stw	r6,8(r5)
    a8c0:	81400117 	ldw	r5,4(r16)
    a8c4:	2940004c 	andi	r5,r5,1
    a8c8:	214ab03a 	or	r5,r4,r5
    a8cc:	81400115 	stw	r5,4(r16)
    a8d0:	1900ae36 	bltu	r3,r4,ab8c <_malloc_r+0x704>
    a8d4:	d0ed9c17 	ldw	r3,-18832(gp)
    a8d8:	1880012e 	bgeu	r3,r2,a8e0 <_malloc_r+0x458>
    a8dc:	d0ad9c15 	stw	r2,-18832(gp)
    a8e0:	d0ed9b17 	ldw	r3,-18836(gp)
    a8e4:	9c000217 	ldw	r16,8(r19)
    a8e8:	1880012e 	bgeu	r3,r2,a8f0 <_malloc_r+0x468>
    a8ec:	d0ad9b15 	stw	r2,-18836(gp)
    a8f0:	80c00117 	ldw	r3,4(r16)
    a8f4:	00bfff04 	movi	r2,-4
    a8f8:	1886703a 	and	r3,r3,r2
    a8fc:	1c45c83a 	sub	r2,r3,r17
    a900:	1c400236 	bltu	r3,r17,a90c <_malloc_r+0x484>
    a904:	00c003c4 	movi	r3,15
    a908:	18800416 	blt	r3,r2,a91c <_malloc_r+0x494>
    a90c:	9009883a 	mov	r4,r18
    a910:	001377c0 	call	1377c <__malloc_unlock>
    a914:	0005883a 	mov	r2,zero
    a918:	003f0906 	br	a540 <_malloc_r+0xb8>
    a91c:	88c00054 	ori	r3,r17,1
    a920:	10800054 	ori	r2,r2,1
    a924:	80c00115 	stw	r3,4(r16)
    a928:	8463883a 	add	r17,r16,r17
    a92c:	88800115 	stw	r2,4(r17)
    a930:	9009883a 	mov	r4,r18
    a934:	9c400215 	stw	r17,8(r19)
    a938:	001377c0 	call	1377c <__malloc_unlock>
    a93c:	80800204 	addi	r2,r16,8
    a940:	003eff06 	br	a540 <_malloc_r+0xb8>
    a944:	00800504 	movi	r2,20
    a948:	1100492e 	bgeu	r2,r4,aa70 <_malloc_r+0x5e8>
    a94c:	00801504 	movi	r2,84
    a950:	11005c36 	bltu	r2,r4,aac4 <_malloc_r+0x63c>
    a954:	8808d33a 	srli	r4,r17,12
    a958:	21001b84 	addi	r4,r4,110
    a95c:	210b883a 	add	r5,r4,r4
    a960:	003f1006 	br	a5a4 <_malloc_r+0x11c>
    a964:	1006d27a 	srli	r3,r2,9
    a968:	01400104 	movi	r5,4
    a96c:	28c0432e 	bgeu	r5,r3,aa7c <_malloc_r+0x5f4>
    a970:	01400504 	movi	r5,20
    a974:	28c07036 	bltu	r5,r3,ab38 <_malloc_r+0x6b0>
    a978:	194016c4 	addi	r5,r3,91
    a97c:	294d883a 	add	r6,r5,r5
    a980:	318d883a 	add	r6,r6,r6
    a984:	318d883a 	add	r6,r6,r6
    a988:	998d883a 	add	r6,r19,r6
    a98c:	30c00217 	ldw	r3,8(r6)
    a990:	01c001f4 	movhi	r7,7
    a994:	39d97c04 	addi	r7,r7,26096
    a998:	19805726 	beq	r3,r6,aaf8 <_malloc_r+0x670>
    a99c:	01ffff04 	movi	r7,-4
    a9a0:	19400117 	ldw	r5,4(r3)
    a9a4:	29ca703a 	and	r5,r5,r7
    a9a8:	1140022e 	bgeu	r2,r5,a9b4 <_malloc_r+0x52c>
    a9ac:	18c00217 	ldw	r3,8(r3)
    a9b0:	30fffb1e 	bne	r6,r3,a9a0 <_malloc_r+0x518>
    a9b4:	19400317 	ldw	r5,12(r3)
    a9b8:	98800117 	ldw	r2,4(r19)
    a9bc:	81400315 	stw	r5,12(r16)
    a9c0:	80c00215 	stw	r3,8(r16)
    a9c4:	2c000215 	stw	r16,8(r5)
    a9c8:	1c000315 	stw	r16,12(r3)
    a9cc:	003f2b06 	br	a67c <_malloc_r+0x1f4>
    a9d0:	8445883a 	add	r2,r16,r17
    a9d4:	8c400054 	ori	r17,r17,1
    a9d8:	18800515 	stw	r2,20(r3)
    a9dc:	18800415 	stw	r2,16(r3)
    a9e0:	29000054 	ori	r4,r5,1
    a9e4:	1147883a 	add	r3,r2,r5
    a9e8:	84400115 	stw	r17,4(r16)
    a9ec:	11000115 	stw	r4,4(r2)
    a9f0:	12400315 	stw	r9,12(r2)
    a9f4:	12400215 	stw	r9,8(r2)
    a9f8:	19400015 	stw	r5,0(r3)
    a9fc:	9009883a 	mov	r4,r18
    aa00:	001377c0 	call	1377c <__malloc_unlock>
    aa04:	80800204 	addi	r2,r16,8
    aa08:	003ecd06 	br	a540 <_malloc_r+0xb8>
    aa0c:	18800117 	ldw	r2,4(r3)
    aa10:	003f1a06 	br	a67c <_malloc_r+0x1f4>
    aa14:	5ac00044 	addi	r11,r11,1
    aa18:	588000cc 	andi	r2,r11,3
    aa1c:	52800204 	addi	r10,r10,8
    aa20:	103f2e1e 	bne	r2,zero,a6dc <_malloc_r+0x254>
    aa24:	20c000cc 	andi	r3,r4,3
    aa28:	60bffe04 	addi	r2,r12,-8
    aa2c:	18006f26 	beq	r3,zero,abec <_malloc_r+0x764>
    aa30:	63000017 	ldw	r12,0(r12)
    aa34:	213fffc4 	addi	r4,r4,-1
    aa38:	60bffa26 	beq	r12,r2,aa24 <_malloc_r+0x59c>
    aa3c:	98800117 	ldw	r2,4(r19)
    aa40:	294b883a 	add	r5,r5,r5
    aa44:	117f5a36 	bltu	r2,r5,a7b0 <_malloc_r+0x328>
    aa48:	283f5926 	beq	r5,zero,a7b0 <_malloc_r+0x328>
    aa4c:	1146703a 	and	r3,r2,r5
    aa50:	18001626 	beq	r3,zero,aaac <_malloc_r+0x624>
    aa54:	5809883a 	mov	r4,r11
    aa58:	003f1a06 	br	a6c4 <_malloc_r+0x23c>
    aa5c:	80800204 	addi	r2,r16,8
    aa60:	84000517 	ldw	r16,20(r16)
    aa64:	143ea81e 	bne	r2,r16,a508 <_malloc_r+0x80>
    aa68:	21000084 	addi	r4,r4,2
    aa6c:	003ee306 	br	a5fc <_malloc_r+0x174>
    aa70:	210016c4 	addi	r4,r4,91
    aa74:	210b883a 	add	r5,r4,r4
    aa78:	003eca06 	br	a5a4 <_malloc_r+0x11c>
    aa7c:	100ad1ba 	srli	r5,r2,6
    aa80:	29400e04 	addi	r5,r5,56
    aa84:	294d883a 	add	r6,r5,r5
    aa88:	003fbd06 	br	a980 <_malloc_r+0x4f8>
    aa8c:	84ff6026 	beq	r16,r19,a810 <_malloc_r+0x388>
    aa90:	008001f4 	movhi	r2,7
    aa94:	10997c04 	addi	r2,r2,26096
    aa98:	14000217 	ldw	r16,8(r2)
    aa9c:	00bfff04 	movi	r2,-4
    aaa0:	80c00117 	ldw	r3,4(r16)
    aaa4:	1886703a 	and	r3,r3,r2
    aaa8:	003f9406 	br	a8fc <_malloc_r+0x474>
    aaac:	294b883a 	add	r5,r5,r5
    aab0:	1146703a 	and	r3,r2,r5
    aab4:	5ac00104 	addi	r11,r11,4
    aab8:	183ffc26 	beq	r3,zero,aaac <_malloc_r+0x624>
    aabc:	5809883a 	mov	r4,r11
    aac0:	003f0006 	br	a6c4 <_malloc_r+0x23c>
    aac4:	00805504 	movi	r2,340
    aac8:	11001336 	bltu	r2,r4,ab18 <_malloc_r+0x690>
    aacc:	8808d3fa 	srli	r4,r17,15
    aad0:	21001dc4 	addi	r4,r4,119
    aad4:	210b883a 	add	r5,r4,r4
    aad8:	003eb206 	br	a5a4 <_malloc_r+0x11c>
    aadc:	00840004 	movi	r2,4096
    aae0:	003f5d06 	br	a858 <_malloc_r+0x3d0>
    aae4:	00800044 	movi	r2,1
    aae8:	a0800115 	stw	r2,4(r20)
    aaec:	a021883a 	mov	r16,r20
    aaf0:	0007883a 	mov	r3,zero
    aaf4:	003f8106 	br	a8fc <_malloc_r+0x474>
    aaf8:	280bd0ba 	srai	r5,r5,2
    aafc:	01800044 	movi	r6,1
    ab00:	38800117 	ldw	r2,4(r7)
    ab04:	314c983a 	sll	r6,r6,r5
    ab08:	180b883a 	mov	r5,r3
    ab0c:	3084b03a 	or	r2,r6,r2
    ab10:	38800115 	stw	r2,4(r7)
    ab14:	003fa906 	br	a9bc <_malloc_r+0x534>
    ab18:	00815504 	movi	r2,1364
    ab1c:	11001836 	bltu	r2,r4,ab80 <_malloc_r+0x6f8>
    ab20:	8808d4ba 	srli	r4,r17,18
    ab24:	21001f04 	addi	r4,r4,124
    ab28:	210b883a 	add	r5,r4,r4
    ab2c:	003e9d06 	br	a5a4 <_malloc_r+0x11c>
    ab30:	bdc00404 	addi	r23,r23,16
    ab34:	003f2f06 	br	a7f4 <_malloc_r+0x36c>
    ab38:	01401504 	movi	r5,84
    ab3c:	28c01f36 	bltu	r5,r3,abbc <_malloc_r+0x734>
    ab40:	100ad33a 	srli	r5,r2,12
    ab44:	29401b84 	addi	r5,r5,110
    ab48:	294d883a 	add	r6,r5,r5
    ab4c:	003f8c06 	br	a980 <_malloc_r+0x4f8>
    ab50:	9c000217 	ldw	r16,8(r19)
    ab54:	00bfff04 	movi	r2,-4
    ab58:	80c00117 	ldw	r3,4(r16)
    ab5c:	1886703a 	and	r3,r3,r2
    ab60:	003f6606 	br	a8fc <_malloc_r+0x474>
    ab64:	e0c3ffcc 	andi	r3,fp,4095
    ab68:	183f2f1e 	bne	r3,zero,a828 <_malloc_r+0x3a0>
    ab6c:	98c00217 	ldw	r3,8(r19)
    ab70:	bd49883a 	add	r4,r23,r21
    ab74:	21000054 	ori	r4,r4,1
    ab78:	19000115 	stw	r4,4(r3)
    ab7c:	003f5506 	br	a8d4 <_malloc_r+0x44c>
    ab80:	01403f04 	movi	r5,252
    ab84:	01001f84 	movi	r4,126
    ab88:	003e8606 	br	a5a4 <_malloc_r+0x11c>
    ab8c:	9009883a 	mov	r4,r18
    ab90:	81400204 	addi	r5,r16,8
    ab94:	000f1600 	call	f160 <_free_r>
    ab98:	00800234 	movhi	r2,8
    ab9c:	10acab04 	addi	r2,r2,-19796
    aba0:	10800017 	ldw	r2,0(r2)
    aba4:	003f4b06 	br	a8d4 <_malloc_r+0x44c>
    aba8:	00c00044 	movi	r3,1
    abac:	002f883a 	mov	r23,zero
    abb0:	003f3406 	br	a884 <_malloc_r+0x3fc>
    abb4:	d5200515 	stw	r20,-32748(gp)
    abb8:	003f2106 	br	a840 <_malloc_r+0x3b8>
    abbc:	01405504 	movi	r5,340
    abc0:	28c00436 	bltu	r5,r3,abd4 <_malloc_r+0x74c>
    abc4:	100ad3fa 	srli	r5,r2,15
    abc8:	29401dc4 	addi	r5,r5,119
    abcc:	294d883a 	add	r6,r5,r5
    abd0:	003f6b06 	br	a980 <_malloc_r+0x4f8>
    abd4:	01415504 	movi	r5,1364
    abd8:	28c00936 	bltu	r5,r3,ac00 <_malloc_r+0x778>
    abdc:	100ad4ba 	srli	r5,r2,18
    abe0:	29401f04 	addi	r5,r5,124
    abe4:	294d883a 	add	r6,r5,r5
    abe8:	003f6506 	br	a980 <_malloc_r+0x4f8>
    abec:	98800117 	ldw	r2,4(r19)
    abf0:	0146303a 	nor	r3,zero,r5
    abf4:	1884703a 	and	r2,r3,r2
    abf8:	98800115 	stw	r2,4(r19)
    abfc:	003f9006 	br	aa40 <_malloc_r+0x5b8>
    ac00:	01803f04 	movi	r6,252
    ac04:	01401f84 	movi	r5,126
    ac08:	003f5d06 	br	a980 <_malloc_r+0x4f8>

0000ac0c <memcpy>:
    ac0c:	defffb04 	addi	sp,sp,-20
    ac10:	dc000015 	stw	r16,0(sp)
    ac14:	dfc00415 	stw	ra,16(sp)
    ac18:	dcc00315 	stw	r19,12(sp)
    ac1c:	dc800215 	stw	r18,8(sp)
    ac20:	dc400115 	stw	r17,4(sp)
    ac24:	00c003c4 	movi	r3,15
    ac28:	2021883a 	mov	r16,r4
    ac2c:	3005883a 	mov	r2,r6
    ac30:	1980032e 	bgeu	r3,r6,ac40 <memcpy+0x34>
    ac34:	2906b03a 	or	r3,r5,r4
    ac38:	18c000cc 	andi	r3,r3,3
    ac3c:	18001026 	beq	r3,zero,ac80 <memcpy+0x74>
    ac40:	8007883a 	mov	r3,r16
    ac44:	288f883a 	add	r7,r5,r2
    ac48:	10000526 	beq	r2,zero,ac60 <memcpy+0x54>
    ac4c:	29800003 	ldbu	r6,0(r5)
    ac50:	18c00044 	addi	r3,r3,1
    ac54:	29400044 	addi	r5,r5,1
    ac58:	19bfffc5 	stb	r6,-1(r3)
    ac5c:	29fffb1e 	bne	r5,r7,ac4c <memcpy+0x40>
    ac60:	8005883a 	mov	r2,r16
    ac64:	dfc00417 	ldw	ra,16(sp)
    ac68:	dcc00317 	ldw	r19,12(sp)
    ac6c:	dc800217 	ldw	r18,8(sp)
    ac70:	dc400117 	ldw	r17,4(sp)
    ac74:	dc000017 	ldw	r16,0(sp)
    ac78:	dec00504 	addi	sp,sp,20
    ac7c:	f800283a 	ret
    ac80:	32bffc04 	addi	r10,r6,-16
    ac84:	5014d13a 	srli	r10,r10,4
    ac88:	20800404 	addi	r2,r4,16
    ac8c:	2007883a 	mov	r3,r4
    ac90:	5008913a 	slli	r4,r10,4
    ac94:	280f883a 	mov	r7,r5
    ac98:	1105883a 	add	r2,r2,r4
    ac9c:	3a000017 	ldw	r8,0(r7)
    aca0:	18c00404 	addi	r3,r3,16
    aca4:	39c00404 	addi	r7,r7,16
    aca8:	1a3ffc15 	stw	r8,-16(r3)
    acac:	3a3ffd17 	ldw	r8,-12(r7)
    acb0:	1a3ffd15 	stw	r8,-12(r3)
    acb4:	3a3ffe17 	ldw	r8,-8(r7)
    acb8:	1a3ffe15 	stw	r8,-8(r3)
    acbc:	3a3fff17 	ldw	r8,-4(r7)
    acc0:	1a3fff15 	stw	r8,-4(r3)
    acc4:	18bff51e 	bne	r3,r2,ac9c <memcpy+0x90>
    acc8:	52800044 	addi	r10,r10,1
    accc:	5014913a 	slli	r10,r10,4
    acd0:	308003cc 	andi	r2,r6,15
    acd4:	010000c4 	movi	r4,3
    acd8:	8287883a 	add	r3,r16,r10
    acdc:	2a95883a 	add	r10,r5,r10
    ace0:	2080182e 	bgeu	r4,r2,ad44 <memcpy+0x138>
    ace4:	147fff04 	addi	r17,r2,-4
    ace8:	8808d0ba 	srli	r4,r17,2
    acec:	1a400104 	addi	r9,r3,4
    acf0:	180d883a 	mov	r6,r3
    acf4:	2105883a 	add	r2,r4,r4
    acf8:	1085883a 	add	r2,r2,r2
    acfc:	4893883a 	add	r9,r9,r2
    ad00:	500f883a 	mov	r7,r10
    ad04:	3a000017 	ldw	r8,0(r7)
    ad08:	31800104 	addi	r6,r6,4
    ad0c:	39c00104 	addi	r7,r7,4
    ad10:	323fff15 	stw	r8,-4(r6)
    ad14:	327ffb1e 	bne	r6,r9,ad04 <memcpy+0xf8>
    ad18:	20800044 	addi	r2,r4,1
    ad1c:	1085883a 	add	r2,r2,r2
    ad20:	1085883a 	add	r2,r2,r2
    ad24:	017fff04 	movi	r5,-4
    ad28:	18a5883a 	add	r18,r3,r2
    ad2c:	50a7883a 	add	r19,r10,r2
    ad30:	0009dec0 	call	9dec <__mulsi3>
    ad34:	1445883a 	add	r2,r2,r17
    ad38:	980b883a 	mov	r5,r19
    ad3c:	9007883a 	mov	r3,r18
    ad40:	003fc006 	br	ac44 <memcpy+0x38>
    ad44:	500b883a 	mov	r5,r10
    ad48:	003fbe06 	br	ac44 <memcpy+0x38>

0000ad4c <memset>:
    ad4c:	00c000c4 	movi	r3,3
    ad50:	2005883a 	mov	r2,r4
    ad54:	29403fcc 	andi	r5,r5,255
    ad58:	19802d2e 	bgeu	r3,r6,ae10 <memset+0xc4>
    ad5c:	20c6703a 	and	r3,r4,r3
    ad60:	18002e1e 	bne	r3,zero,ae1c <memset+0xd0>
    ad64:	2806923a 	slli	r3,r5,8
    ad68:	010003c4 	movi	r4,15
    ad6c:	3011883a 	mov	r8,r6
    ad70:	1946b03a 	or	r3,r3,r5
    ad74:	180e943a 	slli	r7,r3,16
    ad78:	38ceb03a 	or	r7,r7,r3
    ad7c:	1007883a 	mov	r3,r2
    ad80:	21800f2e 	bgeu	r4,r6,adc0 <memset+0x74>
    ad84:	19c00015 	stw	r7,0(r3)
    ad88:	19c00115 	stw	r7,4(r3)
    ad8c:	19c00215 	stw	r7,8(r3)
    ad90:	19c00315 	stw	r7,12(r3)
    ad94:	423ffc04 	addi	r8,r8,-16
    ad98:	18c00404 	addi	r3,r3,16
    ad9c:	223ff936 	bltu	r4,r8,ad84 <memset+0x38>
    ada0:	30fffc04 	addi	r3,r6,-16
    ada4:	1806d13a 	srli	r3,r3,4
    ada8:	318003cc 	andi	r6,r6,15
    adac:	010000c4 	movi	r4,3
    adb0:	18c00044 	addi	r3,r3,1
    adb4:	1806913a 	slli	r3,r3,4
    adb8:	10c7883a 	add	r3,r2,r3
    adbc:	21800e2e 	bgeu	r4,r6,adf8 <memset+0xac>
    adc0:	1813883a 	mov	r9,r3
    adc4:	3011883a 	mov	r8,r6
    adc8:	010000c4 	movi	r4,3
    adcc:	49c00015 	stw	r7,0(r9)
    add0:	423fff04 	addi	r8,r8,-4
    add4:	4a400104 	addi	r9,r9,4
    add8:	223ffc36 	bltu	r4,r8,adcc <memset+0x80>
    addc:	313fff04 	addi	r4,r6,-4
    ade0:	2008d0ba 	srli	r4,r4,2
    ade4:	318000cc 	andi	r6,r6,3
    ade8:	21000044 	addi	r4,r4,1
    adec:	2109883a 	add	r4,r4,r4
    adf0:	2109883a 	add	r4,r4,r4
    adf4:	1907883a 	add	r3,r3,r4
    adf8:	30000a26 	beq	r6,zero,ae24 <memset+0xd8>
    adfc:	198d883a 	add	r6,r3,r6
    ae00:	19400005 	stb	r5,0(r3)
    ae04:	18c00044 	addi	r3,r3,1
    ae08:	19bffd1e 	bne	r3,r6,ae00 <memset+0xb4>
    ae0c:	f800283a 	ret
    ae10:	2007883a 	mov	r3,r4
    ae14:	303ff91e 	bne	r6,zero,adfc <memset+0xb0>
    ae18:	00000206 	br	ae24 <memset+0xd8>
    ae1c:	2007883a 	mov	r3,r4
    ae20:	003ff606 	br	adfc <memset+0xb0>
    ae24:	f800283a 	ret

0000ae28 <_printf_r>:
    ae28:	defffd04 	addi	sp,sp,-12
    ae2c:	dfc00015 	stw	ra,0(sp)
    ae30:	d9800115 	stw	r6,4(sp)
    ae34:	d9c00215 	stw	r7,8(sp)
    ae38:	280d883a 	mov	r6,r5
    ae3c:	21400217 	ldw	r5,8(r4)
    ae40:	d9c00104 	addi	r7,sp,4
    ae44:	000b1c80 	call	b1c8 <___vfprintf_internal_r>
    ae48:	dfc00017 	ldw	ra,0(sp)
    ae4c:	dec00304 	addi	sp,sp,12
    ae50:	f800283a 	ret

0000ae54 <printf>:
    ae54:	defffc04 	addi	sp,sp,-16
    ae58:	dfc00015 	stw	ra,0(sp)
    ae5c:	d9400115 	stw	r5,4(sp)
    ae60:	d9800215 	stw	r6,8(sp)
    ae64:	d9c00315 	stw	r7,12(sp)
    ae68:	008001f4 	movhi	r2,7
    ae6c:	109f0704 	addi	r2,r2,31772
    ae70:	10800017 	ldw	r2,0(r2)
    ae74:	200b883a 	mov	r5,r4
    ae78:	d9800104 	addi	r6,sp,4
    ae7c:	11000217 	ldw	r4,8(r2)
    ae80:	000d0440 	call	d044 <__vfprintf_internal>
    ae84:	dfc00017 	ldw	ra,0(sp)
    ae88:	dec00404 	addi	sp,sp,16
    ae8c:	f800283a 	ret

0000ae90 <_putchar_r>:
    ae90:	21800217 	ldw	r6,8(r4)
    ae94:	0010fcc1 	jmpi	10fcc <_putc_r>

0000ae98 <putchar>:
    ae98:	008001f4 	movhi	r2,7
    ae9c:	109f0704 	addi	r2,r2,31772
    aea0:	10800017 	ldw	r2,0(r2)
    aea4:	200b883a 	mov	r5,r4
    aea8:	11800217 	ldw	r6,8(r2)
    aeac:	1009883a 	mov	r4,r2
    aeb0:	0010fcc1 	jmpi	10fcc <_putc_r>

0000aeb4 <_puts_r>:
    aeb4:	defff604 	addi	sp,sp,-40
    aeb8:	dc400815 	stw	r17,32(sp)
    aebc:	2023883a 	mov	r17,r4
    aec0:	2809883a 	mov	r4,r5
    aec4:	dc000715 	stw	r16,28(sp)
    aec8:	dfc00915 	stw	ra,36(sp)
    aecc:	2821883a 	mov	r16,r5
    aed0:	000b1080 	call	b108 <strlen>
    aed4:	10c00044 	addi	r3,r2,1
    aed8:	d8800115 	stw	r2,4(sp)
    aedc:	89400217 	ldw	r5,8(r17)
    aee0:	008001f4 	movhi	r2,7
    aee4:	10910b04 	addi	r2,r2,17452
    aee8:	d8800215 	stw	r2,8(sp)
    aeec:	00800044 	movi	r2,1
    aef0:	d8800315 	stw	r2,12(sp)
    aef4:	8809883a 	mov	r4,r17
    aef8:	00800084 	movi	r2,2
    aefc:	d9800404 	addi	r6,sp,16
    af00:	dc000015 	stw	r16,0(sp)
    af04:	d8c00615 	stw	r3,24(sp)
    af08:	dec00415 	stw	sp,16(sp)
    af0c:	d8800515 	stw	r2,20(sp)
    af10:	000f4300 	call	f430 <__sfvwrite_r>
    af14:	1000061e 	bne	r2,zero,af30 <_puts_r+0x7c>
    af18:	00800284 	movi	r2,10
    af1c:	dfc00917 	ldw	ra,36(sp)
    af20:	dc400817 	ldw	r17,32(sp)
    af24:	dc000717 	ldw	r16,28(sp)
    af28:	dec00a04 	addi	sp,sp,40
    af2c:	f800283a 	ret
    af30:	00bfffc4 	movi	r2,-1
    af34:	003ff906 	br	af1c <_puts_r+0x68>

0000af38 <puts>:
    af38:	008001f4 	movhi	r2,7
    af3c:	109f0704 	addi	r2,r2,31772
    af40:	200b883a 	mov	r5,r4
    af44:	11000017 	ldw	r4,0(r2)
    af48:	000aeb41 	jmpi	aeb4 <_puts_r>

0000af4c <_sbrk_r>:
    af4c:	defffd04 	addi	sp,sp,-12
    af50:	dc400115 	stw	r17,4(sp)
    af54:	dc000015 	stw	r16,0(sp)
    af58:	2023883a 	mov	r17,r4
    af5c:	04000234 	movhi	r16,8
    af60:	842ca104 	addi	r16,r16,-19836
    af64:	2809883a 	mov	r4,r5
    af68:	dfc00215 	stw	ra,8(sp)
    af6c:	80000015 	stw	zero,0(r16)
    af70:	00139600 	call	13960 <sbrk>
    af74:	00ffffc4 	movi	r3,-1
    af78:	10c00526 	beq	r2,r3,af90 <_sbrk_r+0x44>
    af7c:	dfc00217 	ldw	ra,8(sp)
    af80:	dc400117 	ldw	r17,4(sp)
    af84:	dc000017 	ldw	r16,0(sp)
    af88:	dec00304 	addi	sp,sp,12
    af8c:	f800283a 	ret
    af90:	80c00017 	ldw	r3,0(r16)
    af94:	183ff926 	beq	r3,zero,af7c <_sbrk_r+0x30>
    af98:	88c00015 	stw	r3,0(r17)
    af9c:	dfc00217 	ldw	ra,8(sp)
    afa0:	dc400117 	ldw	r17,4(sp)
    afa4:	dc000017 	ldw	r16,0(sp)
    afa8:	dec00304 	addi	sp,sp,12
    afac:	f800283a 	ret

0000afb0 <_sprintf_r>:
    afb0:	deffe704 	addi	sp,sp,-100
    afb4:	2807883a 	mov	r3,r5
    afb8:	dfc01715 	stw	ra,92(sp)
    afbc:	d9c01815 	stw	r7,96(sp)
    afc0:	00a00034 	movhi	r2,32768
    afc4:	10bfffc4 	addi	r2,r2,-1
    afc8:	02008204 	movi	r8,520
    afcc:	d8800215 	stw	r2,8(sp)
    afd0:	d8800515 	stw	r2,20(sp)
    afd4:	d80b883a 	mov	r5,sp
    afd8:	d9c01804 	addi	r7,sp,96
    afdc:	00bfffc4 	movi	r2,-1
    afe0:	d8c00015 	stw	r3,0(sp)
    afe4:	d8c00415 	stw	r3,16(sp)
    afe8:	da00030d 	sth	r8,12(sp)
    afec:	d880038d 	sth	r2,14(sp)
    aff0:	000b1c80 	call	b1c8 <___vfprintf_internal_r>
    aff4:	d8c00017 	ldw	r3,0(sp)
    aff8:	18000005 	stb	zero,0(r3)
    affc:	dfc01717 	ldw	ra,92(sp)
    b000:	dec01904 	addi	sp,sp,100
    b004:	f800283a 	ret

0000b008 <sprintf>:
    b008:	deffe604 	addi	sp,sp,-104
    b00c:	2007883a 	mov	r3,r4
    b010:	dfc01715 	stw	ra,92(sp)
    b014:	d9801815 	stw	r6,96(sp)
    b018:	d9c01915 	stw	r7,100(sp)
    b01c:	008001f4 	movhi	r2,7
    b020:	109f0704 	addi	r2,r2,31772
    b024:	11000017 	ldw	r4,0(r2)
    b028:	00a00034 	movhi	r2,32768
    b02c:	10bfffc4 	addi	r2,r2,-1
    b030:	280d883a 	mov	r6,r5
    b034:	02008204 	movi	r8,520
    b038:	d8800215 	stw	r2,8(sp)
    b03c:	d8800515 	stw	r2,20(sp)
    b040:	d80b883a 	mov	r5,sp
    b044:	d9c01804 	addi	r7,sp,96
    b048:	00bfffc4 	movi	r2,-1
    b04c:	d8c00015 	stw	r3,0(sp)
    b050:	d8c00415 	stw	r3,16(sp)
    b054:	da00030d 	sth	r8,12(sp)
    b058:	d880038d 	sth	r2,14(sp)
    b05c:	000b1c80 	call	b1c8 <___vfprintf_internal_r>
    b060:	d8c00017 	ldw	r3,0(sp)
    b064:	18000005 	stb	zero,0(r3)
    b068:	dfc01717 	ldw	ra,92(sp)
    b06c:	dec01a04 	addi	sp,sp,104
    b070:	f800283a 	ret

0000b074 <strcpy>:
    b074:	2906b03a 	or	r3,r5,r4
    b078:	18c000cc 	andi	r3,r3,3
    b07c:	2005883a 	mov	r2,r4
    b080:	18001a1e 	bne	r3,zero,b0ec <strcpy+0x78>
    b084:	29800017 	ldw	r6,0(r5)
    b088:	02bfbff4 	movhi	r10,65279
    b08c:	52bfbfc4 	addi	r10,r10,-257
    b090:	02602074 	movhi	r9,32897
    b094:	4a602004 	addi	r9,r9,-32640
    b098:	0188303a 	nor	r4,zero,r6
    b09c:	3287883a 	add	r3,r6,r10
    b0a0:	20c6703a 	and	r3,r4,r3
    b0a4:	1a46703a 	and	r3,r3,r9
    b0a8:	1800101e 	bne	r3,zero,b0ec <strcpy+0x78>
    b0ac:	1007883a 	mov	r3,r2
    b0b0:	19800015 	stw	r6,0(r3)
    b0b4:	29400104 	addi	r5,r5,4
    b0b8:	29800017 	ldw	r6,0(r5)
    b0bc:	18c00104 	addi	r3,r3,4
    b0c0:	0190303a 	nor	r8,zero,r6
    b0c4:	328f883a 	add	r7,r6,r10
    b0c8:	41ce703a 	and	r7,r8,r7
    b0cc:	3a4e703a 	and	r7,r7,r9
    b0d0:	383ff726 	beq	r7,zero,b0b0 <strcpy+0x3c>
    b0d4:	29800007 	ldb	r6,0(r5)
    b0d8:	18c00044 	addi	r3,r3,1
    b0dc:	29400044 	addi	r5,r5,1
    b0e0:	19bfffc5 	stb	r6,-1(r3)
    b0e4:	3000021e 	bne	r6,zero,b0f0 <strcpy+0x7c>
    b0e8:	f800283a 	ret
    b0ec:	1007883a 	mov	r3,r2
    b0f0:	29800007 	ldb	r6,0(r5)
    b0f4:	18c00044 	addi	r3,r3,1
    b0f8:	29400044 	addi	r5,r5,1
    b0fc:	19bfffc5 	stb	r6,-1(r3)
    b100:	303ffb1e 	bne	r6,zero,b0f0 <strcpy+0x7c>
    b104:	f800283a 	ret

0000b108 <strlen>:
    b108:	208000cc 	andi	r2,r4,3
    b10c:	10001f1e 	bne	r2,zero,b18c <strlen+0x84>
    b110:	20800017 	ldw	r2,0(r4)
    b114:	01ffbff4 	movhi	r7,65279
    b118:	39ffbfc4 	addi	r7,r7,-257
    b11c:	01a02074 	movhi	r6,32897
    b120:	31a02004 	addi	r6,r6,-32640
    b124:	11c7883a 	add	r3,r2,r7
    b128:	0084303a 	nor	r2,zero,r2
    b12c:	1886703a 	and	r3,r3,r2
    b130:	1986703a 	and	r3,r3,r6
    b134:	2005883a 	mov	r2,r4
    b138:	1800101e 	bne	r3,zero,b17c <strlen+0x74>
    b13c:	10800104 	addi	r2,r2,4
    b140:	10c00017 	ldw	r3,0(r2)
    b144:	19cb883a 	add	r5,r3,r7
    b148:	00c6303a 	nor	r3,zero,r3
    b14c:	28c6703a 	and	r3,r5,r3
    b150:	1986703a 	and	r3,r3,r6
    b154:	1800091e 	bne	r3,zero,b17c <strlen+0x74>
    b158:	10800104 	addi	r2,r2,4
    b15c:	10c00017 	ldw	r3,0(r2)
    b160:	19cb883a 	add	r5,r3,r7
    b164:	00c6303a 	nor	r3,zero,r3
    b168:	28c6703a 	and	r3,r5,r3
    b16c:	1986703a 	and	r3,r3,r6
    b170:	183ff226 	beq	r3,zero,b13c <strlen+0x34>
    b174:	00000106 	br	b17c <strlen+0x74>
    b178:	10800044 	addi	r2,r2,1
    b17c:	10c00007 	ldb	r3,0(r2)
    b180:	183ffd1e 	bne	r3,zero,b178 <strlen+0x70>
    b184:	1105c83a 	sub	r2,r2,r4
    b188:	f800283a 	ret
    b18c:	2005883a 	mov	r2,r4
    b190:	003ffa06 	br	b17c <strlen+0x74>

0000b194 <__sprint_r>:
    b194:	30800217 	ldw	r2,8(r6)
    b198:	defffe04 	addi	sp,sp,-8
    b19c:	dc000015 	stw	r16,0(sp)
    b1a0:	dfc00115 	stw	ra,4(sp)
    b1a4:	3021883a 	mov	r16,r6
    b1a8:	10000226 	beq	r2,zero,b1b4 <__sprint_r+0x20>
    b1ac:	000f4300 	call	f430 <__sfvwrite_r>
    b1b0:	80000215 	stw	zero,8(r16)
    b1b4:	80000115 	stw	zero,4(r16)
    b1b8:	dfc00117 	ldw	ra,4(sp)
    b1bc:	dc000017 	ldw	r16,0(sp)
    b1c0:	dec00204 	addi	sp,sp,8
    b1c4:	f800283a 	ret

0000b1c8 <___vfprintf_internal_r>:
    b1c8:	defeb904 	addi	sp,sp,-1308
    b1cc:	dc013d15 	stw	r16,1268(sp)
    b1d0:	d9013015 	stw	r4,1216(sp)
    b1d4:	dfc14615 	stw	ra,1304(sp)
    b1d8:	df014515 	stw	fp,1300(sp)
    b1dc:	ddc14415 	stw	r23,1296(sp)
    b1e0:	dd814315 	stw	r22,1292(sp)
    b1e4:	dd414215 	stw	r21,1288(sp)
    b1e8:	dd014115 	stw	r20,1284(sp)
    b1ec:	dcc14015 	stw	r19,1280(sp)
    b1f0:	dc813f15 	stw	r18,1276(sp)
    b1f4:	dc413e15 	stw	r17,1272(sp)
    b1f8:	d9412915 	stw	r5,1188(sp)
    b1fc:	3021883a 	mov	r16,r6
    b200:	d9c12d15 	stw	r7,1204(sp)
    b204:	000fb1c0 	call	fb1c <_localeconv_r>
    b208:	10800017 	ldw	r2,0(r2)
    b20c:	d9013017 	ldw	r4,1216(sp)
    b210:	d8013315 	stw	zero,1228(sp)
    b214:	d8813715 	stw	r2,1244(sp)
    b218:	d8013415 	stw	zero,1232(sp)
    b21c:	20000226 	beq	r4,zero,b228 <___vfprintf_internal_r+0x60>
    b220:	20800e17 	ldw	r2,56(r4)
    b224:	10014b26 	beq	r2,zero,b754 <___vfprintf_internal_r+0x58c>
    b228:	d8c12917 	ldw	r3,1188(sp)
    b22c:	1880030b 	ldhu	r2,12(r3)
    b230:	10c0020c 	andi	r3,r2,8
    b234:	18ffffcc 	andi	r3,r3,65535
    b238:	18e0001c 	xori	r3,r3,32768
    b23c:	18e00004 	addi	r3,r3,-32768
    b240:	1800ed26 	beq	r3,zero,b5f8 <___vfprintf_internal_r+0x430>
    b244:	d9012917 	ldw	r4,1188(sp)
    b248:	20c00417 	ldw	r3,16(r4)
    b24c:	1800ea26 	beq	r3,zero,b5f8 <___vfprintf_internal_r+0x430>
    b250:	1100068c 	andi	r4,r2,26
    b254:	00c00284 	movi	r3,10
    b258:	20c0f026 	beq	r4,r3,b61c <___vfprintf_internal_r+0x454>
    b25c:	d9010dc4 	addi	r4,sp,1079
    b260:	d8810e04 	addi	r2,sp,1080
    b264:	dc413017 	ldw	r17,1216(sp)
    b268:	d8c00404 	addi	r3,sp,16
    b26c:	d9012615 	stw	r4,1176(sp)
    b270:	1109c83a 	sub	r4,r2,r4
    b274:	d8812715 	stw	r2,1180(sp)
    b278:	d8c11b15 	stw	r3,1132(sp)
    b27c:	d8011d15 	stw	zero,1140(sp)
    b280:	d8011c15 	stw	zero,1136(sp)
    b284:	802b883a 	mov	r21,r16
    b288:	d8013215 	stw	zero,1224(sp)
    b28c:	d8013615 	stw	zero,1240(sp)
    b290:	d8013515 	stw	zero,1236(sp)
    b294:	d8012c15 	stw	zero,1200(sp)
    b298:	1813883a 	mov	r9,r3
    b29c:	d9013915 	stw	r4,1252(sp)
    b2a0:	a8800007 	ldb	r2,0(r21)
    b2a4:	1002f326 	beq	r2,zero,be74 <___vfprintf_internal_r+0xcac>
    b2a8:	00c00944 	movi	r3,37
    b2ac:	a825883a 	mov	r18,r21
    b2b0:	10c0021e 	bne	r2,r3,b2bc <___vfprintf_internal_r+0xf4>
    b2b4:	00001406 	br	b308 <___vfprintf_internal_r+0x140>
    b2b8:	10c00326 	beq	r2,r3,b2c8 <___vfprintf_internal_r+0x100>
    b2bc:	94800044 	addi	r18,r18,1
    b2c0:	90800007 	ldb	r2,0(r18)
    b2c4:	103ffc1e 	bne	r2,zero,b2b8 <___vfprintf_internal_r+0xf0>
    b2c8:	9561c83a 	sub	r16,r18,r21
    b2cc:	80000e26 	beq	r16,zero,b308 <___vfprintf_internal_r+0x140>
    b2d0:	da011d17 	ldw	r8,1140(sp)
    b2d4:	d8c11c17 	ldw	r3,1136(sp)
    b2d8:	4d400015 	stw	r21,0(r9)
    b2dc:	4c000115 	stw	r16,4(r9)
    b2e0:	4411883a 	add	r8,r8,r16
    b2e4:	18c00044 	addi	r3,r3,1
    b2e8:	da011d15 	stw	r8,1140(sp)
    b2ec:	d8c11c15 	stw	r3,1136(sp)
    b2f0:	008001c4 	movi	r2,7
    b2f4:	10c11016 	blt	r2,r3,b738 <___vfprintf_internal_r+0x570>
    b2f8:	4a400204 	addi	r9,r9,8
    b2fc:	d8812c17 	ldw	r2,1200(sp)
    b300:	1405883a 	add	r2,r2,r16
    b304:	d8812c15 	stw	r2,1200(sp)
    b308:	90800007 	ldb	r2,0(r18)
    b30c:	1000ee26 	beq	r2,zero,b6c8 <___vfprintf_internal_r+0x500>
    b310:	95400044 	addi	r21,r18,1
    b314:	94800047 	ldb	r18,1(r18)
    b318:	073fffc4 	movi	fp,-1
    b31c:	e007883a 	mov	r3,fp
    b320:	d8012585 	stb	zero,1174(sp)
    b324:	d8012e15 	stw	zero,1208(sp)
    b328:	0021883a 	mov	r16,zero
    b32c:	05001604 	movi	r20,88
    b330:	04c00244 	movi	r19,9
    b334:	4839883a 	mov	fp,r9
    b338:	ad400044 	addi	r21,r21,1
    b33c:	90bff804 	addi	r2,r18,-32
    b340:	a080462e 	bgeu	r20,r2,b45c <___vfprintf_internal_r+0x294>
    b344:	e013883a 	mov	r9,fp
    b348:	9000df26 	beq	r18,zero,b6c8 <___vfprintf_internal_r+0x500>
    b34c:	00c00044 	movi	r3,1
    b350:	d8c12815 	stw	r3,1184(sp)
    b354:	dc810405 	stb	r18,1040(sp)
    b358:	d8012585 	stb	zero,1174(sp)
    b35c:	d8c12b15 	stw	r3,1196(sp)
    b360:	dcc10404 	addi	r19,sp,1040
    b364:	d8013115 	stw	zero,1220(sp)
    b368:	80c0008c 	andi	r3,r16,2
    b36c:	d8c12a15 	stw	r3,1192(sp)
    b370:	18000326 	beq	r3,zero,b380 <___vfprintf_internal_r+0x1b8>
    b374:	d8c12817 	ldw	r3,1184(sp)
    b378:	18c00084 	addi	r3,r3,2
    b37c:	d8c12815 	stw	r3,1184(sp)
    b380:	80c0210c 	andi	r3,r16,132
    b384:	d8c12f15 	stw	r3,1212(sp)
    b388:	1802251e 	bne	r3,zero,bc20 <___vfprintf_internal_r+0xa58>
    b38c:	d9012e17 	ldw	r4,1208(sp)
    b390:	d8c12817 	ldw	r3,1184(sp)
    b394:	20edc83a 	sub	r22,r4,r3
    b398:	0582210e 	bge	zero,r22,bc20 <___vfprintf_internal_r+0xa58>
    b39c:	02800404 	movi	r10,16
    b3a0:	da011d17 	ldw	r8,1140(sp)
    b3a4:	d8c11c17 	ldw	r3,1136(sp)
    b3a8:	05c001f4 	movhi	r23,7
    b3ac:	bdd11c84 	addi	r23,r23,17522
    b3b0:	5580200e 	bge	r10,r22,b434 <___vfprintf_internal_r+0x26c>
    b3b4:	dc813815 	stw	r18,1248(sp)
    b3b8:	5039883a 	mov	fp,r10
    b3bc:	b825883a 	mov	r18,r23
    b3c0:	050001c4 	movi	r20,7
    b3c4:	b02f883a 	mov	r23,r22
    b3c8:	802d883a 	mov	r22,r16
    b3cc:	dc012917 	ldw	r16,1188(sp)
    b3d0:	00000306 	br	b3e0 <___vfprintf_internal_r+0x218>
    b3d4:	bdfffc04 	addi	r23,r23,-16
    b3d8:	4a400204 	addi	r9,r9,8
    b3dc:	e5c0110e 	bge	fp,r23,b424 <___vfprintf_internal_r+0x25c>
    b3e0:	4c800015 	stw	r18,0(r9)
    b3e4:	4f000115 	stw	fp,4(r9)
    b3e8:	42000404 	addi	r8,r8,16
    b3ec:	18c00044 	addi	r3,r3,1
    b3f0:	da011d15 	stw	r8,1140(sp)
    b3f4:	d8c11c15 	stw	r3,1136(sp)
    b3f8:	a0fff60e 	bge	r20,r3,b3d4 <___vfprintf_internal_r+0x20c>
    b3fc:	8809883a 	mov	r4,r17
    b400:	800b883a 	mov	r5,r16
    b404:	d9811b04 	addi	r6,sp,1132
    b408:	000b1940 	call	b194 <__sprint_r>
    b40c:	1000b41e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    b410:	bdfffc04 	addi	r23,r23,-16
    b414:	da011d17 	ldw	r8,1140(sp)
    b418:	d8c11c17 	ldw	r3,1136(sp)
    b41c:	da400404 	addi	r9,sp,16
    b420:	e5ffef16 	blt	fp,r23,b3e0 <___vfprintf_internal_r+0x218>
    b424:	b021883a 	mov	r16,r22
    b428:	b82d883a 	mov	r22,r23
    b42c:	902f883a 	mov	r23,r18
    b430:	dc813817 	ldw	r18,1248(sp)
    b434:	4dc00015 	stw	r23,0(r9)
    b438:	4d800115 	stw	r22,4(r9)
    b43c:	4591883a 	add	r8,r8,r22
    b440:	18c00044 	addi	r3,r3,1
    b444:	da011d15 	stw	r8,1140(sp)
    b448:	d8c11c15 	stw	r3,1136(sp)
    b44c:	008001c4 	movi	r2,7
    b450:	10c3fe16 	blt	r2,r3,c44c <___vfprintf_internal_r+0x1284>
    b454:	4a400204 	addi	r9,r9,8
    b458:	0001f306 	br	bc28 <___vfprintf_internal_r+0xa60>
    b45c:	1085883a 	add	r2,r2,r2
    b460:	1085883a 	add	r2,r2,r2
    b464:	01000074 	movhi	r4,1
    b468:	212d1e04 	addi	r4,r4,-19336
    b46c:	1105883a 	add	r2,r2,r4
    b470:	10800017 	ldw	r2,0(r2)
    b474:	1000683a 	jmp	r2
    b478:	0000bb54 	movui	zero,749
    b47c:	0000b344 	movi	zero,717
    b480:	0000b344 	movi	zero,717
    b484:	0000bb6c 	andhi	zero,zero,749
    b488:	0000b344 	movi	zero,717
    b48c:	0000b344 	movi	zero,717
    b490:	0000b344 	movi	zero,717
    b494:	0000b344 	movi	zero,717
    b498:	0000b344 	movi	zero,717
    b49c:	0000b344 	movi	zero,717
    b4a0:	0000ba24 	muli	zero,zero,744
    b4a4:	0000bbb8 	rdprs	zero,zero,750
    b4a8:	0000b344 	movi	zero,717
    b4ac:	0000b5ec 	andhi	zero,zero,727
    b4b0:	0000b98c 	andi	zero,zero,742
    b4b4:	0000b344 	movi	zero,717
    b4b8:	0000bb78 	rdprs	zero,zero,749
    b4bc:	0000bb84 	movi	zero,750
    b4c0:	0000bb84 	movi	zero,750
    b4c4:	0000bb84 	movi	zero,750
    b4c8:	0000bb84 	movi	zero,750
    b4cc:	0000bb84 	movi	zero,750
    b4d0:	0000bb84 	movi	zero,750
    b4d4:	0000bb84 	movi	zero,750
    b4d8:	0000bb84 	movi	zero,750
    b4dc:	0000bb84 	movi	zero,750
    b4e0:	0000b344 	movi	zero,717
    b4e4:	0000b344 	movi	zero,717
    b4e8:	0000b344 	movi	zero,717
    b4ec:	0000b344 	movi	zero,717
    b4f0:	0000b344 	movi	zero,717
    b4f4:	0000b344 	movi	zero,717
    b4f8:	0000b344 	movi	zero,717
    b4fc:	0000b344 	movi	zero,717
    b500:	0000b344 	movi	zero,717
    b504:	0000b344 	movi	zero,717
    b508:	0000b75c 	xori	zero,zero,733
    b50c:	0000b81c 	xori	zero,zero,736
    b510:	0000b344 	movi	zero,717
    b514:	0000b81c 	xori	zero,zero,736
    b518:	0000b344 	movi	zero,717
    b51c:	0000b344 	movi	zero,717
    b520:	0000b344 	movi	zero,717
    b524:	0000b344 	movi	zero,717
    b528:	0000b8b0 	cmpltui	zero,zero,738
    b52c:	0000b344 	movi	zero,717
    b530:	0000b344 	movi	zero,717
    b534:	0000b8bc 	xorhi	zero,zero,738
    b538:	0000b344 	movi	zero,717
    b53c:	0000b344 	movi	zero,717
    b540:	0000b344 	movi	zero,717
    b544:	0000b344 	movi	zero,717
    b548:	0000b344 	movi	zero,717
    b54c:	0000b8f4 	movhi	zero,739
    b550:	0000b344 	movi	zero,717
    b554:	0000b344 	movi	zero,717
    b558:	0000b930 	cmpltui	zero,zero,740
    b55c:	0000b344 	movi	zero,717
    b560:	0000b344 	movi	zero,717
    b564:	0000b344 	movi	zero,717
    b568:	0000b344 	movi	zero,717
    b56c:	0000b344 	movi	zero,717
    b570:	0000b344 	movi	zero,717
    b574:	0000b344 	movi	zero,717
    b578:	0000b344 	movi	zero,717
    b57c:	0000b344 	movi	zero,717
    b580:	0000b344 	movi	zero,717
    b584:	0000bbc8 	cmpgei	zero,zero,751
    b588:	0000bbfc 	xorhi	zero,zero,751
    b58c:	0000b81c 	xori	zero,zero,736
    b590:	0000b81c 	xori	zero,zero,736
    b594:	0000b81c 	xori	zero,zero,736
    b598:	0000bb48 	cmpgei	zero,zero,749
    b59c:	0000bbfc 	xorhi	zero,zero,751
    b5a0:	0000b344 	movi	zero,717
    b5a4:	0000b344 	movi	zero,717
    b5a8:	0000b9d4 	movui	zero,743
    b5ac:	0000b344 	movi	zero,717
    b5b0:	0000b9ec 	andhi	zero,zero,743
    b5b4:	0000bc08 	cmpgei	zero,zero,752
    b5b8:	0000ba4c 	andi	zero,zero,745
    b5bc:	0000ba9c 	xori	zero,zero,746
    b5c0:	0000b344 	movi	zero,717
    b5c4:	0000baa8 	cmpgeui	zero,zero,746
    b5c8:	0000b344 	movi	zero,717
    b5cc:	0000bc14 	movui	zero,752
    b5d0:	0000b344 	movi	zero,717
    b5d4:	0000b344 	movi	zero,717
    b5d8:	0000bb0c 	andi	zero,zero,748
    b5dc:	d9012e17 	ldw	r4,1208(sp)
    b5e0:	d8812d15 	stw	r2,1204(sp)
    b5e4:	0109c83a 	sub	r4,zero,r4
    b5e8:	d9012e15 	stw	r4,1208(sp)
    b5ec:	84000114 	ori	r16,r16,4
    b5f0:	ac800007 	ldb	r18,0(r21)
    b5f4:	003f5006 	br	b338 <___vfprintf_internal_r+0x170>
    b5f8:	d9013017 	ldw	r4,1216(sp)
    b5fc:	d9412917 	ldw	r5,1188(sp)
    b600:	000d1540 	call	d154 <__swsetup_r>
    b604:	10003d1e 	bne	r2,zero,b6fc <___vfprintf_internal_r+0x534>
    b608:	d8c12917 	ldw	r3,1188(sp)
    b60c:	1880030b 	ldhu	r2,12(r3)
    b610:	00c00284 	movi	r3,10
    b614:	1100068c 	andi	r4,r2,26
    b618:	20ff101e 	bne	r4,r3,b25c <___vfprintf_internal_r+0x94>
    b61c:	d9012917 	ldw	r4,1188(sp)
    b620:	20c0038b 	ldhu	r3,14(r4)
    b624:	193fffcc 	andi	r4,r3,65535
    b628:	2120001c 	xori	r4,r4,32768
    b62c:	21200004 	addi	r4,r4,-32768
    b630:	203f0a16 	blt	r4,zero,b25c <___vfprintf_internal_r+0x94>
    b634:	d9012917 	ldw	r4,1188(sp)
    b638:	d9c12d17 	ldw	r7,1204(sp)
    b63c:	10bfff4c 	andi	r2,r2,65533
    b640:	22800717 	ldw	r10,28(r4)
    b644:	22400917 	ldw	r9,36(r4)
    b648:	d9013017 	ldw	r4,1216(sp)
    b64c:	02010004 	movi	r8,1024
    b650:	d881070d 	sth	r2,1052(sp)
    b654:	d9410404 	addi	r5,sp,1040
    b658:	d8800404 	addi	r2,sp,16
    b65c:	800d883a 	mov	r6,r16
    b660:	d8c1078d 	sth	r3,1054(sp)
    b664:	da810b15 	stw	r10,1068(sp)
    b668:	da410d15 	stw	r9,1076(sp)
    b66c:	d8810415 	stw	r2,1040(sp)
    b670:	d8810815 	stw	r2,1056(sp)
    b674:	da010615 	stw	r8,1048(sp)
    b678:	da010915 	stw	r8,1060(sp)
    b67c:	d8010a15 	stw	zero,1064(sp)
    b680:	000b1c80 	call	b1c8 <___vfprintf_internal_r>
    b684:	d8812c15 	stw	r2,1200(sp)
    b688:	10000416 	blt	r2,zero,b69c <___vfprintf_internal_r+0x4d4>
    b68c:	d9013017 	ldw	r4,1216(sp)
    b690:	d9410404 	addi	r5,sp,1040
    b694:	000eb200 	call	eb20 <_fflush_r>
    b698:	1006501e 	bne	r2,zero,cfdc <___vfprintf_internal_r+0x1e14>
    b69c:	d881070b 	ldhu	r2,1052(sp)
    b6a0:	1080100c 	andi	r2,r2,64
    b6a4:	10bfffcc 	andi	r2,r2,65535
    b6a8:	10a0001c 	xori	r2,r2,32768
    b6ac:	10a00004 	addi	r2,r2,-32768
    b6b0:	10001426 	beq	r2,zero,b704 <___vfprintf_internal_r+0x53c>
    b6b4:	d8c12917 	ldw	r3,1188(sp)
    b6b8:	1880030b 	ldhu	r2,12(r3)
    b6bc:	10801014 	ori	r2,r2,64
    b6c0:	1880030d 	sth	r2,12(r3)
    b6c4:	00000f06 	br	b704 <___vfprintf_internal_r+0x53c>
    b6c8:	d8811d17 	ldw	r2,1140(sp)
    b6cc:	10000426 	beq	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    b6d0:	d9013017 	ldw	r4,1216(sp)
    b6d4:	d9412917 	ldw	r5,1188(sp)
    b6d8:	d9811b04 	addi	r6,sp,1132
    b6dc:	000b1940 	call	b194 <__sprint_r>
    b6e0:	d8c12917 	ldw	r3,1188(sp)
    b6e4:	1880030b 	ldhu	r2,12(r3)
    b6e8:	1080100c 	andi	r2,r2,64
    b6ec:	10bfffcc 	andi	r2,r2,65535
    b6f0:	10a0001c 	xori	r2,r2,32768
    b6f4:	10a00004 	addi	r2,r2,-32768
    b6f8:	10000226 	beq	r2,zero,b704 <___vfprintf_internal_r+0x53c>
    b6fc:	00bfffc4 	movi	r2,-1
    b700:	d8812c15 	stw	r2,1200(sp)
    b704:	d8812c17 	ldw	r2,1200(sp)
    b708:	dfc14617 	ldw	ra,1304(sp)
    b70c:	df014517 	ldw	fp,1300(sp)
    b710:	ddc14417 	ldw	r23,1296(sp)
    b714:	dd814317 	ldw	r22,1292(sp)
    b718:	dd414217 	ldw	r21,1288(sp)
    b71c:	dd014117 	ldw	r20,1284(sp)
    b720:	dcc14017 	ldw	r19,1280(sp)
    b724:	dc813f17 	ldw	r18,1276(sp)
    b728:	dc413e17 	ldw	r17,1272(sp)
    b72c:	dc013d17 	ldw	r16,1268(sp)
    b730:	dec14704 	addi	sp,sp,1308
    b734:	f800283a 	ret
    b738:	d9412917 	ldw	r5,1188(sp)
    b73c:	8809883a 	mov	r4,r17
    b740:	d9811b04 	addi	r6,sp,1132
    b744:	000b1940 	call	b194 <__sprint_r>
    b748:	103fe51e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    b74c:	da400404 	addi	r9,sp,16
    b750:	003eea06 	br	b2fc <___vfprintf_internal_r+0x134>
    b754:	000eddc0 	call	eddc <__sinit>
    b758:	003eb306 	br	b228 <___vfprintf_internal_r+0x60>
    b75c:	e013883a 	mov	r9,fp
    b760:	84000414 	ori	r16,r16,16
    b764:	1839883a 	mov	fp,r3
    b768:	8080080c 	andi	r2,r16,32
    b76c:	10034426 	beq	r2,zero,c480 <___vfprintf_internal_r+0x12b8>
    b770:	d8c12d17 	ldw	r3,1204(sp)
    b774:	18800117 	ldw	r2,4(r3)
    b778:	1dc00017 	ldw	r23,0(r3)
    b77c:	18c00204 	addi	r3,r3,8
    b780:	d8c12d15 	stw	r3,1204(sp)
    b784:	102d883a 	mov	r22,r2
    b788:	1003020e 	bge	r2,zero,c394 <___vfprintf_internal_r+0x11cc>
    b78c:	05efc83a 	sub	r23,zero,r23
    b790:	b804c03a 	cmpne	r2,r23,zero
    b794:	05adc83a 	sub	r22,zero,r22
    b798:	b0adc83a 	sub	r22,r22,r2
    b79c:	00800b44 	movi	r2,45
    b7a0:	d8812585 	stb	r2,1174(sp)
    b7a4:	00c00044 	movi	r3,1
    b7a8:	bd84b03a 	or	r2,r23,r22
    b7ac:	e0000216 	blt	fp,zero,b7b8 <___vfprintf_internal_r+0x5f0>
    b7b0:	013fdfc4 	movi	r4,-129
    b7b4:	8120703a 	and	r16,r16,r4
    b7b8:	1001cc1e 	bne	r2,zero,beec <___vfprintf_internal_r+0xd24>
    b7bc:	e001cb1e 	bne	fp,zero,beec <___vfprintf_internal_r+0xd24>
    b7c0:	18c03fcc 	andi	r3,r3,255
    b7c4:	1802ca1e 	bne	r3,zero,c2f0 <___vfprintf_internal_r+0x1128>
    b7c8:	8080004c 	andi	r2,r16,1
    b7cc:	1002c826 	beq	r2,zero,c2f0 <___vfprintf_internal_r+0x1128>
    b7d0:	d8c13917 	ldw	r3,1252(sp)
    b7d4:	00800c04 	movi	r2,48
    b7d8:	d8810dc5 	stb	r2,1079(sp)
    b7dc:	d8c12b15 	stw	r3,1196(sp)
    b7e0:	dcc10dc4 	addi	r19,sp,1079
    b7e4:	d8812b17 	ldw	r2,1196(sp)
    b7e8:	d8812815 	stw	r2,1184(sp)
    b7ec:	1700010e 	bge	r2,fp,b7f4 <___vfprintf_internal_r+0x62c>
    b7f0:	df012815 	stw	fp,1184(sp)
    b7f4:	d8812583 	ldbu	r2,1174(sp)
    b7f8:	df013115 	stw	fp,1220(sp)
    b7fc:	10803fcc 	andi	r2,r2,255
    b800:	1080201c 	xori	r2,r2,128
    b804:	10bfe004 	addi	r2,r2,-128
    b808:	103ed726 	beq	r2,zero,b368 <___vfprintf_internal_r+0x1a0>
    b80c:	d8c12817 	ldw	r3,1184(sp)
    b810:	18c00044 	addi	r3,r3,1
    b814:	d8c12815 	stw	r3,1184(sp)
    b818:	003ed306 	br	b368 <___vfprintf_internal_r+0x1a0>
    b81c:	8080020c 	andi	r2,r16,8
    b820:	e013883a 	mov	r9,fp
    b824:	1839883a 	mov	fp,r3
    b828:	1003a626 	beq	r2,zero,c6c4 <___vfprintf_internal_r+0x14fc>
    b82c:	d9012d17 	ldw	r4,1204(sp)
    b830:	25800017 	ldw	r22,0(r4)
    b834:	25000117 	ldw	r20,4(r4)
    b838:	21000204 	addi	r4,r4,8
    b83c:	d9012d15 	stw	r4,1204(sp)
    b840:	dd813315 	stw	r22,1228(sp)
    b844:	dd013415 	stw	r20,1232(sp)
    b848:	b009883a 	mov	r4,r22
    b84c:	a00b883a 	mov	r5,r20
    b850:	da413c15 	stw	r9,1264(sp)
    b854:	00117740 	call	11774 <__isinfd>
    b858:	da413c17 	ldw	r9,1264(sp)
    b85c:	b009883a 	mov	r4,r22
    b860:	a00b883a 	mov	r5,r20
    b864:	10041d26 	beq	r2,zero,c8dc <___vfprintf_internal_r+0x1714>
    b868:	000d883a 	mov	r6,zero
    b86c:	000f883a 	mov	r7,zero
    b870:	0009ab80 	call	9ab8 <__ltdf2>
    b874:	da413c17 	ldw	r9,1264(sp)
    b878:	1004da16 	blt	r2,zero,cbe4 <___vfprintf_internal_r+0x1a1c>
    b87c:	d8812583 	ldbu	r2,1174(sp)
    b880:	00c011c4 	movi	r3,71
    b884:	1c83d116 	blt	r3,r18,c7cc <___vfprintf_internal_r+0x1604>
    b888:	04c001f4 	movhi	r19,7
    b88c:	9cd10c04 	addi	r19,r19,17456
    b890:	00c000c4 	movi	r3,3
    b894:	d8c12815 	stw	r3,1184(sp)
    b898:	00ffdfc4 	movi	r3,-129
    b89c:	80e0703a 	and	r16,r16,r3
    b8a0:	d8c12817 	ldw	r3,1184(sp)
    b8a4:	d8013115 	stw	zero,1220(sp)
    b8a8:	d8c12b15 	stw	r3,1196(sp)
    b8ac:	003fd306 	br	b7fc <___vfprintf_internal_r+0x634>
    b8b0:	84000214 	ori	r16,r16,8
    b8b4:	ac800007 	ldb	r18,0(r21)
    b8b8:	003e9f06 	br	b338 <___vfprintf_internal_r+0x170>
    b8bc:	e013883a 	mov	r9,fp
    b8c0:	84000414 	ori	r16,r16,16
    b8c4:	1839883a 	mov	fp,r3
    b8c8:	8080080c 	andi	r2,r16,32
    b8cc:	10031d26 	beq	r2,zero,c544 <___vfprintf_internal_r+0x137c>
    b8d0:	d8812d17 	ldw	r2,1204(sp)
    b8d4:	0007883a 	mov	r3,zero
    b8d8:	15c00017 	ldw	r23,0(r2)
    b8dc:	15800117 	ldw	r22,4(r2)
    b8e0:	10800204 	addi	r2,r2,8
    b8e4:	d8812d15 	stw	r2,1204(sp)
    b8e8:	d8012585 	stb	zero,1174(sp)
    b8ec:	bd84b03a 	or	r2,r23,r22
    b8f0:	003fae06 	br	b7ac <___vfprintf_internal_r+0x5e4>
    b8f4:	e013883a 	mov	r9,fp
    b8f8:	84000414 	ori	r16,r16,16
    b8fc:	1839883a 	mov	fp,r3
    b900:	8080080c 	andi	r2,r16,32
    b904:	1002e726 	beq	r2,zero,c4a4 <___vfprintf_internal_r+0x12dc>
    b908:	d8c12d17 	ldw	r3,1204(sp)
    b90c:	d9012d17 	ldw	r4,1204(sp)
    b910:	1dc00017 	ldw	r23,0(r3)
    b914:	1d800117 	ldw	r22,4(r3)
    b918:	21000204 	addi	r4,r4,8
    b91c:	00c00044 	movi	r3,1
    b920:	d9012d15 	stw	r4,1204(sp)
    b924:	bd84b03a 	or	r2,r23,r22
    b928:	d8012585 	stb	zero,1174(sp)
    b92c:	003f9f06 	br	b7ac <___vfprintf_internal_r+0x5e4>
    b930:	e013883a 	mov	r9,fp
    b934:	1839883a 	mov	fp,r3
    b938:	00c001f4 	movhi	r3,7
    b93c:	18d11004 	addi	r3,r3,17472
    b940:	d8c13615 	stw	r3,1240(sp)
    b944:	8080080c 	andi	r2,r16,32
    b948:	10007726 	beq	r2,zero,bb28 <___vfprintf_internal_r+0x960>
    b94c:	d9012d17 	ldw	r4,1204(sp)
    b950:	25c00017 	ldw	r23,0(r4)
    b954:	25800117 	ldw	r22,4(r4)
    b958:	21000204 	addi	r4,r4,8
    b95c:	d9012d15 	stw	r4,1204(sp)
    b960:	8080004c 	andi	r2,r16,1
    b964:	1002c226 	beq	r2,zero,c470 <___vfprintf_internal_r+0x12a8>
    b968:	bd84b03a 	or	r2,r23,r22
    b96c:	10035d26 	beq	r2,zero,c6e4 <___vfprintf_internal_r+0x151c>
    b970:	00c00c04 	movi	r3,48
    b974:	d8c12505 	stb	r3,1172(sp)
    b978:	dc812545 	stb	r18,1173(sp)
    b97c:	84000094 	ori	r16,r16,2
    b980:	00c00084 	movi	r3,2
    b984:	d8012585 	stb	zero,1174(sp)
    b988:	003f8806 	br	b7ac <___vfprintf_internal_r+0x5e4>
    b98c:	ac800007 	ldb	r18,0(r21)
    b990:	00c00a84 	movi	r3,42
    b994:	adc00044 	addi	r23,r21,1
    b998:	90c57526 	beq	r18,r3,cf70 <___vfprintf_internal_r+0x1da8>
    b99c:	95bff404 	addi	r22,r18,-48
    b9a0:	0009883a 	mov	r4,zero
    b9a4:	9d84ff36 	bltu	r19,r22,cda4 <___vfprintf_internal_r+0x1bdc>
    b9a8:	01400284 	movi	r5,10
    b9ac:	0009dec0 	call	9dec <__mulsi3>
    b9b0:	bc800007 	ldb	r18,0(r23)
    b9b4:	b089883a 	add	r4,r22,r2
    b9b8:	bdc00044 	addi	r23,r23,1
    b9bc:	95bff404 	addi	r22,r18,-48
    b9c0:	9dbff92e 	bgeu	r19,r22,b9a8 <___vfprintf_internal_r+0x7e0>
    b9c4:	2007883a 	mov	r3,r4
    b9c8:	20044316 	blt	r4,zero,cad8 <___vfprintf_internal_r+0x1910>
    b9cc:	b82b883a 	mov	r21,r23
    b9d0:	003e5a06 	br	b33c <___vfprintf_internal_r+0x174>
    b9d4:	ac800007 	ldb	r18,0(r21)
    b9d8:	01001b04 	movi	r4,108
    b9dc:	a805883a 	mov	r2,r21
    b9e0:	91045526 	beq	r18,r4,cb38 <___vfprintf_internal_r+0x1970>
    b9e4:	84000414 	ori	r16,r16,16
    b9e8:	003e5306 	br	b338 <___vfprintf_internal_r+0x170>
    b9ec:	8080080c 	andi	r2,r16,32
    b9f0:	e013883a 	mov	r9,fp
    b9f4:	10034026 	beq	r2,zero,c6f8 <___vfprintf_internal_r+0x1530>
    b9f8:	d9012d17 	ldw	r4,1204(sp)
    b9fc:	20800017 	ldw	r2,0(r4)
    ba00:	d9012c17 	ldw	r4,1200(sp)
    ba04:	2007d7fa 	srai	r3,r4,31
    ba08:	d9012d17 	ldw	r4,1204(sp)
    ba0c:	10c00115 	stw	r3,4(r2)
    ba10:	21000104 	addi	r4,r4,4
    ba14:	d9012d15 	stw	r4,1204(sp)
    ba18:	d9012c17 	ldw	r4,1200(sp)
    ba1c:	11000015 	stw	r4,0(r2)
    ba20:	003e1f06 	br	b2a0 <___vfprintf_internal_r+0xd8>
    ba24:	d9012d17 	ldw	r4,1204(sp)
    ba28:	21000017 	ldw	r4,0(r4)
    ba2c:	d9012e15 	stw	r4,1208(sp)
    ba30:	d9012d17 	ldw	r4,1204(sp)
    ba34:	20800104 	addi	r2,r4,4
    ba38:	d9012e17 	ldw	r4,1208(sp)
    ba3c:	203ee716 	blt	r4,zero,b5dc <___vfprintf_internal_r+0x414>
    ba40:	d8812d15 	stw	r2,1204(sp)
    ba44:	ac800007 	ldb	r18,0(r21)
    ba48:	003e3b06 	br	b338 <___vfprintf_internal_r+0x170>
    ba4c:	e013883a 	mov	r9,fp
    ba50:	1839883a 	mov	fp,r3
    ba54:	d8c12d17 	ldw	r3,1204(sp)
    ba58:	00800c04 	movi	r2,48
    ba5c:	010001f4 	movhi	r4,7
    ba60:	21111504 	addi	r4,r4,17492
    ba64:	1dc00017 	ldw	r23,0(r3)
    ba68:	18c00104 	addi	r3,r3,4
    ba6c:	d8812505 	stb	r2,1172(sp)
    ba70:	00801e04 	movi	r2,120
    ba74:	d8812545 	stb	r2,1173(sp)
    ba78:	d8c12d15 	stw	r3,1204(sp)
    ba7c:	002d883a 	mov	r22,zero
    ba80:	84000094 	ori	r16,r16,2
    ba84:	d9013615 	stw	r4,1240(sp)
    ba88:	00c00084 	movi	r3,2
    ba8c:	04801e04 	movi	r18,120
    ba90:	b805883a 	mov	r2,r23
    ba94:	d8012585 	stb	zero,1174(sp)
    ba98:	003f4406 	br	b7ac <___vfprintf_internal_r+0x5e4>
    ba9c:	84000814 	ori	r16,r16,32
    baa0:	ac800007 	ldb	r18,0(r21)
    baa4:	003e2406 	br	b338 <___vfprintf_internal_r+0x170>
    baa8:	d8812d17 	ldw	r2,1204(sp)
    baac:	d8012585 	stb	zero,1174(sp)
    bab0:	e013883a 	mov	r9,fp
    bab4:	14c00017 	ldw	r19,0(r2)
    bab8:	1839883a 	mov	fp,r3
    babc:	15c00104 	addi	r23,r2,4
    bac0:	98045526 	beq	r19,zero,cc18 <___vfprintf_internal_r+0x1a50>
    bac4:	9809883a 	mov	r4,r19
    bac8:	18043116 	blt	r3,zero,cb90 <___vfprintf_internal_r+0x19c8>
    bacc:	000b883a 	mov	r5,zero
    bad0:	180d883a 	mov	r6,r3
    bad4:	da413c15 	stw	r9,1264(sp)
    bad8:	000fcf80 	call	fcf8 <memchr>
    badc:	da413c17 	ldw	r9,1264(sp)
    bae0:	10047a26 	beq	r2,zero,cccc <___vfprintf_internal_r+0x1b04>
    bae4:	14c5c83a 	sub	r2,r2,r19
    bae8:	d8812b15 	stw	r2,1196(sp)
    baec:	e083d40e 	bge	fp,r2,ca40 <___vfprintf_internal_r+0x1878>
    baf0:	df012815 	stw	fp,1184(sp)
    baf4:	e004e416 	blt	fp,zero,ce88 <___vfprintf_internal_r+0x1cc0>
    baf8:	d8812583 	ldbu	r2,1174(sp)
    bafc:	df012b15 	stw	fp,1196(sp)
    bb00:	ddc12d15 	stw	r23,1204(sp)
    bb04:	d8013115 	stw	zero,1220(sp)
    bb08:	003f3c06 	br	b7fc <___vfprintf_internal_r+0x634>
    bb0c:	008001f4 	movhi	r2,7
    bb10:	10911504 	addi	r2,r2,17492
    bb14:	d8813615 	stw	r2,1240(sp)
    bb18:	8080080c 	andi	r2,r16,32
    bb1c:	e013883a 	mov	r9,fp
    bb20:	1839883a 	mov	fp,r3
    bb24:	103f891e 	bne	r2,zero,b94c <___vfprintf_internal_r+0x784>
    bb28:	8080040c 	andi	r2,r16,16
    bb2c:	1002c326 	beq	r2,zero,c63c <___vfprintf_internal_r+0x1474>
    bb30:	d8812d17 	ldw	r2,1204(sp)
    bb34:	002d883a 	mov	r22,zero
    bb38:	15c00017 	ldw	r23,0(r2)
    bb3c:	10800104 	addi	r2,r2,4
    bb40:	d8812d15 	stw	r2,1204(sp)
    bb44:	003f8606 	br	b960 <___vfprintf_internal_r+0x798>
    bb48:	84001014 	ori	r16,r16,64
    bb4c:	ac800007 	ldb	r18,0(r21)
    bb50:	003df906 	br	b338 <___vfprintf_internal_r+0x170>
    bb54:	d8812587 	ldb	r2,1174(sp)
    bb58:	1002e51e 	bne	r2,zero,c6f0 <___vfprintf_internal_r+0x1528>
    bb5c:	00800804 	movi	r2,32
    bb60:	d8812585 	stb	r2,1174(sp)
    bb64:	ac800007 	ldb	r18,0(r21)
    bb68:	003df306 	br	b338 <___vfprintf_internal_r+0x170>
    bb6c:	84000054 	ori	r16,r16,1
    bb70:	ac800007 	ldb	r18,0(r21)
    bb74:	003df006 	br	b338 <___vfprintf_internal_r+0x170>
    bb78:	84002014 	ori	r16,r16,128
    bb7c:	ac800007 	ldb	r18,0(r21)
    bb80:	003ded06 	br	b338 <___vfprintf_internal_r+0x170>
    bb84:	0009883a 	mov	r4,zero
    bb88:	95bff404 	addi	r22,r18,-48
    bb8c:	182f883a 	mov	r23,r3
    bb90:	01400284 	movi	r5,10
    bb94:	0009dec0 	call	9dec <__mulsi3>
    bb98:	ac800007 	ldb	r18,0(r21)
    bb9c:	1589883a 	add	r4,r2,r22
    bba0:	ad400044 	addi	r21,r21,1
    bba4:	95bff404 	addi	r22,r18,-48
    bba8:	9dbff92e 	bgeu	r19,r22,bb90 <___vfprintf_internal_r+0x9c8>
    bbac:	b807883a 	mov	r3,r23
    bbb0:	d9012e15 	stw	r4,1208(sp)
    bbb4:	003de106 	br	b33c <___vfprintf_internal_r+0x174>
    bbb8:	00800ac4 	movi	r2,43
    bbbc:	d8812585 	stb	r2,1174(sp)
    bbc0:	ac800007 	ldb	r18,0(r21)
    bbc4:	003ddc06 	br	b338 <___vfprintf_internal_r+0x170>
    bbc8:	d8c12d17 	ldw	r3,1204(sp)
    bbcc:	d9012d17 	ldw	r4,1204(sp)
    bbd0:	e013883a 	mov	r9,fp
    bbd4:	18800017 	ldw	r2,0(r3)
    bbd8:	21000104 	addi	r4,r4,4
    bbdc:	00c00044 	movi	r3,1
    bbe0:	d8c12815 	stw	r3,1184(sp)
    bbe4:	d8012585 	stb	zero,1174(sp)
    bbe8:	d8810405 	stb	r2,1040(sp)
    bbec:	d9012d15 	stw	r4,1204(sp)
    bbf0:	d8c12b15 	stw	r3,1196(sp)
    bbf4:	dcc10404 	addi	r19,sp,1040
    bbf8:	003dda06 	br	b364 <___vfprintf_internal_r+0x19c>
    bbfc:	e013883a 	mov	r9,fp
    bc00:	1839883a 	mov	fp,r3
    bc04:	003ed806 	br	b768 <___vfprintf_internal_r+0x5a0>
    bc08:	e013883a 	mov	r9,fp
    bc0c:	1839883a 	mov	fp,r3
    bc10:	003f2d06 	br	b8c8 <___vfprintf_internal_r+0x700>
    bc14:	e013883a 	mov	r9,fp
    bc18:	1839883a 	mov	fp,r3
    bc1c:	003f3806 	br	b900 <___vfprintf_internal_r+0x738>
    bc20:	da011d17 	ldw	r8,1140(sp)
    bc24:	d8c11c17 	ldw	r3,1136(sp)
    bc28:	d8812587 	ldb	r2,1174(sp)
    bc2c:	10000b26 	beq	r2,zero,bc5c <___vfprintf_internal_r+0xa94>
    bc30:	d8812584 	addi	r2,sp,1174
    bc34:	48800015 	stw	r2,0(r9)
    bc38:	00800044 	movi	r2,1
    bc3c:	48800115 	stw	r2,4(r9)
    bc40:	4091883a 	add	r8,r8,r2
    bc44:	1887883a 	add	r3,r3,r2
    bc48:	da011d15 	stw	r8,1140(sp)
    bc4c:	d8c11c15 	stw	r3,1136(sp)
    bc50:	008001c4 	movi	r2,7
    bc54:	10c18e16 	blt	r2,r3,c290 <___vfprintf_internal_r+0x10c8>
    bc58:	4a400204 	addi	r9,r9,8
    bc5c:	d9012a17 	ldw	r4,1192(sp)
    bc60:	20000b26 	beq	r4,zero,bc90 <___vfprintf_internal_r+0xac8>
    bc64:	d8812504 	addi	r2,sp,1172
    bc68:	48800015 	stw	r2,0(r9)
    bc6c:	00800084 	movi	r2,2
    bc70:	48800115 	stw	r2,4(r9)
    bc74:	4091883a 	add	r8,r8,r2
    bc78:	18c00044 	addi	r3,r3,1
    bc7c:	da011d15 	stw	r8,1140(sp)
    bc80:	d8c11c15 	stw	r3,1136(sp)
    bc84:	008001c4 	movi	r2,7
    bc88:	10c17816 	blt	r2,r3,c26c <___vfprintf_internal_r+0x10a4>
    bc8c:	4a400204 	addi	r9,r9,8
    bc90:	d9012f17 	ldw	r4,1212(sp)
    bc94:	00802004 	movi	r2,128
    bc98:	2080fc26 	beq	r4,r2,c08c <___vfprintf_internal_r+0xec4>
    bc9c:	d8813117 	ldw	r2,1220(sp)
    bca0:	d9012b17 	ldw	r4,1196(sp)
    bca4:	112fc83a 	sub	r23,r2,r4
    bca8:	05c02a0e 	bge	zero,r23,bd54 <___vfprintf_internal_r+0xb8c>
    bcac:	07000404 	movi	fp,16
    bcb0:	050001f4 	movhi	r20,7
    bcb4:	a5112084 	addi	r20,r20,17538
    bcb8:	e5c01d0e 	bge	fp,r23,bd30 <___vfprintf_internal_r+0xb68>
    bcbc:	dc812a15 	stw	r18,1192(sp)
    bcc0:	058001c4 	movi	r22,7
    bcc4:	a025883a 	mov	r18,r20
    bcc8:	8029883a 	mov	r20,r16
    bccc:	dc012917 	ldw	r16,1188(sp)
    bcd0:	00000306 	br	bce0 <___vfprintf_internal_r+0xb18>
    bcd4:	bdfffc04 	addi	r23,r23,-16
    bcd8:	4a400204 	addi	r9,r9,8
    bcdc:	e5c0110e 	bge	fp,r23,bd24 <___vfprintf_internal_r+0xb5c>
    bce0:	4c800015 	stw	r18,0(r9)
    bce4:	4f000115 	stw	fp,4(r9)
    bce8:	42000404 	addi	r8,r8,16
    bcec:	18c00044 	addi	r3,r3,1
    bcf0:	da011d15 	stw	r8,1140(sp)
    bcf4:	d8c11c15 	stw	r3,1136(sp)
    bcf8:	b0fff60e 	bge	r22,r3,bcd4 <___vfprintf_internal_r+0xb0c>
    bcfc:	8809883a 	mov	r4,r17
    bd00:	800b883a 	mov	r5,r16
    bd04:	d9811b04 	addi	r6,sp,1132
    bd08:	000b1940 	call	b194 <__sprint_r>
    bd0c:	103e741e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    bd10:	bdfffc04 	addi	r23,r23,-16
    bd14:	da011d17 	ldw	r8,1140(sp)
    bd18:	d8c11c17 	ldw	r3,1136(sp)
    bd1c:	da400404 	addi	r9,sp,16
    bd20:	e5ffef16 	blt	fp,r23,bce0 <___vfprintf_internal_r+0xb18>
    bd24:	a021883a 	mov	r16,r20
    bd28:	9029883a 	mov	r20,r18
    bd2c:	dc812a17 	ldw	r18,1192(sp)
    bd30:	4d000015 	stw	r20,0(r9)
    bd34:	4dc00115 	stw	r23,4(r9)
    bd38:	45d1883a 	add	r8,r8,r23
    bd3c:	18c00044 	addi	r3,r3,1
    bd40:	da011d15 	stw	r8,1140(sp)
    bd44:	d8c11c15 	stw	r3,1136(sp)
    bd48:	008001c4 	movi	r2,7
    bd4c:	10c13e16 	blt	r2,r3,c248 <___vfprintf_internal_r+0x1080>
    bd50:	4a400204 	addi	r9,r9,8
    bd54:	8080400c 	andi	r2,r16,256
    bd58:	1000831e 	bne	r2,zero,bf68 <___vfprintf_internal_r+0xda0>
    bd5c:	d8812b17 	ldw	r2,1196(sp)
    bd60:	4cc00015 	stw	r19,0(r9)
    bd64:	48800115 	stw	r2,4(r9)
    bd68:	4091883a 	add	r8,r8,r2
    bd6c:	18c00044 	addi	r3,r3,1
    bd70:	da011d15 	stw	r8,1140(sp)
    bd74:	d8c11c15 	stw	r3,1136(sp)
    bd78:	008001c4 	movi	r2,7
    bd7c:	10c05316 	blt	r2,r3,becc <___vfprintf_internal_r+0xd04>
    bd80:	4a400204 	addi	r9,r9,8
    bd84:	8400010c 	andi	r16,r16,4
    bd88:	80002e26 	beq	r16,zero,be44 <___vfprintf_internal_r+0xc7c>
    bd8c:	d8812e17 	ldw	r2,1208(sp)
    bd90:	d8c12817 	ldw	r3,1184(sp)
    bd94:	10e1c83a 	sub	r16,r2,r3
    bd98:	04002a0e 	bge	zero,r16,be44 <___vfprintf_internal_r+0xc7c>
    bd9c:	04800404 	movi	r18,16
    bda0:	d8c11c17 	ldw	r3,1136(sp)
    bda4:	05c001f4 	movhi	r23,7
    bda8:	bdd11c84 	addi	r23,r23,17522
    bdac:	9400170e 	bge	r18,r16,be0c <___vfprintf_internal_r+0xc44>
    bdb0:	04c001c4 	movi	r19,7
    bdb4:	dd012917 	ldw	r20,1188(sp)
    bdb8:	00000306 	br	bdc8 <___vfprintf_internal_r+0xc00>
    bdbc:	843ffc04 	addi	r16,r16,-16
    bdc0:	4a400204 	addi	r9,r9,8
    bdc4:	9400110e 	bge	r18,r16,be0c <___vfprintf_internal_r+0xc44>
    bdc8:	4dc00015 	stw	r23,0(r9)
    bdcc:	4c800115 	stw	r18,4(r9)
    bdd0:	42000404 	addi	r8,r8,16
    bdd4:	18c00044 	addi	r3,r3,1
    bdd8:	da011d15 	stw	r8,1140(sp)
    bddc:	d8c11c15 	stw	r3,1136(sp)
    bde0:	98fff60e 	bge	r19,r3,bdbc <___vfprintf_internal_r+0xbf4>
    bde4:	8809883a 	mov	r4,r17
    bde8:	a00b883a 	mov	r5,r20
    bdec:	d9811b04 	addi	r6,sp,1132
    bdf0:	000b1940 	call	b194 <__sprint_r>
    bdf4:	103e3a1e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    bdf8:	843ffc04 	addi	r16,r16,-16
    bdfc:	da011d17 	ldw	r8,1140(sp)
    be00:	d8c11c17 	ldw	r3,1136(sp)
    be04:	da400404 	addi	r9,sp,16
    be08:	943fef16 	blt	r18,r16,bdc8 <___vfprintf_internal_r+0xc00>
    be0c:	4dc00015 	stw	r23,0(r9)
    be10:	4c000115 	stw	r16,4(r9)
    be14:	8211883a 	add	r8,r16,r8
    be18:	18c00044 	addi	r3,r3,1
    be1c:	da011d15 	stw	r8,1140(sp)
    be20:	d8c11c15 	stw	r3,1136(sp)
    be24:	008001c4 	movi	r2,7
    be28:	10c0060e 	bge	r2,r3,be44 <___vfprintf_internal_r+0xc7c>
    be2c:	d9412917 	ldw	r5,1188(sp)
    be30:	8809883a 	mov	r4,r17
    be34:	d9811b04 	addi	r6,sp,1132
    be38:	000b1940 	call	b194 <__sprint_r>
    be3c:	103e281e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    be40:	da011d17 	ldw	r8,1140(sp)
    be44:	dd012817 	ldw	r20,1184(sp)
    be48:	d9012e17 	ldw	r4,1208(sp)
    be4c:	a100010e 	bge	r20,r4,be54 <___vfprintf_internal_r+0xc8c>
    be50:	2029883a 	mov	r20,r4
    be54:	d8812c17 	ldw	r2,1200(sp)
    be58:	1505883a 	add	r2,r2,r20
    be5c:	d8812c15 	stw	r2,1200(sp)
    be60:	4000b91e 	bne	r8,zero,c148 <___vfprintf_internal_r+0xf80>
    be64:	d8011c15 	stw	zero,1136(sp)
    be68:	a8800007 	ldb	r2,0(r21)
    be6c:	da400404 	addi	r9,sp,16
    be70:	103d0d1e 	bne	r2,zero,b2a8 <___vfprintf_internal_r+0xe0>
    be74:	a825883a 	mov	r18,r21
    be78:	003d2306 	br	b308 <___vfprintf_internal_r+0x140>
    be7c:	d9412917 	ldw	r5,1188(sp)
    be80:	8809883a 	mov	r4,r17
    be84:	d9811b04 	addi	r6,sp,1132
    be88:	000b1940 	call	b194 <__sprint_r>
    be8c:	103e141e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    be90:	da011d17 	ldw	r8,1140(sp)
    be94:	da400404 	addi	r9,sp,16
    be98:	8080004c 	andi	r2,r16,1
    be9c:	103fb926 	beq	r2,zero,bd84 <___vfprintf_internal_r+0xbbc>
    bea0:	d8c11c17 	ldw	r3,1136(sp)
    bea4:	d9013717 	ldw	r4,1244(sp)
    bea8:	00800044 	movi	r2,1
    beac:	48800115 	stw	r2,4(r9)
    beb0:	49000015 	stw	r4,0(r9)
    beb4:	4091883a 	add	r8,r8,r2
    beb8:	1887883a 	add	r3,r3,r2
    bebc:	da011d15 	stw	r8,1140(sp)
    bec0:	d8c11c15 	stw	r3,1136(sp)
    bec4:	008001c4 	movi	r2,7
    bec8:	10ffad0e 	bge	r2,r3,bd80 <___vfprintf_internal_r+0xbb8>
    becc:	d9412917 	ldw	r5,1188(sp)
    bed0:	8809883a 	mov	r4,r17
    bed4:	d9811b04 	addi	r6,sp,1132
    bed8:	000b1940 	call	b194 <__sprint_r>
    bedc:	103e001e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    bee0:	da400404 	addi	r9,sp,16
    bee4:	da011d17 	ldw	r8,1140(sp)
    bee8:	003fa606 	br	bd84 <___vfprintf_internal_r+0xbbc>
    beec:	18803fcc 	andi	r2,r3,255
    bef0:	00c00044 	movi	r3,1
    bef4:	10c10126 	beq	r2,r3,c2fc <___vfprintf_internal_r+0x1134>
    bef8:	00c00084 	movi	r3,2
    befc:	10c0ed26 	beq	r2,r3,c2b4 <___vfprintf_internal_r+0x10ec>
    bf00:	d8c10dc4 	addi	r3,sp,1079
    bf04:	b808d0fa 	srli	r4,r23,3
    bf08:	b00a977a 	slli	r5,r22,29
    bf0c:	b02cd0fa 	srli	r22,r22,3
    bf10:	bdc001cc 	andi	r23,r23,7
    bf14:	b8800c04 	addi	r2,r23,48
    bf18:	292eb03a 	or	r23,r5,r4
    bf1c:	18800005 	stb	r2,0(r3)
    bf20:	bd88b03a 	or	r4,r23,r22
    bf24:	1827883a 	mov	r19,r3
    bf28:	18ffffc4 	addi	r3,r3,-1
    bf2c:	203ff51e 	bne	r4,zero,bf04 <___vfprintf_internal_r+0xd3c>
    bf30:	8100004c 	andi	r4,r16,1
    bf34:	980b883a 	mov	r5,r19
    bf38:	20000726 	beq	r4,zero,bf58 <___vfprintf_internal_r+0xd90>
    bf3c:	10803fcc 	andi	r2,r2,255
    bf40:	1080201c 	xori	r2,r2,128
    bf44:	10bfe004 	addi	r2,r2,-128
    bf48:	01000c04 	movi	r4,48
    bf4c:	11000226 	beq	r2,r4,bf58 <___vfprintf_internal_r+0xd90>
    bf50:	1827883a 	mov	r19,r3
    bf54:	293fffc5 	stb	r4,-1(r5)
    bf58:	d8812717 	ldw	r2,1180(sp)
    bf5c:	14c5c83a 	sub	r2,r2,r19
    bf60:	d8812b15 	stw	r2,1196(sp)
    bf64:	003e1f06 	br	b7e4 <___vfprintf_internal_r+0x61c>
    bf68:	00801944 	movi	r2,101
    bf6c:	14807c0e 	bge	r2,r18,c160 <___vfprintf_internal_r+0xf98>
    bf70:	d9013317 	ldw	r4,1228(sp)
    bf74:	d9413417 	ldw	r5,1232(sp)
    bf78:	000d883a 	mov	r6,zero
    bf7c:	000f883a 	mov	r7,zero
    bf80:	d8c13b15 	stw	r3,1260(sp)
    bf84:	da013a15 	stw	r8,1256(sp)
    bf88:	da413c15 	stw	r9,1264(sp)
    bf8c:	0012bf00 	call	12bf0 <__eqdf2>
    bf90:	d8c13b17 	ldw	r3,1260(sp)
    bf94:	da013a17 	ldw	r8,1256(sp)
    bf98:	da413c17 	ldw	r9,1264(sp)
    bf9c:	1001001e 	bne	r2,zero,c3a0 <___vfprintf_internal_r+0x11d8>
    bfa0:	008001f4 	movhi	r2,7
    bfa4:	10911c04 	addi	r2,r2,17520
    bfa8:	48800015 	stw	r2,0(r9)
    bfac:	00800044 	movi	r2,1
    bfb0:	48800115 	stw	r2,4(r9)
    bfb4:	4091883a 	add	r8,r8,r2
    bfb8:	1887883a 	add	r3,r3,r2
    bfbc:	da011d15 	stw	r8,1140(sp)
    bfc0:	d8c11c15 	stw	r3,1136(sp)
    bfc4:	008001c4 	movi	r2,7
    bfc8:	10c20316 	blt	r2,r3,c7d8 <___vfprintf_internal_r+0x1610>
    bfcc:	4a400204 	addi	r9,r9,8
    bfd0:	d8812417 	ldw	r2,1168(sp)
    bfd4:	d8c13217 	ldw	r3,1224(sp)
    bfd8:	10c00216 	blt	r2,r3,bfe4 <___vfprintf_internal_r+0xe1c>
    bfdc:	8080004c 	andi	r2,r16,1
    bfe0:	103f6826 	beq	r2,zero,bd84 <___vfprintf_internal_r+0xbbc>
    bfe4:	d8c11c17 	ldw	r3,1136(sp)
    bfe8:	d9013717 	ldw	r4,1244(sp)
    bfec:	00800044 	movi	r2,1
    bff0:	48800115 	stw	r2,4(r9)
    bff4:	49000015 	stw	r4,0(r9)
    bff8:	4091883a 	add	r8,r8,r2
    bffc:	1887883a 	add	r3,r3,r2
    c000:	da011d15 	stw	r8,1140(sp)
    c004:	d8c11c15 	stw	r3,1136(sp)
    c008:	008001c4 	movi	r2,7
    c00c:	10c2ce16 	blt	r2,r3,cb48 <___vfprintf_internal_r+0x1980>
    c010:	4a400204 	addi	r9,r9,8
    c014:	d8813217 	ldw	r2,1224(sp)
    c018:	14bfffc4 	addi	r18,r2,-1
    c01c:	04bf590e 	bge	zero,r18,bd84 <___vfprintf_internal_r+0xbbc>
    c020:	04c00404 	movi	r19,16
    c024:	d8c11c17 	ldw	r3,1136(sp)
    c028:	050001f4 	movhi	r20,7
    c02c:	a5112084 	addi	r20,r20,17538
    c030:	9c818a0e 	bge	r19,r18,c65c <___vfprintf_internal_r+0x1494>
    c034:	058001c4 	movi	r22,7
    c038:	ddc12917 	ldw	r23,1188(sp)
    c03c:	00000306 	br	c04c <___vfprintf_internal_r+0xe84>
    c040:	4a400204 	addi	r9,r9,8
    c044:	94bffc04 	addi	r18,r18,-16
    c048:	9c81840e 	bge	r19,r18,c65c <___vfprintf_internal_r+0x1494>
    c04c:	4d000015 	stw	r20,0(r9)
    c050:	4cc00115 	stw	r19,4(r9)
    c054:	42000404 	addi	r8,r8,16
    c058:	18c00044 	addi	r3,r3,1
    c05c:	da011d15 	stw	r8,1140(sp)
    c060:	d8c11c15 	stw	r3,1136(sp)
    c064:	b0fff60e 	bge	r22,r3,c040 <___vfprintf_internal_r+0xe78>
    c068:	8809883a 	mov	r4,r17
    c06c:	b80b883a 	mov	r5,r23
    c070:	d9811b04 	addi	r6,sp,1132
    c074:	000b1940 	call	b194 <__sprint_r>
    c078:	103d991e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c07c:	da011d17 	ldw	r8,1140(sp)
    c080:	d8c11c17 	ldw	r3,1136(sp)
    c084:	da400404 	addi	r9,sp,16
    c088:	003fee06 	br	c044 <___vfprintf_internal_r+0xe7c>
    c08c:	d8812e17 	ldw	r2,1208(sp)
    c090:	d9012817 	ldw	r4,1184(sp)
    c094:	112fc83a 	sub	r23,r2,r4
    c098:	05ff000e 	bge	zero,r23,bc9c <___vfprintf_internal_r+0xad4>
    c09c:	07000404 	movi	fp,16
    c0a0:	050001f4 	movhi	r20,7
    c0a4:	a5112084 	addi	r20,r20,17538
    c0a8:	e5c01d0e 	bge	fp,r23,c120 <___vfprintf_internal_r+0xf58>
    c0ac:	dc812a15 	stw	r18,1192(sp)
    c0b0:	058001c4 	movi	r22,7
    c0b4:	a025883a 	mov	r18,r20
    c0b8:	8029883a 	mov	r20,r16
    c0bc:	dc012917 	ldw	r16,1188(sp)
    c0c0:	00000306 	br	c0d0 <___vfprintf_internal_r+0xf08>
    c0c4:	bdfffc04 	addi	r23,r23,-16
    c0c8:	4a400204 	addi	r9,r9,8
    c0cc:	e5c0110e 	bge	fp,r23,c114 <___vfprintf_internal_r+0xf4c>
    c0d0:	4c800015 	stw	r18,0(r9)
    c0d4:	4f000115 	stw	fp,4(r9)
    c0d8:	42000404 	addi	r8,r8,16
    c0dc:	18c00044 	addi	r3,r3,1
    c0e0:	da011d15 	stw	r8,1140(sp)
    c0e4:	d8c11c15 	stw	r3,1136(sp)
    c0e8:	b0fff60e 	bge	r22,r3,c0c4 <___vfprintf_internal_r+0xefc>
    c0ec:	8809883a 	mov	r4,r17
    c0f0:	800b883a 	mov	r5,r16
    c0f4:	d9811b04 	addi	r6,sp,1132
    c0f8:	000b1940 	call	b194 <__sprint_r>
    c0fc:	103d781e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c100:	bdfffc04 	addi	r23,r23,-16
    c104:	da011d17 	ldw	r8,1140(sp)
    c108:	d8c11c17 	ldw	r3,1136(sp)
    c10c:	da400404 	addi	r9,sp,16
    c110:	e5ffef16 	blt	fp,r23,c0d0 <___vfprintf_internal_r+0xf08>
    c114:	a021883a 	mov	r16,r20
    c118:	9029883a 	mov	r20,r18
    c11c:	dc812a17 	ldw	r18,1192(sp)
    c120:	4d000015 	stw	r20,0(r9)
    c124:	4dc00115 	stw	r23,4(r9)
    c128:	45d1883a 	add	r8,r8,r23
    c12c:	18c00044 	addi	r3,r3,1
    c130:	da011d15 	stw	r8,1140(sp)
    c134:	d8c11c15 	stw	r3,1136(sp)
    c138:	008001c4 	movi	r2,7
    c13c:	10c13616 	blt	r2,r3,c618 <___vfprintf_internal_r+0x1450>
    c140:	4a400204 	addi	r9,r9,8
    c144:	003ed506 	br	bc9c <___vfprintf_internal_r+0xad4>
    c148:	d9412917 	ldw	r5,1188(sp)
    c14c:	8809883a 	mov	r4,r17
    c150:	d9811b04 	addi	r6,sp,1132
    c154:	000b1940 	call	b194 <__sprint_r>
    c158:	103f4226 	beq	r2,zero,be64 <___vfprintf_internal_r+0xc9c>
    c15c:	003d6006 	br	b6e0 <___vfprintf_internal_r+0x518>
    c160:	d9013217 	ldw	r4,1224(sp)
    c164:	00800044 	movi	r2,1
    c168:	4cc00015 	stw	r19,0(r9)
    c16c:	1101000e 	bge	r2,r4,c570 <___vfprintf_internal_r+0x13a8>
    c170:	00800044 	movi	r2,1
    c174:	48800115 	stw	r2,4(r9)
    c178:	4091883a 	add	r8,r8,r2
    c17c:	1887883a 	add	r3,r3,r2
    c180:	da011d15 	stw	r8,1140(sp)
    c184:	d8c11c15 	stw	r3,1136(sp)
    c188:	008001c4 	movi	r2,7
    c18c:	10c10c16 	blt	r2,r3,c5c0 <___vfprintf_internal_r+0x13f8>
    c190:	4a400204 	addi	r9,r9,8
    c194:	d8813717 	ldw	r2,1244(sp)
    c198:	48800015 	stw	r2,0(r9)
    c19c:	00800044 	movi	r2,1
    c1a0:	48800115 	stw	r2,4(r9)
    c1a4:	4091883a 	add	r8,r8,r2
    c1a8:	1887883a 	add	r3,r3,r2
    c1ac:	da011d15 	stw	r8,1140(sp)
    c1b0:	d8c11c15 	stw	r3,1136(sp)
    c1b4:	008001c4 	movi	r2,7
    c1b8:	10c10a16 	blt	r2,r3,c5e4 <___vfprintf_internal_r+0x141c>
    c1bc:	4c800204 	addi	r18,r9,8
    c1c0:	d9013317 	ldw	r4,1228(sp)
    c1c4:	d9413417 	ldw	r5,1232(sp)
    c1c8:	000d883a 	mov	r6,zero
    c1cc:	000f883a 	mov	r7,zero
    c1d0:	d8c13b15 	stw	r3,1260(sp)
    c1d4:	da013a15 	stw	r8,1256(sp)
    c1d8:	0012c4c0 	call	12c4c <__nedf2>
    c1dc:	d8c13b17 	ldw	r3,1260(sp)
    c1e0:	da013a17 	ldw	r8,1256(sp)
    c1e4:	1000ba26 	beq	r2,zero,c4d0 <___vfprintf_internal_r+0x1308>
    c1e8:	d9013217 	ldw	r4,1224(sp)
    c1ec:	9cc00044 	addi	r19,r19,1
    c1f0:	94c00015 	stw	r19,0(r18)
    c1f4:	20bfffc4 	addi	r2,r4,-1
    c1f8:	90800115 	stw	r2,4(r18)
    c1fc:	4091883a 	add	r8,r8,r2
    c200:	18c00044 	addi	r3,r3,1
    c204:	da011d15 	stw	r8,1140(sp)
    c208:	d8c11c15 	stw	r3,1136(sp)
    c20c:	008001c4 	movi	r2,7
    c210:	10c0e216 	blt	r2,r3,c59c <___vfprintf_internal_r+0x13d4>
    c214:	94800204 	addi	r18,r18,8
    c218:	d9013517 	ldw	r4,1236(sp)
    c21c:	d8811fc4 	addi	r2,sp,1151
    c220:	90800015 	stw	r2,0(r18)
    c224:	91000115 	stw	r4,4(r18)
    c228:	4111883a 	add	r8,r8,r4
    c22c:	18c00044 	addi	r3,r3,1
    c230:	da011d15 	stw	r8,1140(sp)
    c234:	d8c11c15 	stw	r3,1136(sp)
    c238:	008001c4 	movi	r2,7
    c23c:	10ff2316 	blt	r2,r3,becc <___vfprintf_internal_r+0xd04>
    c240:	92400204 	addi	r9,r18,8
    c244:	003ecf06 	br	bd84 <___vfprintf_internal_r+0xbbc>
    c248:	d9412917 	ldw	r5,1188(sp)
    c24c:	8809883a 	mov	r4,r17
    c250:	d9811b04 	addi	r6,sp,1132
    c254:	000b1940 	call	b194 <__sprint_r>
    c258:	103d211e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c25c:	da011d17 	ldw	r8,1140(sp)
    c260:	d8c11c17 	ldw	r3,1136(sp)
    c264:	da400404 	addi	r9,sp,16
    c268:	003eba06 	br	bd54 <___vfprintf_internal_r+0xb8c>
    c26c:	d9412917 	ldw	r5,1188(sp)
    c270:	8809883a 	mov	r4,r17
    c274:	d9811b04 	addi	r6,sp,1132
    c278:	000b1940 	call	b194 <__sprint_r>
    c27c:	103d181e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c280:	da011d17 	ldw	r8,1140(sp)
    c284:	d8c11c17 	ldw	r3,1136(sp)
    c288:	da400404 	addi	r9,sp,16
    c28c:	003e8006 	br	bc90 <___vfprintf_internal_r+0xac8>
    c290:	d9412917 	ldw	r5,1188(sp)
    c294:	8809883a 	mov	r4,r17
    c298:	d9811b04 	addi	r6,sp,1132
    c29c:	000b1940 	call	b194 <__sprint_r>
    c2a0:	103d0f1e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c2a4:	da011d17 	ldw	r8,1140(sp)
    c2a8:	d8c11c17 	ldw	r3,1136(sp)
    c2ac:	da400404 	addi	r9,sp,16
    c2b0:	003e6a06 	br	bc5c <___vfprintf_internal_r+0xa94>
    c2b4:	d9413617 	ldw	r5,1240(sp)
    c2b8:	d8810dc4 	addi	r2,sp,1079
    c2bc:	b8c003cc 	andi	r3,r23,15
    c2c0:	b008973a 	slli	r4,r22,28
    c2c4:	28c7883a 	add	r3,r5,r3
    c2c8:	b82ed13a 	srli	r23,r23,4
    c2cc:	18c00003 	ldbu	r3,0(r3)
    c2d0:	b02cd13a 	srli	r22,r22,4
    c2d4:	25eeb03a 	or	r23,r4,r23
    c2d8:	10c00005 	stb	r3,0(r2)
    c2dc:	bd86b03a 	or	r3,r23,r22
    c2e0:	1027883a 	mov	r19,r2
    c2e4:	10bfffc4 	addi	r2,r2,-1
    c2e8:	183ff41e 	bne	r3,zero,c2bc <___vfprintf_internal_r+0x10f4>
    c2ec:	003f1a06 	br	bf58 <___vfprintf_internal_r+0xd90>
    c2f0:	d8012b15 	stw	zero,1196(sp)
    c2f4:	dcc10e04 	addi	r19,sp,1080
    c2f8:	003d3a06 	br	b7e4 <___vfprintf_internal_r+0x61c>
    c2fc:	b0025426 	beq	r22,zero,cc50 <___vfprintf_internal_r+0x1a88>
    c300:	b807883a 	mov	r3,r23
    c304:	d8810dc4 	addi	r2,sp,1079
    c308:	882f883a 	mov	r23,r17
    c30c:	04c00244 	movi	r19,9
    c310:	8023883a 	mov	r17,r16
    c314:	da412815 	stw	r9,1184(sp)
    c318:	1821883a 	mov	r16,r3
    c31c:	8009883a 	mov	r4,r16
    c320:	b00b883a 	mov	r5,r22
    c324:	01800284 	movi	r6,10
    c328:	000f883a 	mov	r7,zero
    c32c:	1029883a 	mov	r20,r2
    c330:	00125c80 	call	125c8 <__umoddi3>
    c334:	10800c04 	addi	r2,r2,48
    c338:	8009883a 	mov	r4,r16
    c33c:	b00b883a 	mov	r5,r22
    c340:	a0800005 	stb	r2,0(r20)
    c344:	01800284 	movi	r6,10
    c348:	000f883a 	mov	r7,zero
    c34c:	0011f780 	call	11f78 <__udivdi3>
    c350:	1021883a 	mov	r16,r2
    c354:	182d883a 	mov	r22,r3
    c358:	a0bfffc4 	addi	r2,r20,-1
    c35c:	183fef1e 	bne	r3,zero,c31c <___vfprintf_internal_r+0x1154>
    c360:	9c3fee36 	bltu	r19,r16,c31c <___vfprintf_internal_r+0x1154>
    c364:	da412817 	ldw	r9,1184(sp)
    c368:	8005883a 	mov	r2,r16
    c36c:	8821883a 	mov	r16,r17
    c370:	b823883a 	mov	r17,r23
    c374:	102f883a 	mov	r23,r2
    c378:	d8812717 	ldw	r2,1180(sp)
    c37c:	a4ffffc4 	addi	r19,r20,-1
    c380:	bdc00c04 	addi	r23,r23,48
    c384:	14c5c83a 	sub	r2,r2,r19
    c388:	a5ffffc5 	stb	r23,-1(r20)
    c38c:	d8812b15 	stw	r2,1196(sp)
    c390:	003d1406 	br	b7e4 <___vfprintf_internal_r+0x61c>
    c394:	00c00044 	movi	r3,1
    c398:	bd84b03a 	or	r2,r23,r22
    c39c:	003d0306 	br	b7ac <___vfprintf_internal_r+0x5e4>
    c3a0:	dc812417 	ldw	r18,1168(sp)
    c3a4:	0481140e 	bge	zero,r18,c7f8 <___vfprintf_internal_r+0x1630>
    c3a8:	d9013217 	ldw	r4,1224(sp)
    c3ac:	4cc00015 	stw	r19,0(r9)
    c3b0:	9100ec16 	blt	r18,r4,c764 <___vfprintf_internal_r+0x159c>
    c3b4:	49000115 	stw	r4,4(r9)
    c3b8:	4111883a 	add	r8,r8,r4
    c3bc:	18c00044 	addi	r3,r3,1
    c3c0:	da011d15 	stw	r8,1140(sp)
    c3c4:	d8c11c15 	stw	r3,1136(sp)
    c3c8:	008001c4 	movi	r2,7
    c3cc:	10c23616 	blt	r2,r3,cca8 <___vfprintf_internal_r+0x1ae0>
    c3d0:	4a400204 	addi	r9,r9,8
    c3d4:	d8813217 	ldw	r2,1224(sp)
    c3d8:	90a5c83a 	sub	r18,r18,r2
    c3dc:	04beae0e 	bge	zero,r18,be98 <___vfprintf_internal_r+0xcd0>
    c3e0:	04c00404 	movi	r19,16
    c3e4:	d8c11c17 	ldw	r3,1136(sp)
    c3e8:	050001f4 	movhi	r20,7
    c3ec:	a5112084 	addi	r20,r20,17538
    c3f0:	9c81dd0e 	bge	r19,r18,cb68 <___vfprintf_internal_r+0x19a0>
    c3f4:	058001c4 	movi	r22,7
    c3f8:	ddc12917 	ldw	r23,1188(sp)
    c3fc:	00000306 	br	c40c <___vfprintf_internal_r+0x1244>
    c400:	4a400204 	addi	r9,r9,8
    c404:	94bffc04 	addi	r18,r18,-16
    c408:	9c81d70e 	bge	r19,r18,cb68 <___vfprintf_internal_r+0x19a0>
    c40c:	4d000015 	stw	r20,0(r9)
    c410:	4cc00115 	stw	r19,4(r9)
    c414:	42000404 	addi	r8,r8,16
    c418:	18c00044 	addi	r3,r3,1
    c41c:	da011d15 	stw	r8,1140(sp)
    c420:	d8c11c15 	stw	r3,1136(sp)
    c424:	b0fff60e 	bge	r22,r3,c400 <___vfprintf_internal_r+0x1238>
    c428:	8809883a 	mov	r4,r17
    c42c:	b80b883a 	mov	r5,r23
    c430:	d9811b04 	addi	r6,sp,1132
    c434:	000b1940 	call	b194 <__sprint_r>
    c438:	103ca91e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c43c:	da011d17 	ldw	r8,1140(sp)
    c440:	d8c11c17 	ldw	r3,1136(sp)
    c444:	da400404 	addi	r9,sp,16
    c448:	003fee06 	br	c404 <___vfprintf_internal_r+0x123c>
    c44c:	d9412917 	ldw	r5,1188(sp)
    c450:	8809883a 	mov	r4,r17
    c454:	d9811b04 	addi	r6,sp,1132
    c458:	000b1940 	call	b194 <__sprint_r>
    c45c:	103ca01e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c460:	da011d17 	ldw	r8,1140(sp)
    c464:	d8c11c17 	ldw	r3,1136(sp)
    c468:	da400404 	addi	r9,sp,16
    c46c:	003dee06 	br	bc28 <___vfprintf_internal_r+0xa60>
    c470:	00c00084 	movi	r3,2
    c474:	bd84b03a 	or	r2,r23,r22
    c478:	d8012585 	stb	zero,1174(sp)
    c47c:	003ccb06 	br	b7ac <___vfprintf_internal_r+0x5e4>
    c480:	8080040c 	andi	r2,r16,16
    c484:	1000ae26 	beq	r2,zero,c740 <___vfprintf_internal_r+0x1578>
    c488:	d9012d17 	ldw	r4,1204(sp)
    c48c:	25c00017 	ldw	r23,0(r4)
    c490:	21000104 	addi	r4,r4,4
    c494:	d9012d15 	stw	r4,1204(sp)
    c498:	b82dd7fa 	srai	r22,r23,31
    c49c:	b005883a 	mov	r2,r22
    c4a0:	003cb906 	br	b788 <___vfprintf_internal_r+0x5c0>
    c4a4:	8080040c 	andi	r2,r16,16
    c4a8:	10007026 	beq	r2,zero,c66c <___vfprintf_internal_r+0x14a4>
    c4ac:	d8812d17 	ldw	r2,1204(sp)
    c4b0:	002d883a 	mov	r22,zero
    c4b4:	00c00044 	movi	r3,1
    c4b8:	15c00017 	ldw	r23,0(r2)
    c4bc:	10800104 	addi	r2,r2,4
    c4c0:	d8812d15 	stw	r2,1204(sp)
    c4c4:	d8012585 	stb	zero,1174(sp)
    c4c8:	b805883a 	mov	r2,r23
    c4cc:	003cb706 	br	b7ac <___vfprintf_internal_r+0x5e4>
    c4d0:	d8813217 	ldw	r2,1224(sp)
    c4d4:	14ffffc4 	addi	r19,r2,-1
    c4d8:	04ff4f0e 	bge	zero,r19,c218 <___vfprintf_internal_r+0x1050>
    c4dc:	05800404 	movi	r22,16
    c4e0:	050001f4 	movhi	r20,7
    c4e4:	a5112084 	addi	r20,r20,17538
    c4e8:	b4c0470e 	bge	r22,r19,c608 <___vfprintf_internal_r+0x1440>
    c4ec:	05c001c4 	movi	r23,7
    c4f0:	df012917 	ldw	fp,1188(sp)
    c4f4:	00000306 	br	c504 <___vfprintf_internal_r+0x133c>
    c4f8:	94800204 	addi	r18,r18,8
    c4fc:	9cfffc04 	addi	r19,r19,-16
    c500:	b4c0410e 	bge	r22,r19,c608 <___vfprintf_internal_r+0x1440>
    c504:	95000015 	stw	r20,0(r18)
    c508:	95800115 	stw	r22,4(r18)
    c50c:	42000404 	addi	r8,r8,16
    c510:	18c00044 	addi	r3,r3,1
    c514:	da011d15 	stw	r8,1140(sp)
    c518:	d8c11c15 	stw	r3,1136(sp)
    c51c:	b8fff60e 	bge	r23,r3,c4f8 <___vfprintf_internal_r+0x1330>
    c520:	8809883a 	mov	r4,r17
    c524:	e00b883a 	mov	r5,fp
    c528:	d9811b04 	addi	r6,sp,1132
    c52c:	000b1940 	call	b194 <__sprint_r>
    c530:	103c6b1e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c534:	da011d17 	ldw	r8,1140(sp)
    c538:	d8c11c17 	ldw	r3,1136(sp)
    c53c:	dc800404 	addi	r18,sp,16
    c540:	003fee06 	br	c4fc <___vfprintf_internal_r+0x1334>
    c544:	8080040c 	andi	r2,r16,16
    c548:	10005326 	beq	r2,zero,c698 <___vfprintf_internal_r+0x14d0>
    c54c:	d8c12d17 	ldw	r3,1204(sp)
    c550:	002d883a 	mov	r22,zero
    c554:	1dc00017 	ldw	r23,0(r3)
    c558:	18c00104 	addi	r3,r3,4
    c55c:	d8c12d15 	stw	r3,1204(sp)
    c560:	b805883a 	mov	r2,r23
    c564:	0007883a 	mov	r3,zero
    c568:	d8012585 	stb	zero,1174(sp)
    c56c:	003c8f06 	br	b7ac <___vfprintf_internal_r+0x5e4>
    c570:	8088703a 	and	r4,r16,r2
    c574:	203efe1e 	bne	r4,zero,c170 <___vfprintf_internal_r+0xfa8>
    c578:	48800115 	stw	r2,4(r9)
    c57c:	42000044 	addi	r8,r8,1
    c580:	18c00044 	addi	r3,r3,1
    c584:	da011d15 	stw	r8,1140(sp)
    c588:	d8c11c15 	stw	r3,1136(sp)
    c58c:	008001c4 	movi	r2,7
    c590:	10c00216 	blt	r2,r3,c59c <___vfprintf_internal_r+0x13d4>
    c594:	4c800204 	addi	r18,r9,8
    c598:	003f1f06 	br	c218 <___vfprintf_internal_r+0x1050>
    c59c:	d9412917 	ldw	r5,1188(sp)
    c5a0:	8809883a 	mov	r4,r17
    c5a4:	d9811b04 	addi	r6,sp,1132
    c5a8:	000b1940 	call	b194 <__sprint_r>
    c5ac:	103c4c1e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c5b0:	dc800404 	addi	r18,sp,16
    c5b4:	da011d17 	ldw	r8,1140(sp)
    c5b8:	d8c11c17 	ldw	r3,1136(sp)
    c5bc:	003f1606 	br	c218 <___vfprintf_internal_r+0x1050>
    c5c0:	d9412917 	ldw	r5,1188(sp)
    c5c4:	8809883a 	mov	r4,r17
    c5c8:	d9811b04 	addi	r6,sp,1132
    c5cc:	000b1940 	call	b194 <__sprint_r>
    c5d0:	103c431e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c5d4:	da011d17 	ldw	r8,1140(sp)
    c5d8:	d8c11c17 	ldw	r3,1136(sp)
    c5dc:	da400404 	addi	r9,sp,16
    c5e0:	003eec06 	br	c194 <___vfprintf_internal_r+0xfcc>
    c5e4:	d9412917 	ldw	r5,1188(sp)
    c5e8:	8809883a 	mov	r4,r17
    c5ec:	d9811b04 	addi	r6,sp,1132
    c5f0:	000b1940 	call	b194 <__sprint_r>
    c5f4:	103c3a1e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c5f8:	da011d17 	ldw	r8,1140(sp)
    c5fc:	d8c11c17 	ldw	r3,1136(sp)
    c600:	dc800404 	addi	r18,sp,16
    c604:	003eee06 	br	c1c0 <___vfprintf_internal_r+0xff8>
    c608:	95000015 	stw	r20,0(r18)
    c60c:	94c00115 	stw	r19,4(r18)
    c610:	44d1883a 	add	r8,r8,r19
    c614:	003efa06 	br	c200 <___vfprintf_internal_r+0x1038>
    c618:	d9412917 	ldw	r5,1188(sp)
    c61c:	8809883a 	mov	r4,r17
    c620:	d9811b04 	addi	r6,sp,1132
    c624:	000b1940 	call	b194 <__sprint_r>
    c628:	103c2d1e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c62c:	da011d17 	ldw	r8,1140(sp)
    c630:	d8c11c17 	ldw	r3,1136(sp)
    c634:	da400404 	addi	r9,sp,16
    c638:	003d9806 	br	bc9c <___vfprintf_internal_r+0xad4>
    c63c:	8080100c 	andi	r2,r16,64
    c640:	10011626 	beq	r2,zero,ca9c <___vfprintf_internal_r+0x18d4>
    c644:	d8c12d17 	ldw	r3,1204(sp)
    c648:	002d883a 	mov	r22,zero
    c64c:	1dc0000b 	ldhu	r23,0(r3)
    c650:	18c00104 	addi	r3,r3,4
    c654:	d8c12d15 	stw	r3,1204(sp)
    c658:	003cc106 	br	b960 <___vfprintf_internal_r+0x798>
    c65c:	4d000015 	stw	r20,0(r9)
    c660:	4c800115 	stw	r18,4(r9)
    c664:	4491883a 	add	r8,r8,r18
    c668:	003dc006 	br	bd6c <___vfprintf_internal_r+0xba4>
    c66c:	8080100c 	andi	r2,r16,64
    c670:	10010126 	beq	r2,zero,ca78 <___vfprintf_internal_r+0x18b0>
    c674:	d8c12d17 	ldw	r3,1204(sp)
    c678:	002d883a 	mov	r22,zero
    c67c:	1dc0000b 	ldhu	r23,0(r3)
    c680:	18c00104 	addi	r3,r3,4
    c684:	d8c12d15 	stw	r3,1204(sp)
    c688:	b805883a 	mov	r2,r23
    c68c:	00c00044 	movi	r3,1
    c690:	d8012585 	stb	zero,1174(sp)
    c694:	003c4506 	br	b7ac <___vfprintf_internal_r+0x5e4>
    c698:	8080100c 	andi	r2,r16,64
    c69c:	10010526 	beq	r2,zero,cab4 <___vfprintf_internal_r+0x18ec>
    c6a0:	d9012d17 	ldw	r4,1204(sp)
    c6a4:	002d883a 	mov	r22,zero
    c6a8:	0007883a 	mov	r3,zero
    c6ac:	25c0000b 	ldhu	r23,0(r4)
    c6b0:	21000104 	addi	r4,r4,4
    c6b4:	d9012d15 	stw	r4,1204(sp)
    c6b8:	b805883a 	mov	r2,r23
    c6bc:	d8012585 	stb	zero,1174(sp)
    c6c0:	003c3a06 	br	b7ac <___vfprintf_internal_r+0x5e4>
    c6c4:	d8812d17 	ldw	r2,1204(sp)
    c6c8:	15800017 	ldw	r22,0(r2)
    c6cc:	15000117 	ldw	r20,4(r2)
    c6d0:	10800204 	addi	r2,r2,8
    c6d4:	d8812d15 	stw	r2,1204(sp)
    c6d8:	dd813315 	stw	r22,1228(sp)
    c6dc:	dd013415 	stw	r20,1232(sp)
    c6e0:	003c5906 	br	b848 <___vfprintf_internal_r+0x680>
    c6e4:	00c00084 	movi	r3,2
    c6e8:	d8012585 	stb	zero,1174(sp)
    c6ec:	003c2f06 	br	b7ac <___vfprintf_internal_r+0x5e4>
    c6f0:	ac800007 	ldb	r18,0(r21)
    c6f4:	003b1006 	br	b338 <___vfprintf_internal_r+0x170>
    c6f8:	8080040c 	andi	r2,r16,16
    c6fc:	1000091e 	bne	r2,zero,c724 <___vfprintf_internal_r+0x155c>
    c700:	8400100c 	andi	r16,r16,64
    c704:	80000726 	beq	r16,zero,c724 <___vfprintf_internal_r+0x155c>
    c708:	d8c12d17 	ldw	r3,1204(sp)
    c70c:	d9012c17 	ldw	r4,1200(sp)
    c710:	18800017 	ldw	r2,0(r3)
    c714:	18c00104 	addi	r3,r3,4
    c718:	d8c12d15 	stw	r3,1204(sp)
    c71c:	1100000d 	sth	r4,0(r2)
    c720:	003adf06 	br	b2a0 <___vfprintf_internal_r+0xd8>
    c724:	d8c12d17 	ldw	r3,1204(sp)
    c728:	d9012c17 	ldw	r4,1200(sp)
    c72c:	18800017 	ldw	r2,0(r3)
    c730:	18c00104 	addi	r3,r3,4
    c734:	d8c12d15 	stw	r3,1204(sp)
    c738:	11000015 	stw	r4,0(r2)
    c73c:	003ad806 	br	b2a0 <___vfprintf_internal_r+0xd8>
    c740:	8080100c 	andi	r2,r16,64
    c744:	1000c526 	beq	r2,zero,ca5c <___vfprintf_internal_r+0x1894>
    c748:	d8812d17 	ldw	r2,1204(sp)
    c74c:	15c0000f 	ldh	r23,0(r2)
    c750:	10800104 	addi	r2,r2,4
    c754:	d8812d15 	stw	r2,1204(sp)
    c758:	b82dd7fa 	srai	r22,r23,31
    c75c:	b005883a 	mov	r2,r22
    c760:	003c0906 	br	b788 <___vfprintf_internal_r+0x5c0>
    c764:	4c800115 	stw	r18,4(r9)
    c768:	9211883a 	add	r8,r18,r8
    c76c:	18c00044 	addi	r3,r3,1
    c770:	da011d15 	stw	r8,1140(sp)
    c774:	d8c11c15 	stw	r3,1136(sp)
    c778:	008001c4 	movi	r2,7
    c77c:	10c14016 	blt	r2,r3,cc80 <___vfprintf_internal_r+0x1ab8>
    c780:	4a400204 	addi	r9,r9,8
    c784:	d8813717 	ldw	r2,1244(sp)
    c788:	9ca7883a 	add	r19,r19,r18
    c78c:	48800015 	stw	r2,0(r9)
    c790:	00800044 	movi	r2,1
    c794:	48800115 	stw	r2,4(r9)
    c798:	4091883a 	add	r8,r8,r2
    c79c:	1887883a 	add	r3,r3,r2
    c7a0:	da011d15 	stw	r8,1140(sp)
    c7a4:	d8c11c15 	stw	r3,1136(sp)
    c7a8:	008001c4 	movi	r2,7
    c7ac:	10c12c16 	blt	r2,r3,cc60 <___vfprintf_internal_r+0x1a98>
    c7b0:	4a400204 	addi	r9,r9,8
    c7b4:	d9013217 	ldw	r4,1224(sp)
    c7b8:	da011d17 	ldw	r8,1140(sp)
    c7bc:	d8c11c17 	ldw	r3,1136(sp)
    c7c0:	24a5c83a 	sub	r18,r4,r18
    c7c4:	4cc00015 	stw	r19,0(r9)
    c7c8:	003fa506 	br	c660 <___vfprintf_internal_r+0x1498>
    c7cc:	04c001f4 	movhi	r19,7
    c7d0:	9cd10d04 	addi	r19,r19,17460
    c7d4:	003c2e06 	br	b890 <___vfprintf_internal_r+0x6c8>
    c7d8:	d9412917 	ldw	r5,1188(sp)
    c7dc:	8809883a 	mov	r4,r17
    c7e0:	d9811b04 	addi	r6,sp,1132
    c7e4:	000b1940 	call	b194 <__sprint_r>
    c7e8:	103bbd1e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c7ec:	da011d17 	ldw	r8,1140(sp)
    c7f0:	da400404 	addi	r9,sp,16
    c7f4:	003df606 	br	bfd0 <___vfprintf_internal_r+0xe08>
    c7f8:	008001f4 	movhi	r2,7
    c7fc:	10911c04 	addi	r2,r2,17520
    c800:	48800015 	stw	r2,0(r9)
    c804:	00800044 	movi	r2,1
    c808:	48800115 	stw	r2,4(r9)
    c80c:	4091883a 	add	r8,r8,r2
    c810:	1887883a 	add	r3,r3,r2
    c814:	da011d15 	stw	r8,1140(sp)
    c818:	d8c11c15 	stw	r3,1136(sp)
    c81c:	008001c4 	movi	r2,7
    c820:	10c0bc16 	blt	r2,r3,cb14 <___vfprintf_internal_r+0x194c>
    c824:	4a400204 	addi	r9,r9,8
    c828:	9000041e 	bne	r18,zero,c83c <___vfprintf_internal_r+0x1674>
    c82c:	d8c13217 	ldw	r3,1224(sp)
    c830:	1800021e 	bne	r3,zero,c83c <___vfprintf_internal_r+0x1674>
    c834:	8080004c 	andi	r2,r16,1
    c838:	103d5226 	beq	r2,zero,bd84 <___vfprintf_internal_r+0xbbc>
    c83c:	d8c11c17 	ldw	r3,1136(sp)
    c840:	d9013717 	ldw	r4,1244(sp)
    c844:	00800044 	movi	r2,1
    c848:	48800115 	stw	r2,4(r9)
    c84c:	49000015 	stw	r4,0(r9)
    c850:	4091883a 	add	r8,r8,r2
    c854:	1887883a 	add	r3,r3,r2
    c858:	da011d15 	stw	r8,1140(sp)
    c85c:	d8c11c15 	stw	r3,1136(sp)
    c860:	008001c4 	movi	r2,7
    c864:	10c14516 	blt	r2,r3,cd7c <___vfprintf_internal_r+0x1bb4>
    c868:	4a400204 	addi	r9,r9,8
    c86c:	04a5c83a 	sub	r18,zero,r18
    c870:	0480d70e 	bge	zero,r18,cbd0 <___vfprintf_internal_r+0x1a08>
    c874:	05800404 	movi	r22,16
    c878:	050001f4 	movhi	r20,7
    c87c:	a5112084 	addi	r20,r20,17538
    c880:	b480db0e 	bge	r22,r18,cbf0 <___vfprintf_internal_r+0x1a28>
    c884:	05c001c4 	movi	r23,7
    c888:	df012917 	ldw	fp,1188(sp)
    c88c:	00000306 	br	c89c <___vfprintf_internal_r+0x16d4>
    c890:	4a400204 	addi	r9,r9,8
    c894:	94bffc04 	addi	r18,r18,-16
    c898:	b480d50e 	bge	r22,r18,cbf0 <___vfprintf_internal_r+0x1a28>
    c89c:	4d000015 	stw	r20,0(r9)
    c8a0:	4d800115 	stw	r22,4(r9)
    c8a4:	42000404 	addi	r8,r8,16
    c8a8:	18c00044 	addi	r3,r3,1
    c8ac:	da011d15 	stw	r8,1140(sp)
    c8b0:	d8c11c15 	stw	r3,1136(sp)
    c8b4:	b8fff60e 	bge	r23,r3,c890 <___vfprintf_internal_r+0x16c8>
    c8b8:	8809883a 	mov	r4,r17
    c8bc:	e00b883a 	mov	r5,fp
    c8c0:	d9811b04 	addi	r6,sp,1132
    c8c4:	000b1940 	call	b194 <__sprint_r>
    c8c8:	103b851e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    c8cc:	da011d17 	ldw	r8,1140(sp)
    c8d0:	d8c11c17 	ldw	r3,1136(sp)
    c8d4:	da400404 	addi	r9,sp,16
    c8d8:	003fee06 	br	c894 <___vfprintf_internal_r+0x16cc>
    c8dc:	da413c15 	stw	r9,1264(sp)
    c8e0:	00091e40 	call	91e4 <__isnand>
    c8e4:	da413c17 	ldw	r9,1264(sp)
    c8e8:	10007e1e 	bne	r2,zero,cae4 <___vfprintf_internal_r+0x191c>
    c8ec:	00bfffc4 	movi	r2,-1
    c8f0:	e0816a26 	beq	fp,r2,ce9c <___vfprintf_internal_r+0x1cd4>
    c8f4:	008019c4 	movi	r2,103
    c8f8:	90816526 	beq	r18,r2,ce90 <___vfprintf_internal_r+0x1cc8>
    c8fc:	008011c4 	movi	r2,71
    c900:	90816326 	beq	r18,r2,ce90 <___vfprintf_internal_r+0x1cc8>
    c904:	80c04014 	ori	r3,r16,256
    c908:	d8c12a15 	stw	r3,1192(sp)
    c90c:	a0016516 	blt	r20,zero,cea4 <___vfprintf_internal_r+0x1cdc>
    c910:	d8012f05 	stb	zero,1212(sp)
    c914:	00801984 	movi	r2,102
    c918:	9080f226 	beq	r18,r2,cce4 <___vfprintf_internal_r+0x1b1c>
    c91c:	00801184 	movi	r2,70
    c920:	9080f026 	beq	r18,r2,cce4 <___vfprintf_internal_r+0x1b1c>
    c924:	00801944 	movi	r2,101
    c928:	90818d26 	beq	r18,r2,cf60 <___vfprintf_internal_r+0x1d98>
    c92c:	00801144 	movi	r2,69
    c930:	90818b26 	beq	r18,r2,cf60 <___vfprintf_internal_r+0x1d98>
    c934:	e02f883a 	mov	r23,fp
    c938:	d8812404 	addi	r2,sp,1168
    c93c:	d8800115 	stw	r2,4(sp)
    c940:	d8812304 	addi	r2,sp,1164
    c944:	d8800215 	stw	r2,8(sp)
    c948:	d8812204 	addi	r2,sp,1160
    c94c:	ddc00015 	stw	r23,0(sp)
    c950:	d8800315 	stw	r2,12(sp)
    c954:	8809883a 	mov	r4,r17
    c958:	b00b883a 	mov	r5,r22
    c95c:	a00d883a 	mov	r6,r20
    c960:	01c00084 	movi	r7,2
    c964:	da413c15 	stw	r9,1264(sp)
    c968:	000d5040 	call	d504 <_dtoa_r>
    c96c:	1027883a 	mov	r19,r2
    c970:	008019c4 	movi	r2,103
    c974:	da413c17 	ldw	r9,1264(sp)
    c978:	9081951e 	bne	r18,r2,cfd0 <___vfprintf_internal_r+0x1e08>
    c97c:	8080004c 	andi	r2,r16,1
    c980:	10017926 	beq	r2,zero,cf68 <___vfprintf_internal_r+0x1da0>
    c984:	00801184 	movi	r2,70
    c988:	9dc7883a 	add	r3,r19,r23
    c98c:	9080e626 	beq	r18,r2,cd28 <___vfprintf_internal_r+0x1b60>
    c990:	b009883a 	mov	r4,r22
    c994:	a00b883a 	mov	r5,r20
    c998:	000d883a 	mov	r6,zero
    c99c:	000f883a 	mov	r7,zero
    c9a0:	d8c13b15 	stw	r3,1260(sp)
    c9a4:	da413c15 	stw	r9,1264(sp)
    c9a8:	0012bf00 	call	12bf0 <__eqdf2>
    c9ac:	d8c13b17 	ldw	r3,1260(sp)
    c9b0:	da413c17 	ldw	r9,1264(sp)
    c9b4:	10000726 	beq	r2,zero,c9d4 <___vfprintf_internal_r+0x180c>
    c9b8:	d8812217 	ldw	r2,1160(sp)
    c9bc:	10c18a2e 	bgeu	r2,r3,cfe8 <___vfprintf_internal_r+0x1e20>
    c9c0:	01000c04 	movi	r4,48
    c9c4:	11000005 	stb	r4,0(r2)
    c9c8:	10800044 	addi	r2,r2,1
    c9cc:	d8812215 	stw	r2,1160(sp)
    c9d0:	10fffc1e 	bne	r2,r3,c9c4 <___vfprintf_internal_r+0x17fc>
    c9d4:	1cc7c83a 	sub	r3,r3,r19
    c9d8:	d8c13215 	stw	r3,1224(sp)
    c9dc:	008019c4 	movi	r2,103
    c9e0:	9080fa26 	beq	r18,r2,cdcc <___vfprintf_internal_r+0x1c04>
    c9e4:	008011c4 	movi	r2,71
    c9e8:	9080f826 	beq	r18,r2,cdcc <___vfprintf_internal_r+0x1c04>
    c9ec:	00801984 	movi	r2,102
    c9f0:	90818e1e 	bne	r18,r2,d02c <___vfprintf_internal_r+0x1e64>
    c9f4:	d8812417 	ldw	r2,1168(sp)
    c9f8:	d8812b15 	stw	r2,1196(sp)
    c9fc:	00817c0e 	bge	zero,r2,cff0 <___vfprintf_internal_r+0x1e28>
    ca00:	e000021e 	bne	fp,zero,ca0c <___vfprintf_internal_r+0x1844>
    ca04:	8400004c 	andi	r16,r16,1
    ca08:	80000426 	beq	r16,zero,ca1c <___vfprintf_internal_r+0x1854>
    ca0c:	d8812b17 	ldw	r2,1196(sp)
    ca10:	e2000044 	addi	r8,fp,1
    ca14:	1205883a 	add	r2,r2,r8
    ca18:	d8812b15 	stw	r2,1196(sp)
    ca1c:	d8812815 	stw	r2,1184(sp)
    ca20:	10010b16 	blt	r2,zero,ce50 <___vfprintf_internal_r+0x1c88>
    ca24:	ddc12f07 	ldb	r23,1212(sp)
    ca28:	b800e426 	beq	r23,zero,cdbc <___vfprintf_internal_r+0x1bf4>
    ca2c:	00800b44 	movi	r2,45
    ca30:	d8812585 	stb	r2,1174(sp)
    ca34:	dc012a17 	ldw	r16,1192(sp)
    ca38:	d8013115 	stw	zero,1220(sp)
    ca3c:	003b7306 	br	b80c <___vfprintf_internal_r+0x644>
    ca40:	d8812b17 	ldw	r2,1196(sp)
    ca44:	d8812815 	stw	r2,1184(sp)
    ca48:	10005716 	blt	r2,zero,cba8 <___vfprintf_internal_r+0x19e0>
    ca4c:	d8812583 	ldbu	r2,1174(sp)
    ca50:	ddc12d15 	stw	r23,1204(sp)
    ca54:	d8013115 	stw	zero,1220(sp)
    ca58:	003b6806 	br	b7fc <___vfprintf_internal_r+0x634>
    ca5c:	d8c12d17 	ldw	r3,1204(sp)
    ca60:	1dc00017 	ldw	r23,0(r3)
    ca64:	18c00104 	addi	r3,r3,4
    ca68:	d8c12d15 	stw	r3,1204(sp)
    ca6c:	b82dd7fa 	srai	r22,r23,31
    ca70:	b005883a 	mov	r2,r22
    ca74:	003b4406 	br	b788 <___vfprintf_internal_r+0x5c0>
    ca78:	d9012d17 	ldw	r4,1204(sp)
    ca7c:	002d883a 	mov	r22,zero
    ca80:	00c00044 	movi	r3,1
    ca84:	25c00017 	ldw	r23,0(r4)
    ca88:	21000104 	addi	r4,r4,4
    ca8c:	d9012d15 	stw	r4,1204(sp)
    ca90:	b805883a 	mov	r2,r23
    ca94:	d8012585 	stb	zero,1174(sp)
    ca98:	003b4406 	br	b7ac <___vfprintf_internal_r+0x5e4>
    ca9c:	d9012d17 	ldw	r4,1204(sp)
    caa0:	002d883a 	mov	r22,zero
    caa4:	25c00017 	ldw	r23,0(r4)
    caa8:	21000104 	addi	r4,r4,4
    caac:	d9012d15 	stw	r4,1204(sp)
    cab0:	003bab06 	br	b960 <___vfprintf_internal_r+0x798>
    cab4:	d8812d17 	ldw	r2,1204(sp)
    cab8:	002d883a 	mov	r22,zero
    cabc:	0007883a 	mov	r3,zero
    cac0:	15c00017 	ldw	r23,0(r2)
    cac4:	10800104 	addi	r2,r2,4
    cac8:	d8812d15 	stw	r2,1204(sp)
    cacc:	d8012585 	stb	zero,1174(sp)
    cad0:	b805883a 	mov	r2,r23
    cad4:	003b3506 	br	b7ac <___vfprintf_internal_r+0x5e4>
    cad8:	00ffffc4 	movi	r3,-1
    cadc:	b82b883a 	mov	r21,r23
    cae0:	003a1606 	br	b33c <___vfprintf_internal_r+0x174>
    cae4:	008011c4 	movi	r2,71
    cae8:	1480b116 	blt	r2,r18,cdb0 <___vfprintf_internal_r+0x1be8>
    caec:	04c001f4 	movhi	r19,7
    caf0:	9cd10e04 	addi	r19,r19,17464
    caf4:	00c000c4 	movi	r3,3
    caf8:	00bfdfc4 	movi	r2,-129
    cafc:	80a0703a 	and	r16,r16,r2
    cb00:	d8c12815 	stw	r3,1184(sp)
    cb04:	d8812583 	ldbu	r2,1174(sp)
    cb08:	d8c12b15 	stw	r3,1196(sp)
    cb0c:	d8013115 	stw	zero,1220(sp)
    cb10:	003b3a06 	br	b7fc <___vfprintf_internal_r+0x634>
    cb14:	d9412917 	ldw	r5,1188(sp)
    cb18:	8809883a 	mov	r4,r17
    cb1c:	d9811b04 	addi	r6,sp,1132
    cb20:	000b1940 	call	b194 <__sprint_r>
    cb24:	103aee1e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    cb28:	dc812417 	ldw	r18,1168(sp)
    cb2c:	da011d17 	ldw	r8,1140(sp)
    cb30:	da400404 	addi	r9,sp,16
    cb34:	003f3c06 	br	c828 <___vfprintf_internal_r+0x1660>
    cb38:	ad400044 	addi	r21,r21,1
    cb3c:	84000814 	ori	r16,r16,32
    cb40:	14800047 	ldb	r18,1(r2)
    cb44:	0039fc06 	br	b338 <___vfprintf_internal_r+0x170>
    cb48:	d9412917 	ldw	r5,1188(sp)
    cb4c:	8809883a 	mov	r4,r17
    cb50:	d9811b04 	addi	r6,sp,1132
    cb54:	000b1940 	call	b194 <__sprint_r>
    cb58:	103ae11e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    cb5c:	da011d17 	ldw	r8,1140(sp)
    cb60:	da400404 	addi	r9,sp,16
    cb64:	003d2b06 	br	c014 <___vfprintf_internal_r+0xe4c>
    cb68:	4d000015 	stw	r20,0(r9)
    cb6c:	4c800115 	stw	r18,4(r9)
    cb70:	4491883a 	add	r8,r8,r18
    cb74:	18c00044 	addi	r3,r3,1
    cb78:	da011d15 	stw	r8,1140(sp)
    cb7c:	d8c11c15 	stw	r3,1136(sp)
    cb80:	008001c4 	movi	r2,7
    cb84:	10fcbd16 	blt	r2,r3,be7c <___vfprintf_internal_r+0xcb4>
    cb88:	4a400204 	addi	r9,r9,8
    cb8c:	003cc206 	br	be98 <___vfprintf_internal_r+0xcd0>
    cb90:	da413c15 	stw	r9,1264(sp)
    cb94:	000b1080 	call	b108 <strlen>
    cb98:	d8812b15 	stw	r2,1196(sp)
    cb9c:	d8812815 	stw	r2,1184(sp)
    cba0:	da413c17 	ldw	r9,1264(sp)
    cba4:	103fa90e 	bge	r2,zero,ca4c <___vfprintf_internal_r+0x1884>
    cba8:	d8012815 	stw	zero,1184(sp)
    cbac:	003fa706 	br	ca4c <___vfprintf_internal_r+0x1884>
    cbb0:	d9412917 	ldw	r5,1188(sp)
    cbb4:	8809883a 	mov	r4,r17
    cbb8:	d9811b04 	addi	r6,sp,1132
    cbbc:	000b1940 	call	b194 <__sprint_r>
    cbc0:	103ac71e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    cbc4:	da011d17 	ldw	r8,1140(sp)
    cbc8:	d8c11c17 	ldw	r3,1136(sp)
    cbcc:	da400404 	addi	r9,sp,16
    cbd0:	d8813217 	ldw	r2,1224(sp)
    cbd4:	4cc00015 	stw	r19,0(r9)
    cbd8:	48800115 	stw	r2,4(r9)
    cbdc:	4091883a 	add	r8,r8,r2
    cbe0:	003c6206 	br	bd6c <___vfprintf_internal_r+0xba4>
    cbe4:	00800b44 	movi	r2,45
    cbe8:	d8812585 	stb	r2,1174(sp)
    cbec:	003b2406 	br	b880 <___vfprintf_internal_r+0x6b8>
    cbf0:	4d000015 	stw	r20,0(r9)
    cbf4:	4c800115 	stw	r18,4(r9)
    cbf8:	4491883a 	add	r8,r8,r18
    cbfc:	18c00044 	addi	r3,r3,1
    cc00:	da011d15 	stw	r8,1140(sp)
    cc04:	d8c11c15 	stw	r3,1136(sp)
    cc08:	008001c4 	movi	r2,7
    cc0c:	10ffe816 	blt	r2,r3,cbb0 <___vfprintf_internal_r+0x19e8>
    cc10:	4a400204 	addi	r9,r9,8
    cc14:	003fee06 	br	cbd0 <___vfprintf_internal_r+0x1a08>
    cc18:	d8c12b15 	stw	r3,1196(sp)
    cc1c:	00800184 	movi	r2,6
    cc20:	10c0062e 	bgeu	r2,r3,cc3c <___vfprintf_internal_r+0x1a74>
    cc24:	d8812b15 	stw	r2,1196(sp)
    cc28:	d8812815 	stw	r2,1184(sp)
    cc2c:	ddc12d15 	stw	r23,1204(sp)
    cc30:	04c001f4 	movhi	r19,7
    cc34:	9cd11a04 	addi	r19,r19,17512
    cc38:	0039ca06 	br	b364 <___vfprintf_internal_r+0x19c>
    cc3c:	d8812b17 	ldw	r2,1196(sp)
    cc40:	d8812815 	stw	r2,1184(sp)
    cc44:	103ff90e 	bge	r2,zero,cc2c <___vfprintf_internal_r+0x1a64>
    cc48:	d8012815 	stw	zero,1184(sp)
    cc4c:	003ff706 	br	cc2c <___vfprintf_internal_r+0x1a64>
    cc50:	00800244 	movi	r2,9
    cc54:	15fdaa36 	bltu	r2,r23,c300 <___vfprintf_internal_r+0x1138>
    cc58:	dd010e04 	addi	r20,sp,1080
    cc5c:	003dc606 	br	c378 <___vfprintf_internal_r+0x11b0>
    cc60:	d9412917 	ldw	r5,1188(sp)
    cc64:	8809883a 	mov	r4,r17
    cc68:	d9811b04 	addi	r6,sp,1132
    cc6c:	000b1940 	call	b194 <__sprint_r>
    cc70:	103a9b1e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    cc74:	dc812417 	ldw	r18,1168(sp)
    cc78:	da400404 	addi	r9,sp,16
    cc7c:	003ecd06 	br	c7b4 <___vfprintf_internal_r+0x15ec>
    cc80:	d9412917 	ldw	r5,1188(sp)
    cc84:	8809883a 	mov	r4,r17
    cc88:	d9811b04 	addi	r6,sp,1132
    cc8c:	000b1940 	call	b194 <__sprint_r>
    cc90:	103a931e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    cc94:	dc812417 	ldw	r18,1168(sp)
    cc98:	da011d17 	ldw	r8,1140(sp)
    cc9c:	d8c11c17 	ldw	r3,1136(sp)
    cca0:	da400404 	addi	r9,sp,16
    cca4:	003eb706 	br	c784 <___vfprintf_internal_r+0x15bc>
    cca8:	d9412917 	ldw	r5,1188(sp)
    ccac:	8809883a 	mov	r4,r17
    ccb0:	d9811b04 	addi	r6,sp,1132
    ccb4:	000b1940 	call	b194 <__sprint_r>
    ccb8:	103a891e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    ccbc:	dc812417 	ldw	r18,1168(sp)
    ccc0:	da011d17 	ldw	r8,1140(sp)
    ccc4:	da400404 	addi	r9,sp,16
    ccc8:	003dc206 	br	c3d4 <___vfprintf_internal_r+0x120c>
    cccc:	df012815 	stw	fp,1184(sp)
    ccd0:	d8812583 	ldbu	r2,1174(sp)
    ccd4:	df012b15 	stw	fp,1196(sp)
    ccd8:	ddc12d15 	stw	r23,1204(sp)
    ccdc:	d8013115 	stw	zero,1220(sp)
    cce0:	003ac606 	br	b7fc <___vfprintf_internal_r+0x634>
    cce4:	d8812404 	addi	r2,sp,1168
    cce8:	d8800115 	stw	r2,4(sp)
    ccec:	d8812304 	addi	r2,sp,1164
    ccf0:	d8800215 	stw	r2,8(sp)
    ccf4:	d8812204 	addi	r2,sp,1160
    ccf8:	df000015 	stw	fp,0(sp)
    ccfc:	d8800315 	stw	r2,12(sp)
    cd00:	8809883a 	mov	r4,r17
    cd04:	b00b883a 	mov	r5,r22
    cd08:	a00d883a 	mov	r6,r20
    cd0c:	01c000c4 	movi	r7,3
    cd10:	da413c15 	stw	r9,1264(sp)
    cd14:	000d5040 	call	d504 <_dtoa_r>
    cd18:	da413c17 	ldw	r9,1264(sp)
    cd1c:	1027883a 	mov	r19,r2
    cd20:	1707883a 	add	r3,r2,fp
    cd24:	e02f883a 	mov	r23,fp
    cd28:	99000007 	ldb	r4,0(r19)
    cd2c:	00800c04 	movi	r2,48
    cd30:	20800326 	beq	r4,r2,cd40 <___vfprintf_internal_r+0x1b78>
    cd34:	da812417 	ldw	r10,1168(sp)
    cd38:	1a87883a 	add	r3,r3,r10
    cd3c:	003f1406 	br	c990 <___vfprintf_internal_r+0x17c8>
    cd40:	b009883a 	mov	r4,r22
    cd44:	a00b883a 	mov	r5,r20
    cd48:	000d883a 	mov	r6,zero
    cd4c:	000f883a 	mov	r7,zero
    cd50:	d8c13b15 	stw	r3,1260(sp)
    cd54:	da413c15 	stw	r9,1264(sp)
    cd58:	0012c4c0 	call	12c4c <__nedf2>
    cd5c:	d8c13b17 	ldw	r3,1260(sp)
    cd60:	da413c17 	ldw	r9,1264(sp)
    cd64:	103ff326 	beq	r2,zero,cd34 <___vfprintf_internal_r+0x1b6c>
    cd68:	00800044 	movi	r2,1
    cd6c:	15d5c83a 	sub	r10,r2,r23
    cd70:	da812415 	stw	r10,1168(sp)
    cd74:	1a87883a 	add	r3,r3,r10
    cd78:	003f0506 	br	c990 <___vfprintf_internal_r+0x17c8>
    cd7c:	d9412917 	ldw	r5,1188(sp)
    cd80:	8809883a 	mov	r4,r17
    cd84:	d9811b04 	addi	r6,sp,1132
    cd88:	000b1940 	call	b194 <__sprint_r>
    cd8c:	103a541e 	bne	r2,zero,b6e0 <___vfprintf_internal_r+0x518>
    cd90:	dc812417 	ldw	r18,1168(sp)
    cd94:	da011d17 	ldw	r8,1140(sp)
    cd98:	d8c11c17 	ldw	r3,1136(sp)
    cd9c:	da400404 	addi	r9,sp,16
    cda0:	003eb206 	br	c86c <___vfprintf_internal_r+0x16a4>
    cda4:	b82b883a 	mov	r21,r23
    cda8:	0007883a 	mov	r3,zero
    cdac:	00396306 	br	b33c <___vfprintf_internal_r+0x174>
    cdb0:	04c001f4 	movhi	r19,7
    cdb4:	9cd10f04 	addi	r19,r19,17468
    cdb8:	003f4e06 	br	caf4 <___vfprintf_internal_r+0x192c>
    cdbc:	d8812583 	ldbu	r2,1174(sp)
    cdc0:	dc012a17 	ldw	r16,1192(sp)
    cdc4:	d8013115 	stw	zero,1220(sp)
    cdc8:	003a8c06 	br	b7fc <___vfprintf_internal_r+0x634>
    cdcc:	d8812417 	ldw	r2,1168(sp)
    cdd0:	d8812b15 	stw	r2,1196(sp)
    cdd4:	1029883a 	mov	r20,r2
    cdd8:	00bfff44 	movi	r2,-3
    cddc:	a0800116 	blt	r20,r2,cde4 <___vfprintf_internal_r+0x1c1c>
    cde0:	e5001d0e 	bge	fp,r20,ce58 <___vfprintf_internal_r+0x1c90>
    cde4:	94bfff84 	addi	r18,r18,-2
    cde8:	a53fffc4 	addi	r20,r20,-1
    cdec:	dd012415 	stw	r20,1168(sp)
    cdf0:	dc811fc5 	stb	r18,1151(sp)
    cdf4:	a0007216 	blt	r20,zero,cfc0 <___vfprintf_internal_r+0x1df8>
    cdf8:	00800ac4 	movi	r2,43
    cdfc:	d8812005 	stb	r2,1152(sp)
    ce00:	00800244 	movi	r2,9
    ce04:	15003516 	blt	r2,r20,cedc <___vfprintf_internal_r+0x1d14>
    ce08:	00800c04 	movi	r2,48
    ce0c:	a5000c04 	addi	r20,r20,48
    ce10:	d8812045 	stb	r2,1153(sp)
    ce14:	dd012085 	stb	r20,1154(sp)
    ce18:	d8c120c4 	addi	r3,sp,1155
    ce1c:	d8811fc4 	addi	r2,sp,1151
    ce20:	1885c83a 	sub	r2,r3,r2
    ce24:	d8c13217 	ldw	r3,1224(sp)
    ce28:	d8813515 	stw	r2,1236(sp)
    ce2c:	1885883a 	add	r2,r3,r2
    ce30:	d8812b15 	stw	r2,1196(sp)
    ce34:	00800044 	movi	r2,1
    ce38:	10c0580e 	bge	r2,r3,cf9c <___vfprintf_internal_r+0x1dd4>
    ce3c:	d8812b17 	ldw	r2,1196(sp)
    ce40:	10800044 	addi	r2,r2,1
    ce44:	d8812b15 	stw	r2,1196(sp)
    ce48:	d8812815 	stw	r2,1184(sp)
    ce4c:	103ef50e 	bge	r2,zero,ca24 <___vfprintf_internal_r+0x185c>
    ce50:	d8012815 	stw	zero,1184(sp)
    ce54:	003ef306 	br	ca24 <___vfprintf_internal_r+0x185c>
    ce58:	d8812b17 	ldw	r2,1196(sp)
    ce5c:	d8c13217 	ldw	r3,1224(sp)
    ce60:	10c01416 	blt	r2,r3,ceb4 <___vfprintf_internal_r+0x1cec>
    ce64:	8400004c 	andi	r16,r16,1
    ce68:	80000326 	beq	r16,zero,ce78 <___vfprintf_internal_r+0x1cb0>
    ce6c:	d8812b17 	ldw	r2,1196(sp)
    ce70:	10800044 	addi	r2,r2,1
    ce74:	d8812b15 	stw	r2,1196(sp)
    ce78:	d8812815 	stw	r2,1184(sp)
    ce7c:	10001416 	blt	r2,zero,ced0 <___vfprintf_internal_r+0x1d08>
    ce80:	048019c4 	movi	r18,103
    ce84:	003ee706 	br	ca24 <___vfprintf_internal_r+0x185c>
    ce88:	d8012815 	stw	zero,1184(sp)
    ce8c:	003b1a06 	br	baf8 <___vfprintf_internal_r+0x930>
    ce90:	e03e9c1e 	bne	fp,zero,c904 <___vfprintf_internal_r+0x173c>
    ce94:	07000044 	movi	fp,1
    ce98:	003e9a06 	br	c904 <___vfprintf_internal_r+0x173c>
    ce9c:	07000184 	movi	fp,6
    cea0:	003e9806 	br	c904 <___vfprintf_internal_r+0x173c>
    cea4:	00c00b44 	movi	r3,45
    cea8:	a520003c 	xorhi	r20,r20,32768
    ceac:	d8c12f05 	stb	r3,1212(sp)
    ceb0:	003e9806 	br	c914 <___vfprintf_internal_r+0x174c>
    ceb4:	05003f0e 	bge	zero,r20,cfb4 <___vfprintf_internal_r+0x1dec>
    ceb8:	05000044 	movi	r20,1
    cebc:	d8c13217 	ldw	r3,1224(sp)
    cec0:	a0e9883a 	add	r20,r20,r3
    cec4:	dd012b15 	stw	r20,1196(sp)
    cec8:	dd012815 	stw	r20,1184(sp)
    cecc:	a03fec0e 	bge	r20,zero,ce80 <___vfprintf_internal_r+0x1cb8>
    ced0:	d8012815 	stw	zero,1184(sp)
    ced4:	048019c4 	movi	r18,103
    ced8:	003ed206 	br	ca24 <___vfprintf_internal_r+0x185c>
    cedc:	d8c11f84 	addi	r3,sp,1150
    cee0:	102f883a 	mov	r23,r2
    cee4:	4839883a 	mov	fp,r9
    cee8:	a009883a 	mov	r4,r20
    ceec:	01400284 	movi	r5,10
    cef0:	182d883a 	mov	r22,r3
    cef4:	0009d800 	call	9d80 <__modsi3>
    cef8:	10800c04 	addi	r2,r2,48
    cefc:	a009883a 	mov	r4,r20
    cf00:	b0800005 	stb	r2,0(r22)
    cf04:	01400284 	movi	r5,10
    cf08:	0009d300 	call	9d30 <__divsi3>
    cf0c:	1029883a 	mov	r20,r2
    cf10:	b0ffffc4 	addi	r3,r22,-1
    cf14:	b8bff416 	blt	r23,r2,cee8 <___vfprintf_internal_r+0x1d20>
    cf18:	11400c04 	addi	r5,r2,48
    cf1c:	b17fffc5 	stb	r5,-1(r22)
    cf20:	d8811fc4 	addi	r2,sp,1151
    cf24:	e013883a 	mov	r9,fp
    cf28:	18803e2e 	bgeu	r3,r2,d024 <___vfprintf_internal_r+0x1e5c>
    cf2c:	b007883a 	mov	r3,r22
    cf30:	d9012044 	addi	r4,sp,1153
    cf34:	00000206 	br	cf40 <___vfprintf_internal_r+0x1d78>
    cf38:	19400003 	ldbu	r5,0(r3)
    cf3c:	18c00044 	addi	r3,r3,1
    cf40:	21400005 	stb	r5,0(r4)
    cf44:	21000044 	addi	r4,r4,1
    cf48:	10fffb1e 	bne	r2,r3,cf38 <___vfprintf_internal_r+0x1d70>
    cf4c:	d8c12004 	addi	r3,sp,1152
    cf50:	1d87c83a 	sub	r3,r3,r22
    cf54:	d9012044 	addi	r4,sp,1153
    cf58:	20c7883a 	add	r3,r4,r3
    cf5c:	003fb006 	br	ce20 <___vfprintf_internal_r+0x1c58>
    cf60:	e5c00044 	addi	r23,fp,1
    cf64:	003e7406 	br	c938 <___vfprintf_internal_r+0x1770>
    cf68:	d8c12217 	ldw	r3,1160(sp)
    cf6c:	003e9906 	br	c9d4 <___vfprintf_internal_r+0x180c>
    cf70:	d9012d17 	ldw	r4,1204(sp)
    cf74:	ac800043 	ldbu	r18,1(r21)
    cf78:	b82b883a 	mov	r21,r23
    cf7c:	20c00017 	ldw	r3,0(r4)
    cf80:	20800104 	addi	r2,r4,4
    cf84:	d8812d15 	stw	r2,1204(sp)
    cf88:	18002116 	blt	r3,zero,d010 <___vfprintf_internal_r+0x1e48>
    cf8c:	94803fcc 	andi	r18,r18,255
    cf90:	9480201c 	xori	r18,r18,128
    cf94:	94bfe004 	addi	r18,r18,-128
    cf98:	0038e706 	br	b338 <___vfprintf_internal_r+0x170>
    cf9c:	80a0703a 	and	r16,r16,r2
    cfa0:	803fa61e 	bne	r16,zero,ce3c <___vfprintf_internal_r+0x1c74>
    cfa4:	d8812b17 	ldw	r2,1196(sp)
    cfa8:	d8812815 	stw	r2,1184(sp)
    cfac:	103e9d0e 	bge	r2,zero,ca24 <___vfprintf_internal_r+0x185c>
    cfb0:	003fa706 	br	ce50 <___vfprintf_internal_r+0x1c88>
    cfb4:	00800084 	movi	r2,2
    cfb8:	1529c83a 	sub	r20,r2,r20
    cfbc:	003fbf06 	br	cebc <___vfprintf_internal_r+0x1cf4>
    cfc0:	00800b44 	movi	r2,45
    cfc4:	0529c83a 	sub	r20,zero,r20
    cfc8:	d8812005 	stb	r2,1152(sp)
    cfcc:	003f8c06 	br	ce00 <___vfprintf_internal_r+0x1c38>
    cfd0:	008011c4 	movi	r2,71
    cfd4:	90be6926 	beq	r18,r2,c97c <___vfprintf_internal_r+0x17b4>
    cfd8:	003e6a06 	br	c984 <___vfprintf_internal_r+0x17bc>
    cfdc:	00bfffc4 	movi	r2,-1
    cfe0:	d8812c15 	stw	r2,1200(sp)
    cfe4:	0039ad06 	br	b69c <___vfprintf_internal_r+0x4d4>
    cfe8:	1007883a 	mov	r3,r2
    cfec:	003e7906 	br	c9d4 <___vfprintf_internal_r+0x180c>
    cff0:	e000021e 	bne	fp,zero,cffc <___vfprintf_internal_r+0x1e34>
    cff4:	8400004c 	andi	r16,r16,1
    cff8:	80000e26 	beq	r16,zero,d034 <___vfprintf_internal_r+0x1e6c>
    cffc:	e7000084 	addi	fp,fp,2
    d000:	df012b15 	stw	fp,1196(sp)
    d004:	df012815 	stw	fp,1184(sp)
    d008:	e03e860e 	bge	fp,zero,ca24 <___vfprintf_internal_r+0x185c>
    d00c:	003f9006 	br	ce50 <___vfprintf_internal_r+0x1c88>
    d010:	94803fcc 	andi	r18,r18,255
    d014:	9480201c 	xori	r18,r18,128
    d018:	00ffffc4 	movi	r3,-1
    d01c:	94bfe004 	addi	r18,r18,-128
    d020:	0038c506 	br	b338 <___vfprintf_internal_r+0x170>
    d024:	d8c12044 	addi	r3,sp,1153
    d028:	003f7d06 	br	ce20 <___vfprintf_internal_r+0x1c58>
    d02c:	dd012417 	ldw	r20,1168(sp)
    d030:	003f6d06 	br	cde8 <___vfprintf_internal_r+0x1c20>
    d034:	00c00044 	movi	r3,1
    d038:	d8c12815 	stw	r3,1184(sp)
    d03c:	d8c12b15 	stw	r3,1196(sp)
    d040:	003e7806 	br	ca24 <___vfprintf_internal_r+0x185c>

0000d044 <__vfprintf_internal>:
    d044:	008001f4 	movhi	r2,7
    d048:	109f0704 	addi	r2,r2,31772
    d04c:	2007883a 	mov	r3,r4
    d050:	11000017 	ldw	r4,0(r2)
    d054:	2805883a 	mov	r2,r5
    d058:	300f883a 	mov	r7,r6
    d05c:	180b883a 	mov	r5,r3
    d060:	100d883a 	mov	r6,r2
    d064:	000b1c81 	jmpi	b1c8 <___vfprintf_internal_r>

0000d068 <_vsnprintf_r>:
    d068:	deffe604 	addi	sp,sp,-104
    d06c:	dc401815 	stw	r17,96(sp)
    d070:	dc001715 	stw	r16,92(sp)
    d074:	dfc01915 	stw	ra,100(sp)
    d078:	3021883a 	mov	r16,r6
    d07c:	2023883a 	mov	r17,r4
    d080:	30002016 	blt	r6,zero,d104 <_vsnprintf_r+0x9c>
    d084:	00808204 	movi	r2,520
    d088:	d880030d 	sth	r2,12(sp)
    d08c:	d9400015 	stw	r5,0(sp)
    d090:	d9400415 	stw	r5,16(sp)
    d094:	3000161e 	bne	r6,zero,d0f0 <_vsnprintf_r+0x88>
    d098:	0005883a 	mov	r2,zero
    d09c:	00c001f4 	movhi	r3,7
    d0a0:	18df0704 	addi	r3,r3,31772
    d0a4:	19000017 	ldw	r4,0(r3)
    d0a8:	380d883a 	mov	r6,r7
    d0ac:	d9c01a17 	ldw	r7,104(sp)
    d0b0:	d8800215 	stw	r2,8(sp)
    d0b4:	d8800515 	stw	r2,20(sp)
    d0b8:	d80b883a 	mov	r5,sp
    d0bc:	00bfffc4 	movi	r2,-1
    d0c0:	d880038d 	sth	r2,14(sp)
    d0c4:	000b1c80 	call	b1c8 <___vfprintf_internal_r>
    d0c8:	00ffffc4 	movi	r3,-1
    d0cc:	10c00a16 	blt	r2,r3,d0f8 <_vsnprintf_r+0x90>
    d0d0:	80000226 	beq	r16,zero,d0dc <_vsnprintf_r+0x74>
    d0d4:	d8c00017 	ldw	r3,0(sp)
    d0d8:	18000005 	stb	zero,0(r3)
    d0dc:	dfc01917 	ldw	ra,100(sp)
    d0e0:	dc401817 	ldw	r17,96(sp)
    d0e4:	dc001717 	ldw	r16,92(sp)
    d0e8:	dec01a04 	addi	sp,sp,104
    d0ec:	f800283a 	ret
    d0f0:	30bfffc4 	addi	r2,r6,-1
    d0f4:	003fe906 	br	d09c <_vsnprintf_r+0x34>
    d0f8:	00c022c4 	movi	r3,139
    d0fc:	88c00015 	stw	r3,0(r17)
    d100:	003ff306 	br	d0d0 <_vsnprintf_r+0x68>
    d104:	008022c4 	movi	r2,139
    d108:	20800015 	stw	r2,0(r4)
    d10c:	00bfffc4 	movi	r2,-1
    d110:	003ff206 	br	d0dc <_vsnprintf_r+0x74>

0000d114 <vsnprintf>:
    d114:	008001f4 	movhi	r2,7
    d118:	109f0704 	addi	r2,r2,31772
    d11c:	2011883a 	mov	r8,r4
    d120:	11000017 	ldw	r4,0(r2)
    d124:	defffe04 	addi	sp,sp,-8
    d128:	2807883a 	mov	r3,r5
    d12c:	3005883a 	mov	r2,r6
    d130:	d9c00015 	stw	r7,0(sp)
    d134:	400b883a 	mov	r5,r8
    d138:	180d883a 	mov	r6,r3
    d13c:	100f883a 	mov	r7,r2
    d140:	dfc00115 	stw	ra,4(sp)
    d144:	000d0680 	call	d068 <_vsnprintf_r>
    d148:	dfc00117 	ldw	ra,4(sp)
    d14c:	dec00204 	addi	sp,sp,8
    d150:	f800283a 	ret

0000d154 <__swsetup_r>:
    d154:	008001f4 	movhi	r2,7
    d158:	109f0704 	addi	r2,r2,31772
    d15c:	10800017 	ldw	r2,0(r2)
    d160:	defffd04 	addi	sp,sp,-12
    d164:	dc400115 	stw	r17,4(sp)
    d168:	dc000015 	stw	r16,0(sp)
    d16c:	dfc00215 	stw	ra,8(sp)
    d170:	2023883a 	mov	r17,r4
    d174:	2821883a 	mov	r16,r5
    d178:	10000226 	beq	r2,zero,d184 <__swsetup_r+0x30>
    d17c:	10c00e17 	ldw	r3,56(r2)
    d180:	18003d26 	beq	r3,zero,d278 <__swsetup_r+0x124>
    d184:	8080030b 	ldhu	r2,12(r16)
    d188:	10c0020c 	andi	r3,r2,8
    d18c:	18ffffcc 	andi	r3,r3,65535
    d190:	18e0001c 	xori	r3,r3,32768
    d194:	18e00004 	addi	r3,r3,-32768
    d198:	18001226 	beq	r3,zero,d1e4 <__swsetup_r+0x90>
    d19c:	80c00417 	ldw	r3,16(r16)
    d1a0:	18001f26 	beq	r3,zero,d220 <__swsetup_r+0xcc>
    d1a4:	1100004c 	andi	r4,r2,1
    d1a8:	2000261e 	bne	r4,zero,d244 <__swsetup_r+0xf0>
    d1ac:	1080008c 	andi	r2,r2,2
    d1b0:	10bfffcc 	andi	r2,r2,65535
    d1b4:	10a0001c 	xori	r2,r2,32768
    d1b8:	10a00004 	addi	r2,r2,-32768
    d1bc:	1000311e 	bne	r2,zero,d284 <__swsetup_r+0x130>
    d1c0:	80800517 	ldw	r2,20(r16)
    d1c4:	80800215 	stw	r2,8(r16)
    d1c8:	18002326 	beq	r3,zero,d258 <__swsetup_r+0x104>
    d1cc:	0005883a 	mov	r2,zero
    d1d0:	dfc00217 	ldw	ra,8(sp)
    d1d4:	dc400117 	ldw	r17,4(sp)
    d1d8:	dc000017 	ldw	r16,0(sp)
    d1dc:	dec00304 	addi	sp,sp,12
    d1e0:	f800283a 	ret
    d1e4:	10c0040c 	andi	r3,r2,16
    d1e8:	18ffffcc 	andi	r3,r3,65535
    d1ec:	18e0001c 	xori	r3,r3,32768
    d1f0:	18e00004 	addi	r3,r3,-32768
    d1f4:	18001e26 	beq	r3,zero,d270 <__swsetup_r+0x11c>
    d1f8:	10c0010c 	andi	r3,r2,4
    d1fc:	18ffffcc 	andi	r3,r3,65535
    d200:	18e0001c 	xori	r3,r3,32768
    d204:	18e00004 	addi	r3,r3,-32768
    d208:	1800211e 	bne	r3,zero,d290 <__swsetup_r+0x13c>
    d20c:	80c00417 	ldw	r3,16(r16)
    d210:	11400214 	ori	r5,r2,8
    d214:	8140030d 	sth	r5,12(r16)
    d218:	2805883a 	mov	r2,r5
    d21c:	183fe11e 	bne	r3,zero,d1a4 <__swsetup_r+0x50>
    d220:	1140a00c 	andi	r5,r2,640
    d224:	01008004 	movi	r4,512
    d228:	293fde26 	beq	r5,r4,d1a4 <__swsetup_r+0x50>
    d22c:	8809883a 	mov	r4,r17
    d230:	800b883a 	mov	r5,r16
    d234:	000fb500 	call	fb50 <__smakebuf_r>
    d238:	8080030b 	ldhu	r2,12(r16)
    d23c:	80c00417 	ldw	r3,16(r16)
    d240:	003fd806 	br	d1a4 <__swsetup_r+0x50>
    d244:	80800517 	ldw	r2,20(r16)
    d248:	80000215 	stw	zero,8(r16)
    d24c:	0085c83a 	sub	r2,zero,r2
    d250:	80800615 	stw	r2,24(r16)
    d254:	183fdd1e 	bne	r3,zero,d1cc <__swsetup_r+0x78>
    d258:	8080030b 	ldhu	r2,12(r16)
    d25c:	1080200c 	andi	r2,r2,128
    d260:	10bfffcc 	andi	r2,r2,65535
    d264:	10a0001c 	xori	r2,r2,32768
    d268:	10a00004 	addi	r2,r2,-32768
    d26c:	103fd826 	beq	r2,zero,d1d0 <__swsetup_r+0x7c>
    d270:	00bfffc4 	movi	r2,-1
    d274:	003fd606 	br	d1d0 <__swsetup_r+0x7c>
    d278:	1009883a 	mov	r4,r2
    d27c:	000eddc0 	call	eddc <__sinit>
    d280:	003fc006 	br	d184 <__swsetup_r+0x30>
    d284:	0005883a 	mov	r2,zero
    d288:	80800215 	stw	r2,8(r16)
    d28c:	003fce06 	br	d1c8 <__swsetup_r+0x74>
    d290:	81400c17 	ldw	r5,48(r16)
    d294:	28000626 	beq	r5,zero,d2b0 <__swsetup_r+0x15c>
    d298:	80c01004 	addi	r3,r16,64
    d29c:	28c00326 	beq	r5,r3,d2ac <__swsetup_r+0x158>
    d2a0:	8809883a 	mov	r4,r17
    d2a4:	000f1600 	call	f160 <_free_r>
    d2a8:	8080030b 	ldhu	r2,12(r16)
    d2ac:	80000c15 	stw	zero,48(r16)
    d2b0:	80c00417 	ldw	r3,16(r16)
    d2b4:	013ff6c4 	movi	r4,-37
    d2b8:	2084703a 	and	r2,r4,r2
    d2bc:	80000115 	stw	zero,4(r16)
    d2c0:	80c00015 	stw	r3,0(r16)
    d2c4:	003fd206 	br	d210 <__swsetup_r+0xbc>

0000d2c8 <quorem>:
    d2c8:	defff204 	addi	sp,sp,-56
    d2cc:	dd000815 	stw	r20,32(sp)
    d2d0:	20800417 	ldw	r2,16(r4)
    d2d4:	2d000417 	ldw	r20,16(r5)
    d2d8:	dcc00715 	stw	r19,28(sp)
    d2dc:	dfc00d15 	stw	ra,52(sp)
    d2e0:	df000c15 	stw	fp,48(sp)
    d2e4:	ddc00b15 	stw	r23,44(sp)
    d2e8:	dd800a15 	stw	r22,40(sp)
    d2ec:	dd400915 	stw	r21,36(sp)
    d2f0:	dc800615 	stw	r18,24(sp)
    d2f4:	dc400515 	stw	r17,20(sp)
    d2f8:	dc000415 	stw	r16,16(sp)
    d2fc:	d9400015 	stw	r5,0(sp)
    d300:	2027883a 	mov	r19,r4
    d304:	15007d16 	blt	r2,r20,d4fc <quorem+0x234>
    d308:	a0800104 	addi	r2,r20,4
    d30c:	1085883a 	add	r2,r2,r2
    d310:	1085883a 	add	r2,r2,r2
    d314:	28ad883a 	add	r22,r5,r2
    d318:	2085883a 	add	r2,r4,r2
    d31c:	10800017 	ldw	r2,0(r2)
    d320:	b1400017 	ldw	r5,0(r22)
    d324:	a53fffc4 	addi	r20,r20,-1
    d328:	1009883a 	mov	r4,r2
    d32c:	29400044 	addi	r5,r5,1
    d330:	d8800115 	stw	r2,4(sp)
    d334:	0009ddc0 	call	9ddc <__udivsi3>
    d338:	1025883a 	mov	r18,r2
    d33c:	d8800017 	ldw	r2,0(sp)
    d340:	9f000504 	addi	fp,r19,20
    d344:	14000504 	addi	r16,r2,20
    d348:	90003626 	beq	r18,zero,d424 <quorem+0x15c>
    d34c:	802b883a 	mov	r21,r16
    d350:	e023883a 	mov	r17,fp
    d354:	0007883a 	mov	r3,zero
    d358:	002f883a 	mov	r23,zero
    d35c:	a9800017 	ldw	r6,0(r21)
    d360:	900b883a 	mov	r5,r18
    d364:	d8c00315 	stw	r3,12(sp)
    d368:	313fffcc 	andi	r4,r6,65535
    d36c:	d9800215 	stw	r6,8(sp)
    d370:	0009dec0 	call	9dec <__mulsi3>
    d374:	d9800217 	ldw	r6,8(sp)
    d378:	d8c00317 	ldw	r3,12(sp)
    d37c:	900b883a 	mov	r5,r18
    d380:	3008d43a 	srli	r4,r6,16
    d384:	1887883a 	add	r3,r3,r2
    d388:	d8c00315 	stw	r3,12(sp)
    d38c:	0009dec0 	call	9dec <__mulsi3>
    d390:	89400017 	ldw	r5,0(r17)
    d394:	d8c00317 	ldw	r3,12(sp)
    d398:	ad400104 	addi	r21,r21,4
    d39c:	293fffcc 	andi	r4,r5,65535
    d3a0:	1810d43a 	srli	r8,r3,16
    d3a4:	25c9883a 	add	r4,r4,r23
    d3a8:	18ffffcc 	andi	r3,r3,65535
    d3ac:	20c9c83a 	sub	r4,r4,r3
    d3b0:	280cd43a 	srli	r6,r5,16
    d3b4:	4085883a 	add	r2,r8,r2
    d3b8:	2007d43a 	srai	r3,r4,16
    d3bc:	117fffcc 	andi	r5,r2,65535
    d3c0:	314bc83a 	sub	r5,r6,r5
    d3c4:	28cb883a 	add	r5,r5,r3
    d3c8:	8940008d 	sth	r5,2(r17)
    d3cc:	8900000d 	sth	r4,0(r17)
    d3d0:	1006d43a 	srli	r3,r2,16
    d3d4:	282fd43a 	srai	r23,r5,16
    d3d8:	8c400104 	addi	r17,r17,4
    d3dc:	b57fdf2e 	bgeu	r22,r21,d35c <quorem+0x94>
    d3e0:	d8c00117 	ldw	r3,4(sp)
    d3e4:	18000f1e 	bne	r3,zero,d424 <quorem+0x15c>
    d3e8:	a0800144 	addi	r2,r20,5
    d3ec:	1085883a 	add	r2,r2,r2
    d3f0:	1085883a 	add	r2,r2,r2
    d3f4:	9887883a 	add	r3,r19,r2
    d3f8:	18bfff04 	addi	r2,r3,-4
    d3fc:	e080082e 	bgeu	fp,r2,d420 <quorem+0x158>
    d400:	18ffff17 	ldw	r3,-4(r3)
    d404:	18000326 	beq	r3,zero,d414 <quorem+0x14c>
    d408:	00000506 	br	d420 <quorem+0x158>
    d40c:	10c00017 	ldw	r3,0(r2)
    d410:	1800031e 	bne	r3,zero,d420 <quorem+0x158>
    d414:	10bfff04 	addi	r2,r2,-4
    d418:	a53fffc4 	addi	r20,r20,-1
    d41c:	e0bffb36 	bltu	fp,r2,d40c <quorem+0x144>
    d420:	9d000415 	stw	r20,16(r19)
    d424:	d9400017 	ldw	r5,0(sp)
    d428:	9809883a 	mov	r4,r19
    d42c:	00108c80 	call	108c8 <__mcmp>
    d430:	10002516 	blt	r2,zero,d4c8 <quorem+0x200>
    d434:	94800044 	addi	r18,r18,1
    d438:	e007883a 	mov	r3,fp
    d43c:	000d883a 	mov	r6,zero
    d440:	18800017 	ldw	r2,0(r3)
    d444:	82000017 	ldw	r8,0(r16)
    d448:	84000104 	addi	r16,r16,4
    d44c:	11ffffcc 	andi	r7,r2,65535
    d450:	413fffcc 	andi	r4,r8,65535
    d454:	398d883a 	add	r6,r7,r6
    d458:	310fc83a 	sub	r7,r6,r4
    d45c:	4010d43a 	srli	r8,r8,16
    d460:	100cd43a 	srli	r6,r2,16
    d464:	3809d43a 	srai	r4,r7,16
    d468:	19c0000d 	sth	r7,0(r3)
    d46c:	320dc83a 	sub	r6,r6,r8
    d470:	310d883a 	add	r6,r6,r4
    d474:	1980008d 	sth	r6,2(r3)
    d478:	300dd43a 	srai	r6,r6,16
    d47c:	18c00104 	addi	r3,r3,4
    d480:	b43fef2e 	bgeu	r22,r16,d440 <quorem+0x178>
    d484:	a0800144 	addi	r2,r20,5
    d488:	1085883a 	add	r2,r2,r2
    d48c:	1085883a 	add	r2,r2,r2
    d490:	9885883a 	add	r2,r19,r2
    d494:	10c00017 	ldw	r3,0(r2)
    d498:	18000b1e 	bne	r3,zero,d4c8 <quorem+0x200>
    d49c:	10ffff04 	addi	r3,r2,-4
    d4a0:	e0c0082e 	bgeu	fp,r3,d4c4 <quorem+0x1fc>
    d4a4:	10bfff17 	ldw	r2,-4(r2)
    d4a8:	10000326 	beq	r2,zero,d4b8 <quorem+0x1f0>
    d4ac:	00000506 	br	d4c4 <quorem+0x1fc>
    d4b0:	18800017 	ldw	r2,0(r3)
    d4b4:	1000031e 	bne	r2,zero,d4c4 <quorem+0x1fc>
    d4b8:	18ffff04 	addi	r3,r3,-4
    d4bc:	a53fffc4 	addi	r20,r20,-1
    d4c0:	e0fffb36 	bltu	fp,r3,d4b0 <quorem+0x1e8>
    d4c4:	9d000415 	stw	r20,16(r19)
    d4c8:	9005883a 	mov	r2,r18
    d4cc:	dfc00d17 	ldw	ra,52(sp)
    d4d0:	df000c17 	ldw	fp,48(sp)
    d4d4:	ddc00b17 	ldw	r23,44(sp)
    d4d8:	dd800a17 	ldw	r22,40(sp)
    d4dc:	dd400917 	ldw	r21,36(sp)
    d4e0:	dd000817 	ldw	r20,32(sp)
    d4e4:	dcc00717 	ldw	r19,28(sp)
    d4e8:	dc800617 	ldw	r18,24(sp)
    d4ec:	dc400517 	ldw	r17,20(sp)
    d4f0:	dc000417 	ldw	r16,16(sp)
    d4f4:	dec00e04 	addi	sp,sp,56
    d4f8:	f800283a 	ret
    d4fc:	0005883a 	mov	r2,zero
    d500:	003ff206 	br	d4cc <quorem+0x204>

0000d504 <_dtoa_r>:
    d504:	20801017 	ldw	r2,64(r4)
    d508:	deffdf04 	addi	sp,sp,-132
    d50c:	dcc01a15 	stw	r19,104(sp)
    d510:	dc801915 	stw	r18,100(sp)
    d514:	dc401815 	stw	r17,96(sp)
    d518:	dc001715 	stw	r16,92(sp)
    d51c:	dfc02015 	stw	ra,128(sp)
    d520:	df001f15 	stw	fp,124(sp)
    d524:	ddc01e15 	stw	r23,120(sp)
    d528:	dd801d15 	stw	r22,116(sp)
    d52c:	dd401c15 	stw	r21,112(sp)
    d530:	dd001b15 	stw	r20,108(sp)
    d534:	d9400315 	stw	r5,12(sp)
    d538:	d9c00415 	stw	r7,16(sp)
    d53c:	2021883a 	mov	r16,r4
    d540:	3025883a 	mov	r18,r6
    d544:	dcc02317 	ldw	r19,140(sp)
    d548:	3023883a 	mov	r17,r6
    d54c:	10000826 	beq	r2,zero,d570 <_dtoa_r+0x6c>
    d550:	20c01117 	ldw	r3,68(r4)
    d554:	01800044 	movi	r6,1
    d558:	100b883a 	mov	r5,r2
    d55c:	30cc983a 	sll	r6,r6,r3
    d560:	10c00115 	stw	r3,4(r2)
    d564:	11800215 	stw	r6,8(r2)
    d568:	00100240 	call	10024 <_Bfree>
    d56c:	80001015 	stw	zero,64(r16)
    d570:	90002f16 	blt	r18,zero,d630 <_dtoa_r+0x12c>
    d574:	98000015 	stw	zero,0(r19)
    d578:	90dffc2c 	andhi	r3,r18,32752
    d57c:	009ffc34 	movhi	r2,32752
    d580:	18801c26 	beq	r3,r2,d5f4 <_dtoa_r+0xf0>
    d584:	d9000317 	ldw	r4,12(sp)
    d588:	880b883a 	mov	r5,r17
    d58c:	000d883a 	mov	r6,zero
    d590:	000f883a 	mov	r7,zero
    d594:	0012bf00 	call	12bf0 <__eqdf2>
    d598:	10002c1e 	bne	r2,zero,d64c <_dtoa_r+0x148>
    d59c:	d9002217 	ldw	r4,136(sp)
    d5a0:	d9c02417 	ldw	r7,144(sp)
    d5a4:	00800044 	movi	r2,1
    d5a8:	20800015 	stw	r2,0(r4)
    d5ac:	38019426 	beq	r7,zero,dc00 <_dtoa_r+0x6fc>
    d5b0:	008001f4 	movhi	r2,7
    d5b4:	10911c44 	addi	r2,r2,17521
    d5b8:	38800015 	stw	r2,0(r7)
    d5bc:	15ffffc4 	addi	r23,r2,-1
    d5c0:	b805883a 	mov	r2,r23
    d5c4:	dfc02017 	ldw	ra,128(sp)
    d5c8:	df001f17 	ldw	fp,124(sp)
    d5cc:	ddc01e17 	ldw	r23,120(sp)
    d5d0:	dd801d17 	ldw	r22,116(sp)
    d5d4:	dd401c17 	ldw	r21,112(sp)
    d5d8:	dd001b17 	ldw	r20,108(sp)
    d5dc:	dcc01a17 	ldw	r19,104(sp)
    d5e0:	dc801917 	ldw	r18,100(sp)
    d5e4:	dc401817 	ldw	r17,96(sp)
    d5e8:	dc001717 	ldw	r16,92(sp)
    d5ec:	dec02104 	addi	sp,sp,132
    d5f0:	f800283a 	ret
    d5f4:	d8c02217 	ldw	r3,136(sp)
    d5f8:	d9000317 	ldw	r4,12(sp)
    d5fc:	0089c3c4 	movi	r2,9999
    d600:	18800015 	stw	r2,0(r3)
    d604:	20016c26 	beq	r4,zero,dbb8 <_dtoa_r+0x6b4>
    d608:	05c001f4 	movhi	r23,7
    d60c:	bdd12804 	addi	r23,r23,17568
    d610:	d9c02417 	ldw	r7,144(sp)
    d614:	383fea26 	beq	r7,zero,d5c0 <_dtoa_r+0xbc>
    d618:	b88000c7 	ldb	r2,3(r23)
    d61c:	10016d1e 	bne	r2,zero,dbd4 <_dtoa_r+0x6d0>
    d620:	b88000c4 	addi	r2,r23,3
    d624:	d8c02417 	ldw	r3,144(sp)
    d628:	18800015 	stw	r2,0(r3)
    d62c:	003fe406 	br	d5c0 <_dtoa_r+0xbc>
    d630:	04600034 	movhi	r17,32768
    d634:	8c7fffc4 	addi	r17,r17,-1
    d638:	9462703a 	and	r17,r18,r17
    d63c:	00800044 	movi	r2,1
    d640:	98800015 	stw	r2,0(r19)
    d644:	8825883a 	mov	r18,r17
    d648:	003fcb06 	br	d578 <_dtoa_r+0x74>
    d64c:	d9400317 	ldw	r5,12(sp)
    d650:	9028d53a 	srli	r20,r18,20
    d654:	d8800204 	addi	r2,sp,8
    d658:	d8800015 	stw	r2,0(sp)
    d65c:	8009883a 	mov	r4,r16
    d660:	880d883a 	mov	r6,r17
    d664:	d9c00104 	addi	r7,sp,4
    d668:	0010c700 	call	10c70 <__d2b>
    d66c:	a501ffcc 	andi	r20,r20,2047
    d670:	1039883a 	mov	fp,r2
    d674:	a001591e 	bne	r20,zero,dbdc <_dtoa_r+0x6d8>
    d678:	dd400217 	ldw	r21,8(sp)
    d67c:	dd000117 	ldw	r20,4(sp)
    d680:	00befbc4 	movi	r2,-1041
    d684:	ad29883a 	add	r20,r21,r20
    d688:	a082d216 	blt	r20,r2,e1d4 <_dtoa_r+0xcd0>
    d68c:	d8c00317 	ldw	r3,12(sp)
    d690:	013f0384 	movi	r4,-1010
    d694:	2509c83a 	sub	r4,r4,r20
    d698:	a0810484 	addi	r2,r20,1042
    d69c:	9124983a 	sll	r18,r18,r4
    d6a0:	1884d83a 	srl	r2,r3,r2
    d6a4:	9088b03a 	or	r4,r18,r2
    d6a8:	0012d700 	call	12d70 <__floatunsidf>
    d6ac:	1009883a 	mov	r4,r2
    d6b0:	017f8434 	movhi	r5,65040
    d6b4:	00800044 	movi	r2,1
    d6b8:	194b883a 	add	r5,r3,r5
    d6bc:	a53fffc4 	addi	r20,r20,-1
    d6c0:	d8800f15 	stw	r2,60(sp)
    d6c4:	000d883a 	mov	r6,zero
    d6c8:	01cffe34 	movhi	r7,16376
    d6cc:	00095c00 	call	95c0 <__subdf3>
    d6d0:	1009883a 	mov	r4,r2
    d6d4:	180b883a 	mov	r5,r3
    d6d8:	0198dbf4 	movhi	r6,25455
    d6dc:	3190d844 	addi	r6,r6,17249
    d6e0:	01cff4f4 	movhi	r7,16339
    d6e4:	39e1e9c4 	addi	r7,r7,-30809
    d6e8:	00096200 	call	9620 <__muldf3>
    d6ec:	180b883a 	mov	r5,r3
    d6f0:	01a2d874 	movhi	r6,35681
    d6f4:	31b22cc4 	addi	r6,r6,-14157
    d6f8:	01cff1f4 	movhi	r7,16327
    d6fc:	39e28a04 	addi	r7,r7,-30168
    d700:	1009883a 	mov	r4,r2
    d704:	000956c0 	call	956c <__adddf3>
    d708:	a009883a 	mov	r4,r20
    d70c:	1027883a 	mov	r19,r2
    d710:	1825883a 	mov	r18,r3
    d714:	0009b140 	call	9b14 <__floatsidf>
    d718:	1009883a 	mov	r4,r2
    d71c:	180b883a 	mov	r5,r3
    d720:	019427f4 	movhi	r6,20639
    d724:	319e7ec4 	addi	r6,r6,31227
    d728:	01cff4f4 	movhi	r7,16339
    d72c:	39d104c4 	addi	r7,r7,17427
    d730:	00096200 	call	9620 <__muldf3>
    d734:	9809883a 	mov	r4,r19
    d738:	900b883a 	mov	r5,r18
    d73c:	100d883a 	mov	r6,r2
    d740:	180f883a 	mov	r7,r3
    d744:	000956c0 	call	956c <__adddf3>
    d748:	1009883a 	mov	r4,r2
    d74c:	180b883a 	mov	r5,r3
    d750:	1027883a 	mov	r19,r2
    d754:	1825883a 	mov	r18,r3
    d758:	0009be80 	call	9be8 <__fixdfsi>
    d75c:	9809883a 	mov	r4,r19
    d760:	900b883a 	mov	r5,r18
    d764:	000d883a 	mov	r6,zero
    d768:	000f883a 	mov	r7,zero
    d76c:	d8800615 	stw	r2,24(sp)
    d770:	0009ab80 	call	9ab8 <__ltdf2>
    d774:	10027e16 	blt	r2,zero,e170 <_dtoa_r+0xc6c>
    d778:	d8c00617 	ldw	r3,24(sp)
    d77c:	00800584 	movi	r2,22
    d780:	10c26c36 	bltu	r2,r3,e134 <_dtoa_r+0xc30>
    d784:	180490fa 	slli	r2,r3,3
    d788:	00c001f4 	movhi	r3,7
    d78c:	18d14d04 	addi	r3,r3,17716
    d790:	d9800317 	ldw	r6,12(sp)
    d794:	1885883a 	add	r2,r3,r2
    d798:	11000017 	ldw	r4,0(r2)
    d79c:	11400117 	ldw	r5,4(r2)
    d7a0:	880f883a 	mov	r7,r17
    d7a4:	0012ca80 	call	12ca8 <__gtdf2>
    d7a8:	00828f0e 	bge	zero,r2,e1e8 <_dtoa_r+0xce4>
    d7ac:	d8800617 	ldw	r2,24(sp)
    d7b0:	d8000d15 	stw	zero,52(sp)
    d7b4:	10bfffc4 	addi	r2,r2,-1
    d7b8:	d8800615 	stw	r2,24(sp)
    d7bc:	ad29c83a 	sub	r20,r21,r20
    d7c0:	a53fffc4 	addi	r20,r20,-1
    d7c4:	a0026616 	blt	r20,zero,e160 <_dtoa_r+0xc5c>
    d7c8:	dd000715 	stw	r20,28(sp)
    d7cc:	d8000815 	stw	zero,32(sp)
    d7d0:	d8800617 	ldw	r2,24(sp)
    d7d4:	10025a16 	blt	r2,zero,e140 <_dtoa_r+0xc3c>
    d7d8:	d8c00717 	ldw	r3,28(sp)
    d7dc:	d8800b15 	stw	r2,44(sp)
    d7e0:	d8000a15 	stw	zero,40(sp)
    d7e4:	1887883a 	add	r3,r3,r2
    d7e8:	d8c00715 	stw	r3,28(sp)
    d7ec:	d9c00417 	ldw	r7,16(sp)
    d7f0:	00800244 	movi	r2,9
    d7f4:	11c10536 	bltu	r2,r7,dc0c <_dtoa_r+0x708>
    d7f8:	00800144 	movi	r2,5
    d7fc:	11c4c60e 	bge	r2,r7,eb18 <_dtoa_r+0x1614>
    d800:	39ffff04 	addi	r7,r7,-4
    d804:	d9c00415 	stw	r7,16(sp)
    d808:	0027883a 	mov	r19,zero
    d80c:	d9c00417 	ldw	r7,16(sp)
    d810:	008000c4 	movi	r2,3
    d814:	3883a226 	beq	r7,r2,e6a0 <_dtoa_r+0x119c>
    d818:	11c2bc16 	blt	r2,r7,e30c <_dtoa_r+0xe08>
    d81c:	00800084 	movi	r2,2
    d820:	3880fb1e 	bne	r7,r2,dc10 <_dtoa_r+0x70c>
    d824:	d8000c15 	stw	zero,48(sp)
    d828:	d9002117 	ldw	r4,132(sp)
    d82c:	0103ae0e 	bge	zero,r4,e6e8 <_dtoa_r+0x11e4>
    d830:	2025883a 	mov	r18,r4
    d834:	d9000e15 	stw	r4,56(sp)
    d838:	d9000915 	stw	r4,36(sp)
    d83c:	80001115 	stw	zero,68(r16)
    d840:	008005c4 	movi	r2,23
    d844:	1484b22e 	bgeu	r2,r18,eb10 <_dtoa_r+0x160c>
    d848:	00c00044 	movi	r3,1
    d84c:	00800104 	movi	r2,4
    d850:	1085883a 	add	r2,r2,r2
    d854:	11000504 	addi	r4,r2,20
    d858:	180b883a 	mov	r5,r3
    d85c:	18c00044 	addi	r3,r3,1
    d860:	913ffb2e 	bgeu	r18,r4,d850 <_dtoa_r+0x34c>
    d864:	81401115 	stw	r5,68(r16)
    d868:	8009883a 	mov	r4,r16
    d86c:	000ff7c0 	call	ff7c <_Balloc>
    d870:	102f883a 	mov	r23,r2
    d874:	80801015 	stw	r2,64(r16)
    d878:	00800384 	movi	r2,14
    d87c:	1480f036 	bltu	r2,r18,dc40 <_dtoa_r+0x73c>
    d880:	9800ef26 	beq	r19,zero,dc40 <_dtoa_r+0x73c>
    d884:	d8800617 	ldw	r2,24(sp)
    d888:	00839c0e 	bge	zero,r2,e6fc <_dtoa_r+0x11f8>
    d88c:	d8c00617 	ldw	r3,24(sp)
    d890:	108003cc 	andi	r2,r2,15
    d894:	100490fa 	slli	r2,r2,3
    d898:	182bd13a 	srai	r21,r3,4
    d89c:	00c001f4 	movhi	r3,7
    d8a0:	18d14d04 	addi	r3,r3,17716
    d8a4:	1885883a 	add	r2,r3,r2
    d8a8:	a8c0040c 	andi	r3,r21,16
    d8ac:	12800017 	ldw	r10,0(r2)
    d8b0:	15800117 	ldw	r22,4(r2)
    d8b4:	18038726 	beq	r3,zero,e6d4 <_dtoa_r+0x11d0>
    d8b8:	008001f4 	movhi	r2,7
    d8bc:	10914304 	addi	r2,r2,17676
    d8c0:	11800817 	ldw	r6,32(r2)
    d8c4:	11c00917 	ldw	r7,36(r2)
    d8c8:	d9000317 	ldw	r4,12(sp)
    d8cc:	880b883a 	mov	r5,r17
    d8d0:	da801515 	stw	r10,84(sp)
    d8d4:	00099040 	call	9904 <__divdf3>
    d8d8:	da801517 	ldw	r10,84(sp)
    d8dc:	d8801015 	stw	r2,64(sp)
    d8e0:	1829883a 	mov	r20,r3
    d8e4:	ad4003cc 	andi	r21,r21,15
    d8e8:	048000c4 	movi	r18,3
    d8ec:	a8001126 	beq	r21,zero,d934 <_dtoa_r+0x430>
    d8f0:	04c001f4 	movhi	r19,7
    d8f4:	9cd14304 	addi	r19,r19,17676
    d8f8:	5005883a 	mov	r2,r10
    d8fc:	b007883a 	mov	r3,r22
    d900:	a980004c 	andi	r6,r21,1
    d904:	1009883a 	mov	r4,r2
    d908:	a82bd07a 	srai	r21,r21,1
    d90c:	180b883a 	mov	r5,r3
    d910:	30000426 	beq	r6,zero,d924 <_dtoa_r+0x420>
    d914:	99800017 	ldw	r6,0(r19)
    d918:	99c00117 	ldw	r7,4(r19)
    d91c:	94800044 	addi	r18,r18,1
    d920:	00096200 	call	9620 <__muldf3>
    d924:	9cc00204 	addi	r19,r19,8
    d928:	a83ff51e 	bne	r21,zero,d900 <_dtoa_r+0x3fc>
    d92c:	1015883a 	mov	r10,r2
    d930:	182d883a 	mov	r22,r3
    d934:	d9001017 	ldw	r4,64(sp)
    d938:	a00b883a 	mov	r5,r20
    d93c:	500d883a 	mov	r6,r10
    d940:	b00f883a 	mov	r7,r22
    d944:	00099040 	call	9904 <__divdf3>
    d948:	1027883a 	mov	r19,r2
    d94c:	1829883a 	mov	r20,r3
    d950:	d8c00d17 	ldw	r3,52(sp)
    d954:	18000626 	beq	r3,zero,d970 <_dtoa_r+0x46c>
    d958:	9809883a 	mov	r4,r19
    d95c:	a00b883a 	mov	r5,r20
    d960:	000d883a 	mov	r6,zero
    d964:	01cffc34 	movhi	r7,16368
    d968:	0009ab80 	call	9ab8 <__ltdf2>
    d96c:	10040e16 	blt	r2,zero,e9a8 <_dtoa_r+0x14a4>
    d970:	9009883a 	mov	r4,r18
    d974:	0009b140 	call	9b14 <__floatsidf>
    d978:	1009883a 	mov	r4,r2
    d97c:	180b883a 	mov	r5,r3
    d980:	980d883a 	mov	r6,r19
    d984:	a00f883a 	mov	r7,r20
    d988:	00096200 	call	9620 <__muldf3>
    d98c:	1009883a 	mov	r4,r2
    d990:	180b883a 	mov	r5,r3
    d994:	000d883a 	mov	r6,zero
    d998:	01d00734 	movhi	r7,16412
    d99c:	000956c0 	call	956c <__adddf3>
    d9a0:	057f3034 	movhi	r21,64704
    d9a4:	1d6b883a 	add	r21,r3,r21
    d9a8:	d8c00917 	ldw	r3,36(sp)
    d9ac:	1025883a 	mov	r18,r2
    d9b0:	18031f26 	beq	r3,zero,e630 <_dtoa_r+0x112c>
    d9b4:	d8800617 	ldw	r2,24(sp)
    d9b8:	dac00917 	ldw	r11,36(sp)
    d9bc:	d8801315 	stw	r2,76(sp)
    d9c0:	d8c00c17 	ldw	r3,48(sp)
    d9c4:	18039026 	beq	r3,zero,e808 <_dtoa_r+0x1304>
    d9c8:	58bfffc4 	addi	r2,r11,-1
    d9cc:	100490fa 	slli	r2,r2,3
    d9d0:	00c001f4 	movhi	r3,7
    d9d4:	18d14d04 	addi	r3,r3,17716
    d9d8:	0009883a 	mov	r4,zero
    d9dc:	1885883a 	add	r2,r3,r2
    d9e0:	11800017 	ldw	r6,0(r2)
    d9e4:	11c00117 	ldw	r7,4(r2)
    d9e8:	014ff834 	movhi	r5,16352
    d9ec:	dac01615 	stw	r11,88(sp)
    d9f0:	00099040 	call	9904 <__divdf3>
    d9f4:	900d883a 	mov	r6,r18
    d9f8:	a80f883a 	mov	r7,r21
    d9fc:	1009883a 	mov	r4,r2
    da00:	180b883a 	mov	r5,r3
    da04:	00095c00 	call	95c0 <__subdf3>
    da08:	a00b883a 	mov	r5,r20
    da0c:	9809883a 	mov	r4,r19
    da10:	182b883a 	mov	r21,r3
    da14:	d8801015 	stw	r2,64(sp)
    da18:	0009be80 	call	9be8 <__fixdfsi>
    da1c:	1009883a 	mov	r4,r2
    da20:	d8801515 	stw	r2,84(sp)
    da24:	0009b140 	call	9b14 <__floatsidf>
    da28:	9809883a 	mov	r4,r19
    da2c:	a00b883a 	mov	r5,r20
    da30:	100d883a 	mov	r6,r2
    da34:	180f883a 	mov	r7,r3
    da38:	00095c00 	call	95c0 <__subdf3>
    da3c:	da401517 	ldw	r9,84(sp)
    da40:	d9001017 	ldw	r4,64(sp)
    da44:	a80b883a 	mov	r5,r21
    da48:	4d000c04 	addi	r20,r9,48
    da4c:	bd000005 	stb	r20,0(r23)
    da50:	100d883a 	mov	r6,r2
    da54:	180f883a 	mov	r7,r3
    da58:	bd800044 	addi	r22,r23,1
    da5c:	1025883a 	mov	r18,r2
    da60:	1827883a 	mov	r19,r3
    da64:	0012ca80 	call	12ca8 <__gtdf2>
    da68:	00842216 	blt	zero,r2,eaf4 <_dtoa_r+0x15f0>
    da6c:	0009883a 	mov	r4,zero
    da70:	014ffc34 	movhi	r5,16368
    da74:	900d883a 	mov	r6,r18
    da78:	980f883a 	mov	r7,r19
    da7c:	00095c00 	call	95c0 <__subdf3>
    da80:	d9001017 	ldw	r4,64(sp)
    da84:	a80b883a 	mov	r5,r21
    da88:	100d883a 	mov	r6,r2
    da8c:	180f883a 	mov	r7,r3
    da90:	0012ca80 	call	12ca8 <__gtdf2>
    da94:	dac01617 	ldw	r11,88(sp)
    da98:	00841316 	blt	zero,r2,eae8 <_dtoa_r+0x15e4>
    da9c:	00800044 	movi	r2,1
    daa0:	12c0670e 	bge	r2,r11,dc40 <_dtoa_r+0x73c>
    daa4:	bad7883a 	add	r11,r23,r11
    daa8:	df001115 	stw	fp,68(sp)
    daac:	dc401215 	stw	r17,72(sp)
    dab0:	5839883a 	mov	fp,r11
    dab4:	dc401017 	ldw	r17,64(sp)
    dab8:	00000806 	br	dadc <_dtoa_r+0x5d8>
    dabc:	00095c00 	call	95c0 <__subdf3>
    dac0:	1009883a 	mov	r4,r2
    dac4:	180b883a 	mov	r5,r3
    dac8:	880d883a 	mov	r6,r17
    dacc:	a80f883a 	mov	r7,r21
    dad0:	0009ab80 	call	9ab8 <__ltdf2>
    dad4:	1003ee16 	blt	r2,zero,ea90 <_dtoa_r+0x158c>
    dad8:	b703f126 	beq	r22,fp,eaa0 <_dtoa_r+0x159c>
    dadc:	8809883a 	mov	r4,r17
    dae0:	a80b883a 	mov	r5,r21
    dae4:	000d883a 	mov	r6,zero
    dae8:	01d00934 	movhi	r7,16420
    daec:	00096200 	call	9620 <__muldf3>
    daf0:	000d883a 	mov	r6,zero
    daf4:	01d00934 	movhi	r7,16420
    daf8:	9009883a 	mov	r4,r18
    dafc:	980b883a 	mov	r5,r19
    db00:	1023883a 	mov	r17,r2
    db04:	182b883a 	mov	r21,r3
    db08:	00096200 	call	9620 <__muldf3>
    db0c:	180b883a 	mov	r5,r3
    db10:	1009883a 	mov	r4,r2
    db14:	1825883a 	mov	r18,r3
    db18:	1027883a 	mov	r19,r2
    db1c:	0009be80 	call	9be8 <__fixdfsi>
    db20:	1009883a 	mov	r4,r2
    db24:	1029883a 	mov	r20,r2
    db28:	0009b140 	call	9b14 <__floatsidf>
    db2c:	9809883a 	mov	r4,r19
    db30:	900b883a 	mov	r5,r18
    db34:	100d883a 	mov	r6,r2
    db38:	180f883a 	mov	r7,r3
    db3c:	00095c00 	call	95c0 <__subdf3>
    db40:	a5000c04 	addi	r20,r20,48
    db44:	b5000005 	stb	r20,0(r22)
    db48:	1009883a 	mov	r4,r2
    db4c:	180b883a 	mov	r5,r3
    db50:	880d883a 	mov	r6,r17
    db54:	a80f883a 	mov	r7,r21
    db58:	1025883a 	mov	r18,r2
    db5c:	1827883a 	mov	r19,r3
    db60:	0009ab80 	call	9ab8 <__ltdf2>
    db64:	b5800044 	addi	r22,r22,1
    db68:	0009883a 	mov	r4,zero
    db6c:	014ffc34 	movhi	r5,16368
    db70:	900d883a 	mov	r6,r18
    db74:	980f883a 	mov	r7,r19
    db78:	103fd00e 	bge	r2,zero,dabc <_dtoa_r+0x5b8>
    db7c:	d9001317 	ldw	r4,76(sp)
    db80:	df001117 	ldw	fp,68(sp)
    db84:	d9000615 	stw	r4,24(sp)
    db88:	8009883a 	mov	r4,r16
    db8c:	e00b883a 	mov	r5,fp
    db90:	00100240 	call	10024 <_Bfree>
    db94:	d9c00617 	ldw	r7,24(sp)
    db98:	d8c02217 	ldw	r3,136(sp)
    db9c:	d9002417 	ldw	r4,144(sp)
    dba0:	b0000005 	stb	zero,0(r22)
    dba4:	38800044 	addi	r2,r7,1
    dba8:	18800015 	stw	r2,0(r3)
    dbac:	203e8426 	beq	r4,zero,d5c0 <_dtoa_r+0xbc>
    dbb0:	25800015 	stw	r22,0(r4)
    dbb4:	003e8206 	br	d5c0 <_dtoa_r+0xbc>
    dbb8:	00800434 	movhi	r2,16
    dbbc:	10bfffc4 	addi	r2,r2,-1
    dbc0:	90a4703a 	and	r18,r18,r2
    dbc4:	903e901e 	bne	r18,zero,d608 <_dtoa_r+0x104>
    dbc8:	05c001f4 	movhi	r23,7
    dbcc:	bdd12504 	addi	r23,r23,17556
    dbd0:	003e8f06 	br	d610 <_dtoa_r+0x10c>
    dbd4:	b8800204 	addi	r2,r23,8
    dbd8:	003e9206 	br	d624 <_dtoa_r+0x120>
    dbdc:	01400434 	movhi	r5,16
    dbe0:	297fffc4 	addi	r5,r5,-1
    dbe4:	894a703a 	and	r5,r17,r5
    dbe8:	d9000317 	ldw	r4,12(sp)
    dbec:	294ffc34 	orhi	r5,r5,16368
    dbf0:	a53f0044 	addi	r20,r20,-1023
    dbf4:	dd400217 	ldw	r21,8(sp)
    dbf8:	d8000f15 	stw	zero,60(sp)
    dbfc:	003eb106 	br	d6c4 <_dtoa_r+0x1c0>
    dc00:	05c001f4 	movhi	r23,7
    dc04:	bdd11c04 	addi	r23,r23,17520
    dc08:	003e6d06 	br	d5c0 <_dtoa_r+0xbc>
    dc0c:	d8000415 	stw	zero,16(sp)
    dc10:	80001115 	stw	zero,68(r16)
    dc14:	8009883a 	mov	r4,r16
    dc18:	000b883a 	mov	r5,zero
    dc1c:	000ff7c0 	call	ff7c <_Balloc>
    dc20:	01ffffc4 	movi	r7,-1
    dc24:	102f883a 	mov	r23,r2
    dc28:	80801015 	stw	r2,64(r16)
    dc2c:	00800044 	movi	r2,1
    dc30:	d9c00915 	stw	r7,36(sp)
    dc34:	d8002115 	stw	zero,132(sp)
    dc38:	d9c00e15 	stw	r7,56(sp)
    dc3c:	d8800c15 	stw	r2,48(sp)
    dc40:	d8800117 	ldw	r2,4(sp)
    dc44:	10008b16 	blt	r2,zero,de74 <_dtoa_r+0x970>
    dc48:	d9000617 	ldw	r4,24(sp)
    dc4c:	00c00384 	movi	r3,14
    dc50:	19008816 	blt	r3,r4,de74 <_dtoa_r+0x970>
    dc54:	200490fa 	slli	r2,r4,3
    dc58:	d9c02117 	ldw	r7,132(sp)
    dc5c:	00c001f4 	movhi	r3,7
    dc60:	18d14d04 	addi	r3,r3,17716
    dc64:	1885883a 	add	r2,r3,r2
    dc68:	14800017 	ldw	r18,0(r2)
    dc6c:	14c00117 	ldw	r19,4(r2)
    dc70:	3801c916 	blt	r7,zero,e398 <_dtoa_r+0xe94>
    dc74:	d9000317 	ldw	r4,12(sp)
    dc78:	900d883a 	mov	r6,r18
    dc7c:	980f883a 	mov	r7,r19
    dc80:	880b883a 	mov	r5,r17
    dc84:	00099040 	call	9904 <__divdf3>
    dc88:	180b883a 	mov	r5,r3
    dc8c:	1009883a 	mov	r4,r2
    dc90:	0009be80 	call	9be8 <__fixdfsi>
    dc94:	1009883a 	mov	r4,r2
    dc98:	102b883a 	mov	r21,r2
    dc9c:	0009b140 	call	9b14 <__floatsidf>
    dca0:	1009883a 	mov	r4,r2
    dca4:	180b883a 	mov	r5,r3
    dca8:	900d883a 	mov	r6,r18
    dcac:	980f883a 	mov	r7,r19
    dcb0:	00096200 	call	9620 <__muldf3>
    dcb4:	d9000317 	ldw	r4,12(sp)
    dcb8:	880b883a 	mov	r5,r17
    dcbc:	100d883a 	mov	r6,r2
    dcc0:	180f883a 	mov	r7,r3
    dcc4:	00095c00 	call	95c0 <__subdf3>
    dcc8:	d9c00917 	ldw	r7,36(sp)
    dccc:	1009883a 	mov	r4,r2
    dcd0:	a8800c04 	addi	r2,r21,48
    dcd4:	b8800005 	stb	r2,0(r23)
    dcd8:	01800044 	movi	r6,1
    dcdc:	180b883a 	mov	r5,r3
    dce0:	2005883a 	mov	r2,r4
    dce4:	bd800044 	addi	r22,r23,1
    dce8:	39803726 	beq	r7,r6,ddc8 <_dtoa_r+0x8c4>
    dcec:	000d883a 	mov	r6,zero
    dcf0:	01d00934 	movhi	r7,16420
    dcf4:	00096200 	call	9620 <__muldf3>
    dcf8:	1009883a 	mov	r4,r2
    dcfc:	180b883a 	mov	r5,r3
    dd00:	000d883a 	mov	r6,zero
    dd04:	000f883a 	mov	r7,zero
    dd08:	1029883a 	mov	r20,r2
    dd0c:	1823883a 	mov	r17,r3
    dd10:	0012bf00 	call	12bf0 <__eqdf2>
    dd14:	103f9c26 	beq	r2,zero,db88 <_dtoa_r+0x684>
    dd18:	dd400917 	ldw	r21,36(sp)
    dd1c:	dc000415 	stw	r16,16(sp)
    dd20:	00000906 	br	dd48 <_dtoa_r+0x844>
    dd24:	00096200 	call	9620 <__muldf3>
    dd28:	1009883a 	mov	r4,r2
    dd2c:	180b883a 	mov	r5,r3
    dd30:	000d883a 	mov	r6,zero
    dd34:	000f883a 	mov	r7,zero
    dd38:	1029883a 	mov	r20,r2
    dd3c:	1823883a 	mov	r17,r3
    dd40:	0012bf00 	call	12bf0 <__eqdf2>
    dd44:	10022926 	beq	r2,zero,e5ec <_dtoa_r+0x10e8>
    dd48:	900d883a 	mov	r6,r18
    dd4c:	980f883a 	mov	r7,r19
    dd50:	a009883a 	mov	r4,r20
    dd54:	880b883a 	mov	r5,r17
    dd58:	00099040 	call	9904 <__divdf3>
    dd5c:	180b883a 	mov	r5,r3
    dd60:	1009883a 	mov	r4,r2
    dd64:	0009be80 	call	9be8 <__fixdfsi>
    dd68:	1009883a 	mov	r4,r2
    dd6c:	1021883a 	mov	r16,r2
    dd70:	0009b140 	call	9b14 <__floatsidf>
    dd74:	1009883a 	mov	r4,r2
    dd78:	180b883a 	mov	r5,r3
    dd7c:	900d883a 	mov	r6,r18
    dd80:	980f883a 	mov	r7,r19
    dd84:	00096200 	call	9620 <__muldf3>
    dd88:	a009883a 	mov	r4,r20
    dd8c:	880b883a 	mov	r5,r17
    dd90:	100d883a 	mov	r6,r2
    dd94:	180f883a 	mov	r7,r3
    dd98:	00095c00 	call	95c0 <__subdf3>
    dd9c:	82400c04 	addi	r9,r16,48
    dda0:	b2400005 	stb	r9,0(r22)
    dda4:	b5800044 	addi	r22,r22,1
    dda8:	b5d3c83a 	sub	r9,r22,r23
    ddac:	000d883a 	mov	r6,zero
    ddb0:	01d00934 	movhi	r7,16420
    ddb4:	1009883a 	mov	r4,r2
    ddb8:	180b883a 	mov	r5,r3
    ddbc:	aa7fd91e 	bne	r21,r9,dd24 <_dtoa_r+0x820>
    ddc0:	802b883a 	mov	r21,r16
    ddc4:	dc000417 	ldw	r16,16(sp)
    ddc8:	1009883a 	mov	r4,r2
    ddcc:	180b883a 	mov	r5,r3
    ddd0:	100d883a 	mov	r6,r2
    ddd4:	180f883a 	mov	r7,r3
    ddd8:	000956c0 	call	956c <__adddf3>
    dddc:	9009883a 	mov	r4,r18
    dde0:	980b883a 	mov	r5,r19
    dde4:	100d883a 	mov	r6,r2
    dde8:	180f883a 	mov	r7,r3
    ddec:	1023883a 	mov	r17,r2
    ddf0:	1829883a 	mov	r20,r3
    ddf4:	0009ab80 	call	9ab8 <__ltdf2>
    ddf8:	10000816 	blt	r2,zero,de1c <_dtoa_r+0x918>
    ddfc:	9009883a 	mov	r4,r18
    de00:	980b883a 	mov	r5,r19
    de04:	880d883a 	mov	r6,r17
    de08:	a00f883a 	mov	r7,r20
    de0c:	0012bf00 	call	12bf0 <__eqdf2>
    de10:	103f5d1e 	bne	r2,zero,db88 <_dtoa_r+0x684>
    de14:	ad40004c 	andi	r21,r21,1
    de18:	a83f5b26 	beq	r21,zero,db88 <_dtoa_r+0x684>
    de1c:	b53fffc3 	ldbu	r20,-1(r22)
    de20:	b0ffff84 	addi	r3,r22,-2
    de24:	01400e44 	movi	r5,57
    de28:	00000306 	br	de38 <_dtoa_r+0x934>
    de2c:	1d000003 	ldbu	r20,0(r3)
    de30:	102d883a 	mov	r22,r2
    de34:	18ffffc4 	addi	r3,r3,-1
    de38:	a1003fcc 	andi	r4,r20,255
    de3c:	2100201c 	xori	r4,r4,128
    de40:	213fe004 	addi	r4,r4,-128
    de44:	b0bfffc4 	addi	r2,r22,-1
    de48:	2142ca1e 	bne	r4,r5,e974 <_dtoa_r+0x1470>
    de4c:	b8bff71e 	bne	r23,r2,de2c <_dtoa_r+0x928>
    de50:	d8800617 	ldw	r2,24(sp)
    de54:	05000c44 	movi	r20,49
    de58:	10800044 	addi	r2,r2,1
    de5c:	d8800615 	stw	r2,24(sp)
    de60:	00800c04 	movi	r2,48
    de64:	b8800005 	stb	r2,0(r23)
    de68:	b805883a 	mov	r2,r23
    de6c:	15000005 	stb	r20,0(r2)
    de70:	003f4506 	br	db88 <_dtoa_r+0x684>
    de74:	d9c00c17 	ldw	r7,48(sp)
    de78:	3800c926 	beq	r7,zero,e1a0 <_dtoa_r+0xc9c>
    de7c:	d9c00417 	ldw	r7,16(sp)
    de80:	00c00044 	movi	r3,1
    de84:	19c16c0e 	bge	r3,r7,e438 <_dtoa_r+0xf34>
    de88:	d9000917 	ldw	r4,36(sp)
    de8c:	d9c00a17 	ldw	r7,40(sp)
    de90:	24ffffc4 	addi	r19,r4,-1
    de94:	3cc20716 	blt	r7,r19,e6b4 <_dtoa_r+0x11b0>
    de98:	3ce7c83a 	sub	r19,r7,r19
    de9c:	d9c00917 	ldw	r7,36(sp)
    dea0:	3802ae16 	blt	r7,zero,e95c <_dtoa_r+0x1458>
    dea4:	dc800817 	ldw	r18,32(sp)
    dea8:	d8800917 	ldw	r2,36(sp)
    deac:	d8c00817 	ldw	r3,32(sp)
    deb0:	d9c00717 	ldw	r7,28(sp)
    deb4:	8009883a 	mov	r4,r16
    deb8:	1887883a 	add	r3,r3,r2
    debc:	388f883a 	add	r7,r7,r2
    dec0:	01400044 	movi	r5,1
    dec4:	d8c00815 	stw	r3,32(sp)
    dec8:	d9c00715 	stw	r7,28(sp)
    decc:	00103ac0 	call	103ac <__i2b>
    ded0:	102b883a 	mov	r21,r2
    ded4:	90000a26 	beq	r18,zero,df00 <_dtoa_r+0x9fc>
    ded8:	d8800717 	ldw	r2,28(sp)
    dedc:	0080080e 	bge	zero,r2,df00 <_dtoa_r+0x9fc>
    dee0:	90812b16 	blt	r18,r2,e390 <_dtoa_r+0xe8c>
    dee4:	d8c00817 	ldw	r3,32(sp)
    dee8:	d9000717 	ldw	r4,28(sp)
    deec:	90a5c83a 	sub	r18,r18,r2
    def0:	1887c83a 	sub	r3,r3,r2
    def4:	2089c83a 	sub	r4,r4,r2
    def8:	d8c00815 	stw	r3,32(sp)
    defc:	d9000715 	stw	r4,28(sp)
    df00:	d9c00a17 	ldw	r7,40(sp)
    df04:	01c0140e 	bge	zero,r7,df58 <_dtoa_r+0xa54>
    df08:	d8800c17 	ldw	r2,48(sp)
    df0c:	1001de26 	beq	r2,zero,e688 <_dtoa_r+0x1184>
    df10:	04c00e0e 	bge	zero,r19,df4c <_dtoa_r+0xa48>
    df14:	a80b883a 	mov	r5,r21
    df18:	8009883a 	mov	r4,r16
    df1c:	980d883a 	mov	r6,r19
    df20:	00106400 	call	10640 <__pow5mult>
    df24:	e00d883a 	mov	r6,fp
    df28:	8009883a 	mov	r4,r16
    df2c:	100b883a 	mov	r5,r2
    df30:	102b883a 	mov	r21,r2
    df34:	00103e80 	call	103e8 <__multiply>
    df38:	1029883a 	mov	r20,r2
    df3c:	e00b883a 	mov	r5,fp
    df40:	8009883a 	mov	r4,r16
    df44:	00100240 	call	10024 <_Bfree>
    df48:	a039883a 	mov	fp,r20
    df4c:	d8c00a17 	ldw	r3,40(sp)
    df50:	1ccdc83a 	sub	r6,r3,r19
    df54:	3001291e 	bne	r6,zero,e3fc <_dtoa_r+0xef8>
    df58:	8009883a 	mov	r4,r16
    df5c:	01400044 	movi	r5,1
    df60:	00103ac0 	call	103ac <__i2b>
    df64:	d9000b17 	ldw	r4,44(sp)
    df68:	1029883a 	mov	r20,r2
    df6c:	0100050e 	bge	zero,r4,df84 <_dtoa_r+0xa80>
    df70:	d9800b17 	ldw	r6,44(sp)
    df74:	8009883a 	mov	r4,r16
    df78:	100b883a 	mov	r5,r2
    df7c:	00106400 	call	10640 <__pow5mult>
    df80:	1029883a 	mov	r20,r2
    df84:	d9c00417 	ldw	r7,16(sp)
    df88:	00800044 	movi	r2,1
    df8c:	11c0f00e 	bge	r2,r7,e350 <_dtoa_r+0xe4c>
    df90:	0023883a 	mov	r17,zero
    df94:	d8800b17 	ldw	r2,44(sp)
    df98:	1001741e 	bne	r2,zero,e56c <_dtoa_r+0x1068>
    df9c:	00800044 	movi	r2,1
    dfa0:	d8c00717 	ldw	r3,28(sp)
    dfa4:	10c5883a 	add	r2,r2,r3
    dfa8:	108007cc 	andi	r2,r2,31
    dfac:	10008026 	beq	r2,zero,e1b0 <_dtoa_r+0xcac>
    dfb0:	01000804 	movi	r4,32
    dfb4:	2089c83a 	sub	r4,r4,r2
    dfb8:	00c00104 	movi	r3,4
    dfbc:	1902d00e 	bge	r3,r4,eb00 <_dtoa_r+0x15fc>
    dfc0:	d9000817 	ldw	r4,32(sp)
    dfc4:	d9c00717 	ldw	r7,28(sp)
    dfc8:	00c00704 	movi	r3,28
    dfcc:	1885c83a 	sub	r2,r3,r2
    dfd0:	2089883a 	add	r4,r4,r2
    dfd4:	388f883a 	add	r7,r7,r2
    dfd8:	d9000815 	stw	r4,32(sp)
    dfdc:	90a5883a 	add	r18,r18,r2
    dfe0:	d9c00715 	stw	r7,28(sp)
    dfe4:	d9c00817 	ldw	r7,32(sp)
    dfe8:	01c0050e 	bge	zero,r7,e000 <_dtoa_r+0xafc>
    dfec:	e00b883a 	mov	r5,fp
    dff0:	8009883a 	mov	r4,r16
    dff4:	380d883a 	mov	r6,r7
    dff8:	001076c0 	call	1076c <__lshift>
    dffc:	1039883a 	mov	fp,r2
    e000:	d8800717 	ldw	r2,28(sp)
    e004:	0080050e 	bge	zero,r2,e01c <_dtoa_r+0xb18>
    e008:	a00b883a 	mov	r5,r20
    e00c:	8009883a 	mov	r4,r16
    e010:	100d883a 	mov	r6,r2
    e014:	001076c0 	call	1076c <__lshift>
    e018:	1029883a 	mov	r20,r2
    e01c:	d8c00d17 	ldw	r3,52(sp)
    e020:	1801401e 	bne	r3,zero,e524 <_dtoa_r+0x1020>
    e024:	d8800917 	ldw	r2,36(sp)
    e028:	00815a0e 	bge	zero,r2,e594 <_dtoa_r+0x1090>
    e02c:	d8c00c17 	ldw	r3,48(sp)
    e030:	18006f1e 	bne	r3,zero,e1f0 <_dtoa_r+0xcec>
    e034:	b823883a 	mov	r17,r23
    e038:	dc800917 	ldw	r18,36(sp)
    e03c:	00000206 	br	e048 <_dtoa_r+0xb44>
    e040:	001004c0 	call	1004c <__multadd>
    e044:	1039883a 	mov	fp,r2
    e048:	e009883a 	mov	r4,fp
    e04c:	a00b883a 	mov	r5,r20
    e050:	000d2c80 	call	d2c8 <quorem>
    e054:	10800c04 	addi	r2,r2,48
    e058:	88800005 	stb	r2,0(r17)
    e05c:	8c400044 	addi	r17,r17,1
    e060:	8dc7c83a 	sub	r3,r17,r23
    e064:	8009883a 	mov	r4,r16
    e068:	e00b883a 	mov	r5,fp
    e06c:	01800284 	movi	r6,10
    e070:	000f883a 	mov	r7,zero
    e074:	1cbff216 	blt	r3,r18,e040 <_dtoa_r+0xb3c>
    e078:	dd800917 	ldw	r22,36(sp)
    e07c:	1007883a 	mov	r3,r2
    e080:	05823a0e 	bge	zero,r22,e96c <_dtoa_r+0x1468>
    e084:	bdad883a 	add	r22,r23,r22
    e088:	0023883a 	mov	r17,zero
    e08c:	e00b883a 	mov	r5,fp
    e090:	01800044 	movi	r6,1
    e094:	8009883a 	mov	r4,r16
    e098:	d8c01515 	stw	r3,84(sp)
    e09c:	001076c0 	call	1076c <__lshift>
    e0a0:	1009883a 	mov	r4,r2
    e0a4:	a00b883a 	mov	r5,r20
    e0a8:	1039883a 	mov	fp,r2
    e0ac:	00108c80 	call	108c8 <__mcmp>
    e0b0:	d8c01517 	ldw	r3,84(sp)
    e0b4:	0080d60e 	bge	zero,r2,e410 <_dtoa_r+0xf0c>
    e0b8:	b13fffc3 	ldbu	r4,-1(r22)
    e0bc:	b0ffff84 	addi	r3,r22,-2
    e0c0:	01800e44 	movi	r6,57
    e0c4:	00000306 	br	e0d4 <_dtoa_r+0xbd0>
    e0c8:	19000003 	ldbu	r4,0(r3)
    e0cc:	102d883a 	mov	r22,r2
    e0d0:	18ffffc4 	addi	r3,r3,-1
    e0d4:	21403fcc 	andi	r5,r4,255
    e0d8:	2940201c 	xori	r5,r5,128
    e0dc:	297fe004 	addi	r5,r5,-128
    e0e0:	b0bfffc4 	addi	r2,r22,-1
    e0e4:	2981a71e 	bne	r5,r6,e784 <_dtoa_r+0x1280>
    e0e8:	b8bff71e 	bne	r23,r2,e0c8 <_dtoa_r+0xbc4>
    e0ec:	d8800617 	ldw	r2,24(sp)
    e0f0:	10800044 	addi	r2,r2,1
    e0f4:	d8800615 	stw	r2,24(sp)
    e0f8:	00800c44 	movi	r2,49
    e0fc:	b8800005 	stb	r2,0(r23)
    e100:	8009883a 	mov	r4,r16
    e104:	a00b883a 	mov	r5,r20
    e108:	00100240 	call	10024 <_Bfree>
    e10c:	a83e9e26 	beq	r21,zero,db88 <_dtoa_r+0x684>
    e110:	88000426 	beq	r17,zero,e124 <_dtoa_r+0xc20>
    e114:	8d400326 	beq	r17,r21,e124 <_dtoa_r+0xc20>
    e118:	8009883a 	mov	r4,r16
    e11c:	880b883a 	mov	r5,r17
    e120:	00100240 	call	10024 <_Bfree>
    e124:	8009883a 	mov	r4,r16
    e128:	a80b883a 	mov	r5,r21
    e12c:	00100240 	call	10024 <_Bfree>
    e130:	003e9506 	br	db88 <_dtoa_r+0x684>
    e134:	00c00044 	movi	r3,1
    e138:	d8c00d15 	stw	r3,52(sp)
    e13c:	003d9f06 	br	d7bc <_dtoa_r+0x2b8>
    e140:	d9000817 	ldw	r4,32(sp)
    e144:	d8800617 	ldw	r2,24(sp)
    e148:	d8000b15 	stw	zero,44(sp)
    e14c:	2089c83a 	sub	r4,r4,r2
    e150:	0087c83a 	sub	r3,zero,r2
    e154:	d9000815 	stw	r4,32(sp)
    e158:	d8c00a15 	stw	r3,40(sp)
    e15c:	003da306 	br	d7ec <_dtoa_r+0x2e8>
    e160:	0529c83a 	sub	r20,zero,r20
    e164:	dd000815 	stw	r20,32(sp)
    e168:	d8000715 	stw	zero,28(sp)
    e16c:	003d9806 	br	d7d0 <_dtoa_r+0x2cc>
    e170:	d9000617 	ldw	r4,24(sp)
    e174:	0009b140 	call	9b14 <__floatsidf>
    e178:	1009883a 	mov	r4,r2
    e17c:	180b883a 	mov	r5,r3
    e180:	980d883a 	mov	r6,r19
    e184:	900f883a 	mov	r7,r18
    e188:	0012c4c0 	call	12c4c <__nedf2>
    e18c:	103d7a26 	beq	r2,zero,d778 <_dtoa_r+0x274>
    e190:	d8800617 	ldw	r2,24(sp)
    e194:	10bfffc4 	addi	r2,r2,-1
    e198:	d8800615 	stw	r2,24(sp)
    e19c:	003d7606 	br	d778 <_dtoa_r+0x274>
    e1a0:	dcc00a17 	ldw	r19,40(sp)
    e1a4:	dc800817 	ldw	r18,32(sp)
    e1a8:	002b883a 	mov	r21,zero
    e1ac:	003f4906 	br	ded4 <_dtoa_r+0x9d0>
    e1b0:	00800704 	movi	r2,28
    e1b4:	d8c00817 	ldw	r3,32(sp)
    e1b8:	d9000717 	ldw	r4,28(sp)
    e1bc:	90a5883a 	add	r18,r18,r2
    e1c0:	1887883a 	add	r3,r3,r2
    e1c4:	2089883a 	add	r4,r4,r2
    e1c8:	d8c00815 	stw	r3,32(sp)
    e1cc:	d9000715 	stw	r4,28(sp)
    e1d0:	003f8406 	br	dfe4 <_dtoa_r+0xae0>
    e1d4:	d9c00317 	ldw	r7,12(sp)
    e1d8:	013efb84 	movi	r4,-1042
    e1dc:	2509c83a 	sub	r4,r4,r20
    e1e0:	3908983a 	sll	r4,r7,r4
    e1e4:	003d3006 	br	d6a8 <_dtoa_r+0x1a4>
    e1e8:	d8000d15 	stw	zero,52(sp)
    e1ec:	003d7306 	br	d7bc <_dtoa_r+0x2b8>
    e1f0:	0480050e 	bge	zero,r18,e208 <_dtoa_r+0xd04>
    e1f4:	a80b883a 	mov	r5,r21
    e1f8:	8009883a 	mov	r4,r16
    e1fc:	900d883a 	mov	r6,r18
    e200:	001076c0 	call	1076c <__lshift>
    e204:	102b883a 	mov	r21,r2
    e208:	8801611e 	bne	r17,zero,e790 <_dtoa_r+0x128c>
    e20c:	a827883a 	mov	r19,r21
    e210:	d8c00317 	ldw	r3,12(sp)
    e214:	d9000917 	ldw	r4,36(sp)
    e218:	b8bfffc4 	addi	r2,r23,-1
    e21c:	18c0004c 	andi	r3,r3,1
    e220:	1105883a 	add	r2,r2,r4
    e224:	b825883a 	mov	r18,r23
    e228:	d8800515 	stw	r2,20(sp)
    e22c:	a823883a 	mov	r17,r21
    e230:	d8c00315 	stw	r3,12(sp)
    e234:	ddc00715 	stw	r23,28(sp)
    e238:	e009883a 	mov	r4,fp
    e23c:	a00b883a 	mov	r5,r20
    e240:	000d2c80 	call	d2c8 <quorem>
    e244:	e009883a 	mov	r4,fp
    e248:	880b883a 	mov	r5,r17
    e24c:	102d883a 	mov	r22,r2
    e250:	00108c80 	call	108c8 <__mcmp>
    e254:	980d883a 	mov	r6,r19
    e258:	8009883a 	mov	r4,r16
    e25c:	a00b883a 	mov	r5,r20
    e260:	102b883a 	mov	r21,r2
    e264:	00109200 	call	10920 <__mdiff>
    e268:	100d883a 	mov	r6,r2
    e26c:	10800317 	ldw	r2,12(r2)
    e270:	b5c00c04 	addi	r23,r22,48
    e274:	10008c26 	beq	r2,zero,e4a8 <_dtoa_r+0xfa4>
    e278:	8009883a 	mov	r4,r16
    e27c:	300b883a 	mov	r5,r6
    e280:	00100240 	call	10024 <_Bfree>
    e284:	00800044 	movi	r2,1
    e288:	a8007116 	blt	r21,zero,e450 <_dtoa_r+0xf4c>
    e28c:	a800041e 	bne	r21,zero,e2a0 <_dtoa_r+0xd9c>
    e290:	d9c00417 	ldw	r7,16(sp)
    e294:	3800021e 	bne	r7,zero,e2a0 <_dtoa_r+0xd9c>
    e298:	d8c00317 	ldw	r3,12(sp)
    e29c:	18006c26 	beq	r3,zero,e450 <_dtoa_r+0xf4c>
    e2a0:	00814c16 	blt	zero,r2,e7d4 <_dtoa_r+0x12d0>
    e2a4:	d8c00517 	ldw	r3,20(sp)
    e2a8:	95400044 	addi	r21,r18,1
    e2ac:	95c00005 	stb	r23,0(r18)
    e2b0:	a82d883a 	mov	r22,r21
    e2b4:	90c14d26 	beq	r18,r3,e7ec <_dtoa_r+0x12e8>
    e2b8:	e00b883a 	mov	r5,fp
    e2bc:	8009883a 	mov	r4,r16
    e2c0:	01800284 	movi	r6,10
    e2c4:	000f883a 	mov	r7,zero
    e2c8:	001004c0 	call	1004c <__multadd>
    e2cc:	1039883a 	mov	fp,r2
    e2d0:	8cc08b26 	beq	r17,r19,e500 <_dtoa_r+0xffc>
    e2d4:	880b883a 	mov	r5,r17
    e2d8:	01800284 	movi	r6,10
    e2dc:	000f883a 	mov	r7,zero
    e2e0:	8009883a 	mov	r4,r16
    e2e4:	001004c0 	call	1004c <__multadd>
    e2e8:	980b883a 	mov	r5,r19
    e2ec:	8009883a 	mov	r4,r16
    e2f0:	01800284 	movi	r6,10
    e2f4:	000f883a 	mov	r7,zero
    e2f8:	1023883a 	mov	r17,r2
    e2fc:	001004c0 	call	1004c <__multadd>
    e300:	1027883a 	mov	r19,r2
    e304:	a825883a 	mov	r18,r21
    e308:	003fcb06 	br	e238 <_dtoa_r+0xd34>
    e30c:	d9c00417 	ldw	r7,16(sp)
    e310:	00800104 	movi	r2,4
    e314:	3880e426 	beq	r7,r2,e6a8 <_dtoa_r+0x11a4>
    e318:	00800144 	movi	r2,5
    e31c:	38be3c1e 	bne	r7,r2,dc10 <_dtoa_r+0x70c>
    e320:	00c00044 	movi	r3,1
    e324:	d8c00c15 	stw	r3,48(sp)
    e328:	d9c02117 	ldw	r7,132(sp)
    e32c:	d8800617 	ldw	r2,24(sp)
    e330:	388f883a 	add	r7,r7,r2
    e334:	3c800044 	addi	r18,r7,1
    e338:	d9c00e15 	stw	r7,56(sp)
    e33c:	dc800915 	stw	r18,36(sp)
    e340:	04bd3e16 	blt	zero,r18,d83c <_dtoa_r+0x338>
    e344:	80001115 	stw	zero,68(r16)
    e348:	000b883a 	mov	r5,zero
    e34c:	003d4606 	br	d868 <_dtoa_r+0x364>
    e350:	d8c00317 	ldw	r3,12(sp)
    e354:	183f0e1e 	bne	r3,zero,df90 <_dtoa_r+0xa8c>
    e358:	00c00434 	movhi	r3,16
    e35c:	18ffffc4 	addi	r3,r3,-1
    e360:	88c6703a 	and	r3,r17,r3
    e364:	183f0a1e 	bne	r3,zero,df90 <_dtoa_r+0xa8c>
    e368:	8c5ffc2c 	andhi	r17,r17,32752
    e36c:	883f0826 	beq	r17,zero,df90 <_dtoa_r+0xa8c>
    e370:	d9000817 	ldw	r4,32(sp)
    e374:	d9c00717 	ldw	r7,28(sp)
    e378:	1023883a 	mov	r17,r2
    e37c:	2089883a 	add	r4,r4,r2
    e380:	388f883a 	add	r7,r7,r2
    e384:	d9000815 	stw	r4,32(sp)
    e388:	d9c00715 	stw	r7,28(sp)
    e38c:	003f0106 	br	df94 <_dtoa_r+0xa90>
    e390:	9005883a 	mov	r2,r18
    e394:	003ed306 	br	dee4 <_dtoa_r+0x9e0>
    e398:	d8800917 	ldw	r2,36(sp)
    e39c:	00be3516 	blt	zero,r2,dc74 <_dtoa_r+0x770>
    e3a0:	1000b61e 	bne	r2,zero,e67c <_dtoa_r+0x1178>
    e3a4:	9009883a 	mov	r4,r18
    e3a8:	980b883a 	mov	r5,r19
    e3ac:	000d883a 	mov	r6,zero
    e3b0:	01d00534 	movhi	r7,16404
    e3b4:	00096200 	call	9620 <__muldf3>
    e3b8:	d9800317 	ldw	r6,12(sp)
    e3bc:	1009883a 	mov	r4,r2
    e3c0:	180b883a 	mov	r5,r3
    e3c4:	880f883a 	mov	r7,r17
    e3c8:	0012d0c0 	call	12d0c <__gedf2>
    e3cc:	0029883a 	mov	r20,zero
    e3d0:	002b883a 	mov	r21,zero
    e3d4:	10007e16 	blt	r2,zero,e5d0 <_dtoa_r+0x10cc>
    e3d8:	d8802117 	ldw	r2,132(sp)
    e3dc:	b82d883a 	mov	r22,r23
    e3e0:	0084303a 	nor	r2,zero,r2
    e3e4:	d8800615 	stw	r2,24(sp)
    e3e8:	8009883a 	mov	r4,r16
    e3ec:	a00b883a 	mov	r5,r20
    e3f0:	00100240 	call	10024 <_Bfree>
    e3f4:	a83f4b1e 	bne	r21,zero,e124 <_dtoa_r+0xc20>
    e3f8:	003de306 	br	db88 <_dtoa_r+0x684>
    e3fc:	e00b883a 	mov	r5,fp
    e400:	8009883a 	mov	r4,r16
    e404:	00106400 	call	10640 <__pow5mult>
    e408:	1039883a 	mov	fp,r2
    e40c:	003ed206 	br	df58 <_dtoa_r+0xa54>
    e410:	1000021e 	bne	r2,zero,e41c <_dtoa_r+0xf18>
    e414:	18c0004c 	andi	r3,r3,1
    e418:	183f271e 	bne	r3,zero,e0b8 <_dtoa_r+0xbb4>
    e41c:	01000c04 	movi	r4,48
    e420:	00000106 	br	e428 <_dtoa_r+0xf24>
    e424:	102d883a 	mov	r22,r2
    e428:	b0bfffc4 	addi	r2,r22,-1
    e42c:	10c00007 	ldb	r3,0(r2)
    e430:	193ffc26 	beq	r3,r4,e424 <_dtoa_r+0xf20>
    e434:	003f3206 	br	e100 <_dtoa_r+0xbfc>
    e438:	d8c00f17 	ldw	r3,60(sp)
    e43c:	18015026 	beq	r3,zero,e980 <_dtoa_r+0x147c>
    e440:	10810cc4 	addi	r2,r2,1075
    e444:	dcc00a17 	ldw	r19,40(sp)
    e448:	dc800817 	ldw	r18,32(sp)
    e44c:	003e9706 	br	deac <_dtoa_r+0x9a8>
    e450:	b807883a 	mov	r3,r23
    e454:	182b883a 	mov	r21,r3
    e458:	ddc00717 	ldw	r23,28(sp)
    e45c:	00800e0e 	bge	zero,r2,e498 <_dtoa_r+0xf94>
    e460:	e00b883a 	mov	r5,fp
    e464:	01800044 	movi	r6,1
    e468:	8009883a 	mov	r4,r16
    e46c:	d8c01515 	stw	r3,84(sp)
    e470:	001076c0 	call	1076c <__lshift>
    e474:	1009883a 	mov	r4,r2
    e478:	a00b883a 	mov	r5,r20
    e47c:	1039883a 	mov	fp,r2
    e480:	00108c80 	call	108c8 <__mcmp>
    e484:	d8c01517 	ldw	r3,84(sp)
    e488:	0081880e 	bge	zero,r2,eaac <_dtoa_r+0x15a8>
    e48c:	00800e44 	movi	r2,57
    e490:	b0c00c44 	addi	r3,r22,49
    e494:	a8816326 	beq	r21,r2,ea24 <_dtoa_r+0x1520>
    e498:	90c00005 	stb	r3,0(r18)
    e49c:	95800044 	addi	r22,r18,1
    e4a0:	982b883a 	mov	r21,r19
    e4a4:	003f1606 	br	e100 <_dtoa_r+0xbfc>
    e4a8:	300b883a 	mov	r5,r6
    e4ac:	e009883a 	mov	r4,fp
    e4b0:	d9801515 	stw	r6,84(sp)
    e4b4:	00108c80 	call	108c8 <__mcmp>
    e4b8:	d9801517 	ldw	r6,84(sp)
    e4bc:	8009883a 	mov	r4,r16
    e4c0:	d8801515 	stw	r2,84(sp)
    e4c4:	300b883a 	mov	r5,r6
    e4c8:	00100240 	call	10024 <_Bfree>
    e4cc:	d8801517 	ldw	r2,84(sp)
    e4d0:	103f6d1e 	bne	r2,zero,e288 <_dtoa_r+0xd84>
    e4d4:	d9c00417 	ldw	r7,16(sp)
    e4d8:	383f6b1e 	bne	r7,zero,e288 <_dtoa_r+0xd84>
    e4dc:	d8c00317 	ldw	r3,12(sp)
    e4e0:	183f691e 	bne	r3,zero,e288 <_dtoa_r+0xd84>
    e4e4:	b807883a 	mov	r3,r23
    e4e8:	00800e44 	movi	r2,57
    e4ec:	ddc00717 	ldw	r23,28(sp)
    e4f0:	18814c26 	beq	r3,r2,ea24 <_dtoa_r+0x1520>
    e4f4:	057fe80e 	bge	zero,r21,e498 <_dtoa_r+0xf94>
    e4f8:	b0c00c44 	addi	r3,r22,49
    e4fc:	003fe606 	br	e498 <_dtoa_r+0xf94>
    e500:	880b883a 	mov	r5,r17
    e504:	8009883a 	mov	r4,r16
    e508:	01800284 	movi	r6,10
    e50c:	000f883a 	mov	r7,zero
    e510:	001004c0 	call	1004c <__multadd>
    e514:	1023883a 	mov	r17,r2
    e518:	1027883a 	mov	r19,r2
    e51c:	a825883a 	mov	r18,r21
    e520:	003f4506 	br	e238 <_dtoa_r+0xd34>
    e524:	e009883a 	mov	r4,fp
    e528:	a00b883a 	mov	r5,r20
    e52c:	00108c80 	call	108c8 <__mcmp>
    e530:	103ebc0e 	bge	r2,zero,e024 <_dtoa_r+0xb20>
    e534:	e00b883a 	mov	r5,fp
    e538:	8009883a 	mov	r4,r16
    e53c:	01800284 	movi	r6,10
    e540:	000f883a 	mov	r7,zero
    e544:	001004c0 	call	1004c <__multadd>
    e548:	1039883a 	mov	fp,r2
    e54c:	d8800617 	ldw	r2,24(sp)
    e550:	d8c00c17 	ldw	r3,48(sp)
    e554:	10bfffc4 	addi	r2,r2,-1
    e558:	d8800615 	stw	r2,24(sp)
    e55c:	1801571e 	bne	r3,zero,eabc <_dtoa_r+0x15b8>
    e560:	d9c00e17 	ldw	r7,56(sp)
    e564:	d9c00915 	stw	r7,36(sp)
    e568:	003eae06 	br	e024 <_dtoa_r+0xb20>
    e56c:	a0800417 	ldw	r2,16(r20)
    e570:	10800104 	addi	r2,r2,4
    e574:	1085883a 	add	r2,r2,r2
    e578:	1085883a 	add	r2,r2,r2
    e57c:	a085883a 	add	r2,r20,r2
    e580:	11000017 	ldw	r4,0(r2)
    e584:	00102940 	call	10294 <__hi0bits>
    e588:	00c00804 	movi	r3,32
    e58c:	1885c83a 	sub	r2,r3,r2
    e590:	003e8306 	br	dfa0 <_dtoa_r+0xa9c>
    e594:	d9c00417 	ldw	r7,16(sp)
    e598:	00800084 	movi	r2,2
    e59c:	11fea30e 	bge	r2,r7,e02c <_dtoa_r+0xb28>
    e5a0:	d8800917 	ldw	r2,36(sp)
    e5a4:	103f8c1e 	bne	r2,zero,e3d8 <_dtoa_r+0xed4>
    e5a8:	a00b883a 	mov	r5,r20
    e5ac:	8009883a 	mov	r4,r16
    e5b0:	01800144 	movi	r6,5
    e5b4:	000f883a 	mov	r7,zero
    e5b8:	001004c0 	call	1004c <__multadd>
    e5bc:	e009883a 	mov	r4,fp
    e5c0:	100b883a 	mov	r5,r2
    e5c4:	1029883a 	mov	r20,r2
    e5c8:	00108c80 	call	108c8 <__mcmp>
    e5cc:	00bf820e 	bge	zero,r2,e3d8 <_dtoa_r+0xed4>
    e5d0:	00800c44 	movi	r2,49
    e5d4:	b8800005 	stb	r2,0(r23)
    e5d8:	d8800617 	ldw	r2,24(sp)
    e5dc:	bd800044 	addi	r22,r23,1
    e5e0:	10800044 	addi	r2,r2,1
    e5e4:	d8800615 	stw	r2,24(sp)
    e5e8:	003f7f06 	br	e3e8 <_dtoa_r+0xee4>
    e5ec:	dc000417 	ldw	r16,16(sp)
    e5f0:	003d6506 	br	db88 <_dtoa_r+0x684>
    e5f4:	9009883a 	mov	r4,r18
    e5f8:	0009b140 	call	9b14 <__floatsidf>
    e5fc:	1009883a 	mov	r4,r2
    e600:	180b883a 	mov	r5,r3
    e604:	980d883a 	mov	r6,r19
    e608:	a00f883a 	mov	r7,r20
    e60c:	00096200 	call	9620 <__muldf3>
    e610:	1009883a 	mov	r4,r2
    e614:	180b883a 	mov	r5,r3
    e618:	000d883a 	mov	r6,zero
    e61c:	01d00734 	movhi	r7,16412
    e620:	000956c0 	call	956c <__adddf3>
    e624:	057f3034 	movhi	r21,64704
    e628:	1025883a 	mov	r18,r2
    e62c:	1d6b883a 	add	r21,r3,r21
    e630:	9809883a 	mov	r4,r19
    e634:	a00b883a 	mov	r5,r20
    e638:	000d883a 	mov	r6,zero
    e63c:	01d00534 	movhi	r7,16404
    e640:	00095c00 	call	95c0 <__subdf3>
    e644:	1009883a 	mov	r4,r2
    e648:	180b883a 	mov	r5,r3
    e64c:	900d883a 	mov	r6,r18
    e650:	a80f883a 	mov	r7,r21
    e654:	1027883a 	mov	r19,r2
    e658:	1829883a 	mov	r20,r3
    e65c:	0012ca80 	call	12ca8 <__gtdf2>
    e660:	00806616 	blt	zero,r2,e7fc <_dtoa_r+0x12f8>
    e664:	a9e0003c 	xorhi	r7,r21,32768
    e668:	9809883a 	mov	r4,r19
    e66c:	a00b883a 	mov	r5,r20
    e670:	900d883a 	mov	r6,r18
    e674:	0009ab80 	call	9ab8 <__ltdf2>
    e678:	103d710e 	bge	r2,zero,dc40 <_dtoa_r+0x73c>
    e67c:	0029883a 	mov	r20,zero
    e680:	002b883a 	mov	r21,zero
    e684:	003f5406 	br	e3d8 <_dtoa_r+0xed4>
    e688:	d9800a17 	ldw	r6,40(sp)
    e68c:	e00b883a 	mov	r5,fp
    e690:	8009883a 	mov	r4,r16
    e694:	00106400 	call	10640 <__pow5mult>
    e698:	1039883a 	mov	fp,r2
    e69c:	003e2e06 	br	df58 <_dtoa_r+0xa54>
    e6a0:	d8000c15 	stw	zero,48(sp)
    e6a4:	003f2006 	br	e328 <_dtoa_r+0xe24>
    e6a8:	00800044 	movi	r2,1
    e6ac:	d8800c15 	stw	r2,48(sp)
    e6b0:	003c5d06 	br	d828 <_dtoa_r+0x324>
    e6b4:	d8c00a17 	ldw	r3,40(sp)
    e6b8:	d9000b17 	ldw	r4,44(sp)
    e6bc:	dcc00a15 	stw	r19,40(sp)
    e6c0:	98c5c83a 	sub	r2,r19,r3
    e6c4:	2089883a 	add	r4,r4,r2
    e6c8:	d9000b15 	stw	r4,44(sp)
    e6cc:	0027883a 	mov	r19,zero
    e6d0:	003df206 	br	de9c <_dtoa_r+0x998>
    e6d4:	d9000317 	ldw	r4,12(sp)
    e6d8:	8829883a 	mov	r20,r17
    e6dc:	04800084 	movi	r18,2
    e6e0:	d9001015 	stw	r4,64(sp)
    e6e4:	003c8106 	br	d8ec <_dtoa_r+0x3e8>
    e6e8:	04800044 	movi	r18,1
    e6ec:	dc800e15 	stw	r18,56(sp)
    e6f0:	dc800915 	stw	r18,36(sp)
    e6f4:	dc802115 	stw	r18,132(sp)
    e6f8:	003f1206 	br	e344 <_dtoa_r+0xe40>
    e6fc:	d8800617 	ldw	r2,24(sp)
    e700:	00abc83a 	sub	r21,zero,r2
    e704:	a800a426 	beq	r21,zero,e998 <_dtoa_r+0x1494>
    e708:	a88003cc 	andi	r2,r21,15
    e70c:	100490fa 	slli	r2,r2,3
    e710:	00c001f4 	movhi	r3,7
    e714:	18d14d04 	addi	r3,r3,17716
    e718:	d9000317 	ldw	r4,12(sp)
    e71c:	1885883a 	add	r2,r3,r2
    e720:	11800017 	ldw	r6,0(r2)
    e724:	11c00117 	ldw	r7,4(r2)
    e728:	a82bd13a 	srai	r21,r21,4
    e72c:	880b883a 	mov	r5,r17
    e730:	00096200 	call	9620 <__muldf3>
    e734:	1027883a 	mov	r19,r2
    e738:	1829883a 	mov	r20,r3
    e73c:	a800e826 	beq	r21,zero,eae0 <_dtoa_r+0x15dc>
    e740:	058001f4 	movhi	r22,7
    e744:	b5914304 	addi	r22,r22,17676
    e748:	04800084 	movi	r18,2
    e74c:	a980004c 	andi	r6,r21,1
    e750:	1009883a 	mov	r4,r2
    e754:	a82bd07a 	srai	r21,r21,1
    e758:	180b883a 	mov	r5,r3
    e75c:	30000426 	beq	r6,zero,e770 <_dtoa_r+0x126c>
    e760:	b1800017 	ldw	r6,0(r22)
    e764:	b1c00117 	ldw	r7,4(r22)
    e768:	94800044 	addi	r18,r18,1
    e76c:	00096200 	call	9620 <__muldf3>
    e770:	b5800204 	addi	r22,r22,8
    e774:	a83ff51e 	bne	r21,zero,e74c <_dtoa_r+0x1248>
    e778:	1027883a 	mov	r19,r2
    e77c:	1829883a 	mov	r20,r3
    e780:	003c7306 	br	d950 <_dtoa_r+0x44c>
    e784:	21000044 	addi	r4,r4,1
    e788:	11000005 	stb	r4,0(r2)
    e78c:	003e5c06 	br	e100 <_dtoa_r+0xbfc>
    e790:	a9400117 	ldw	r5,4(r21)
    e794:	8009883a 	mov	r4,r16
    e798:	000ff7c0 	call	ff7c <_Balloc>
    e79c:	a9800417 	ldw	r6,16(r21)
    e7a0:	11000304 	addi	r4,r2,12
    e7a4:	a9400304 	addi	r5,r21,12
    e7a8:	31800084 	addi	r6,r6,2
    e7ac:	318d883a 	add	r6,r6,r6
    e7b0:	318d883a 	add	r6,r6,r6
    e7b4:	1023883a 	mov	r17,r2
    e7b8:	000ac0c0 	call	ac0c <memcpy>
    e7bc:	8009883a 	mov	r4,r16
    e7c0:	880b883a 	mov	r5,r17
    e7c4:	01800044 	movi	r6,1
    e7c8:	001076c0 	call	1076c <__lshift>
    e7cc:	1027883a 	mov	r19,r2
    e7d0:	003e8f06 	br	e210 <_dtoa_r+0xd0c>
    e7d4:	b807883a 	mov	r3,r23
    e7d8:	00800e44 	movi	r2,57
    e7dc:	ddc00717 	ldw	r23,28(sp)
    e7e0:	18809026 	beq	r3,r2,ea24 <_dtoa_r+0x1520>
    e7e4:	18c00044 	addi	r3,r3,1
    e7e8:	003f2b06 	br	e498 <_dtoa_r+0xf94>
    e7ec:	b807883a 	mov	r3,r23
    e7f0:	982b883a 	mov	r21,r19
    e7f4:	ddc00717 	ldw	r23,28(sp)
    e7f8:	003e2406 	br	e08c <_dtoa_r+0xb88>
    e7fc:	0029883a 	mov	r20,zero
    e800:	002b883a 	mov	r21,zero
    e804:	003f7206 	br	e5d0 <_dtoa_r+0x10cc>
    e808:	593fffc4 	addi	r4,r11,-1
    e80c:	200490fa 	slli	r2,r4,3
    e810:	00c001f4 	movhi	r3,7
    e814:	18d14d04 	addi	r3,r3,17716
    e818:	d9001015 	stw	r4,64(sp)
    e81c:	1885883a 	add	r2,r3,r2
    e820:	11000017 	ldw	r4,0(r2)
    e824:	11400117 	ldw	r5,4(r2)
    e828:	900d883a 	mov	r6,r18
    e82c:	a80f883a 	mov	r7,r21
    e830:	dac01615 	stw	r11,88(sp)
    e834:	00096200 	call	9620 <__muldf3>
    e838:	a00b883a 	mov	r5,r20
    e83c:	9809883a 	mov	r4,r19
    e840:	d8c01215 	stw	r3,72(sp)
    e844:	d8801115 	stw	r2,68(sp)
    e848:	0009be80 	call	9be8 <__fixdfsi>
    e84c:	1009883a 	mov	r4,r2
    e850:	1025883a 	mov	r18,r2
    e854:	0009b140 	call	9b14 <__floatsidf>
    e858:	9809883a 	mov	r4,r19
    e85c:	a00b883a 	mov	r5,r20
    e860:	100d883a 	mov	r6,r2
    e864:	180f883a 	mov	r7,r3
    e868:	94800c04 	addi	r18,r18,48
    e86c:	00095c00 	call	95c0 <__subdf3>
    e870:	bc800005 	stb	r18,0(r23)
    e874:	dac01617 	ldw	r11,88(sp)
    e878:	102b883a 	mov	r21,r2
    e87c:	00800044 	movi	r2,1
    e880:	bd800044 	addi	r22,r23,1
    e884:	1815883a 	mov	r10,r3
    e888:	58802226 	beq	r11,r2,e914 <_dtoa_r+0x1410>
    e88c:	bad7883a 	add	r11,r23,r11
    e890:	dc001415 	stw	r16,80(sp)
    e894:	a805883a 	mov	r2,r21
    e898:	b027883a 	mov	r19,r22
    e89c:	5821883a 	mov	r16,r11
    e8a0:	882b883a 	mov	r21,r17
    e8a4:	000d883a 	mov	r6,zero
    e8a8:	01d00934 	movhi	r7,16420
    e8ac:	1009883a 	mov	r4,r2
    e8b0:	180b883a 	mov	r5,r3
    e8b4:	00096200 	call	9620 <__muldf3>
    e8b8:	180b883a 	mov	r5,r3
    e8bc:	1009883a 	mov	r4,r2
    e8c0:	1829883a 	mov	r20,r3
    e8c4:	1023883a 	mov	r17,r2
    e8c8:	0009be80 	call	9be8 <__fixdfsi>
    e8cc:	1009883a 	mov	r4,r2
    e8d0:	1025883a 	mov	r18,r2
    e8d4:	0009b140 	call	9b14 <__floatsidf>
    e8d8:	8809883a 	mov	r4,r17
    e8dc:	a00b883a 	mov	r5,r20
    e8e0:	100d883a 	mov	r6,r2
    e8e4:	180f883a 	mov	r7,r3
    e8e8:	94800c04 	addi	r18,r18,48
    e8ec:	00095c00 	call	95c0 <__subdf3>
    e8f0:	9cc00044 	addi	r19,r19,1
    e8f4:	9cbfffc5 	stb	r18,-1(r19)
    e8f8:	9c3fea1e 	bne	r19,r16,e8a4 <_dtoa_r+0x13a0>
    e8fc:	1815883a 	mov	r10,r3
    e900:	d8c01017 	ldw	r3,64(sp)
    e904:	dc001417 	ldw	r16,80(sp)
    e908:	a823883a 	mov	r17,r21
    e90c:	b0ed883a 	add	r22,r22,r3
    e910:	102b883a 	mov	r21,r2
    e914:	d9001117 	ldw	r4,68(sp)
    e918:	d9401217 	ldw	r5,72(sp)
    e91c:	000d883a 	mov	r6,zero
    e920:	01cff834 	movhi	r7,16352
    e924:	da801515 	stw	r10,84(sp)
    e928:	000956c0 	call	956c <__adddf3>
    e92c:	da801517 	ldw	r10,84(sp)
    e930:	1009883a 	mov	r4,r2
    e934:	180b883a 	mov	r5,r3
    e938:	500f883a 	mov	r7,r10
    e93c:	a80d883a 	mov	r6,r21
    e940:	0009ab80 	call	9ab8 <__ltdf2>
    e944:	da801517 	ldw	r10,84(sp)
    e948:	10003b0e 	bge	r2,zero,ea38 <_dtoa_r+0x1534>
    e94c:	d9c01317 	ldw	r7,76(sp)
    e950:	b53fffc3 	ldbu	r20,-1(r22)
    e954:	d9c00615 	stw	r7,24(sp)
    e958:	003d3106 	br	de20 <_dtoa_r+0x91c>
    e95c:	d8800817 	ldw	r2,32(sp)
    e960:	11e5c83a 	sub	r18,r2,r7
    e964:	0005883a 	mov	r2,zero
    e968:	003d5006 	br	deac <_dtoa_r+0x9a8>
    e96c:	05800044 	movi	r22,1
    e970:	003dc406 	br	e084 <_dtoa_r+0xb80>
    e974:	a5000044 	addi	r20,r20,1
    e978:	15000005 	stb	r20,0(r2)
    e97c:	003c8206 	br	db88 <_dtoa_r+0x684>
    e980:	d8800217 	ldw	r2,8(sp)
    e984:	00c00d84 	movi	r3,54
    e988:	dcc00a17 	ldw	r19,40(sp)
    e98c:	1885c83a 	sub	r2,r3,r2
    e990:	dc800817 	ldw	r18,32(sp)
    e994:	003d4506 	br	deac <_dtoa_r+0x9a8>
    e998:	dcc00317 	ldw	r19,12(sp)
    e99c:	8829883a 	mov	r20,r17
    e9a0:	04800084 	movi	r18,2
    e9a4:	003bea06 	br	d950 <_dtoa_r+0x44c>
    e9a8:	d9000917 	ldw	r4,36(sp)
    e9ac:	203f1126 	beq	r4,zero,e5f4 <_dtoa_r+0x10f0>
    e9b0:	d9c00e17 	ldw	r7,56(sp)
    e9b4:	01fca20e 	bge	zero,r7,dc40 <_dtoa_r+0x73c>
    e9b8:	a00b883a 	mov	r5,r20
    e9bc:	9809883a 	mov	r4,r19
    e9c0:	000d883a 	mov	r6,zero
    e9c4:	01d00934 	movhi	r7,16420
    e9c8:	00096200 	call	9620 <__muldf3>
    e9cc:	91000044 	addi	r4,r18,1
    e9d0:	1027883a 	mov	r19,r2
    e9d4:	1829883a 	mov	r20,r3
    e9d8:	0009b140 	call	9b14 <__floatsidf>
    e9dc:	9809883a 	mov	r4,r19
    e9e0:	a00b883a 	mov	r5,r20
    e9e4:	100d883a 	mov	r6,r2
    e9e8:	180f883a 	mov	r7,r3
    e9ec:	00096200 	call	9620 <__muldf3>
    e9f0:	1009883a 	mov	r4,r2
    e9f4:	180b883a 	mov	r5,r3
    e9f8:	000d883a 	mov	r6,zero
    e9fc:	01d00734 	movhi	r7,16412
    ea00:	000956c0 	call	956c <__adddf3>
    ea04:	1025883a 	mov	r18,r2
    ea08:	d8800617 	ldw	r2,24(sp)
    ea0c:	057f3034 	movhi	r21,64704
    ea10:	1d6b883a 	add	r21,r3,r21
    ea14:	10bfffc4 	addi	r2,r2,-1
    ea18:	d8801315 	stw	r2,76(sp)
    ea1c:	dac00e17 	ldw	r11,56(sp)
    ea20:	003be706 	br	d9c0 <_dtoa_r+0x4bc>
    ea24:	01000e44 	movi	r4,57
    ea28:	91000005 	stb	r4,0(r18)
    ea2c:	95800044 	addi	r22,r18,1
    ea30:	982b883a 	mov	r21,r19
    ea34:	003da106 	br	e0bc <_dtoa_r+0xbb8>
    ea38:	d9801117 	ldw	r6,68(sp)
    ea3c:	d9c01217 	ldw	r7,72(sp)
    ea40:	0009883a 	mov	r4,zero
    ea44:	014ff834 	movhi	r5,16352
    ea48:	da801515 	stw	r10,84(sp)
    ea4c:	00095c00 	call	95c0 <__subdf3>
    ea50:	da801517 	ldw	r10,84(sp)
    ea54:	1009883a 	mov	r4,r2
    ea58:	180b883a 	mov	r5,r3
    ea5c:	a80d883a 	mov	r6,r21
    ea60:	500f883a 	mov	r7,r10
    ea64:	0012ca80 	call	12ca8 <__gtdf2>
    ea68:	00bc750e 	bge	zero,r2,dc40 <_dtoa_r+0x73c>
    ea6c:	01000c04 	movi	r4,48
    ea70:	00000106 	br	ea78 <_dtoa_r+0x1574>
    ea74:	102d883a 	mov	r22,r2
    ea78:	b0bfffc4 	addi	r2,r22,-1
    ea7c:	10c00007 	ldb	r3,0(r2)
    ea80:	193ffc26 	beq	r3,r4,ea74 <_dtoa_r+0x1570>
    ea84:	d8801317 	ldw	r2,76(sp)
    ea88:	d8800615 	stw	r2,24(sp)
    ea8c:	003c3e06 	br	db88 <_dtoa_r+0x684>
    ea90:	d9001317 	ldw	r4,76(sp)
    ea94:	df001117 	ldw	fp,68(sp)
    ea98:	d9000615 	stw	r4,24(sp)
    ea9c:	003ce006 	br	de20 <_dtoa_r+0x91c>
    eaa0:	df001117 	ldw	fp,68(sp)
    eaa4:	dc401217 	ldw	r17,72(sp)
    eaa8:	003c6506 	br	dc40 <_dtoa_r+0x73c>
    eaac:	103e7a1e 	bne	r2,zero,e498 <_dtoa_r+0xf94>
    eab0:	1880004c 	andi	r2,r3,1
    eab4:	103e7826 	beq	r2,zero,e498 <_dtoa_r+0xf94>
    eab8:	003e7406 	br	e48c <_dtoa_r+0xf88>
    eabc:	8009883a 	mov	r4,r16
    eac0:	a80b883a 	mov	r5,r21
    eac4:	01800284 	movi	r6,10
    eac8:	000f883a 	mov	r7,zero
    eacc:	001004c0 	call	1004c <__multadd>
    ead0:	d9000e17 	ldw	r4,56(sp)
    ead4:	102b883a 	mov	r21,r2
    ead8:	d9000915 	stw	r4,36(sp)
    eadc:	003d5106 	br	e024 <_dtoa_r+0xb20>
    eae0:	04800084 	movi	r18,2
    eae4:	003b9a06 	br	d950 <_dtoa_r+0x44c>
    eae8:	d8c01317 	ldw	r3,76(sp)
    eaec:	d8c00615 	stw	r3,24(sp)
    eaf0:	003ccb06 	br	de20 <_dtoa_r+0x91c>
    eaf4:	d8c01317 	ldw	r3,76(sp)
    eaf8:	d8c00615 	stw	r3,24(sp)
    eafc:	003c2206 	br	db88 <_dtoa_r+0x684>
    eb00:	20fd3826 	beq	r4,r3,dfe4 <_dtoa_r+0xae0>
    eb04:	00c00f04 	movi	r3,60
    eb08:	1885c83a 	sub	r2,r3,r2
    eb0c:	003da906 	br	e1b4 <_dtoa_r+0xcb0>
    eb10:	000b883a 	mov	r5,zero
    eb14:	003b5406 	br	d868 <_dtoa_r+0x364>
    eb18:	04c00044 	movi	r19,1
    eb1c:	003b3b06 	br	d80c <_dtoa_r+0x308>

0000eb20 <_fflush_r>:
    eb20:	defffb04 	addi	sp,sp,-20
    eb24:	dcc00315 	stw	r19,12(sp)
    eb28:	dc400115 	stw	r17,4(sp)
    eb2c:	dfc00415 	stw	ra,16(sp)
    eb30:	dc800215 	stw	r18,8(sp)
    eb34:	dc000015 	stw	r16,0(sp)
    eb38:	2027883a 	mov	r19,r4
    eb3c:	2823883a 	mov	r17,r5
    eb40:	20000226 	beq	r4,zero,eb4c <_fflush_r+0x2c>
    eb44:	20800e17 	ldw	r2,56(r4)
    eb48:	10005726 	beq	r2,zero,eca8 <_fflush_r+0x188>
    eb4c:	8880030b 	ldhu	r2,12(r17)
    eb50:	10c0020c 	andi	r3,r2,8
    eb54:	18ffffcc 	andi	r3,r3,65535
    eb58:	18e0001c 	xori	r3,r3,32768
    eb5c:	18e00004 	addi	r3,r3,-32768
    eb60:	1800311e 	bne	r3,zero,ec28 <_fflush_r+0x108>
    eb64:	89000117 	ldw	r4,4(r17)
    eb68:	10c20014 	ori	r3,r2,2048
    eb6c:	88c0030d 	sth	r3,12(r17)
    eb70:	180b883a 	mov	r5,r3
    eb74:	0100520e 	bge	zero,r4,ecc0 <_fflush_r+0x1a0>
    eb78:	88c00a17 	ldw	r3,40(r17)
    eb7c:	18002226 	beq	r3,zero,ec08 <_fflush_r+0xe8>
    eb80:	1084000c 	andi	r2,r2,4096
    eb84:	10bfffcc 	andi	r2,r2,65535
    eb88:	10a0001c 	xori	r2,r2,32768
    eb8c:	10a00004 	addi	r2,r2,-32768
    eb90:	10004e26 	beq	r2,zero,eccc <_fflush_r+0x1ac>
    eb94:	8c001417 	ldw	r16,80(r17)
    eb98:	2940010c 	andi	r5,r5,4
    eb9c:	297fffcc 	andi	r5,r5,65535
    eba0:	2960001c 	xori	r5,r5,32768
    eba4:	29600004 	addi	r5,r5,-32768
    eba8:	28000626 	beq	r5,zero,ebc4 <_fflush_r+0xa4>
    ebac:	89000117 	ldw	r4,4(r17)
    ebb0:	88800c17 	ldw	r2,48(r17)
    ebb4:	8121c83a 	sub	r16,r16,r4
    ebb8:	10000226 	beq	r2,zero,ebc4 <_fflush_r+0xa4>
    ebbc:	88800f17 	ldw	r2,60(r17)
    ebc0:	80a1c83a 	sub	r16,r16,r2
    ebc4:	89400717 	ldw	r5,28(r17)
    ebc8:	9809883a 	mov	r4,r19
    ebcc:	800d883a 	mov	r6,r16
    ebd0:	000f883a 	mov	r7,zero
    ebd4:	183ee83a 	callr	r3
    ebd8:	8080281e 	bne	r16,r2,ec7c <_fflush_r+0x15c>
    ebdc:	8880030b 	ldhu	r2,12(r17)
    ebe0:	88c00417 	ldw	r3,16(r17)
    ebe4:	88000115 	stw	zero,4(r17)
    ebe8:	113dffcc 	andi	r4,r2,63487
    ebec:	1084000c 	andi	r2,r2,4096
    ebf0:	10bfffcc 	andi	r2,r2,65535
    ebf4:	10a0001c 	xori	r2,r2,32768
    ebf8:	8900030d 	sth	r4,12(r17)
    ebfc:	88c00015 	stw	r3,0(r17)
    ec00:	10a00004 	addi	r2,r2,-32768
    ec04:	10002c1e 	bne	r2,zero,ecb8 <_fflush_r+0x198>
    ec08:	0005883a 	mov	r2,zero
    ec0c:	dfc00417 	ldw	ra,16(sp)
    ec10:	dcc00317 	ldw	r19,12(sp)
    ec14:	dc800217 	ldw	r18,8(sp)
    ec18:	dc400117 	ldw	r17,4(sp)
    ec1c:	dc000017 	ldw	r16,0(sp)
    ec20:	dec00504 	addi	sp,sp,20
    ec24:	f800283a 	ret
    ec28:	8c800417 	ldw	r18,16(r17)
    ec2c:	903ff626 	beq	r18,zero,ec08 <_fflush_r+0xe8>
    ec30:	8c000017 	ldw	r16,0(r17)
    ec34:	108000cc 	andi	r2,r2,3
    ec38:	8c800015 	stw	r18,0(r17)
    ec3c:	84a1c83a 	sub	r16,r16,r18
    ec40:	10001b1e 	bne	r2,zero,ecb0 <_fflush_r+0x190>
    ec44:	88800517 	ldw	r2,20(r17)
    ec48:	88800215 	stw	r2,8(r17)
    ec4c:	04000316 	blt	zero,r16,ec5c <_fflush_r+0x13c>
    ec50:	003fed06 	br	ec08 <_fflush_r+0xe8>
    ec54:	90a5883a 	add	r18,r18,r2
    ec58:	043feb0e 	bge	zero,r16,ec08 <_fflush_r+0xe8>
    ec5c:	88800917 	ldw	r2,36(r17)
    ec60:	89400717 	ldw	r5,28(r17)
    ec64:	800f883a 	mov	r7,r16
    ec68:	900d883a 	mov	r6,r18
    ec6c:	9809883a 	mov	r4,r19
    ec70:	103ee83a 	callr	r2
    ec74:	80a1c83a 	sub	r16,r16,r2
    ec78:	00bff616 	blt	zero,r2,ec54 <_fflush_r+0x134>
    ec7c:	88c0030b 	ldhu	r3,12(r17)
    ec80:	00bfffc4 	movi	r2,-1
    ec84:	18c01014 	ori	r3,r3,64
    ec88:	88c0030d 	sth	r3,12(r17)
    ec8c:	dfc00417 	ldw	ra,16(sp)
    ec90:	dcc00317 	ldw	r19,12(sp)
    ec94:	dc800217 	ldw	r18,8(sp)
    ec98:	dc400117 	ldw	r17,4(sp)
    ec9c:	dc000017 	ldw	r16,0(sp)
    eca0:	dec00504 	addi	sp,sp,20
    eca4:	f800283a 	ret
    eca8:	000eddc0 	call	eddc <__sinit>
    ecac:	003fa706 	br	eb4c <_fflush_r+0x2c>
    ecb0:	0005883a 	mov	r2,zero
    ecb4:	003fe406 	br	ec48 <_fflush_r+0x128>
    ecb8:	8c001415 	stw	r16,80(r17)
    ecbc:	003fd206 	br	ec08 <_fflush_r+0xe8>
    ecc0:	88c00f17 	ldw	r3,60(r17)
    ecc4:	00ffac16 	blt	zero,r3,eb78 <_fflush_r+0x58>
    ecc8:	003fcf06 	br	ec08 <_fflush_r+0xe8>
    eccc:	89400717 	ldw	r5,28(r17)
    ecd0:	9809883a 	mov	r4,r19
    ecd4:	000d883a 	mov	r6,zero
    ecd8:	01c00044 	movi	r7,1
    ecdc:	183ee83a 	callr	r3
    ece0:	1021883a 	mov	r16,r2
    ece4:	00bfffc4 	movi	r2,-1
    ece8:	80800326 	beq	r16,r2,ecf8 <_fflush_r+0x1d8>
    ecec:	8940030b 	ldhu	r5,12(r17)
    ecf0:	88c00a17 	ldw	r3,40(r17)
    ecf4:	003fa806 	br	eb98 <_fflush_r+0x78>
    ecf8:	98c00017 	ldw	r3,0(r19)
    ecfc:	00800744 	movi	r2,29
    ed00:	18bfde1e 	bne	r3,r2,ec7c <_fflush_r+0x15c>
    ed04:	003fc006 	br	ec08 <_fflush_r+0xe8>

0000ed08 <fflush>:
    ed08:	200b883a 	mov	r5,r4
    ed0c:	20000426 	beq	r4,zero,ed20 <fflush+0x18>
    ed10:	008001f4 	movhi	r2,7
    ed14:	109f0704 	addi	r2,r2,31772
    ed18:	11000017 	ldw	r4,0(r2)
    ed1c:	000eb201 	jmpi	eb20 <_fflush_r>
    ed20:	008001f4 	movhi	r2,7
    ed24:	109f0604 	addi	r2,r2,31768
    ed28:	11000017 	ldw	r4,0(r2)
    ed2c:	01400074 	movhi	r5,1
    ed30:	297ac804 	addi	r5,r5,-5344
    ed34:	000f9bc1 	jmpi	f9bc <_fwalk_reent>

0000ed38 <__fp_lock>:
    ed38:	0005883a 	mov	r2,zero
    ed3c:	f800283a 	ret

0000ed40 <__fp_unlock>:
    ed40:	0005883a 	mov	r2,zero
    ed44:	f800283a 	ret

0000ed48 <_cleanup_r>:
    ed48:	01400074 	movhi	r5,1
    ed4c:	29477004 	addi	r5,r5,7616
    ed50:	000f9141 	jmpi	f914 <_fwalk>

0000ed54 <__sfmoreglue>:
    ed54:	defffc04 	addi	sp,sp,-16
    ed58:	dc800215 	stw	r18,8(sp)
    ed5c:	2825883a 	mov	r18,r5
    ed60:	dc000015 	stw	r16,0(sp)
    ed64:	01401704 	movi	r5,92
    ed68:	2021883a 	mov	r16,r4
    ed6c:	9009883a 	mov	r4,r18
    ed70:	dfc00315 	stw	ra,12(sp)
    ed74:	dc400115 	stw	r17,4(sp)
    ed78:	0009dec0 	call	9dec <__mulsi3>
    ed7c:	8009883a 	mov	r4,r16
    ed80:	11400304 	addi	r5,r2,12
    ed84:	1023883a 	mov	r17,r2
    ed88:	000a4880 	call	a488 <_malloc_r>
    ed8c:	1021883a 	mov	r16,r2
    ed90:	10000726 	beq	r2,zero,edb0 <__sfmoreglue+0x5c>
    ed94:	11000304 	addi	r4,r2,12
    ed98:	10000015 	stw	zero,0(r2)
    ed9c:	14800115 	stw	r18,4(r2)
    eda0:	11000215 	stw	r4,8(r2)
    eda4:	000b883a 	mov	r5,zero
    eda8:	880d883a 	mov	r6,r17
    edac:	000ad4c0 	call	ad4c <memset>
    edb0:	8005883a 	mov	r2,r16
    edb4:	dfc00317 	ldw	ra,12(sp)
    edb8:	dc800217 	ldw	r18,8(sp)
    edbc:	dc400117 	ldw	r17,4(sp)
    edc0:	dc000017 	ldw	r16,0(sp)
    edc4:	dec00404 	addi	sp,sp,16
    edc8:	f800283a 	ret

0000edcc <_cleanup>:
    edcc:	008001f4 	movhi	r2,7
    edd0:	109f0604 	addi	r2,r2,31768
    edd4:	11000017 	ldw	r4,0(r2)
    edd8:	000ed481 	jmpi	ed48 <_cleanup_r>

0000eddc <__sinit>:
    eddc:	20800e17 	ldw	r2,56(r4)
    ede0:	1000401e 	bne	r2,zero,eee4 <__sinit+0x108>
    ede4:	21400117 	ldw	r5,4(r4)
    ede8:	01800074 	movhi	r6,1
    edec:	31bb5204 	addi	r6,r6,-4792
    edf0:	20c00217 	ldw	r3,8(r4)
    edf4:	21800f15 	stw	r6,60(r4)
    edf8:	2080bb04 	addi	r2,r4,748
    edfc:	02400044 	movi	r9,1
    ee00:	018000c4 	movi	r6,3
    ee04:	2180b915 	stw	r6,740(r4)
    ee08:	2080ba15 	stw	r2,744(r4)
    ee0c:	22400e15 	stw	r9,56(r4)
    ee10:	20800317 	ldw	r2,12(r4)
    ee14:	2000b815 	stw	zero,736(r4)
    ee18:	02000074 	movhi	r8,1
    ee1c:	4205eb04 	addi	r8,r8,6060
    ee20:	01c00074 	movhi	r7,1
    ee24:	39c60004 	addi	r7,r7,6144
    ee28:	01800074 	movhi	r6,1
    ee2c:	31862204 	addi	r6,r6,6280
    ee30:	01000074 	movhi	r4,1
    ee34:	21063904 	addi	r4,r4,6372
    ee38:	02800104 	movi	r10,4
    ee3c:	28000015 	stw	zero,0(r5)
    ee40:	28000115 	stw	zero,4(r5)
    ee44:	28000215 	stw	zero,8(r5)
    ee48:	2a80030d 	sth	r10,12(r5)
    ee4c:	2800038d 	sth	zero,14(r5)
    ee50:	28000415 	stw	zero,16(r5)
    ee54:	28000515 	stw	zero,20(r5)
    ee58:	28000615 	stw	zero,24(r5)
    ee5c:	29400715 	stw	r5,28(r5)
    ee60:	2a000815 	stw	r8,32(r5)
    ee64:	29c00915 	stw	r7,36(r5)
    ee68:	29800a15 	stw	r6,40(r5)
    ee6c:	29000b15 	stw	r4,44(r5)
    ee70:	01400284 	movi	r5,10
    ee74:	18000015 	stw	zero,0(r3)
    ee78:	18000115 	stw	zero,4(r3)
    ee7c:	18000215 	stw	zero,8(r3)
    ee80:	1940030d 	sth	r5,12(r3)
    ee84:	1a40038d 	sth	r9,14(r3)
    ee88:	18000415 	stw	zero,16(r3)
    ee8c:	18000515 	stw	zero,20(r3)
    ee90:	18000615 	stw	zero,24(r3)
    ee94:	18c00715 	stw	r3,28(r3)
    ee98:	1a000815 	stw	r8,32(r3)
    ee9c:	19c00915 	stw	r7,36(r3)
    eea0:	19800a15 	stw	r6,40(r3)
    eea4:	19000b15 	stw	r4,44(r3)
    eea8:	00c00484 	movi	r3,18
    eeac:	10c0030d 	sth	r3,12(r2)
    eeb0:	00c00084 	movi	r3,2
    eeb4:	10000015 	stw	zero,0(r2)
    eeb8:	10000115 	stw	zero,4(r2)
    eebc:	10000215 	stw	zero,8(r2)
    eec0:	10c0038d 	sth	r3,14(r2)
    eec4:	10000415 	stw	zero,16(r2)
    eec8:	10000515 	stw	zero,20(r2)
    eecc:	10000615 	stw	zero,24(r2)
    eed0:	10800715 	stw	r2,28(r2)
    eed4:	12000815 	stw	r8,32(r2)
    eed8:	11c00915 	stw	r7,36(r2)
    eedc:	11800a15 	stw	r6,40(r2)
    eee0:	11000b15 	stw	r4,44(r2)
    eee4:	f800283a 	ret

0000eee8 <__sfp>:
    eee8:	defffc04 	addi	sp,sp,-16
    eeec:	008001f4 	movhi	r2,7
    eef0:	109f0604 	addi	r2,r2,31768
    eef4:	dc400115 	stw	r17,4(sp)
    eef8:	14400017 	ldw	r17,0(r2)
    eefc:	dc800215 	stw	r18,8(sp)
    ef00:	dfc00315 	stw	ra,12(sp)
    ef04:	88800e17 	ldw	r2,56(r17)
    ef08:	dc000015 	stw	r16,0(sp)
    ef0c:	2025883a 	mov	r18,r4
    ef10:	10002826 	beq	r2,zero,efb4 <__sfp+0xcc>
    ef14:	8c40b804 	addi	r17,r17,736
    ef18:	043fffc4 	movi	r16,-1
    ef1c:	89400117 	ldw	r5,4(r17)
    ef20:	88800217 	ldw	r2,8(r17)
    ef24:	297fffc4 	addi	r5,r5,-1
    ef28:	28000a16 	blt	r5,zero,ef54 <__sfp+0x6c>
    ef2c:	10c0030f 	ldh	r3,12(r2)
    ef30:	18000c26 	beq	r3,zero,ef64 <__sfp+0x7c>
    ef34:	10c01a04 	addi	r3,r2,104
    ef38:	00000206 	br	ef44 <__sfp+0x5c>
    ef3c:	19bfe90f 	ldh	r6,-92(r3)
    ef40:	30000826 	beq	r6,zero,ef64 <__sfp+0x7c>
    ef44:	297fffc4 	addi	r5,r5,-1
    ef48:	18bffd04 	addi	r2,r3,-12
    ef4c:	18c01704 	addi	r3,r3,92
    ef50:	2c3ffa1e 	bne	r5,r16,ef3c <__sfp+0x54>
    ef54:	88800017 	ldw	r2,0(r17)
    ef58:	10001926 	beq	r2,zero,efc0 <__sfp+0xd8>
    ef5c:	1023883a 	mov	r17,r2
    ef60:	003fee06 	br	ef1c <__sfp+0x34>
    ef64:	00ffffc4 	movi	r3,-1
    ef68:	10c0038d 	sth	r3,14(r2)
    ef6c:	00c00044 	movi	r3,1
    ef70:	10c0030d 	sth	r3,12(r2)
    ef74:	10000015 	stw	zero,0(r2)
    ef78:	10000215 	stw	zero,8(r2)
    ef7c:	10000115 	stw	zero,4(r2)
    ef80:	10000415 	stw	zero,16(r2)
    ef84:	10000515 	stw	zero,20(r2)
    ef88:	10000615 	stw	zero,24(r2)
    ef8c:	10000c15 	stw	zero,48(r2)
    ef90:	10000d15 	stw	zero,52(r2)
    ef94:	10001115 	stw	zero,68(r2)
    ef98:	10001215 	stw	zero,72(r2)
    ef9c:	dfc00317 	ldw	ra,12(sp)
    efa0:	dc800217 	ldw	r18,8(sp)
    efa4:	dc400117 	ldw	r17,4(sp)
    efa8:	dc000017 	ldw	r16,0(sp)
    efac:	dec00404 	addi	sp,sp,16
    efb0:	f800283a 	ret
    efb4:	8809883a 	mov	r4,r17
    efb8:	000eddc0 	call	eddc <__sinit>
    efbc:	003fd506 	br	ef14 <__sfp+0x2c>
    efc0:	9009883a 	mov	r4,r18
    efc4:	01400104 	movi	r5,4
    efc8:	000ed540 	call	ed54 <__sfmoreglue>
    efcc:	88800015 	stw	r2,0(r17)
    efd0:	103fe21e 	bne	r2,zero,ef5c <__sfp+0x74>
    efd4:	00800304 	movi	r2,12
    efd8:	90800015 	stw	r2,0(r18)
    efdc:	0005883a 	mov	r2,zero
    efe0:	003fee06 	br	ef9c <__sfp+0xb4>

0000efe4 <__sfp_lock_acquire>:
    efe4:	f800283a 	ret

0000efe8 <__sfp_lock_release>:
    efe8:	f800283a 	ret

0000efec <__sinit_lock_acquire>:
    efec:	f800283a 	ret

0000eff0 <__sinit_lock_release>:
    eff0:	f800283a 	ret

0000eff4 <__fp_lock_all>:
    eff4:	008001f4 	movhi	r2,7
    eff8:	109f0704 	addi	r2,r2,31772
    effc:	11000017 	ldw	r4,0(r2)
    f000:	01400074 	movhi	r5,1
    f004:	297b4e04 	addi	r5,r5,-4808
    f008:	000f9141 	jmpi	f914 <_fwalk>

0000f00c <__fp_unlock_all>:
    f00c:	008001f4 	movhi	r2,7
    f010:	109f0704 	addi	r2,r2,31772
    f014:	11000017 	ldw	r4,0(r2)
    f018:	01400074 	movhi	r5,1
    f01c:	297b5004 	addi	r5,r5,-4800
    f020:	000f9141 	jmpi	f914 <_fwalk>

0000f024 <_malloc_trim_r>:
    f024:	defffb04 	addi	sp,sp,-20
    f028:	dcc00315 	stw	r19,12(sp)
    f02c:	dc800215 	stw	r18,8(sp)
    f030:	dc400115 	stw	r17,4(sp)
    f034:	dc000015 	stw	r16,0(sp)
    f038:	2827883a 	mov	r19,r5
    f03c:	dfc00415 	stw	ra,16(sp)
    f040:	044001f4 	movhi	r17,7
    f044:	8c597c04 	addi	r17,r17,26096
    f048:	2021883a 	mov	r16,r4
    f04c:	001375c0 	call	1375c <__malloc_lock>
    f050:	88800217 	ldw	r2,8(r17)
    f054:	14800117 	ldw	r18,4(r2)
    f058:	00bfff04 	movi	r2,-4
    f05c:	90a4703a 	and	r18,r18,r2
    f060:	9083fbc4 	addi	r2,r18,4079
    f064:	14e7c83a 	sub	r19,r2,r19
    f068:	9826d33a 	srli	r19,r19,12
    f06c:	0083ffc4 	movi	r2,4095
    f070:	9cffffc4 	addi	r19,r19,-1
    f074:	9826933a 	slli	r19,r19,12
    f078:	14c0060e 	bge	r2,r19,f094 <_malloc_trim_r+0x70>
    f07c:	8009883a 	mov	r4,r16
    f080:	000b883a 	mov	r5,zero
    f084:	000af4c0 	call	af4c <_sbrk_r>
    f088:	88c00217 	ldw	r3,8(r17)
    f08c:	1c87883a 	add	r3,r3,r18
    f090:	10c00a26 	beq	r2,r3,f0bc <_malloc_trim_r+0x98>
    f094:	8009883a 	mov	r4,r16
    f098:	001377c0 	call	1377c <__malloc_unlock>
    f09c:	0005883a 	mov	r2,zero
    f0a0:	dfc00417 	ldw	ra,16(sp)
    f0a4:	dcc00317 	ldw	r19,12(sp)
    f0a8:	dc800217 	ldw	r18,8(sp)
    f0ac:	dc400117 	ldw	r17,4(sp)
    f0b0:	dc000017 	ldw	r16,0(sp)
    f0b4:	dec00504 	addi	sp,sp,20
    f0b8:	f800283a 	ret
    f0bc:	8009883a 	mov	r4,r16
    f0c0:	04cbc83a 	sub	r5,zero,r19
    f0c4:	000af4c0 	call	af4c <_sbrk_r>
    f0c8:	00ffffc4 	movi	r3,-1
    f0cc:	10c01326 	beq	r2,r3,f11c <_malloc_trim_r+0xf8>
    f0d0:	00800234 	movhi	r2,8
    f0d4:	10acab04 	addi	r2,r2,-19796
    f0d8:	11000017 	ldw	r4,0(r2)
    f0dc:	88c00217 	ldw	r3,8(r17)
    f0e0:	94e5c83a 	sub	r18,r18,r19
    f0e4:	94800054 	ori	r18,r18,1
    f0e8:	24e7c83a 	sub	r19,r4,r19
    f0ec:	1c800115 	stw	r18,4(r3)
    f0f0:	8009883a 	mov	r4,r16
    f0f4:	14c00015 	stw	r19,0(r2)
    f0f8:	001377c0 	call	1377c <__malloc_unlock>
    f0fc:	00800044 	movi	r2,1
    f100:	dfc00417 	ldw	ra,16(sp)
    f104:	dcc00317 	ldw	r19,12(sp)
    f108:	dc800217 	ldw	r18,8(sp)
    f10c:	dc400117 	ldw	r17,4(sp)
    f110:	dc000017 	ldw	r16,0(sp)
    f114:	dec00504 	addi	sp,sp,20
    f118:	f800283a 	ret
    f11c:	8009883a 	mov	r4,r16
    f120:	000b883a 	mov	r5,zero
    f124:	000af4c0 	call	af4c <_sbrk_r>
    f128:	88c00217 	ldw	r3,8(r17)
    f12c:	014003c4 	movi	r5,15
    f130:	10c9c83a 	sub	r4,r2,r3
    f134:	293fd70e 	bge	r5,r4,f094 <_malloc_trim_r+0x70>
    f138:	014001f4 	movhi	r5,7
    f13c:	295f0804 	addi	r5,r5,31776
    f140:	29400017 	ldw	r5,0(r5)
    f144:	21000054 	ori	r4,r4,1
    f148:	19000115 	stw	r4,4(r3)
    f14c:	1145c83a 	sub	r2,r2,r5
    f150:	01400234 	movhi	r5,8
    f154:	296cab04 	addi	r5,r5,-19796
    f158:	28800015 	stw	r2,0(r5)
    f15c:	003fcd06 	br	f094 <_malloc_trim_r+0x70>

0000f160 <_free_r>:
    f160:	defffd04 	addi	sp,sp,-12
    f164:	dc400115 	stw	r17,4(sp)
    f168:	dc000015 	stw	r16,0(sp)
    f16c:	dfc00215 	stw	ra,8(sp)
    f170:	2821883a 	mov	r16,r5
    f174:	2023883a 	mov	r17,r4
    f178:	28004b26 	beq	r5,zero,f2a8 <_free_r+0x148>
    f17c:	001375c0 	call	1375c <__malloc_lock>
    f180:	823fff17 	ldw	r8,-4(r16)
    f184:	00bfff84 	movi	r2,-2
    f188:	81bffe04 	addi	r6,r16,-8
    f18c:	4084703a 	and	r2,r8,r2
    f190:	3087883a 	add	r3,r6,r2
    f194:	014001f4 	movhi	r5,7
    f198:	29597c04 	addi	r5,r5,26096
    f19c:	1a400117 	ldw	r9,4(r3)
    f1a0:	29000217 	ldw	r4,8(r5)
    f1a4:	01ffff04 	movi	r7,-4
    f1a8:	49ce703a 	and	r7,r9,r7
    f1ac:	20c06526 	beq	r4,r3,f344 <_free_r+0x1e4>
    f1b0:	19c00115 	stw	r7,4(r3)
    f1b4:	4200004c 	andi	r8,r8,1
    f1b8:	40003026 	beq	r8,zero,f27c <_free_r+0x11c>
    f1bc:	0009883a 	mov	r4,zero
    f1c0:	19d1883a 	add	r8,r3,r7
    f1c4:	42000117 	ldw	r8,4(r8)
    f1c8:	4200004c 	andi	r8,r8,1
    f1cc:	4000061e 	bne	r8,zero,f1e8 <_free_r+0x88>
    f1d0:	11c5883a 	add	r2,r2,r7
    f1d4:	19c00217 	ldw	r7,8(r3)
    f1d8:	20004e26 	beq	r4,zero,f314 <_free_r+0x1b4>
    f1dc:	18c00317 	ldw	r3,12(r3)
    f1e0:	38c00315 	stw	r3,12(r7)
    f1e4:	19c00215 	stw	r7,8(r3)
    f1e8:	11c00054 	ori	r7,r2,1
    f1ec:	3087883a 	add	r3,r6,r2
    f1f0:	31c00115 	stw	r7,4(r6)
    f1f4:	18800015 	stw	r2,0(r3)
    f1f8:	20001a1e 	bne	r4,zero,f264 <_free_r+0x104>
    f1fc:	00c07fc4 	movi	r3,511
    f200:	18802e2e 	bgeu	r3,r2,f2bc <_free_r+0x15c>
    f204:	1006d27a 	srli	r3,r2,9
    f208:	01000104 	movi	r4,4
    f20c:	20c06636 	bltu	r4,r3,f3a8 <_free_r+0x248>
    f210:	1008d1ba 	srli	r4,r2,6
    f214:	21000e04 	addi	r4,r4,56
    f218:	210f883a 	add	r7,r4,r4
    f21c:	39cf883a 	add	r7,r7,r7
    f220:	39cf883a 	add	r7,r7,r7
    f224:	29cf883a 	add	r7,r5,r7
    f228:	38c00217 	ldw	r3,8(r7)
    f22c:	014001f4 	movhi	r5,7
    f230:	29597c04 	addi	r5,r5,26096
    f234:	19c06126 	beq	r3,r7,f3bc <_free_r+0x25c>
    f238:	013fff04 	movi	r4,-4
    f23c:	19400117 	ldw	r5,4(r3)
    f240:	290a703a 	and	r5,r5,r4
    f244:	1140022e 	bgeu	r2,r5,f250 <_free_r+0xf0>
    f248:	18c00217 	ldw	r3,8(r3)
    f24c:	38fffb1e 	bne	r7,r3,f23c <_free_r+0xdc>
    f250:	18800317 	ldw	r2,12(r3)
    f254:	30800315 	stw	r2,12(r6)
    f258:	30c00215 	stw	r3,8(r6)
    f25c:	11800215 	stw	r6,8(r2)
    f260:	19800315 	stw	r6,12(r3)
    f264:	8809883a 	mov	r4,r17
    f268:	dfc00217 	ldw	ra,8(sp)
    f26c:	dc400117 	ldw	r17,4(sp)
    f270:	dc000017 	ldw	r16,0(sp)
    f274:	dec00304 	addi	sp,sp,12
    f278:	001377c1 	jmpi	1377c <__malloc_unlock>
    f27c:	813ffe17 	ldw	r4,-8(r16)
    f280:	2a400204 	addi	r9,r5,8
    f284:	310dc83a 	sub	r6,r6,r4
    f288:	32000217 	ldw	r8,8(r6)
    f28c:	1105883a 	add	r2,r2,r4
    f290:	42404326 	beq	r8,r9,f3a0 <_free_r+0x240>
    f294:	32400317 	ldw	r9,12(r6)
    f298:	0009883a 	mov	r4,zero
    f29c:	42400315 	stw	r9,12(r8)
    f2a0:	4a000215 	stw	r8,8(r9)
    f2a4:	003fc606 	br	f1c0 <_free_r+0x60>
    f2a8:	dfc00217 	ldw	ra,8(sp)
    f2ac:	dc400117 	ldw	r17,4(sp)
    f2b0:	dc000017 	ldw	r16,0(sp)
    f2b4:	dec00304 	addi	sp,sp,12
    f2b8:	f800283a 	ret
    f2bc:	1004d0fa 	srli	r2,r2,3
    f2c0:	02000044 	movi	r8,1
    f2c4:	29c00117 	ldw	r7,4(r5)
    f2c8:	1087883a 	add	r3,r2,r2
    f2cc:	18c7883a 	add	r3,r3,r3
    f2d0:	1005d0ba 	srai	r2,r2,2
    f2d4:	18c7883a 	add	r3,r3,r3
    f2d8:	28c7883a 	add	r3,r5,r3
    f2dc:	19000217 	ldw	r4,8(r3)
    f2e0:	4084983a 	sll	r2,r8,r2
    f2e4:	30c00315 	stw	r3,12(r6)
    f2e8:	31000215 	stw	r4,8(r6)
    f2ec:	11c4b03a 	or	r2,r2,r7
    f2f0:	21800315 	stw	r6,12(r4)
    f2f4:	8809883a 	mov	r4,r17
    f2f8:	28800115 	stw	r2,4(r5)
    f2fc:	19800215 	stw	r6,8(r3)
    f300:	dfc00217 	ldw	ra,8(sp)
    f304:	dc400117 	ldw	r17,4(sp)
    f308:	dc000017 	ldw	r16,0(sp)
    f30c:	dec00304 	addi	sp,sp,12
    f310:	001377c1 	jmpi	1377c <__malloc_unlock>
    f314:	020001f4 	movhi	r8,7
    f318:	42197e04 	addi	r8,r8,26104
    f31c:	3a3faf1e 	bne	r7,r8,f1dc <_free_r+0x7c>
    f320:	29800515 	stw	r6,20(r5)
    f324:	29800415 	stw	r6,16(r5)
    f328:	11000054 	ori	r4,r2,1
    f32c:	3087883a 	add	r3,r6,r2
    f330:	31c00315 	stw	r7,12(r6)
    f334:	31c00215 	stw	r7,8(r6)
    f338:	31000115 	stw	r4,4(r6)
    f33c:	18800015 	stw	r2,0(r3)
    f340:	003fc806 	br	f264 <_free_r+0x104>
    f344:	4200004c 	andi	r8,r8,1
    f348:	3885883a 	add	r2,r7,r2
    f34c:	4000071e 	bne	r8,zero,f36c <_free_r+0x20c>
    f350:	81fffe17 	ldw	r7,-8(r16)
    f354:	31cdc83a 	sub	r6,r6,r7
    f358:	30c00317 	ldw	r3,12(r6)
    f35c:	31000217 	ldw	r4,8(r6)
    f360:	11c5883a 	add	r2,r2,r7
    f364:	20c00315 	stw	r3,12(r4)
    f368:	19000215 	stw	r4,8(r3)
    f36c:	00c001f4 	movhi	r3,7
    f370:	18df0904 	addi	r3,r3,31780
    f374:	18c00017 	ldw	r3,0(r3)
    f378:	11000054 	ori	r4,r2,1
    f37c:	31000115 	stw	r4,4(r6)
    f380:	29800215 	stw	r6,8(r5)
    f384:	10ffb736 	bltu	r2,r3,f264 <_free_r+0x104>
    f388:	00800234 	movhi	r2,8
    f38c:	10aca004 	addi	r2,r2,-19840
    f390:	11400017 	ldw	r5,0(r2)
    f394:	8809883a 	mov	r4,r17
    f398:	000f0240 	call	f024 <_malloc_trim_r>
    f39c:	003fb106 	br	f264 <_free_r+0x104>
    f3a0:	01000044 	movi	r4,1
    f3a4:	003f8606 	br	f1c0 <_free_r+0x60>
    f3a8:	01000504 	movi	r4,20
    f3ac:	20c00b36 	bltu	r4,r3,f3dc <_free_r+0x27c>
    f3b0:	190016c4 	addi	r4,r3,91
    f3b4:	210f883a 	add	r7,r4,r4
    f3b8:	003f9806 	br	f21c <_free_r+0xbc>
    f3bc:	2009d0ba 	srai	r4,r4,2
    f3c0:	00800044 	movi	r2,1
    f3c4:	29c00117 	ldw	r7,4(r5)
    f3c8:	1108983a 	sll	r4,r2,r4
    f3cc:	1805883a 	mov	r2,r3
    f3d0:	21c8b03a 	or	r4,r4,r7
    f3d4:	29000115 	stw	r4,4(r5)
    f3d8:	003f9e06 	br	f254 <_free_r+0xf4>
    f3dc:	01001504 	movi	r4,84
    f3e0:	20c00436 	bltu	r4,r3,f3f4 <_free_r+0x294>
    f3e4:	1008d33a 	srli	r4,r2,12
    f3e8:	21001b84 	addi	r4,r4,110
    f3ec:	210f883a 	add	r7,r4,r4
    f3f0:	003f8a06 	br	f21c <_free_r+0xbc>
    f3f4:	01005504 	movi	r4,340
    f3f8:	20c00436 	bltu	r4,r3,f40c <_free_r+0x2ac>
    f3fc:	1008d3fa 	srli	r4,r2,15
    f400:	21001dc4 	addi	r4,r4,119
    f404:	210f883a 	add	r7,r4,r4
    f408:	003f8406 	br	f21c <_free_r+0xbc>
    f40c:	01015504 	movi	r4,1364
    f410:	20c00436 	bltu	r4,r3,f424 <_free_r+0x2c4>
    f414:	1008d4ba 	srli	r4,r2,18
    f418:	21001f04 	addi	r4,r4,124
    f41c:	210f883a 	add	r7,r4,r4
    f420:	003f7e06 	br	f21c <_free_r+0xbc>
    f424:	01c03f04 	movi	r7,252
    f428:	01001f84 	movi	r4,126
    f42c:	003f7b06 	br	f21c <_free_r+0xbc>

0000f430 <__sfvwrite_r>:
    f430:	30800217 	ldw	r2,8(r6)
    f434:	defff504 	addi	sp,sp,-44
    f438:	dd400615 	stw	r21,24(sp)
    f43c:	dd000515 	stw	r20,20(sp)
    f440:	dc000115 	stw	r16,4(sp)
    f444:	dfc00a15 	stw	ra,40(sp)
    f448:	df000915 	stw	fp,36(sp)
    f44c:	ddc00815 	stw	r23,32(sp)
    f450:	dd800715 	stw	r22,28(sp)
    f454:	dcc00415 	stw	r19,16(sp)
    f458:	dc800315 	stw	r18,12(sp)
    f45c:	dc400215 	stw	r17,8(sp)
    f460:	3029883a 	mov	r20,r6
    f464:	202b883a 	mov	r21,r4
    f468:	2821883a 	mov	r16,r5
    f46c:	10002126 	beq	r2,zero,f4f4 <__sfvwrite_r+0xc4>
    f470:	2880030b 	ldhu	r2,12(r5)
    f474:	10c0020c 	andi	r3,r2,8
    f478:	18ffffcc 	andi	r3,r3,65535
    f47c:	18e0001c 	xori	r3,r3,32768
    f480:	18e00004 	addi	r3,r3,-32768
    f484:	18002826 	beq	r3,zero,f528 <__sfvwrite_r+0xf8>
    f488:	28c00417 	ldw	r3,16(r5)
    f48c:	18002626 	beq	r3,zero,f528 <__sfvwrite_r+0xf8>
    f490:	10c0008c 	andi	r3,r2,2
    f494:	18ffffcc 	andi	r3,r3,65535
    f498:	18e0001c 	xori	r3,r3,32768
    f49c:	18e00004 	addi	r3,r3,-32768
    f4a0:	a4400017 	ldw	r17,0(r20)
    f4a4:	18002b26 	beq	r3,zero,f554 <__sfvwrite_r+0x124>
    f4a8:	0027883a 	mov	r19,zero
    f4ac:	0025883a 	mov	r18,zero
    f4b0:	05810004 	movi	r22,1024
    f4b4:	980d883a 	mov	r6,r19
    f4b8:	a809883a 	mov	r4,r21
    f4bc:	90004f26 	beq	r18,zero,f5fc <__sfvwrite_r+0x1cc>
    f4c0:	900f883a 	mov	r7,r18
    f4c4:	81400717 	ldw	r5,28(r16)
    f4c8:	b480012e 	bgeu	r22,r18,f4d0 <__sfvwrite_r+0xa0>
    f4cc:	01c10004 	movi	r7,1024
    f4d0:	80800917 	ldw	r2,36(r16)
    f4d4:	103ee83a 	callr	r2
    f4d8:	0080540e 	bge	zero,r2,f62c <__sfvwrite_r+0x1fc>
    f4dc:	a0c00217 	ldw	r3,8(r20)
    f4e0:	98a7883a 	add	r19,r19,r2
    f4e4:	90a5c83a 	sub	r18,r18,r2
    f4e8:	1885c83a 	sub	r2,r3,r2
    f4ec:	a0800215 	stw	r2,8(r20)
    f4f0:	103ff01e 	bne	r2,zero,f4b4 <__sfvwrite_r+0x84>
    f4f4:	0005883a 	mov	r2,zero
    f4f8:	dfc00a17 	ldw	ra,40(sp)
    f4fc:	df000917 	ldw	fp,36(sp)
    f500:	ddc00817 	ldw	r23,32(sp)
    f504:	dd800717 	ldw	r22,28(sp)
    f508:	dd400617 	ldw	r21,24(sp)
    f50c:	dd000517 	ldw	r20,20(sp)
    f510:	dcc00417 	ldw	r19,16(sp)
    f514:	dc800317 	ldw	r18,12(sp)
    f518:	dc400217 	ldw	r17,8(sp)
    f51c:	dc000117 	ldw	r16,4(sp)
    f520:	dec00b04 	addi	sp,sp,44
    f524:	f800283a 	ret
    f528:	a809883a 	mov	r4,r21
    f52c:	800b883a 	mov	r5,r16
    f530:	000d1540 	call	d154 <__swsetup_r>
    f534:	1000f01e 	bne	r2,zero,f8f8 <__sfvwrite_r+0x4c8>
    f538:	8080030b 	ldhu	r2,12(r16)
    f53c:	a4400017 	ldw	r17,0(r20)
    f540:	10c0008c 	andi	r3,r2,2
    f544:	18ffffcc 	andi	r3,r3,65535
    f548:	18e0001c 	xori	r3,r3,32768
    f54c:	18e00004 	addi	r3,r3,-32768
    f550:	183fd51e 	bne	r3,zero,f4a8 <__sfvwrite_r+0x78>
    f554:	10c0004c 	andi	r3,r2,1
    f558:	002d883a 	mov	r22,zero
    f55c:	1800381e 	bne	r3,zero,f640 <__sfvwrite_r+0x210>
    f560:	0025883a 	mov	r18,zero
    f564:	90002126 	beq	r18,zero,f5ec <__sfvwrite_r+0x1bc>
    f568:	10c0800c 	andi	r3,r2,512
    f56c:	18ffffcc 	andi	r3,r3,65535
    f570:	18e0001c 	xori	r3,r3,32768
    f574:	18e00004 	addi	r3,r3,-32768
    f578:	84c00217 	ldw	r19,8(r16)
    f57c:	18006b26 	beq	r3,zero,f72c <__sfvwrite_r+0x2fc>
    f580:	980f883a 	mov	r7,r19
    f584:	94c08636 	bltu	r18,r19,f7a0 <__sfvwrite_r+0x370>
    f588:	10c1200c 	andi	r3,r2,1152
    f58c:	18009f1e 	bne	r3,zero,f80c <__sfvwrite_r+0x3dc>
    f590:	81000017 	ldw	r4,0(r16)
    f594:	982f883a 	mov	r23,r19
    f598:	9039883a 	mov	fp,r18
    f59c:	9027883a 	mov	r19,r18
    f5a0:	380d883a 	mov	r6,r7
    f5a4:	b00b883a 	mov	r5,r22
    f5a8:	d9c00015 	stw	r7,0(sp)
    f5ac:	000fdf00 	call	fdf0 <memmove>
    f5b0:	d9c00017 	ldw	r7,0(sp)
    f5b4:	81000217 	ldw	r4,8(r16)
    f5b8:	80800017 	ldw	r2,0(r16)
    f5bc:	25efc83a 	sub	r23,r4,r23
    f5c0:	11cf883a 	add	r7,r2,r7
    f5c4:	85c00215 	stw	r23,8(r16)
    f5c8:	81c00015 	stw	r7,0(r16)
    f5cc:	a0800217 	ldw	r2,8(r20)
    f5d0:	b72d883a 	add	r22,r22,fp
    f5d4:	9725c83a 	sub	r18,r18,fp
    f5d8:	14e7c83a 	sub	r19,r2,r19
    f5dc:	a4c00215 	stw	r19,8(r20)
    f5e0:	983fc426 	beq	r19,zero,f4f4 <__sfvwrite_r+0xc4>
    f5e4:	8080030b 	ldhu	r2,12(r16)
    f5e8:	903fdf1e 	bne	r18,zero,f568 <__sfvwrite_r+0x138>
    f5ec:	8d800017 	ldw	r22,0(r17)
    f5f0:	8c800117 	ldw	r18,4(r17)
    f5f4:	8c400204 	addi	r17,r17,8
    f5f8:	003fda06 	br	f564 <__sfvwrite_r+0x134>
    f5fc:	8cc00017 	ldw	r19,0(r17)
    f600:	8c800117 	ldw	r18,4(r17)
    f604:	8c400204 	addi	r17,r17,8
    f608:	003faa06 	br	f4b4 <__sfvwrite_r+0x84>
    f60c:	00111780 	call	11178 <_realloc_r>
    f610:	102f883a 	mov	r23,r2
    f614:	10009f1e 	bne	r2,zero,f894 <__sfvwrite_r+0x464>
    f618:	81400417 	ldw	r5,16(r16)
    f61c:	a809883a 	mov	r4,r21
    f620:	000f1600 	call	f160 <_free_r>
    f624:	00800304 	movi	r2,12
    f628:	a8800015 	stw	r2,0(r21)
    f62c:	80c0030b 	ldhu	r3,12(r16)
    f630:	00bfffc4 	movi	r2,-1
    f634:	18c01014 	ori	r3,r3,64
    f638:	80c0030d 	sth	r3,12(r16)
    f63c:	003fae06 	br	f4f8 <__sfvwrite_r+0xc8>
    f640:	0007883a 	mov	r3,zero
    f644:	0039883a 	mov	fp,zero
    f648:	0025883a 	mov	r18,zero
    f64c:	90001e26 	beq	r18,zero,f6c8 <__sfvwrite_r+0x298>
    f650:	18006526 	beq	r3,zero,f7e8 <__sfvwrite_r+0x3b8>
    f654:	b02f883a 	mov	r23,r22
    f658:	9580012e 	bgeu	r18,r22,f660 <__sfvwrite_r+0x230>
    f65c:	902f883a 	mov	r23,r18
    f660:	81000017 	ldw	r4,0(r16)
    f664:	80800417 	ldw	r2,16(r16)
    f668:	84c00217 	ldw	r19,8(r16)
    f66c:	81c00517 	ldw	r7,20(r16)
    f670:	1100022e 	bgeu	r2,r4,f67c <__sfvwrite_r+0x24c>
    f674:	99e7883a 	add	r19,r19,r7
    f678:	9dc01816 	blt	r19,r23,f6dc <__sfvwrite_r+0x2ac>
    f67c:	b9c03b16 	blt	r23,r7,f76c <__sfvwrite_r+0x33c>
    f680:	80800917 	ldw	r2,36(r16)
    f684:	81400717 	ldw	r5,28(r16)
    f688:	a809883a 	mov	r4,r21
    f68c:	d8c00015 	stw	r3,0(sp)
    f690:	e00d883a 	mov	r6,fp
    f694:	103ee83a 	callr	r2
    f698:	1027883a 	mov	r19,r2
    f69c:	d8c00017 	ldw	r3,0(sp)
    f6a0:	00bfe20e 	bge	zero,r2,f62c <__sfvwrite_r+0x1fc>
    f6a4:	b4edc83a 	sub	r22,r22,r19
    f6a8:	b0001a26 	beq	r22,zero,f714 <__sfvwrite_r+0x2e4>
    f6ac:	a0800217 	ldw	r2,8(r20)
    f6b0:	e4f9883a 	add	fp,fp,r19
    f6b4:	94e5c83a 	sub	r18,r18,r19
    f6b8:	14e7c83a 	sub	r19,r2,r19
    f6bc:	a4c00215 	stw	r19,8(r20)
    f6c0:	983f8c26 	beq	r19,zero,f4f4 <__sfvwrite_r+0xc4>
    f6c4:	903fe21e 	bne	r18,zero,f650 <__sfvwrite_r+0x220>
    f6c8:	8f000017 	ldw	fp,0(r17)
    f6cc:	8c800117 	ldw	r18,4(r17)
    f6d0:	0007883a 	mov	r3,zero
    f6d4:	8c400204 	addi	r17,r17,8
    f6d8:	003fdc06 	br	f64c <__sfvwrite_r+0x21c>
    f6dc:	e00b883a 	mov	r5,fp
    f6e0:	980d883a 	mov	r6,r19
    f6e4:	d8c00015 	stw	r3,0(sp)
    f6e8:	000fdf00 	call	fdf0 <memmove>
    f6ec:	80800017 	ldw	r2,0(r16)
    f6f0:	a809883a 	mov	r4,r21
    f6f4:	800b883a 	mov	r5,r16
    f6f8:	14c5883a 	add	r2,r2,r19
    f6fc:	80800015 	stw	r2,0(r16)
    f700:	000eb200 	call	eb20 <_fflush_r>
    f704:	d8c00017 	ldw	r3,0(sp)
    f708:	103fc81e 	bne	r2,zero,f62c <__sfvwrite_r+0x1fc>
    f70c:	b4edc83a 	sub	r22,r22,r19
    f710:	b03fe61e 	bne	r22,zero,f6ac <__sfvwrite_r+0x27c>
    f714:	a809883a 	mov	r4,r21
    f718:	800b883a 	mov	r5,r16
    f71c:	000eb200 	call	eb20 <_fflush_r>
    f720:	103fc21e 	bne	r2,zero,f62c <__sfvwrite_r+0x1fc>
    f724:	0007883a 	mov	r3,zero
    f728:	003fe006 	br	f6ac <__sfvwrite_r+0x27c>
    f72c:	81000017 	ldw	r4,0(r16)
    f730:	80800417 	ldw	r2,16(r16)
    f734:	1100022e 	bgeu	r2,r4,f740 <__sfvwrite_r+0x310>
    f738:	9839883a 	mov	fp,r19
    f73c:	9c806036 	bltu	r19,r18,f8c0 <__sfvwrite_r+0x490>
    f740:	81c00517 	ldw	r7,20(r16)
    f744:	91c01c36 	bltu	r18,r7,f7b8 <__sfvwrite_r+0x388>
    f748:	80800917 	ldw	r2,36(r16)
    f74c:	81400717 	ldw	r5,28(r16)
    f750:	a809883a 	mov	r4,r21
    f754:	b00d883a 	mov	r6,r22
    f758:	103ee83a 	callr	r2
    f75c:	1027883a 	mov	r19,r2
    f760:	00bfb20e 	bge	zero,r2,f62c <__sfvwrite_r+0x1fc>
    f764:	1039883a 	mov	fp,r2
    f768:	003f9806 	br	f5cc <__sfvwrite_r+0x19c>
    f76c:	b80d883a 	mov	r6,r23
    f770:	e00b883a 	mov	r5,fp
    f774:	d8c00015 	stw	r3,0(sp)
    f778:	000fdf00 	call	fdf0 <memmove>
    f77c:	80800217 	ldw	r2,8(r16)
    f780:	81000017 	ldw	r4,0(r16)
    f784:	b827883a 	mov	r19,r23
    f788:	15c5c83a 	sub	r2,r2,r23
    f78c:	25ef883a 	add	r23,r4,r23
    f790:	80800215 	stw	r2,8(r16)
    f794:	85c00015 	stw	r23,0(r16)
    f798:	d8c00017 	ldw	r3,0(sp)
    f79c:	003fc106 	br	f6a4 <__sfvwrite_r+0x274>
    f7a0:	81000017 	ldw	r4,0(r16)
    f7a4:	902f883a 	mov	r23,r18
    f7a8:	9039883a 	mov	fp,r18
    f7ac:	9027883a 	mov	r19,r18
    f7b0:	900f883a 	mov	r7,r18
    f7b4:	003f7a06 	br	f5a0 <__sfvwrite_r+0x170>
    f7b8:	b00b883a 	mov	r5,r22
    f7bc:	900d883a 	mov	r6,r18
    f7c0:	000fdf00 	call	fdf0 <memmove>
    f7c4:	80c00217 	ldw	r3,8(r16)
    f7c8:	80800017 	ldw	r2,0(r16)
    f7cc:	9027883a 	mov	r19,r18
    f7d0:	1c87c83a 	sub	r3,r3,r18
    f7d4:	1485883a 	add	r2,r2,r18
    f7d8:	80c00215 	stw	r3,8(r16)
    f7dc:	80800015 	stw	r2,0(r16)
    f7e0:	9039883a 	mov	fp,r18
    f7e4:	003f7906 	br	f5cc <__sfvwrite_r+0x19c>
    f7e8:	e009883a 	mov	r4,fp
    f7ec:	01400284 	movi	r5,10
    f7f0:	900d883a 	mov	r6,r18
    f7f4:	000fcf80 	call	fcf8 <memchr>
    f7f8:	10003c26 	beq	r2,zero,f8ec <__sfvwrite_r+0x4bc>
    f7fc:	15800044 	addi	r22,r2,1
    f800:	b72dc83a 	sub	r22,r22,fp
    f804:	00c00044 	movi	r3,1
    f808:	003f9206 	br	f654 <__sfvwrite_r+0x224>
    f80c:	81000517 	ldw	r4,20(r16)
    f810:	81400417 	ldw	r5,16(r16)
    f814:	80c00017 	ldw	r3,0(r16)
    f818:	210d883a 	add	r6,r4,r4
    f81c:	3109883a 	add	r4,r6,r4
    f820:	2026d7fa 	srli	r19,r4,31
    f824:	1979c83a 	sub	fp,r3,r5
    f828:	e1800044 	addi	r6,fp,1
    f82c:	9909883a 	add	r4,r19,r4
    f830:	2027d07a 	srai	r19,r4,1
    f834:	3489883a 	add	r4,r6,r18
    f838:	980d883a 	mov	r6,r19
    f83c:	9900022e 	bgeu	r19,r4,f848 <__sfvwrite_r+0x418>
    f840:	2027883a 	mov	r19,r4
    f844:	200d883a 	mov	r6,r4
    f848:	1081000c 	andi	r2,r2,1024
    f84c:	10bfffcc 	andi	r2,r2,65535
    f850:	10a0001c 	xori	r2,r2,32768
    f854:	10a00004 	addi	r2,r2,-32768
    f858:	a809883a 	mov	r4,r21
    f85c:	103f6b26 	beq	r2,zero,f60c <__sfvwrite_r+0x1dc>
    f860:	300b883a 	mov	r5,r6
    f864:	000a4880 	call	a488 <_malloc_r>
    f868:	102f883a 	mov	r23,r2
    f86c:	103f6d26 	beq	r2,zero,f624 <__sfvwrite_r+0x1f4>
    f870:	81400417 	ldw	r5,16(r16)
    f874:	1009883a 	mov	r4,r2
    f878:	e00d883a 	mov	r6,fp
    f87c:	000ac0c0 	call	ac0c <memcpy>
    f880:	8080030b 	ldhu	r2,12(r16)
    f884:	00fedfc4 	movi	r3,-1153
    f888:	10c4703a 	and	r2,r2,r3
    f88c:	10802014 	ori	r2,r2,128
    f890:	8080030d 	sth	r2,12(r16)
    f894:	bf09883a 	add	r4,r23,fp
    f898:	9f07c83a 	sub	r3,r19,fp
    f89c:	85c00415 	stw	r23,16(r16)
    f8a0:	84c00515 	stw	r19,20(r16)
    f8a4:	81000015 	stw	r4,0(r16)
    f8a8:	902f883a 	mov	r23,r18
    f8ac:	80c00215 	stw	r3,8(r16)
    f8b0:	9039883a 	mov	fp,r18
    f8b4:	9027883a 	mov	r19,r18
    f8b8:	900f883a 	mov	r7,r18
    f8bc:	003f3806 	br	f5a0 <__sfvwrite_r+0x170>
    f8c0:	b00b883a 	mov	r5,r22
    f8c4:	980d883a 	mov	r6,r19
    f8c8:	000fdf00 	call	fdf0 <memmove>
    f8cc:	80800017 	ldw	r2,0(r16)
    f8d0:	a809883a 	mov	r4,r21
    f8d4:	800b883a 	mov	r5,r16
    f8d8:	14c5883a 	add	r2,r2,r19
    f8dc:	80800015 	stw	r2,0(r16)
    f8e0:	000eb200 	call	eb20 <_fflush_r>
    f8e4:	103f3926 	beq	r2,zero,f5cc <__sfvwrite_r+0x19c>
    f8e8:	003f5006 	br	f62c <__sfvwrite_r+0x1fc>
    f8ec:	95800044 	addi	r22,r18,1
    f8f0:	00c00044 	movi	r3,1
    f8f4:	003f5706 	br	f654 <__sfvwrite_r+0x224>
    f8f8:	80c0030b 	ldhu	r3,12(r16)
    f8fc:	00bfffc4 	movi	r2,-1
    f900:	18c01014 	ori	r3,r3,64
    f904:	80c0030d 	sth	r3,12(r16)
    f908:	00c00244 	movi	r3,9
    f90c:	a8c00015 	stw	r3,0(r21)
    f910:	003ef906 	br	f4f8 <__sfvwrite_r+0xc8>

0000f914 <_fwalk>:
    f914:	defff904 	addi	sp,sp,-28
    f918:	dcc00315 	stw	r19,12(sp)
    f91c:	24c0b804 	addi	r19,r4,736
    f920:	dd400515 	stw	r21,20(sp)
    f924:	dd000415 	stw	r20,16(sp)
    f928:	dfc00615 	stw	ra,24(sp)
    f92c:	dc800215 	stw	r18,8(sp)
    f930:	dc400115 	stw	r17,4(sp)
    f934:	dc000015 	stw	r16,0(sp)
    f938:	282b883a 	mov	r21,r5
    f93c:	0029883a 	mov	r20,zero
    f940:	000efe40 	call	efe4 <__sfp_lock_acquire>
    f944:	98001226 	beq	r19,zero,f990 <_fwalk+0x7c>
    f948:	04bfffc4 	movi	r18,-1
    f94c:	9c400117 	ldw	r17,4(r19)
    f950:	9c000217 	ldw	r16,8(r19)
    f954:	8c7fffc4 	addi	r17,r17,-1
    f958:	88000b16 	blt	r17,zero,f988 <_fwalk+0x74>
    f95c:	84000304 	addi	r16,r16,12
    f960:	80c0000f 	ldh	r3,0(r16)
    f964:	8c7fffc4 	addi	r17,r17,-1
    f968:	813ffd04 	addi	r4,r16,-12
    f96c:	18000426 	beq	r3,zero,f980 <_fwalk+0x6c>
    f970:	80c0008f 	ldh	r3,2(r16)
    f974:	1c800226 	beq	r3,r18,f980 <_fwalk+0x6c>
    f978:	a83ee83a 	callr	r21
    f97c:	a0a8b03a 	or	r20,r20,r2
    f980:	84001704 	addi	r16,r16,92
    f984:	8cbff61e 	bne	r17,r18,f960 <_fwalk+0x4c>
    f988:	9cc00017 	ldw	r19,0(r19)
    f98c:	983fef1e 	bne	r19,zero,f94c <_fwalk+0x38>
    f990:	000efe80 	call	efe8 <__sfp_lock_release>
    f994:	a005883a 	mov	r2,r20
    f998:	dfc00617 	ldw	ra,24(sp)
    f99c:	dd400517 	ldw	r21,20(sp)
    f9a0:	dd000417 	ldw	r20,16(sp)
    f9a4:	dcc00317 	ldw	r19,12(sp)
    f9a8:	dc800217 	ldw	r18,8(sp)
    f9ac:	dc400117 	ldw	r17,4(sp)
    f9b0:	dc000017 	ldw	r16,0(sp)
    f9b4:	dec00704 	addi	sp,sp,28
    f9b8:	f800283a 	ret

0000f9bc <_fwalk_reent>:
    f9bc:	defff804 	addi	sp,sp,-32
    f9c0:	dcc00315 	stw	r19,12(sp)
    f9c4:	24c0b804 	addi	r19,r4,736
    f9c8:	dd800615 	stw	r22,24(sp)
    f9cc:	dd400515 	stw	r21,20(sp)
    f9d0:	dd000415 	stw	r20,16(sp)
    f9d4:	dfc00715 	stw	ra,28(sp)
    f9d8:	dc800215 	stw	r18,8(sp)
    f9dc:	dc400115 	stw	r17,4(sp)
    f9e0:	dc000015 	stw	r16,0(sp)
    f9e4:	2029883a 	mov	r20,r4
    f9e8:	282b883a 	mov	r21,r5
    f9ec:	002d883a 	mov	r22,zero
    f9f0:	000efe40 	call	efe4 <__sfp_lock_acquire>
    f9f4:	98001326 	beq	r19,zero,fa44 <_fwalk_reent+0x88>
    f9f8:	04bfffc4 	movi	r18,-1
    f9fc:	9c400117 	ldw	r17,4(r19)
    fa00:	9c000217 	ldw	r16,8(r19)
    fa04:	8c7fffc4 	addi	r17,r17,-1
    fa08:	88000c16 	blt	r17,zero,fa3c <_fwalk_reent+0x80>
    fa0c:	84000304 	addi	r16,r16,12
    fa10:	80c0000f 	ldh	r3,0(r16)
    fa14:	8c7fffc4 	addi	r17,r17,-1
    fa18:	817ffd04 	addi	r5,r16,-12
    fa1c:	18000526 	beq	r3,zero,fa34 <_fwalk_reent+0x78>
    fa20:	80c0008f 	ldh	r3,2(r16)
    fa24:	a009883a 	mov	r4,r20
    fa28:	1c800226 	beq	r3,r18,fa34 <_fwalk_reent+0x78>
    fa2c:	a83ee83a 	callr	r21
    fa30:	b0acb03a 	or	r22,r22,r2
    fa34:	84001704 	addi	r16,r16,92
    fa38:	8cbff51e 	bne	r17,r18,fa10 <_fwalk_reent+0x54>
    fa3c:	9cc00017 	ldw	r19,0(r19)
    fa40:	983fee1e 	bne	r19,zero,f9fc <_fwalk_reent+0x40>
    fa44:	000efe80 	call	efe8 <__sfp_lock_release>
    fa48:	b005883a 	mov	r2,r22
    fa4c:	dfc00717 	ldw	ra,28(sp)
    fa50:	dd800617 	ldw	r22,24(sp)
    fa54:	dd400517 	ldw	r21,20(sp)
    fa58:	dd000417 	ldw	r20,16(sp)
    fa5c:	dcc00317 	ldw	r19,12(sp)
    fa60:	dc800217 	ldw	r18,8(sp)
    fa64:	dc400117 	ldw	r17,4(sp)
    fa68:	dc000017 	ldw	r16,0(sp)
    fa6c:	dec00804 	addi	sp,sp,32
    fa70:	f800283a 	ret

0000fa74 <_setlocale_r>:
    fa74:	defffc04 	addi	sp,sp,-16
    fa78:	dc800215 	stw	r18,8(sp)
    fa7c:	dc400115 	stw	r17,4(sp)
    fa80:	dc000015 	stw	r16,0(sp)
    fa84:	dfc00315 	stw	ra,12(sp)
    fa88:	3021883a 	mov	r16,r6
    fa8c:	2023883a 	mov	r17,r4
    fa90:	2825883a 	mov	r18,r5
    fa94:	30001626 	beq	r6,zero,faf0 <_setlocale_r+0x7c>
    fa98:	3009883a 	mov	r4,r6
    fa9c:	014001f4 	movhi	r5,7
    faa0:	29510a04 	addi	r5,r5,17448
    faa4:	00118ec0 	call	118ec <strcmp>
    faa8:	10000a1e 	bne	r2,zero,fad4 <_setlocale_r+0x60>
    faac:	8c800c15 	stw	r18,48(r17)
    fab0:	8c000d15 	stw	r16,52(r17)
    fab4:	008001f4 	movhi	r2,7
    fab8:	10910a04 	addi	r2,r2,17448
    fabc:	dfc00317 	ldw	ra,12(sp)
    fac0:	dc800217 	ldw	r18,8(sp)
    fac4:	dc400117 	ldw	r17,4(sp)
    fac8:	dc000017 	ldw	r16,0(sp)
    facc:	dec00404 	addi	sp,sp,16
    fad0:	f800283a 	ret
    fad4:	8009883a 	mov	r4,r16
    fad8:	014001f4 	movhi	r5,7
    fadc:	29511404 	addi	r5,r5,17488
    fae0:	00118ec0 	call	118ec <strcmp>
    fae4:	103ff126 	beq	r2,zero,faac <_setlocale_r+0x38>
    fae8:	0005883a 	mov	r2,zero
    faec:	003ff306 	br	fabc <_setlocale_r+0x48>
    faf0:	008001f4 	movhi	r2,7
    faf4:	10910a04 	addi	r2,r2,17448
    faf8:	dfc00317 	ldw	ra,12(sp)
    fafc:	dc800217 	ldw	r18,8(sp)
    fb00:	dc400117 	ldw	r17,4(sp)
    fb04:	dc000017 	ldw	r16,0(sp)
    fb08:	dec00404 	addi	sp,sp,16
    fb0c:	f800283a 	ret

0000fb10 <__locale_charset>:
    fb10:	008001f4 	movhi	r2,7
    fb14:	10912904 	addi	r2,r2,17572
    fb18:	f800283a 	ret

0000fb1c <_localeconv_r>:
    fb1c:	008001f4 	movhi	r2,7
    fb20:	10912d04 	addi	r2,r2,17588
    fb24:	f800283a 	ret

0000fb28 <setlocale>:
    fb28:	00c001f4 	movhi	r3,7
    fb2c:	18df0704 	addi	r3,r3,31772
    fb30:	2005883a 	mov	r2,r4
    fb34:	19000017 	ldw	r4,0(r3)
    fb38:	280d883a 	mov	r6,r5
    fb3c:	100b883a 	mov	r5,r2
    fb40:	000fa741 	jmpi	fa74 <_setlocale_r>

0000fb44 <localeconv>:
    fb44:	008001f4 	movhi	r2,7
    fb48:	10912d04 	addi	r2,r2,17588
    fb4c:	f800283a 	ret

0000fb50 <__smakebuf_r>:
    fb50:	2880030b 	ldhu	r2,12(r5)
    fb54:	deffed04 	addi	sp,sp,-76
    fb58:	dc401015 	stw	r17,64(sp)
    fb5c:	10c0008c 	andi	r3,r2,2
    fb60:	18ffffcc 	andi	r3,r3,65535
    fb64:	18e0001c 	xori	r3,r3,32768
    fb68:	dc000f15 	stw	r16,60(sp)
    fb6c:	dfc01215 	stw	ra,72(sp)
    fb70:	dc801115 	stw	r18,68(sp)
    fb74:	18e00004 	addi	r3,r3,-32768
    fb78:	2821883a 	mov	r16,r5
    fb7c:	2023883a 	mov	r17,r4
    fb80:	1800381e 	bne	r3,zero,fc64 <__smakebuf_r+0x114>
    fb84:	2940038f 	ldh	r5,14(r5)
    fb88:	28002d16 	blt	r5,zero,fc40 <__smakebuf_r+0xf0>
    fb8c:	d80d883a 	mov	r6,sp
    fb90:	0011dd40 	call	11dd4 <_fstat_r>
    fb94:	10002916 	blt	r2,zero,fc3c <__smakebuf_r+0xec>
    fb98:	d8800117 	ldw	r2,4(sp)
    fb9c:	00e00014 	movui	r3,32768
    fba0:	10bc000c 	andi	r2,r2,61440
    fba4:	10c03c26 	beq	r2,r3,fc98 <__smakebuf_r+0x148>
    fba8:	80c0030b 	ldhu	r3,12(r16)
    fbac:	18c20014 	ori	r3,r3,2048
    fbb0:	80c0030d 	sth	r3,12(r16)
    fbb4:	00c80004 	movi	r3,8192
    fbb8:	10c00c1e 	bne	r2,r3,fbec <__smakebuf_r+0x9c>
    fbbc:	8140038f 	ldh	r5,14(r16)
    fbc0:	8809883a 	mov	r4,r17
    fbc4:	0011e3c0 	call	11e3c <_isatty_r>
    fbc8:	10000826 	beq	r2,zero,fbec <__smakebuf_r+0x9c>
    fbcc:	80c0030b 	ldhu	r3,12(r16)
    fbd0:	808010c4 	addi	r2,r16,67
    fbd4:	80800015 	stw	r2,0(r16)
    fbd8:	18c00054 	ori	r3,r3,1
    fbdc:	80800415 	stw	r2,16(r16)
    fbe0:	00800044 	movi	r2,1
    fbe4:	80c0030d 	sth	r3,12(r16)
    fbe8:	80800515 	stw	r2,20(r16)
    fbec:	04810004 	movi	r18,1024
    fbf0:	8809883a 	mov	r4,r17
    fbf4:	900b883a 	mov	r5,r18
    fbf8:	000a4880 	call	a488 <_malloc_r>
    fbfc:	10003026 	beq	r2,zero,fcc0 <__smakebuf_r+0x170>
    fc00:	80c0030b 	ldhu	r3,12(r16)
    fc04:	01000074 	movhi	r4,1
    fc08:	213b5204 	addi	r4,r4,-4792
    fc0c:	89000f15 	stw	r4,60(r17)
    fc10:	18c02014 	ori	r3,r3,128
    fc14:	80c0030d 	sth	r3,12(r16)
    fc18:	80800015 	stw	r2,0(r16)
    fc1c:	80800415 	stw	r2,16(r16)
    fc20:	84800515 	stw	r18,20(r16)
    fc24:	dfc01217 	ldw	ra,72(sp)
    fc28:	dc801117 	ldw	r18,68(sp)
    fc2c:	dc401017 	ldw	r17,64(sp)
    fc30:	dc000f17 	ldw	r16,60(sp)
    fc34:	dec01304 	addi	sp,sp,76
    fc38:	f800283a 	ret
    fc3c:	8080030b 	ldhu	r2,12(r16)
    fc40:	10c0200c 	andi	r3,r2,128
    fc44:	18ffffcc 	andi	r3,r3,65535
    fc48:	18e0001c 	xori	r3,r3,32768
    fc4c:	18e00004 	addi	r3,r3,-32768
    fc50:	18000f1e 	bne	r3,zero,fc90 <__smakebuf_r+0x140>
    fc54:	04810004 	movi	r18,1024
    fc58:	10820014 	ori	r2,r2,2048
    fc5c:	8080030d 	sth	r2,12(r16)
    fc60:	003fe306 	br	fbf0 <__smakebuf_r+0xa0>
    fc64:	288010c4 	addi	r2,r5,67
    fc68:	28800015 	stw	r2,0(r5)
    fc6c:	28800415 	stw	r2,16(r5)
    fc70:	00800044 	movi	r2,1
    fc74:	28800515 	stw	r2,20(r5)
    fc78:	dfc01217 	ldw	ra,72(sp)
    fc7c:	dc801117 	ldw	r18,68(sp)
    fc80:	dc401017 	ldw	r17,64(sp)
    fc84:	dc000f17 	ldw	r16,60(sp)
    fc88:	dec01304 	addi	sp,sp,76
    fc8c:	f800283a 	ret
    fc90:	04801004 	movi	r18,64
    fc94:	003ff006 	br	fc58 <__smakebuf_r+0x108>
    fc98:	81000a17 	ldw	r4,40(r16)
    fc9c:	00c00074 	movhi	r3,1
    fca0:	18c62204 	addi	r3,r3,6280
    fca4:	20ffc01e 	bne	r4,r3,fba8 <__smakebuf_r+0x58>
    fca8:	8080030b 	ldhu	r2,12(r16)
    fcac:	00c10004 	movi	r3,1024
    fcb0:	80c01315 	stw	r3,76(r16)
    fcb4:	10c4b03a 	or	r2,r2,r3
    fcb8:	8080030d 	sth	r2,12(r16)
    fcbc:	003fcb06 	br	fbec <__smakebuf_r+0x9c>
    fcc0:	8080030b 	ldhu	r2,12(r16)
    fcc4:	10c0800c 	andi	r3,r2,512
    fcc8:	18ffffcc 	andi	r3,r3,65535
    fccc:	18e0001c 	xori	r3,r3,32768
    fcd0:	18e00004 	addi	r3,r3,-32768
    fcd4:	183fd31e 	bne	r3,zero,fc24 <__smakebuf_r+0xd4>
    fcd8:	10800094 	ori	r2,r2,2
    fcdc:	80c010c4 	addi	r3,r16,67
    fce0:	8080030d 	sth	r2,12(r16)
    fce4:	00800044 	movi	r2,1
    fce8:	80c00015 	stw	r3,0(r16)
    fcec:	80c00415 	stw	r3,16(r16)
    fcf0:	80800515 	stw	r2,20(r16)
    fcf4:	003fcb06 	br	fc24 <__smakebuf_r+0xd4>

0000fcf8 <memchr>:
    fcf8:	008000c4 	movi	r2,3
    fcfc:	29403fcc 	andi	r5,r5,255
    fd00:	1180282e 	bgeu	r2,r6,fda4 <memchr+0xac>
    fd04:	2086703a 	and	r3,r4,r2
    fd08:	1800351e 	bne	r3,zero,fde0 <memchr+0xe8>
    fd0c:	2816923a 	slli	r11,r5,8
    fd10:	2093883a 	add	r9,r4,r2
    fd14:	22000084 	addi	r8,r4,2
    fd18:	5957883a 	add	r11,r11,r5
    fd1c:	5816923a 	slli	r11,r11,8
    fd20:	20c00044 	addi	r3,r4,1
    fd24:	037fbff4 	movhi	r13,65279
    fd28:	6b7fbfc4 	addi	r13,r13,-257
    fd2c:	5957883a 	add	r11,r11,r5
    fd30:	5816923a 	slli	r11,r11,8
    fd34:	03202074 	movhi	r12,32897
    fd38:	63202004 	addi	r12,r12,-32640
    fd3c:	101d883a 	mov	r14,r2
    fd40:	5957883a 	add	r11,r11,r5
    fd44:	21c00017 	ldw	r7,0(r4)
    fd48:	31bfff04 	addi	r6,r6,-4
    fd4c:	1805883a 	mov	r2,r3
    fd50:	3acef03a 	xor	r7,r7,r11
    fd54:	3b55883a 	add	r10,r7,r13
    fd58:	01ce303a 	nor	r7,zero,r7
    fd5c:	51ce703a 	and	r7,r10,r7
    fd60:	3b0e703a 	and	r7,r7,r12
    fd64:	38000a26 	beq	r7,zero,fd90 <memchr+0x98>
    fd68:	21c00003 	ldbu	r7,0(r4)
    fd6c:	39401e26 	beq	r7,r5,fde8 <memchr+0xf0>
    fd70:	19c00003 	ldbu	r7,0(r3)
    fd74:	39401926 	beq	r7,r5,fddc <memchr+0xe4>
    fd78:	41c00003 	ldbu	r7,0(r8)
    fd7c:	4005883a 	mov	r2,r8
    fd80:	39401626 	beq	r7,r5,fddc <memchr+0xe4>
    fd84:	49c00003 	ldbu	r7,0(r9)
    fd88:	4805883a 	mov	r2,r9
    fd8c:	39401326 	beq	r7,r5,fddc <memchr+0xe4>
    fd90:	21000104 	addi	r4,r4,4
    fd94:	4a400104 	addi	r9,r9,4
    fd98:	42000104 	addi	r8,r8,4
    fd9c:	18c00104 	addi	r3,r3,4
    fda0:	71bfe836 	bltu	r14,r6,fd44 <memchr+0x4c>
    fda4:	2005883a 	mov	r2,r4
    fda8:	30000a26 	beq	r6,zero,fdd4 <memchr+0xdc>
    fdac:	10c00003 	ldbu	r3,0(r2)
    fdb0:	19400a26 	beq	r3,r5,fddc <memchr+0xe4>
    fdb4:	10c00044 	addi	r3,r2,1
    fdb8:	118d883a 	add	r6,r2,r6
    fdbc:	00000306 	br	fdcc <memchr+0xd4>
    fdc0:	11000003 	ldbu	r4,0(r2)
    fdc4:	18c00044 	addi	r3,r3,1
    fdc8:	21400426 	beq	r4,r5,fddc <memchr+0xe4>
    fdcc:	1805883a 	mov	r2,r3
    fdd0:	19bffb1e 	bne	r3,r6,fdc0 <memchr+0xc8>
    fdd4:	0005883a 	mov	r2,zero
    fdd8:	f800283a 	ret
    fddc:	f800283a 	ret
    fde0:	2005883a 	mov	r2,r4
    fde4:	003ff106 	br	fdac <memchr+0xb4>
    fde8:	2005883a 	mov	r2,r4
    fdec:	f800283a 	ret

0000fdf0 <memmove>:
    fdf0:	defffb04 	addi	sp,sp,-20
    fdf4:	dc000015 	stw	r16,0(sp)
    fdf8:	dfc00415 	stw	ra,16(sp)
    fdfc:	dcc00315 	stw	r19,12(sp)
    fe00:	dc800215 	stw	r18,8(sp)
    fe04:	dc400115 	stw	r17,4(sp)
    fe08:	2021883a 	mov	r16,r4
    fe0c:	300f883a 	mov	r7,r6
    fe10:	2900122e 	bgeu	r5,r4,fe5c <memmove+0x6c>
    fe14:	2987883a 	add	r3,r5,r6
    fe18:	20c0102e 	bgeu	r4,r3,fe5c <memmove+0x6c>
    fe1c:	218b883a 	add	r5,r4,r6
    fe20:	1989c83a 	sub	r4,r3,r6
    fe24:	30000526 	beq	r6,zero,fe3c <memmove+0x4c>
    fe28:	18ffffc4 	addi	r3,r3,-1
    fe2c:	18800003 	ldbu	r2,0(r3)
    fe30:	297fffc4 	addi	r5,r5,-1
    fe34:	28800005 	stb	r2,0(r5)
    fe38:	193ffb1e 	bne	r3,r4,fe28 <memmove+0x38>
    fe3c:	8005883a 	mov	r2,r16
    fe40:	dfc00417 	ldw	ra,16(sp)
    fe44:	dcc00317 	ldw	r19,12(sp)
    fe48:	dc800217 	ldw	r18,8(sp)
    fe4c:	dc400117 	ldw	r17,4(sp)
    fe50:	dc000017 	ldw	r16,0(sp)
    fe54:	dec00504 	addi	sp,sp,20
    fe58:	f800283a 	ret
    fe5c:	008003c4 	movi	r2,15
    fe60:	1180422e 	bgeu	r2,r6,ff6c <memmove+0x17c>
    fe64:	2c04b03a 	or	r2,r5,r16
    fe68:	108000cc 	andi	r2,r2,3
    fe6c:	10003f1e 	bne	r2,zero,ff6c <memmove+0x17c>
    fe70:	32bffc04 	addi	r10,r6,-16
    fe74:	5014d13a 	srli	r10,r10,4
    fe78:	81000404 	addi	r4,r16,16
    fe7c:	8007883a 	mov	r3,r16
    fe80:	5004913a 	slli	r2,r10,4
    fe84:	280f883a 	mov	r7,r5
    fe88:	2089883a 	add	r4,r4,r2
    fe8c:	38800017 	ldw	r2,0(r7)
    fe90:	18c00404 	addi	r3,r3,16
    fe94:	39c00404 	addi	r7,r7,16
    fe98:	18bffc15 	stw	r2,-16(r3)
    fe9c:	38bffd17 	ldw	r2,-12(r7)
    fea0:	18bffd15 	stw	r2,-12(r3)
    fea4:	38bffe17 	ldw	r2,-8(r7)
    fea8:	18bffe15 	stw	r2,-8(r3)
    feac:	38bfff17 	ldw	r2,-4(r7)
    feb0:	18bfff15 	stw	r2,-4(r3)
    feb4:	193ff51e 	bne	r3,r4,fe8c <memmove+0x9c>
    feb8:	52800044 	addi	r10,r10,1
    febc:	5014913a 	slli	r10,r10,4
    fec0:	31c003cc 	andi	r7,r6,15
    fec4:	008000c4 	movi	r2,3
    fec8:	8287883a 	add	r3,r16,r10
    fecc:	2a95883a 	add	r10,r5,r10
    fed0:	11c0282e 	bgeu	r2,r7,ff74 <memmove+0x184>
    fed4:	3c7fff04 	addi	r17,r7,-4
    fed8:	8808d0ba 	srli	r4,r17,2
    fedc:	1a400104 	addi	r9,r3,4
    fee0:	180d883a 	mov	r6,r3
    fee4:	2105883a 	add	r2,r4,r4
    fee8:	1085883a 	add	r2,r2,r2
    feec:	4893883a 	add	r9,r9,r2
    fef0:	5005883a 	mov	r2,r10
    fef4:	12000017 	ldw	r8,0(r2)
    fef8:	31800104 	addi	r6,r6,4
    fefc:	10800104 	addi	r2,r2,4
    ff00:	323fff15 	stw	r8,-4(r6)
    ff04:	327ffb1e 	bne	r6,r9,fef4 <memmove+0x104>
    ff08:	20800044 	addi	r2,r4,1
    ff0c:	1085883a 	add	r2,r2,r2
    ff10:	1085883a 	add	r2,r2,r2
    ff14:	017fff04 	movi	r5,-4
    ff18:	18a5883a 	add	r18,r3,r2
    ff1c:	50a7883a 	add	r19,r10,r2
    ff20:	0009dec0 	call	9dec <__mulsi3>
    ff24:	144f883a 	add	r7,r2,r17
    ff28:	980b883a 	mov	r5,r19
    ff2c:	9007883a 	mov	r3,r18
    ff30:	383fc226 	beq	r7,zero,fe3c <memmove+0x4c>
    ff34:	19cf883a 	add	r7,r3,r7
    ff38:	29800003 	ldbu	r6,0(r5)
    ff3c:	18c00044 	addi	r3,r3,1
    ff40:	29400044 	addi	r5,r5,1
    ff44:	19bfffc5 	stb	r6,-1(r3)
    ff48:	19fffb1e 	bne	r3,r7,ff38 <memmove+0x148>
    ff4c:	8005883a 	mov	r2,r16
    ff50:	dfc00417 	ldw	ra,16(sp)
    ff54:	dcc00317 	ldw	r19,12(sp)
    ff58:	dc800217 	ldw	r18,8(sp)
    ff5c:	dc400117 	ldw	r17,4(sp)
    ff60:	dc000017 	ldw	r16,0(sp)
    ff64:	dec00504 	addi	sp,sp,20
    ff68:	f800283a 	ret
    ff6c:	8007883a 	mov	r3,r16
    ff70:	003fef06 	br	ff30 <memmove+0x140>
    ff74:	500b883a 	mov	r5,r10
    ff78:	003fed06 	br	ff30 <memmove+0x140>

0000ff7c <_Balloc>:
    ff7c:	20801317 	ldw	r2,76(r4)
    ff80:	defffc04 	addi	sp,sp,-16
    ff84:	dc400115 	stw	r17,4(sp)
    ff88:	dc000015 	stw	r16,0(sp)
    ff8c:	dfc00315 	stw	ra,12(sp)
    ff90:	dc800215 	stw	r18,8(sp)
    ff94:	2023883a 	mov	r17,r4
    ff98:	2821883a 	mov	r16,r5
    ff9c:	10000f26 	beq	r2,zero,ffdc <_Balloc+0x60>
    ffa0:	8407883a 	add	r3,r16,r16
    ffa4:	18c7883a 	add	r3,r3,r3
    ffa8:	10c7883a 	add	r3,r2,r3
    ffac:	18800017 	ldw	r2,0(r3)
    ffb0:	10001126 	beq	r2,zero,fff8 <_Balloc+0x7c>
    ffb4:	11000017 	ldw	r4,0(r2)
    ffb8:	19000015 	stw	r4,0(r3)
    ffbc:	10000415 	stw	zero,16(r2)
    ffc0:	10000315 	stw	zero,12(r2)
    ffc4:	dfc00317 	ldw	ra,12(sp)
    ffc8:	dc800217 	ldw	r18,8(sp)
    ffcc:	dc400117 	ldw	r17,4(sp)
    ffd0:	dc000017 	ldw	r16,0(sp)
    ffd4:	dec00404 	addi	sp,sp,16
    ffd8:	f800283a 	ret
    ffdc:	01400104 	movi	r5,4
    ffe0:	01800404 	movi	r6,16
    ffe4:	0011b540 	call	11b54 <_calloc_r>
    ffe8:	88801315 	stw	r2,76(r17)
    ffec:	103fec1e 	bne	r2,zero,ffa0 <_Balloc+0x24>
    fff0:	0005883a 	mov	r2,zero
    fff4:	003ff306 	br	ffc4 <_Balloc+0x48>
    fff8:	01400044 	movi	r5,1
    fffc:	2c24983a 	sll	r18,r5,r16
   10000:	8809883a 	mov	r4,r17
   10004:	91800144 	addi	r6,r18,5
   10008:	318d883a 	add	r6,r6,r6
   1000c:	318d883a 	add	r6,r6,r6
   10010:	0011b540 	call	11b54 <_calloc_r>
   10014:	103ff626 	beq	r2,zero,fff0 <_Balloc+0x74>
   10018:	14000115 	stw	r16,4(r2)
   1001c:	14800215 	stw	r18,8(r2)
   10020:	003fe606 	br	ffbc <_Balloc+0x40>

00010024 <_Bfree>:
   10024:	28000826 	beq	r5,zero,10048 <_Bfree+0x24>
   10028:	28c00117 	ldw	r3,4(r5)
   1002c:	20801317 	ldw	r2,76(r4)
   10030:	18c7883a 	add	r3,r3,r3
   10034:	18c7883a 	add	r3,r3,r3
   10038:	10c5883a 	add	r2,r2,r3
   1003c:	10c00017 	ldw	r3,0(r2)
   10040:	28c00015 	stw	r3,0(r5)
   10044:	11400015 	stw	r5,0(r2)
   10048:	f800283a 	ret

0001004c <__multadd>:
   1004c:	defff604 	addi	sp,sp,-40
   10050:	dd400515 	stw	r21,20(sp)
   10054:	2d400417 	ldw	r21,16(r5)
   10058:	df000815 	stw	fp,32(sp)
   1005c:	ddc00715 	stw	r23,28(sp)
   10060:	dd800615 	stw	r22,24(sp)
   10064:	dd000415 	stw	r20,16(sp)
   10068:	dc400115 	stw	r17,4(sp)
   1006c:	dc000015 	stw	r16,0(sp)
   10070:	dfc00915 	stw	ra,36(sp)
   10074:	dcc00315 	stw	r19,12(sp)
   10078:	dc800215 	stw	r18,8(sp)
   1007c:	282d883a 	mov	r22,r5
   10080:	202f883a 	mov	r23,r4
   10084:	3029883a 	mov	r20,r6
   10088:	3839883a 	mov	fp,r7
   1008c:	2c000504 	addi	r16,r5,20
   10090:	0023883a 	mov	r17,zero
   10094:	84c00017 	ldw	r19,0(r16)
   10098:	a00b883a 	mov	r5,r20
   1009c:	8c400044 	addi	r17,r17,1
   100a0:	993fffcc 	andi	r4,r19,65535
   100a4:	0009dec0 	call	9dec <__mulsi3>
   100a8:	1725883a 	add	r18,r2,fp
   100ac:	9808d43a 	srli	r4,r19,16
   100b0:	9026d43a 	srli	r19,r18,16
   100b4:	a00b883a 	mov	r5,r20
   100b8:	0009dec0 	call	9dec <__mulsi3>
   100bc:	988f883a 	add	r7,r19,r2
   100c0:	3804943a 	slli	r2,r7,16
   100c4:	94bfffcc 	andi	r18,r18,65535
   100c8:	3838d43a 	srli	fp,r7,16
   100cc:	14a5883a 	add	r18,r2,r18
   100d0:	84800015 	stw	r18,0(r16)
   100d4:	84000104 	addi	r16,r16,4
   100d8:	8d7fee16 	blt	r17,r21,10094 <__multadd+0x48>
   100dc:	e0000926 	beq	fp,zero,10104 <__multadd+0xb8>
   100e0:	b0800217 	ldw	r2,8(r22)
   100e4:	a880140e 	bge	r21,r2,10138 <__multadd+0xec>
   100e8:	a8800144 	addi	r2,r21,5
   100ec:	1085883a 	add	r2,r2,r2
   100f0:	1085883a 	add	r2,r2,r2
   100f4:	b085883a 	add	r2,r22,r2
   100f8:	ad400044 	addi	r21,r21,1
   100fc:	17000015 	stw	fp,0(r2)
   10100:	b5400415 	stw	r21,16(r22)
   10104:	b005883a 	mov	r2,r22
   10108:	dfc00917 	ldw	ra,36(sp)
   1010c:	df000817 	ldw	fp,32(sp)
   10110:	ddc00717 	ldw	r23,28(sp)
   10114:	dd800617 	ldw	r22,24(sp)
   10118:	dd400517 	ldw	r21,20(sp)
   1011c:	dd000417 	ldw	r20,16(sp)
   10120:	dcc00317 	ldw	r19,12(sp)
   10124:	dc800217 	ldw	r18,8(sp)
   10128:	dc400117 	ldw	r17,4(sp)
   1012c:	dc000017 	ldw	r16,0(sp)
   10130:	dec00a04 	addi	sp,sp,40
   10134:	f800283a 	ret
   10138:	b1400117 	ldw	r5,4(r22)
   1013c:	b809883a 	mov	r4,r23
   10140:	29400044 	addi	r5,r5,1
   10144:	000ff7c0 	call	ff7c <_Balloc>
   10148:	b1800417 	ldw	r6,16(r22)
   1014c:	b1400304 	addi	r5,r22,12
   10150:	11000304 	addi	r4,r2,12
   10154:	31800084 	addi	r6,r6,2
   10158:	318d883a 	add	r6,r6,r6
   1015c:	318d883a 	add	r6,r6,r6
   10160:	1021883a 	mov	r16,r2
   10164:	000ac0c0 	call	ac0c <memcpy>
   10168:	b0c00117 	ldw	r3,4(r22)
   1016c:	b8801317 	ldw	r2,76(r23)
   10170:	18c7883a 	add	r3,r3,r3
   10174:	18c7883a 	add	r3,r3,r3
   10178:	10c5883a 	add	r2,r2,r3
   1017c:	10c00017 	ldw	r3,0(r2)
   10180:	b0c00015 	stw	r3,0(r22)
   10184:	15800015 	stw	r22,0(r2)
   10188:	802d883a 	mov	r22,r16
   1018c:	003fd606 	br	100e8 <__multadd+0x9c>

00010190 <__s2b>:
   10190:	defff904 	addi	sp,sp,-28
   10194:	dd000415 	stw	r20,16(sp)
   10198:	dc400115 	stw	r17,4(sp)
   1019c:	2829883a 	mov	r20,r5
   101a0:	2023883a 	mov	r17,r4
   101a4:	01400244 	movi	r5,9
   101a8:	39000204 	addi	r4,r7,8
   101ac:	dcc00315 	stw	r19,12(sp)
   101b0:	dc800215 	stw	r18,8(sp)
   101b4:	dfc00615 	stw	ra,24(sp)
   101b8:	dd400515 	stw	r21,20(sp)
   101bc:	dc000015 	stw	r16,0(sp)
   101c0:	3825883a 	mov	r18,r7
   101c4:	3027883a 	mov	r19,r6
   101c8:	0009d300 	call	9d30 <__divsi3>
   101cc:	00c00044 	movi	r3,1
   101d0:	000b883a 	mov	r5,zero
   101d4:	1880030e 	bge	r3,r2,101e4 <__s2b+0x54>
   101d8:	18c7883a 	add	r3,r3,r3
   101dc:	29400044 	addi	r5,r5,1
   101e0:	18bffd16 	blt	r3,r2,101d8 <__s2b+0x48>
   101e4:	8809883a 	mov	r4,r17
   101e8:	000ff7c0 	call	ff7c <_Balloc>
   101ec:	d8c00717 	ldw	r3,28(sp)
   101f0:	10c00515 	stw	r3,20(r2)
   101f4:	00c00044 	movi	r3,1
   101f8:	10c00415 	stw	r3,16(r2)
   101fc:	00c00244 	movi	r3,9
   10200:	1cc0210e 	bge	r3,r19,10288 <__s2b+0xf8>
   10204:	a0eb883a 	add	r21,r20,r3
   10208:	a821883a 	mov	r16,r21
   1020c:	a4e9883a 	add	r20,r20,r19
   10210:	81c00007 	ldb	r7,0(r16)
   10214:	8809883a 	mov	r4,r17
   10218:	84000044 	addi	r16,r16,1
   1021c:	100b883a 	mov	r5,r2
   10220:	01800284 	movi	r6,10
   10224:	39fff404 	addi	r7,r7,-48
   10228:	001004c0 	call	1004c <__multadd>
   1022c:	853ff81e 	bne	r16,r20,10210 <__s2b+0x80>
   10230:	ace1883a 	add	r16,r21,r19
   10234:	843ffe04 	addi	r16,r16,-8
   10238:	9c800a0e 	bge	r19,r18,10264 <__s2b+0xd4>
   1023c:	94e5c83a 	sub	r18,r18,r19
   10240:	84a5883a 	add	r18,r16,r18
   10244:	81c00007 	ldb	r7,0(r16)
   10248:	8809883a 	mov	r4,r17
   1024c:	84000044 	addi	r16,r16,1
   10250:	100b883a 	mov	r5,r2
   10254:	01800284 	movi	r6,10
   10258:	39fff404 	addi	r7,r7,-48
   1025c:	001004c0 	call	1004c <__multadd>
   10260:	84bff81e 	bne	r16,r18,10244 <__s2b+0xb4>
   10264:	dfc00617 	ldw	ra,24(sp)
   10268:	dd400517 	ldw	r21,20(sp)
   1026c:	dd000417 	ldw	r20,16(sp)
   10270:	dcc00317 	ldw	r19,12(sp)
   10274:	dc800217 	ldw	r18,8(sp)
   10278:	dc400117 	ldw	r17,4(sp)
   1027c:	dc000017 	ldw	r16,0(sp)
   10280:	dec00704 	addi	sp,sp,28
   10284:	f800283a 	ret
   10288:	a4000284 	addi	r16,r20,10
   1028c:	1827883a 	mov	r19,r3
   10290:	003fe906 	br	10238 <__s2b+0xa8>

00010294 <__hi0bits>:
   10294:	20bfffec 	andhi	r2,r4,65535
   10298:	1000141e 	bne	r2,zero,102ec <__hi0bits+0x58>
   1029c:	2008943a 	slli	r4,r4,16
   102a0:	00800404 	movi	r2,16
   102a4:	20ffc02c 	andhi	r3,r4,65280
   102a8:	1800021e 	bne	r3,zero,102b4 <__hi0bits+0x20>
   102ac:	2008923a 	slli	r4,r4,8
   102b0:	10800204 	addi	r2,r2,8
   102b4:	20fc002c 	andhi	r3,r4,61440
   102b8:	1800021e 	bne	r3,zero,102c4 <__hi0bits+0x30>
   102bc:	2008913a 	slli	r4,r4,4
   102c0:	10800104 	addi	r2,r2,4
   102c4:	20f0002c 	andhi	r3,r4,49152
   102c8:	1800031e 	bne	r3,zero,102d8 <__hi0bits+0x44>
   102cc:	2109883a 	add	r4,r4,r4
   102d0:	10800084 	addi	r2,r2,2
   102d4:	2109883a 	add	r4,r4,r4
   102d8:	20000316 	blt	r4,zero,102e8 <__hi0bits+0x54>
   102dc:	2110002c 	andhi	r4,r4,16384
   102e0:	2000041e 	bne	r4,zero,102f4 <__hi0bits+0x60>
   102e4:	00800804 	movi	r2,32
   102e8:	f800283a 	ret
   102ec:	0005883a 	mov	r2,zero
   102f0:	003fec06 	br	102a4 <__hi0bits+0x10>
   102f4:	10800044 	addi	r2,r2,1
   102f8:	f800283a 	ret

000102fc <__lo0bits>:
   102fc:	20c00017 	ldw	r3,0(r4)
   10300:	188001cc 	andi	r2,r3,7
   10304:	10000826 	beq	r2,zero,10328 <__lo0bits+0x2c>
   10308:	1880004c 	andi	r2,r3,1
   1030c:	1000211e 	bne	r2,zero,10394 <__lo0bits+0x98>
   10310:	1880008c 	andi	r2,r3,2
   10314:	1000211e 	bne	r2,zero,1039c <__lo0bits+0xa0>
   10318:	1806d0ba 	srli	r3,r3,2
   1031c:	00800084 	movi	r2,2
   10320:	20c00015 	stw	r3,0(r4)
   10324:	f800283a 	ret
   10328:	18bfffcc 	andi	r2,r3,65535
   1032c:	10001326 	beq	r2,zero,1037c <__lo0bits+0x80>
   10330:	0005883a 	mov	r2,zero
   10334:	19403fcc 	andi	r5,r3,255
   10338:	2800021e 	bne	r5,zero,10344 <__lo0bits+0x48>
   1033c:	1806d23a 	srli	r3,r3,8
   10340:	10800204 	addi	r2,r2,8
   10344:	194003cc 	andi	r5,r3,15
   10348:	2800021e 	bne	r5,zero,10354 <__lo0bits+0x58>
   1034c:	1806d13a 	srli	r3,r3,4
   10350:	10800104 	addi	r2,r2,4
   10354:	194000cc 	andi	r5,r3,3
   10358:	2800021e 	bne	r5,zero,10364 <__lo0bits+0x68>
   1035c:	1806d0ba 	srli	r3,r3,2
   10360:	10800084 	addi	r2,r2,2
   10364:	1940004c 	andi	r5,r3,1
   10368:	2800081e 	bne	r5,zero,1038c <__lo0bits+0x90>
   1036c:	1806d07a 	srli	r3,r3,1
   10370:	1800051e 	bne	r3,zero,10388 <__lo0bits+0x8c>
   10374:	00800804 	movi	r2,32
   10378:	f800283a 	ret
   1037c:	1806d43a 	srli	r3,r3,16
   10380:	00800404 	movi	r2,16
   10384:	003feb06 	br	10334 <__lo0bits+0x38>
   10388:	10800044 	addi	r2,r2,1
   1038c:	20c00015 	stw	r3,0(r4)
   10390:	f800283a 	ret
   10394:	0005883a 	mov	r2,zero
   10398:	f800283a 	ret
   1039c:	1806d07a 	srli	r3,r3,1
   103a0:	00800044 	movi	r2,1
   103a4:	20c00015 	stw	r3,0(r4)
   103a8:	f800283a 	ret

000103ac <__i2b>:
   103ac:	defffd04 	addi	sp,sp,-12
   103b0:	dc000015 	stw	r16,0(sp)
   103b4:	04000044 	movi	r16,1
   103b8:	dc400115 	stw	r17,4(sp)
   103bc:	2823883a 	mov	r17,r5
   103c0:	800b883a 	mov	r5,r16
   103c4:	dfc00215 	stw	ra,8(sp)
   103c8:	000ff7c0 	call	ff7c <_Balloc>
   103cc:	14400515 	stw	r17,20(r2)
   103d0:	14000415 	stw	r16,16(r2)
   103d4:	dfc00217 	ldw	ra,8(sp)
   103d8:	dc400117 	ldw	r17,4(sp)
   103dc:	dc000017 	ldw	r16,0(sp)
   103e0:	dec00304 	addi	sp,sp,12
   103e4:	f800283a 	ret

000103e8 <__multiply>:
   103e8:	defff004 	addi	sp,sp,-64
   103ec:	dc800815 	stw	r18,32(sp)
   103f0:	dc400715 	stw	r17,28(sp)
   103f4:	34800417 	ldw	r18,16(r6)
   103f8:	2c400417 	ldw	r17,16(r5)
   103fc:	ddc00d15 	stw	r23,52(sp)
   10400:	dc000615 	stw	r16,24(sp)
   10404:	dfc00f15 	stw	ra,60(sp)
   10408:	df000e15 	stw	fp,56(sp)
   1040c:	dd800c15 	stw	r22,48(sp)
   10410:	dd400b15 	stw	r21,44(sp)
   10414:	dd000a15 	stw	r20,40(sp)
   10418:	dcc00915 	stw	r19,36(sp)
   1041c:	2821883a 	mov	r16,r5
   10420:	302f883a 	mov	r23,r6
   10424:	8c80050e 	bge	r17,r18,1043c <__multiply+0x54>
   10428:	8807883a 	mov	r3,r17
   1042c:	3021883a 	mov	r16,r6
   10430:	9023883a 	mov	r17,r18
   10434:	282f883a 	mov	r23,r5
   10438:	1825883a 	mov	r18,r3
   1043c:	80800217 	ldw	r2,8(r16)
   10440:	8c87883a 	add	r3,r17,r18
   10444:	d8c00115 	stw	r3,4(sp)
   10448:	81400117 	ldw	r5,4(r16)
   1044c:	10c0010e 	bge	r2,r3,10454 <__multiply+0x6c>
   10450:	29400044 	addi	r5,r5,1
   10454:	000ff7c0 	call	ff7c <_Balloc>
   10458:	d8c00117 	ldw	r3,4(sp)
   1045c:	d8800515 	stw	r2,20(sp)
   10460:	14c00504 	addi	r19,r2,20
   10464:	1d400144 	addi	r21,r3,5
   10468:	ad6b883a 	add	r21,r21,r21
   1046c:	ad6b883a 	add	r21,r21,r21
   10470:	156b883a 	add	r21,r2,r21
   10474:	dd400215 	stw	r21,8(sp)
   10478:	9805883a 	mov	r2,r19
   1047c:	9d40042e 	bgeu	r19,r21,10490 <__multiply+0xa8>
   10480:	d8c00217 	ldw	r3,8(sp)
   10484:	10000015 	stw	zero,0(r2)
   10488:	10800104 	addi	r2,r2,4
   1048c:	10fffc36 	bltu	r2,r3,10480 <__multiply+0x98>
   10490:	94800144 	addi	r18,r18,5
   10494:	94a5883a 	add	r18,r18,r18
   10498:	94ad883a 	add	r22,r18,r18
   1049c:	8c400144 	addi	r17,r17,5
   104a0:	8c63883a 	add	r17,r17,r17
   104a4:	bdad883a 	add	r22,r23,r22
   104a8:	80c00504 	addi	r3,r16,20
   104ac:	8c63883a 	add	r17,r17,r17
   104b0:	bc800504 	addi	r18,r23,20
   104b4:	dd800315 	stw	r22,12(sp)
   104b8:	d8c00415 	stw	r3,16(sp)
   104bc:	dcc00015 	stw	r19,0(sp)
   104c0:	8463883a 	add	r17,r16,r17
   104c4:	9580412e 	bgeu	r18,r22,105cc <__multiply+0x1e4>
   104c8:	90800017 	ldw	r2,0(r18)
   104cc:	173fffcc 	andi	fp,r2,65535
   104d0:	e0001a26 	beq	fp,zero,1053c <__multiply+0x154>
   104d4:	dd000017 	ldw	r20,0(sp)
   104d8:	dd800417 	ldw	r22,16(sp)
   104dc:	002b883a 	mov	r21,zero
   104e0:	b4c00017 	ldw	r19,0(r22)
   104e4:	a4000017 	ldw	r16,0(r20)
   104e8:	e00b883a 	mov	r5,fp
   104ec:	993fffcc 	andi	r4,r19,65535
   104f0:	0009dec0 	call	9dec <__mulsi3>
   104f4:	9808d43a 	srli	r4,r19,16
   104f8:	817fffcc 	andi	r5,r16,65535
   104fc:	1145883a 	add	r2,r2,r5
   10500:	e00b883a 	mov	r5,fp
   10504:	1567883a 	add	r19,r2,r21
   10508:	8020d43a 	srli	r16,r16,16
   1050c:	0009dec0 	call	9dec <__mulsi3>
   10510:	9808d43a 	srli	r4,r19,16
   10514:	1405883a 	add	r2,r2,r16
   10518:	a4c0000d 	sth	r19,0(r20)
   1051c:	110f883a 	add	r7,r2,r4
   10520:	a1c0008d 	sth	r7,2(r20)
   10524:	b5800104 	addi	r22,r22,4
   10528:	382ad43a 	srli	r21,r7,16
   1052c:	a5000104 	addi	r20,r20,4
   10530:	b47feb36 	bltu	r22,r17,104e0 <__multiply+0xf8>
   10534:	a5400015 	stw	r21,0(r20)
   10538:	90800017 	ldw	r2,0(r18)
   1053c:	1038d43a 	srli	fp,r2,16
   10540:	e0001c26 	beq	fp,zero,105b4 <__multiply+0x1cc>
   10544:	d8c00017 	ldw	r3,0(sp)
   10548:	dd000417 	ldw	r20,16(sp)
   1054c:	002b883a 	mov	r21,zero
   10550:	1d800017 	ldw	r22,0(r3)
   10554:	182f883a 	mov	r23,r3
   10558:	b021883a 	mov	r16,r22
   1055c:	a4c00017 	ldw	r19,0(r20)
   10560:	8020d43a 	srli	r16,r16,16
   10564:	e00b883a 	mov	r5,fp
   10568:	993fffcc 	andi	r4,r19,65535
   1056c:	0009dec0 	call	9dec <__mulsi3>
   10570:	1405883a 	add	r2,r2,r16
   10574:	9808d43a 	srli	r4,r19,16
   10578:	156b883a 	add	r21,r2,r21
   1057c:	bdc00104 	addi	r23,r23,4
   10580:	bdbfff0d 	sth	r22,-4(r23)
   10584:	bd7fff8d 	sth	r21,-2(r23)
   10588:	bc000017 	ldw	r16,0(r23)
   1058c:	e00b883a 	mov	r5,fp
   10590:	0009dec0 	call	9dec <__mulsi3>
   10594:	a80ed43a 	srli	r7,r21,16
   10598:	813fffcc 	andi	r4,r16,65535
   1059c:	2085883a 	add	r2,r4,r2
   105a0:	11ed883a 	add	r22,r2,r7
   105a4:	a5000104 	addi	r20,r20,4
   105a8:	b02ad43a 	srli	r21,r22,16
   105ac:	a47feb36 	bltu	r20,r17,1055c <__multiply+0x174>
   105b0:	bd800015 	stw	r22,0(r23)
   105b4:	d8c00017 	ldw	r3,0(sp)
   105b8:	94800104 	addi	r18,r18,4
   105bc:	18c00104 	addi	r3,r3,4
   105c0:	d8c00015 	stw	r3,0(sp)
   105c4:	d8c00317 	ldw	r3,12(sp)
   105c8:	90ffbf36 	bltu	r18,r3,104c8 <__multiply+0xe0>
   105cc:	d8c00117 	ldw	r3,4(sp)
   105d0:	00c00c0e 	bge	zero,r3,10604 <__multiply+0x21c>
   105d4:	d8c00217 	ldw	r3,8(sp)
   105d8:	18bfff17 	ldw	r2,-4(r3)
   105dc:	1d7fff04 	addi	r21,r3,-4
   105e0:	10000326 	beq	r2,zero,105f0 <__multiply+0x208>
   105e4:	00000706 	br	10604 <__multiply+0x21c>
   105e8:	a8800017 	ldw	r2,0(r21)
   105ec:	1000051e 	bne	r2,zero,10604 <__multiply+0x21c>
   105f0:	d8c00117 	ldw	r3,4(sp)
   105f4:	ad7fff04 	addi	r21,r21,-4
   105f8:	18ffffc4 	addi	r3,r3,-1
   105fc:	d8c00115 	stw	r3,4(sp)
   10600:	183ff91e 	bne	r3,zero,105e8 <__multiply+0x200>
   10604:	d8800517 	ldw	r2,20(sp)
   10608:	d8c00117 	ldw	r3,4(sp)
   1060c:	10c00415 	stw	r3,16(r2)
   10610:	dfc00f17 	ldw	ra,60(sp)
   10614:	df000e17 	ldw	fp,56(sp)
   10618:	ddc00d17 	ldw	r23,52(sp)
   1061c:	dd800c17 	ldw	r22,48(sp)
   10620:	dd400b17 	ldw	r21,44(sp)
   10624:	dd000a17 	ldw	r20,40(sp)
   10628:	dcc00917 	ldw	r19,36(sp)
   1062c:	dc800817 	ldw	r18,32(sp)
   10630:	dc400717 	ldw	r17,28(sp)
   10634:	dc000617 	ldw	r16,24(sp)
   10638:	dec01004 	addi	sp,sp,64
   1063c:	f800283a 	ret

00010640 <__pow5mult>:
   10640:	defffb04 	addi	sp,sp,-20
   10644:	dcc00315 	stw	r19,12(sp)
   10648:	dc800215 	stw	r18,8(sp)
   1064c:	dc000015 	stw	r16,0(sp)
   10650:	dfc00415 	stw	ra,16(sp)
   10654:	dc400115 	stw	r17,4(sp)
   10658:	308000cc 	andi	r2,r6,3
   1065c:	3021883a 	mov	r16,r6
   10660:	2027883a 	mov	r19,r4
   10664:	2825883a 	mov	r18,r5
   10668:	10002e1e 	bne	r2,zero,10724 <__pow5mult+0xe4>
   1066c:	8021d0ba 	srai	r16,r16,2
   10670:	80001a26 	beq	r16,zero,106dc <__pow5mult+0x9c>
   10674:	9c401217 	ldw	r17,72(r19)
   10678:	8800061e 	bne	r17,zero,10694 <__pow5mult+0x54>
   1067c:	00003406 	br	10750 <__pow5mult+0x110>
   10680:	8021d07a 	srai	r16,r16,1
   10684:	80001526 	beq	r16,zero,106dc <__pow5mult+0x9c>
   10688:	88c00017 	ldw	r3,0(r17)
   1068c:	18001b26 	beq	r3,zero,106fc <__pow5mult+0xbc>
   10690:	1823883a 	mov	r17,r3
   10694:	80c0004c 	andi	r3,r16,1
   10698:	183ff926 	beq	r3,zero,10680 <__pow5mult+0x40>
   1069c:	900b883a 	mov	r5,r18
   106a0:	880d883a 	mov	r6,r17
   106a4:	9809883a 	mov	r4,r19
   106a8:	00103e80 	call	103e8 <__multiply>
   106ac:	90001b26 	beq	r18,zero,1071c <__pow5mult+0xdc>
   106b0:	91000117 	ldw	r4,4(r18)
   106b4:	98c01317 	ldw	r3,76(r19)
   106b8:	8021d07a 	srai	r16,r16,1
   106bc:	2109883a 	add	r4,r4,r4
   106c0:	2109883a 	add	r4,r4,r4
   106c4:	1907883a 	add	r3,r3,r4
   106c8:	19000017 	ldw	r4,0(r3)
   106cc:	91000015 	stw	r4,0(r18)
   106d0:	1c800015 	stw	r18,0(r3)
   106d4:	1025883a 	mov	r18,r2
   106d8:	803feb1e 	bne	r16,zero,10688 <__pow5mult+0x48>
   106dc:	9005883a 	mov	r2,r18
   106e0:	dfc00417 	ldw	ra,16(sp)
   106e4:	dcc00317 	ldw	r19,12(sp)
   106e8:	dc800217 	ldw	r18,8(sp)
   106ec:	dc400117 	ldw	r17,4(sp)
   106f0:	dc000017 	ldw	r16,0(sp)
   106f4:	dec00504 	addi	sp,sp,20
   106f8:	f800283a 	ret
   106fc:	880b883a 	mov	r5,r17
   10700:	880d883a 	mov	r6,r17
   10704:	9809883a 	mov	r4,r19
   10708:	00103e80 	call	103e8 <__multiply>
   1070c:	88800015 	stw	r2,0(r17)
   10710:	10000015 	stw	zero,0(r2)
   10714:	1023883a 	mov	r17,r2
   10718:	003fde06 	br	10694 <__pow5mult+0x54>
   1071c:	1025883a 	mov	r18,r2
   10720:	003fd706 	br	10680 <__pow5mult+0x40>
   10724:	10bfffc4 	addi	r2,r2,-1
   10728:	1085883a 	add	r2,r2,r2
   1072c:	00c001f4 	movhi	r3,7
   10730:	18d17f04 	addi	r3,r3,17916
   10734:	1085883a 	add	r2,r2,r2
   10738:	1885883a 	add	r2,r3,r2
   1073c:	11800017 	ldw	r6,0(r2)
   10740:	000f883a 	mov	r7,zero
   10744:	001004c0 	call	1004c <__multadd>
   10748:	1025883a 	mov	r18,r2
   1074c:	003fc706 	br	1066c <__pow5mult+0x2c>
   10750:	9809883a 	mov	r4,r19
   10754:	01409c44 	movi	r5,625
   10758:	00103ac0 	call	103ac <__i2b>
   1075c:	98801215 	stw	r2,72(r19)
   10760:	1023883a 	mov	r17,r2
   10764:	10000015 	stw	zero,0(r2)
   10768:	003fca06 	br	10694 <__pow5mult+0x54>

0001076c <__lshift>:
   1076c:	defff904 	addi	sp,sp,-28
   10770:	dd400515 	stw	r21,20(sp)
   10774:	dc400115 	stw	r17,4(sp)
   10778:	2d400417 	ldw	r21,16(r5)
   1077c:	3023d17a 	srai	r17,r6,5
   10780:	28800217 	ldw	r2,8(r5)
   10784:	dd000415 	stw	r20,16(sp)
   10788:	8d6b883a 	add	r21,r17,r21
   1078c:	dcc00315 	stw	r19,12(sp)
   10790:	dc800215 	stw	r18,8(sp)
   10794:	dc000015 	stw	r16,0(sp)
   10798:	dfc00615 	stw	ra,24(sp)
   1079c:	ac000044 	addi	r16,r21,1
   107a0:	2825883a 	mov	r18,r5
   107a4:	3029883a 	mov	r20,r6
   107a8:	2027883a 	mov	r19,r4
   107ac:	29400117 	ldw	r5,4(r5)
   107b0:	1400030e 	bge	r2,r16,107c0 <__lshift+0x54>
   107b4:	1085883a 	add	r2,r2,r2
   107b8:	29400044 	addi	r5,r5,1
   107bc:	143ffd16 	blt	r2,r16,107b4 <__lshift+0x48>
   107c0:	9809883a 	mov	r4,r19
   107c4:	000ff7c0 	call	ff7c <_Balloc>
   107c8:	10c00504 	addi	r3,r2,20
   107cc:	0440090e 	bge	zero,r17,107f4 <__lshift+0x88>
   107d0:	000f883a 	mov	r7,zero
   107d4:	18000015 	stw	zero,0(r3)
   107d8:	39c00044 	addi	r7,r7,1
   107dc:	18c00104 	addi	r3,r3,4
   107e0:	3c7ffc1e 	bne	r7,r17,107d4 <__lshift+0x68>
   107e4:	38c00144 	addi	r3,r7,5
   107e8:	18c7883a 	add	r3,r3,r3
   107ec:	18c7883a 	add	r3,r3,r3
   107f0:	10c7883a 	add	r3,r2,r3
   107f4:	92000417 	ldw	r8,16(r18)
   107f8:	a18007cc 	andi	r6,r20,31
   107fc:	91c00504 	addi	r7,r18,20
   10800:	42000144 	addi	r8,r8,5
   10804:	4211883a 	add	r8,r8,r8
   10808:	4211883a 	add	r8,r8,r8
   1080c:	9211883a 	add	r8,r18,r8
   10810:	30002226 	beq	r6,zero,1089c <__lshift+0x130>
   10814:	02800804 	movi	r10,32
   10818:	5195c83a 	sub	r10,r10,r6
   1081c:	000b883a 	mov	r5,zero
   10820:	3a400017 	ldw	r9,0(r7)
   10824:	18c00104 	addi	r3,r3,4
   10828:	39c00104 	addi	r7,r7,4
   1082c:	4992983a 	sll	r9,r9,r6
   10830:	2a4ab03a 	or	r5,r5,r9
   10834:	197fff15 	stw	r5,-4(r3)
   10838:	397fff17 	ldw	r5,-4(r7)
   1083c:	2a8ad83a 	srl	r5,r5,r10
   10840:	3a3ff736 	bltu	r7,r8,10820 <__lshift+0xb4>
   10844:	19400015 	stw	r5,0(r3)
   10848:	28000126 	beq	r5,zero,10850 <__lshift+0xe4>
   1084c:	ac000084 	addi	r16,r21,2
   10850:	91000117 	ldw	r4,4(r18)
   10854:	98c01317 	ldw	r3,76(r19)
   10858:	843fffc4 	addi	r16,r16,-1
   1085c:	2109883a 	add	r4,r4,r4
   10860:	2109883a 	add	r4,r4,r4
   10864:	1907883a 	add	r3,r3,r4
   10868:	19000017 	ldw	r4,0(r3)
   1086c:	14000415 	stw	r16,16(r2)
   10870:	91000015 	stw	r4,0(r18)
   10874:	1c800015 	stw	r18,0(r3)
   10878:	dfc00617 	ldw	ra,24(sp)
   1087c:	dd400517 	ldw	r21,20(sp)
   10880:	dd000417 	ldw	r20,16(sp)
   10884:	dcc00317 	ldw	r19,12(sp)
   10888:	dc800217 	ldw	r18,8(sp)
   1088c:	dc400117 	ldw	r17,4(sp)
   10890:	dc000017 	ldw	r16,0(sp)
   10894:	dec00704 	addi	sp,sp,28
   10898:	f800283a 	ret
   1089c:	39400017 	ldw	r5,0(r7)
   108a0:	18c00104 	addi	r3,r3,4
   108a4:	39c00104 	addi	r7,r7,4
   108a8:	197fff15 	stw	r5,-4(r3)
   108ac:	3a3fe82e 	bgeu	r7,r8,10850 <__lshift+0xe4>
   108b0:	39400017 	ldw	r5,0(r7)
   108b4:	18c00104 	addi	r3,r3,4
   108b8:	39c00104 	addi	r7,r7,4
   108bc:	197fff15 	stw	r5,-4(r3)
   108c0:	3a3ff636 	bltu	r7,r8,1089c <__lshift+0x130>
   108c4:	003fe206 	br	10850 <__lshift+0xe4>

000108c8 <__mcmp>:
   108c8:	20800417 	ldw	r2,16(r4)
   108cc:	28c00417 	ldw	r3,16(r5)
   108d0:	10c5c83a 	sub	r2,r2,r3
   108d4:	10000f1e 	bne	r2,zero,10914 <__mcmp+0x4c>
   108d8:	18c00144 	addi	r3,r3,5
   108dc:	18c7883a 	add	r3,r3,r3
   108e0:	18c7883a 	add	r3,r3,r3
   108e4:	21c00504 	addi	r7,r4,20
   108e8:	28cb883a 	add	r5,r5,r3
   108ec:	20c9883a 	add	r4,r4,r3
   108f0:	213fff04 	addi	r4,r4,-4
   108f4:	297fff04 	addi	r5,r5,-4
   108f8:	21800017 	ldw	r6,0(r4)
   108fc:	28c00017 	ldw	r3,0(r5)
   10900:	30c0021e 	bne	r6,r3,1090c <__mcmp+0x44>
   10904:	393ffa36 	bltu	r7,r4,108f0 <__mcmp+0x28>
   10908:	f800283a 	ret
   1090c:	30c00236 	bltu	r6,r3,10918 <__mcmp+0x50>
   10910:	00800044 	movi	r2,1
   10914:	f800283a 	ret
   10918:	00bfffc4 	movi	r2,-1
   1091c:	f800283a 	ret

00010920 <__mdiff>:
   10920:	defffb04 	addi	sp,sp,-20
   10924:	dc000015 	stw	r16,0(sp)
   10928:	2821883a 	mov	r16,r5
   1092c:	dc800215 	stw	r18,8(sp)
   10930:	300b883a 	mov	r5,r6
   10934:	2025883a 	mov	r18,r4
   10938:	8009883a 	mov	r4,r16
   1093c:	dc400115 	stw	r17,4(sp)
   10940:	dfc00415 	stw	ra,16(sp)
   10944:	dcc00315 	stw	r19,12(sp)
   10948:	3023883a 	mov	r17,r6
   1094c:	00108c80 	call	108c8 <__mcmp>
   10950:	10005026 	beq	r2,zero,10a94 <__mdiff+0x174>
   10954:	10004a16 	blt	r2,zero,10a80 <__mdiff+0x160>
   10958:	0027883a 	mov	r19,zero
   1095c:	81400117 	ldw	r5,4(r16)
   10960:	9009883a 	mov	r4,r18
   10964:	000ff7c0 	call	ff7c <_Balloc>
   10968:	82400417 	ldw	r9,16(r16)
   1096c:	89800417 	ldw	r6,16(r17)
   10970:	14c00315 	stw	r19,12(r2)
   10974:	4b800144 	addi	r14,r9,5
   10978:	31800144 	addi	r6,r6,5
   1097c:	739d883a 	add	r14,r14,r14
   10980:	318d883a 	add	r6,r6,r6
   10984:	739d883a 	add	r14,r14,r14
   10988:	318d883a 	add	r6,r6,r6
   1098c:	81c00504 	addi	r7,r16,20
   10990:	839d883a 	add	r14,r16,r14
   10994:	8a000504 	addi	r8,r17,20
   10998:	898d883a 	add	r6,r17,r6
   1099c:	10c00504 	addi	r3,r2,20
   109a0:	0009883a 	mov	r4,zero
   109a4:	3b000017 	ldw	r12,0(r7)
   109a8:	42c00017 	ldw	r11,0(r8)
   109ac:	42000104 	addi	r8,r8,4
   109b0:	62bfffcc 	andi	r10,r12,65535
   109b4:	5b7fffcc 	andi	r13,r11,65535
   109b8:	5109883a 	add	r4,r10,r4
   109bc:	2355c83a 	sub	r10,r4,r13
   109c0:	5816d43a 	srli	r11,r11,16
   109c4:	6008d43a 	srli	r4,r12,16
   109c8:	501bd43a 	srai	r13,r10,16
   109cc:	1a80000d 	sth	r10,0(r3)
   109d0:	22c9c83a 	sub	r4,r4,r11
   109d4:	2349883a 	add	r4,r4,r13
   109d8:	1900008d 	sth	r4,2(r3)
   109dc:	39c00104 	addi	r7,r7,4
   109e0:	2009d43a 	srai	r4,r4,16
   109e4:	18c00104 	addi	r3,r3,4
   109e8:	41bfee36 	bltu	r8,r6,109a4 <__mdiff+0x84>
   109ec:	180b883a 	mov	r5,r3
   109f0:	3815883a 	mov	r10,r7
   109f4:	3b80132e 	bgeu	r7,r14,10a44 <__mdiff+0x124>
   109f8:	3a000017 	ldw	r8,0(r7)
   109fc:	18c00104 	addi	r3,r3,4
   10a00:	39c00104 	addi	r7,r7,4
   10a04:	41bfffcc 	andi	r6,r8,65535
   10a08:	310d883a 	add	r6,r6,r4
   10a0c:	3009d43a 	srai	r4,r6,16
   10a10:	4010d43a 	srli	r8,r8,16
   10a14:	19bfff0d 	sth	r6,-4(r3)
   10a18:	2209883a 	add	r4,r4,r8
   10a1c:	193fff8d 	sth	r4,-2(r3)
   10a20:	2009d43a 	srai	r4,r4,16
   10a24:	3bbff436 	bltu	r7,r14,109f8 <__mdiff+0xd8>
   10a28:	0286303a 	nor	r3,zero,r10
   10a2c:	1b87883a 	add	r3,r3,r14
   10a30:	1806d0ba 	srli	r3,r3,2
   10a34:	18c00044 	addi	r3,r3,1
   10a38:	18c7883a 	add	r3,r3,r3
   10a3c:	18c7883a 	add	r3,r3,r3
   10a40:	28c7883a 	add	r3,r5,r3
   10a44:	193fff17 	ldw	r4,-4(r3)
   10a48:	18ffff04 	addi	r3,r3,-4
   10a4c:	2000041e 	bne	r4,zero,10a60 <__mdiff+0x140>
   10a50:	18ffff04 	addi	r3,r3,-4
   10a54:	19000017 	ldw	r4,0(r3)
   10a58:	4a7fffc4 	addi	r9,r9,-1
   10a5c:	203ffc26 	beq	r4,zero,10a50 <__mdiff+0x130>
   10a60:	12400415 	stw	r9,16(r2)
   10a64:	dfc00417 	ldw	ra,16(sp)
   10a68:	dcc00317 	ldw	r19,12(sp)
   10a6c:	dc800217 	ldw	r18,8(sp)
   10a70:	dc400117 	ldw	r17,4(sp)
   10a74:	dc000017 	ldw	r16,0(sp)
   10a78:	dec00504 	addi	sp,sp,20
   10a7c:	f800283a 	ret
   10a80:	8005883a 	mov	r2,r16
   10a84:	04c00044 	movi	r19,1
   10a88:	8821883a 	mov	r16,r17
   10a8c:	1023883a 	mov	r17,r2
   10a90:	003fb206 	br	1095c <__mdiff+0x3c>
   10a94:	9009883a 	mov	r4,r18
   10a98:	000b883a 	mov	r5,zero
   10a9c:	000ff7c0 	call	ff7c <_Balloc>
   10aa0:	00c00044 	movi	r3,1
   10aa4:	10c00415 	stw	r3,16(r2)
   10aa8:	10000515 	stw	zero,20(r2)
   10aac:	dfc00417 	ldw	ra,16(sp)
   10ab0:	dcc00317 	ldw	r19,12(sp)
   10ab4:	dc800217 	ldw	r18,8(sp)
   10ab8:	dc400117 	ldw	r17,4(sp)
   10abc:	dc000017 	ldw	r16,0(sp)
   10ac0:	dec00504 	addi	sp,sp,20
   10ac4:	f800283a 	ret

00010ac8 <__ulp>:
   10ac8:	295ffc2c 	andhi	r5,r5,32752
   10acc:	00bf3034 	movhi	r2,64704
   10ad0:	2887883a 	add	r3,r5,r2
   10ad4:	00c0020e 	bge	zero,r3,10ae0 <__ulp+0x18>
   10ad8:	0005883a 	mov	r2,zero
   10adc:	f800283a 	ret
   10ae0:	00c7c83a 	sub	r3,zero,r3
   10ae4:	1805d53a 	srai	r2,r3,20
   10ae8:	00c004c4 	movi	r3,19
   10aec:	18800a0e 	bge	r3,r2,10b18 <__ulp+0x50>
   10af0:	01000c84 	movi	r4,50
   10af4:	0007883a 	mov	r3,zero
   10af8:	20800516 	blt	r4,r2,10b10 <__ulp+0x48>
   10afc:	01000cc4 	movi	r4,51
   10b00:	2085c83a 	sub	r2,r4,r2
   10b04:	01000044 	movi	r4,1
   10b08:	2084983a 	sll	r2,r4,r2
   10b0c:	f800283a 	ret
   10b10:	00800044 	movi	r2,1
   10b14:	f800283a 	ret
   10b18:	00c00234 	movhi	r3,8
   10b1c:	1887d83a 	sra	r3,r3,r2
   10b20:	0005883a 	mov	r2,zero
   10b24:	f800283a 	ret

00010b28 <__b2d>:
   10b28:	defffa04 	addi	sp,sp,-24
   10b2c:	dc000015 	stw	r16,0(sp)
   10b30:	24000417 	ldw	r16,16(r4)
   10b34:	dc400115 	stw	r17,4(sp)
   10b38:	dcc00315 	stw	r19,12(sp)
   10b3c:	84000144 	addi	r16,r16,5
   10b40:	8421883a 	add	r16,r16,r16
   10b44:	8421883a 	add	r16,r16,r16
   10b48:	2421883a 	add	r16,r4,r16
   10b4c:	847fff17 	ldw	r17,-4(r16)
   10b50:	24c00504 	addi	r19,r4,20
   10b54:	dd000415 	stw	r20,16(sp)
   10b58:	8809883a 	mov	r4,r17
   10b5c:	dc800215 	stw	r18,8(sp)
   10b60:	2829883a 	mov	r20,r5
   10b64:	dfc00515 	stw	ra,20(sp)
   10b68:	00102940 	call	10294 <__hi0bits>
   10b6c:	00c00804 	movi	r3,32
   10b70:	1887c83a 	sub	r3,r3,r2
   10b74:	a0c00015 	stw	r3,0(r20)
   10b78:	00c00284 	movi	r3,10
   10b7c:	84bfff04 	addi	r18,r16,-4
   10b80:	18801216 	blt	r3,r2,10bcc <__b2d+0xa4>
   10b84:	010002c4 	movi	r4,11
   10b88:	2089c83a 	sub	r4,r4,r2
   10b8c:	8906d83a 	srl	r3,r17,r4
   10b90:	18cffc34 	orhi	r3,r3,16368
   10b94:	9c80322e 	bgeu	r19,r18,10c60 <__b2d+0x138>
   10b98:	817ffe17 	ldw	r5,-8(r16)
   10b9c:	2908d83a 	srl	r4,r5,r4
   10ba0:	10800544 	addi	r2,r2,21
   10ba4:	88a2983a 	sll	r17,r17,r2
   10ba8:	2444b03a 	or	r2,r4,r17
   10bac:	dfc00517 	ldw	ra,20(sp)
   10bb0:	dd000417 	ldw	r20,16(sp)
   10bb4:	dcc00317 	ldw	r19,12(sp)
   10bb8:	dc800217 	ldw	r18,8(sp)
   10bbc:	dc400117 	ldw	r17,4(sp)
   10bc0:	dc000017 	ldw	r16,0(sp)
   10bc4:	dec00604 	addi	sp,sp,24
   10bc8:	f800283a 	ret
   10bcc:	9c801636 	bltu	r19,r18,10c28 <__b2d+0x100>
   10bd0:	113ffd44 	addi	r4,r2,-11
   10bd4:	000b883a 	mov	r5,zero
   10bd8:	20001726 	beq	r4,zero,10c38 <__b2d+0x110>
   10bdc:	00c00ac4 	movi	r3,43
   10be0:	1885c83a 	sub	r2,r3,r2
   10be4:	8906983a 	sll	r3,r17,r4
   10be8:	288cd83a 	srl	r6,r5,r2
   10bec:	18cffc34 	orhi	r3,r3,16368
   10bf0:	1986b03a 	or	r3,r3,r6
   10bf4:	9c801c2e 	bgeu	r19,r18,10c68 <__b2d+0x140>
   10bf8:	91bfff17 	ldw	r6,-4(r18)
   10bfc:	3084d83a 	srl	r2,r6,r2
   10c00:	2908983a 	sll	r4,r5,r4
   10c04:	1104b03a 	or	r2,r2,r4
   10c08:	dfc00517 	ldw	ra,20(sp)
   10c0c:	dd000417 	ldw	r20,16(sp)
   10c10:	dcc00317 	ldw	r19,12(sp)
   10c14:	dc800217 	ldw	r18,8(sp)
   10c18:	dc400117 	ldw	r17,4(sp)
   10c1c:	dc000017 	ldw	r16,0(sp)
   10c20:	dec00604 	addi	sp,sp,24
   10c24:	f800283a 	ret
   10c28:	113ffd44 	addi	r4,r2,-11
   10c2c:	84bffe04 	addi	r18,r16,-8
   10c30:	817ffe17 	ldw	r5,-8(r16)
   10c34:	203fe91e 	bne	r4,zero,10bdc <__b2d+0xb4>
   10c38:	88cffc34 	orhi	r3,r17,16368
   10c3c:	2805883a 	mov	r2,r5
   10c40:	dfc00517 	ldw	ra,20(sp)
   10c44:	dd000417 	ldw	r20,16(sp)
   10c48:	dcc00317 	ldw	r19,12(sp)
   10c4c:	dc800217 	ldw	r18,8(sp)
   10c50:	dc400117 	ldw	r17,4(sp)
   10c54:	dc000017 	ldw	r16,0(sp)
   10c58:	dec00604 	addi	sp,sp,24
   10c5c:	f800283a 	ret
   10c60:	0009883a 	mov	r4,zero
   10c64:	003fce06 	br	10ba0 <__b2d+0x78>
   10c68:	0005883a 	mov	r2,zero
   10c6c:	003fe406 	br	10c00 <__b2d+0xd8>

00010c70 <__d2b>:
   10c70:	defff804 	addi	sp,sp,-32
   10c74:	dc400315 	stw	r17,12(sp)
   10c78:	3023883a 	mov	r17,r6
   10c7c:	dc800415 	stw	r18,16(sp)
   10c80:	8824907a 	slli	r18,r17,1
   10c84:	dcc00515 	stw	r19,20(sp)
   10c88:	2827883a 	mov	r19,r5
   10c8c:	9024d57a 	srli	r18,r18,21
   10c90:	01400044 	movi	r5,1
   10c94:	dd000615 	stw	r20,24(sp)
   10c98:	dc000215 	stw	r16,8(sp)
   10c9c:	dfc00715 	stw	ra,28(sp)
   10ca0:	3829883a 	mov	r20,r7
   10ca4:	000ff7c0 	call	ff7c <_Balloc>
   10ca8:	1021883a 	mov	r16,r2
   10cac:	00800434 	movhi	r2,16
   10cb0:	10bfffc4 	addi	r2,r2,-1
   10cb4:	88a2703a 	and	r17,r17,r2
   10cb8:	90000126 	beq	r18,zero,10cc0 <__d2b+0x50>
   10cbc:	8c400434 	orhi	r17,r17,16
   10cc0:	dc400015 	stw	r17,0(sp)
   10cc4:	98002226 	beq	r19,zero,10d50 <__d2b+0xe0>
   10cc8:	d9000104 	addi	r4,sp,4
   10ccc:	dcc00115 	stw	r19,4(sp)
   10cd0:	00102fc0 	call	102fc <__lo0bits>
   10cd4:	d8c00017 	ldw	r3,0(sp)
   10cd8:	10002d1e 	bne	r2,zero,10d90 <__d2b+0x120>
   10cdc:	d9000117 	ldw	r4,4(sp)
   10ce0:	81000515 	stw	r4,20(r16)
   10ce4:	1823003a 	cmpeq	r17,r3,zero
   10ce8:	01000084 	movi	r4,2
   10cec:	2463c83a 	sub	r17,r4,r17
   10cf0:	80c00615 	stw	r3,24(r16)
   10cf4:	84400415 	stw	r17,16(r16)
   10cf8:	90001d1e 	bne	r18,zero,10d70 <__d2b+0x100>
   10cfc:	88c00104 	addi	r3,r17,4
   10d00:	18c7883a 	add	r3,r3,r3
   10d04:	18c7883a 	add	r3,r3,r3
   10d08:	80c7883a 	add	r3,r16,r3
   10d0c:	19000017 	ldw	r4,0(r3)
   10d10:	10bef384 	addi	r2,r2,-1074
   10d14:	a0800015 	stw	r2,0(r20)
   10d18:	00102940 	call	10294 <__hi0bits>
   10d1c:	8822917a 	slli	r17,r17,5
   10d20:	d8c00817 	ldw	r3,32(sp)
   10d24:	8885c83a 	sub	r2,r17,r2
   10d28:	18800015 	stw	r2,0(r3)
   10d2c:	8005883a 	mov	r2,r16
   10d30:	dfc00717 	ldw	ra,28(sp)
   10d34:	dd000617 	ldw	r20,24(sp)
   10d38:	dcc00517 	ldw	r19,20(sp)
   10d3c:	dc800417 	ldw	r18,16(sp)
   10d40:	dc400317 	ldw	r17,12(sp)
   10d44:	dc000217 	ldw	r16,8(sp)
   10d48:	dec00804 	addi	sp,sp,32
   10d4c:	f800283a 	ret
   10d50:	d809883a 	mov	r4,sp
   10d54:	00102fc0 	call	102fc <__lo0bits>
   10d58:	d8c00017 	ldw	r3,0(sp)
   10d5c:	04400044 	movi	r17,1
   10d60:	84400415 	stw	r17,16(r16)
   10d64:	80c00515 	stw	r3,20(r16)
   10d68:	10800804 	addi	r2,r2,32
   10d6c:	903fe326 	beq	r18,zero,10cfc <__d2b+0x8c>
   10d70:	00c00d44 	movi	r3,53
   10d74:	94bef344 	addi	r18,r18,-1075
   10d78:	90a5883a 	add	r18,r18,r2
   10d7c:	1885c83a 	sub	r2,r3,r2
   10d80:	d8c00817 	ldw	r3,32(sp)
   10d84:	a4800015 	stw	r18,0(r20)
   10d88:	18800015 	stw	r2,0(r3)
   10d8c:	003fe706 	br	10d2c <__d2b+0xbc>
   10d90:	01000804 	movi	r4,32
   10d94:	2089c83a 	sub	r4,r4,r2
   10d98:	1908983a 	sll	r4,r3,r4
   10d9c:	d9400117 	ldw	r5,4(sp)
   10da0:	1886d83a 	srl	r3,r3,r2
   10da4:	2148b03a 	or	r4,r4,r5
   10da8:	81000515 	stw	r4,20(r16)
   10dac:	d8c00015 	stw	r3,0(sp)
   10db0:	003fcc06 	br	10ce4 <__d2b+0x74>

00010db4 <__ratio>:
   10db4:	defff904 	addi	sp,sp,-28
   10db8:	dc400315 	stw	r17,12(sp)
   10dbc:	2823883a 	mov	r17,r5
   10dc0:	d9400104 	addi	r5,sp,4
   10dc4:	dfc00615 	stw	ra,24(sp)
   10dc8:	dcc00515 	stw	r19,20(sp)
   10dcc:	dc800415 	stw	r18,16(sp)
   10dd0:	2027883a 	mov	r19,r4
   10dd4:	dc000215 	stw	r16,8(sp)
   10dd8:	0010b280 	call	10b28 <__b2d>
   10ddc:	8809883a 	mov	r4,r17
   10de0:	d80b883a 	mov	r5,sp
   10de4:	1025883a 	mov	r18,r2
   10de8:	1821883a 	mov	r16,r3
   10dec:	0010b280 	call	10b28 <__b2d>
   10df0:	99400417 	ldw	r5,16(r19)
   10df4:	89000417 	ldw	r4,16(r17)
   10df8:	d9800117 	ldw	r6,4(sp)
   10dfc:	2909c83a 	sub	r4,r5,r4
   10e00:	d9400017 	ldw	r5,0(sp)
   10e04:	2008917a 	slli	r4,r4,5
   10e08:	314bc83a 	sub	r5,r6,r5
   10e0c:	290b883a 	add	r5,r5,r4
   10e10:	01400e0e 	bge	zero,r5,10e4c <__ratio+0x98>
   10e14:	280a953a 	slli	r5,r5,20
   10e18:	2c21883a 	add	r16,r5,r16
   10e1c:	9009883a 	mov	r4,r18
   10e20:	800b883a 	mov	r5,r16
   10e24:	100d883a 	mov	r6,r2
   10e28:	180f883a 	mov	r7,r3
   10e2c:	00099040 	call	9904 <__divdf3>
   10e30:	dfc00617 	ldw	ra,24(sp)
   10e34:	dcc00517 	ldw	r19,20(sp)
   10e38:	dc800417 	ldw	r18,16(sp)
   10e3c:	dc400317 	ldw	r17,12(sp)
   10e40:	dc000217 	ldw	r16,8(sp)
   10e44:	dec00704 	addi	sp,sp,28
   10e48:	f800283a 	ret
   10e4c:	280a953a 	slli	r5,r5,20
   10e50:	1947c83a 	sub	r3,r3,r5
   10e54:	003ff106 	br	10e1c <__ratio+0x68>

00010e58 <_mprec_log10>:
   10e58:	defffe04 	addi	sp,sp,-8
   10e5c:	dc000015 	stw	r16,0(sp)
   10e60:	dfc00115 	stw	ra,4(sp)
   10e64:	008005c4 	movi	r2,23
   10e68:	2021883a 	mov	r16,r4
   10e6c:	11000d0e 	bge	r2,r4,10ea4 <_mprec_log10+0x4c>
   10e70:	0005883a 	mov	r2,zero
   10e74:	00cffc34 	movhi	r3,16368
   10e78:	843fffc4 	addi	r16,r16,-1
   10e7c:	1009883a 	mov	r4,r2
   10e80:	180b883a 	mov	r5,r3
   10e84:	000d883a 	mov	r6,zero
   10e88:	01d00934 	movhi	r7,16420
   10e8c:	00096200 	call	9620 <__muldf3>
   10e90:	803ff91e 	bne	r16,zero,10e78 <_mprec_log10+0x20>
   10e94:	dfc00117 	ldw	ra,4(sp)
   10e98:	dc000017 	ldw	r16,0(sp)
   10e9c:	dec00204 	addi	sp,sp,8
   10ea0:	f800283a 	ret
   10ea4:	202090fa 	slli	r16,r4,3
   10ea8:	008001f4 	movhi	r2,7
   10eac:	10914d04 	addi	r2,r2,17716
   10eb0:	1421883a 	add	r16,r2,r16
   10eb4:	80800017 	ldw	r2,0(r16)
   10eb8:	80c00117 	ldw	r3,4(r16)
   10ebc:	dfc00117 	ldw	ra,4(sp)
   10ec0:	dc000017 	ldw	r16,0(sp)
   10ec4:	dec00204 	addi	sp,sp,8
   10ec8:	f800283a 	ret

00010ecc <__copybits>:
   10ecc:	297fffc4 	addi	r5,r5,-1
   10ed0:	31c00417 	ldw	r7,16(r6)
   10ed4:	2811d17a 	srai	r8,r5,5
   10ed8:	30800504 	addi	r2,r6,20
   10edc:	39c00144 	addi	r7,r7,5
   10ee0:	42000044 	addi	r8,r8,1
   10ee4:	39cf883a 	add	r7,r7,r7
   10ee8:	4211883a 	add	r8,r8,r8
   10eec:	39cf883a 	add	r7,r7,r7
   10ef0:	4211883a 	add	r8,r8,r8
   10ef4:	31cf883a 	add	r7,r6,r7
   10ef8:	2211883a 	add	r8,r4,r8
   10efc:	11c00d2e 	bgeu	r2,r7,10f34 <__copybits+0x68>
   10f00:	2007883a 	mov	r3,r4
   10f04:	11400017 	ldw	r5,0(r2)
   10f08:	18c00104 	addi	r3,r3,4
   10f0c:	10800104 	addi	r2,r2,4
   10f10:	197fff15 	stw	r5,-4(r3)
   10f14:	11fffb36 	bltu	r2,r7,10f04 <__copybits+0x38>
   10f18:	3985c83a 	sub	r2,r7,r6
   10f1c:	10bffac4 	addi	r2,r2,-21
   10f20:	1004d0ba 	srli	r2,r2,2
   10f24:	10800044 	addi	r2,r2,1
   10f28:	1085883a 	add	r2,r2,r2
   10f2c:	1085883a 	add	r2,r2,r2
   10f30:	2089883a 	add	r4,r4,r2
   10f34:	2200032e 	bgeu	r4,r8,10f44 <__copybits+0x78>
   10f38:	20000015 	stw	zero,0(r4)
   10f3c:	21000104 	addi	r4,r4,4
   10f40:	223ffd36 	bltu	r4,r8,10f38 <__copybits+0x6c>
   10f44:	f800283a 	ret

00010f48 <__any_on>:
   10f48:	21800417 	ldw	r6,16(r4)
   10f4c:	2805d17a 	srai	r2,r5,5
   10f50:	20c00504 	addi	r3,r4,20
   10f54:	30800f0e 	bge	r6,r2,10f94 <__any_on+0x4c>
   10f58:	3005883a 	mov	r2,r6
   10f5c:	10800144 	addi	r2,r2,5
   10f60:	1085883a 	add	r2,r2,r2
   10f64:	1085883a 	add	r2,r2,r2
   10f68:	2089883a 	add	r4,r4,r2
   10f6c:	1900152e 	bgeu	r3,r4,10fc4 <__any_on+0x7c>
   10f70:	20bfff17 	ldw	r2,-4(r4)
   10f74:	213fff04 	addi	r4,r4,-4
   10f78:	1000041e 	bne	r2,zero,10f8c <__any_on+0x44>
   10f7c:	1900112e 	bgeu	r3,r4,10fc4 <__any_on+0x7c>
   10f80:	213fff04 	addi	r4,r4,-4
   10f84:	20800017 	ldw	r2,0(r4)
   10f88:	103ffc26 	beq	r2,zero,10f7c <__any_on+0x34>
   10f8c:	00800044 	movi	r2,1
   10f90:	f800283a 	ret
   10f94:	11bff10e 	bge	r2,r6,10f5c <__any_on+0x14>
   10f98:	294007cc 	andi	r5,r5,31
   10f9c:	283fef26 	beq	r5,zero,10f5c <__any_on+0x14>
   10fa0:	11800144 	addi	r6,r2,5
   10fa4:	318d883a 	add	r6,r6,r6
   10fa8:	318d883a 	add	r6,r6,r6
   10fac:	218d883a 	add	r6,r4,r6
   10fb0:	31800017 	ldw	r6,0(r6)
   10fb4:	314ed83a 	srl	r7,r6,r5
   10fb8:	394a983a 	sll	r5,r7,r5
   10fbc:	29bff31e 	bne	r5,r6,10f8c <__any_on+0x44>
   10fc0:	003fe606 	br	10f5c <__any_on+0x14>
   10fc4:	0005883a 	mov	r2,zero
   10fc8:	f800283a 	ret

00010fcc <_putc_r>:
   10fcc:	defffc04 	addi	sp,sp,-16
   10fd0:	dc000215 	stw	r16,8(sp)
   10fd4:	dfc00315 	stw	ra,12(sp)
   10fd8:	2021883a 	mov	r16,r4
   10fdc:	20000226 	beq	r4,zero,10fe8 <_putc_r+0x1c>
   10fe0:	20800e17 	ldw	r2,56(r4)
   10fe4:	10001d26 	beq	r2,zero,1105c <_putc_r+0x90>
   10fe8:	30800217 	ldw	r2,8(r6)
   10fec:	10bfffc4 	addi	r2,r2,-1
   10ff0:	30800215 	stw	r2,8(r6)
   10ff4:	10000a16 	blt	r2,zero,11020 <_putc_r+0x54>
   10ff8:	30800017 	ldw	r2,0(r6)
   10ffc:	11400005 	stb	r5,0(r2)
   11000:	30800017 	ldw	r2,0(r6)
   11004:	10c00044 	addi	r3,r2,1
   11008:	10800003 	ldbu	r2,0(r2)
   1100c:	30c00015 	stw	r3,0(r6)
   11010:	dfc00317 	ldw	ra,12(sp)
   11014:	dc000217 	ldw	r16,8(sp)
   11018:	dec00404 	addi	sp,sp,16
   1101c:	f800283a 	ret
   11020:	30c00617 	ldw	r3,24(r6)
   11024:	10c01316 	blt	r2,r3,11074 <_putc_r+0xa8>
   11028:	30800017 	ldw	r2,0(r6)
   1102c:	01000284 	movi	r4,10
   11030:	11400005 	stb	r5,0(r2)
   11034:	30c00017 	ldw	r3,0(r6)
   11038:	19400003 	ldbu	r5,0(r3)
   1103c:	29000d26 	beq	r5,r4,11074 <_putc_r+0xa8>
   11040:	18c00044 	addi	r3,r3,1
   11044:	2805883a 	mov	r2,r5
   11048:	30c00015 	stw	r3,0(r6)
   1104c:	dfc00317 	ldw	ra,12(sp)
   11050:	dc000217 	ldw	r16,8(sp)
   11054:	dec00404 	addi	sp,sp,16
   11058:	f800283a 	ret
   1105c:	d9400015 	stw	r5,0(sp)
   11060:	d9800115 	stw	r6,4(sp)
   11064:	000eddc0 	call	eddc <__sinit>
   11068:	d9800117 	ldw	r6,4(sp)
   1106c:	d9400017 	ldw	r5,0(sp)
   11070:	003fdd06 	br	10fe8 <_putc_r+0x1c>
   11074:	8009883a 	mov	r4,r16
   11078:	dfc00317 	ldw	ra,12(sp)
   1107c:	dc000217 	ldw	r16,8(sp)
   11080:	dec00404 	addi	sp,sp,16
   11084:	00119901 	jmpi	11990 <__swbuf_r>

00011088 <putc>:
   11088:	defffc04 	addi	sp,sp,-16
   1108c:	dc400115 	stw	r17,4(sp)
   11090:	044001f4 	movhi	r17,7
   11094:	8c5f0704 	addi	r17,r17,31772
   11098:	88800017 	ldw	r2,0(r17)
   1109c:	dc800215 	stw	r18,8(sp)
   110a0:	dc000015 	stw	r16,0(sp)
   110a4:	dfc00315 	stw	ra,12(sp)
   110a8:	2025883a 	mov	r18,r4
   110ac:	2821883a 	mov	r16,r5
   110b0:	10000226 	beq	r2,zero,110bc <putc+0x34>
   110b4:	10c00e17 	ldw	r3,56(r2)
   110b8:	18002126 	beq	r3,zero,11140 <putc+0xb8>
   110bc:	80800217 	ldw	r2,8(r16)
   110c0:	10bfffc4 	addi	r2,r2,-1
   110c4:	80800215 	stw	r2,8(r16)
   110c8:	10000c16 	blt	r2,zero,110fc <putc+0x74>
   110cc:	80800017 	ldw	r2,0(r16)
   110d0:	14800005 	stb	r18,0(r2)
   110d4:	80800017 	ldw	r2,0(r16)
   110d8:	10c00044 	addi	r3,r2,1
   110dc:	10800003 	ldbu	r2,0(r2)
   110e0:	80c00015 	stw	r3,0(r16)
   110e4:	dfc00317 	ldw	ra,12(sp)
   110e8:	dc800217 	ldw	r18,8(sp)
   110ec:	dc400117 	ldw	r17,4(sp)
   110f0:	dc000017 	ldw	r16,0(sp)
   110f4:	dec00404 	addi	sp,sp,16
   110f8:	f800283a 	ret
   110fc:	80c00617 	ldw	r3,24(r16)
   11100:	10c01216 	blt	r2,r3,1114c <putc+0xc4>
   11104:	80800017 	ldw	r2,0(r16)
   11108:	01000284 	movi	r4,10
   1110c:	14800005 	stb	r18,0(r2)
   11110:	80c00017 	ldw	r3,0(r16)
   11114:	19400003 	ldbu	r5,0(r3)
   11118:	29001526 	beq	r5,r4,11170 <putc+0xe8>
   1111c:	18c00044 	addi	r3,r3,1
   11120:	2805883a 	mov	r2,r5
   11124:	80c00015 	stw	r3,0(r16)
   11128:	dfc00317 	ldw	ra,12(sp)
   1112c:	dc800217 	ldw	r18,8(sp)
   11130:	dc400117 	ldw	r17,4(sp)
   11134:	dc000017 	ldw	r16,0(sp)
   11138:	dec00404 	addi	sp,sp,16
   1113c:	f800283a 	ret
   11140:	1009883a 	mov	r4,r2
   11144:	000eddc0 	call	eddc <__sinit>
   11148:	003fdc06 	br	110bc <putc+0x34>
   1114c:	89000017 	ldw	r4,0(r17)
   11150:	900b883a 	mov	r5,r18
   11154:	800d883a 	mov	r6,r16
   11158:	dfc00317 	ldw	ra,12(sp)
   1115c:	dc800217 	ldw	r18,8(sp)
   11160:	dc400117 	ldw	r17,4(sp)
   11164:	dc000017 	ldw	r16,0(sp)
   11168:	dec00404 	addi	sp,sp,16
   1116c:	00119901 	jmpi	11990 <__swbuf_r>
   11170:	89000017 	ldw	r4,0(r17)
   11174:	003ff706 	br	11154 <putc+0xcc>

00011178 <_realloc_r>:
   11178:	defff504 	addi	sp,sp,-44
   1117c:	dd400615 	stw	r21,24(sp)
   11180:	dc800315 	stw	r18,12(sp)
   11184:	dc000115 	stw	r16,4(sp)
   11188:	dfc00a15 	stw	ra,40(sp)
   1118c:	df000915 	stw	fp,36(sp)
   11190:	ddc00815 	stw	r23,32(sp)
   11194:	dd800715 	stw	r22,28(sp)
   11198:	dd000515 	stw	r20,20(sp)
   1119c:	dcc00415 	stw	r19,16(sp)
   111a0:	dc400215 	stw	r17,8(sp)
   111a4:	2821883a 	mov	r16,r5
   111a8:	202b883a 	mov	r21,r4
   111ac:	3025883a 	mov	r18,r6
   111b0:	28009626 	beq	r5,zero,1140c <_realloc_r+0x294>
   111b4:	001375c0 	call	1375c <__malloc_lock>
   111b8:	80bfff17 	ldw	r2,-4(r16)
   111bc:	04ffff04 	movi	r19,-4
   111c0:	90c002c4 	addi	r3,r18,11
   111c4:	01000584 	movi	r4,22
   111c8:	85bffe04 	addi	r22,r16,-8
   111cc:	14e6703a 	and	r19,r2,r19
   111d0:	20c0372e 	bgeu	r4,r3,112b0 <_realloc_r+0x138>
   111d4:	047ffe04 	movi	r17,-8
   111d8:	1c62703a 	and	r17,r3,r17
   111dc:	8807883a 	mov	r3,r17
   111e0:	88005a16 	blt	r17,zero,1134c <_realloc_r+0x1d4>
   111e4:	8c805936 	bltu	r17,r18,1134c <_realloc_r+0x1d4>
   111e8:	98c0340e 	bge	r19,r3,112bc <_realloc_r+0x144>
   111ec:	070001f4 	movhi	fp,7
   111f0:	e7197c04 	addi	fp,fp,26096
   111f4:	e1400217 	ldw	r5,8(fp)
   111f8:	b4c9883a 	add	r4,r22,r19
   111fc:	29009026 	beq	r5,r4,11440 <_realloc_r+0x2c8>
   11200:	21800117 	ldw	r6,4(r4)
   11204:	01ffff84 	movi	r7,-2
   11208:	31ce703a 	and	r7,r6,r7
   1120c:	21cf883a 	add	r7,r4,r7
   11210:	39c00117 	ldw	r7,4(r7)
   11214:	39c0004c 	andi	r7,r7,1
   11218:	38004326 	beq	r7,zero,11328 <_realloc_r+0x1b0>
   1121c:	000d883a 	mov	r6,zero
   11220:	0009883a 	mov	r4,zero
   11224:	1080004c 	andi	r2,r2,1
   11228:	10005a1e 	bne	r2,zero,11394 <_realloc_r+0x21c>
   1122c:	85fffe17 	ldw	r23,-8(r16)
   11230:	00bfff04 	movi	r2,-4
   11234:	b5efc83a 	sub	r23,r22,r23
   11238:	b9c00117 	ldw	r7,4(r23)
   1123c:	388e703a 	and	r7,r7,r2
   11240:	3ccf883a 	add	r7,r7,r19
   11244:	20005226 	beq	r4,zero,11390 <_realloc_r+0x218>
   11248:	31e9883a 	add	r20,r6,r7
   1124c:	2140c726 	beq	r4,r5,1156c <_realloc_r+0x3f4>
   11250:	a0c04f16 	blt	r20,r3,11390 <_realloc_r+0x218>
   11254:	20800317 	ldw	r2,12(r4)
   11258:	20c00217 	ldw	r3,8(r4)
   1125c:	99bfff04 	addi	r6,r19,-4
   11260:	01000904 	movi	r4,36
   11264:	18800315 	stw	r2,12(r3)
   11268:	10c00215 	stw	r3,8(r2)
   1126c:	b8c00217 	ldw	r3,8(r23)
   11270:	b8800317 	ldw	r2,12(r23)
   11274:	bc800204 	addi	r18,r23,8
   11278:	18800315 	stw	r2,12(r3)
   1127c:	10c00215 	stw	r3,8(r2)
   11280:	2180ed36 	bltu	r4,r6,11638 <_realloc_r+0x4c0>
   11284:	008004c4 	movi	r2,19
   11288:	11809b2e 	bgeu	r2,r6,114f8 <_realloc_r+0x380>
   1128c:	80800017 	ldw	r2,0(r16)
   11290:	b8800215 	stw	r2,8(r23)
   11294:	80800117 	ldw	r2,4(r16)
   11298:	b8800315 	stw	r2,12(r23)
   1129c:	008006c4 	movi	r2,27
   112a0:	1180f936 	bltu	r2,r6,11688 <_realloc_r+0x510>
   112a4:	b8800404 	addi	r2,r23,16
   112a8:	80c00204 	addi	r3,r16,8
   112ac:	00009406 	br	11500 <_realloc_r+0x388>
   112b0:	00c00404 	movi	r3,16
   112b4:	1823883a 	mov	r17,r3
   112b8:	003fca06 	br	111e4 <_realloc_r+0x6c>
   112bc:	9829883a 	mov	r20,r19
   112c0:	a447c83a 	sub	r3,r20,r17
   112c4:	010003c4 	movi	r4,15
   112c8:	1080004c 	andi	r2,r2,1
   112cc:	20c02336 	bltu	r4,r3,1135c <_realloc_r+0x1e4>
   112d0:	1504b03a 	or	r2,r2,r20
   112d4:	b0800115 	stw	r2,4(r22)
   112d8:	b52d883a 	add	r22,r22,r20
   112dc:	b0800117 	ldw	r2,4(r22)
   112e0:	10800054 	ori	r2,r2,1
   112e4:	b0800115 	stw	r2,4(r22)
   112e8:	a809883a 	mov	r4,r21
   112ec:	001377c0 	call	1377c <__malloc_unlock>
   112f0:	8025883a 	mov	r18,r16
   112f4:	9005883a 	mov	r2,r18
   112f8:	dfc00a17 	ldw	ra,40(sp)
   112fc:	df000917 	ldw	fp,36(sp)
   11300:	ddc00817 	ldw	r23,32(sp)
   11304:	dd800717 	ldw	r22,28(sp)
   11308:	dd400617 	ldw	r21,24(sp)
   1130c:	dd000517 	ldw	r20,20(sp)
   11310:	dcc00417 	ldw	r19,16(sp)
   11314:	dc800317 	ldw	r18,12(sp)
   11318:	dc400217 	ldw	r17,8(sp)
   1131c:	dc000117 	ldw	r16,4(sp)
   11320:	dec00b04 	addi	sp,sp,44
   11324:	f800283a 	ret
   11328:	01ffff04 	movi	r7,-4
   1132c:	31cc703a 	and	r6,r6,r7
   11330:	34e9883a 	add	r20,r6,r19
   11334:	a0ffbb16 	blt	r20,r3,11224 <_realloc_r+0xac>
   11338:	20c00317 	ldw	r3,12(r4)
   1133c:	21000217 	ldw	r4,8(r4)
   11340:	20c00315 	stw	r3,12(r4)
   11344:	19000215 	stw	r4,8(r3)
   11348:	003fdd06 	br	112c0 <_realloc_r+0x148>
   1134c:	00800304 	movi	r2,12
   11350:	a8800015 	stw	r2,0(r21)
   11354:	0025883a 	mov	r18,zero
   11358:	003fe606 	br	112f4 <_realloc_r+0x17c>
   1135c:	1444b03a 	or	r2,r2,r17
   11360:	b0800115 	stw	r2,4(r22)
   11364:	b44b883a 	add	r5,r22,r17
   11368:	18800054 	ori	r2,r3,1
   1136c:	28800115 	stw	r2,4(r5)
   11370:	28c7883a 	add	r3,r5,r3
   11374:	18800117 	ldw	r2,4(r3)
   11378:	a809883a 	mov	r4,r21
   1137c:	29400204 	addi	r5,r5,8
   11380:	10800054 	ori	r2,r2,1
   11384:	18800115 	stw	r2,4(r3)
   11388:	000f1600 	call	f160 <_free_r>
   1138c:	003fd606 	br	112e8 <_realloc_r+0x170>
   11390:	38c0330e 	bge	r7,r3,11460 <_realloc_r+0x2e8>
   11394:	900b883a 	mov	r5,r18
   11398:	a809883a 	mov	r4,r21
   1139c:	000a4880 	call	a488 <_malloc_r>
   113a0:	1025883a 	mov	r18,r2
   113a4:	10001626 	beq	r2,zero,11400 <_realloc_r+0x288>
   113a8:	80bfff17 	ldw	r2,-4(r16)
   113ac:	00ffff84 	movi	r3,-2
   113b0:	913ffe04 	addi	r4,r18,-8
   113b4:	10c6703a 	and	r3,r2,r3
   113b8:	b0c7883a 	add	r3,r22,r3
   113bc:	20c09926 	beq	r4,r3,11624 <_realloc_r+0x4ac>
   113c0:	99bfff04 	addi	r6,r19,-4
   113c4:	00800904 	movi	r2,36
   113c8:	11806436 	bltu	r2,r6,1155c <_realloc_r+0x3e4>
   113cc:	00c004c4 	movi	r3,19
   113d0:	19804036 	bltu	r3,r6,114d4 <_realloc_r+0x35c>
   113d4:	9005883a 	mov	r2,r18
   113d8:	8007883a 	mov	r3,r16
   113dc:	19000017 	ldw	r4,0(r3)
   113e0:	11000015 	stw	r4,0(r2)
   113e4:	19000117 	ldw	r4,4(r3)
   113e8:	11000115 	stw	r4,4(r2)
   113ec:	18c00217 	ldw	r3,8(r3)
   113f0:	10c00215 	stw	r3,8(r2)
   113f4:	a809883a 	mov	r4,r21
   113f8:	800b883a 	mov	r5,r16
   113fc:	000f1600 	call	f160 <_free_r>
   11400:	a809883a 	mov	r4,r21
   11404:	001377c0 	call	1377c <__malloc_unlock>
   11408:	003fba06 	br	112f4 <_realloc_r+0x17c>
   1140c:	300b883a 	mov	r5,r6
   11410:	dfc00a17 	ldw	ra,40(sp)
   11414:	df000917 	ldw	fp,36(sp)
   11418:	ddc00817 	ldw	r23,32(sp)
   1141c:	dd800717 	ldw	r22,28(sp)
   11420:	dd400617 	ldw	r21,24(sp)
   11424:	dd000517 	ldw	r20,20(sp)
   11428:	dcc00417 	ldw	r19,16(sp)
   1142c:	dc800317 	ldw	r18,12(sp)
   11430:	dc400217 	ldw	r17,8(sp)
   11434:	dc000117 	ldw	r16,4(sp)
   11438:	dec00b04 	addi	sp,sp,44
   1143c:	000a4881 	jmpi	a488 <_malloc_r>
   11440:	29800117 	ldw	r6,4(r5)
   11444:	013fff04 	movi	r4,-4
   11448:	89c00404 	addi	r7,r17,16
   1144c:	310c703a 	and	r6,r6,r4
   11450:	34c9883a 	add	r4,r6,r19
   11454:	21c0340e 	bge	r4,r7,11528 <_realloc_r+0x3b0>
   11458:	2809883a 	mov	r4,r5
   1145c:	003f7106 	br	11224 <_realloc_r+0xac>
   11460:	b8800317 	ldw	r2,12(r23)
   11464:	b8c00217 	ldw	r3,8(r23)
   11468:	99bfff04 	addi	r6,r19,-4
   1146c:	01000904 	movi	r4,36
   11470:	18800315 	stw	r2,12(r3)
   11474:	10c00215 	stw	r3,8(r2)
   11478:	bc800204 	addi	r18,r23,8
   1147c:	21807836 	bltu	r4,r6,11660 <_realloc_r+0x4e8>
   11480:	008004c4 	movi	r2,19
   11484:	1180732e 	bgeu	r2,r6,11654 <_realloc_r+0x4dc>
   11488:	80800017 	ldw	r2,0(r16)
   1148c:	b8800215 	stw	r2,8(r23)
   11490:	80800117 	ldw	r2,4(r16)
   11494:	b8800315 	stw	r2,12(r23)
   11498:	008006c4 	movi	r2,27
   1149c:	11808936 	bltu	r2,r6,116c4 <_realloc_r+0x54c>
   114a0:	b8800404 	addi	r2,r23,16
   114a4:	80c00204 	addi	r3,r16,8
   114a8:	19000017 	ldw	r4,0(r3)
   114ac:	9021883a 	mov	r16,r18
   114b0:	3829883a 	mov	r20,r7
   114b4:	11000015 	stw	r4,0(r2)
   114b8:	19000117 	ldw	r4,4(r3)
   114bc:	b82d883a 	mov	r22,r23
   114c0:	11000115 	stw	r4,4(r2)
   114c4:	18c00217 	ldw	r3,8(r3)
   114c8:	10c00215 	stw	r3,8(r2)
   114cc:	b8800117 	ldw	r2,4(r23)
   114d0:	003f7b06 	br	112c0 <_realloc_r+0x148>
   114d4:	80c00017 	ldw	r3,0(r16)
   114d8:	90c00015 	stw	r3,0(r18)
   114dc:	80c00117 	ldw	r3,4(r16)
   114e0:	90c00115 	stw	r3,4(r18)
   114e4:	00c006c4 	movi	r3,27
   114e8:	19804636 	bltu	r3,r6,11604 <_realloc_r+0x48c>
   114ec:	90800204 	addi	r2,r18,8
   114f0:	80c00204 	addi	r3,r16,8
   114f4:	003fb906 	br	113dc <_realloc_r+0x264>
   114f8:	9005883a 	mov	r2,r18
   114fc:	8007883a 	mov	r3,r16
   11500:	19000017 	ldw	r4,0(r3)
   11504:	9021883a 	mov	r16,r18
   11508:	b82d883a 	mov	r22,r23
   1150c:	11000015 	stw	r4,0(r2)
   11510:	19000117 	ldw	r4,4(r3)
   11514:	11000115 	stw	r4,4(r2)
   11518:	18c00217 	ldw	r3,8(r3)
   1151c:	10c00215 	stw	r3,8(r2)
   11520:	b8800117 	ldw	r2,4(r23)
   11524:	003f6606 	br	112c0 <_realloc_r+0x148>
   11528:	2445c83a 	sub	r2,r4,r17
   1152c:	b46d883a 	add	r22,r22,r17
   11530:	10800054 	ori	r2,r2,1
   11534:	b0800115 	stw	r2,4(r22)
   11538:	80bfff17 	ldw	r2,-4(r16)
   1153c:	a809883a 	mov	r4,r21
   11540:	e5800215 	stw	r22,8(fp)
   11544:	1080004c 	andi	r2,r2,1
   11548:	88a2b03a 	or	r17,r17,r2
   1154c:	847fff15 	stw	r17,-4(r16)
   11550:	001377c0 	call	1377c <__malloc_unlock>
   11554:	8025883a 	mov	r18,r16
   11558:	003f6606 	br	112f4 <_realloc_r+0x17c>
   1155c:	9009883a 	mov	r4,r18
   11560:	800b883a 	mov	r5,r16
   11564:	000fdf00 	call	fdf0 <memmove>
   11568:	003fa206 	br	113f4 <_realloc_r+0x27c>
   1156c:	88800404 	addi	r2,r17,16
   11570:	a0bf8716 	blt	r20,r2,11390 <_realloc_r+0x218>
   11574:	b8800317 	ldw	r2,12(r23)
   11578:	b8c00217 	ldw	r3,8(r23)
   1157c:	99bfff04 	addi	r6,r19,-4
   11580:	01000904 	movi	r4,36
   11584:	18800315 	stw	r2,12(r3)
   11588:	10c00215 	stw	r3,8(r2)
   1158c:	bc800204 	addi	r18,r23,8
   11590:	21806536 	bltu	r4,r6,11728 <_realloc_r+0x5b0>
   11594:	008004c4 	movi	r2,19
   11598:	1180592e 	bgeu	r2,r6,11700 <_realloc_r+0x588>
   1159c:	80800017 	ldw	r2,0(r16)
   115a0:	b8800215 	stw	r2,8(r23)
   115a4:	80800117 	ldw	r2,4(r16)
   115a8:	b8800315 	stw	r2,12(r23)
   115ac:	008006c4 	movi	r2,27
   115b0:	11806136 	bltu	r2,r6,11738 <_realloc_r+0x5c0>
   115b4:	b8800404 	addi	r2,r23,16
   115b8:	80c00204 	addi	r3,r16,8
   115bc:	19000017 	ldw	r4,0(r3)
   115c0:	11000015 	stw	r4,0(r2)
   115c4:	19000117 	ldw	r4,4(r3)
   115c8:	11000115 	stw	r4,4(r2)
   115cc:	18c00217 	ldw	r3,8(r3)
   115d0:	10c00215 	stw	r3,8(r2)
   115d4:	a447c83a 	sub	r3,r20,r17
   115d8:	bc45883a 	add	r2,r23,r17
   115dc:	18c00054 	ori	r3,r3,1
   115e0:	10c00115 	stw	r3,4(r2)
   115e4:	b8c00117 	ldw	r3,4(r23)
   115e8:	e0800215 	stw	r2,8(fp)
   115ec:	a809883a 	mov	r4,r21
   115f0:	1880004c 	andi	r2,r3,1
   115f4:	88a2b03a 	or	r17,r17,r2
   115f8:	bc400115 	stw	r17,4(r23)
   115fc:	001377c0 	call	1377c <__malloc_unlock>
   11600:	003f3c06 	br	112f4 <_realloc_r+0x17c>
   11604:	80c00217 	ldw	r3,8(r16)
   11608:	90c00215 	stw	r3,8(r18)
   1160c:	80c00317 	ldw	r3,12(r16)
   11610:	90c00315 	stw	r3,12(r18)
   11614:	30802426 	beq	r6,r2,116a8 <_realloc_r+0x530>
   11618:	90800404 	addi	r2,r18,16
   1161c:	80c00404 	addi	r3,r16,16
   11620:	003f6e06 	br	113dc <_realloc_r+0x264>
   11624:	953fff17 	ldw	r20,-4(r18)
   11628:	00ffff04 	movi	r3,-4
   1162c:	a0e8703a 	and	r20,r20,r3
   11630:	a4e9883a 	add	r20,r20,r19
   11634:	003f2206 	br	112c0 <_realloc_r+0x148>
   11638:	800b883a 	mov	r5,r16
   1163c:	9009883a 	mov	r4,r18
   11640:	000fdf00 	call	fdf0 <memmove>
   11644:	9021883a 	mov	r16,r18
   11648:	b8800117 	ldw	r2,4(r23)
   1164c:	b82d883a 	mov	r22,r23
   11650:	003f1b06 	br	112c0 <_realloc_r+0x148>
   11654:	9005883a 	mov	r2,r18
   11658:	8007883a 	mov	r3,r16
   1165c:	003f9206 	br	114a8 <_realloc_r+0x330>
   11660:	800b883a 	mov	r5,r16
   11664:	9009883a 	mov	r4,r18
   11668:	d9c00015 	stw	r7,0(sp)
   1166c:	000fdf00 	call	fdf0 <memmove>
   11670:	d9c00017 	ldw	r7,0(sp)
   11674:	9021883a 	mov	r16,r18
   11678:	b8800117 	ldw	r2,4(r23)
   1167c:	3829883a 	mov	r20,r7
   11680:	b82d883a 	mov	r22,r23
   11684:	003f0e06 	br	112c0 <_realloc_r+0x148>
   11688:	80800217 	ldw	r2,8(r16)
   1168c:	b8800415 	stw	r2,16(r23)
   11690:	80800317 	ldw	r2,12(r16)
   11694:	b8800515 	stw	r2,20(r23)
   11698:	31001226 	beq	r6,r4,116e4 <_realloc_r+0x56c>
   1169c:	b8800604 	addi	r2,r23,24
   116a0:	80c00404 	addi	r3,r16,16
   116a4:	003f9606 	br	11500 <_realloc_r+0x388>
   116a8:	81000417 	ldw	r4,16(r16)
   116ac:	90800604 	addi	r2,r18,24
   116b0:	80c00604 	addi	r3,r16,24
   116b4:	91000415 	stw	r4,16(r18)
   116b8:	81000517 	ldw	r4,20(r16)
   116bc:	91000515 	stw	r4,20(r18)
   116c0:	003f4606 	br	113dc <_realloc_r+0x264>
   116c4:	80800217 	ldw	r2,8(r16)
   116c8:	b8800415 	stw	r2,16(r23)
   116cc:	80800317 	ldw	r2,12(r16)
   116d0:	b8800515 	stw	r2,20(r23)
   116d4:	31000d26 	beq	r6,r4,1170c <_realloc_r+0x594>
   116d8:	b8800604 	addi	r2,r23,24
   116dc:	80c00404 	addi	r3,r16,16
   116e0:	003f7106 	br	114a8 <_realloc_r+0x330>
   116e4:	81000417 	ldw	r4,16(r16)
   116e8:	b8800804 	addi	r2,r23,32
   116ec:	80c00604 	addi	r3,r16,24
   116f0:	b9000615 	stw	r4,24(r23)
   116f4:	81000517 	ldw	r4,20(r16)
   116f8:	b9000715 	stw	r4,28(r23)
   116fc:	003f8006 	br	11500 <_realloc_r+0x388>
   11700:	9005883a 	mov	r2,r18
   11704:	8007883a 	mov	r3,r16
   11708:	003fac06 	br	115bc <_realloc_r+0x444>
   1170c:	81000417 	ldw	r4,16(r16)
   11710:	b8800804 	addi	r2,r23,32
   11714:	80c00604 	addi	r3,r16,24
   11718:	b9000615 	stw	r4,24(r23)
   1171c:	81000517 	ldw	r4,20(r16)
   11720:	b9000715 	stw	r4,28(r23)
   11724:	003f6006 	br	114a8 <_realloc_r+0x330>
   11728:	9009883a 	mov	r4,r18
   1172c:	800b883a 	mov	r5,r16
   11730:	000fdf00 	call	fdf0 <memmove>
   11734:	003fa706 	br	115d4 <_realloc_r+0x45c>
   11738:	80800217 	ldw	r2,8(r16)
   1173c:	b8800415 	stw	r2,16(r23)
   11740:	80800317 	ldw	r2,12(r16)
   11744:	b8800515 	stw	r2,20(r23)
   11748:	31000326 	beq	r6,r4,11758 <_realloc_r+0x5e0>
   1174c:	b8800604 	addi	r2,r23,24
   11750:	80c00404 	addi	r3,r16,16
   11754:	003f9906 	br	115bc <_realloc_r+0x444>
   11758:	81000417 	ldw	r4,16(r16)
   1175c:	b8800804 	addi	r2,r23,32
   11760:	80c00604 	addi	r3,r16,24
   11764:	b9000615 	stw	r4,24(r23)
   11768:	81000517 	ldw	r4,20(r16)
   1176c:	b9000715 	stw	r4,28(r23)
   11770:	003f9206 	br	115bc <_realloc_r+0x444>

00011774 <__isinfd>:
   11774:	0105c83a 	sub	r2,zero,r4
   11778:	1108b03a 	or	r4,r2,r4
   1177c:	2004d7fa 	srli	r2,r4,31
   11780:	00e00034 	movhi	r3,32768
   11784:	18ffffc4 	addi	r3,r3,-1
   11788:	28ca703a 	and	r5,r5,r3
   1178c:	1144b03a 	or	r2,r2,r5
   11790:	00dffc34 	movhi	r3,32752
   11794:	1885c83a 	sub	r2,r3,r2
   11798:	0087c83a 	sub	r3,zero,r2
   1179c:	1884b03a 	or	r2,r3,r2
   117a0:	1005d7fa 	srai	r2,r2,31
   117a4:	10800044 	addi	r2,r2,1
   117a8:	f800283a 	ret

000117ac <__sread>:
   117ac:	defffe04 	addi	sp,sp,-8
   117b0:	dc000015 	stw	r16,0(sp)
   117b4:	2821883a 	mov	r16,r5
   117b8:	2940038f 	ldh	r5,14(r5)
   117bc:	dfc00115 	stw	ra,4(sp)
   117c0:	0011f0c0 	call	11f0c <_read_r>
   117c4:	10000716 	blt	r2,zero,117e4 <__sread+0x38>
   117c8:	80c01417 	ldw	r3,80(r16)
   117cc:	1887883a 	add	r3,r3,r2
   117d0:	80c01415 	stw	r3,80(r16)
   117d4:	dfc00117 	ldw	ra,4(sp)
   117d8:	dc000017 	ldw	r16,0(sp)
   117dc:	dec00204 	addi	sp,sp,8
   117e0:	f800283a 	ret
   117e4:	80c0030b 	ldhu	r3,12(r16)
   117e8:	18fbffcc 	andi	r3,r3,61439
   117ec:	80c0030d 	sth	r3,12(r16)
   117f0:	dfc00117 	ldw	ra,4(sp)
   117f4:	dc000017 	ldw	r16,0(sp)
   117f8:	dec00204 	addi	sp,sp,8
   117fc:	f800283a 	ret

00011800 <__swrite>:
   11800:	2880030b 	ldhu	r2,12(r5)
   11804:	defffb04 	addi	sp,sp,-20
   11808:	dcc00315 	stw	r19,12(sp)
   1180c:	10c0400c 	andi	r3,r2,256
   11810:	18ffffcc 	andi	r3,r3,65535
   11814:	18e0001c 	xori	r3,r3,32768
   11818:	dc800215 	stw	r18,8(sp)
   1181c:	dc400115 	stw	r17,4(sp)
   11820:	dc000015 	stw	r16,0(sp)
   11824:	dfc00415 	stw	ra,16(sp)
   11828:	18e00004 	addi	r3,r3,-32768
   1182c:	2821883a 	mov	r16,r5
   11830:	2027883a 	mov	r19,r4
   11834:	3025883a 	mov	r18,r6
   11838:	3823883a 	mov	r17,r7
   1183c:	18000526 	beq	r3,zero,11854 <__swrite+0x54>
   11840:	2940038f 	ldh	r5,14(r5)
   11844:	000d883a 	mov	r6,zero
   11848:	01c00084 	movi	r7,2
   1184c:	0011ea00 	call	11ea0 <_lseek_r>
   11850:	8080030b 	ldhu	r2,12(r16)
   11854:	8140038f 	ldh	r5,14(r16)
   11858:	10bbffcc 	andi	r2,r2,61439
   1185c:	9809883a 	mov	r4,r19
   11860:	900d883a 	mov	r6,r18
   11864:	880f883a 	mov	r7,r17
   11868:	8080030d 	sth	r2,12(r16)
   1186c:	dfc00417 	ldw	ra,16(sp)
   11870:	dcc00317 	ldw	r19,12(sp)
   11874:	dc800217 	ldw	r18,8(sp)
   11878:	dc400117 	ldw	r17,4(sp)
   1187c:	dc000017 	ldw	r16,0(sp)
   11880:	dec00504 	addi	sp,sp,20
   11884:	0011ae81 	jmpi	11ae8 <_write_r>

00011888 <__sseek>:
   11888:	defffe04 	addi	sp,sp,-8
   1188c:	dc000015 	stw	r16,0(sp)
   11890:	2821883a 	mov	r16,r5
   11894:	2940038f 	ldh	r5,14(r5)
   11898:	dfc00115 	stw	ra,4(sp)
   1189c:	0011ea00 	call	11ea0 <_lseek_r>
   118a0:	00ffffc4 	movi	r3,-1
   118a4:	10c00826 	beq	r2,r3,118c8 <__sseek+0x40>
   118a8:	80c0030b 	ldhu	r3,12(r16)
   118ac:	80801415 	stw	r2,80(r16)
   118b0:	18c40014 	ori	r3,r3,4096
   118b4:	80c0030d 	sth	r3,12(r16)
   118b8:	dfc00117 	ldw	ra,4(sp)
   118bc:	dc000017 	ldw	r16,0(sp)
   118c0:	dec00204 	addi	sp,sp,8
   118c4:	f800283a 	ret
   118c8:	80c0030b 	ldhu	r3,12(r16)
   118cc:	18fbffcc 	andi	r3,r3,61439
   118d0:	80c0030d 	sth	r3,12(r16)
   118d4:	dfc00117 	ldw	ra,4(sp)
   118d8:	dc000017 	ldw	r16,0(sp)
   118dc:	dec00204 	addi	sp,sp,8
   118e0:	f800283a 	ret

000118e4 <__sclose>:
   118e4:	2940038f 	ldh	r5,14(r5)
   118e8:	0011c201 	jmpi	11c20 <_close_r>

000118ec <strcmp>:
   118ec:	2904b03a 	or	r2,r5,r4
   118f0:	108000cc 	andi	r2,r2,3
   118f4:	1000171e 	bne	r2,zero,11954 <strcmp+0x68>
   118f8:	20800017 	ldw	r2,0(r4)
   118fc:	28c00017 	ldw	r3,0(r5)
   11900:	10c0141e 	bne	r2,r3,11954 <strcmp+0x68>
   11904:	027fbff4 	movhi	r9,65279
   11908:	4a7fbfc4 	addi	r9,r9,-257
   1190c:	1247883a 	add	r3,r2,r9
   11910:	0084303a 	nor	r2,zero,r2
   11914:	1884703a 	and	r2,r3,r2
   11918:	02202074 	movhi	r8,32897
   1191c:	42202004 	addi	r8,r8,-32640
   11920:	1204703a 	and	r2,r2,r8
   11924:	10000226 	beq	r2,zero,11930 <strcmp+0x44>
   11928:	00001706 	br	11988 <strcmp+0x9c>
   1192c:	3000161e 	bne	r6,zero,11988 <strcmp+0x9c>
   11930:	21000104 	addi	r4,r4,4
   11934:	20800017 	ldw	r2,0(r4)
   11938:	29400104 	addi	r5,r5,4
   1193c:	28c00017 	ldw	r3,0(r5)
   11940:	124f883a 	add	r7,r2,r9
   11944:	008c303a 	nor	r6,zero,r2
   11948:	398c703a 	and	r6,r7,r6
   1194c:	320c703a 	and	r6,r6,r8
   11950:	10fff626 	beq	r2,r3,1192c <strcmp+0x40>
   11954:	20800007 	ldb	r2,0(r4)
   11958:	1000051e 	bne	r2,zero,11970 <strcmp+0x84>
   1195c:	00000606 	br	11978 <strcmp+0x8c>
   11960:	21000044 	addi	r4,r4,1
   11964:	20800007 	ldb	r2,0(r4)
   11968:	29400044 	addi	r5,r5,1
   1196c:	10000226 	beq	r2,zero,11978 <strcmp+0x8c>
   11970:	28c00007 	ldb	r3,0(r5)
   11974:	10fffa26 	beq	r2,r3,11960 <strcmp+0x74>
   11978:	20c00003 	ldbu	r3,0(r4)
   1197c:	28800003 	ldbu	r2,0(r5)
   11980:	1885c83a 	sub	r2,r3,r2
   11984:	f800283a 	ret
   11988:	0005883a 	mov	r2,zero
   1198c:	f800283a 	ret

00011990 <__swbuf_r>:
   11990:	defffc04 	addi	sp,sp,-16
   11994:	dc800215 	stw	r18,8(sp)
   11998:	dc400115 	stw	r17,4(sp)
   1199c:	dc000015 	stw	r16,0(sp)
   119a0:	dfc00315 	stw	ra,12(sp)
   119a4:	2023883a 	mov	r17,r4
   119a8:	2825883a 	mov	r18,r5
   119ac:	3021883a 	mov	r16,r6
   119b0:	20000226 	beq	r4,zero,119bc <__swbuf_r+0x2c>
   119b4:	20800e17 	ldw	r2,56(r4)
   119b8:	10003b26 	beq	r2,zero,11aa8 <__swbuf_r+0x118>
   119bc:	8080030b 	ldhu	r2,12(r16)
   119c0:	80c00617 	ldw	r3,24(r16)
   119c4:	1080020c 	andi	r2,r2,8
   119c8:	10bfffcc 	andi	r2,r2,65535
   119cc:	10a0001c 	xori	r2,r2,32768
   119d0:	80c00215 	stw	r3,8(r16)
   119d4:	10a00004 	addi	r2,r2,-32768
   119d8:	10002226 	beq	r2,zero,11a64 <__swbuf_r+0xd4>
   119dc:	80800417 	ldw	r2,16(r16)
   119e0:	10002026 	beq	r2,zero,11a64 <__swbuf_r+0xd4>
   119e4:	80c00017 	ldw	r3,0(r16)
   119e8:	81000517 	ldw	r4,20(r16)
   119ec:	94803fcc 	andi	r18,r18,255
   119f0:	1885c83a 	sub	r2,r3,r2
   119f4:	1100250e 	bge	r2,r4,11a8c <__swbuf_r+0xfc>
   119f8:	10800044 	addi	r2,r2,1
   119fc:	81400217 	ldw	r5,8(r16)
   11a00:	19000044 	addi	r4,r3,1
   11a04:	297fffc4 	addi	r5,r5,-1
   11a08:	81400215 	stw	r5,8(r16)
   11a0c:	1c800005 	stb	r18,0(r3)
   11a10:	80c00517 	ldw	r3,20(r16)
   11a14:	81000015 	stw	r4,0(r16)
   11a18:	18800c26 	beq	r3,r2,11a4c <__swbuf_r+0xbc>
   11a1c:	8080030b 	ldhu	r2,12(r16)
   11a20:	1080004c 	andi	r2,r2,1
   11a24:	10000226 	beq	r2,zero,11a30 <__swbuf_r+0xa0>
   11a28:	00800284 	movi	r2,10
   11a2c:	90800726 	beq	r18,r2,11a4c <__swbuf_r+0xbc>
   11a30:	9005883a 	mov	r2,r18
   11a34:	dfc00317 	ldw	ra,12(sp)
   11a38:	dc800217 	ldw	r18,8(sp)
   11a3c:	dc400117 	ldw	r17,4(sp)
   11a40:	dc000017 	ldw	r16,0(sp)
   11a44:	dec00404 	addi	sp,sp,16
   11a48:	f800283a 	ret
   11a4c:	8809883a 	mov	r4,r17
   11a50:	800b883a 	mov	r5,r16
   11a54:	000eb200 	call	eb20 <_fflush_r>
   11a58:	103ff526 	beq	r2,zero,11a30 <__swbuf_r+0xa0>
   11a5c:	04bfffc4 	movi	r18,-1
   11a60:	003ff306 	br	11a30 <__swbuf_r+0xa0>
   11a64:	8809883a 	mov	r4,r17
   11a68:	800b883a 	mov	r5,r16
   11a6c:	000d1540 	call	d154 <__swsetup_r>
   11a70:	10000f1e 	bne	r2,zero,11ab0 <__swbuf_r+0x120>
   11a74:	80800417 	ldw	r2,16(r16)
   11a78:	80c00017 	ldw	r3,0(r16)
   11a7c:	81000517 	ldw	r4,20(r16)
   11a80:	94803fcc 	andi	r18,r18,255
   11a84:	1885c83a 	sub	r2,r3,r2
   11a88:	113fdb16 	blt	r2,r4,119f8 <__swbuf_r+0x68>
   11a8c:	8809883a 	mov	r4,r17
   11a90:	800b883a 	mov	r5,r16
   11a94:	000eb200 	call	eb20 <_fflush_r>
   11a98:	103ff01e 	bne	r2,zero,11a5c <__swbuf_r+0xcc>
   11a9c:	80c00017 	ldw	r3,0(r16)
   11aa0:	00800044 	movi	r2,1
   11aa4:	003fd506 	br	119fc <__swbuf_r+0x6c>
   11aa8:	000eddc0 	call	eddc <__sinit>
   11aac:	003fc306 	br	119bc <__swbuf_r+0x2c>
   11ab0:	8080030b 	ldhu	r2,12(r16)
   11ab4:	04bfffc4 	movi	r18,-1
   11ab8:	10801014 	ori	r2,r2,64
   11abc:	8080030d 	sth	r2,12(r16)
   11ac0:	00800244 	movi	r2,9
   11ac4:	88800015 	stw	r2,0(r17)
   11ac8:	003fd906 	br	11a30 <__swbuf_r+0xa0>

00011acc <__swbuf>:
   11acc:	00c001f4 	movhi	r3,7
   11ad0:	18df0704 	addi	r3,r3,31772
   11ad4:	2005883a 	mov	r2,r4
   11ad8:	19000017 	ldw	r4,0(r3)
   11adc:	280d883a 	mov	r6,r5
   11ae0:	100b883a 	mov	r5,r2
   11ae4:	00119901 	jmpi	11990 <__swbuf_r>

00011ae8 <_write_r>:
   11ae8:	defffd04 	addi	sp,sp,-12
   11aec:	dc400115 	stw	r17,4(sp)
   11af0:	dc000015 	stw	r16,0(sp)
   11af4:	2023883a 	mov	r17,r4
   11af8:	04000234 	movhi	r16,8
   11afc:	842ca104 	addi	r16,r16,-19836
   11b00:	2809883a 	mov	r4,r5
   11b04:	300b883a 	mov	r5,r6
   11b08:	380d883a 	mov	r6,r7
   11b0c:	dfc00215 	stw	ra,8(sp)
   11b10:	80000015 	stw	zero,0(r16)
   11b14:	0013c2c0 	call	13c2c <write>
   11b18:	00ffffc4 	movi	r3,-1
   11b1c:	10c00526 	beq	r2,r3,11b34 <_write_r+0x4c>
   11b20:	dfc00217 	ldw	ra,8(sp)
   11b24:	dc400117 	ldw	r17,4(sp)
   11b28:	dc000017 	ldw	r16,0(sp)
   11b2c:	dec00304 	addi	sp,sp,12
   11b30:	f800283a 	ret
   11b34:	80c00017 	ldw	r3,0(r16)
   11b38:	183ff926 	beq	r3,zero,11b20 <_write_r+0x38>
   11b3c:	88c00015 	stw	r3,0(r17)
   11b40:	dfc00217 	ldw	ra,8(sp)
   11b44:	dc400117 	ldw	r17,4(sp)
   11b48:	dc000017 	ldw	r16,0(sp)
   11b4c:	dec00304 	addi	sp,sp,12
   11b50:	f800283a 	ret

00011b54 <_calloc_r>:
   11b54:	defffe04 	addi	sp,sp,-8
   11b58:	dc000015 	stw	r16,0(sp)
   11b5c:	2021883a 	mov	r16,r4
   11b60:	3009883a 	mov	r4,r6
   11b64:	dfc00115 	stw	ra,4(sp)
   11b68:	0009dec0 	call	9dec <__mulsi3>
   11b6c:	8009883a 	mov	r4,r16
   11b70:	100b883a 	mov	r5,r2
   11b74:	000a4880 	call	a488 <_malloc_r>
   11b78:	1021883a 	mov	r16,r2
   11b7c:	10000c26 	beq	r2,zero,11bb0 <_calloc_r+0x5c>
   11b80:	11bfff17 	ldw	r6,-4(r2)
   11b84:	00ffff04 	movi	r3,-4
   11b88:	00800904 	movi	r2,36
   11b8c:	30cc703a 	and	r6,r6,r3
   11b90:	30cd883a 	add	r6,r6,r3
   11b94:	11801436 	bltu	r2,r6,11be8 <_calloc_r+0x94>
   11b98:	00c004c4 	movi	r3,19
   11b9c:	19800936 	bltu	r3,r6,11bc4 <_calloc_r+0x70>
   11ba0:	8005883a 	mov	r2,r16
   11ba4:	10000015 	stw	zero,0(r2)
   11ba8:	10000115 	stw	zero,4(r2)
   11bac:	10000215 	stw	zero,8(r2)
   11bb0:	8005883a 	mov	r2,r16
   11bb4:	dfc00117 	ldw	ra,4(sp)
   11bb8:	dc000017 	ldw	r16,0(sp)
   11bbc:	dec00204 	addi	sp,sp,8
   11bc0:	f800283a 	ret
   11bc4:	80000015 	stw	zero,0(r16)
   11bc8:	80000115 	stw	zero,4(r16)
   11bcc:	00c006c4 	movi	r3,27
   11bd0:	19800d2e 	bgeu	r3,r6,11c08 <_calloc_r+0xb4>
   11bd4:	80000215 	stw	zero,8(r16)
   11bd8:	80000315 	stw	zero,12(r16)
   11bdc:	30800c26 	beq	r6,r2,11c10 <_calloc_r+0xbc>
   11be0:	80800404 	addi	r2,r16,16
   11be4:	003fef06 	br	11ba4 <_calloc_r+0x50>
   11be8:	8009883a 	mov	r4,r16
   11bec:	000b883a 	mov	r5,zero
   11bf0:	000ad4c0 	call	ad4c <memset>
   11bf4:	8005883a 	mov	r2,r16
   11bf8:	dfc00117 	ldw	ra,4(sp)
   11bfc:	dc000017 	ldw	r16,0(sp)
   11c00:	dec00204 	addi	sp,sp,8
   11c04:	f800283a 	ret
   11c08:	80800204 	addi	r2,r16,8
   11c0c:	003fe506 	br	11ba4 <_calloc_r+0x50>
   11c10:	80000415 	stw	zero,16(r16)
   11c14:	80000515 	stw	zero,20(r16)
   11c18:	80800604 	addi	r2,r16,24
   11c1c:	003fe106 	br	11ba4 <_calloc_r+0x50>

00011c20 <_close_r>:
   11c20:	defffd04 	addi	sp,sp,-12
   11c24:	dc400115 	stw	r17,4(sp)
   11c28:	dc000015 	stw	r16,0(sp)
   11c2c:	2023883a 	mov	r17,r4
   11c30:	04000234 	movhi	r16,8
   11c34:	842ca104 	addi	r16,r16,-19836
   11c38:	2809883a 	mov	r4,r5
   11c3c:	dfc00215 	stw	ra,8(sp)
   11c40:	80000015 	stw	zero,0(r16)
   11c44:	0012edc0 	call	12edc <close>
   11c48:	00ffffc4 	movi	r3,-1
   11c4c:	10c00526 	beq	r2,r3,11c64 <_close_r+0x44>
   11c50:	dfc00217 	ldw	ra,8(sp)
   11c54:	dc400117 	ldw	r17,4(sp)
   11c58:	dc000017 	ldw	r16,0(sp)
   11c5c:	dec00304 	addi	sp,sp,12
   11c60:	f800283a 	ret
   11c64:	80c00017 	ldw	r3,0(r16)
   11c68:	183ff926 	beq	r3,zero,11c50 <_close_r+0x30>
   11c6c:	88c00015 	stw	r3,0(r17)
   11c70:	dfc00217 	ldw	ra,8(sp)
   11c74:	dc400117 	ldw	r17,4(sp)
   11c78:	dc000017 	ldw	r16,0(sp)
   11c7c:	dec00304 	addi	sp,sp,12
   11c80:	f800283a 	ret

00011c84 <_fclose_r>:
   11c84:	defffc04 	addi	sp,sp,-16
   11c88:	dc400115 	stw	r17,4(sp)
   11c8c:	dc000015 	stw	r16,0(sp)
   11c90:	dfc00315 	stw	ra,12(sp)
   11c94:	dc800215 	stw	r18,8(sp)
   11c98:	2821883a 	mov	r16,r5
   11c9c:	2023883a 	mov	r17,r4
   11ca0:	28003426 	beq	r5,zero,11d74 <_fclose_r+0xf0>
   11ca4:	000efe40 	call	efe4 <__sfp_lock_acquire>
   11ca8:	88000226 	beq	r17,zero,11cb4 <_fclose_r+0x30>
   11cac:	88800e17 	ldw	r2,56(r17)
   11cb0:	10003826 	beq	r2,zero,11d94 <_fclose_r+0x110>
   11cb4:	8080030f 	ldh	r2,12(r16)
   11cb8:	10002526 	beq	r2,zero,11d50 <_fclose_r+0xcc>
   11cbc:	8809883a 	mov	r4,r17
   11cc0:	800b883a 	mov	r5,r16
   11cc4:	000eb200 	call	eb20 <_fflush_r>
   11cc8:	1025883a 	mov	r18,r2
   11ccc:	80800b17 	ldw	r2,44(r16)
   11cd0:	10000426 	beq	r2,zero,11ce4 <_fclose_r+0x60>
   11cd4:	81400717 	ldw	r5,28(r16)
   11cd8:	8809883a 	mov	r4,r17
   11cdc:	103ee83a 	callr	r2
   11ce0:	10003516 	blt	r2,zero,11db8 <_fclose_r+0x134>
   11ce4:	8080030b 	ldhu	r2,12(r16)
   11ce8:	1080200c 	andi	r2,r2,128
   11cec:	10bfffcc 	andi	r2,r2,65535
   11cf0:	10a0001c 	xori	r2,r2,32768
   11cf4:	10a00004 	addi	r2,r2,-32768
   11cf8:	10002b1e 	bne	r2,zero,11da8 <_fclose_r+0x124>
   11cfc:	81400c17 	ldw	r5,48(r16)
   11d00:	28000526 	beq	r5,zero,11d18 <_fclose_r+0x94>
   11d04:	80801004 	addi	r2,r16,64
   11d08:	28800226 	beq	r5,r2,11d14 <_fclose_r+0x90>
   11d0c:	8809883a 	mov	r4,r17
   11d10:	000f1600 	call	f160 <_free_r>
   11d14:	80000c15 	stw	zero,48(r16)
   11d18:	81401117 	ldw	r5,68(r16)
   11d1c:	28000326 	beq	r5,zero,11d2c <_fclose_r+0xa8>
   11d20:	8809883a 	mov	r4,r17
   11d24:	000f1600 	call	f160 <_free_r>
   11d28:	80001115 	stw	zero,68(r16)
   11d2c:	8000030d 	sth	zero,12(r16)
   11d30:	000efe80 	call	efe8 <__sfp_lock_release>
   11d34:	9005883a 	mov	r2,r18
   11d38:	dfc00317 	ldw	ra,12(sp)
   11d3c:	dc800217 	ldw	r18,8(sp)
   11d40:	dc400117 	ldw	r17,4(sp)
   11d44:	dc000017 	ldw	r16,0(sp)
   11d48:	dec00404 	addi	sp,sp,16
   11d4c:	f800283a 	ret
   11d50:	000efe80 	call	efe8 <__sfp_lock_release>
   11d54:	0025883a 	mov	r18,zero
   11d58:	9005883a 	mov	r2,r18
   11d5c:	dfc00317 	ldw	ra,12(sp)
   11d60:	dc800217 	ldw	r18,8(sp)
   11d64:	dc400117 	ldw	r17,4(sp)
   11d68:	dc000017 	ldw	r16,0(sp)
   11d6c:	dec00404 	addi	sp,sp,16
   11d70:	f800283a 	ret
   11d74:	0025883a 	mov	r18,zero
   11d78:	9005883a 	mov	r2,r18
   11d7c:	dfc00317 	ldw	ra,12(sp)
   11d80:	dc800217 	ldw	r18,8(sp)
   11d84:	dc400117 	ldw	r17,4(sp)
   11d88:	dc000017 	ldw	r16,0(sp)
   11d8c:	dec00404 	addi	sp,sp,16
   11d90:	f800283a 	ret
   11d94:	8809883a 	mov	r4,r17
   11d98:	000eddc0 	call	eddc <__sinit>
   11d9c:	8080030f 	ldh	r2,12(r16)
   11da0:	103fc61e 	bne	r2,zero,11cbc <_fclose_r+0x38>
   11da4:	003fea06 	br	11d50 <_fclose_r+0xcc>
   11da8:	81400417 	ldw	r5,16(r16)
   11dac:	8809883a 	mov	r4,r17
   11db0:	000f1600 	call	f160 <_free_r>
   11db4:	003fd106 	br	11cfc <_fclose_r+0x78>
   11db8:	04bfffc4 	movi	r18,-1
   11dbc:	003fc906 	br	11ce4 <_fclose_r+0x60>

00011dc0 <fclose>:
   11dc0:	008001f4 	movhi	r2,7
   11dc4:	109f0704 	addi	r2,r2,31772
   11dc8:	200b883a 	mov	r5,r4
   11dcc:	11000017 	ldw	r4,0(r2)
   11dd0:	0011c841 	jmpi	11c84 <_fclose_r>

00011dd4 <_fstat_r>:
   11dd4:	defffd04 	addi	sp,sp,-12
   11dd8:	dc400115 	stw	r17,4(sp)
   11ddc:	dc000015 	stw	r16,0(sp)
   11de0:	2023883a 	mov	r17,r4
   11de4:	04000234 	movhi	r16,8
   11de8:	842ca104 	addi	r16,r16,-19836
   11dec:	2809883a 	mov	r4,r5
   11df0:	300b883a 	mov	r5,r6
   11df4:	dfc00215 	stw	ra,8(sp)
   11df8:	80000015 	stw	zero,0(r16)
   11dfc:	00130680 	call	13068 <fstat>
   11e00:	00ffffc4 	movi	r3,-1
   11e04:	10c00526 	beq	r2,r3,11e1c <_fstat_r+0x48>
   11e08:	dfc00217 	ldw	ra,8(sp)
   11e0c:	dc400117 	ldw	r17,4(sp)
   11e10:	dc000017 	ldw	r16,0(sp)
   11e14:	dec00304 	addi	sp,sp,12
   11e18:	f800283a 	ret
   11e1c:	80c00017 	ldw	r3,0(r16)
   11e20:	183ff926 	beq	r3,zero,11e08 <_fstat_r+0x34>
   11e24:	88c00015 	stw	r3,0(r17)
   11e28:	dfc00217 	ldw	ra,8(sp)
   11e2c:	dc400117 	ldw	r17,4(sp)
   11e30:	dc000017 	ldw	r16,0(sp)
   11e34:	dec00304 	addi	sp,sp,12
   11e38:	f800283a 	ret

00011e3c <_isatty_r>:
   11e3c:	defffd04 	addi	sp,sp,-12
   11e40:	dc400115 	stw	r17,4(sp)
   11e44:	dc000015 	stw	r16,0(sp)
   11e48:	2023883a 	mov	r17,r4
   11e4c:	04000234 	movhi	r16,8
   11e50:	842ca104 	addi	r16,r16,-19836
   11e54:	2809883a 	mov	r4,r5
   11e58:	dfc00215 	stw	ra,8(sp)
   11e5c:	80000015 	stw	zero,0(r16)
   11e60:	00134300 	call	13430 <isatty>
   11e64:	00ffffc4 	movi	r3,-1
   11e68:	10c00526 	beq	r2,r3,11e80 <_isatty_r+0x44>
   11e6c:	dfc00217 	ldw	ra,8(sp)
   11e70:	dc400117 	ldw	r17,4(sp)
   11e74:	dc000017 	ldw	r16,0(sp)
   11e78:	dec00304 	addi	sp,sp,12
   11e7c:	f800283a 	ret
   11e80:	80c00017 	ldw	r3,0(r16)
   11e84:	183ff926 	beq	r3,zero,11e6c <_isatty_r+0x30>
   11e88:	88c00015 	stw	r3,0(r17)
   11e8c:	dfc00217 	ldw	ra,8(sp)
   11e90:	dc400117 	ldw	r17,4(sp)
   11e94:	dc000017 	ldw	r16,0(sp)
   11e98:	dec00304 	addi	sp,sp,12
   11e9c:	f800283a 	ret

00011ea0 <_lseek_r>:
   11ea0:	defffd04 	addi	sp,sp,-12
   11ea4:	dc400115 	stw	r17,4(sp)
   11ea8:	dc000015 	stw	r16,0(sp)
   11eac:	2023883a 	mov	r17,r4
   11eb0:	04000234 	movhi	r16,8
   11eb4:	842ca104 	addi	r16,r16,-19836
   11eb8:	2809883a 	mov	r4,r5
   11ebc:	300b883a 	mov	r5,r6
   11ec0:	380d883a 	mov	r6,r7
   11ec4:	dfc00215 	stw	ra,8(sp)
   11ec8:	80000015 	stw	zero,0(r16)
   11ecc:	00136100 	call	13610 <lseek>
   11ed0:	00ffffc4 	movi	r3,-1
   11ed4:	10c00526 	beq	r2,r3,11eec <_lseek_r+0x4c>
   11ed8:	dfc00217 	ldw	ra,8(sp)
   11edc:	dc400117 	ldw	r17,4(sp)
   11ee0:	dc000017 	ldw	r16,0(sp)
   11ee4:	dec00304 	addi	sp,sp,12
   11ee8:	f800283a 	ret
   11eec:	80c00017 	ldw	r3,0(r16)
   11ef0:	183ff926 	beq	r3,zero,11ed8 <_lseek_r+0x38>
   11ef4:	88c00015 	stw	r3,0(r17)
   11ef8:	dfc00217 	ldw	ra,8(sp)
   11efc:	dc400117 	ldw	r17,4(sp)
   11f00:	dc000017 	ldw	r16,0(sp)
   11f04:	dec00304 	addi	sp,sp,12
   11f08:	f800283a 	ret

00011f0c <_read_r>:
   11f0c:	defffd04 	addi	sp,sp,-12
   11f10:	dc400115 	stw	r17,4(sp)
   11f14:	dc000015 	stw	r16,0(sp)
   11f18:	2023883a 	mov	r17,r4
   11f1c:	04000234 	movhi	r16,8
   11f20:	842ca104 	addi	r16,r16,-19836
   11f24:	2809883a 	mov	r4,r5
   11f28:	300b883a 	mov	r5,r6
   11f2c:	380d883a 	mov	r6,r7
   11f30:	dfc00215 	stw	ra,8(sp)
   11f34:	80000015 	stw	zero,0(r16)
   11f38:	00137ec0 	call	137ec <read>
   11f3c:	00ffffc4 	movi	r3,-1
   11f40:	10c00526 	beq	r2,r3,11f58 <_read_r+0x4c>
   11f44:	dfc00217 	ldw	ra,8(sp)
   11f48:	dc400117 	ldw	r17,4(sp)
   11f4c:	dc000017 	ldw	r16,0(sp)
   11f50:	dec00304 	addi	sp,sp,12
   11f54:	f800283a 	ret
   11f58:	80c00017 	ldw	r3,0(r16)
   11f5c:	183ff926 	beq	r3,zero,11f44 <_read_r+0x38>
   11f60:	88c00015 	stw	r3,0(r17)
   11f64:	dfc00217 	ldw	ra,8(sp)
   11f68:	dc400117 	ldw	r17,4(sp)
   11f6c:	dc000017 	ldw	r16,0(sp)
   11f70:	dec00304 	addi	sp,sp,12
   11f74:	f800283a 	ret

00011f78 <__udivdi3>:
   11f78:	defff504 	addi	sp,sp,-44
   11f7c:	dd000515 	stw	r20,20(sp)
   11f80:	dcc00415 	stw	r19,16(sp)
   11f84:	dc800315 	stw	r18,12(sp)
   11f88:	dc400215 	stw	r17,8(sp)
   11f8c:	dc000115 	stw	r16,4(sp)
   11f90:	dfc00a15 	stw	ra,40(sp)
   11f94:	df000915 	stw	fp,36(sp)
   11f98:	ddc00815 	stw	r23,32(sp)
   11f9c:	dd800715 	stw	r22,28(sp)
   11fa0:	dd400615 	stw	r21,24(sp)
   11fa4:	2025883a 	mov	r18,r4
   11fa8:	2823883a 	mov	r17,r5
   11fac:	3021883a 	mov	r16,r6
   11fb0:	2027883a 	mov	r19,r4
   11fb4:	2829883a 	mov	r20,r5
   11fb8:	3800451e 	bne	r7,zero,120d0 <__udivdi3+0x158>
   11fbc:	2980652e 	bgeu	r5,r6,12154 <__udivdi3+0x1dc>
   11fc0:	00bfffd4 	movui	r2,65535
   11fc4:	1180b436 	bltu	r2,r6,12298 <__udivdi3+0x320>
   11fc8:	00803fc4 	movi	r2,255
   11fcc:	11816636 	bltu	r2,r6,12568 <__udivdi3+0x5f0>
   11fd0:	0005883a 	mov	r2,zero
   11fd4:	0007883a 	mov	r3,zero
   11fd8:	3084d83a 	srl	r2,r6,r2
   11fdc:	010001f4 	movhi	r4,7
   11fe0:	2110ca04 	addi	r4,r4,17192
   11fe4:	2085883a 	add	r2,r4,r2
   11fe8:	10800003 	ldbu	r2,0(r2)
   11fec:	10c7883a 	add	r3,r2,r3
   11ff0:	00800804 	movi	r2,32
   11ff4:	10c5c83a 	sub	r2,r2,r3
   11ff8:	10000526 	beq	r2,zero,12010 <__udivdi3+0x98>
   11ffc:	88a2983a 	sll	r17,r17,r2
   12000:	90c6d83a 	srl	r3,r18,r3
   12004:	30a0983a 	sll	r16,r6,r2
   12008:	90a6983a 	sll	r19,r18,r2
   1200c:	88e8b03a 	or	r20,r17,r3
   12010:	8022d43a 	srli	r17,r16,16
   12014:	a009883a 	mov	r4,r20
   12018:	857fffcc 	andi	r21,r16,65535
   1201c:	880b883a 	mov	r5,r17
   12020:	0009de40 	call	9de4 <__umodsi3>
   12024:	a009883a 	mov	r4,r20
   12028:	880b883a 	mov	r5,r17
   1202c:	102d883a 	mov	r22,r2
   12030:	0009ddc0 	call	9ddc <__udivsi3>
   12034:	1009883a 	mov	r4,r2
   12038:	a80b883a 	mov	r5,r21
   1203c:	1025883a 	mov	r18,r2
   12040:	0009dec0 	call	9dec <__mulsi3>
   12044:	1009883a 	mov	r4,r2
   12048:	b006943a 	slli	r3,r22,16
   1204c:	9804d43a 	srli	r2,r19,16
   12050:	1886b03a 	or	r3,r3,r2
   12054:	1900052e 	bgeu	r3,r4,1206c <__udivdi3+0xf4>
   12058:	1c07883a 	add	r3,r3,r16
   1205c:	90bfffc4 	addi	r2,r18,-1
   12060:	1c000136 	bltu	r3,r16,12068 <__udivdi3+0xf0>
   12064:	19015536 	bltu	r3,r4,125bc <__udivdi3+0x644>
   12068:	1025883a 	mov	r18,r2
   1206c:	1929c83a 	sub	r20,r3,r4
   12070:	880b883a 	mov	r5,r17
   12074:	a009883a 	mov	r4,r20
   12078:	0009de40 	call	9de4 <__umodsi3>
   1207c:	102d883a 	mov	r22,r2
   12080:	880b883a 	mov	r5,r17
   12084:	a009883a 	mov	r4,r20
   12088:	b02c943a 	slli	r22,r22,16
   1208c:	0009ddc0 	call	9ddc <__udivsi3>
   12090:	1009883a 	mov	r4,r2
   12094:	a80b883a 	mov	r5,r21
   12098:	9cffffcc 	andi	r19,r19,65535
   1209c:	1023883a 	mov	r17,r2
   120a0:	b4e6b03a 	or	r19,r22,r19
   120a4:	0009dec0 	call	9dec <__mulsi3>
   120a8:	9880052e 	bgeu	r19,r2,120c0 <__udivdi3+0x148>
   120ac:	9c27883a 	add	r19,r19,r16
   120b0:	88ffffc4 	addi	r3,r17,-1
   120b4:	9c011436 	bltu	r19,r16,12508 <__udivdi3+0x590>
   120b8:	9881132e 	bgeu	r19,r2,12508 <__udivdi3+0x590>
   120bc:	8c7fff84 	addi	r17,r17,-2
   120c0:	9004943a 	slli	r2,r18,16
   120c4:	0007883a 	mov	r3,zero
   120c8:	8884b03a 	or	r2,r17,r2
   120cc:	00001506 	br	12124 <__udivdi3+0x1ac>
   120d0:	29c06a36 	bltu	r5,r7,1227c <__udivdi3+0x304>
   120d4:	00bfffd4 	movui	r2,65535
   120d8:	11c06a2e 	bgeu	r2,r7,12284 <__udivdi3+0x30c>
   120dc:	00804034 	movhi	r2,256
   120e0:	10bfffc4 	addi	r2,r2,-1
   120e4:	11c11436 	bltu	r2,r7,12538 <__udivdi3+0x5c0>
   120e8:	00c00404 	movi	r3,16
   120ec:	180b883a 	mov	r5,r3
   120f0:	38c6d83a 	srl	r3,r7,r3
   120f4:	010001f4 	movhi	r4,7
   120f8:	2110ca04 	addi	r4,r4,17192
   120fc:	04000804 	movi	r16,32
   12100:	20c7883a 	add	r3,r4,r3
   12104:	18800003 	ldbu	r2,0(r3)
   12108:	1145883a 	add	r2,r2,r5
   1210c:	80a1c83a 	sub	r16,r16,r2
   12110:	80006e1e 	bne	r16,zero,122cc <__udivdi3+0x354>
   12114:	0007883a 	mov	r3,zero
   12118:	3c406a36 	bltu	r7,r17,122c4 <__udivdi3+0x34c>
   1211c:	9180692e 	bgeu	r18,r6,122c4 <__udivdi3+0x34c>
   12120:	0005883a 	mov	r2,zero
   12124:	dfc00a17 	ldw	ra,40(sp)
   12128:	df000917 	ldw	fp,36(sp)
   1212c:	ddc00817 	ldw	r23,32(sp)
   12130:	dd800717 	ldw	r22,28(sp)
   12134:	dd400617 	ldw	r21,24(sp)
   12138:	dd000517 	ldw	r20,20(sp)
   1213c:	dcc00417 	ldw	r19,16(sp)
   12140:	dc800317 	ldw	r18,12(sp)
   12144:	dc400217 	ldw	r17,8(sp)
   12148:	dc000117 	ldw	r16,4(sp)
   1214c:	dec00b04 	addi	sp,sp,44
   12150:	f800283a 	ret
   12154:	3000041e 	bne	r6,zero,12168 <__udivdi3+0x1f0>
   12158:	01000044 	movi	r4,1
   1215c:	000b883a 	mov	r5,zero
   12160:	0009ddc0 	call	9ddc <__udivsi3>
   12164:	1021883a 	mov	r16,r2
   12168:	00bfffd4 	movui	r2,65535
   1216c:	1400502e 	bgeu	r2,r16,122b0 <__udivdi3+0x338>
   12170:	00804034 	movhi	r2,256
   12174:	10bfffc4 	addi	r2,r2,-1
   12178:	1400f536 	bltu	r2,r16,12550 <__udivdi3+0x5d8>
   1217c:	00800404 	movi	r2,16
   12180:	1007883a 	mov	r3,r2
   12184:	8084d83a 	srl	r2,r16,r2
   12188:	010001f4 	movhi	r4,7
   1218c:	2110ca04 	addi	r4,r4,17192
   12190:	2085883a 	add	r2,r4,r2
   12194:	10800003 	ldbu	r2,0(r2)
   12198:	10c7883a 	add	r3,r2,r3
   1219c:	00800804 	movi	r2,32
   121a0:	10c5c83a 	sub	r2,r2,r3
   121a4:	1000a01e 	bne	r2,zero,12428 <__udivdi3+0x4b0>
   121a8:	8028d43a 	srli	r20,r16,16
   121ac:	8c23c83a 	sub	r17,r17,r16
   121b0:	857fffcc 	andi	r21,r16,65535
   121b4:	00c00044 	movi	r3,1
   121b8:	8809883a 	mov	r4,r17
   121bc:	a00b883a 	mov	r5,r20
   121c0:	d8c00015 	stw	r3,0(sp)
   121c4:	0009de40 	call	9de4 <__umodsi3>
   121c8:	8809883a 	mov	r4,r17
   121cc:	a00b883a 	mov	r5,r20
   121d0:	102d883a 	mov	r22,r2
   121d4:	0009ddc0 	call	9ddc <__udivsi3>
   121d8:	1009883a 	mov	r4,r2
   121dc:	a80b883a 	mov	r5,r21
   121e0:	1025883a 	mov	r18,r2
   121e4:	0009dec0 	call	9dec <__mulsi3>
   121e8:	1009883a 	mov	r4,r2
   121ec:	b00c943a 	slli	r6,r22,16
   121f0:	9804d43a 	srli	r2,r19,16
   121f4:	d8c00017 	ldw	r3,0(sp)
   121f8:	308cb03a 	or	r6,r6,r2
   121fc:	3100052e 	bgeu	r6,r4,12214 <__udivdi3+0x29c>
   12200:	340d883a 	add	r6,r6,r16
   12204:	90bfffc4 	addi	r2,r18,-1
   12208:	34000136 	bltu	r6,r16,12210 <__udivdi3+0x298>
   1220c:	3100e836 	bltu	r6,r4,125b0 <__udivdi3+0x638>
   12210:	1025883a 	mov	r18,r2
   12214:	3123c83a 	sub	r17,r6,r4
   12218:	8809883a 	mov	r4,r17
   1221c:	a00b883a 	mov	r5,r20
   12220:	d8c00015 	stw	r3,0(sp)
   12224:	0009de40 	call	9de4 <__umodsi3>
   12228:	102d883a 	mov	r22,r2
   1222c:	8809883a 	mov	r4,r17
   12230:	a00b883a 	mov	r5,r20
   12234:	b02c943a 	slli	r22,r22,16
   12238:	0009ddc0 	call	9ddc <__udivsi3>
   1223c:	1009883a 	mov	r4,r2
   12240:	a80b883a 	mov	r5,r21
   12244:	9cffffcc 	andi	r19,r19,65535
   12248:	1023883a 	mov	r17,r2
   1224c:	b4e6b03a 	or	r19,r22,r19
   12250:	0009dec0 	call	9dec <__mulsi3>
   12254:	d8c00017 	ldw	r3,0(sp)
   12258:	9880052e 	bgeu	r19,r2,12270 <__udivdi3+0x2f8>
   1225c:	9c27883a 	add	r19,r19,r16
   12260:	893fffc4 	addi	r4,r17,-1
   12264:	9c00aa36 	bltu	r19,r16,12510 <__udivdi3+0x598>
   12268:	9880a92e 	bgeu	r19,r2,12510 <__udivdi3+0x598>
   1226c:	8c7fff84 	addi	r17,r17,-2
   12270:	9004943a 	slli	r2,r18,16
   12274:	8884b03a 	or	r2,r17,r2
   12278:	003faa06 	br	12124 <__udivdi3+0x1ac>
   1227c:	0007883a 	mov	r3,zero
   12280:	003fa706 	br	12120 <__udivdi3+0x1a8>
   12284:	00803fc4 	movi	r2,255
   12288:	11c0ae36 	bltu	r2,r7,12544 <__udivdi3+0x5cc>
   1228c:	0007883a 	mov	r3,zero
   12290:	000b883a 	mov	r5,zero
   12294:	003f9606 	br	120f0 <__udivdi3+0x178>
   12298:	00804034 	movhi	r2,256
   1229c:	10bfffc4 	addi	r2,r2,-1
   122a0:	1180ae36 	bltu	r2,r6,1255c <__udivdi3+0x5e4>
   122a4:	00800404 	movi	r2,16
   122a8:	1007883a 	mov	r3,r2
   122ac:	003f4a06 	br	11fd8 <__udivdi3+0x60>
   122b0:	00803fc4 	movi	r2,255
   122b4:	1400af36 	bltu	r2,r16,12574 <__udivdi3+0x5fc>
   122b8:	0005883a 	mov	r2,zero
   122bc:	0007883a 	mov	r3,zero
   122c0:	003fb006 	br	12184 <__udivdi3+0x20c>
   122c4:	00800044 	movi	r2,1
   122c8:	003f9606 	br	12124 <__udivdi3+0x1ac>
   122cc:	3c0e983a 	sll	r7,r7,r16
   122d0:	3086d83a 	srl	r3,r6,r2
   122d4:	88aed83a 	srl	r23,r17,r2
   122d8:	9084d83a 	srl	r2,r18,r2
   122dc:	38e6b03a 	or	r19,r7,r3
   122e0:	9828d43a 	srli	r20,r19,16
   122e4:	8c22983a 	sll	r17,r17,r16
   122e8:	b809883a 	mov	r4,r23
   122ec:	a00b883a 	mov	r5,r20
   122f0:	342a983a 	sll	r21,r6,r16
   122f4:	88a2b03a 	or	r17,r17,r2
   122f8:	0009de40 	call	9de4 <__umodsi3>
   122fc:	b809883a 	mov	r4,r23
   12300:	a00b883a 	mov	r5,r20
   12304:	1039883a 	mov	fp,r2
   12308:	9dbfffcc 	andi	r22,r19,65535
   1230c:	0009ddc0 	call	9ddc <__udivsi3>
   12310:	1009883a 	mov	r4,r2
   12314:	b00b883a 	mov	r5,r22
   12318:	102f883a 	mov	r23,r2
   1231c:	0009dec0 	call	9dec <__mulsi3>
   12320:	1009883a 	mov	r4,r2
   12324:	e00e943a 	slli	r7,fp,16
   12328:	8804d43a 	srli	r2,r17,16
   1232c:	388eb03a 	or	r7,r7,r2
   12330:	3900042e 	bgeu	r7,r4,12344 <__udivdi3+0x3cc>
   12334:	3ccf883a 	add	r7,r7,r19
   12338:	b8bfffc4 	addi	r2,r23,-1
   1233c:	3cc0942e 	bgeu	r7,r19,12590 <__udivdi3+0x618>
   12340:	102f883a 	mov	r23,r2
   12344:	3939c83a 	sub	fp,r7,r4
   12348:	a00b883a 	mov	r5,r20
   1234c:	e009883a 	mov	r4,fp
   12350:	0009de40 	call	9de4 <__umodsi3>
   12354:	a00b883a 	mov	r5,r20
   12358:	e009883a 	mov	r4,fp
   1235c:	d8800015 	stw	r2,0(sp)
   12360:	0009ddc0 	call	9ddc <__udivsi3>
   12364:	1009883a 	mov	r4,r2
   12368:	b00b883a 	mov	r5,r22
   1236c:	1029883a 	mov	r20,r2
   12370:	0009dec0 	call	9dec <__mulsi3>
   12374:	d8c00017 	ldw	r3,0(sp)
   12378:	8c7fffcc 	andi	r17,r17,65535
   1237c:	1806943a 	slli	r3,r3,16
   12380:	1c46b03a 	or	r3,r3,r17
   12384:	1880042e 	bgeu	r3,r2,12398 <__udivdi3+0x420>
   12388:	1cc7883a 	add	r3,r3,r19
   1238c:	a13fffc4 	addi	r4,r20,-1
   12390:	1cc07b2e 	bgeu	r3,r19,12580 <__udivdi3+0x608>
   12394:	2029883a 	mov	r20,r4
   12398:	b82e943a 	slli	r23,r23,16
   1239c:	a822d43a 	srli	r17,r21,16
   123a0:	ad7fffcc 	andi	r21,r21,65535
   123a4:	a5e8b03a 	or	r20,r20,r23
   123a8:	a5bfffcc 	andi	r22,r20,65535
   123ac:	b009883a 	mov	r4,r22
   123b0:	a80b883a 	mov	r5,r21
   123b4:	18afc83a 	sub	r23,r3,r2
   123b8:	a026d43a 	srli	r19,r20,16
   123bc:	0009dec0 	call	9dec <__mulsi3>
   123c0:	b009883a 	mov	r4,r22
   123c4:	880b883a 	mov	r5,r17
   123c8:	1039883a 	mov	fp,r2
   123cc:	0009dec0 	call	9dec <__mulsi3>
   123d0:	a80b883a 	mov	r5,r21
   123d4:	9809883a 	mov	r4,r19
   123d8:	102d883a 	mov	r22,r2
   123dc:	0009dec0 	call	9dec <__mulsi3>
   123e0:	9809883a 	mov	r4,r19
   123e4:	880b883a 	mov	r5,r17
   123e8:	102b883a 	mov	r21,r2
   123ec:	0009dec0 	call	9dec <__mulsi3>
   123f0:	100b883a 	mov	r5,r2
   123f4:	e004d43a 	srli	r2,fp,16
   123f8:	ad89883a 	add	r4,r21,r22
   123fc:	2089883a 	add	r4,r4,r2
   12400:	2540022e 	bgeu	r4,r21,1240c <__udivdi3+0x494>
   12404:	00800074 	movhi	r2,1
   12408:	288b883a 	add	r5,r5,r2
   1240c:	2004d43a 	srli	r2,r4,16
   12410:	288b883a 	add	r5,r5,r2
   12414:	b9404536 	bltu	r23,r5,1252c <__udivdi3+0x5b4>
   12418:	b9403f26 	beq	r23,r5,12518 <__udivdi3+0x5a0>
   1241c:	a005883a 	mov	r2,r20
   12420:	0007883a 	mov	r3,zero
   12424:	003f3f06 	br	12124 <__udivdi3+0x1ac>
   12428:	80a0983a 	sll	r16,r16,r2
   1242c:	88eed83a 	srl	r23,r17,r3
   12430:	90c6d83a 	srl	r3,r18,r3
   12434:	8028d43a 	srli	r20,r16,16
   12438:	88a2983a 	sll	r17,r17,r2
   1243c:	b809883a 	mov	r4,r23
   12440:	a00b883a 	mov	r5,r20
   12444:	88ecb03a 	or	r22,r17,r3
   12448:	90a6983a 	sll	r19,r18,r2
   1244c:	0009de40 	call	9de4 <__umodsi3>
   12450:	b809883a 	mov	r4,r23
   12454:	a00b883a 	mov	r5,r20
   12458:	1023883a 	mov	r17,r2
   1245c:	857fffcc 	andi	r21,r16,65535
   12460:	0009ddc0 	call	9ddc <__udivsi3>
   12464:	1009883a 	mov	r4,r2
   12468:	a80b883a 	mov	r5,r21
   1246c:	102f883a 	mov	r23,r2
   12470:	0009dec0 	call	9dec <__mulsi3>
   12474:	1009883a 	mov	r4,r2
   12478:	880a943a 	slli	r5,r17,16
   1247c:	b004d43a 	srli	r2,r22,16
   12480:	288ab03a 	or	r5,r5,r2
   12484:	2900062e 	bgeu	r5,r4,124a0 <__udivdi3+0x528>
   12488:	2c0b883a 	add	r5,r5,r16
   1248c:	b8bfffc4 	addi	r2,r23,-1
   12490:	2c004536 	bltu	r5,r16,125a8 <__udivdi3+0x630>
   12494:	2900442e 	bgeu	r5,r4,125a8 <__udivdi3+0x630>
   12498:	bdffff84 	addi	r23,r23,-2
   1249c:	2c0b883a 	add	r5,r5,r16
   124a0:	2925c83a 	sub	r18,r5,r4
   124a4:	9009883a 	mov	r4,r18
   124a8:	a00b883a 	mov	r5,r20
   124ac:	0009de40 	call	9de4 <__umodsi3>
   124b0:	1023883a 	mov	r17,r2
   124b4:	9009883a 	mov	r4,r18
   124b8:	a00b883a 	mov	r5,r20
   124bc:	8822943a 	slli	r17,r17,16
   124c0:	0009ddc0 	call	9ddc <__udivsi3>
   124c4:	1009883a 	mov	r4,r2
   124c8:	a80b883a 	mov	r5,r21
   124cc:	b5bfffcc 	andi	r22,r22,65535
   124d0:	1025883a 	mov	r18,r2
   124d4:	8da2b03a 	or	r17,r17,r22
   124d8:	0009dec0 	call	9dec <__mulsi3>
   124dc:	8880062e 	bgeu	r17,r2,124f8 <__udivdi3+0x580>
   124e0:	8c23883a 	add	r17,r17,r16
   124e4:	90ffffc4 	addi	r3,r18,-1
   124e8:	8c002d36 	bltu	r17,r16,125a0 <__udivdi3+0x628>
   124ec:	88802c2e 	bgeu	r17,r2,125a0 <__udivdi3+0x628>
   124f0:	94bfff84 	addi	r18,r18,-2
   124f4:	8c23883a 	add	r17,r17,r16
   124f8:	b806943a 	slli	r3,r23,16
   124fc:	88a3c83a 	sub	r17,r17,r2
   12500:	90c6b03a 	or	r3,r18,r3
   12504:	003f2c06 	br	121b8 <__udivdi3+0x240>
   12508:	1823883a 	mov	r17,r3
   1250c:	003eec06 	br	120c0 <__udivdi3+0x148>
   12510:	2023883a 	mov	r17,r4
   12514:	003f5606 	br	12270 <__udivdi3+0x2f8>
   12518:	2008943a 	slli	r4,r4,16
   1251c:	9420983a 	sll	r16,r18,r16
   12520:	e73fffcc 	andi	fp,fp,65535
   12524:	2709883a 	add	r4,r4,fp
   12528:	813fbc2e 	bgeu	r16,r4,1241c <__udivdi3+0x4a4>
   1252c:	a0bfffc4 	addi	r2,r20,-1
   12530:	0007883a 	mov	r3,zero
   12534:	003efb06 	br	12124 <__udivdi3+0x1ac>
   12538:	00c00604 	movi	r3,24
   1253c:	180b883a 	mov	r5,r3
   12540:	003eeb06 	br	120f0 <__udivdi3+0x178>
   12544:	00c00204 	movi	r3,8
   12548:	180b883a 	mov	r5,r3
   1254c:	003ee806 	br	120f0 <__udivdi3+0x178>
   12550:	00800604 	movi	r2,24
   12554:	1007883a 	mov	r3,r2
   12558:	003f0a06 	br	12184 <__udivdi3+0x20c>
   1255c:	00800604 	movi	r2,24
   12560:	1007883a 	mov	r3,r2
   12564:	003e9c06 	br	11fd8 <__udivdi3+0x60>
   12568:	00800204 	movi	r2,8
   1256c:	1007883a 	mov	r3,r2
   12570:	003e9906 	br	11fd8 <__udivdi3+0x60>
   12574:	00800204 	movi	r2,8
   12578:	1007883a 	mov	r3,r2
   1257c:	003f0106 	br	12184 <__udivdi3+0x20c>
   12580:	18bf842e 	bgeu	r3,r2,12394 <__udivdi3+0x41c>
   12584:	a53fff84 	addi	r20,r20,-2
   12588:	1cc7883a 	add	r3,r3,r19
   1258c:	003f8206 	br	12398 <__udivdi3+0x420>
   12590:	393f6b2e 	bgeu	r7,r4,12340 <__udivdi3+0x3c8>
   12594:	bdffff84 	addi	r23,r23,-2
   12598:	3ccf883a 	add	r7,r7,r19
   1259c:	003f6906 	br	12344 <__udivdi3+0x3cc>
   125a0:	1825883a 	mov	r18,r3
   125a4:	003fd406 	br	124f8 <__udivdi3+0x580>
   125a8:	102f883a 	mov	r23,r2
   125ac:	003fbc06 	br	124a0 <__udivdi3+0x528>
   125b0:	94bfff84 	addi	r18,r18,-2
   125b4:	340d883a 	add	r6,r6,r16
   125b8:	003f1606 	br	12214 <__udivdi3+0x29c>
   125bc:	94bfff84 	addi	r18,r18,-2
   125c0:	1c07883a 	add	r3,r3,r16
   125c4:	003ea906 	br	1206c <__udivdi3+0xf4>

000125c8 <__umoddi3>:
   125c8:	defff304 	addi	sp,sp,-52
   125cc:	dd000715 	stw	r20,28(sp)
   125d0:	dcc00615 	stw	r19,24(sp)
   125d4:	dc800515 	stw	r18,20(sp)
   125d8:	dc400415 	stw	r17,16(sp)
   125dc:	dc000315 	stw	r16,12(sp)
   125e0:	dfc00c15 	stw	ra,48(sp)
   125e4:	df000b15 	stw	fp,44(sp)
   125e8:	ddc00a15 	stw	r23,40(sp)
   125ec:	dd800915 	stw	r22,36(sp)
   125f0:	dd400815 	stw	r21,32(sp)
   125f4:	2025883a 	mov	r18,r4
   125f8:	2823883a 	mov	r17,r5
   125fc:	3021883a 	mov	r16,r6
   12600:	2027883a 	mov	r19,r4
   12604:	2829883a 	mov	r20,r5
   12608:	38003a1e 	bne	r7,zero,126f4 <__umoddi3+0x12c>
   1260c:	2980522e 	bgeu	r5,r6,12758 <__umoddi3+0x190>
   12610:	00bfffd4 	movui	r2,65535
   12614:	1180a436 	bltu	r2,r6,128a8 <__umoddi3+0x2e0>
   12618:	00803fc4 	movi	r2,255
   1261c:	11816036 	bltu	r2,r6,12ba0 <__umoddi3+0x5d8>
   12620:	0005883a 	mov	r2,zero
   12624:	0009883a 	mov	r4,zero
   12628:	3084d83a 	srl	r2,r6,r2
   1262c:	00c001f4 	movhi	r3,7
   12630:	18d0ca04 	addi	r3,r3,17192
   12634:	05400804 	movi	r21,32
   12638:	1885883a 	add	r2,r3,r2
   1263c:	10800003 	ldbu	r2,0(r2)
   12640:	1109883a 	add	r4,r2,r4
   12644:	a92bc83a 	sub	r21,r21,r4
   12648:	a8010e26 	beq	r21,zero,12a84 <__umoddi3+0x4bc>
   1264c:	8d62983a 	sll	r17,r17,r21
   12650:	9108d83a 	srl	r4,r18,r4
   12654:	3560983a 	sll	r16,r6,r21
   12658:	9566983a 	sll	r19,r18,r21
   1265c:	8928b03a 	or	r20,r17,r4
   12660:	8022d43a 	srli	r17,r16,16
   12664:	a009883a 	mov	r4,r20
   12668:	84bfffcc 	andi	r18,r16,65535
   1266c:	880b883a 	mov	r5,r17
   12670:	0009de40 	call	9de4 <__umodsi3>
   12674:	a009883a 	mov	r4,r20
   12678:	880b883a 	mov	r5,r17
   1267c:	102d883a 	mov	r22,r2
   12680:	0009ddc0 	call	9ddc <__udivsi3>
   12684:	1009883a 	mov	r4,r2
   12688:	900b883a 	mov	r5,r18
   1268c:	0009dec0 	call	9dec <__mulsi3>
   12690:	1009883a 	mov	r4,r2
   12694:	b006943a 	slli	r3,r22,16
   12698:	9804d43a 	srli	r2,r19,16
   1269c:	1886b03a 	or	r3,r3,r2
   126a0:	1900042e 	bgeu	r3,r4,126b4 <__umoddi3+0xec>
   126a4:	1c07883a 	add	r3,r3,r16
   126a8:	1c000236 	bltu	r3,r16,126b4 <__umoddi3+0xec>
   126ac:	1900012e 	bgeu	r3,r4,126b4 <__umoddi3+0xec>
   126b0:	1c07883a 	add	r3,r3,r16
   126b4:	1929c83a 	sub	r20,r3,r4
   126b8:	a009883a 	mov	r4,r20
   126bc:	880b883a 	mov	r5,r17
   126c0:	0009de40 	call	9de4 <__umodsi3>
   126c4:	102d883a 	mov	r22,r2
   126c8:	a009883a 	mov	r4,r20
   126cc:	880b883a 	mov	r5,r17
   126d0:	b02c943a 	slli	r22,r22,16
   126d4:	0009ddc0 	call	9ddc <__udivsi3>
   126d8:	1009883a 	mov	r4,r2
   126dc:	900b883a 	mov	r5,r18
   126e0:	9cffffcc 	andi	r19,r19,65535
   126e4:	0009dec0 	call	9dec <__mulsi3>
   126e8:	b4e6b03a 	or	r19,r22,r19
   126ec:	9880572e 	bgeu	r19,r2,1284c <__umoddi3+0x284>
   126f0:	00005206 	br	1283c <__umoddi3+0x274>
   126f4:	29c05936 	bltu	r5,r7,1285c <__umoddi3+0x294>
   126f8:	00bfffd4 	movui	r2,65535
   126fc:	11c0652e 	bgeu	r2,r7,12894 <__umoddi3+0x2cc>
   12700:	00804034 	movhi	r2,256
   12704:	10bfffc4 	addi	r2,r2,-1
   12708:	11c11936 	bltu	r2,r7,12b70 <__umoddi3+0x5a8>
   1270c:	00c00404 	movi	r3,16
   12710:	1827883a 	mov	r19,r3
   12714:	38c6d83a 	srl	r3,r7,r3
   12718:	010001f4 	movhi	r4,7
   1271c:	2110ca04 	addi	r4,r4,17192
   12720:	04000804 	movi	r16,32
   12724:	20c7883a 	add	r3,r4,r3
   12728:	18800003 	ldbu	r2,0(r3)
   1272c:	14e7883a 	add	r19,r2,r19
   12730:	84e1c83a 	sub	r16,r16,r19
   12734:	8000671e 	bne	r16,zero,128d4 <__umoddi3+0x30c>
   12738:	3c400136 	bltu	r7,r17,12740 <__umoddi3+0x178>
   1273c:	91812536 	bltu	r18,r6,12bd4 <__umoddi3+0x60c>
   12740:	9185c83a 	sub	r2,r18,r6
   12744:	89e3c83a 	sub	r17,r17,r7
   12748:	90a5803a 	cmpltu	r18,r18,r2
   1274c:	8ca9c83a 	sub	r20,r17,r18
   12750:	a007883a 	mov	r3,r20
   12754:	00004306 	br	12864 <__umoddi3+0x29c>
   12758:	3000041e 	bne	r6,zero,1276c <__umoddi3+0x1a4>
   1275c:	01000044 	movi	r4,1
   12760:	000b883a 	mov	r5,zero
   12764:	0009ddc0 	call	9ddc <__udivsi3>
   12768:	1021883a 	mov	r16,r2
   1276c:	00bfffd4 	movui	r2,65535
   12770:	1400532e 	bgeu	r2,r16,128c0 <__umoddi3+0x2f8>
   12774:	00804034 	movhi	r2,256
   12778:	10bfffc4 	addi	r2,r2,-1
   1277c:	14010536 	bltu	r2,r16,12b94 <__umoddi3+0x5cc>
   12780:	00800404 	movi	r2,16
   12784:	1007883a 	mov	r3,r2
   12788:	8084d83a 	srl	r2,r16,r2
   1278c:	010001f4 	movhi	r4,7
   12790:	2110ca04 	addi	r4,r4,17192
   12794:	05400804 	movi	r21,32
   12798:	2085883a 	add	r2,r4,r2
   1279c:	10800003 	ldbu	r2,0(r2)
   127a0:	10c7883a 	add	r3,r2,r3
   127a4:	a8ebc83a 	sub	r21,r21,r3
   127a8:	a800b81e 	bne	r21,zero,12a8c <__umoddi3+0x4c4>
   127ac:	8028d43a 	srli	r20,r16,16
   127b0:	8c23c83a 	sub	r17,r17,r16
   127b4:	85bfffcc 	andi	r22,r16,65535
   127b8:	8809883a 	mov	r4,r17
   127bc:	a00b883a 	mov	r5,r20
   127c0:	0009de40 	call	9de4 <__umodsi3>
   127c4:	8809883a 	mov	r4,r17
   127c8:	a00b883a 	mov	r5,r20
   127cc:	1025883a 	mov	r18,r2
   127d0:	0009ddc0 	call	9ddc <__udivsi3>
   127d4:	1009883a 	mov	r4,r2
   127d8:	b00b883a 	mov	r5,r22
   127dc:	0009dec0 	call	9dec <__mulsi3>
   127e0:	1009883a 	mov	r4,r2
   127e4:	9006943a 	slli	r3,r18,16
   127e8:	9804d43a 	srli	r2,r19,16
   127ec:	1886b03a 	or	r3,r3,r2
   127f0:	1900032e 	bgeu	r3,r4,12800 <__umoddi3+0x238>
   127f4:	1c07883a 	add	r3,r3,r16
   127f8:	1c000136 	bltu	r3,r16,12800 <__umoddi3+0x238>
   127fc:	1900f336 	bltu	r3,r4,12bcc <__umoddi3+0x604>
   12800:	1923c83a 	sub	r17,r3,r4
   12804:	8809883a 	mov	r4,r17
   12808:	a00b883a 	mov	r5,r20
   1280c:	0009de40 	call	9de4 <__umodsi3>
   12810:	102f883a 	mov	r23,r2
   12814:	8809883a 	mov	r4,r17
   12818:	a00b883a 	mov	r5,r20
   1281c:	b82e943a 	slli	r23,r23,16
   12820:	0009ddc0 	call	9ddc <__udivsi3>
   12824:	1009883a 	mov	r4,r2
   12828:	b00b883a 	mov	r5,r22
   1282c:	9cffffcc 	andi	r19,r19,65535
   12830:	0009dec0 	call	9dec <__mulsi3>
   12834:	bce6b03a 	or	r19,r23,r19
   12838:	9880042e 	bgeu	r19,r2,1284c <__umoddi3+0x284>
   1283c:	9c27883a 	add	r19,r19,r16
   12840:	9c000236 	bltu	r19,r16,1284c <__umoddi3+0x284>
   12844:	9880012e 	bgeu	r19,r2,1284c <__umoddi3+0x284>
   12848:	9c27883a 	add	r19,r19,r16
   1284c:	9885c83a 	sub	r2,r19,r2
   12850:	1544d83a 	srl	r2,r2,r21
   12854:	0007883a 	mov	r3,zero
   12858:	00000206 	br	12864 <__umoddi3+0x29c>
   1285c:	2005883a 	mov	r2,r4
   12860:	2807883a 	mov	r3,r5
   12864:	dfc00c17 	ldw	ra,48(sp)
   12868:	df000b17 	ldw	fp,44(sp)
   1286c:	ddc00a17 	ldw	r23,40(sp)
   12870:	dd800917 	ldw	r22,36(sp)
   12874:	dd400817 	ldw	r21,32(sp)
   12878:	dd000717 	ldw	r20,28(sp)
   1287c:	dcc00617 	ldw	r19,24(sp)
   12880:	dc800517 	ldw	r18,20(sp)
   12884:	dc400417 	ldw	r17,16(sp)
   12888:	dc000317 	ldw	r16,12(sp)
   1288c:	dec00d04 	addi	sp,sp,52
   12890:	f800283a 	ret
   12894:	00803fc4 	movi	r2,255
   12898:	11c0b236 	bltu	r2,r7,12b64 <__umoddi3+0x59c>
   1289c:	0007883a 	mov	r3,zero
   128a0:	0027883a 	mov	r19,zero
   128a4:	003f9b06 	br	12714 <__umoddi3+0x14c>
   128a8:	00804034 	movhi	r2,256
   128ac:	10bfffc4 	addi	r2,r2,-1
   128b0:	1180b236 	bltu	r2,r6,12b7c <__umoddi3+0x5b4>
   128b4:	00800404 	movi	r2,16
   128b8:	1009883a 	mov	r4,r2
   128bc:	003f5a06 	br	12628 <__umoddi3+0x60>
   128c0:	00803fc4 	movi	r2,255
   128c4:	1400b036 	bltu	r2,r16,12b88 <__umoddi3+0x5c0>
   128c8:	0005883a 	mov	r2,zero
   128cc:	0007883a 	mov	r3,zero
   128d0:	003fad06 	br	12788 <__umoddi3+0x1c0>
   128d4:	34c4d83a 	srl	r2,r6,r19
   128d8:	3c0e983a 	sll	r7,r7,r16
   128dc:	8cf8d83a 	srl	fp,r17,r19
   128e0:	8c22983a 	sll	r17,r17,r16
   128e4:	38a8b03a 	or	r20,r7,r2
   128e8:	a02ad43a 	srli	r21,r20,16
   128ec:	94c4d83a 	srl	r2,r18,r19
   128f0:	e009883a 	mov	r4,fp
   128f4:	a80b883a 	mov	r5,r21
   128f8:	342c983a 	sll	r22,r6,r16
   128fc:	88a2b03a 	or	r17,r17,r2
   12900:	0009de40 	call	9de4 <__umodsi3>
   12904:	e009883a 	mov	r4,fp
   12908:	a80b883a 	mov	r5,r21
   1290c:	a5ffffcc 	andi	r23,r20,65535
   12910:	d8800215 	stw	r2,8(sp)
   12914:	0009ddc0 	call	9ddc <__udivsi3>
   12918:	1009883a 	mov	r4,r2
   1291c:	b80b883a 	mov	r5,r23
   12920:	1039883a 	mov	fp,r2
   12924:	0009dec0 	call	9dec <__mulsi3>
   12928:	d8c00217 	ldw	r3,8(sp)
   1292c:	1009883a 	mov	r4,r2
   12930:	8804d43a 	srli	r2,r17,16
   12934:	1806943a 	slli	r3,r3,16
   12938:	9424983a 	sll	r18,r18,r16
   1293c:	1886b03a 	or	r3,r3,r2
   12940:	1900042e 	bgeu	r3,r4,12954 <__umoddi3+0x38c>
   12944:	1d07883a 	add	r3,r3,r20
   12948:	e0bfffc4 	addi	r2,fp,-1
   1294c:	1d009b2e 	bgeu	r3,r20,12bbc <__umoddi3+0x5f4>
   12950:	1039883a 	mov	fp,r2
   12954:	1907c83a 	sub	r3,r3,r4
   12958:	1809883a 	mov	r4,r3
   1295c:	a80b883a 	mov	r5,r21
   12960:	d8c00215 	stw	r3,8(sp)
   12964:	0009de40 	call	9de4 <__umodsi3>
   12968:	d8c00217 	ldw	r3,8(sp)
   1296c:	a80b883a 	mov	r5,r21
   12970:	d8800015 	stw	r2,0(sp)
   12974:	1809883a 	mov	r4,r3
   12978:	0009ddc0 	call	9ddc <__udivsi3>
   1297c:	1009883a 	mov	r4,r2
   12980:	b80b883a 	mov	r5,r23
   12984:	102b883a 	mov	r21,r2
   12988:	0009dec0 	call	9dec <__mulsi3>
   1298c:	d9c00017 	ldw	r7,0(sp)
   12990:	8c7fffcc 	andi	r17,r17,65535
   12994:	380e943a 	slli	r7,r7,16
   12998:	3c4eb03a 	or	r7,r7,r17
   1299c:	3880042e 	bgeu	r7,r2,129b0 <__umoddi3+0x3e8>
   129a0:	3d0f883a 	add	r7,r7,r20
   129a4:	a8ffffc4 	addi	r3,r21,-1
   129a8:	3d00802e 	bgeu	r7,r20,12bac <__umoddi3+0x5e4>
   129ac:	182b883a 	mov	r21,r3
   129b0:	e038943a 	slli	fp,fp,16
   129b4:	b010d43a 	srli	r8,r22,16
   129b8:	b1bfffcc 	andi	r6,r22,65535
   129bc:	af2ab03a 	or	r21,r21,fp
   129c0:	a82ed43a 	srli	r23,r21,16
   129c4:	ad7fffcc 	andi	r21,r21,65535
   129c8:	300b883a 	mov	r5,r6
   129cc:	a809883a 	mov	r4,r21
   129d0:	38a3c83a 	sub	r17,r7,r2
   129d4:	d9800115 	stw	r6,4(sp)
   129d8:	da000015 	stw	r8,0(sp)
   129dc:	0009dec0 	call	9dec <__mulsi3>
   129e0:	da000017 	ldw	r8,0(sp)
   129e4:	a809883a 	mov	r4,r21
   129e8:	1039883a 	mov	fp,r2
   129ec:	400b883a 	mov	r5,r8
   129f0:	da000215 	stw	r8,8(sp)
   129f4:	0009dec0 	call	9dec <__mulsi3>
   129f8:	d9800117 	ldw	r6,4(sp)
   129fc:	b809883a 	mov	r4,r23
   12a00:	d8800015 	stw	r2,0(sp)
   12a04:	300b883a 	mov	r5,r6
   12a08:	0009dec0 	call	9dec <__mulsi3>
   12a0c:	d8c00217 	ldw	r3,8(sp)
   12a10:	b809883a 	mov	r4,r23
   12a14:	102b883a 	mov	r21,r2
   12a18:	180b883a 	mov	r5,r3
   12a1c:	0009dec0 	call	9dec <__mulsi3>
   12a20:	d9c00017 	ldw	r7,0(sp)
   12a24:	1007883a 	mov	r3,r2
   12a28:	e004d43a 	srli	r2,fp,16
   12a2c:	a9c9883a 	add	r4,r21,r7
   12a30:	2089883a 	add	r4,r4,r2
   12a34:	2540022e 	bgeu	r4,r21,12a40 <__umoddi3+0x478>
   12a38:	00800074 	movhi	r2,1
   12a3c:	1887883a 	add	r3,r3,r2
   12a40:	2004d43a 	srli	r2,r4,16
   12a44:	2008943a 	slli	r4,r4,16
   12a48:	e73fffcc 	andi	fp,fp,65535
   12a4c:	1887883a 	add	r3,r3,r2
   12a50:	2709883a 	add	r4,r4,fp
   12a54:	88c03d36 	bltu	r17,r3,12b4c <__umoddi3+0x584>
   12a58:	88c06126 	beq	r17,r3,12be0 <__umoddi3+0x618>
   12a5c:	88c7c83a 	sub	r3,r17,r3
   12a60:	202d883a 	mov	r22,r4
   12a64:	95adc83a 	sub	r22,r18,r22
   12a68:	95a5803a 	cmpltu	r18,r18,r22
   12a6c:	1c87c83a 	sub	r3,r3,r18
   12a70:	1cc4983a 	sll	r2,r3,r19
   12a74:	b42cd83a 	srl	r22,r22,r16
   12a78:	1c06d83a 	srl	r3,r3,r16
   12a7c:	1584b03a 	or	r2,r2,r22
   12a80:	003f7806 	br	12864 <__umoddi3+0x29c>
   12a84:	002b883a 	mov	r21,zero
   12a88:	003ef506 	br	12660 <__umoddi3+0x98>
   12a8c:	8560983a 	sll	r16,r16,r21
   12a90:	88e6d83a 	srl	r19,r17,r3
   12a94:	90c6d83a 	srl	r3,r18,r3
   12a98:	8028d43a 	srli	r20,r16,16
   12a9c:	8d62983a 	sll	r17,r17,r21
   12aa0:	9809883a 	mov	r4,r19
   12aa4:	a00b883a 	mov	r5,r20
   12aa8:	88eeb03a 	or	r23,r17,r3
   12aac:	0009de40 	call	9de4 <__umodsi3>
   12ab0:	9809883a 	mov	r4,r19
   12ab4:	a00b883a 	mov	r5,r20
   12ab8:	1023883a 	mov	r17,r2
   12abc:	85bfffcc 	andi	r22,r16,65535
   12ac0:	0009ddc0 	call	9ddc <__udivsi3>
   12ac4:	1009883a 	mov	r4,r2
   12ac8:	b00b883a 	mov	r5,r22
   12acc:	0009dec0 	call	9dec <__mulsi3>
   12ad0:	1007883a 	mov	r3,r2
   12ad4:	8808943a 	slli	r4,r17,16
   12ad8:	b804d43a 	srli	r2,r23,16
   12adc:	9566983a 	sll	r19,r18,r21
   12ae0:	2088b03a 	or	r4,r4,r2
   12ae4:	20c0042e 	bgeu	r4,r3,12af8 <__umoddi3+0x530>
   12ae8:	2409883a 	add	r4,r4,r16
   12aec:	24000236 	bltu	r4,r16,12af8 <__umoddi3+0x530>
   12af0:	20c0012e 	bgeu	r4,r3,12af8 <__umoddi3+0x530>
   12af4:	2409883a 	add	r4,r4,r16
   12af8:	20e5c83a 	sub	r18,r4,r3
   12afc:	9009883a 	mov	r4,r18
   12b00:	a00b883a 	mov	r5,r20
   12b04:	0009de40 	call	9de4 <__umodsi3>
   12b08:	1023883a 	mov	r17,r2
   12b0c:	9009883a 	mov	r4,r18
   12b10:	a00b883a 	mov	r5,r20
   12b14:	8822943a 	slli	r17,r17,16
   12b18:	0009ddc0 	call	9ddc <__udivsi3>
   12b1c:	1009883a 	mov	r4,r2
   12b20:	b00b883a 	mov	r5,r22
   12b24:	bdffffcc 	andi	r23,r23,65535
   12b28:	0009dec0 	call	9dec <__mulsi3>
   12b2c:	8de2b03a 	or	r17,r17,r23
   12b30:	8880042e 	bgeu	r17,r2,12b44 <__umoddi3+0x57c>
   12b34:	8c23883a 	add	r17,r17,r16
   12b38:	8c000236 	bltu	r17,r16,12b44 <__umoddi3+0x57c>
   12b3c:	8880012e 	bgeu	r17,r2,12b44 <__umoddi3+0x57c>
   12b40:	8c23883a 	add	r17,r17,r16
   12b44:	88a3c83a 	sub	r17,r17,r2
   12b48:	003f1b06 	br	127b8 <__umoddi3+0x1f0>
   12b4c:	25adc83a 	sub	r22,r4,r22
   12b50:	1d07c83a 	sub	r3,r3,r20
   12b54:	2589803a 	cmpltu	r4,r4,r22
   12b58:	1907c83a 	sub	r3,r3,r4
   12b5c:	88c7c83a 	sub	r3,r17,r3
   12b60:	003fc006 	br	12a64 <__umoddi3+0x49c>
   12b64:	00c00204 	movi	r3,8
   12b68:	1827883a 	mov	r19,r3
   12b6c:	003ee906 	br	12714 <__umoddi3+0x14c>
   12b70:	00c00604 	movi	r3,24
   12b74:	1827883a 	mov	r19,r3
   12b78:	003ee606 	br	12714 <__umoddi3+0x14c>
   12b7c:	00800604 	movi	r2,24
   12b80:	1009883a 	mov	r4,r2
   12b84:	003ea806 	br	12628 <__umoddi3+0x60>
   12b88:	00800204 	movi	r2,8
   12b8c:	1007883a 	mov	r3,r2
   12b90:	003efd06 	br	12788 <__umoddi3+0x1c0>
   12b94:	00800604 	movi	r2,24
   12b98:	1007883a 	mov	r3,r2
   12b9c:	003efa06 	br	12788 <__umoddi3+0x1c0>
   12ba0:	00800204 	movi	r2,8
   12ba4:	1009883a 	mov	r4,r2
   12ba8:	003e9f06 	br	12628 <__umoddi3+0x60>
   12bac:	38bf7f2e 	bgeu	r7,r2,129ac <__umoddi3+0x3e4>
   12bb0:	ad7fff84 	addi	r21,r21,-2
   12bb4:	3d0f883a 	add	r7,r7,r20
   12bb8:	003f7d06 	br	129b0 <__umoddi3+0x3e8>
   12bbc:	193f642e 	bgeu	r3,r4,12950 <__umoddi3+0x388>
   12bc0:	e73fff84 	addi	fp,fp,-2
   12bc4:	1d07883a 	add	r3,r3,r20
   12bc8:	003f6206 	br	12954 <__umoddi3+0x38c>
   12bcc:	1c07883a 	add	r3,r3,r16
   12bd0:	003f0b06 	br	12800 <__umoddi3+0x238>
   12bd4:	9005883a 	mov	r2,r18
   12bd8:	a007883a 	mov	r3,r20
   12bdc:	003f2106 	br	12864 <__umoddi3+0x29c>
   12be0:	913fda36 	bltu	r18,r4,12b4c <__umoddi3+0x584>
   12be4:	202d883a 	mov	r22,r4
   12be8:	0007883a 	mov	r3,zero
   12bec:	003f9d06 	br	12a64 <__umoddi3+0x49c>

00012bf0 <__eqdf2>:
   12bf0:	defff104 	addi	sp,sp,-60
   12bf4:	d9000c15 	stw	r4,48(sp)
   12bf8:	d9400d15 	stw	r5,52(sp)
   12bfc:	d9000c04 	addi	r4,sp,48
   12c00:	d9400504 	addi	r5,sp,20
   12c04:	dfc00e15 	stw	ra,56(sp)
   12c08:	d9800a15 	stw	r6,40(sp)
   12c0c:	d9c00b15 	stw	r7,44(sp)
   12c10:	000a1f40 	call	a1f4 <__unpack_d>
   12c14:	d9000a04 	addi	r4,sp,40
   12c18:	d80b883a 	mov	r5,sp
   12c1c:	000a1f40 	call	a1f4 <__unpack_d>
   12c20:	d8c00517 	ldw	r3,20(sp)
   12c24:	00800044 	movi	r2,1
   12c28:	10c0052e 	bgeu	r2,r3,12c40 <__eqdf2+0x50>
   12c2c:	d8c00017 	ldw	r3,0(sp)
   12c30:	10c0032e 	bgeu	r2,r3,12c40 <__eqdf2+0x50>
   12c34:	d9000504 	addi	r4,sp,20
   12c38:	d80b883a 	mov	r5,sp
   12c3c:	000a2f80 	call	a2f8 <__fpcmp_parts_d>
   12c40:	dfc00e17 	ldw	ra,56(sp)
   12c44:	dec00f04 	addi	sp,sp,60
   12c48:	f800283a 	ret

00012c4c <__nedf2>:
   12c4c:	defff104 	addi	sp,sp,-60
   12c50:	d9000c15 	stw	r4,48(sp)
   12c54:	d9400d15 	stw	r5,52(sp)
   12c58:	d9000c04 	addi	r4,sp,48
   12c5c:	d9400504 	addi	r5,sp,20
   12c60:	dfc00e15 	stw	ra,56(sp)
   12c64:	d9800a15 	stw	r6,40(sp)
   12c68:	d9c00b15 	stw	r7,44(sp)
   12c6c:	000a1f40 	call	a1f4 <__unpack_d>
   12c70:	d9000a04 	addi	r4,sp,40
   12c74:	d80b883a 	mov	r5,sp
   12c78:	000a1f40 	call	a1f4 <__unpack_d>
   12c7c:	d8c00517 	ldw	r3,20(sp)
   12c80:	00800044 	movi	r2,1
   12c84:	10c0052e 	bgeu	r2,r3,12c9c <__nedf2+0x50>
   12c88:	d8c00017 	ldw	r3,0(sp)
   12c8c:	10c0032e 	bgeu	r2,r3,12c9c <__nedf2+0x50>
   12c90:	d9000504 	addi	r4,sp,20
   12c94:	d80b883a 	mov	r5,sp
   12c98:	000a2f80 	call	a2f8 <__fpcmp_parts_d>
   12c9c:	dfc00e17 	ldw	ra,56(sp)
   12ca0:	dec00f04 	addi	sp,sp,60
   12ca4:	f800283a 	ret

00012ca8 <__gtdf2>:
   12ca8:	defff104 	addi	sp,sp,-60
   12cac:	d9000c15 	stw	r4,48(sp)
   12cb0:	d9400d15 	stw	r5,52(sp)
   12cb4:	d9000c04 	addi	r4,sp,48
   12cb8:	d9400504 	addi	r5,sp,20
   12cbc:	dfc00e15 	stw	ra,56(sp)
   12cc0:	d9800a15 	stw	r6,40(sp)
   12cc4:	d9c00b15 	stw	r7,44(sp)
   12cc8:	000a1f40 	call	a1f4 <__unpack_d>
   12ccc:	d9000a04 	addi	r4,sp,40
   12cd0:	d80b883a 	mov	r5,sp
   12cd4:	000a1f40 	call	a1f4 <__unpack_d>
   12cd8:	d8c00517 	ldw	r3,20(sp)
   12cdc:	00800044 	movi	r2,1
   12ce0:	10c0082e 	bgeu	r2,r3,12d04 <__gtdf2+0x5c>
   12ce4:	d8c00017 	ldw	r3,0(sp)
   12ce8:	10c0062e 	bgeu	r2,r3,12d04 <__gtdf2+0x5c>
   12cec:	d9000504 	addi	r4,sp,20
   12cf0:	d80b883a 	mov	r5,sp
   12cf4:	000a2f80 	call	a2f8 <__fpcmp_parts_d>
   12cf8:	dfc00e17 	ldw	ra,56(sp)
   12cfc:	dec00f04 	addi	sp,sp,60
   12d00:	f800283a 	ret
   12d04:	00bfffc4 	movi	r2,-1
   12d08:	003ffb06 	br	12cf8 <__gtdf2+0x50>

00012d0c <__gedf2>:
   12d0c:	defff104 	addi	sp,sp,-60
   12d10:	d9000c15 	stw	r4,48(sp)
   12d14:	d9400d15 	stw	r5,52(sp)
   12d18:	d9000c04 	addi	r4,sp,48
   12d1c:	d9400504 	addi	r5,sp,20
   12d20:	dfc00e15 	stw	ra,56(sp)
   12d24:	d9800a15 	stw	r6,40(sp)
   12d28:	d9c00b15 	stw	r7,44(sp)
   12d2c:	000a1f40 	call	a1f4 <__unpack_d>
   12d30:	d9000a04 	addi	r4,sp,40
   12d34:	d80b883a 	mov	r5,sp
   12d38:	000a1f40 	call	a1f4 <__unpack_d>
   12d3c:	d8c00517 	ldw	r3,20(sp)
   12d40:	00800044 	movi	r2,1
   12d44:	10c0082e 	bgeu	r2,r3,12d68 <__gedf2+0x5c>
   12d48:	d8c00017 	ldw	r3,0(sp)
   12d4c:	10c0062e 	bgeu	r2,r3,12d68 <__gedf2+0x5c>
   12d50:	d9000504 	addi	r4,sp,20
   12d54:	d80b883a 	mov	r5,sp
   12d58:	000a2f80 	call	a2f8 <__fpcmp_parts_d>
   12d5c:	dfc00e17 	ldw	ra,56(sp)
   12d60:	dec00f04 	addi	sp,sp,60
   12d64:	f800283a 	ret
   12d68:	00bfffc4 	movi	r2,-1
   12d6c:	003ffb06 	br	12d5c <__gedf2+0x50>

00012d70 <__floatunsidf>:
   12d70:	defff904 	addi	sp,sp,-28
   12d74:	dc000515 	stw	r16,20(sp)
   12d78:	dfc00615 	stw	ra,24(sp)
   12d7c:	d8000115 	stw	zero,4(sp)
   12d80:	2021883a 	mov	r16,r4
   12d84:	20001726 	beq	r4,zero,12de4 <__floatunsidf+0x74>
   12d88:	008000c4 	movi	r2,3
   12d8c:	d8800015 	stw	r2,0(sp)
   12d90:	00800f04 	movi	r2,60
   12d94:	d8800215 	stw	r2,8(sp)
   12d98:	0009f240 	call	9f24 <__clzsi2>
   12d9c:	10c00744 	addi	r3,r2,29
   12da0:	18001816 	blt	r3,zero,12e04 <__floatunsidf+0x94>
   12da4:	18002d26 	beq	r3,zero,12e5c <__floatunsidf+0xec>
   12da8:	113fff44 	addi	r4,r2,-3
   12dac:	20002e16 	blt	r4,zero,12e68 <__floatunsidf+0xf8>
   12db0:	8108983a 	sll	r4,r16,r4
   12db4:	0021883a 	mov	r16,zero
   12db8:	014007c4 	movi	r5,31
   12dbc:	2885c83a 	sub	r2,r5,r2
   12dc0:	dc000315 	stw	r16,12(sp)
   12dc4:	d9000415 	stw	r4,16(sp)
   12dc8:	d8800215 	stw	r2,8(sp)
   12dcc:	d809883a 	mov	r4,sp
   12dd0:	0009fd00 	call	9fd0 <__pack_d>
   12dd4:	dfc00617 	ldw	ra,24(sp)
   12dd8:	dc000517 	ldw	r16,20(sp)
   12ddc:	dec00704 	addi	sp,sp,28
   12de0:	f800283a 	ret
   12de4:	00800084 	movi	r2,2
   12de8:	d809883a 	mov	r4,sp
   12dec:	d8800015 	stw	r2,0(sp)
   12df0:	0009fd00 	call	9fd0 <__pack_d>
   12df4:	dfc00617 	ldw	ra,24(sp)
   12df8:	dc000517 	ldw	r16,20(sp)
   12dfc:	dec00704 	addi	sp,sp,28
   12e00:	f800283a 	ret
   12e04:	00c7c83a 	sub	r3,zero,r3
   12e08:	193ff804 	addi	r4,r3,-32
   12e0c:	20001c16 	blt	r4,zero,12e80 <__floatunsidf+0x110>
   12e10:	000b883a 	mov	r5,zero
   12e14:	2009d7fa 	srai	r4,r4,31
   12e18:	80c6d83a 	srl	r3,r16,r3
   12e1c:	297fffc4 	addi	r5,r5,-1
   12e20:	2c20703a 	and	r16,r5,r16
   12e24:	8020c03a 	cmpne	r16,r16,zero
   12e28:	1906703a 	and	r3,r3,r4
   12e2c:	010007c4 	movi	r4,31
   12e30:	80c6b03a 	or	r3,r16,r3
   12e34:	2085c83a 	sub	r2,r4,r2
   12e38:	d809883a 	mov	r4,sp
   12e3c:	d8c00315 	stw	r3,12(sp)
   12e40:	d8000415 	stw	zero,16(sp)
   12e44:	d8800215 	stw	r2,8(sp)
   12e48:	0009fd00 	call	9fd0 <__pack_d>
   12e4c:	dfc00617 	ldw	ra,24(sp)
   12e50:	dc000517 	ldw	r16,20(sp)
   12e54:	dec00704 	addi	sp,sp,28
   12e58:	f800283a 	ret
   12e5c:	dc000315 	stw	r16,12(sp)
   12e60:	d8000415 	stw	zero,16(sp)
   12e64:	003fd906 	br	12dcc <__floatunsidf+0x5c>
   12e68:	800ad07a 	srli	r5,r16,1
   12e6c:	010007c4 	movi	r4,31
   12e70:	20c9c83a 	sub	r4,r4,r3
   12e74:	2908d83a 	srl	r4,r5,r4
   12e78:	80e0983a 	sll	r16,r16,r3
   12e7c:	003fce06 	br	12db8 <__floatunsidf+0x48>
   12e80:	01400044 	movi	r5,1
   12e84:	28ca983a 	sll	r5,r5,r3
   12e88:	003fe206 	br	12e14 <__floatunsidf+0xa4>

00012e8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12e8c:	defffe04 	addi	sp,sp,-8
   12e90:	dfc00115 	stw	ra,4(sp)
   12e94:	df000015 	stw	fp,0(sp)
   12e98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12e9c:	008001f4 	movhi	r2,7
   12ea0:	109f1004 	addi	r2,r2,31808
   12ea4:	10800017 	ldw	r2,0(r2)
   12ea8:	10000526 	beq	r2,zero,12ec0 <alt_get_errno+0x34>
   12eac:	008001f4 	movhi	r2,7
   12eb0:	109f1004 	addi	r2,r2,31808
   12eb4:	10800017 	ldw	r2,0(r2)
   12eb8:	103ee83a 	callr	r2
   12ebc:	00000206 	br	12ec8 <alt_get_errno+0x3c>
   12ec0:	00800234 	movhi	r2,8
   12ec4:	10aca104 	addi	r2,r2,-19836
}
   12ec8:	e037883a 	mov	sp,fp
   12ecc:	dfc00117 	ldw	ra,4(sp)
   12ed0:	df000017 	ldw	fp,0(sp)
   12ed4:	dec00204 	addi	sp,sp,8
   12ed8:	f800283a 	ret

00012edc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12edc:	defffb04 	addi	sp,sp,-20
   12ee0:	dfc00415 	stw	ra,16(sp)
   12ee4:	df000315 	stw	fp,12(sp)
   12ee8:	df000304 	addi	fp,sp,12
   12eec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12ef0:	e0bfff17 	ldw	r2,-4(fp)
   12ef4:	10000716 	blt	r2,zero,12f14 <close+0x38>
   12ef8:	e13fff17 	ldw	r4,-4(fp)
   12efc:	01400304 	movi	r5,12
   12f00:	0009dec0 	call	9dec <__mulsi3>
   12f04:	00c001f4 	movhi	r3,7
   12f08:	18da8b04 	addi	r3,r3,27180
   12f0c:	10c5883a 	add	r2,r2,r3
   12f10:	00000106 	br	12f18 <close+0x3c>
   12f14:	0005883a 	mov	r2,zero
   12f18:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12f1c:	e0bffd17 	ldw	r2,-12(fp)
   12f20:	10001826 	beq	r2,zero,12f84 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12f24:	e0bffd17 	ldw	r2,-12(fp)
   12f28:	10800017 	ldw	r2,0(r2)
   12f2c:	10800417 	ldw	r2,16(r2)
   12f30:	10000626 	beq	r2,zero,12f4c <close+0x70>
   12f34:	e0bffd17 	ldw	r2,-12(fp)
   12f38:	10800017 	ldw	r2,0(r2)
   12f3c:	10800417 	ldw	r2,16(r2)
   12f40:	e13ffd17 	ldw	r4,-12(fp)
   12f44:	103ee83a 	callr	r2
   12f48:	00000106 	br	12f50 <close+0x74>
   12f4c:	0005883a 	mov	r2,zero
   12f50:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12f54:	e13fff17 	ldw	r4,-4(fp)
   12f58:	00138e00 	call	138e0 <alt_release_fd>
    if (rval < 0)
   12f5c:	e0bffe17 	ldw	r2,-8(fp)
   12f60:	1000060e 	bge	r2,zero,12f7c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   12f64:	0012e8c0 	call	12e8c <alt_get_errno>
   12f68:	e0fffe17 	ldw	r3,-8(fp)
   12f6c:	00c7c83a 	sub	r3,zero,r3
   12f70:	10c00015 	stw	r3,0(r2)
      return -1;
   12f74:	00bfffc4 	movi	r2,-1
   12f78:	00000606 	br	12f94 <close+0xb8>
    }
    return 0;
   12f7c:	0005883a 	mov	r2,zero
   12f80:	00000406 	br	12f94 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12f84:	0012e8c0 	call	12e8c <alt_get_errno>
   12f88:	00c01444 	movi	r3,81
   12f8c:	10c00015 	stw	r3,0(r2)
    return -1;
   12f90:	00bfffc4 	movi	r2,-1
  }
}
   12f94:	e037883a 	mov	sp,fp
   12f98:	dfc00117 	ldw	ra,4(sp)
   12f9c:	df000017 	ldw	fp,0(sp)
   12fa0:	dec00204 	addi	sp,sp,8
   12fa4:	f800283a 	ret

00012fa8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12fa8:	defffe04 	addi	sp,sp,-8
   12fac:	df000115 	stw	fp,4(sp)
   12fb0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   12fb4:	e03fff15 	stw	zero,-4(fp)
   12fb8:	00000506 	br	12fd0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   12fbc:	e0bfff17 	ldw	r2,-4(fp)
   12fc0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   12fc4:	e0bfff17 	ldw	r2,-4(fp)
   12fc8:	10800804 	addi	r2,r2,32
   12fcc:	e0bfff15 	stw	r2,-4(fp)
   12fd0:	e0bfff17 	ldw	r2,-4(fp)
   12fd4:	10820030 	cmpltui	r2,r2,2048
   12fd8:	103ff81e 	bne	r2,zero,12fbc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12fdc:	e037883a 	mov	sp,fp
   12fe0:	df000017 	ldw	fp,0(sp)
   12fe4:	dec00104 	addi	sp,sp,4
   12fe8:	f800283a 	ret

00012fec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12fec:	defffc04 	addi	sp,sp,-16
   12ff0:	df000315 	stw	fp,12(sp)
   12ff4:	df000304 	addi	fp,sp,12
   12ff8:	e13ffd15 	stw	r4,-12(fp)
   12ffc:	e17ffe15 	stw	r5,-8(fp)
   13000:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13004:	e0bfff17 	ldw	r2,-4(fp)
}
   13008:	e037883a 	mov	sp,fp
   1300c:	df000017 	ldw	fp,0(sp)
   13010:	dec00104 	addi	sp,sp,4
   13014:	f800283a 	ret

00013018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13018:	defffe04 	addi	sp,sp,-8
   1301c:	dfc00115 	stw	ra,4(sp)
   13020:	df000015 	stw	fp,0(sp)
   13024:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13028:	008001f4 	movhi	r2,7
   1302c:	109f1004 	addi	r2,r2,31808
   13030:	10800017 	ldw	r2,0(r2)
   13034:	10000526 	beq	r2,zero,1304c <alt_get_errno+0x34>
   13038:	008001f4 	movhi	r2,7
   1303c:	109f1004 	addi	r2,r2,31808
   13040:	10800017 	ldw	r2,0(r2)
   13044:	103ee83a 	callr	r2
   13048:	00000206 	br	13054 <alt_get_errno+0x3c>
   1304c:	00800234 	movhi	r2,8
   13050:	10aca104 	addi	r2,r2,-19836
}
   13054:	e037883a 	mov	sp,fp
   13058:	dfc00117 	ldw	ra,4(sp)
   1305c:	df000017 	ldw	fp,0(sp)
   13060:	dec00204 	addi	sp,sp,8
   13064:	f800283a 	ret

00013068 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13068:	defffb04 	addi	sp,sp,-20
   1306c:	dfc00415 	stw	ra,16(sp)
   13070:	df000315 	stw	fp,12(sp)
   13074:	df000304 	addi	fp,sp,12
   13078:	e13ffe15 	stw	r4,-8(fp)
   1307c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13080:	e0bffe17 	ldw	r2,-8(fp)
   13084:	10000716 	blt	r2,zero,130a4 <fstat+0x3c>
   13088:	e13ffe17 	ldw	r4,-8(fp)
   1308c:	01400304 	movi	r5,12
   13090:	0009dec0 	call	9dec <__mulsi3>
   13094:	00c001f4 	movhi	r3,7
   13098:	18da8b04 	addi	r3,r3,27180
   1309c:	10c5883a 	add	r2,r2,r3
   130a0:	00000106 	br	130a8 <fstat+0x40>
   130a4:	0005883a 	mov	r2,zero
   130a8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   130ac:	e0bffd17 	ldw	r2,-12(fp)
   130b0:	10001026 	beq	r2,zero,130f4 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   130b4:	e0bffd17 	ldw	r2,-12(fp)
   130b8:	10800017 	ldw	r2,0(r2)
   130bc:	10800817 	ldw	r2,32(r2)
   130c0:	10000726 	beq	r2,zero,130e0 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   130c4:	e0bffd17 	ldw	r2,-12(fp)
   130c8:	10800017 	ldw	r2,0(r2)
   130cc:	10800817 	ldw	r2,32(r2)
   130d0:	e13ffd17 	ldw	r4,-12(fp)
   130d4:	e17fff17 	ldw	r5,-4(fp)
   130d8:	103ee83a 	callr	r2
   130dc:	00000906 	br	13104 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   130e0:	e0bfff17 	ldw	r2,-4(fp)
   130e4:	00c80004 	movi	r3,8192
   130e8:	10c00115 	stw	r3,4(r2)
      return 0;
   130ec:	0005883a 	mov	r2,zero
   130f0:	00000406 	br	13104 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   130f4:	00130180 	call	13018 <alt_get_errno>
   130f8:	00c01444 	movi	r3,81
   130fc:	10c00015 	stw	r3,0(r2)
    return -1;
   13100:	00bfffc4 	movi	r2,-1
  }
}
   13104:	e037883a 	mov	sp,fp
   13108:	dfc00117 	ldw	ra,4(sp)
   1310c:	df000017 	ldw	fp,0(sp)
   13110:	dec00204 	addi	sp,sp,8
   13114:	f800283a 	ret

00013118 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13118:	defff904 	addi	sp,sp,-28
   1311c:	dfc00615 	stw	ra,24(sp)
   13120:	df000515 	stw	fp,20(sp)
   13124:	df000504 	addi	fp,sp,20
   13128:	e13ffc15 	stw	r4,-16(fp)
   1312c:	e17ffd15 	stw	r5,-12(fp)
   13130:	e1bffe15 	stw	r6,-8(fp)
   13134:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13138:	e0800217 	ldw	r2,8(fp)
   1313c:	d8800015 	stw	r2,0(sp)
   13140:	e13ffc17 	ldw	r4,-16(fp)
   13144:	e17ffd17 	ldw	r5,-12(fp)
   13148:	e1bffe17 	ldw	r6,-8(fp)
   1314c:	e1ffff17 	ldw	r7,-4(fp)
   13150:	00132f00 	call	132f0 <alt_iic_isr_register>
}  
   13154:	e037883a 	mov	sp,fp
   13158:	dfc00117 	ldw	ra,4(sp)
   1315c:	df000017 	ldw	fp,0(sp)
   13160:	dec00204 	addi	sp,sp,8
   13164:	f800283a 	ret

00013168 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   13168:	defff904 	addi	sp,sp,-28
   1316c:	df000615 	stw	fp,24(sp)
   13170:	df000604 	addi	fp,sp,24
   13174:	e13ffe15 	stw	r4,-8(fp)
   13178:	e17fff15 	stw	r5,-4(fp)
   1317c:	e0bfff17 	ldw	r2,-4(fp)
   13180:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13184:	0005303a 	rdctl	r2,status
   13188:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1318c:	e0fffb17 	ldw	r3,-20(fp)
   13190:	00bfff84 	movi	r2,-2
   13194:	1884703a 	and	r2,r3,r2
   13198:	1001703a 	wrctl	status,r2
  
  return context;
   1319c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   131a0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   131a4:	e0bffa17 	ldw	r2,-24(fp)
   131a8:	00c00044 	movi	r3,1
   131ac:	1884983a 	sll	r2,r3,r2
   131b0:	1007883a 	mov	r3,r2
   131b4:	00800234 	movhi	r2,8
   131b8:	10aca504 	addi	r2,r2,-19820
   131bc:	10800017 	ldw	r2,0(r2)
   131c0:	1886b03a 	or	r3,r3,r2
   131c4:	00800234 	movhi	r2,8
   131c8:	10aca504 	addi	r2,r2,-19820
   131cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   131d0:	00800234 	movhi	r2,8
   131d4:	10aca504 	addi	r2,r2,-19820
   131d8:	10800017 	ldw	r2,0(r2)
   131dc:	100170fa 	wrctl	ienable,r2
   131e0:	e0bffc17 	ldw	r2,-16(fp)
   131e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131e8:	e0bffd17 	ldw	r2,-12(fp)
   131ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   131f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   131f4:	e037883a 	mov	sp,fp
   131f8:	df000017 	ldw	fp,0(sp)
   131fc:	dec00104 	addi	sp,sp,4
   13200:	f800283a 	ret

00013204 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13204:	defff904 	addi	sp,sp,-28
   13208:	df000615 	stw	fp,24(sp)
   1320c:	df000604 	addi	fp,sp,24
   13210:	e13ffe15 	stw	r4,-8(fp)
   13214:	e17fff15 	stw	r5,-4(fp)
   13218:	e0bfff17 	ldw	r2,-4(fp)
   1321c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13220:	0005303a 	rdctl	r2,status
   13224:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13228:	e0fffb17 	ldw	r3,-20(fp)
   1322c:	00bfff84 	movi	r2,-2
   13230:	1884703a 	and	r2,r3,r2
   13234:	1001703a 	wrctl	status,r2
  
  return context;
   13238:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1323c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   13240:	e0bffa17 	ldw	r2,-24(fp)
   13244:	00c00044 	movi	r3,1
   13248:	1884983a 	sll	r2,r3,r2
   1324c:	0084303a 	nor	r2,zero,r2
   13250:	1007883a 	mov	r3,r2
   13254:	00800234 	movhi	r2,8
   13258:	10aca504 	addi	r2,r2,-19820
   1325c:	10800017 	ldw	r2,0(r2)
   13260:	1886703a 	and	r3,r3,r2
   13264:	00800234 	movhi	r2,8
   13268:	10aca504 	addi	r2,r2,-19820
   1326c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13270:	00800234 	movhi	r2,8
   13274:	10aca504 	addi	r2,r2,-19820
   13278:	10800017 	ldw	r2,0(r2)
   1327c:	100170fa 	wrctl	ienable,r2
   13280:	e0bffc17 	ldw	r2,-16(fp)
   13284:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13288:	e0bffd17 	ldw	r2,-12(fp)
   1328c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13290:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   13294:	e037883a 	mov	sp,fp
   13298:	df000017 	ldw	fp,0(sp)
   1329c:	dec00104 	addi	sp,sp,4
   132a0:	f800283a 	ret

000132a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   132a4:	defffc04 	addi	sp,sp,-16
   132a8:	df000315 	stw	fp,12(sp)
   132ac:	df000304 	addi	fp,sp,12
   132b0:	e13ffe15 	stw	r4,-8(fp)
   132b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   132b8:	000530fa 	rdctl	r2,ienable
   132bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   132c0:	e0bfff17 	ldw	r2,-4(fp)
   132c4:	00c00044 	movi	r3,1
   132c8:	1884983a 	sll	r2,r3,r2
   132cc:	1007883a 	mov	r3,r2
   132d0:	e0bffd17 	ldw	r2,-12(fp)
   132d4:	1884703a 	and	r2,r3,r2
   132d8:	1004c03a 	cmpne	r2,r2,zero
   132dc:	10803fcc 	andi	r2,r2,255
}
   132e0:	e037883a 	mov	sp,fp
   132e4:	df000017 	ldw	fp,0(sp)
   132e8:	dec00104 	addi	sp,sp,4
   132ec:	f800283a 	ret

000132f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   132f0:	defff504 	addi	sp,sp,-44
   132f4:	dfc00a15 	stw	ra,40(sp)
   132f8:	df000915 	stw	fp,36(sp)
   132fc:	df000904 	addi	fp,sp,36
   13300:	e13ffc15 	stw	r4,-16(fp)
   13304:	e17ffd15 	stw	r5,-12(fp)
   13308:	e1bffe15 	stw	r6,-8(fp)
   1330c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   13310:	00bffa84 	movi	r2,-22
   13314:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13318:	e0bffd17 	ldw	r2,-12(fp)
   1331c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13320:	e0bff817 	ldw	r2,-32(fp)
   13324:	10800808 	cmpgei	r2,r2,32
   13328:	1000271e 	bne	r2,zero,133c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1332c:	0005303a 	rdctl	r2,status
   13330:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13334:	e0fffa17 	ldw	r3,-24(fp)
   13338:	00bfff84 	movi	r2,-2
   1333c:	1884703a 	and	r2,r3,r2
   13340:	1001703a 	wrctl	status,r2
  
  return context;
   13344:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   13348:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   1334c:	00c00234 	movhi	r3,8
   13350:	18ecb504 	addi	r3,r3,-19756
   13354:	e0bff817 	ldw	r2,-32(fp)
   13358:	100490fa 	slli	r2,r2,3
   1335c:	1885883a 	add	r2,r3,r2
   13360:	e0fffe17 	ldw	r3,-8(fp)
   13364:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   13368:	00c00234 	movhi	r3,8
   1336c:	18ecb504 	addi	r3,r3,-19756
   13370:	e0bff817 	ldw	r2,-32(fp)
   13374:	100490fa 	slli	r2,r2,3
   13378:	1885883a 	add	r2,r3,r2
   1337c:	10800104 	addi	r2,r2,4
   13380:	e0ffff17 	ldw	r3,-4(fp)
   13384:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   13388:	e0bffe17 	ldw	r2,-8(fp)
   1338c:	10000526 	beq	r2,zero,133a4 <alt_iic_isr_register+0xb4>
   13390:	e0bff817 	ldw	r2,-32(fp)
   13394:	e13ffc17 	ldw	r4,-16(fp)
   13398:	100b883a 	mov	r5,r2
   1339c:	00131680 	call	13168 <alt_ic_irq_enable>
   133a0:	00000406 	br	133b4 <alt_iic_isr_register+0xc4>
   133a4:	e0bff817 	ldw	r2,-32(fp)
   133a8:	e13ffc17 	ldw	r4,-16(fp)
   133ac:	100b883a 	mov	r5,r2
   133b0:	00132040 	call	13204 <alt_ic_irq_disable>
   133b4:	e0bff715 	stw	r2,-36(fp)
   133b8:	e0bff917 	ldw	r2,-28(fp)
   133bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133c0:	e0bffb17 	ldw	r2,-20(fp)
   133c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   133c8:	e0bff717 	ldw	r2,-36(fp)
}
   133cc:	e037883a 	mov	sp,fp
   133d0:	dfc00117 	ldw	ra,4(sp)
   133d4:	df000017 	ldw	fp,0(sp)
   133d8:	dec00204 	addi	sp,sp,8
   133dc:	f800283a 	ret

000133e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   133e0:	defffe04 	addi	sp,sp,-8
   133e4:	dfc00115 	stw	ra,4(sp)
   133e8:	df000015 	stw	fp,0(sp)
   133ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   133f0:	008001f4 	movhi	r2,7
   133f4:	109f1004 	addi	r2,r2,31808
   133f8:	10800017 	ldw	r2,0(r2)
   133fc:	10000526 	beq	r2,zero,13414 <alt_get_errno+0x34>
   13400:	008001f4 	movhi	r2,7
   13404:	109f1004 	addi	r2,r2,31808
   13408:	10800017 	ldw	r2,0(r2)
   1340c:	103ee83a 	callr	r2
   13410:	00000206 	br	1341c <alt_get_errno+0x3c>
   13414:	00800234 	movhi	r2,8
   13418:	10aca104 	addi	r2,r2,-19836
}
   1341c:	e037883a 	mov	sp,fp
   13420:	dfc00117 	ldw	ra,4(sp)
   13424:	df000017 	ldw	fp,0(sp)
   13428:	dec00204 	addi	sp,sp,8
   1342c:	f800283a 	ret

00013430 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13430:	deffed04 	addi	sp,sp,-76
   13434:	dfc01215 	stw	ra,72(sp)
   13438:	df001115 	stw	fp,68(sp)
   1343c:	df001104 	addi	fp,sp,68
   13440:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13444:	e0bfff17 	ldw	r2,-4(fp)
   13448:	10000716 	blt	r2,zero,13468 <isatty+0x38>
   1344c:	e13fff17 	ldw	r4,-4(fp)
   13450:	01400304 	movi	r5,12
   13454:	0009dec0 	call	9dec <__mulsi3>
   13458:	00c001f4 	movhi	r3,7
   1345c:	18da8b04 	addi	r3,r3,27180
   13460:	10c5883a 	add	r2,r2,r3
   13464:	00000106 	br	1346c <isatty+0x3c>
   13468:	0005883a 	mov	r2,zero
   1346c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13470:	e0bfef17 	ldw	r2,-68(fp)
   13474:	10000e26 	beq	r2,zero,134b0 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13478:	e0bfef17 	ldw	r2,-68(fp)
   1347c:	10800017 	ldw	r2,0(r2)
   13480:	10800817 	ldw	r2,32(r2)
   13484:	1000021e 	bne	r2,zero,13490 <isatty+0x60>
    {
      return 1;
   13488:	00800044 	movi	r2,1
   1348c:	00000c06 	br	134c0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13490:	e0bff004 	addi	r2,fp,-64
   13494:	e13fff17 	ldw	r4,-4(fp)
   13498:	100b883a 	mov	r5,r2
   1349c:	00130680 	call	13068 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   134a0:	e0bff117 	ldw	r2,-60(fp)
   134a4:	10880020 	cmpeqi	r2,r2,8192
   134a8:	10803fcc 	andi	r2,r2,255
   134ac:	00000406 	br	134c0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   134b0:	00133e00 	call	133e0 <alt_get_errno>
   134b4:	00c01444 	movi	r3,81
   134b8:	10c00015 	stw	r3,0(r2)
    return 0;
   134bc:	0005883a 	mov	r2,zero
  }
}
   134c0:	e037883a 	mov	sp,fp
   134c4:	dfc00117 	ldw	ra,4(sp)
   134c8:	df000017 	ldw	fp,0(sp)
   134cc:	dec00204 	addi	sp,sp,8
   134d0:	f800283a 	ret

000134d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   134d4:	defffc04 	addi	sp,sp,-16
   134d8:	df000315 	stw	fp,12(sp)
   134dc:	df000304 	addi	fp,sp,12
   134e0:	e13ffd15 	stw	r4,-12(fp)
   134e4:	e17ffe15 	stw	r5,-8(fp)
   134e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   134ec:	e0fffe17 	ldw	r3,-8(fp)
   134f0:	e0bffd17 	ldw	r2,-12(fp)
   134f4:	18800e26 	beq	r3,r2,13530 <alt_load_section+0x5c>
  {
    while( to != end )
   134f8:	00000a06 	br	13524 <alt_load_section+0x50>
    {
      *to++ = *from++;
   134fc:	e0bffd17 	ldw	r2,-12(fp)
   13500:	10c00017 	ldw	r3,0(r2)
   13504:	e0bffe17 	ldw	r2,-8(fp)
   13508:	10c00015 	stw	r3,0(r2)
   1350c:	e0bffe17 	ldw	r2,-8(fp)
   13510:	10800104 	addi	r2,r2,4
   13514:	e0bffe15 	stw	r2,-8(fp)
   13518:	e0bffd17 	ldw	r2,-12(fp)
   1351c:	10800104 	addi	r2,r2,4
   13520:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13524:	e0fffe17 	ldw	r3,-8(fp)
   13528:	e0bfff17 	ldw	r2,-4(fp)
   1352c:	18bff31e 	bne	r3,r2,134fc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   13530:	e037883a 	mov	sp,fp
   13534:	df000017 	ldw	fp,0(sp)
   13538:	dec00104 	addi	sp,sp,4
   1353c:	f800283a 	ret

00013540 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13540:	defffe04 	addi	sp,sp,-8
   13544:	dfc00115 	stw	ra,4(sp)
   13548:	df000015 	stw	fp,0(sp)
   1354c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13550:	010001f4 	movhi	r4,7
   13554:	211f1504 	addi	r4,r4,31828
   13558:	014001f4 	movhi	r5,7
   1355c:	29518d04 	addi	r5,r5,17972
   13560:	018001f4 	movhi	r6,7
   13564:	319f1504 	addi	r6,r6,31828
   13568:	00134d40 	call	134d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1356c:	01000034 	movhi	r4,0
   13570:	21000804 	addi	r4,r4,32
   13574:	01400034 	movhi	r5,0
   13578:	29400804 	addi	r5,r5,32
   1357c:	01800034 	movhi	r6,0
   13580:	31806e04 	addi	r6,r6,440
   13584:	00134d40 	call	134d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13588:	01000074 	movhi	r4,1
   1358c:	21162604 	addi	r4,r4,22680
   13590:	01400074 	movhi	r5,1
   13594:	29562604 	addi	r5,r5,22680
   13598:	018001f4 	movhi	r6,7
   1359c:	31918d04 	addi	r6,r6,17972
   135a0:	00134d40 	call	134d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   135a4:	0012fa80 	call	12fa8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   135a8:	0014d800 	call	14d80 <alt_icache_flush_all>
}
   135ac:	e037883a 	mov	sp,fp
   135b0:	dfc00117 	ldw	ra,4(sp)
   135b4:	df000017 	ldw	fp,0(sp)
   135b8:	dec00204 	addi	sp,sp,8
   135bc:	f800283a 	ret

000135c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   135c0:	defffe04 	addi	sp,sp,-8
   135c4:	dfc00115 	stw	ra,4(sp)
   135c8:	df000015 	stw	fp,0(sp)
   135cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   135d0:	008001f4 	movhi	r2,7
   135d4:	109f1004 	addi	r2,r2,31808
   135d8:	10800017 	ldw	r2,0(r2)
   135dc:	10000526 	beq	r2,zero,135f4 <alt_get_errno+0x34>
   135e0:	008001f4 	movhi	r2,7
   135e4:	109f1004 	addi	r2,r2,31808
   135e8:	10800017 	ldw	r2,0(r2)
   135ec:	103ee83a 	callr	r2
   135f0:	00000206 	br	135fc <alt_get_errno+0x3c>
   135f4:	00800234 	movhi	r2,8
   135f8:	10aca104 	addi	r2,r2,-19836
}
   135fc:	e037883a 	mov	sp,fp
   13600:	dfc00117 	ldw	ra,4(sp)
   13604:	df000017 	ldw	fp,0(sp)
   13608:	dec00204 	addi	sp,sp,8
   1360c:	f800283a 	ret

00013610 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13610:	defff904 	addi	sp,sp,-28
   13614:	dfc00615 	stw	ra,24(sp)
   13618:	df000515 	stw	fp,20(sp)
   1361c:	df000504 	addi	fp,sp,20
   13620:	e13ffd15 	stw	r4,-12(fp)
   13624:	e17ffe15 	stw	r5,-8(fp)
   13628:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1362c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13630:	e0bffd17 	ldw	r2,-12(fp)
   13634:	10000716 	blt	r2,zero,13654 <lseek+0x44>
   13638:	e13ffd17 	ldw	r4,-12(fp)
   1363c:	01400304 	movi	r5,12
   13640:	0009dec0 	call	9dec <__mulsi3>
   13644:	00c001f4 	movhi	r3,7
   13648:	18da8b04 	addi	r3,r3,27180
   1364c:	10c5883a 	add	r2,r2,r3
   13650:	00000106 	br	13658 <lseek+0x48>
   13654:	0005883a 	mov	r2,zero
   13658:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1365c:	e0bffc17 	ldw	r2,-16(fp)
   13660:	10001026 	beq	r2,zero,136a4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13664:	e0bffc17 	ldw	r2,-16(fp)
   13668:	10800017 	ldw	r2,0(r2)
   1366c:	10800717 	ldw	r2,28(r2)
   13670:	10000926 	beq	r2,zero,13698 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13674:	e0bffc17 	ldw	r2,-16(fp)
   13678:	10800017 	ldw	r2,0(r2)
   1367c:	10800717 	ldw	r2,28(r2)
   13680:	e13ffc17 	ldw	r4,-16(fp)
   13684:	e17ffe17 	ldw	r5,-8(fp)
   13688:	e1bfff17 	ldw	r6,-4(fp)
   1368c:	103ee83a 	callr	r2
   13690:	e0bffb15 	stw	r2,-20(fp)
   13694:	00000506 	br	136ac <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13698:	00bfde84 	movi	r2,-134
   1369c:	e0bffb15 	stw	r2,-20(fp)
   136a0:	00000206 	br	136ac <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   136a4:	00bfebc4 	movi	r2,-81
   136a8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   136ac:	e0bffb17 	ldw	r2,-20(fp)
   136b0:	1000060e 	bge	r2,zero,136cc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   136b4:	00135c00 	call	135c0 <alt_get_errno>
   136b8:	e0fffb17 	ldw	r3,-20(fp)
   136bc:	00c7c83a 	sub	r3,zero,r3
   136c0:	10c00015 	stw	r3,0(r2)
    rc = -1;
   136c4:	00bfffc4 	movi	r2,-1
   136c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   136cc:	e0bffb17 	ldw	r2,-20(fp)
}
   136d0:	e037883a 	mov	sp,fp
   136d4:	dfc00117 	ldw	ra,4(sp)
   136d8:	df000017 	ldw	fp,0(sp)
   136dc:	dec00204 	addi	sp,sp,8
   136e0:	f800283a 	ret

000136e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   136e4:	defffd04 	addi	sp,sp,-12
   136e8:	dfc00215 	stw	ra,8(sp)
   136ec:	df000115 	stw	fp,4(sp)
   136f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   136f4:	0009883a 	mov	r4,zero
   136f8:	0013d540 	call	13d54 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   136fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13700:	0013d880 	call	13d88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13704:	010001f4 	movhi	r4,7
   13708:	21118504 	addi	r4,r4,17940
   1370c:	014001f4 	movhi	r5,7
   13710:	29518504 	addi	r5,r5,17940
   13714:	018001f4 	movhi	r6,7
   13718:	31918504 	addi	r6,r6,17940
   1371c:	0014e900 	call	14e90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13720:	0014cc80 	call	14cc8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13724:	01000074 	movhi	r4,1
   13728:	21134904 	addi	r4,r4,19748
   1372c:	00154c40 	call	154c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13730:	d12da317 	ldw	r4,-18804(gp)
   13734:	d0eda417 	ldw	r3,-18800(gp)
   13738:	d0ada517 	ldw	r2,-18796(gp)
   1373c:	180b883a 	mov	r5,r3
   13740:	100d883a 	mov	r6,r2
   13744:	000606c0 	call	606c <main>
   13748:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1374c:	01000044 	movi	r4,1
   13750:	0012edc0 	call	12edc <close>
  exit (result);
   13754:	e13fff17 	ldw	r4,-4(fp)
   13758:	00154d80 	call	154d8 <exit>

0001375c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1375c:	defffe04 	addi	sp,sp,-8
   13760:	df000115 	stw	fp,4(sp)
   13764:	df000104 	addi	fp,sp,4
   13768:	e13fff15 	stw	r4,-4(fp)
}
   1376c:	e037883a 	mov	sp,fp
   13770:	df000017 	ldw	fp,0(sp)
   13774:	dec00104 	addi	sp,sp,4
   13778:	f800283a 	ret

0001377c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1377c:	defffe04 	addi	sp,sp,-8
   13780:	df000115 	stw	fp,4(sp)
   13784:	df000104 	addi	fp,sp,4
   13788:	e13fff15 	stw	r4,-4(fp)
}
   1378c:	e037883a 	mov	sp,fp
   13790:	df000017 	ldw	fp,0(sp)
   13794:	dec00104 	addi	sp,sp,4
   13798:	f800283a 	ret

0001379c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1379c:	defffe04 	addi	sp,sp,-8
   137a0:	dfc00115 	stw	ra,4(sp)
   137a4:	df000015 	stw	fp,0(sp)
   137a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   137ac:	008001f4 	movhi	r2,7
   137b0:	109f1004 	addi	r2,r2,31808
   137b4:	10800017 	ldw	r2,0(r2)
   137b8:	10000526 	beq	r2,zero,137d0 <alt_get_errno+0x34>
   137bc:	008001f4 	movhi	r2,7
   137c0:	109f1004 	addi	r2,r2,31808
   137c4:	10800017 	ldw	r2,0(r2)
   137c8:	103ee83a 	callr	r2
   137cc:	00000206 	br	137d8 <alt_get_errno+0x3c>
   137d0:	00800234 	movhi	r2,8
   137d4:	10aca104 	addi	r2,r2,-19836
}
   137d8:	e037883a 	mov	sp,fp
   137dc:	dfc00117 	ldw	ra,4(sp)
   137e0:	df000017 	ldw	fp,0(sp)
   137e4:	dec00204 	addi	sp,sp,8
   137e8:	f800283a 	ret

000137ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   137ec:	defff904 	addi	sp,sp,-28
   137f0:	dfc00615 	stw	ra,24(sp)
   137f4:	df000515 	stw	fp,20(sp)
   137f8:	df000504 	addi	fp,sp,20
   137fc:	e13ffd15 	stw	r4,-12(fp)
   13800:	e17ffe15 	stw	r5,-8(fp)
   13804:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13808:	e0bffd17 	ldw	r2,-12(fp)
   1380c:	10000716 	blt	r2,zero,1382c <read+0x40>
   13810:	e13ffd17 	ldw	r4,-12(fp)
   13814:	01400304 	movi	r5,12
   13818:	0009dec0 	call	9dec <__mulsi3>
   1381c:	00c001f4 	movhi	r3,7
   13820:	18da8b04 	addi	r3,r3,27180
   13824:	10c5883a 	add	r2,r2,r3
   13828:	00000106 	br	13830 <read+0x44>
   1382c:	0005883a 	mov	r2,zero
   13830:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13834:	e0bffb17 	ldw	r2,-20(fp)
   13838:	10002026 	beq	r2,zero,138bc <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1383c:	e0bffb17 	ldw	r2,-20(fp)
   13840:	10800217 	ldw	r2,8(r2)
   13844:	108000cc 	andi	r2,r2,3
   13848:	10800060 	cmpeqi	r2,r2,1
   1384c:	1000171e 	bne	r2,zero,138ac <read+0xc0>
        (fd->dev->read))
   13850:	e0bffb17 	ldw	r2,-20(fp)
   13854:	10800017 	ldw	r2,0(r2)
   13858:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1385c:	10001326 	beq	r2,zero,138ac <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13860:	e0bffb17 	ldw	r2,-20(fp)
   13864:	10800017 	ldw	r2,0(r2)
   13868:	10c00517 	ldw	r3,20(r2)
   1386c:	e0bfff17 	ldw	r2,-4(fp)
   13870:	e13ffb17 	ldw	r4,-20(fp)
   13874:	e17ffe17 	ldw	r5,-8(fp)
   13878:	100d883a 	mov	r6,r2
   1387c:	183ee83a 	callr	r3
   13880:	e0bffc15 	stw	r2,-16(fp)
   13884:	e0bffc17 	ldw	r2,-16(fp)
   13888:	1000060e 	bge	r2,zero,138a4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1388c:	001379c0 	call	1379c <alt_get_errno>
   13890:	e0fffc17 	ldw	r3,-16(fp)
   13894:	00c7c83a 	sub	r3,zero,r3
   13898:	10c00015 	stw	r3,0(r2)
          return -1;
   1389c:	00bfffc4 	movi	r2,-1
   138a0:	00000a06 	br	138cc <read+0xe0>
        }
        return rval;
   138a4:	e0bffc17 	ldw	r2,-16(fp)
   138a8:	00000806 	br	138cc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   138ac:	001379c0 	call	1379c <alt_get_errno>
   138b0:	00c00344 	movi	r3,13
   138b4:	10c00015 	stw	r3,0(r2)
   138b8:	00000306 	br	138c8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   138bc:	001379c0 	call	1379c <alt_get_errno>
   138c0:	00c01444 	movi	r3,81
   138c4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   138c8:	00bfffc4 	movi	r2,-1
}
   138cc:	e037883a 	mov	sp,fp
   138d0:	dfc00117 	ldw	ra,4(sp)
   138d4:	df000017 	ldw	fp,0(sp)
   138d8:	dec00204 	addi	sp,sp,8
   138dc:	f800283a 	ret

000138e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   138e0:	defffc04 	addi	sp,sp,-16
   138e4:	dfc00315 	stw	ra,12(sp)
   138e8:	df000215 	stw	fp,8(sp)
   138ec:	dc000115 	stw	r16,4(sp)
   138f0:	df000104 	addi	fp,sp,4
   138f4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   138f8:	e0bfff17 	ldw	r2,-4(fp)
   138fc:	108000d0 	cmplti	r2,r2,3
   13900:	1000111e 	bne	r2,zero,13948 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   13904:	040001f4 	movhi	r16,7
   13908:	841a8b04 	addi	r16,r16,27180
   1390c:	e0bfff17 	ldw	r2,-4(fp)
   13910:	1009883a 	mov	r4,r2
   13914:	01400304 	movi	r5,12
   13918:	0009dec0 	call	9dec <__mulsi3>
   1391c:	8085883a 	add	r2,r16,r2
   13920:	10800204 	addi	r2,r2,8
   13924:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13928:	040001f4 	movhi	r16,7
   1392c:	841a8b04 	addi	r16,r16,27180
   13930:	e0bfff17 	ldw	r2,-4(fp)
   13934:	1009883a 	mov	r4,r2
   13938:	01400304 	movi	r5,12
   1393c:	0009dec0 	call	9dec <__mulsi3>
   13940:	8085883a 	add	r2,r16,r2
   13944:	10000015 	stw	zero,0(r2)
  }
}
   13948:	e037883a 	mov	sp,fp
   1394c:	dfc00217 	ldw	ra,8(sp)
   13950:	df000117 	ldw	fp,4(sp)
   13954:	dc000017 	ldw	r16,0(sp)
   13958:	dec00304 	addi	sp,sp,12
   1395c:	f800283a 	ret

00013960 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13960:	defff904 	addi	sp,sp,-28
   13964:	df000615 	stw	fp,24(sp)
   13968:	df000604 	addi	fp,sp,24
   1396c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13970:	0005303a 	rdctl	r2,status
   13974:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13978:	e0fffc17 	ldw	r3,-16(fp)
   1397c:	00bfff84 	movi	r2,-2
   13980:	1884703a 	and	r2,r3,r2
   13984:	1001703a 	wrctl	status,r2
  
  return context;
   13988:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1398c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13990:	d0a00f17 	ldw	r2,-32708(gp)
   13994:	10c000c4 	addi	r3,r2,3
   13998:	00bfff04 	movi	r2,-4
   1399c:	1884703a 	and	r2,r3,r2
   139a0:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   139a4:	d0e00f17 	ldw	r3,-32708(gp)
   139a8:	e0bfff17 	ldw	r2,-4(fp)
   139ac:	1885883a 	add	r2,r3,r2
   139b0:	00c08034 	movhi	r3,512
   139b4:	18c00004 	addi	r3,r3,0
   139b8:	1880062e 	bgeu	r3,r2,139d4 <sbrk+0x74>
   139bc:	e0bffa17 	ldw	r2,-24(fp)
   139c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139c4:	e0bffd17 	ldw	r2,-12(fp)
   139c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   139cc:	00bfffc4 	movi	r2,-1
   139d0:	00000b06 	br	13a00 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   139d4:	d0a00f17 	ldw	r2,-32708(gp)
   139d8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   139dc:	d0e00f17 	ldw	r3,-32708(gp)
   139e0:	e0bfff17 	ldw	r2,-4(fp)
   139e4:	1885883a 	add	r2,r3,r2
   139e8:	d0a00f15 	stw	r2,-32708(gp)
   139ec:	e0bffa17 	ldw	r2,-24(fp)
   139f0:	e0bffe15 	stw	r2,-8(fp)
   139f4:	e0bffe17 	ldw	r2,-8(fp)
   139f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   139fc:	e0bffb17 	ldw	r2,-20(fp)
} 
   13a00:	e037883a 	mov	sp,fp
   13a04:	df000017 	ldw	fp,0(sp)
   13a08:	dec00104 	addi	sp,sp,4
   13a0c:	f800283a 	ret

00013a10 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13a10:	defffa04 	addi	sp,sp,-24
   13a14:	df000515 	stw	fp,20(sp)
   13a18:	df000504 	addi	fp,sp,20
   13a1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a20:	0005303a 	rdctl	r2,status
   13a24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a28:	e0fffc17 	ldw	r3,-16(fp)
   13a2c:	00bfff84 	movi	r2,-2
   13a30:	1884703a 	and	r2,r3,r2
   13a34:	1001703a 	wrctl	status,r2
  
  return context;
   13a38:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13a3c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   13a40:	e0bfff17 	ldw	r2,-4(fp)
   13a44:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   13a48:	e0bffd17 	ldw	r2,-12(fp)
   13a4c:	10800017 	ldw	r2,0(r2)
   13a50:	e0fffd17 	ldw	r3,-12(fp)
   13a54:	18c00117 	ldw	r3,4(r3)
   13a58:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   13a5c:	e0bffd17 	ldw	r2,-12(fp)
   13a60:	10800117 	ldw	r2,4(r2)
   13a64:	e0fffd17 	ldw	r3,-12(fp)
   13a68:	18c00017 	ldw	r3,0(r3)
   13a6c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13a70:	e0bffd17 	ldw	r2,-12(fp)
   13a74:	e0fffd17 	ldw	r3,-12(fp)
   13a78:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   13a7c:	e0bffd17 	ldw	r2,-12(fp)
   13a80:	e0fffd17 	ldw	r3,-12(fp)
   13a84:	10c00015 	stw	r3,0(r2)
   13a88:	e0bffb17 	ldw	r2,-20(fp)
   13a8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a90:	e0bffe17 	ldw	r2,-8(fp)
   13a94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   13a98:	e037883a 	mov	sp,fp
   13a9c:	df000017 	ldw	fp,0(sp)
   13aa0:	dec00104 	addi	sp,sp,4
   13aa4:	f800283a 	ret

00013aa8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   13aa8:	defffb04 	addi	sp,sp,-20
   13aac:	dfc00415 	stw	ra,16(sp)
   13ab0:	df000315 	stw	fp,12(sp)
   13ab4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   13ab8:	d0a01017 	ldw	r2,-32704(gp)
   13abc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   13ac0:	d0ada717 	ldw	r2,-18788(gp)
   13ac4:	10800044 	addi	r2,r2,1
   13ac8:	d0ada715 	stw	r2,-18788(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13acc:	00002e06 	br	13b88 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   13ad0:	e0bffd17 	ldw	r2,-12(fp)
   13ad4:	10800017 	ldw	r2,0(r2)
   13ad8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   13adc:	e0bffd17 	ldw	r2,-12(fp)
   13ae0:	10800403 	ldbu	r2,16(r2)
   13ae4:	10803fcc 	andi	r2,r2,255
   13ae8:	10000426 	beq	r2,zero,13afc <alt_tick+0x54>
   13aec:	d0ada717 	ldw	r2,-18788(gp)
   13af0:	1000021e 	bne	r2,zero,13afc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   13af4:	e0bffd17 	ldw	r2,-12(fp)
   13af8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   13afc:	e0bffd17 	ldw	r2,-12(fp)
   13b00:	10800217 	ldw	r2,8(r2)
   13b04:	d0eda717 	ldw	r3,-18788(gp)
   13b08:	18801d36 	bltu	r3,r2,13b80 <alt_tick+0xd8>
   13b0c:	e0bffd17 	ldw	r2,-12(fp)
   13b10:	10800403 	ldbu	r2,16(r2)
   13b14:	10803fcc 	andi	r2,r2,255
   13b18:	1000191e 	bne	r2,zero,13b80 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   13b1c:	e0bffd17 	ldw	r2,-12(fp)
   13b20:	10c00317 	ldw	r3,12(r2)
   13b24:	e0bffd17 	ldw	r2,-12(fp)
   13b28:	10800517 	ldw	r2,20(r2)
   13b2c:	1009883a 	mov	r4,r2
   13b30:	183ee83a 	callr	r3
   13b34:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   13b38:	e0bfff17 	ldw	r2,-4(fp)
   13b3c:	1000031e 	bne	r2,zero,13b4c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   13b40:	e13ffd17 	ldw	r4,-12(fp)
   13b44:	0013a100 	call	13a10 <alt_alarm_stop>
   13b48:	00000d06 	br	13b80 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   13b4c:	e0bffd17 	ldw	r2,-12(fp)
   13b50:	10c00217 	ldw	r3,8(r2)
   13b54:	e0bfff17 	ldw	r2,-4(fp)
   13b58:	1887883a 	add	r3,r3,r2
   13b5c:	e0bffd17 	ldw	r2,-12(fp)
   13b60:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   13b64:	e0bffd17 	ldw	r2,-12(fp)
   13b68:	10c00217 	ldw	r3,8(r2)
   13b6c:	d0ada717 	ldw	r2,-18788(gp)
   13b70:	1880032e 	bgeu	r3,r2,13b80 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   13b74:	e0bffd17 	ldw	r2,-12(fp)
   13b78:	00c00044 	movi	r3,1
   13b7c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   13b80:	e0bffe17 	ldw	r2,-8(fp)
   13b84:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13b88:	e0fffd17 	ldw	r3,-12(fp)
   13b8c:	d0a01004 	addi	r2,gp,-32704
   13b90:	18bfcf1e 	bne	r3,r2,13ad0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   13b94:	0001883a 	nop
}
   13b98:	e037883a 	mov	sp,fp
   13b9c:	dfc00117 	ldw	ra,4(sp)
   13ba0:	df000017 	ldw	fp,0(sp)
   13ba4:	dec00204 	addi	sp,sp,8
   13ba8:	f800283a 	ret

00013bac <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   13bac:	defffd04 	addi	sp,sp,-12
   13bb0:	dfc00215 	stw	ra,8(sp)
   13bb4:	df000115 	stw	fp,4(sp)
   13bb8:	df000104 	addi	fp,sp,4
   13bbc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   13bc0:	e13fff17 	ldw	r4,-4(fp)
   13bc4:	0014a840 	call	14a84 <alt_busy_sleep>
}
   13bc8:	e037883a 	mov	sp,fp
   13bcc:	dfc00117 	ldw	ra,4(sp)
   13bd0:	df000017 	ldw	fp,0(sp)
   13bd4:	dec00204 	addi	sp,sp,8
   13bd8:	f800283a 	ret

00013bdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13bdc:	defffe04 	addi	sp,sp,-8
   13be0:	dfc00115 	stw	ra,4(sp)
   13be4:	df000015 	stw	fp,0(sp)
   13be8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13bec:	008001f4 	movhi	r2,7
   13bf0:	109f1004 	addi	r2,r2,31808
   13bf4:	10800017 	ldw	r2,0(r2)
   13bf8:	10000526 	beq	r2,zero,13c10 <alt_get_errno+0x34>
   13bfc:	008001f4 	movhi	r2,7
   13c00:	109f1004 	addi	r2,r2,31808
   13c04:	10800017 	ldw	r2,0(r2)
   13c08:	103ee83a 	callr	r2
   13c0c:	00000206 	br	13c18 <alt_get_errno+0x3c>
   13c10:	00800234 	movhi	r2,8
   13c14:	10aca104 	addi	r2,r2,-19836
}
   13c18:	e037883a 	mov	sp,fp
   13c1c:	dfc00117 	ldw	ra,4(sp)
   13c20:	df000017 	ldw	fp,0(sp)
   13c24:	dec00204 	addi	sp,sp,8
   13c28:	f800283a 	ret

00013c2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13c2c:	defff904 	addi	sp,sp,-28
   13c30:	dfc00615 	stw	ra,24(sp)
   13c34:	df000515 	stw	fp,20(sp)
   13c38:	df000504 	addi	fp,sp,20
   13c3c:	e13ffd15 	stw	r4,-12(fp)
   13c40:	e17ffe15 	stw	r5,-8(fp)
   13c44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13c48:	e0bffd17 	ldw	r2,-12(fp)
   13c4c:	10000716 	blt	r2,zero,13c6c <write+0x40>
   13c50:	e13ffd17 	ldw	r4,-12(fp)
   13c54:	01400304 	movi	r5,12
   13c58:	0009dec0 	call	9dec <__mulsi3>
   13c5c:	00c001f4 	movhi	r3,7
   13c60:	18da8b04 	addi	r3,r3,27180
   13c64:	10c5883a 	add	r2,r2,r3
   13c68:	00000106 	br	13c70 <write+0x44>
   13c6c:	0005883a 	mov	r2,zero
   13c70:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13c74:	e0bffb17 	ldw	r2,-20(fp)
   13c78:	10001f26 	beq	r2,zero,13cf8 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13c7c:	e0bffb17 	ldw	r2,-20(fp)
   13c80:	10800217 	ldw	r2,8(r2)
   13c84:	108000cc 	andi	r2,r2,3
   13c88:	10001726 	beq	r2,zero,13ce8 <write+0xbc>
   13c8c:	e0bffb17 	ldw	r2,-20(fp)
   13c90:	10800017 	ldw	r2,0(r2)
   13c94:	10800617 	ldw	r2,24(r2)
   13c98:	10001326 	beq	r2,zero,13ce8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13c9c:	e0bffb17 	ldw	r2,-20(fp)
   13ca0:	10800017 	ldw	r2,0(r2)
   13ca4:	10c00617 	ldw	r3,24(r2)
   13ca8:	e0bfff17 	ldw	r2,-4(fp)
   13cac:	e13ffb17 	ldw	r4,-20(fp)
   13cb0:	e17ffe17 	ldw	r5,-8(fp)
   13cb4:	100d883a 	mov	r6,r2
   13cb8:	183ee83a 	callr	r3
   13cbc:	e0bffc15 	stw	r2,-16(fp)
   13cc0:	e0bffc17 	ldw	r2,-16(fp)
   13cc4:	1000060e 	bge	r2,zero,13ce0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   13cc8:	0013bdc0 	call	13bdc <alt_get_errno>
   13ccc:	e0fffc17 	ldw	r3,-16(fp)
   13cd0:	00c7c83a 	sub	r3,zero,r3
   13cd4:	10c00015 	stw	r3,0(r2)
        return -1;
   13cd8:	00bfffc4 	movi	r2,-1
   13cdc:	00000a06 	br	13d08 <write+0xdc>
      }
      return rval;
   13ce0:	e0bffc17 	ldw	r2,-16(fp)
   13ce4:	00000806 	br	13d08 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13ce8:	0013bdc0 	call	13bdc <alt_get_errno>
   13cec:	00c00344 	movi	r3,13
   13cf0:	10c00015 	stw	r3,0(r2)
   13cf4:	00000306 	br	13d04 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13cf8:	0013bdc0 	call	13bdc <alt_get_errno>
   13cfc:	00c01444 	movi	r3,81
   13d00:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   13d04:	00bfffc4 	movi	r2,-1
}
   13d08:	e037883a 	mov	sp,fp
   13d0c:	dfc00117 	ldw	ra,4(sp)
   13d10:	df000017 	ldw	fp,0(sp)
   13d14:	dec00204 	addi	sp,sp,8
   13d18:	f800283a 	ret

00013d1c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13d1c:	defffd04 	addi	sp,sp,-12
   13d20:	dfc00215 	stw	ra,8(sp)
   13d24:	df000115 	stw	fp,4(sp)
   13d28:	df000104 	addi	fp,sp,4
   13d2c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13d30:	e13fff17 	ldw	r4,-4(fp)
   13d34:	014001f4 	movhi	r5,7
   13d38:	295f0d04 	addi	r5,r5,31796
   13d3c:	0014c280 	call	14c28 <alt_dev_llist_insert>
}
   13d40:	e037883a 	mov	sp,fp
   13d44:	dfc00117 	ldw	ra,4(sp)
   13d48:	df000017 	ldw	fp,0(sp)
   13d4c:	dec00204 	addi	sp,sp,8
   13d50:	f800283a 	ret

00013d54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13d54:	defffd04 	addi	sp,sp,-12
   13d58:	dfc00215 	stw	ra,8(sp)
   13d5c:	df000115 	stw	fp,4(sp)
   13d60:	df000104 	addi	fp,sp,4
   13d64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   13d68:	00151a00 	call	151a0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13d6c:	00800044 	movi	r2,1
   13d70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13d74:	e037883a 	mov	sp,fp
   13d78:	dfc00117 	ldw	ra,4(sp)
   13d7c:	df000017 	ldw	fp,0(sp)
   13d80:	dec00204 	addi	sp,sp,8
   13d84:	f800283a 	ret

00013d88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13d88:	defffe04 	addi	sp,sp,-8
   13d8c:	dfc00115 	stw	ra,4(sp)
   13d90:	df000015 	stw	fp,0(sp)
   13d94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   13d98:	01020034 	movhi	r4,2048
   13d9c:	000b883a 	mov	r5,zero
   13da0:	01800044 	movi	r6,1
   13da4:	01c0fa04 	movi	r7,1000
   13da8:	00148bc0 	call	148bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   13dac:	010001f4 	movhi	r4,7
   13db0:	211af504 	addi	r4,r4,27604
   13db4:	000b883a 	mov	r5,zero
   13db8:	000d883a 	mov	r6,zero
   13dbc:	0013f480 	call	13f48 <altera_avalon_jtag_uart_init>
   13dc0:	010001f4 	movhi	r4,7
   13dc4:	211aeb04 	addi	r4,r4,27564
   13dc8:	0013d1c0 	call	13d1c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   13dcc:	0001883a 	nop
}
   13dd0:	e037883a 	mov	sp,fp
   13dd4:	dfc00117 	ldw	ra,4(sp)
   13dd8:	df000017 	ldw	fp,0(sp)
   13ddc:	dec00204 	addi	sp,sp,8
   13de0:	f800283a 	ret

00013de4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13de4:	defffa04 	addi	sp,sp,-24
   13de8:	dfc00515 	stw	ra,20(sp)
   13dec:	df000415 	stw	fp,16(sp)
   13df0:	df000404 	addi	fp,sp,16
   13df4:	e13ffd15 	stw	r4,-12(fp)
   13df8:	e17ffe15 	stw	r5,-8(fp)
   13dfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13e00:	e0bffd17 	ldw	r2,-12(fp)
   13e04:	10800017 	ldw	r2,0(r2)
   13e08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13e0c:	e0bffc17 	ldw	r2,-16(fp)
   13e10:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   13e14:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13e18:	10800217 	ldw	r2,8(r2)
   13e1c:	1809883a 	mov	r4,r3
   13e20:	e17ffe17 	ldw	r5,-8(fp)
   13e24:	e1bfff17 	ldw	r6,-4(fp)
   13e28:	100f883a 	mov	r7,r2
   13e2c:	001440c0 	call	1440c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13e30:	e037883a 	mov	sp,fp
   13e34:	dfc00117 	ldw	ra,4(sp)
   13e38:	df000017 	ldw	fp,0(sp)
   13e3c:	dec00204 	addi	sp,sp,8
   13e40:	f800283a 	ret

00013e44 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13e44:	defffa04 	addi	sp,sp,-24
   13e48:	dfc00515 	stw	ra,20(sp)
   13e4c:	df000415 	stw	fp,16(sp)
   13e50:	df000404 	addi	fp,sp,16
   13e54:	e13ffd15 	stw	r4,-12(fp)
   13e58:	e17ffe15 	stw	r5,-8(fp)
   13e5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13e60:	e0bffd17 	ldw	r2,-12(fp)
   13e64:	10800017 	ldw	r2,0(r2)
   13e68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13e6c:	e0bffc17 	ldw	r2,-16(fp)
   13e70:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   13e74:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13e78:	10800217 	ldw	r2,8(r2)
   13e7c:	1809883a 	mov	r4,r3
   13e80:	e17ffe17 	ldw	r5,-8(fp)
   13e84:	e1bfff17 	ldw	r6,-4(fp)
   13e88:	100f883a 	mov	r7,r2
   13e8c:	00146240 	call	14624 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13e90:	e037883a 	mov	sp,fp
   13e94:	dfc00117 	ldw	ra,4(sp)
   13e98:	df000017 	ldw	fp,0(sp)
   13e9c:	dec00204 	addi	sp,sp,8
   13ea0:	f800283a 	ret

00013ea4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13ea4:	defffc04 	addi	sp,sp,-16
   13ea8:	dfc00315 	stw	ra,12(sp)
   13eac:	df000215 	stw	fp,8(sp)
   13eb0:	df000204 	addi	fp,sp,8
   13eb4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13eb8:	e0bfff17 	ldw	r2,-4(fp)
   13ebc:	10800017 	ldw	r2,0(r2)
   13ec0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13ec4:	e0bffe17 	ldw	r2,-8(fp)
   13ec8:	10c00a04 	addi	r3,r2,40
   13ecc:	e0bfff17 	ldw	r2,-4(fp)
   13ed0:	10800217 	ldw	r2,8(r2)
   13ed4:	1809883a 	mov	r4,r3
   13ed8:	100b883a 	mov	r5,r2
   13edc:	00142b00 	call	142b0 <altera_avalon_jtag_uart_close>
}
   13ee0:	e037883a 	mov	sp,fp
   13ee4:	dfc00117 	ldw	ra,4(sp)
   13ee8:	df000017 	ldw	fp,0(sp)
   13eec:	dec00204 	addi	sp,sp,8
   13ef0:	f800283a 	ret

00013ef4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13ef4:	defffa04 	addi	sp,sp,-24
   13ef8:	dfc00515 	stw	ra,20(sp)
   13efc:	df000415 	stw	fp,16(sp)
   13f00:	df000404 	addi	fp,sp,16
   13f04:	e13ffd15 	stw	r4,-12(fp)
   13f08:	e17ffe15 	stw	r5,-8(fp)
   13f0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13f10:	e0bffd17 	ldw	r2,-12(fp)
   13f14:	10800017 	ldw	r2,0(r2)
   13f18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13f1c:	e0bffc17 	ldw	r2,-16(fp)
   13f20:	10800a04 	addi	r2,r2,40
   13f24:	1009883a 	mov	r4,r2
   13f28:	e17ffe17 	ldw	r5,-8(fp)
   13f2c:	e1bfff17 	ldw	r6,-4(fp)
   13f30:	00143180 	call	14318 <altera_avalon_jtag_uart_ioctl>
}
   13f34:	e037883a 	mov	sp,fp
   13f38:	dfc00117 	ldw	ra,4(sp)
   13f3c:	df000017 	ldw	fp,0(sp)
   13f40:	dec00204 	addi	sp,sp,8
   13f44:	f800283a 	ret

00013f48 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13f48:	defffa04 	addi	sp,sp,-24
   13f4c:	dfc00515 	stw	ra,20(sp)
   13f50:	df000415 	stw	fp,16(sp)
   13f54:	df000404 	addi	fp,sp,16
   13f58:	e13ffd15 	stw	r4,-12(fp)
   13f5c:	e17ffe15 	stw	r5,-8(fp)
   13f60:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13f64:	e0bffd17 	ldw	r2,-12(fp)
   13f68:	00c00044 	movi	r3,1
   13f6c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13f70:	e0bffd17 	ldw	r2,-12(fp)
   13f74:	10800017 	ldw	r2,0(r2)
   13f78:	10800104 	addi	r2,r2,4
   13f7c:	e0fffd17 	ldw	r3,-12(fp)
   13f80:	18c00817 	ldw	r3,32(r3)
   13f84:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13f88:	e0fffe17 	ldw	r3,-8(fp)
   13f8c:	e0bfff17 	ldw	r2,-4(fp)
   13f90:	d8000015 	stw	zero,0(sp)
   13f94:	1809883a 	mov	r4,r3
   13f98:	100b883a 	mov	r5,r2
   13f9c:	01800074 	movhi	r6,1
   13fa0:	31900204 	addi	r6,r6,16392
   13fa4:	e1fffd17 	ldw	r7,-12(fp)
   13fa8:	00131180 	call	13118 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13fac:	e0bffd17 	ldw	r2,-12(fp)
   13fb0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13fb4:	e0bffd17 	ldw	r2,-12(fp)
   13fb8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13fbc:	00800234 	movhi	r2,8
   13fc0:	10aca904 	addi	r2,r2,-19804
   13fc4:	10800017 	ldw	r2,0(r2)
   13fc8:	1809883a 	mov	r4,r3
   13fcc:	100b883a 	mov	r5,r2
   13fd0:	01800074 	movhi	r6,1
   13fd4:	31908304 	addi	r6,r6,16908
   13fd8:	e1fffd17 	ldw	r7,-12(fp)
   13fdc:	00149440 	call	14944 <alt_alarm_start>
   13fe0:	1000040e 	bge	r2,zero,13ff4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13fe4:	e0bffd17 	ldw	r2,-12(fp)
   13fe8:	00e00034 	movhi	r3,32768
   13fec:	18ffffc4 	addi	r3,r3,-1
   13ff0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13ff4:	e037883a 	mov	sp,fp
   13ff8:	dfc00117 	ldw	ra,4(sp)
   13ffc:	df000017 	ldw	fp,0(sp)
   14000:	dec00204 	addi	sp,sp,8
   14004:	f800283a 	ret

00014008 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14008:	defff804 	addi	sp,sp,-32
   1400c:	df000715 	stw	fp,28(sp)
   14010:	df000704 	addi	fp,sp,28
   14014:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14018:	e0bfff17 	ldw	r2,-4(fp)
   1401c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14020:	e0bffb17 	ldw	r2,-20(fp)
   14024:	10800017 	ldw	r2,0(r2)
   14028:	e0bffc15 	stw	r2,-16(fp)
   1402c:	00000106 	br	14034 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   14030:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14034:	e0bffc17 	ldw	r2,-16(fp)
   14038:	10800104 	addi	r2,r2,4
   1403c:	10800037 	ldwio	r2,0(r2)
   14040:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14044:	e0bffd17 	ldw	r2,-12(fp)
   14048:	1080c00c 	andi	r2,r2,768
   1404c:	10006a26 	beq	r2,zero,141f8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14050:	e0bffd17 	ldw	r2,-12(fp)
   14054:	1080400c 	andi	r2,r2,256
   14058:	10003326 	beq	r2,zero,14128 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1405c:	00800074 	movhi	r2,1
   14060:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14064:	e0bffb17 	ldw	r2,-20(fp)
   14068:	10800a17 	ldw	r2,40(r2)
   1406c:	10800044 	addi	r2,r2,1
   14070:	1081ffcc 	andi	r2,r2,2047
   14074:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   14078:	e0bffb17 	ldw	r2,-20(fp)
   1407c:	10c00b17 	ldw	r3,44(r2)
   14080:	e0bffe17 	ldw	r2,-8(fp)
   14084:	18801426 	beq	r3,r2,140d8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14088:	e0bffc17 	ldw	r2,-16(fp)
   1408c:	10800037 	ldwio	r2,0(r2)
   14090:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14094:	e0bff917 	ldw	r2,-28(fp)
   14098:	10a0000c 	andi	r2,r2,32768
   1409c:	10001026 	beq	r2,zero,140e0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   140a0:	e0bffb17 	ldw	r2,-20(fp)
   140a4:	10800a17 	ldw	r2,40(r2)
   140a8:	e0fff917 	ldw	r3,-28(fp)
   140ac:	e13ffb17 	ldw	r4,-20(fp)
   140b0:	2085883a 	add	r2,r4,r2
   140b4:	10800e04 	addi	r2,r2,56
   140b8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   140bc:	e0bffb17 	ldw	r2,-20(fp)
   140c0:	10800a17 	ldw	r2,40(r2)
   140c4:	10800044 	addi	r2,r2,1
   140c8:	10c1ffcc 	andi	r3,r2,2047
   140cc:	e0bffb17 	ldw	r2,-20(fp)
   140d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   140d4:	003fe306 	br	14064 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   140d8:	0001883a 	nop
   140dc:	00000106 	br	140e4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   140e0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   140e4:	e0bff917 	ldw	r2,-28(fp)
   140e8:	10bfffec 	andhi	r2,r2,65535
   140ec:	10000e26 	beq	r2,zero,14128 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   140f0:	e0bffb17 	ldw	r2,-20(fp)
   140f4:	10c00817 	ldw	r3,32(r2)
   140f8:	00bfff84 	movi	r2,-2
   140fc:	1886703a 	and	r3,r3,r2
   14100:	e0bffb17 	ldw	r2,-20(fp)
   14104:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14108:	e0bffc17 	ldw	r2,-16(fp)
   1410c:	10800104 	addi	r2,r2,4
   14110:	e0fffb17 	ldw	r3,-20(fp)
   14114:	18c00817 	ldw	r3,32(r3)
   14118:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1411c:	e0bffc17 	ldw	r2,-16(fp)
   14120:	10800104 	addi	r2,r2,4
   14124:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14128:	e0bffd17 	ldw	r2,-12(fp)
   1412c:	1080800c 	andi	r2,r2,512
   14130:	103fbf26 	beq	r2,zero,14030 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14134:	e0bffd17 	ldw	r2,-12(fp)
   14138:	1004d43a 	srli	r2,r2,16
   1413c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14140:	00001406 	br	14194 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14144:	e0bffc17 	ldw	r2,-16(fp)
   14148:	e0fffb17 	ldw	r3,-20(fp)
   1414c:	18c00d17 	ldw	r3,52(r3)
   14150:	e13ffb17 	ldw	r4,-20(fp)
   14154:	20c7883a 	add	r3,r4,r3
   14158:	18c20e04 	addi	r3,r3,2104
   1415c:	18c00003 	ldbu	r3,0(r3)
   14160:	18c03fcc 	andi	r3,r3,255
   14164:	18c0201c 	xori	r3,r3,128
   14168:	18ffe004 	addi	r3,r3,-128
   1416c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14170:	e0bffb17 	ldw	r2,-20(fp)
   14174:	10800d17 	ldw	r2,52(r2)
   14178:	10800044 	addi	r2,r2,1
   1417c:	10c1ffcc 	andi	r3,r2,2047
   14180:	e0bffb17 	ldw	r2,-20(fp)
   14184:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14188:	e0bffa17 	ldw	r2,-24(fp)
   1418c:	10bfffc4 	addi	r2,r2,-1
   14190:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14194:	e0bffa17 	ldw	r2,-24(fp)
   14198:	10000526 	beq	r2,zero,141b0 <altera_avalon_jtag_uart_irq+0x1a8>
   1419c:	e0bffb17 	ldw	r2,-20(fp)
   141a0:	10c00d17 	ldw	r3,52(r2)
   141a4:	e0bffb17 	ldw	r2,-20(fp)
   141a8:	10800c17 	ldw	r2,48(r2)
   141ac:	18bfe51e 	bne	r3,r2,14144 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   141b0:	e0bffa17 	ldw	r2,-24(fp)
   141b4:	103f9e26 	beq	r2,zero,14030 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   141b8:	e0bffb17 	ldw	r2,-20(fp)
   141bc:	10c00817 	ldw	r3,32(r2)
   141c0:	00bfff44 	movi	r2,-3
   141c4:	1886703a 	and	r3,r3,r2
   141c8:	e0bffb17 	ldw	r2,-20(fp)
   141cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   141d0:	e0bffb17 	ldw	r2,-20(fp)
   141d4:	10800017 	ldw	r2,0(r2)
   141d8:	10800104 	addi	r2,r2,4
   141dc:	e0fffb17 	ldw	r3,-20(fp)
   141e0:	18c00817 	ldw	r3,32(r3)
   141e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   141e8:	e0bffc17 	ldw	r2,-16(fp)
   141ec:	10800104 	addi	r2,r2,4
   141f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   141f4:	003f8e06 	br	14030 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   141f8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   141fc:	e037883a 	mov	sp,fp
   14200:	df000017 	ldw	fp,0(sp)
   14204:	dec00104 	addi	sp,sp,4
   14208:	f800283a 	ret

0001420c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1420c:	defffc04 	addi	sp,sp,-16
   14210:	df000315 	stw	fp,12(sp)
   14214:	df000304 	addi	fp,sp,12
   14218:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1421c:	e0bfff17 	ldw	r2,-4(fp)
   14220:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14224:	e0bffd17 	ldw	r2,-12(fp)
   14228:	10800017 	ldw	r2,0(r2)
   1422c:	10800104 	addi	r2,r2,4
   14230:	10800037 	ldwio	r2,0(r2)
   14234:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14238:	e0bffe17 	ldw	r2,-8(fp)
   1423c:	1081000c 	andi	r2,r2,1024
   14240:	10000a26 	beq	r2,zero,1426c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14244:	e0bffd17 	ldw	r2,-12(fp)
   14248:	10800017 	ldw	r2,0(r2)
   1424c:	10800104 	addi	r2,r2,4
   14250:	e0fffd17 	ldw	r3,-12(fp)
   14254:	18c00817 	ldw	r3,32(r3)
   14258:	18c10014 	ori	r3,r3,1024
   1425c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   14260:	e0bffd17 	ldw	r2,-12(fp)
   14264:	10000915 	stw	zero,36(r2)
   14268:	00000a06 	br	14294 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1426c:	e0bffd17 	ldw	r2,-12(fp)
   14270:	10800917 	ldw	r2,36(r2)
   14274:	00e00034 	movhi	r3,32768
   14278:	18ffff04 	addi	r3,r3,-4
   1427c:	18800536 	bltu	r3,r2,14294 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   14280:	e0bffd17 	ldw	r2,-12(fp)
   14284:	10800917 	ldw	r2,36(r2)
   14288:	10c00044 	addi	r3,r2,1
   1428c:	e0bffd17 	ldw	r2,-12(fp)
   14290:	10c00915 	stw	r3,36(r2)
   14294:	00800234 	movhi	r2,8
   14298:	10aca904 	addi	r2,r2,-19804
   1429c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   142a0:	e037883a 	mov	sp,fp
   142a4:	df000017 	ldw	fp,0(sp)
   142a8:	dec00104 	addi	sp,sp,4
   142ac:	f800283a 	ret

000142b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   142b0:	defffd04 	addi	sp,sp,-12
   142b4:	df000215 	stw	fp,8(sp)
   142b8:	df000204 	addi	fp,sp,8
   142bc:	e13ffe15 	stw	r4,-8(fp)
   142c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   142c4:	00000506 	br	142dc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   142c8:	e0bfff17 	ldw	r2,-4(fp)
   142cc:	1090000c 	andi	r2,r2,16384
   142d0:	10000226 	beq	r2,zero,142dc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   142d4:	00bffd44 	movi	r2,-11
   142d8:	00000b06 	br	14308 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   142dc:	e0bffe17 	ldw	r2,-8(fp)
   142e0:	10c00d17 	ldw	r3,52(r2)
   142e4:	e0bffe17 	ldw	r2,-8(fp)
   142e8:	10800c17 	ldw	r2,48(r2)
   142ec:	18800526 	beq	r3,r2,14304 <altera_avalon_jtag_uart_close+0x54>
   142f0:	e0bffe17 	ldw	r2,-8(fp)
   142f4:	10c00917 	ldw	r3,36(r2)
   142f8:	e0bffe17 	ldw	r2,-8(fp)
   142fc:	10800117 	ldw	r2,4(r2)
   14300:	18bff136 	bltu	r3,r2,142c8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14304:	0005883a 	mov	r2,zero
}
   14308:	e037883a 	mov	sp,fp
   1430c:	df000017 	ldw	fp,0(sp)
   14310:	dec00104 	addi	sp,sp,4
   14314:	f800283a 	ret

00014318 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14318:	defffa04 	addi	sp,sp,-24
   1431c:	df000515 	stw	fp,20(sp)
   14320:	df000504 	addi	fp,sp,20
   14324:	e13ffd15 	stw	r4,-12(fp)
   14328:	e17ffe15 	stw	r5,-8(fp)
   1432c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14330:	00bff9c4 	movi	r2,-25
   14334:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14338:	e0bffe17 	ldw	r2,-8(fp)
   1433c:	10da8060 	cmpeqi	r3,r2,27137
   14340:	1800031e 	bne	r3,zero,14350 <altera_avalon_jtag_uart_ioctl+0x38>
   14344:	109a80a0 	cmpeqi	r2,r2,27138
   14348:	1000181e 	bne	r2,zero,143ac <altera_avalon_jtag_uart_ioctl+0x94>
   1434c:	00002606 	br	143e8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14350:	e0bffd17 	ldw	r2,-12(fp)
   14354:	10c00117 	ldw	r3,4(r2)
   14358:	00a00034 	movhi	r2,32768
   1435c:	10bfffc4 	addi	r2,r2,-1
   14360:	18802226 	beq	r3,r2,143ec <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   14364:	e0bfff17 	ldw	r2,-4(fp)
   14368:	10800017 	ldw	r2,0(r2)
   1436c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14370:	e0bffc17 	ldw	r2,-16(fp)
   14374:	10800090 	cmplti	r2,r2,2
   14378:	1000061e 	bne	r2,zero,14394 <altera_avalon_jtag_uart_ioctl+0x7c>
   1437c:	e0fffc17 	ldw	r3,-16(fp)
   14380:	00a00034 	movhi	r2,32768
   14384:	10bfffc4 	addi	r2,r2,-1
   14388:	18800226 	beq	r3,r2,14394 <altera_avalon_jtag_uart_ioctl+0x7c>
   1438c:	e0bffc17 	ldw	r2,-16(fp)
   14390:	00000206 	br	1439c <altera_avalon_jtag_uart_ioctl+0x84>
   14394:	00a00034 	movhi	r2,32768
   14398:	10bfff84 	addi	r2,r2,-2
   1439c:	e0fffd17 	ldw	r3,-12(fp)
   143a0:	18800115 	stw	r2,4(r3)
      rc = 0;
   143a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   143a8:	00001006 	br	143ec <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   143ac:	e0bffd17 	ldw	r2,-12(fp)
   143b0:	10c00117 	ldw	r3,4(r2)
   143b4:	00a00034 	movhi	r2,32768
   143b8:	10bfffc4 	addi	r2,r2,-1
   143bc:	18800d26 	beq	r3,r2,143f4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   143c0:	e0bffd17 	ldw	r2,-12(fp)
   143c4:	10c00917 	ldw	r3,36(r2)
   143c8:	e0bffd17 	ldw	r2,-12(fp)
   143cc:	10800117 	ldw	r2,4(r2)
   143d0:	1885803a 	cmpltu	r2,r3,r2
   143d4:	10c03fcc 	andi	r3,r2,255
   143d8:	e0bfff17 	ldw	r2,-4(fp)
   143dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   143e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   143e4:	00000306 	br	143f4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   143e8:	00000306 	br	143f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   143ec:	0001883a 	nop
   143f0:	00000106 	br	143f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   143f4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   143f8:	e0bffb17 	ldw	r2,-20(fp)
}
   143fc:	e037883a 	mov	sp,fp
   14400:	df000017 	ldw	fp,0(sp)
   14404:	dec00104 	addi	sp,sp,4
   14408:	f800283a 	ret

0001440c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1440c:	defff304 	addi	sp,sp,-52
   14410:	dfc00c15 	stw	ra,48(sp)
   14414:	df000b15 	stw	fp,44(sp)
   14418:	df000b04 	addi	fp,sp,44
   1441c:	e13ffc15 	stw	r4,-16(fp)
   14420:	e17ffd15 	stw	r5,-12(fp)
   14424:	e1bffe15 	stw	r6,-8(fp)
   14428:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1442c:	e0bffd17 	ldw	r2,-12(fp)
   14430:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14434:	00004706 	br	14554 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14438:	e0bffc17 	ldw	r2,-16(fp)
   1443c:	10800a17 	ldw	r2,40(r2)
   14440:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14444:	e0bffc17 	ldw	r2,-16(fp)
   14448:	10800b17 	ldw	r2,44(r2)
   1444c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14450:	e0fff717 	ldw	r3,-36(fp)
   14454:	e0bff817 	ldw	r2,-32(fp)
   14458:	18800536 	bltu	r3,r2,14470 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1445c:	e0fff717 	ldw	r3,-36(fp)
   14460:	e0bff817 	ldw	r2,-32(fp)
   14464:	1885c83a 	sub	r2,r3,r2
   14468:	e0bff615 	stw	r2,-40(fp)
   1446c:	00000406 	br	14480 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14470:	00c20004 	movi	r3,2048
   14474:	e0bff817 	ldw	r2,-32(fp)
   14478:	1885c83a 	sub	r2,r3,r2
   1447c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14480:	e0bff617 	ldw	r2,-40(fp)
   14484:	10001e26 	beq	r2,zero,14500 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14488:	e0fffe17 	ldw	r3,-8(fp)
   1448c:	e0bff617 	ldw	r2,-40(fp)
   14490:	1880022e 	bgeu	r3,r2,1449c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14494:	e0bffe17 	ldw	r2,-8(fp)
   14498:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1449c:	e0bff817 	ldw	r2,-32(fp)
   144a0:	10800e04 	addi	r2,r2,56
   144a4:	e0fffc17 	ldw	r3,-16(fp)
   144a8:	1885883a 	add	r2,r3,r2
   144ac:	e13ff517 	ldw	r4,-44(fp)
   144b0:	100b883a 	mov	r5,r2
   144b4:	e1bff617 	ldw	r6,-40(fp)
   144b8:	000ac0c0 	call	ac0c <memcpy>
      ptr   += n;
   144bc:	e0fff517 	ldw	r3,-44(fp)
   144c0:	e0bff617 	ldw	r2,-40(fp)
   144c4:	1885883a 	add	r2,r3,r2
   144c8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   144cc:	e0fffe17 	ldw	r3,-8(fp)
   144d0:	e0bff617 	ldw	r2,-40(fp)
   144d4:	1885c83a 	sub	r2,r3,r2
   144d8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   144dc:	e0fff817 	ldw	r3,-32(fp)
   144e0:	e0bff617 	ldw	r2,-40(fp)
   144e4:	1885883a 	add	r2,r3,r2
   144e8:	10c1ffcc 	andi	r3,r2,2047
   144ec:	e0bffc17 	ldw	r2,-16(fp)
   144f0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   144f4:	e0bffe17 	ldw	r2,-8(fp)
   144f8:	00bfcf16 	blt	zero,r2,14438 <altera_avalon_jtag_uart_read+0x2c>
   144fc:	00000106 	br	14504 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14500:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14504:	e0fff517 	ldw	r3,-44(fp)
   14508:	e0bffd17 	ldw	r2,-12(fp)
   1450c:	1880141e 	bne	r3,r2,14560 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14510:	e0bfff17 	ldw	r2,-4(fp)
   14514:	1090000c 	andi	r2,r2,16384
   14518:	1000131e 	bne	r2,zero,14568 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1451c:	0001883a 	nop
   14520:	e0bffc17 	ldw	r2,-16(fp)
   14524:	10c00a17 	ldw	r3,40(r2)
   14528:	e0bff717 	ldw	r2,-36(fp)
   1452c:	1880051e 	bne	r3,r2,14544 <altera_avalon_jtag_uart_read+0x138>
   14530:	e0bffc17 	ldw	r2,-16(fp)
   14534:	10c00917 	ldw	r3,36(r2)
   14538:	e0bffc17 	ldw	r2,-16(fp)
   1453c:	10800117 	ldw	r2,4(r2)
   14540:	18bff736 	bltu	r3,r2,14520 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14544:	e0bffc17 	ldw	r2,-16(fp)
   14548:	10c00a17 	ldw	r3,40(r2)
   1454c:	e0bff717 	ldw	r2,-36(fp)
   14550:	18800726 	beq	r3,r2,14570 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14554:	e0bffe17 	ldw	r2,-8(fp)
   14558:	00bfb716 	blt	zero,r2,14438 <altera_avalon_jtag_uart_read+0x2c>
   1455c:	00000506 	br	14574 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   14560:	0001883a 	nop
   14564:	00000306 	br	14574 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   14568:	0001883a 	nop
   1456c:	00000106 	br	14574 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   14570:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14574:	e0fff517 	ldw	r3,-44(fp)
   14578:	e0bffd17 	ldw	r2,-12(fp)
   1457c:	18801726 	beq	r3,r2,145dc <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14580:	0005303a 	rdctl	r2,status
   14584:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14588:	e0fffa17 	ldw	r3,-24(fp)
   1458c:	00bfff84 	movi	r2,-2
   14590:	1884703a 	and	r2,r3,r2
   14594:	1001703a 	wrctl	status,r2
  
  return context;
   14598:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1459c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   145a0:	e0bffc17 	ldw	r2,-16(fp)
   145a4:	10800817 	ldw	r2,32(r2)
   145a8:	10c00054 	ori	r3,r2,1
   145ac:	e0bffc17 	ldw	r2,-16(fp)
   145b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   145b4:	e0bffc17 	ldw	r2,-16(fp)
   145b8:	10800017 	ldw	r2,0(r2)
   145bc:	10800104 	addi	r2,r2,4
   145c0:	e0fffc17 	ldw	r3,-16(fp)
   145c4:	18c00817 	ldw	r3,32(r3)
   145c8:	10c00035 	stwio	r3,0(r2)
   145cc:	e0bff917 	ldw	r2,-28(fp)
   145d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145d4:	e0bffb17 	ldw	r2,-20(fp)
   145d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   145dc:	e0fff517 	ldw	r3,-44(fp)
   145e0:	e0bffd17 	ldw	r2,-12(fp)
   145e4:	18800426 	beq	r3,r2,145f8 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   145e8:	e0fff517 	ldw	r3,-44(fp)
   145ec:	e0bffd17 	ldw	r2,-12(fp)
   145f0:	1885c83a 	sub	r2,r3,r2
   145f4:	00000606 	br	14610 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   145f8:	e0bfff17 	ldw	r2,-4(fp)
   145fc:	1090000c 	andi	r2,r2,16384
   14600:	10000226 	beq	r2,zero,1460c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   14604:	00bffd44 	movi	r2,-11
   14608:	00000106 	br	14610 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   1460c:	00bffec4 	movi	r2,-5
}
   14610:	e037883a 	mov	sp,fp
   14614:	dfc00117 	ldw	ra,4(sp)
   14618:	df000017 	ldw	fp,0(sp)
   1461c:	dec00204 	addi	sp,sp,8
   14620:	f800283a 	ret

00014624 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14624:	defff304 	addi	sp,sp,-52
   14628:	dfc00c15 	stw	ra,48(sp)
   1462c:	df000b15 	stw	fp,44(sp)
   14630:	df000b04 	addi	fp,sp,44
   14634:	e13ffc15 	stw	r4,-16(fp)
   14638:	e17ffd15 	stw	r5,-12(fp)
   1463c:	e1bffe15 	stw	r6,-8(fp)
   14640:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14644:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14648:	e0bffd17 	ldw	r2,-12(fp)
   1464c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14650:	00003706 	br	14730 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14654:	e0bffc17 	ldw	r2,-16(fp)
   14658:	10800c17 	ldw	r2,48(r2)
   1465c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   14660:	e0bffc17 	ldw	r2,-16(fp)
   14664:	10800d17 	ldw	r2,52(r2)
   14668:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1466c:	e0fff817 	ldw	r3,-32(fp)
   14670:	e0bff517 	ldw	r2,-44(fp)
   14674:	1880062e 	bgeu	r3,r2,14690 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14678:	e0fff517 	ldw	r3,-44(fp)
   1467c:	e0bff817 	ldw	r2,-32(fp)
   14680:	1885c83a 	sub	r2,r3,r2
   14684:	10bfffc4 	addi	r2,r2,-1
   14688:	e0bff615 	stw	r2,-40(fp)
   1468c:	00000b06 	br	146bc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14690:	e0bff517 	ldw	r2,-44(fp)
   14694:	10000526 	beq	r2,zero,146ac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14698:	00c20004 	movi	r3,2048
   1469c:	e0bff817 	ldw	r2,-32(fp)
   146a0:	1885c83a 	sub	r2,r3,r2
   146a4:	e0bff615 	stw	r2,-40(fp)
   146a8:	00000406 	br	146bc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   146ac:	00c1ffc4 	movi	r3,2047
   146b0:	e0bff817 	ldw	r2,-32(fp)
   146b4:	1885c83a 	sub	r2,r3,r2
   146b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   146bc:	e0bff617 	ldw	r2,-40(fp)
   146c0:	10001e26 	beq	r2,zero,1473c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   146c4:	e0fffe17 	ldw	r3,-8(fp)
   146c8:	e0bff617 	ldw	r2,-40(fp)
   146cc:	1880022e 	bgeu	r3,r2,146d8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   146d0:	e0bffe17 	ldw	r2,-8(fp)
   146d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   146d8:	e0bff817 	ldw	r2,-32(fp)
   146dc:	10820e04 	addi	r2,r2,2104
   146e0:	e0fffc17 	ldw	r3,-16(fp)
   146e4:	1885883a 	add	r2,r3,r2
   146e8:	1009883a 	mov	r4,r2
   146ec:	e17ffd17 	ldw	r5,-12(fp)
   146f0:	e1bff617 	ldw	r6,-40(fp)
   146f4:	000ac0c0 	call	ac0c <memcpy>
      ptr   += n;
   146f8:	e0fffd17 	ldw	r3,-12(fp)
   146fc:	e0bff617 	ldw	r2,-40(fp)
   14700:	1885883a 	add	r2,r3,r2
   14704:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14708:	e0fffe17 	ldw	r3,-8(fp)
   1470c:	e0bff617 	ldw	r2,-40(fp)
   14710:	1885c83a 	sub	r2,r3,r2
   14714:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14718:	e0fff817 	ldw	r3,-32(fp)
   1471c:	e0bff617 	ldw	r2,-40(fp)
   14720:	1885883a 	add	r2,r3,r2
   14724:	10c1ffcc 	andi	r3,r2,2047
   14728:	e0bffc17 	ldw	r2,-16(fp)
   1472c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14730:	e0bffe17 	ldw	r2,-8(fp)
   14734:	00bfc716 	blt	zero,r2,14654 <altera_avalon_jtag_uart_write+0x30>
   14738:	00000106 	br	14740 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1473c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14740:	0005303a 	rdctl	r2,status
   14744:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14748:	e0fffa17 	ldw	r3,-24(fp)
   1474c:	00bfff84 	movi	r2,-2
   14750:	1884703a 	and	r2,r3,r2
   14754:	1001703a 	wrctl	status,r2
  
  return context;
   14758:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1475c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14760:	e0bffc17 	ldw	r2,-16(fp)
   14764:	10800817 	ldw	r2,32(r2)
   14768:	10c00094 	ori	r3,r2,2
   1476c:	e0bffc17 	ldw	r2,-16(fp)
   14770:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14774:	e0bffc17 	ldw	r2,-16(fp)
   14778:	10800017 	ldw	r2,0(r2)
   1477c:	10800104 	addi	r2,r2,4
   14780:	e0fffc17 	ldw	r3,-16(fp)
   14784:	18c00817 	ldw	r3,32(r3)
   14788:	10c00035 	stwio	r3,0(r2)
   1478c:	e0bff917 	ldw	r2,-28(fp)
   14790:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14794:	e0bffb17 	ldw	r2,-20(fp)
   14798:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1479c:	e0bffe17 	ldw	r2,-8(fp)
   147a0:	0080110e 	bge	zero,r2,147e8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   147a4:	e0bfff17 	ldw	r2,-4(fp)
   147a8:	1090000c 	andi	r2,r2,16384
   147ac:	1000111e 	bne	r2,zero,147f4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   147b0:	0001883a 	nop
   147b4:	e0bffc17 	ldw	r2,-16(fp)
   147b8:	10c00d17 	ldw	r3,52(r2)
   147bc:	e0bff517 	ldw	r2,-44(fp)
   147c0:	1880051e 	bne	r3,r2,147d8 <altera_avalon_jtag_uart_write+0x1b4>
   147c4:	e0bffc17 	ldw	r2,-16(fp)
   147c8:	10c00917 	ldw	r3,36(r2)
   147cc:	e0bffc17 	ldw	r2,-16(fp)
   147d0:	10800117 	ldw	r2,4(r2)
   147d4:	18bff736 	bltu	r3,r2,147b4 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   147d8:	e0bffc17 	ldw	r2,-16(fp)
   147dc:	10c00d17 	ldw	r3,52(r2)
   147e0:	e0bff517 	ldw	r2,-44(fp)
   147e4:	18800526 	beq	r3,r2,147fc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   147e8:	e0bffe17 	ldw	r2,-8(fp)
   147ec:	00bfd016 	blt	zero,r2,14730 <altera_avalon_jtag_uart_write+0x10c>
   147f0:	00000306 	br	14800 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   147f4:	0001883a 	nop
   147f8:	00000106 	br	14800 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   147fc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14800:	e0fffd17 	ldw	r3,-12(fp)
   14804:	e0bff717 	ldw	r2,-36(fp)
   14808:	18800426 	beq	r3,r2,1481c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1480c:	e0fffd17 	ldw	r3,-12(fp)
   14810:	e0bff717 	ldw	r2,-36(fp)
   14814:	1885c83a 	sub	r2,r3,r2
   14818:	00000606 	br	14834 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1481c:	e0bfff17 	ldw	r2,-4(fp)
   14820:	1090000c 	andi	r2,r2,16384
   14824:	10000226 	beq	r2,zero,14830 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14828:	00bffd44 	movi	r2,-11
   1482c:	00000106 	br	14834 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14830:	00bffec4 	movi	r2,-5
}
   14834:	e037883a 	mov	sp,fp
   14838:	dfc00117 	ldw	ra,4(sp)
   1483c:	df000017 	ldw	fp,0(sp)
   14840:	dec00204 	addi	sp,sp,8
   14844:	f800283a 	ret

00014848 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14848:	defffa04 	addi	sp,sp,-24
   1484c:	dfc00515 	stw	ra,20(sp)
   14850:	df000415 	stw	fp,16(sp)
   14854:	df000404 	addi	fp,sp,16
   14858:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1485c:	0007883a 	mov	r3,zero
   14860:	e0bfff17 	ldw	r2,-4(fp)
   14864:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   14868:	e0bfff17 	ldw	r2,-4(fp)
   1486c:	10800104 	addi	r2,r2,4
   14870:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14874:	0005303a 	rdctl	r2,status
   14878:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1487c:	e0fffd17 	ldw	r3,-12(fp)
   14880:	00bfff84 	movi	r2,-2
   14884:	1884703a 	and	r2,r3,r2
   14888:	1001703a 	wrctl	status,r2
  
  return context;
   1488c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   14890:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   14894:	0013aa80 	call	13aa8 <alt_tick>
   14898:	e0bffc17 	ldw	r2,-16(fp)
   1489c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148a0:	e0bffe17 	ldw	r2,-8(fp)
   148a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   148a8:	e037883a 	mov	sp,fp
   148ac:	dfc00117 	ldw	ra,4(sp)
   148b0:	df000017 	ldw	fp,0(sp)
   148b4:	dec00204 	addi	sp,sp,8
   148b8:	f800283a 	ret

000148bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   148bc:	defff804 	addi	sp,sp,-32
   148c0:	dfc00715 	stw	ra,28(sp)
   148c4:	df000615 	stw	fp,24(sp)
   148c8:	df000604 	addi	fp,sp,24
   148cc:	e13ffc15 	stw	r4,-16(fp)
   148d0:	e17ffd15 	stw	r5,-12(fp)
   148d4:	e1bffe15 	stw	r6,-8(fp)
   148d8:	e1ffff15 	stw	r7,-4(fp)
   148dc:	e0bfff17 	ldw	r2,-4(fp)
   148e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   148e4:	00800234 	movhi	r2,8
   148e8:	10aca904 	addi	r2,r2,-19804
   148ec:	10800017 	ldw	r2,0(r2)
   148f0:	1000041e 	bne	r2,zero,14904 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   148f4:	00800234 	movhi	r2,8
   148f8:	10aca904 	addi	r2,r2,-19804
   148fc:	e0fffb17 	ldw	r3,-20(fp)
   14900:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14904:	e0bffc17 	ldw	r2,-16(fp)
   14908:	10800104 	addi	r2,r2,4
   1490c:	00c001c4 	movi	r3,7
   14910:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14914:	d8000015 	stw	zero,0(sp)
   14918:	e13ffd17 	ldw	r4,-12(fp)
   1491c:	e17ffe17 	ldw	r5,-8(fp)
   14920:	01800074 	movhi	r6,1
   14924:	31921204 	addi	r6,r6,18504
   14928:	e1fffc17 	ldw	r7,-16(fp)
   1492c:	00131180 	call	13118 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   14930:	e037883a 	mov	sp,fp
   14934:	dfc00117 	ldw	ra,4(sp)
   14938:	df000017 	ldw	fp,0(sp)
   1493c:	dec00204 	addi	sp,sp,8
   14940:	f800283a 	ret

00014944 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14944:	defff504 	addi	sp,sp,-44
   14948:	df000a15 	stw	fp,40(sp)
   1494c:	df000a04 	addi	fp,sp,40
   14950:	e13ffc15 	stw	r4,-16(fp)
   14954:	e17ffd15 	stw	r5,-12(fp)
   14958:	e1bffe15 	stw	r6,-8(fp)
   1495c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14960:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14964:	00800234 	movhi	r2,8
   14968:	10aca904 	addi	r2,r2,-19804
   1496c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   14970:	10003f26 	beq	r2,zero,14a70 <alt_alarm_start+0x12c>
  {
    if (alarm)
   14974:	e0bffc17 	ldw	r2,-16(fp)
   14978:	10003b26 	beq	r2,zero,14a68 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1497c:	e0bffc17 	ldw	r2,-16(fp)
   14980:	e0fffe17 	ldw	r3,-8(fp)
   14984:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14988:	e0bffc17 	ldw	r2,-16(fp)
   1498c:	e0ffff17 	ldw	r3,-4(fp)
   14990:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14994:	0005303a 	rdctl	r2,status
   14998:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1499c:	e0fff817 	ldw	r3,-32(fp)
   149a0:	00bfff84 	movi	r2,-2
   149a4:	1884703a 	and	r2,r3,r2
   149a8:	1001703a 	wrctl	status,r2
  
  return context;
   149ac:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   149b0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   149b4:	00800234 	movhi	r2,8
   149b8:	10acaa04 	addi	r2,r2,-19800
   149bc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   149c0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   149c4:	e0fffd17 	ldw	r3,-12(fp)
   149c8:	e0bff617 	ldw	r2,-40(fp)
   149cc:	1885883a 	add	r2,r3,r2
   149d0:	10c00044 	addi	r3,r2,1
   149d4:	e0bffc17 	ldw	r2,-16(fp)
   149d8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   149dc:	e0bffc17 	ldw	r2,-16(fp)
   149e0:	10c00217 	ldw	r3,8(r2)
   149e4:	e0bff617 	ldw	r2,-40(fp)
   149e8:	1880042e 	bgeu	r3,r2,149fc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   149ec:	e0bffc17 	ldw	r2,-16(fp)
   149f0:	00c00044 	movi	r3,1
   149f4:	10c00405 	stb	r3,16(r2)
   149f8:	00000206 	br	14a04 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   149fc:	e0bffc17 	ldw	r2,-16(fp)
   14a00:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14a04:	e0bffc17 	ldw	r2,-16(fp)
   14a08:	00c001f4 	movhi	r3,7
   14a0c:	18df1304 	addi	r3,r3,31820
   14a10:	e0fff915 	stw	r3,-28(fp)
   14a14:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14a18:	e0bffa17 	ldw	r2,-24(fp)
   14a1c:	e0fff917 	ldw	r3,-28(fp)
   14a20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14a24:	e0bff917 	ldw	r2,-28(fp)
   14a28:	10c00017 	ldw	r3,0(r2)
   14a2c:	e0bffa17 	ldw	r2,-24(fp)
   14a30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14a34:	e0bff917 	ldw	r2,-28(fp)
   14a38:	10800017 	ldw	r2,0(r2)
   14a3c:	e0fffa17 	ldw	r3,-24(fp)
   14a40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14a44:	e0bff917 	ldw	r2,-28(fp)
   14a48:	e0fffa17 	ldw	r3,-24(fp)
   14a4c:	10c00015 	stw	r3,0(r2)
   14a50:	e0bff717 	ldw	r2,-36(fp)
   14a54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a58:	e0bffb17 	ldw	r2,-20(fp)
   14a5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14a60:	0005883a 	mov	r2,zero
   14a64:	00000306 	br	14a74 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   14a68:	00bffa84 	movi	r2,-22
   14a6c:	00000106 	br	14a74 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   14a70:	00bfde84 	movi	r2,-134
  }
}
   14a74:	e037883a 	mov	sp,fp
   14a78:	df000017 	ldw	fp,0(sp)
   14a7c:	dec00104 	addi	sp,sp,4
   14a80:	f800283a 	ret

00014a84 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   14a84:	defffa04 	addi	sp,sp,-24
   14a88:	dfc00515 	stw	ra,20(sp)
   14a8c:	df000415 	stw	fp,16(sp)
   14a90:	df000404 	addi	fp,sp,16
   14a94:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   14a98:	008000c4 	movi	r2,3
   14a9c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   14aa0:	e13ffd17 	ldw	r4,-12(fp)
   14aa4:	014003f4 	movhi	r5,15
   14aa8:	29509004 	addi	r5,r5,16960
   14aac:	0009dec0 	call	9dec <__mulsi3>
   14ab0:	01017db4 	movhi	r4,1526
   14ab4:	21384004 	addi	r4,r4,-7936
   14ab8:	100b883a 	mov	r5,r2
   14abc:	0009ddc0 	call	9ddc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   14ac0:	01200034 	movhi	r4,32768
   14ac4:	213fffc4 	addi	r4,r4,-1
   14ac8:	100b883a 	mov	r5,r2
   14acc:	0009ddc0 	call	9ddc <__udivsi3>
   14ad0:	e13fff17 	ldw	r4,-4(fp)
   14ad4:	100b883a 	mov	r5,r2
   14ad8:	0009ddc0 	call	9ddc <__udivsi3>
   14adc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   14ae0:	e0bffe17 	ldw	r2,-8(fp)
   14ae4:	10002926 	beq	r2,zero,14b8c <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   14ae8:	e03ffc15 	stw	zero,-16(fp)
   14aec:	00001606 	br	14b48 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   14af0:	00a00034 	movhi	r2,32768
   14af4:	10bfffc4 	addi	r2,r2,-1
   14af8:	10bfffc4 	addi	r2,r2,-1
   14afc:	103ffe1e 	bne	r2,zero,14af8 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   14b00:	e13ffd17 	ldw	r4,-12(fp)
   14b04:	014003f4 	movhi	r5,15
   14b08:	29509004 	addi	r5,r5,16960
   14b0c:	0009dec0 	call	9dec <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   14b10:	01017db4 	movhi	r4,1526
   14b14:	21384004 	addi	r4,r4,-7936
   14b18:	100b883a 	mov	r5,r2
   14b1c:	0009ddc0 	call	9ddc <__udivsi3>
   14b20:	01200034 	movhi	r4,32768
   14b24:	213fffc4 	addi	r4,r4,-1
   14b28:	100b883a 	mov	r5,r2
   14b2c:	0009ddc0 	call	9ddc <__udivsi3>
   14b30:	e0ffff17 	ldw	r3,-4(fp)
   14b34:	1885c83a 	sub	r2,r3,r2
   14b38:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   14b3c:	e0bffc17 	ldw	r2,-16(fp)
   14b40:	10800044 	addi	r2,r2,1
   14b44:	e0bffc15 	stw	r2,-16(fp)
   14b48:	e0fffc17 	ldw	r3,-16(fp)
   14b4c:	e0bffe17 	ldw	r2,-8(fp)
   14b50:	18bfe716 	blt	r3,r2,14af0 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14b54:	e13ffd17 	ldw	r4,-12(fp)
   14b58:	014003f4 	movhi	r5,15
   14b5c:	29509004 	addi	r5,r5,16960
   14b60:	0009dec0 	call	9dec <__mulsi3>
   14b64:	01017db4 	movhi	r4,1526
   14b68:	21384004 	addi	r4,r4,-7936
   14b6c:	100b883a 	mov	r5,r2
   14b70:	0009ddc0 	call	9ddc <__udivsi3>
   14b74:	1009883a 	mov	r4,r2
   14b78:	e17fff17 	ldw	r5,-4(fp)
   14b7c:	0009dec0 	call	9dec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   14b80:	10bfffc4 	addi	r2,r2,-1
   14b84:	103ffe1e 	bne	r2,zero,14b80 <alt_busy_sleep+0xfc>
   14b88:	00000d06 	br	14bc0 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14b8c:	e13ffd17 	ldw	r4,-12(fp)
   14b90:	014003f4 	movhi	r5,15
   14b94:	29509004 	addi	r5,r5,16960
   14b98:	0009dec0 	call	9dec <__mulsi3>
   14b9c:	01017db4 	movhi	r4,1526
   14ba0:	21384004 	addi	r4,r4,-7936
   14ba4:	100b883a 	mov	r5,r2
   14ba8:	0009ddc0 	call	9ddc <__udivsi3>
   14bac:	1009883a 	mov	r4,r2
   14bb0:	e17fff17 	ldw	r5,-4(fp)
   14bb4:	0009dec0 	call	9dec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   14bb8:	10bfffc4 	addi	r2,r2,-1
   14bbc:	00bffe16 	blt	zero,r2,14bb8 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   14bc0:	0005883a 	mov	r2,zero
}
   14bc4:	e037883a 	mov	sp,fp
   14bc8:	dfc00117 	ldw	ra,4(sp)
   14bcc:	df000017 	ldw	fp,0(sp)
   14bd0:	dec00204 	addi	sp,sp,8
   14bd4:	f800283a 	ret

00014bd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14bd8:	defffe04 	addi	sp,sp,-8
   14bdc:	dfc00115 	stw	ra,4(sp)
   14be0:	df000015 	stw	fp,0(sp)
   14be4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14be8:	008001f4 	movhi	r2,7
   14bec:	109f1004 	addi	r2,r2,31808
   14bf0:	10800017 	ldw	r2,0(r2)
   14bf4:	10000526 	beq	r2,zero,14c0c <alt_get_errno+0x34>
   14bf8:	008001f4 	movhi	r2,7
   14bfc:	109f1004 	addi	r2,r2,31808
   14c00:	10800017 	ldw	r2,0(r2)
   14c04:	103ee83a 	callr	r2
   14c08:	00000206 	br	14c14 <alt_get_errno+0x3c>
   14c0c:	00800234 	movhi	r2,8
   14c10:	10aca104 	addi	r2,r2,-19836
}
   14c14:	e037883a 	mov	sp,fp
   14c18:	dfc00117 	ldw	ra,4(sp)
   14c1c:	df000017 	ldw	fp,0(sp)
   14c20:	dec00204 	addi	sp,sp,8
   14c24:	f800283a 	ret

00014c28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14c28:	defffa04 	addi	sp,sp,-24
   14c2c:	dfc00515 	stw	ra,20(sp)
   14c30:	df000415 	stw	fp,16(sp)
   14c34:	df000404 	addi	fp,sp,16
   14c38:	e13ffe15 	stw	r4,-8(fp)
   14c3c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14c40:	e0bffe17 	ldw	r2,-8(fp)
   14c44:	10000326 	beq	r2,zero,14c54 <alt_dev_llist_insert+0x2c>
   14c48:	e0bffe17 	ldw	r2,-8(fp)
   14c4c:	10800217 	ldw	r2,8(r2)
   14c50:	1000051e 	bne	r2,zero,14c68 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   14c54:	0014bd80 	call	14bd8 <alt_get_errno>
   14c58:	00c00584 	movi	r3,22
   14c5c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   14c60:	00bffa84 	movi	r2,-22
   14c64:	00001306 	br	14cb4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14c68:	e0bffe17 	ldw	r2,-8(fp)
   14c6c:	e0ffff17 	ldw	r3,-4(fp)
   14c70:	e0fffc15 	stw	r3,-16(fp)
   14c74:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14c78:	e0bffd17 	ldw	r2,-12(fp)
   14c7c:	e0fffc17 	ldw	r3,-16(fp)
   14c80:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14c84:	e0bffc17 	ldw	r2,-16(fp)
   14c88:	10c00017 	ldw	r3,0(r2)
   14c8c:	e0bffd17 	ldw	r2,-12(fp)
   14c90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14c94:	e0bffc17 	ldw	r2,-16(fp)
   14c98:	10800017 	ldw	r2,0(r2)
   14c9c:	e0fffd17 	ldw	r3,-12(fp)
   14ca0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14ca4:	e0bffc17 	ldw	r2,-16(fp)
   14ca8:	e0fffd17 	ldw	r3,-12(fp)
   14cac:	10c00015 	stw	r3,0(r2)

  return 0;  
   14cb0:	0005883a 	mov	r2,zero
}
   14cb4:	e037883a 	mov	sp,fp
   14cb8:	dfc00117 	ldw	ra,4(sp)
   14cbc:	df000017 	ldw	fp,0(sp)
   14cc0:	dec00204 	addi	sp,sp,8
   14cc4:	f800283a 	ret

00014cc8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14cc8:	defffd04 	addi	sp,sp,-12
   14ccc:	dfc00215 	stw	ra,8(sp)
   14cd0:	df000115 	stw	fp,4(sp)
   14cd4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14cd8:	00800074 	movhi	r2,1
   14cdc:	10962504 	addi	r2,r2,22676
   14ce0:	e0bfff15 	stw	r2,-4(fp)
   14ce4:	00000606 	br	14d00 <_do_ctors+0x38>
        (*ctor) (); 
   14ce8:	e0bfff17 	ldw	r2,-4(fp)
   14cec:	10800017 	ldw	r2,0(r2)
   14cf0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14cf4:	e0bfff17 	ldw	r2,-4(fp)
   14cf8:	10bfff04 	addi	r2,r2,-4
   14cfc:	e0bfff15 	stw	r2,-4(fp)
   14d00:	e0ffff17 	ldw	r3,-4(fp)
   14d04:	00800074 	movhi	r2,1
   14d08:	10962604 	addi	r2,r2,22680
   14d0c:	18bff62e 	bgeu	r3,r2,14ce8 <_do_ctors+0x20>
        (*ctor) (); 
}
   14d10:	e037883a 	mov	sp,fp
   14d14:	dfc00117 	ldw	ra,4(sp)
   14d18:	df000017 	ldw	fp,0(sp)
   14d1c:	dec00204 	addi	sp,sp,8
   14d20:	f800283a 	ret

00014d24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14d24:	defffd04 	addi	sp,sp,-12
   14d28:	dfc00215 	stw	ra,8(sp)
   14d2c:	df000115 	stw	fp,4(sp)
   14d30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14d34:	00800074 	movhi	r2,1
   14d38:	10962504 	addi	r2,r2,22676
   14d3c:	e0bfff15 	stw	r2,-4(fp)
   14d40:	00000606 	br	14d5c <_do_dtors+0x38>
        (*dtor) (); 
   14d44:	e0bfff17 	ldw	r2,-4(fp)
   14d48:	10800017 	ldw	r2,0(r2)
   14d4c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14d50:	e0bfff17 	ldw	r2,-4(fp)
   14d54:	10bfff04 	addi	r2,r2,-4
   14d58:	e0bfff15 	stw	r2,-4(fp)
   14d5c:	e0ffff17 	ldw	r3,-4(fp)
   14d60:	00800074 	movhi	r2,1
   14d64:	10962604 	addi	r2,r2,22680
   14d68:	18bff62e 	bgeu	r3,r2,14d44 <_do_dtors+0x20>
        (*dtor) (); 
}
   14d6c:	e037883a 	mov	sp,fp
   14d70:	dfc00117 	ldw	ra,4(sp)
   14d74:	df000017 	ldw	fp,0(sp)
   14d78:	dec00204 	addi	sp,sp,8
   14d7c:	f800283a 	ret

00014d80 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14d80:	defffe04 	addi	sp,sp,-8
   14d84:	dfc00115 	stw	ra,4(sp)
   14d88:	df000015 	stw	fp,0(sp)
   14d8c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   14d90:	0009883a 	mov	r4,zero
   14d94:	01440004 	movi	r5,4096
   14d98:	00154380 	call	15438 <alt_icache_flush>
#endif
}
   14d9c:	e037883a 	mov	sp,fp
   14da0:	dfc00117 	ldw	ra,4(sp)
   14da4:	df000017 	ldw	fp,0(sp)
   14da8:	dec00204 	addi	sp,sp,8
   14dac:	f800283a 	ret

00014db0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14db0:	defff804 	addi	sp,sp,-32
   14db4:	dfc00715 	stw	ra,28(sp)
   14db8:	df000615 	stw	fp,24(sp)
   14dbc:	dc000515 	stw	r16,20(sp)
   14dc0:	df000504 	addi	fp,sp,20
   14dc4:	e13ffc15 	stw	r4,-16(fp)
   14dc8:	e17ffd15 	stw	r5,-12(fp)
   14dcc:	e1bffe15 	stw	r6,-8(fp)
   14dd0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14dd4:	e13ffd17 	ldw	r4,-12(fp)
   14dd8:	e17ffe17 	ldw	r5,-8(fp)
   14ddc:	e1bfff17 	ldw	r6,-4(fp)
   14de0:	00150480 	call	15048 <open>
   14de4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14de8:	e0bffb17 	ldw	r2,-20(fp)
   14dec:	10002216 	blt	r2,zero,14e78 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   14df0:	040001f4 	movhi	r16,7
   14df4:	841a8b04 	addi	r16,r16,27180
   14df8:	e0bffb17 	ldw	r2,-20(fp)
   14dfc:	1009883a 	mov	r4,r2
   14e00:	01400304 	movi	r5,12
   14e04:	0009dec0 	call	9dec <__mulsi3>
   14e08:	8085883a 	add	r2,r16,r2
   14e0c:	10c00017 	ldw	r3,0(r2)
   14e10:	e0bffc17 	ldw	r2,-16(fp)
   14e14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14e18:	040001f4 	movhi	r16,7
   14e1c:	841a8b04 	addi	r16,r16,27180
   14e20:	e0bffb17 	ldw	r2,-20(fp)
   14e24:	1009883a 	mov	r4,r2
   14e28:	01400304 	movi	r5,12
   14e2c:	0009dec0 	call	9dec <__mulsi3>
   14e30:	8085883a 	add	r2,r16,r2
   14e34:	10800104 	addi	r2,r2,4
   14e38:	10c00017 	ldw	r3,0(r2)
   14e3c:	e0bffc17 	ldw	r2,-16(fp)
   14e40:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14e44:	040001f4 	movhi	r16,7
   14e48:	841a8b04 	addi	r16,r16,27180
   14e4c:	e0bffb17 	ldw	r2,-20(fp)
   14e50:	1009883a 	mov	r4,r2
   14e54:	01400304 	movi	r5,12
   14e58:	0009dec0 	call	9dec <__mulsi3>
   14e5c:	8085883a 	add	r2,r16,r2
   14e60:	10800204 	addi	r2,r2,8
   14e64:	10c00017 	ldw	r3,0(r2)
   14e68:	e0bffc17 	ldw	r2,-16(fp)
   14e6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14e70:	e13ffb17 	ldw	r4,-20(fp)
   14e74:	00138e00 	call	138e0 <alt_release_fd>
  }
} 
   14e78:	e037883a 	mov	sp,fp
   14e7c:	dfc00217 	ldw	ra,8(sp)
   14e80:	df000117 	ldw	fp,4(sp)
   14e84:	dc000017 	ldw	r16,0(sp)
   14e88:	dec00304 	addi	sp,sp,12
   14e8c:	f800283a 	ret

00014e90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14e90:	defffb04 	addi	sp,sp,-20
   14e94:	dfc00415 	stw	ra,16(sp)
   14e98:	df000315 	stw	fp,12(sp)
   14e9c:	df000304 	addi	fp,sp,12
   14ea0:	e13ffd15 	stw	r4,-12(fp)
   14ea4:	e17ffe15 	stw	r5,-8(fp)
   14ea8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14eac:	010001f4 	movhi	r4,7
   14eb0:	211a8e04 	addi	r4,r4,27192
   14eb4:	e17ffd17 	ldw	r5,-12(fp)
   14eb8:	01800044 	movi	r6,1
   14ebc:	01c07fc4 	movi	r7,511
   14ec0:	0014db00 	call	14db0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14ec4:	010001f4 	movhi	r4,7
   14ec8:	211a8b04 	addi	r4,r4,27180
   14ecc:	e17ffe17 	ldw	r5,-8(fp)
   14ed0:	000d883a 	mov	r6,zero
   14ed4:	01c07fc4 	movi	r7,511
   14ed8:	0014db00 	call	14db0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14edc:	010001f4 	movhi	r4,7
   14ee0:	211a9104 	addi	r4,r4,27204
   14ee4:	e17fff17 	ldw	r5,-4(fp)
   14ee8:	01800044 	movi	r6,1
   14eec:	01c07fc4 	movi	r7,511
   14ef0:	0014db00 	call	14db0 <alt_open_fd>
}  
   14ef4:	e037883a 	mov	sp,fp
   14ef8:	dfc00117 	ldw	ra,4(sp)
   14efc:	df000017 	ldw	fp,0(sp)
   14f00:	dec00204 	addi	sp,sp,8
   14f04:	f800283a 	ret

00014f08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14f08:	defffe04 	addi	sp,sp,-8
   14f0c:	dfc00115 	stw	ra,4(sp)
   14f10:	df000015 	stw	fp,0(sp)
   14f14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14f18:	008001f4 	movhi	r2,7
   14f1c:	109f1004 	addi	r2,r2,31808
   14f20:	10800017 	ldw	r2,0(r2)
   14f24:	10000526 	beq	r2,zero,14f3c <alt_get_errno+0x34>
   14f28:	008001f4 	movhi	r2,7
   14f2c:	109f1004 	addi	r2,r2,31808
   14f30:	10800017 	ldw	r2,0(r2)
   14f34:	103ee83a 	callr	r2
   14f38:	00000206 	br	14f44 <alt_get_errno+0x3c>
   14f3c:	00800234 	movhi	r2,8
   14f40:	10aca104 	addi	r2,r2,-19836
}
   14f44:	e037883a 	mov	sp,fp
   14f48:	dfc00117 	ldw	ra,4(sp)
   14f4c:	df000017 	ldw	fp,0(sp)
   14f50:	dec00204 	addi	sp,sp,8
   14f54:	f800283a 	ret

00014f58 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14f58:	defffb04 	addi	sp,sp,-20
   14f5c:	dfc00415 	stw	ra,16(sp)
   14f60:	df000315 	stw	fp,12(sp)
   14f64:	dc000215 	stw	r16,8(sp)
   14f68:	df000204 	addi	fp,sp,8
   14f6c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14f70:	e0bfff17 	ldw	r2,-4(fp)
   14f74:	10800217 	ldw	r2,8(r2)
   14f78:	10d00034 	orhi	r3,r2,16384
   14f7c:	e0bfff17 	ldw	r2,-4(fp)
   14f80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14f84:	e03ffe15 	stw	zero,-8(fp)
   14f88:	00002206 	br	15014 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14f8c:	040001f4 	movhi	r16,7
   14f90:	841a8b04 	addi	r16,r16,27180
   14f94:	e0bffe17 	ldw	r2,-8(fp)
   14f98:	1009883a 	mov	r4,r2
   14f9c:	01400304 	movi	r5,12
   14fa0:	0009dec0 	call	9dec <__mulsi3>
   14fa4:	8085883a 	add	r2,r16,r2
   14fa8:	10c00017 	ldw	r3,0(r2)
   14fac:	e0bfff17 	ldw	r2,-4(fp)
   14fb0:	10800017 	ldw	r2,0(r2)
   14fb4:	1880141e 	bne	r3,r2,15008 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14fb8:	040001f4 	movhi	r16,7
   14fbc:	841a8b04 	addi	r16,r16,27180
   14fc0:	e0bffe17 	ldw	r2,-8(fp)
   14fc4:	1009883a 	mov	r4,r2
   14fc8:	01400304 	movi	r5,12
   14fcc:	0009dec0 	call	9dec <__mulsi3>
   14fd0:	8085883a 	add	r2,r16,r2
   14fd4:	10800204 	addi	r2,r2,8
   14fd8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14fdc:	10000a0e 	bge	r2,zero,15008 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14fe0:	e13ffe17 	ldw	r4,-8(fp)
   14fe4:	01400304 	movi	r5,12
   14fe8:	0009dec0 	call	9dec <__mulsi3>
   14fec:	00c001f4 	movhi	r3,7
   14ff0:	18da8b04 	addi	r3,r3,27180
   14ff4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14ff8:	e0bfff17 	ldw	r2,-4(fp)
   14ffc:	18800226 	beq	r3,r2,15008 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15000:	00bffcc4 	movi	r2,-13
   15004:	00000a06 	br	15030 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15008:	e0bffe17 	ldw	r2,-8(fp)
   1500c:	10800044 	addi	r2,r2,1
   15010:	e0bffe15 	stw	r2,-8(fp)
   15014:	008001f4 	movhi	r2,7
   15018:	109f0f04 	addi	r2,r2,31804
   1501c:	10800017 	ldw	r2,0(r2)
   15020:	1007883a 	mov	r3,r2
   15024:	e0bffe17 	ldw	r2,-8(fp)
   15028:	18bfd82e 	bgeu	r3,r2,14f8c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1502c:	0005883a 	mov	r2,zero
}
   15030:	e037883a 	mov	sp,fp
   15034:	dfc00217 	ldw	ra,8(sp)
   15038:	df000117 	ldw	fp,4(sp)
   1503c:	dc000017 	ldw	r16,0(sp)
   15040:	dec00304 	addi	sp,sp,12
   15044:	f800283a 	ret

00015048 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15048:	defff604 	addi	sp,sp,-40
   1504c:	dfc00915 	stw	ra,36(sp)
   15050:	df000815 	stw	fp,32(sp)
   15054:	df000804 	addi	fp,sp,32
   15058:	e13ffd15 	stw	r4,-12(fp)
   1505c:	e17ffe15 	stw	r5,-8(fp)
   15060:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15064:	00bfffc4 	movi	r2,-1
   15068:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1506c:	00bffb44 	movi	r2,-19
   15070:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15074:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15078:	e13ffd17 	ldw	r4,-12(fp)
   1507c:	014001f4 	movhi	r5,7
   15080:	295f0d04 	addi	r5,r5,31796
   15084:	00151c00 	call	151c0 <alt_find_dev>
   15088:	e0bff815 	stw	r2,-32(fp)
   1508c:	e0bff817 	ldw	r2,-32(fp)
   15090:	1000051e 	bne	r2,zero,150a8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15094:	e13ffd17 	ldw	r4,-12(fp)
   15098:	00152500 	call	15250 <alt_find_file>
   1509c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   150a0:	00800044 	movi	r2,1
   150a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   150a8:	e0bff817 	ldw	r2,-32(fp)
   150ac:	10002a26 	beq	r2,zero,15158 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   150b0:	e13ff817 	ldw	r4,-32(fp)
   150b4:	00153640 	call	15364 <alt_get_fd>
   150b8:	e0bff915 	stw	r2,-28(fp)
   150bc:	e0bff917 	ldw	r2,-28(fp)
   150c0:	1000030e 	bge	r2,zero,150d0 <open+0x88>
    {
      status = index;
   150c4:	e0bff917 	ldw	r2,-28(fp)
   150c8:	e0bffa15 	stw	r2,-24(fp)
   150cc:	00002406 	br	15160 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   150d0:	e13ff917 	ldw	r4,-28(fp)
   150d4:	01400304 	movi	r5,12
   150d8:	0009dec0 	call	9dec <__mulsi3>
   150dc:	00c001f4 	movhi	r3,7
   150e0:	18da8b04 	addi	r3,r3,27180
   150e4:	10c5883a 	add	r2,r2,r3
   150e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   150ec:	e0fffe17 	ldw	r3,-8(fp)
   150f0:	00900034 	movhi	r2,16384
   150f4:	10bfffc4 	addi	r2,r2,-1
   150f8:	1886703a 	and	r3,r3,r2
   150fc:	e0bffc17 	ldw	r2,-16(fp)
   15100:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15104:	e0bffb17 	ldw	r2,-20(fp)
   15108:	1000051e 	bne	r2,zero,15120 <open+0xd8>
   1510c:	e13ffc17 	ldw	r4,-16(fp)
   15110:	0014f580 	call	14f58 <alt_file_locked>
   15114:	e0bffa15 	stw	r2,-24(fp)
   15118:	e0bffa17 	ldw	r2,-24(fp)
   1511c:	10001016 	blt	r2,zero,15160 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15120:	e0bff817 	ldw	r2,-32(fp)
   15124:	10800317 	ldw	r2,12(r2)
   15128:	10000826 	beq	r2,zero,1514c <open+0x104>
   1512c:	e0bff817 	ldw	r2,-32(fp)
   15130:	10800317 	ldw	r2,12(r2)
   15134:	e13ffc17 	ldw	r4,-16(fp)
   15138:	e17ffd17 	ldw	r5,-12(fp)
   1513c:	e1bffe17 	ldw	r6,-8(fp)
   15140:	e1ffff17 	ldw	r7,-4(fp)
   15144:	103ee83a 	callr	r2
   15148:	00000106 	br	15150 <open+0x108>
   1514c:	0005883a 	mov	r2,zero
   15150:	e0bffa15 	stw	r2,-24(fp)
   15154:	00000206 	br	15160 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15158:	00bffb44 	movi	r2,-19
   1515c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15160:	e0bffa17 	ldw	r2,-24(fp)
   15164:	1000080e 	bge	r2,zero,15188 <open+0x140>
  {
    alt_release_fd (index);  
   15168:	e13ff917 	ldw	r4,-28(fp)
   1516c:	00138e00 	call	138e0 <alt_release_fd>
    ALT_ERRNO = -status;
   15170:	0014f080 	call	14f08 <alt_get_errno>
   15174:	e0fffa17 	ldw	r3,-24(fp)
   15178:	00c7c83a 	sub	r3,zero,r3
   1517c:	10c00015 	stw	r3,0(r2)
    return -1;
   15180:	00bfffc4 	movi	r2,-1
   15184:	00000106 	br	1518c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   15188:	e0bff917 	ldw	r2,-28(fp)
}
   1518c:	e037883a 	mov	sp,fp
   15190:	dfc00117 	ldw	ra,4(sp)
   15194:	df000017 	ldw	fp,0(sp)
   15198:	dec00204 	addi	sp,sp,8
   1519c:	f800283a 	ret

000151a0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   151a0:	deffff04 	addi	sp,sp,-4
   151a4:	df000015 	stw	fp,0(sp)
   151a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   151ac:	000170fa 	wrctl	ienable,zero
}
   151b0:	e037883a 	mov	sp,fp
   151b4:	df000017 	ldw	fp,0(sp)
   151b8:	dec00104 	addi	sp,sp,4
   151bc:	f800283a 	ret

000151c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   151c0:	defffa04 	addi	sp,sp,-24
   151c4:	dfc00515 	stw	ra,20(sp)
   151c8:	df000415 	stw	fp,16(sp)
   151cc:	df000404 	addi	fp,sp,16
   151d0:	e13ffe15 	stw	r4,-8(fp)
   151d4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   151d8:	e0bfff17 	ldw	r2,-4(fp)
   151dc:	10800017 	ldw	r2,0(r2)
   151e0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   151e4:	e13ffe17 	ldw	r4,-8(fp)
   151e8:	000b1080 	call	b108 <strlen>
   151ec:	10800044 	addi	r2,r2,1
   151f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   151f4:	00000d06 	br	1522c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   151f8:	e0bffc17 	ldw	r2,-16(fp)
   151fc:	10c00217 	ldw	r3,8(r2)
   15200:	e0bffd17 	ldw	r2,-12(fp)
   15204:	1809883a 	mov	r4,r3
   15208:	e17ffe17 	ldw	r5,-8(fp)
   1520c:	100d883a 	mov	r6,r2
   15210:	00155100 	call	15510 <memcmp>
   15214:	1000021e 	bne	r2,zero,15220 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15218:	e0bffc17 	ldw	r2,-16(fp)
   1521c:	00000706 	br	1523c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15220:	e0bffc17 	ldw	r2,-16(fp)
   15224:	10800017 	ldw	r2,0(r2)
   15228:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1522c:	e0fffc17 	ldw	r3,-16(fp)
   15230:	e0bfff17 	ldw	r2,-4(fp)
   15234:	18bff01e 	bne	r3,r2,151f8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15238:	0005883a 	mov	r2,zero
}
   1523c:	e037883a 	mov	sp,fp
   15240:	dfc00117 	ldw	ra,4(sp)
   15244:	df000017 	ldw	fp,0(sp)
   15248:	dec00204 	addi	sp,sp,8
   1524c:	f800283a 	ret

00015250 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15250:	defffb04 	addi	sp,sp,-20
   15254:	dfc00415 	stw	ra,16(sp)
   15258:	df000315 	stw	fp,12(sp)
   1525c:	df000304 	addi	fp,sp,12
   15260:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15264:	008001f4 	movhi	r2,7
   15268:	109f0b04 	addi	r2,r2,31788
   1526c:	10800017 	ldw	r2,0(r2)
   15270:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15274:	00003106 	br	1533c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   15278:	e0bffd17 	ldw	r2,-12(fp)
   1527c:	10800217 	ldw	r2,8(r2)
   15280:	1009883a 	mov	r4,r2
   15284:	000b1080 	call	b108 <strlen>
   15288:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1528c:	e0bffd17 	ldw	r2,-12(fp)
   15290:	10c00217 	ldw	r3,8(r2)
   15294:	e0bffe17 	ldw	r2,-8(fp)
   15298:	10bfffc4 	addi	r2,r2,-1
   1529c:	1885883a 	add	r2,r3,r2
   152a0:	10800003 	ldbu	r2,0(r2)
   152a4:	10803fcc 	andi	r2,r2,255
   152a8:	1080201c 	xori	r2,r2,128
   152ac:	10bfe004 	addi	r2,r2,-128
   152b0:	10800bd8 	cmpnei	r2,r2,47
   152b4:	1000031e 	bne	r2,zero,152c4 <alt_find_file+0x74>
    {
      len -= 1;
   152b8:	e0bffe17 	ldw	r2,-8(fp)
   152bc:	10bfffc4 	addi	r2,r2,-1
   152c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   152c4:	e0bffe17 	ldw	r2,-8(fp)
   152c8:	e0ffff17 	ldw	r3,-4(fp)
   152cc:	1885883a 	add	r2,r3,r2
   152d0:	10800003 	ldbu	r2,0(r2)
   152d4:	10803fcc 	andi	r2,r2,255
   152d8:	1080201c 	xori	r2,r2,128
   152dc:	10bfe004 	addi	r2,r2,-128
   152e0:	10800be0 	cmpeqi	r2,r2,47
   152e4:	1000081e 	bne	r2,zero,15308 <alt_find_file+0xb8>
   152e8:	e0bffe17 	ldw	r2,-8(fp)
   152ec:	e0ffff17 	ldw	r3,-4(fp)
   152f0:	1885883a 	add	r2,r3,r2
   152f4:	10800003 	ldbu	r2,0(r2)
   152f8:	10803fcc 	andi	r2,r2,255
   152fc:	1080201c 	xori	r2,r2,128
   15300:	10bfe004 	addi	r2,r2,-128
   15304:	10000a1e 	bne	r2,zero,15330 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   15308:	e0bffd17 	ldw	r2,-12(fp)
   1530c:	10c00217 	ldw	r3,8(r2)
   15310:	e0bffe17 	ldw	r2,-8(fp)
   15314:	1809883a 	mov	r4,r3
   15318:	e17fff17 	ldw	r5,-4(fp)
   1531c:	100d883a 	mov	r6,r2
   15320:	00155100 	call	15510 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15324:	1000021e 	bne	r2,zero,15330 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15328:	e0bffd17 	ldw	r2,-12(fp)
   1532c:	00000806 	br	15350 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   15330:	e0bffd17 	ldw	r2,-12(fp)
   15334:	10800017 	ldw	r2,0(r2)
   15338:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1533c:	e0fffd17 	ldw	r3,-12(fp)
   15340:	008001f4 	movhi	r2,7
   15344:	109f0b04 	addi	r2,r2,31788
   15348:	18bfcb1e 	bne	r3,r2,15278 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1534c:	0005883a 	mov	r2,zero
}
   15350:	e037883a 	mov	sp,fp
   15354:	dfc00117 	ldw	ra,4(sp)
   15358:	df000017 	ldw	fp,0(sp)
   1535c:	dec00204 	addi	sp,sp,8
   15360:	f800283a 	ret

00015364 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15364:	defffa04 	addi	sp,sp,-24
   15368:	dfc00515 	stw	ra,20(sp)
   1536c:	df000415 	stw	fp,16(sp)
   15370:	dc000315 	stw	r16,12(sp)
   15374:	df000304 	addi	fp,sp,12
   15378:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1537c:	00bffa04 	movi	r2,-24
   15380:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15384:	e03ffd15 	stw	zero,-12(fp)
   15388:	00002106 	br	15410 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1538c:	040001f4 	movhi	r16,7
   15390:	841a8b04 	addi	r16,r16,27180
   15394:	e0bffd17 	ldw	r2,-12(fp)
   15398:	1009883a 	mov	r4,r2
   1539c:	01400304 	movi	r5,12
   153a0:	0009dec0 	call	9dec <__mulsi3>
   153a4:	8085883a 	add	r2,r16,r2
   153a8:	10800017 	ldw	r2,0(r2)
   153ac:	1000151e 	bne	r2,zero,15404 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   153b0:	040001f4 	movhi	r16,7
   153b4:	841a8b04 	addi	r16,r16,27180
   153b8:	e0bffd17 	ldw	r2,-12(fp)
   153bc:	1009883a 	mov	r4,r2
   153c0:	01400304 	movi	r5,12
   153c4:	0009dec0 	call	9dec <__mulsi3>
   153c8:	8085883a 	add	r2,r16,r2
   153cc:	e0ffff17 	ldw	r3,-4(fp)
   153d0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   153d4:	008001f4 	movhi	r2,7
   153d8:	109f0f04 	addi	r2,r2,31804
   153dc:	10c00017 	ldw	r3,0(r2)
   153e0:	e0bffd17 	ldw	r2,-12(fp)
   153e4:	1880040e 	bge	r3,r2,153f8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   153e8:	008001f4 	movhi	r2,7
   153ec:	109f0f04 	addi	r2,r2,31804
   153f0:	e0fffd17 	ldw	r3,-12(fp)
   153f4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   153f8:	e0bffd17 	ldw	r2,-12(fp)
   153fc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   15400:	00000606 	br	1541c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15404:	e0bffd17 	ldw	r2,-12(fp)
   15408:	10800044 	addi	r2,r2,1
   1540c:	e0bffd15 	stw	r2,-12(fp)
   15410:	e0bffd17 	ldw	r2,-12(fp)
   15414:	10800810 	cmplti	r2,r2,32
   15418:	103fdc1e 	bne	r2,zero,1538c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1541c:	e0bffe17 	ldw	r2,-8(fp)
}
   15420:	e037883a 	mov	sp,fp
   15424:	dfc00217 	ldw	ra,8(sp)
   15428:	df000117 	ldw	fp,4(sp)
   1542c:	dc000017 	ldw	r16,0(sp)
   15430:	dec00304 	addi	sp,sp,12
   15434:	f800283a 	ret

00015438 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   15438:	defffb04 	addi	sp,sp,-20
   1543c:	df000415 	stw	fp,16(sp)
   15440:	df000404 	addi	fp,sp,16
   15444:	e13ffe15 	stw	r4,-8(fp)
   15448:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1544c:	e0bfff17 	ldw	r2,-4(fp)
   15450:	10840070 	cmpltui	r2,r2,4097
   15454:	1000021e 	bne	r2,zero,15460 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   15458:	00840004 	movi	r2,4096
   1545c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   15460:	e0fffe17 	ldw	r3,-8(fp)
   15464:	e0bfff17 	ldw	r2,-4(fp)
   15468:	1885883a 	add	r2,r3,r2
   1546c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15470:	e0bffe17 	ldw	r2,-8(fp)
   15474:	e0bffc15 	stw	r2,-16(fp)
   15478:	00000506 	br	15490 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1547c:	e0bffc17 	ldw	r2,-16(fp)
   15480:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15484:	e0bffc17 	ldw	r2,-16(fp)
   15488:	10800804 	addi	r2,r2,32
   1548c:	e0bffc15 	stw	r2,-16(fp)
   15490:	e0fffc17 	ldw	r3,-16(fp)
   15494:	e0bffd17 	ldw	r2,-12(fp)
   15498:	18bff836 	bltu	r3,r2,1547c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1549c:	e0bffe17 	ldw	r2,-8(fp)
   154a0:	108007cc 	andi	r2,r2,31
   154a4:	10000226 	beq	r2,zero,154b0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   154a8:	e0bffc17 	ldw	r2,-16(fp)
   154ac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   154b0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   154b4:	e037883a 	mov	sp,fp
   154b8:	df000017 	ldw	fp,0(sp)
   154bc:	dec00104 	addi	sp,sp,4
   154c0:	f800283a 	ret

000154c4 <atexit>:
   154c4:	200b883a 	mov	r5,r4
   154c8:	000d883a 	mov	r6,zero
   154cc:	0009883a 	mov	r4,zero
   154d0:	000f883a 	mov	r7,zero
   154d4:	001558c1 	jmpi	1558c <__register_exitproc>

000154d8 <exit>:
   154d8:	defffe04 	addi	sp,sp,-8
   154dc:	000b883a 	mov	r5,zero
   154e0:	dc000015 	stw	r16,0(sp)
   154e4:	dfc00115 	stw	ra,4(sp)
   154e8:	2021883a 	mov	r16,r4
   154ec:	00156bc0 	call	156bc <__call_exitprocs>
   154f0:	008001f4 	movhi	r2,7
   154f4:	109f0604 	addi	r2,r2,31768
   154f8:	11000017 	ldw	r4,0(r2)
   154fc:	20800f17 	ldw	r2,60(r4)
   15500:	10000126 	beq	r2,zero,15508 <exit+0x30>
   15504:	103ee83a 	callr	r2
   15508:	8009883a 	mov	r4,r16
   1550c:	001585c0 	call	1585c <_exit>

00015510 <memcmp>:
   15510:	01c000c4 	movi	r7,3
   15514:	3980192e 	bgeu	r7,r6,1557c <memcmp+0x6c>
   15518:	2904b03a 	or	r2,r5,r4
   1551c:	11c4703a 	and	r2,r2,r7
   15520:	10000f26 	beq	r2,zero,15560 <memcmp+0x50>
   15524:	20c00003 	ldbu	r3,0(r4)
   15528:	28800003 	ldbu	r2,0(r5)
   1552c:	1880151e 	bne	r3,r2,15584 <memcmp+0x74>
   15530:	31bfff84 	addi	r6,r6,-2
   15534:	01ffffc4 	movi	r7,-1
   15538:	00000406 	br	1554c <memcmp+0x3c>
   1553c:	20c00003 	ldbu	r3,0(r4)
   15540:	28800003 	ldbu	r2,0(r5)
   15544:	31bfffc4 	addi	r6,r6,-1
   15548:	18800e1e 	bne	r3,r2,15584 <memcmp+0x74>
   1554c:	21000044 	addi	r4,r4,1
   15550:	29400044 	addi	r5,r5,1
   15554:	31fff91e 	bne	r6,r7,1553c <memcmp+0x2c>
   15558:	0005883a 	mov	r2,zero
   1555c:	f800283a 	ret
   15560:	20c00017 	ldw	r3,0(r4)
   15564:	28800017 	ldw	r2,0(r5)
   15568:	1880041e 	bne	r3,r2,1557c <memcmp+0x6c>
   1556c:	31bfff04 	addi	r6,r6,-4
   15570:	21000104 	addi	r4,r4,4
   15574:	29400104 	addi	r5,r5,4
   15578:	39bff936 	bltu	r7,r6,15560 <memcmp+0x50>
   1557c:	303fe91e 	bne	r6,zero,15524 <memcmp+0x14>
   15580:	003ff506 	br	15558 <memcmp+0x48>
   15584:	1885c83a 	sub	r2,r3,r2
   15588:	f800283a 	ret

0001558c <__register_exitproc>:
   1558c:	defffa04 	addi	sp,sp,-24
   15590:	008001f4 	movhi	r2,7
   15594:	109f0604 	addi	r2,r2,31768
   15598:	dc000315 	stw	r16,12(sp)
   1559c:	14000017 	ldw	r16,0(r2)
   155a0:	dc400415 	stw	r17,16(sp)
   155a4:	dfc00515 	stw	ra,20(sp)
   155a8:	80805217 	ldw	r2,328(r16)
   155ac:	2023883a 	mov	r17,r4
   155b0:	10003e26 	beq	r2,zero,156ac <__register_exitproc+0x120>
   155b4:	10c00117 	ldw	r3,4(r2)
   155b8:	020007c4 	movi	r8,31
   155bc:	40c0180e 	bge	r8,r3,15620 <__register_exitproc+0x94>
   155c0:	00800074 	movhi	r2,1
   155c4:	10a91804 	addi	r2,r2,-23456
   155c8:	1000061e 	bne	r2,zero,155e4 <__register_exitproc+0x58>
   155cc:	00bfffc4 	movi	r2,-1
   155d0:	dfc00517 	ldw	ra,20(sp)
   155d4:	dc400417 	ldw	r17,16(sp)
   155d8:	dc000317 	ldw	r16,12(sp)
   155dc:	dec00604 	addi	sp,sp,24
   155e0:	f800283a 	ret
   155e4:	01006404 	movi	r4,400
   155e8:	d9400015 	stw	r5,0(sp)
   155ec:	d9800115 	stw	r6,4(sp)
   155f0:	d9c00215 	stw	r7,8(sp)
   155f4:	000a4600 	call	a460 <malloc>
   155f8:	d9400017 	ldw	r5,0(sp)
   155fc:	d9800117 	ldw	r6,4(sp)
   15600:	d9c00217 	ldw	r7,8(sp)
   15604:	103ff126 	beq	r2,zero,155cc <__register_exitproc+0x40>
   15608:	80c05217 	ldw	r3,328(r16)
   1560c:	10000115 	stw	zero,4(r2)
   15610:	10c00015 	stw	r3,0(r2)
   15614:	80805215 	stw	r2,328(r16)
   15618:	10006215 	stw	zero,392(r2)
   1561c:	10006315 	stw	zero,396(r2)
   15620:	10c00117 	ldw	r3,4(r2)
   15624:	88000d1e 	bne	r17,zero,1565c <__register_exitproc+0xd0>
   15628:	19000084 	addi	r4,r3,2
   1562c:	2109883a 	add	r4,r4,r4
   15630:	18c00044 	addi	r3,r3,1
   15634:	2109883a 	add	r4,r4,r4
   15638:	1109883a 	add	r4,r2,r4
   1563c:	10c00115 	stw	r3,4(r2)
   15640:	0005883a 	mov	r2,zero
   15644:	21400015 	stw	r5,0(r4)
   15648:	dfc00517 	ldw	ra,20(sp)
   1564c:	dc400417 	ldw	r17,16(sp)
   15650:	dc000317 	ldw	r16,12(sp)
   15654:	dec00604 	addi	sp,sp,24
   15658:	f800283a 	ret
   1565c:	02400044 	movi	r9,1
   15660:	12806217 	ldw	r10,392(r2)
   15664:	48d2983a 	sll	r9,r9,r3
   15668:	19000804 	addi	r4,r3,32
   1566c:	18d1883a 	add	r8,r3,r3
   15670:	2109883a 	add	r4,r4,r4
   15674:	4211883a 	add	r8,r8,r8
   15678:	2109883a 	add	r4,r4,r4
   1567c:	1109883a 	add	r4,r2,r4
   15680:	1211883a 	add	r8,r2,r8
   15684:	5254b03a 	or	r10,r10,r9
   15688:	21c02215 	stw	r7,136(r4)
   1568c:	41802215 	stw	r6,136(r8)
   15690:	12806215 	stw	r10,392(r2)
   15694:	01000084 	movi	r4,2
   15698:	893fe31e 	bne	r17,r4,15628 <__register_exitproc+0x9c>
   1569c:	11006317 	ldw	r4,396(r2)
   156a0:	2252b03a 	or	r9,r4,r9
   156a4:	12406315 	stw	r9,396(r2)
   156a8:	003fdf06 	br	15628 <__register_exitproc+0x9c>
   156ac:	00800234 	movhi	r2,8
   156b0:	10acf504 	addi	r2,r2,-19500
   156b4:	80805215 	stw	r2,328(r16)
   156b8:	003fbe06 	br	155b4 <__register_exitproc+0x28>

000156bc <__call_exitprocs>:
   156bc:	008001f4 	movhi	r2,7
   156c0:	109f0604 	addi	r2,r2,31768
   156c4:	10800017 	ldw	r2,0(r2)
   156c8:	defff304 	addi	sp,sp,-52
   156cc:	df000b15 	stw	fp,44(sp)
   156d0:	d8800015 	stw	r2,0(sp)
   156d4:	10805204 	addi	r2,r2,328
   156d8:	dd400815 	stw	r21,32(sp)
   156dc:	dfc00c15 	stw	ra,48(sp)
   156e0:	ddc00a15 	stw	r23,40(sp)
   156e4:	dd800915 	stw	r22,36(sp)
   156e8:	dd000715 	stw	r20,28(sp)
   156ec:	dcc00615 	stw	r19,24(sp)
   156f0:	dc800515 	stw	r18,20(sp)
   156f4:	dc400415 	stw	r17,16(sp)
   156f8:	dc000315 	stw	r16,12(sp)
   156fc:	d9000115 	stw	r4,4(sp)
   15700:	2839883a 	mov	fp,r5
   15704:	d8800215 	stw	r2,8(sp)
   15708:	057fffc4 	movi	r21,-1
   1570c:	d8800017 	ldw	r2,0(sp)
   15710:	ddc00217 	ldw	r23,8(sp)
   15714:	14805217 	ldw	r18,328(r2)
   15718:	90001726 	beq	r18,zero,15778 <__call_exitprocs+0xbc>
   1571c:	94400117 	ldw	r17,4(r18)
   15720:	8c3fffc4 	addi	r16,r17,-1
   15724:	80001116 	blt	r16,zero,1576c <__call_exitprocs+0xb0>
   15728:	8c400044 	addi	r17,r17,1
   1572c:	8427883a 	add	r19,r16,r16
   15730:	8c63883a 	add	r17,r17,r17
   15734:	95802204 	addi	r22,r18,136
   15738:	9ce7883a 	add	r19,r19,r19
   1573c:	8c63883a 	add	r17,r17,r17
   15740:	b4e7883a 	add	r19,r22,r19
   15744:	9463883a 	add	r17,r18,r17
   15748:	e0001726 	beq	fp,zero,157a8 <__call_exitprocs+0xec>
   1574c:	8c87c83a 	sub	r3,r17,r18
   15750:	b0c7883a 	add	r3,r22,r3
   15754:	18c01e17 	ldw	r3,120(r3)
   15758:	1f001326 	beq	r3,fp,157a8 <__call_exitprocs+0xec>
   1575c:	843fffc4 	addi	r16,r16,-1
   15760:	9cffff04 	addi	r19,r19,-4
   15764:	8c7fff04 	addi	r17,r17,-4
   15768:	857ff71e 	bne	r16,r21,15748 <__call_exitprocs+0x8c>
   1576c:	00800074 	movhi	r2,1
   15770:	10a91d04 	addi	r2,r2,-23436
   15774:	10002a1e 	bne	r2,zero,15820 <__call_exitprocs+0x164>
   15778:	dfc00c17 	ldw	ra,48(sp)
   1577c:	df000b17 	ldw	fp,44(sp)
   15780:	ddc00a17 	ldw	r23,40(sp)
   15784:	dd800917 	ldw	r22,36(sp)
   15788:	dd400817 	ldw	r21,32(sp)
   1578c:	dd000717 	ldw	r20,28(sp)
   15790:	dcc00617 	ldw	r19,24(sp)
   15794:	dc800517 	ldw	r18,20(sp)
   15798:	dc400417 	ldw	r17,16(sp)
   1579c:	dc000317 	ldw	r16,12(sp)
   157a0:	dec00d04 	addi	sp,sp,52
   157a4:	f800283a 	ret
   157a8:	91000117 	ldw	r4,4(r18)
   157ac:	88c00017 	ldw	r3,0(r17)
   157b0:	213fffc4 	addi	r4,r4,-1
   157b4:	24001526 	beq	r4,r16,1580c <__call_exitprocs+0x150>
   157b8:	88000015 	stw	zero,0(r17)
   157bc:	183fe726 	beq	r3,zero,1575c <__call_exitprocs+0xa0>
   157c0:	00800044 	movi	r2,1
   157c4:	1408983a 	sll	r4,r2,r16
   157c8:	91406217 	ldw	r5,392(r18)
   157cc:	95000117 	ldw	r20,4(r18)
   157d0:	214a703a 	and	r5,r4,r5
   157d4:	28000b26 	beq	r5,zero,15804 <__call_exitprocs+0x148>
   157d8:	91406317 	ldw	r5,396(r18)
   157dc:	2148703a 	and	r4,r4,r5
   157e0:	20000c1e 	bne	r4,zero,15814 <__call_exitprocs+0x158>
   157e4:	99400017 	ldw	r5,0(r19)
   157e8:	d9000117 	ldw	r4,4(sp)
   157ec:	183ee83a 	callr	r3
   157f0:	90c00117 	ldw	r3,4(r18)
   157f4:	1d3fc51e 	bne	r3,r20,1570c <__call_exitprocs+0x50>
   157f8:	b8c00017 	ldw	r3,0(r23)
   157fc:	1cbfd726 	beq	r3,r18,1575c <__call_exitprocs+0xa0>
   15800:	003fc206 	br	1570c <__call_exitprocs+0x50>
   15804:	183ee83a 	callr	r3
   15808:	003ff906 	br	157f0 <__call_exitprocs+0x134>
   1580c:	94000115 	stw	r16,4(r18)
   15810:	003fea06 	br	157bc <__call_exitprocs+0x100>
   15814:	99000017 	ldw	r4,0(r19)
   15818:	183ee83a 	callr	r3
   1581c:	003ff406 	br	157f0 <__call_exitprocs+0x134>
   15820:	90c00117 	ldw	r3,4(r18)
   15824:	1800071e 	bne	r3,zero,15844 <__call_exitprocs+0x188>
   15828:	90c00017 	ldw	r3,0(r18)
   1582c:	18000926 	beq	r3,zero,15854 <__call_exitprocs+0x198>
   15830:	9009883a 	mov	r4,r18
   15834:	b8c00015 	stw	r3,0(r23)
   15838:	000a4740 	call	a474 <free>
   1583c:	bc800017 	ldw	r18,0(r23)
   15840:	003fb506 	br	15718 <__call_exitprocs+0x5c>
   15844:	90c00017 	ldw	r3,0(r18)
   15848:	902f883a 	mov	r23,r18
   1584c:	1825883a 	mov	r18,r3
   15850:	003fb106 	br	15718 <__call_exitprocs+0x5c>
   15854:	0007883a 	mov	r3,zero
   15858:	003ffb06 	br	15848 <__call_exitprocs+0x18c>

0001585c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1585c:	defffc04 	addi	sp,sp,-16
   15860:	df000315 	stw	fp,12(sp)
   15864:	df000304 	addi	fp,sp,12
   15868:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1586c:	0001883a 	nop
   15870:	e0bfff17 	ldw	r2,-4(fp)
   15874:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   15878:	e0bffd17 	ldw	r2,-12(fp)
   1587c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15880:	e0bffe17 	ldw	r2,-8(fp)
   15884:	10000226 	beq	r2,zero,15890 <_exit+0x34>
    ALT_SIM_FAIL();
   15888:	002af070 	cmpltui	zero,zero,43969
   1588c:	00000106 	br	15894 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   15890:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15894:	003fff06 	br	15894 <_exit+0x38>

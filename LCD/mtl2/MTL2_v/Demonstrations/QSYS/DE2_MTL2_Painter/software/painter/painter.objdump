
painter.elf:     file format elf32-littlenios2
painter.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00074be0 memsz 0x00074be0 flags r-x
    LOAD off    0x00075c00 vaddr 0x00074c00 paddr 0x00078224 align 2**12
         filesz 0x00003624 memsz 0x00003624 flags rw-
    LOAD off    0x00079848 vaddr 0x0007b848 paddr 0x0007b848 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015c94  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0005edb8  00015e48  00015e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003624  00074c00  00078224  00075c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  0007b848  0007b848  00079848  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00079224  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f98  00000000  00000000  00079250  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001f4f  00000000  00000000  0007a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000300d4  00000000  00000000  0007c137  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000977b  00000000  00000000  000ac20b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b40a  00000000  00000000  000b5986  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000028f8  00000000  00000000  000d0d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002bbd  00000000  00000000  000d3688  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ddbd  00000000  00000000  000d6245  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000e4004  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a08  00000000  00000000  000e4068  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000ea56f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000ea572  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000ea575  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000ea576  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000ea577  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000ea57b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000ea57f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000ea583  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000ea58c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000ea595  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  000ea59e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000027  00000000  00000000  000ea5a2  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000760ca  00000000  00000000  000ea5c9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00015e48 l    d  .rodata	00000000 .rodata
00074c00 l    d  .rwdata	00000000 .rwdata
0007b848 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
00015e48 l     O .rodata	000000b6 tahomabold_20_33
00015efe l     O .rodata	00000104 tahomabold_20_34
00016002 l     O .rodata	000001a0 tahomabold_20_35
000161a2 l     O .rodata	00000152 tahomabold_20_36
000162f4 l     O .rodata	00000270 tahomabold_20_37
00016564 l     O .rodata	000001ba tahomabold_20_38
0001671e l     O .rodata	0000009c tahomabold_20_39
000167ba l     O .rodata	000000ea tahomabold_20_40
000168a4 l     O .rodata	000000ea tahomabold_20_41
0001698e l     O .rodata	00000152 tahomabold_20_42
00016ae0 l     O .rodata	000001a0 tahomabold_20_43
00016c80 l     O .rodata	0000009c tahomabold_20_44
00016d1c l     O .rodata	000000ea tahomabold_20_45
00016e06 l     O .rodata	0000009c tahomabold_20_46
00016ea2 l     O .rodata	00000138 tahomabold_20_47
00016fda l     O .rodata	00000152 tahomabold_20_48
0001712c l     O .rodata	00000152 tahomabold_20_49
0001727e l     O .rodata	00000152 tahomabold_20_50
000173d0 l     O .rodata	00000152 tahomabold_20_51
00017522 l     O .rodata	00000152 tahomabold_20_52
00017674 l     O .rodata	00000152 tahomabold_20_53
000177c6 l     O .rodata	00000152 tahomabold_20_54
00017918 l     O .rodata	00000152 tahomabold_20_55
00017a6a l     O .rodata	00000152 tahomabold_20_56
00017bbc l     O .rodata	00000152 tahomabold_20_57
00017d0e l     O .rodata	000000b6 tahomabold_20_58
00017dc4 l     O .rodata	000000b6 tahomabold_20_59
00017e7a l     O .rodata	000001a0 tahomabold_20_60
0001801a l     O .rodata	000001a0 tahomabold_20_61
000181ba l     O .rodata	000001a0 tahomabold_20_62
0001835a l     O .rodata	0000011e tahomabold_20_63
00018478 l     O .rodata	000001d4 tahomabold_20_64
0001864c l     O .rodata	0000016c tahomabold_20_65
000187b8 l     O .rodata	0000016c tahomabold_20_66
00018924 l     O .rodata	00000152 tahomabold_20_67
00018a76 l     O .rodata	00000186 tahomabold_20_68
00018bfc l     O .rodata	00000138 tahomabold_20_69
00018d34 l     O .rodata	00000138 tahomabold_20_70
00018e6c l     O .rodata	00000186 tahomabold_20_71
00018ff2 l     O .rodata	00000186 tahomabold_20_72
00019178 l     O .rodata	00000104 tahomabold_20_73
0001927c l     O .rodata	00000104 tahomabold_20_74
00019380 l     O .rodata	0000016c tahomabold_20_75
000194ec l     O .rodata	0000011e tahomabold_20_76
0001960a l     O .rodata	000001d4 tahomabold_20_77
000197de l     O .rodata	00000186 tahomabold_20_78
00019964 l     O .rodata	00000186 tahomabold_20_79
00019aea l     O .rodata	00000152 tahomabold_20_80
00019c3c l     O .rodata	00000186 tahomabold_20_81
00019dc2 l     O .rodata	00000186 tahomabold_20_82
00019f48 l     O .rodata	00000152 tahomabold_20_83
0001a09a l     O .rodata	00000138 tahomabold_20_84
0001a1d2 l     O .rodata	00000186 tahomabold_20_85
0001a358 l     O .rodata	0000016c tahomabold_20_86
0001a4c4 l     O .rodata	00000222 tahomabold_20_87
0001a6e6 l     O .rodata	0000016c tahomabold_20_88
0001a852 l     O .rodata	0000016c tahomabold_20_89
0001a9be l     O .rodata	00000138 tahomabold_20_90
0001aaf6 l     O .rodata	000000ea tahomabold_20_91
0001abe0 l     O .rodata	00000138 tahomabold_20_92
0001ad18 l     O .rodata	000000ea tahomabold_20_93
0001ae02 l     O .rodata	000001a0 tahomabold_20_94
0001afa2 l     O .rodata	00000152 tahomabold_20_95
0001b0f4 l     O .rodata	0000011e tahomabold_20_96
0001b212 l     O .rodata	00000138 tahomabold_20_97
0001b34a l     O .rodata	00000152 tahomabold_20_98
0001b49c l     O .rodata	0000011e tahomabold_20_99
0001b5ba l     O .rodata	00000152 tahomabold_20_100
0001b70c l     O .rodata	00000138 tahomabold_20_101
0001b844 l     O .rodata	000000d0 tahomabold_20_102
0001b914 l     O .rodata	00000152 tahomabold_20_103
0001ba66 l     O .rodata	00000152 tahomabold_20_104
0001bbb8 l     O .rodata	0000009c tahomabold_20_105
0001bc54 l     O .rodata	000000ea tahomabold_20_106
0001bd3e l     O .rodata	00000138 tahomabold_20_107
0001be76 l     O .rodata	0000009c tahomabold_20_108
0001bf12 l     O .rodata	000001ee tahomabold_20_109
0001c100 l     O .rodata	00000152 tahomabold_20_110
0001c252 l     O .rodata	00000138 tahomabold_20_111
0001c38a l     O .rodata	00000152 tahomabold_20_112
0001c4dc l     O .rodata	00000152 tahomabold_20_113
0001c62e l     O .rodata	000000ea tahomabold_20_114
0001c718 l     O .rodata	00000104 tahomabold_20_115
0001c81c l     O .rodata	000000d0 tahomabold_20_116
0001c8ec l     O .rodata	00000152 tahomabold_20_117
0001ca3e l     O .rodata	00000138 tahomabold_20_118
0001cb76 l     O .rodata	000001d4 tahomabold_20_119
0001cd4a l     O .rodata	00000138 tahomabold_20_120
0001ce82 l     O .rodata	00000138 tahomabold_20_121
0001cfba l     O .rodata	0000011e tahomabold_20_122
0001d0d8 l     O .rodata	00000138 tahomabold_20_123
0001d210 l     O .rodata	00000152 tahomabold_20_124
0001d362 l     O .rodata	00000138 tahomabold_20_125
0001d49a l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
0001d63a l     O .rodata	000001b8 tahomabold_32_33
0001d7f2 l     O .rodata	00000280 tahomabold_32_34
0001da72 l     O .rodata	00000410 tahomabold_32_35
0001de82 l     O .rodata	00000320 tahomabold_32_36
0001e1a2 l     O .rodata	000005f0 tahomabold_32_37
0001e792 l     O .rodata	00000410 tahomabold_32_38
0001eba2 l     O .rodata	00000168 tahomabold_32_39
0001ed0a l     O .rodata	00000258 tahomabold_32_40
0001ef62 l     O .rodata	00000258 tahomabold_32_41
0001f1ba l     O .rodata	00000320 tahomabold_32_42
0001f4da l     O .rodata	00000410 tahomabold_32_43
0001f8ea l     O .rodata	00000190 tahomabold_32_44
0001fa7a l     O .rodata	00000230 tahomabold_32_45
0001fcaa l     O .rodata	00000190 tahomabold_32_46
0001fe3a l     O .rodata	000002d0 tahomabold_32_47
0002010a l     O .rodata	00000320 tahomabold_32_48
0002042a l     O .rodata	00000320 tahomabold_32_49
0002074a l     O .rodata	00000320 tahomabold_32_50
00020a6a l     O .rodata	00000320 tahomabold_32_51
00020d8a l     O .rodata	00000320 tahomabold_32_52
000210aa l     O .rodata	00000320 tahomabold_32_53
000213ca l     O .rodata	00000320 tahomabold_32_54
000216ea l     O .rodata	00000320 tahomabold_32_55
00021a0a l     O .rodata	00000320 tahomabold_32_56
00021d2a l     O .rodata	00000320 tahomabold_32_57
0002204a l     O .rodata	000001e0 tahomabold_32_58
0002222a l     O .rodata	000001e0 tahomabold_32_59
0002240a l     O .rodata	00000410 tahomabold_32_60
0002281a l     O .rodata	00000410 tahomabold_32_61
00022c2a l     O .rodata	00000410 tahomabold_32_62
0002303a l     O .rodata	000002d0 tahomabold_32_63
0002330a l     O .rodata	00000488 tahomabold_32_64
00023792 l     O .rodata	00000370 tahomabold_32_65
00023b02 l     O .rodata	00000370 tahomabold_32_66
00023e72 l     O .rodata	00000348 tahomabold_32_67
000241ba l     O .rodata	000003c0 tahomabold_32_68
0002457a l     O .rodata	00000320 tahomabold_32_69
0002489a l     O .rodata	000002f8 tahomabold_32_70
00024b92 l     O .rodata	000003c0 tahomabold_32_71
00024f52 l     O .rodata	000003c0 tahomabold_32_72
00025312 l     O .rodata	00000258 tahomabold_32_73
0002556a l     O .rodata	00000280 tahomabold_32_74
000257ea l     O .rodata	00000398 tahomabold_32_75
00025b82 l     O .rodata	000002d0 tahomabold_32_76
00025e52 l     O .rodata	00000488 tahomabold_32_77
000262da l     O .rodata	000003e8 tahomabold_32_78
000266c2 l     O .rodata	000003e8 tahomabold_32_79
00026aaa l     O .rodata	00000348 tahomabold_32_80
00026df2 l     O .rodata	000003e8 tahomabold_32_81
000271da l     O .rodata	000003c0 tahomabold_32_82
0002759a l     O .rodata	00000320 tahomabold_32_83
000278ba l     O .rodata	00000320 tahomabold_32_84
00027bda l     O .rodata	000003c0 tahomabold_32_85
00027f9a l     O .rodata	00000370 tahomabold_32_86
0002830a l     O .rodata	00000528 tahomabold_32_87
00028832 l     O .rodata	00000370 tahomabold_32_88
00028ba2 l     O .rodata	00000370 tahomabold_32_89
00028f12 l     O .rodata	00000320 tahomabold_32_90
00029232 l     O .rodata	00000258 tahomabold_32_91
0002948a l     O .rodata	000002d0 tahomabold_32_92
0002975a l     O .rodata	00000258 tahomabold_32_93
000299b2 l     O .rodata	00000410 tahomabold_32_94
00029dc2 l     O .rodata	00000320 tahomabold_32_95
0002a0e2 l     O .rodata	000002a8 tahomabold_32_96
0002a38a l     O .rodata	000002f8 tahomabold_32_97
0002a682 l     O .rodata	00000320 tahomabold_32_98
0002a9a2 l     O .rodata	000002a8 tahomabold_32_99
0002ac4a l     O .rodata	00000320 tahomabold_32_100
0002af6a l     O .rodata	000002f8 tahomabold_32_101
0002b262 l     O .rodata	00000230 tahomabold_32_102
0002b492 l     O .rodata	00000320 tahomabold_32_103
0002b7b2 l     O .rodata	00000320 tahomabold_32_104
0002bad2 l     O .rodata	00000190 tahomabold_32_105
0002bc62 l     O .rodata	00000208 tahomabold_32_106
0002be6a l     O .rodata	000002f8 tahomabold_32_107
0002c162 l     O .rodata	00000190 tahomabold_32_108
0002c2f2 l     O .rodata	000004d8 tahomabold_32_109
0002c7ca l     O .rodata	00000320 tahomabold_32_110
0002caea l     O .rodata	00000320 tahomabold_32_111
0002ce0a l     O .rodata	00000320 tahomabold_32_112
0002d12a l     O .rodata	00000320 tahomabold_32_113
0002d44a l     O .rodata	00000230 tahomabold_32_114
0002d67a l     O .rodata	00000280 tahomabold_32_115
0002d8fa l     O .rodata	00000208 tahomabold_32_116
0002db02 l     O .rodata	00000320 tahomabold_32_117
0002de22 l     O .rodata	000002f8 tahomabold_32_118
0002e11a l     O .rodata	00000460 tahomabold_32_119
0002e57a l     O .rodata	000002f8 tahomabold_32_120
0002e872 l     O .rodata	000002d0 tahomabold_32_121
0002eb42 l     O .rodata	000002a8 tahomabold_32_122
0002edea l     O .rodata	00000320 tahomabold_32_123
0002f10a l     O .rodata	00000320 tahomabold_32_124
0002f42a l     O .rodata	00000320 tahomabold_32_125
0002f74a l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 gesture.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
000781dc l     O .rwdata	00000004 y.4275
0007b848 l     O .bss	00000004 x.4274
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 multi_touch2.c
00007e3c l     F .text	00000344 mtc2_QueryData
00008180 l     F .text	00000068 mtc2_ISR
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 vip_fr.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009190 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009f08 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
000767bc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000b388 l     F .text	00000058 __sprint_r
00074a4e l     O .rodata	00000010 blanks.3452
00074a3e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d4f8 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000ef20 l     F .text	00000058 std
0000f02c l     F .text	00000008 __fp_lock
0000f034 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000781f8 l     O .rwdata	00000004 charset
00074a80 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00074bc8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
000132b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00013358 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001345c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001384c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001392c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013a8c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013cbc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00078218 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00014148 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00077178 l     O .rwdata	00001060 jtag_uart
00014234 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014474 l     F .text	00000228 altera_avalon_jtag_uart_irq
0001469c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014d18 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001517c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000152d4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00015424 l     F .text	000000f8 alt_file_locked
000156a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00015c30 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00015de4 l     F .text	00000040 alt_sim_halt
0000b06c g     F .text	0000001c putchar
0000154c g     F .text	000002ec vid_draw_horiz_line
00010498 g     F .text	00000094 _mprec_log10
000061b4 g     F .text	0000011c I2C_Read
00010584 g     F .text	00000088 __any_on
00011fd4 g     F .text	00000070 _isatty_r
00074ba0 g     O .rodata	00000028 __mprec_tinytens
00013aec g     F .text	0000006c alt_main
0000b288 g     F .text	0000008c strcpy
0000b090 g     F .text	000000a0 _puts_r
0007b8a8 g     O .bss	00000100 alt_irq
00012044 g     F .text	00000078 _lseek_r
00007334 g     F .text	00000074 ACK_check
00001924 g     F .text	00000068 vid_color_convert16_24
00008d60 g     F .text	00000130 sqrt
00006fc0 g     F .text	00000094 I2CL_Read16
00078224 g       *ABS*	00000000 __flash_rwdata_start
0000729c g     F .text	00000098 ACK_single_check
00012e00 g     F .text	00000088 __eqdf2
0007bb38 g       *ABS*	00000000 __alt_heap_start
00008598 g     F .text	00000064 QUEUE_IsFull
0000aff4 g     F .text	00000044 printf
00004100 g     F .text	000001e0 GUI_DeskInit
00011940 g     F .text	00000068 __sseek
0000ef88 g     F .text	000000a4 __sinit
00011b40 g     F .text	00000130 __swbuf_r
0000fc94 g     F .text	00000084 _setlocale_r
0000f088 g     F .text	0000009c __sfmoreglue
00013b78 g     F .text	00000020 __malloc_unlock
00000e90 g     F .text	0000013c vid_draw_box
000005bc g     F .text	00000044 PtCopy
00003464 g     F .text	00000278 vid_print_string_alpha
0000ffac g     F .text	000000e0 memmove
000073a8 g     F .text	0000021c OC_I2C_Write
0000494c g     F .text	000002f0 GUI_ShowGesture
0000f078 g     F .text	00000010 _cleanup
0001060c g     F .text	000000bc _Balloc
00076380 g     O .rwdata	00000415 cour10_font_array
00012f10 g     F .text	00000088 __gtdf2
00000c60 g     F .text	0000011c vid_move_block
0000a744 g     F .text	00000010 __errno
00006e20 g     F .text	000001a0 I2CL_MultipleWrite
0000400c g     F .text	000000f4 vid_string_pixel_length_alpha
000066d4 g     F .text	0000013c i2c_write
00000000 g     F .entry	0000001c __reset
00008aac g     F .text	00000080 DRAW_EraseScreen
00005f1c g     F .text	00000040 my_wait
00000020 g       *ABS*	00000000 __flash_exceptions_start
00011f60 g     F .text	00000074 _fstat_r
0007b858 g     O .bss	00000004 errno
000062d0 g     F .text	0000017c I2C_Read16
0007b870 g     O .bss	00000004 alt_argv
000801d8 g       *ABS*	00000000 _gp
00013ff4 g     F .text	00000030 usleep
000056e4 g     F .text	0000009c VPG_ColorPanel
000036dc g     F .text	00000154 seperate_color_channels
00076ff8 g     O .rwdata	00000180 alt_fd_list
00008c78 g     F .text	00000038 FrameReader_Go
0000b088 g     F .text	00000008 _putchar_r
00015728 g     F .text	00000094 alt_find_dev
0000aebc g     F .text	000000a0 memcpy
0000f06c g     F .text	0000000c _cleanup_r
00009d38 g     F .text	000000f8 __floatsidf
00002414 g     F .text	00000688 vid_round_corner_points
000153ac g     F .text	00000078 alt_io_redirect
00009cb0 g     F .text	00000088 __ltdf2
0000847c g     F .text	00000034 MTC2_ClearEvent
00015e48 g       *ABS*	00000000 __DTOR_END__
000042e0 g     F .text	00000094 GUI_CheckButton
0000b130 g     F .text	00000014 puts
00000600 g     F .text	00000058 vid_clean_screen
000103e8 g     F .text	000000b0 __ratio
00008550 g     F .text	00000048 QUEUE_IsEmpty
00000750 g     F .text	0000014c vid_scroll_string_init
000148b4 g     F .text	00000224 altera_avalon_jtag_uart_read
0000a768 g     F .text	00000014 malloc
0000b038 g     F .text	00000034 _printf_r
0000a044 g     F .text	00000008 __udivsi3
00013788 g     F .text	000000c4 isatty
00074ab0 g     O .rodata	000000c8 __mprec_tens
00008324 g     F .text	00000158 MTC2_GetStatus
0000fc70 g     F .text	00000008 __locale_charset
0000d37c g     F .text	00000040 vsnprintf
00004374 g     F .text	0000051c GUI_DeskDraw
000159ac g     F .text	00000090 alt_icache_flush
0000644c g     F .text	00000180 I2C_MultipleRead
0007b84c g     O .bss	00000004 __malloc_top_pad
00008728 g     F .text	00000030 QUEUE_Empty
000781f4 g     O .rwdata	00000004 __mb_cur_max
0000fc78 g     F .text	0000000c _localeconv_r
00010d70 g     F .text	0000003c __i2b
0000f654 g     F .text	0000049c __sfvwrite_r
00008694 g     F .text	00000094 QUEUE_Pop
0000b144 g     F .text	00000070 _sbrk_r
000004c8 g     F .text	00000034 RectHeight
00008a04 g     F .text	000000a8 VIPFR_ActiveDrawFrame
00008b2c g     F .text	0000008c FrameReader_SetFrame0
000120bc g     F .text	00000078 _read_r
00076fc4 g     O .rwdata	0000000c __lc_ctype
0007820c g     O .rwdata	00000004 alt_max_fd
0000a544 g     F .text	00000138 __unpack_d
0000562c g     F .text	000000b8 VPG_XLine
00011e3c g     F .text	00000110 _fclose_r
0000eeec g     F .text	00000034 fflush
0007b850 g     O .bss	00000004 __malloc_max_sbrked_mem
00006ab8 g     F .text	00000188 I2CL_Read
000757c0 g     O .rwdata	00000bc0 tahomabold_32
00009620 g     F .text	00000074 __adddf3
00004c7c g     F .text	000000ac GUI_ClearPaintArea
00000284 g     F .text	00000040 PtSet
000102c8 g     F .text	00000120 __b2d
000127a0 g     F .text	00000660 __umoddi3
00013998 g     F .text	000000f4 lseek
000781e0 g     O .rwdata	00000004 __fdlib_version
000781e8 g     O .rwdata	00000004 _global_impure_ptr
00001edc g     F .text	0000016c vid_draw_circle
00011304 g     F .text	000005f4 _realloc_r
0007bb38 g       *ABS*	00000000 __bss_end
00013690 g     F .text	000000f8 alt_iic_isr_register
00013ee8 g     F .text	0000010c alt_tick
00006058 g     F .text	0000015c I2C_Write16
000003a8 g     F .text	00000088 RectOffset
000081e8 g     F .text	000000f4 MTC2_Init
00012134 g     F .text	0000066c __udivdi3
00074b78 g     O .rodata	00000028 __mprec_bigtens
00010ff8 g     F .text	00000120 __s2b
00001c60 g     F .text	0000027c vid_draw_sloped_line
00013020 g     F .text	00000194 __floatunsidf
000101e8 g     F .text	00000060 __mcmp
00005874 g     F .text	000000e0 VPG_VGrid
0000f054 g     F .text	00000018 __fp_lock_all
00013648 g     F .text	00000048 alt_ic_irq_enabled
00005f5c g     F .text	000000fc I2C_Write
00002048 g     F .text	000003cc vid_draw_round_corner_box
00007820 g     F .text	00000218 OC_I2CL_Write
00013e50 g     F .text	00000098 alt_alarm_stop
0007b868 g     O .bss	00000004 alt_irq_active
000075c4 g     F .text	00000068 ACK_judge_for_read
000000ec g     F .exceptions	000000c8 alt_irq_handler
00076fd0 g     O .rwdata	00000028 alt_dev_null
000070e8 g     F .text	00000058 Write32_Data
00007054 g     F .text	00000094 I2CL_Write16
000065cc g     F .text	00000088 i2c_start
00013314 g     F .text	00000044 alt_dcache_flush_all
000100b4 g     F .text	00000070 __hi0bits
00009e30 g     F .text	000000d8 __fixdfsi
00078224 g       *ABS*	00000000 __ram_rwdata_end
00002f14 g     F .text	00000348 vid_draw_triangle
00078204 g     O .rwdata	00000008 alt_dev_list
00014024 g     F .text	00000124 write
0001121c g     F .text	000000e8 _putc_r
00076798 g     O .rwdata	00000024 szPallete
00003338 g     F .text	0000012c CropImage16
00074c00 g       *ABS*	00000000 __ram_rodata_end
00013384 g     F .text	000000d8 fstat
0000089c g     F .text	000003c4 vid_scroll_string
00007cd8 g     F .text	00000060 myprintf
00010ed8 g     F .text	00000120 __pow5mult
0007b85c g     O .bss	00000004 __nlocale_changed
0000a04c g     F .text	00000008 __umodsi3
00000494 g     F .text	00000034 RectWidth
0000325c g     F .text	000000dc CopyImage16
0007bb38 g       *ABS*	00000000 end
00005d24 g     F .text	00000128 GUI_VPG
00008970 g     F .text	00000040 VIPFR_Go
00005508 g     F .text	00000064 GUI_ShowInfo
000143b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
00000fcc g     F .text	000000ec vid_print_char
00015e44 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00014d88 g     F .text	00000090 alt_avalon_timer_sc_init
0000a1b0 g     F .text	00000080 __clzsi2
00014ad8 g     F .text	00000240 altera_avalon_jtag_uart_write
00005ba8 g     F .text	0000017c GUI_ShowPAT
00002af0 g     F .text	00000054 min3
00000658 g     F .text	000000bc vid_draw_line
00008758 g     F .text	000000cc VIPFR_Init
0000ef78 g     F .text	00000004 __sfp_lock_acquire
0000fec8 g     F .text	000000e4 memchr
0000b3e0 g     F .text	00001ec4 ___vfprintf_internal_r
0000b228 g     F .text	00000060 _sprintf_r
0000f340 g     F .text	00000314 _free_r
00015c34 g     F .text	000001b0 __call_exitprocs
0007b860 g     O .bss	00000004 __mlocale_changed
00005780 g     F .text	000000f4 VPG_Grid
000781f0 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
0007b878 g     O .bss	00000004 _alt_tick_rate
000082dc g     F .text	00000048 MTC2_UnInit
000109d0 g     F .text	0000014c __lshift
000085fc g     F .text	00000098 QUEUE_Push
0007b87c g     O .bss	00000004 _alt_nticks
00002ba8 g     F .text	0000010c vid_put_pixel_in_span_map
00013b98 g     F .text	00000124 read
00008824 g     F .text	0000003c VIPFR_UnInit
00005a34 g     F .text	00000174 VPG_ColorBar
000141dc g     F .text	00000058 alt_sys_init
00015afc g     F .text	00000134 __register_exitproc
00010b1c g     F .text	00000254 __multiply
000012c0 g     F .text	0000028c vid_paint_block
0001474c g     F .text	00000074 altera_avalon_jtag_uart_close
0000a054 g     F .text	00000038 __mulsi3
00074c00 g       *ABS*	00000000 __ram_rwdata_start
00015e48 g       *ABS*	00000000 __ram_rodata_start
0007b880 g     O .bss	00000028 __malloc_current_mallinfo
000106c8 g     F .text	0000017c __d2b
00005954 g     F .text	000000e0 VPG_HGrid
00001884 g     F .text	000000a0 vid_color_convert24_16
0001426c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000158dc g     F .text	000000d0 alt_get_fd
00014f6c g     F .text	0000015c alt_busy_sleep
0000a67c g     F .text	000000c8 __fpcmp_parts_d
00011dcc g     F .text	00000070 _close_r
00004d28 g     F .text	000007e0 GUI
00003bb8 g     F .text	000002a8 alpha_blending
00015a88 g     F .text	00000074 memcmp
0001431c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0007bb38 g       *ABS*	00000000 __alt_stack_base
00014364 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0002fb5c g     O .rodata	000448f0 gesture_bmp
0000d3bc g     F .text	0000013c __swsetup_r
00007198 g     F .text	00000104 oc_i2c_init
00009a58 g     F .text	00000258 __divdf3
0000f124 g     F .text	000000f0 __sfp
0001052c g     F .text	00000058 __copybits
00076bbc g     O .rwdata	00000408 __malloc_av_
0000ef84 g     F .text	00000004 __sinit_lock_release
0000d2c8 g     F .text	000000b4 _vsnprintf_r
00006654 g     F .text	00000080 i2c_stop
00009694 g     F .text	000003c4 __muldf3
00011a24 g     F .text	00000060 __sread
000157bc g     F .text	00000120 alt_find_file
000150c8 g     F .text	000000b4 alt_dev_llist_insert
00013b58 g     F .text	00000020 __malloc_lock
0000198c g     F .text	000002d4 vid_copy_line_to_frame_buffer
00013d94 g     F .text	000000bc sbrk
0000ecf0 g     F .text	000001fc _fflush_r
00011d04 g     F .text	000000c8 _calloc_r
000084b0 g     F .text	00000070 QUEUE_New
0007b848 g       *ABS*	00000000 __bss_start
0000af5c g     F .text	00000098 memset
00005e4c g     F .text	000000d0 main
0007b874 g     O .bss	00000004 alt_envp
0007b854 g     O .bss	00000004 __malloc_max_total_mem
00007d38 g     F .text	00000080 myprintf_hexarray
000142c4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000556c g     F .text	00000060 GUI_ShowTouchPoint
00006810 g     F .text	0000014c i2c_read
00011c70 g     F .text	0000001c __swbuf
00008c44 g     F .text	00000034 FrameReader_SelectFrame
00074c00 g     O .rwdata	00000bc0 tahomabold_20
00011938 g     F .text	00000008 __sclose
00009188 g     F .text	00000008 matherr
00800000 g       *ABS*	00000000 __alt_heap_limit
00003e60 g     F .text	000001ac vid_print_char_alpha
00011f4c g     F .text	00000014 fclose
000781d8 g     O .rwdata	00000004 cour10_font
0007b9a8 g     O .bss	00000190 _atexit0
0000d73c g     F .text	000015b4 _dtoa_r
0000a77c g     F .text	00000740 _malloc_r
00078210 g     O .rwdata	00000004 alt_errno
0000fbb8 g     F .text	000000b8 _fwalk
000004fc g     F .text	000000c0 PtDistance
000002c4 g     F .text	0000005c RectSet
00011118 g     F .text	00000104 putc
00009f84 g     F .text	00000060 __divsi3
00000430 g     F .text	00000064 RectCopy
000748c4 g     O .rodata	00000014 __thenan_df
0000f214 g     F .text	0000012c _malloc_trim_r
00015e48 g       *ABS*	00000000 __CTOR_END__
000089b0 g     F .text	00000054 VIPFR_GetDrawFrame
00011a84 g     F .text	000000bc strcmp
00003988 g     F .text	00000230 read_from_frame
00015e48 g       *ABS*	00000000 __flash_rodata_start
00015e48 g       *ABS*	00000000 __DTOR_LIST__
00001240 g     F .text	00000080 vid_get_pixel
00012e88 g     F .text	00000088 __nedf2
000141a8 g     F .text	00000034 alt_irq_init
00013d1c g     F .text	00000078 alt_release_fd
0000b1b4 g     F .text	00000074 sprintf
000748d8 g     O .rodata	00000100 __clz_tab
00007ca8 g     F .text	00000030 debug_output
0007b864 g     O .bss	00000004 _PathLocale
00015a3c g     F .text	00000014 atexit
00011c8c g     F .text	00000078 _write_r
00000200 g     F .text	00000084 IsPtInRect
0000fd18 g     F .text	0000001c setlocale
000781e4 g     O .rwdata	00000004 _impure_ptr
0007b86c g     O .bss	00000004 alt_argc
00015240 g     F .text	00000064 _do_dtors
00007db8 g     F .text	00000084 myprintf_dwordarray
00006c40 g     F .text	000001e0 I2CL_MultipleRead
00000020 g       .exceptions	00000000 alt_irq_entry
00010248 g     F .text	00000080 __ulp
000118f8 g     F .text	00000040 __isinfd
0000f03c g     F .text	00000018 __fp_unlock_all
000781fc g     O .rwdata	00000008 alt_fs_list
00007140 g     F .text	00000058 Read32_Data
00000d7c g     F .text	00000114 vid_print_string
0000762c g     F .text	000001f4 OC_I2C_Read
00008bb8 g     F .text	0000008c FrameReader_SetFrame1
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000fc84 g     F .text	00000010 localeconv
00008e90 g     F .text	000002c8 __ieee754_sqrt
000134bc g     F .text	00000050 alt_ic_isr_register
00078224 g       *ABS*	00000000 _edata
00004c3c g     F .text	00000040 GUI_TraceGesture
0007bb38 g       *ABS*	00000000 _end
000055cc g     F .text	00000060 ShowInfo
00002a9c g     F .text	00000054 max3
000001b4 g       *ABS*	00000000 __ram_exceptions_end
000147c0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00008cb0 g     F .text	000000b0 VIPFR_ReserveBackground
000135a8 g     F .text	000000a0 alt_ic_irq_disable
00001838 g     F .text	0000004c vid_merge_colors
000119a8 g     F .text	0000007c __swrite
000781ec g     O .rwdata	00000004 __malloc_trim_threshold
00015708 g     F .text	00000020 altera_nios2_qsys_irq_init
00015a50 g     F .text	00000038 exit
0000faf0 g     F .text	000000c8 _fwalk_reent
00010844 g     F .text	0000018c __mdiff
00004890 g     F .text	000000bc IsContinuedPoint
00009fe4 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000ef7c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00008520 g     F .text	00000030 QUEUE_Delete
000010b8 g     F .text	00000188 vid_set_pixel
00008860 g     F .text	00000110 VIPFR_SetFrameSize
00007a38 g     F .text	00000270 OC_I2CL_Read
00015e24 g     F .text	00000020 _exit
00009158 g     F .text	00000030 __isnand
00014e18 g     F .text	00000154 alt_alarm_start
00000714 g     F .text	0000003c vid_scroll_string_quit
0000a08c g     F .text	00000124 __muldi3
0000fd34 g     F .text	00000194 __smakebuf_r
0000b314 g     F .text	00000074 strlen
0001551c g     F .text	0000018c open
00012f98 g     F .text	00000088 __gedf2
00000320 g     F .text	00000088 RectInflate
000152a4 g     F .text	00000030 alt_icache_flush_all
00078214 g     O .rwdata	00000004 alt_priority_mask
0001350c g     F .text	0000009c alt_ic_irq_enable
0000d2a4 g     F .text	00000024 __vfprintf_internal
000095a0 g     F .text	00000080 __subdf3
00002cb4 g     F .text	00000260 vid_bres_scan_edges
00010124 g     F .text	000000c4 __lo0bits
0007821c g     O .rwdata	00000008 alt_alarm_list
00002b44 g     F .text	00000064 max_diff3
000151dc g     F .text	00000064 _do_ctors
0000695c g     F .text	0000015c I2CL_Write
00003830 g     F .text	00000158 merge_color_channels
000131b4 g     F .text	00000100 close
000138ac g     F .text	00000080 alt_load
0000a230 g     F .text	00000314 __pack_d
0000a754 g     F .text	00000014 free
0000ef80 g     F .text	00000004 __sinit_lock_acquire
00010dac g     F .text	0000012c __multadd
0001008c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00234 	movhi	r3,8
 134:	18ee2a04 	addi	r3,r3,-18264
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00234 	movhi	r3,8
 14c:	18ee2a04 	addi	r3,r3,-18264
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
     1d0:	d6807614 	ori	gp,gp,472
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	008001f4 	movhi	r2,7
    ori r2, r2, %lo(__bss_start)
     1d8:	10ae1214 	ori	r2,r2,47176

    movhi r3, %hi(__bss_end)
     1dc:	00c001f4 	movhi	r3,7
    ori r3, r3, %lo(__bss_end)
     1e0:	18eece14 	ori	r3,r3,47928

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	00138ac0 	call	138ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	0013aec0 	call	13aec <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
     200:	defffc04 	addi	sp,sp,-16
     204:	df000315 	stw	fp,12(sp)
     208:	df000304 	addi	fp,sp,12
     20c:	e13ffe15 	stw	r4,-8(fp)
     210:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
     214:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
     218:	e0bffe17 	ldw	r2,-8(fp)
     21c:	10c00017 	ldw	r3,0(r2)
     220:	e0bfff17 	ldw	r2,-4(fp)
     224:	10800017 	ldw	r2,0(r2)
     228:	18801116 	blt	r3,r2,270 <IsPtInRect+0x70>
     22c:	e0bffe17 	ldw	r2,-8(fp)
     230:	10c00017 	ldw	r3,0(r2)
     234:	e0bfff17 	ldw	r2,-4(fp)
     238:	10800117 	ldw	r2,4(r2)
     23c:	10c00c16 	blt	r2,r3,270 <IsPtInRect+0x70>
     240:	e0bffe17 	ldw	r2,-8(fp)
     244:	10c00117 	ldw	r3,4(r2)
     248:	e0bfff17 	ldw	r2,-4(fp)
     24c:	10800217 	ldw	r2,8(r2)
     250:	18800716 	blt	r3,r2,270 <IsPtInRect+0x70>
     254:	e0bffe17 	ldw	r2,-8(fp)
     258:	10c00117 	ldw	r3,4(r2)
     25c:	e0bfff17 	ldw	r2,-4(fp)
     260:	10800317 	ldw	r2,12(r2)
     264:	10c00216 	blt	r2,r3,270 <IsPtInRect+0x70>
        bYes = TRUE;
     268:	00800044 	movi	r2,1
     26c:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
     270:	e0bffd17 	ldw	r2,-12(fp)
}
     274:	e037883a 	mov	sp,fp
     278:	df000017 	ldw	fp,0(sp)
     27c:	dec00104 	addi	sp,sp,4
     280:	f800283a 	ret

00000284 <PtSet>:

void PtSet(POINT *pt, int x, int y){
     284:	defffc04 	addi	sp,sp,-16
     288:	df000315 	stw	fp,12(sp)
     28c:	df000304 	addi	fp,sp,12
     290:	e13ffd15 	stw	r4,-12(fp)
     294:	e17ffe15 	stw	r5,-8(fp)
     298:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
     29c:	e0fffd17 	ldw	r3,-12(fp)
     2a0:	e0bffe17 	ldw	r2,-8(fp)
     2a4:	18800015 	stw	r2,0(r3)
    pt->y = y;
     2a8:	e0fffd17 	ldw	r3,-12(fp)
     2ac:	e0bfff17 	ldw	r2,-4(fp)
     2b0:	18800115 	stw	r2,4(r3)
}
     2b4:	e037883a 	mov	sp,fp
     2b8:	df000017 	ldw	fp,0(sp)
     2bc:	dec00104 	addi	sp,sp,4
     2c0:	f800283a 	ret

000002c4 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
     2c4:	defffb04 	addi	sp,sp,-20
     2c8:	df000415 	stw	fp,16(sp)
     2cc:	df000404 	addi	fp,sp,16
     2d0:	e13ffc15 	stw	r4,-16(fp)
     2d4:	e17ffd15 	stw	r5,-12(fp)
     2d8:	e1bffe15 	stw	r6,-8(fp)
     2dc:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
     2e0:	e0fffc17 	ldw	r3,-16(fp)
     2e4:	e0bffd17 	ldw	r2,-12(fp)
     2e8:	18800015 	stw	r2,0(r3)
    rc->right = right;
     2ec:	e0fffc17 	ldw	r3,-16(fp)
     2f0:	e0bffe17 	ldw	r2,-8(fp)
     2f4:	18800115 	stw	r2,4(r3)
    rc->top = top;
     2f8:	e0fffc17 	ldw	r3,-16(fp)
     2fc:	e0bfff17 	ldw	r2,-4(fp)
     300:	18800215 	stw	r2,8(r3)
    rc->bottom = bottom;
     304:	e0fffc17 	ldw	r3,-16(fp)
     308:	e0800117 	ldw	r2,4(fp)
     30c:	18800315 	stw	r2,12(r3)
}
     310:	e037883a 	mov	sp,fp
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00104 	addi	sp,sp,4
     31c:	f800283a 	ret

00000320 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
     320:	defffc04 	addi	sp,sp,-16
     324:	df000315 	stw	fp,12(sp)
     328:	df000304 	addi	fp,sp,12
     32c:	e13ffd15 	stw	r4,-12(fp)
     330:	e17ffe15 	stw	r5,-8(fp)
     334:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
     338:	e0bffd17 	ldw	r2,-12(fp)
     33c:	10c00017 	ldw	r3,0(r2)
     340:	e0bffe17 	ldw	r2,-8(fp)
     344:	1887c83a 	sub	r3,r3,r2
     348:	e0bffd17 	ldw	r2,-12(fp)
     34c:	10c00015 	stw	r3,0(r2)
    rc->right += x;
     350:	e0bffd17 	ldw	r2,-12(fp)
     354:	10c00117 	ldw	r3,4(r2)
     358:	e0bffe17 	ldw	r2,-8(fp)
     35c:	1887883a 	add	r3,r3,r2
     360:	e0bffd17 	ldw	r2,-12(fp)
     364:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
     368:	e0bffd17 	ldw	r2,-12(fp)
     36c:	10c00217 	ldw	r3,8(r2)
     370:	e0bfff17 	ldw	r2,-4(fp)
     374:	1887c83a 	sub	r3,r3,r2
     378:	e0bffd17 	ldw	r2,-12(fp)
     37c:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
     380:	e0bffd17 	ldw	r2,-12(fp)
     384:	10c00317 	ldw	r3,12(r2)
     388:	e0bfff17 	ldw	r2,-4(fp)
     38c:	1887883a 	add	r3,r3,r2
     390:	e0bffd17 	ldw	r2,-12(fp)
     394:	10c00315 	stw	r3,12(r2)
}
     398:	e037883a 	mov	sp,fp
     39c:	df000017 	ldw	fp,0(sp)
     3a0:	dec00104 	addi	sp,sp,4
     3a4:	f800283a 	ret

000003a8 <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
     3a8:	defffc04 	addi	sp,sp,-16
     3ac:	df000315 	stw	fp,12(sp)
     3b0:	df000304 	addi	fp,sp,12
     3b4:	e13ffd15 	stw	r4,-12(fp)
     3b8:	e17ffe15 	stw	r5,-8(fp)
     3bc:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
     3c0:	e0bffd17 	ldw	r2,-12(fp)
     3c4:	10c00017 	ldw	r3,0(r2)
     3c8:	e0bffe17 	ldw	r2,-8(fp)
     3cc:	1887883a 	add	r3,r3,r2
     3d0:	e0bffd17 	ldw	r2,-12(fp)
     3d4:	10c00015 	stw	r3,0(r2)
    rc->right += x;
     3d8:	e0bffd17 	ldw	r2,-12(fp)
     3dc:	10c00117 	ldw	r3,4(r2)
     3e0:	e0bffe17 	ldw	r2,-8(fp)
     3e4:	1887883a 	add	r3,r3,r2
     3e8:	e0bffd17 	ldw	r2,-12(fp)
     3ec:	10c00115 	stw	r3,4(r2)
    rc->top += y;
     3f0:	e0bffd17 	ldw	r2,-12(fp)
     3f4:	10c00217 	ldw	r3,8(r2)
     3f8:	e0bfff17 	ldw	r2,-4(fp)
     3fc:	1887883a 	add	r3,r3,r2
     400:	e0bffd17 	ldw	r2,-12(fp)
     404:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
     408:	e0bffd17 	ldw	r2,-12(fp)
     40c:	10c00317 	ldw	r3,12(r2)
     410:	e0bfff17 	ldw	r2,-4(fp)
     414:	1887883a 	add	r3,r3,r2
     418:	e0bffd17 	ldw	r2,-12(fp)
     41c:	10c00315 	stw	r3,12(r2)
}
     420:	e037883a 	mov	sp,fp
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00104 	addi	sp,sp,4
     42c:	f800283a 	ret

00000430 <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
     430:	defffd04 	addi	sp,sp,-12
     434:	df000215 	stw	fp,8(sp)
     438:	df000204 	addi	fp,sp,8
     43c:	e13ffe15 	stw	r4,-8(fp)
     440:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
     444:	e0bfff17 	ldw	r2,-4(fp)
     448:	10c00017 	ldw	r3,0(r2)
     44c:	e0bffe17 	ldw	r2,-8(fp)
     450:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
     454:	e0bfff17 	ldw	r2,-4(fp)
     458:	10c00117 	ldw	r3,4(r2)
     45c:	e0bffe17 	ldw	r2,-8(fp)
     460:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
     464:	e0bfff17 	ldw	r2,-4(fp)
     468:	10c00217 	ldw	r3,8(r2)
     46c:	e0bffe17 	ldw	r2,-8(fp)
     470:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	10c00317 	ldw	r3,12(r2)
     47c:	e0bffe17 	ldw	r2,-8(fp)
     480:	10c00315 	stw	r3,12(r2)
}
     484:	e037883a 	mov	sp,fp
     488:	df000017 	ldw	fp,0(sp)
     48c:	dec00104 	addi	sp,sp,4
     490:	f800283a 	ret

00000494 <RectWidth>:

int RectWidth(RECT *rc){
     494:	defffe04 	addi	sp,sp,-8
     498:	df000115 	stw	fp,4(sp)
     49c:	df000104 	addi	fp,sp,4
     4a0:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
     4a4:	e0bfff17 	ldw	r2,-4(fp)
     4a8:	10c00117 	ldw	r3,4(r2)
     4ac:	e0bfff17 	ldw	r2,-4(fp)
     4b0:	10800017 	ldw	r2,0(r2)
     4b4:	1885c83a 	sub	r2,r3,r2
}
     4b8:	e037883a 	mov	sp,fp
     4bc:	df000017 	ldw	fp,0(sp)
     4c0:	dec00104 	addi	sp,sp,4
     4c4:	f800283a 	ret

000004c8 <RectHeight>:

int RectHeight(RECT *rc){
     4c8:	defffe04 	addi	sp,sp,-8
     4cc:	df000115 	stw	fp,4(sp)
     4d0:	df000104 	addi	fp,sp,4
     4d4:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
     4d8:	e0bfff17 	ldw	r2,-4(fp)
     4dc:	10c00317 	ldw	r3,12(r2)
     4e0:	e0bfff17 	ldw	r2,-4(fp)
     4e4:	10800217 	ldw	r2,8(r2)
     4e8:	1885c83a 	sub	r2,r3,r2
}
     4ec:	e037883a 	mov	sp,fp
     4f0:	df000017 	ldw	fp,0(sp)
     4f4:	dec00104 	addi	sp,sp,4
     4f8:	f800283a 	ret

000004fc <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
     4fc:	defff804 	addi	sp,sp,-32
     500:	dfc00715 	stw	ra,28(sp)
     504:	df000615 	stw	fp,24(sp)
     508:	dc000515 	stw	r16,20(sp)
     50c:	df000504 	addi	fp,sp,20
     510:	e13ffe15 	stw	r4,-8(fp)
     514:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10c00017 	ldw	r3,0(r2)
     520:	e0bfff17 	ldw	r2,-4(fp)
     524:	10800017 	ldw	r2,0(r2)
     528:	1885c83a 	sub	r2,r3,r2
     52c:	e0bffc15 	stw	r2,-16(fp)
    b = pt1->y - pt2->y;
     530:	e0bffe17 	ldw	r2,-8(fp)
     534:	10c00117 	ldw	r3,4(r2)
     538:	e0bfff17 	ldw	r2,-4(fp)
     53c:	10800117 	ldw	r2,4(r2)
     540:	1885c83a 	sub	r2,r3,r2
     544:	e0bffb15 	stw	r2,-20(fp)
    nDistance = a*a + b*b;
     548:	e13ffc17 	ldw	r4,-16(fp)
     54c:	e17ffc17 	ldw	r5,-16(fp)
     550:	000a0540 	call	a054 <__mulsi3>
     554:	1021883a 	mov	r16,r2
     558:	e13ffb17 	ldw	r4,-20(fp)
     55c:	e17ffb17 	ldw	r5,-20(fp)
     560:	000a0540 	call	a054 <__mulsi3>
     564:	8085883a 	add	r2,r16,r2
     568:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
     56c:	e13ffd17 	ldw	r4,-12(fp)
     570:	0009d380 	call	9d38 <__floatsidf>
     574:	100b883a 	mov	r5,r2
     578:	180d883a 	mov	r6,r3
     57c:	2809883a 	mov	r4,r5
     580:	300b883a 	mov	r5,r6
     584:	0008d600 	call	8d60 <sqrt>
     588:	100b883a 	mov	r5,r2
     58c:	180d883a 	mov	r6,r3
     590:	2809883a 	mov	r4,r5
     594:	300b883a 	mov	r5,r6
     598:	0009e300 	call	9e30 <__fixdfsi>
     59c:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
     5a0:	e0bffd17 	ldw	r2,-12(fp)
}
     5a4:	e037883a 	mov	sp,fp
     5a8:	dfc00217 	ldw	ra,8(sp)
     5ac:	df000117 	ldw	fp,4(sp)
     5b0:	dc000017 	ldw	r16,0(sp)
     5b4:	dec00304 	addi	sp,sp,12
     5b8:	f800283a 	ret

000005bc <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
     5bc:	defffd04 	addi	sp,sp,-12
     5c0:	df000215 	stw	fp,8(sp)
     5c4:	df000204 	addi	fp,sp,8
     5c8:	e13ffe15 	stw	r4,-8(fp)
     5cc:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
     5d0:	e0bfff17 	ldw	r2,-4(fp)
     5d4:	10c00017 	ldw	r3,0(r2)
     5d8:	e0bffe17 	ldw	r2,-8(fp)
     5dc:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
     5e0:	e0bfff17 	ldw	r2,-4(fp)
     5e4:	10c00117 	ldw	r3,4(r2)
     5e8:	e0bffe17 	ldw	r2,-8(fp)
     5ec:	10c00115 	stw	r3,4(r2)
}
     5f0:	e037883a 	mov	sp,fp
     5f4:	df000017 	ldw	fp,0(sp)
     5f8:	dec00104 	addi	sp,sp,4
     5fc:	f800283a 	ret

00000600 <vid_clean_screen>:
#include "sys/alt_cache.h"
#include "system.h"


// richard add
void vid_clean_screen(alt_video_display* display, int color){
     600:	defffa04 	addi	sp,sp,-24
     604:	dfc00515 	stw	ra,20(sp)
     608:	df000415 	stw	fp,16(sp)
     60c:	df000404 	addi	fp,sp,16
     610:	e13ffe15 	stw	r4,-8(fp)
     614:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
     618:	e0bffe17 	ldw	r2,-8(fp)
     61c:	11800517 	ldw	r6,20(r2)
     620:	e0bffe17 	ldw	r2,-8(fp)
     624:	11c00617 	ldw	r7,24(r2)
     628:	e0bfff17 	ldw	r2,-4(fp)
     62c:	d8800015 	stw	r2,0(sp)
     630:	e0bffe17 	ldw	r2,-8(fp)
     634:	d8800115 	stw	r2,4(sp)
     638:	0009883a 	mov	r4,zero
     63c:	000b883a 	mov	r5,zero
     640:	00012c00 	call	12c0 <vid_paint_block>
}
     644:	e037883a 	mov	sp,fp
     648:	dfc00117 	ldw	ra,4(sp)
     64c:	df000017 	ldw	fp,0(sp)
     650:	dec00204 	addi	sp,sp,8
     654:	f800283a 	ret

00000658 <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
     658:	defff704 	addi	sp,sp,-36
     65c:	dfc00815 	stw	ra,32(sp)
     660:	df000715 	stw	fp,28(sp)
     664:	df000704 	addi	fp,sp,28
     668:	e13ffc15 	stw	r4,-16(fp)
     66c:	e17ffd15 	stw	r5,-12(fp)
     670:	e1bffe15 	stw	r6,-8(fp)
     674:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
     678:	e0fffd17 	ldw	r3,-12(fp)
     67c:	e0bfff17 	ldw	r2,-4(fp)
     680:	18800f1e 	bne	r3,r2,6c0 <vid_draw_line+0x68>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
     684:	e0bffc17 	ldw	r2,-16(fp)
     688:	113fffcc 	andi	r4,r2,65535
     68c:	2120001c 	xori	r4,r4,32768
     690:	21200004 	addi	r4,r4,-32768
     694:	e0bffe17 	ldw	r2,-8(fp)
     698:	117fffcc 	andi	r5,r2,65535
     69c:	2960001c 	xori	r5,r5,32768
     6a0:	29600004 	addi	r5,r5,-32768
     6a4:	e0bffd17 	ldw	r2,-12(fp)
     6a8:	11bfffcc 	andi	r6,r2,65535
     6ac:	e0800417 	ldw	r2,16(fp)
     6b0:	d8800015 	stw	r2,0(sp)
     6b4:	e1c00317 	ldw	r7,12(fp)
     6b8:	000154c0 	call	154c <vid_draw_horiz_line>
     6bc:	00001006 	br	700 <vid_draw_line+0xa8>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	113fffcc 	andi	r4,r2,65535
     6c8:	e0bffd17 	ldw	r2,-12(fp)
     6cc:	117fffcc 	andi	r5,r2,65535
     6d0:	e0bffe17 	ldw	r2,-8(fp)
     6d4:	11bfffcc 	andi	r6,r2,65535
     6d8:	e0bfff17 	ldw	r2,-4(fp)
     6dc:	11ffffcc 	andi	r7,r2,65535
     6e0:	e0800217 	ldw	r2,8(fp)
     6e4:	10bfffcc 	andi	r2,r2,65535
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	e0800317 	ldw	r2,12(fp)
     6f0:	d8800115 	stw	r2,4(sp)
     6f4:	e0800417 	ldw	r2,16(fp)
     6f8:	d8800215 	stw	r2,8(sp)
     6fc:	0001c600 	call	1c60 <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
     700:	e037883a 	mov	sp,fp
     704:	dfc00117 	ldw	ra,4(sp)
     708:	df000017 	ldw	fp,0(sp)
     70c:	dec00204 	addi	sp,sp,8
     710:	f800283a 	ret

00000714 <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
     714:	defffd04 	addi	sp,sp,-12
     718:	dfc00215 	stw	ra,8(sp)
     71c:	df000115 	stw	fp,4(sp)
     720:	df000104 	addi	fp,sp,4
     724:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
     728:	e0bfff17 	ldw	r2,-4(fp)
     72c:	11000517 	ldw	r4,20(r2)
     730:	000a7540 	call	a754 <free>
  free(scroll);
     734:	e13fff17 	ldw	r4,-4(fp)
     738:	000a7540 	call	a754 <free>
}
     73c:	e037883a 	mov	sp,fp
     740:	dfc00117 	ldw	ra,4(sp)
     744:	df000017 	ldw	fp,0(sp)
     748:	dec00204 	addi	sp,sp,8
     74c:	f800283a 	ret

00000750 <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
     750:	defff904 	addi	sp,sp,-28
     754:	dfc00615 	stw	ra,24(sp)
     758:	df000515 	stw	fp,20(sp)
     75c:	df000504 	addi	fp,sp,20
     760:	e13ffc15 	stw	r4,-16(fp)
     764:	e17ffd15 	stw	r5,-12(fp)
     768:	e1bffe15 	stw	r6,-8(fp)
     76c:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
     770:	01000f04 	movi	r4,60
     774:	000a7680 	call	a768 <malloc>
     778:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
     77c:	e0fffb17 	ldw	r3,-20(fp)
     780:	e0bffc17 	ldw	r2,-16(fp)
     784:	18800015 	stw	r2,0(r3)
  scroll->vbegin = vbegin;
     788:	e0fffb17 	ldw	r3,-20(fp)
     78c:	e0bffd17 	ldw	r2,-12(fp)
     790:	18800115 	stw	r2,4(r3)
  scroll->hend = hend;
     794:	e0fffb17 	ldw	r3,-20(fp)
     798:	e0bffe17 	ldw	r2,-8(fp)
     79c:	18800215 	stw	r2,8(r3)
  scroll->f_color = f_color;
     7a0:	e0fffb17 	ldw	r3,-20(fp)
     7a4:	e0bfff17 	ldw	r2,-4(fp)
     7a8:	18800315 	stw	r2,12(r3)
  scroll->b_color = b_color;
     7ac:	e0fffb17 	ldw	r3,-20(fp)
     7b0:	e0800217 	ldw	r2,8(fp)
     7b4:	18800415 	stw	r2,16(r3)
  scroll->string = malloc(strlen(string)+2);
     7b8:	e1000517 	ldw	r4,20(fp)
     7bc:	000b3140 	call	b314 <strlen>
     7c0:	11000084 	addi	r4,r2,2
     7c4:	000a7680 	call	a768 <malloc>
     7c8:	1007883a 	mov	r3,r2
     7cc:	e0bffb17 	ldw	r2,-20(fp)
     7d0:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
     7d4:	e0bffb17 	ldw	r2,-20(fp)
     7d8:	11000517 	ldw	r4,20(r2)
     7dc:	e1400517 	ldw	r5,20(fp)
     7e0:	000b2880 	call	b288 <strcpy>
  scroll->font = font;
     7e4:	e0fffb17 	ldw	r3,-20(fp)
     7e8:	e0800317 	ldw	r2,12(fp)
     7ec:	18800615 	stw	r2,24(r3)
  scroll->ms_delay = ms_delay;
     7f0:	e0fffb17 	ldw	r3,-20(fp)
     7f4:	e0800417 	ldw	r2,16(fp)
     7f8:	18800715 	stw	r2,28(r3)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     7fc:	00800234 	movhi	r2,8
     800:	10ae1f04 	addi	r2,r2,-18308
     804:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
     808:	1007883a 	mov	r3,r2
     80c:	e0bffb17 	ldw	r2,-20(fp)
     810:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
     814:	e0bffb17 	ldw	r2,-20(fp)
     818:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
     81c:	e0bffb17 	ldw	r2,-20(fp)
     820:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
     824:	e0bffb17 	ldw	r2,-20(fp)
     828:	10c00217 	ldw	r3,8(r2)
     82c:	e0bffb17 	ldw	r2,-20(fp)
     830:	10800017 	ldw	r2,0(r2)
     834:	1887c83a 	sub	r3,r3,r2
     838:	e0bffb17 	ldw	r2,-20(fp)
     83c:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
     840:	e1000517 	ldw	r4,20(fp)
     844:	000b3140 	call	b314 <strlen>
     848:	1007883a 	mov	r3,r2
     84c:	e0bffb17 	ldw	r2,-20(fp)
     850:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
     854:	e0bffb17 	ldw	r2,-20(fp)
     858:	10800c17 	ldw	r2,48(r2)
     85c:	100690fa 	slli	r3,r2,3
     860:	e0bffb17 	ldw	r2,-20(fp)
     864:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
     868:	e0bffb17 	ldw	r2,-20(fp)
     86c:	10c00b17 	ldw	r3,44(r2)
     870:	e0bffb17 	ldw	r2,-20(fp)
     874:	10800e17 	ldw	r2,56(r2)
     878:	1887883a 	add	r3,r3,r2
     87c:	e0bffb17 	ldw	r2,-20(fp)
     880:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
     884:	e0bffb17 	ldw	r2,-20(fp)
  
}
     888:	e037883a 	mov	sp,fp
     88c:	dfc00117 	ldw	ra,4(sp)
     890:	df000017 	ldw	fp,0(sp)
     894:	dec00204 	addi	sp,sp,8
     898:	f800283a 	ret

0000089c <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
     89c:	deffeb04 	addi	sp,sp,-84
     8a0:	dfc01415 	stw	ra,80(sp)
     8a4:	df001315 	stw	fp,76(sp)
     8a8:	dc401215 	stw	r17,72(sp)
     8ac:	dc001115 	stw	r16,68(sp)
     8b0:	df001104 	addi	fp,sp,68
     8b4:	e13ffc15 	stw	r4,-16(fp)
     8b8:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
     8bc:	00800044 	movi	r2,1
     8c0:	e0bff205 	stb	r2,-56(fp)
     8c4:	00800234 	movhi	r2,8
     8c8:	10ae1f04 	addi	r2,r2,-18308
     8cc:	10800017 	ldw	r2,0(r2)
     8d0:	1021883a 	mov	r16,r2

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
     8d4:	e0bffc17 	ldw	r2,-16(fp)
     8d8:	10800817 	ldw	r2,32(r2)
     8dc:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     8e0:	00800234 	movhi	r2,8
     8e4:	10ae1e04 	addi	r2,r2,-18312
     8e8:	10800017 	ldw	r2,0(r2)
     8ec:	1009883a 	mov	r4,r2
     8f0:	e0bffc17 	ldw	r2,-16(fp)
     8f4:	10800717 	ldw	r2,28(r2)
     8f8:	100b883a 	mov	r5,r2
     8fc:	000a0540 	call	a054 <__mulsi3>
     900:	1009883a 	mov	r4,r2
     904:	0140fa04 	movi	r5,1000
     908:	000a0440 	call	a044 <__udivsi3>
     90c:	8885883a 	add	r2,r17,r2
     910:	8080cb36 	bltu	r16,r2,c40 <vid_scroll_string+0x3a4>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     914:	00800234 	movhi	r2,8
     918:	10ae1f04 	addi	r2,r2,-18308
     91c:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
     920:	1007883a 	mov	r3,r2
     924:	e0bffc17 	ldw	r2,-16(fp)
     928:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	10800a03 	ldbu	r2,40(r2)
     934:	10803fcc 	andi	r2,r2,255
     938:	1080201c 	xori	r2,r2,128
     93c:	10bfe004 	addi	r2,r2,-128
     940:	1004c03a 	cmpne	r2,r2,zero
     944:	1000061e 	bne	r2,zero,960 <vid_scroll_string+0xc4>
      scroll->text_scroll_index = 0;
     948:	e0bffc17 	ldw	r2,-16(fp)
     94c:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
     950:	e0fffc17 	ldw	r3,-16(fp)
     954:	00800044 	movi	r2,1
     958:	18800a05 	stb	r2,40(r3)
     95c:	00000e06 	br	998 <vid_scroll_string+0xfc>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
     960:	e0bffc17 	ldw	r2,-16(fp)
     964:	10c00917 	ldw	r3,36(r2)
     968:	e0bffc17 	ldw	r2,-16(fp)
     96c:	10800d17 	ldw	r2,52(r2)
     970:	18800316 	blt	r3,r2,980 <vid_scroll_string+0xe4>
      scroll->text_scroll_started = 0;
     974:	e0bffc17 	ldw	r2,-16(fp)
     978:	10000a05 	stb	zero,40(r2)
     97c:	00000606 	br	998 <vid_scroll_string+0xfc>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
     980:	e0bffc17 	ldw	r2,-16(fp)
     984:	10c00917 	ldw	r3,36(r2)
     988:	e0bff207 	ldb	r2,-56(fp)
     98c:	1887883a 	add	r3,r3,r2
     990:	e0bffc17 	ldw	r2,-16(fp)
     994:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
     998:	e0bffc17 	ldw	r2,-16(fp)
     99c:	10c00917 	ldw	r3,36(r2)
     9a0:	e0bffc17 	ldw	r2,-16(fp)
     9a4:	10800b17 	ldw	r2,44(r2)
     9a8:	18800a0e 	bge	r3,r2,9d4 <vid_scroll_string+0x138>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
     9ac:	e0bffc17 	ldw	r2,-16(fp)
     9b0:	10c00017 	ldw	r3,0(r2)
     9b4:	e0bffc17 	ldw	r2,-16(fp)
     9b8:	10800b17 	ldw	r2,44(r2)
     9bc:	1887883a 	add	r3,r3,r2
     9c0:	e0bffc17 	ldw	r2,-16(fp)
     9c4:	10800917 	ldw	r2,36(r2)
     9c8:	1885c83a 	sub	r2,r3,r2
     9cc:	e0bffb15 	stw	r2,-20(fp)
     9d0:	00000306 	br	9e0 <vid_scroll_string+0x144>
    } else {
      x_start = scroll->hbegin;
     9d4:	e0bffc17 	ldw	r2,-16(fp)
     9d8:	10800017 	ldw	r2,0(r2)
     9dc:	e0bffb15 	stw	r2,-20(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
     9e0:	e0bffc17 	ldw	r2,-16(fp)
     9e4:	10c00e17 	ldw	r3,56(r2)
     9e8:	e0bffc17 	ldw	r2,-16(fp)
     9ec:	10800917 	ldw	r2,36(r2)
     9f0:	10c0040e 	bge	r2,r3,a04 <vid_scroll_string+0x168>
      x_end = scroll->hend;
     9f4:	e0bffc17 	ldw	r2,-16(fp)
     9f8:	10800217 	ldw	r2,8(r2)
     9fc:	e0bffa15 	stw	r2,-24(fp)
     a00:	00000906 	br	a28 <vid_scroll_string+0x18c>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
     a04:	e0bffc17 	ldw	r2,-16(fp)
     a08:	10c00217 	ldw	r3,8(r2)
     a0c:	e0bffc17 	ldw	r2,-16(fp)
     a10:	10800917 	ldw	r2,36(r2)
     a14:	1887c83a 	sub	r3,r3,r2
     a18:	e0bffc17 	ldw	r2,-16(fp)
     a1c:	10800e17 	ldw	r2,56(r2)
     a20:	1885883a 	add	r2,r3,r2
     a24:	e0bffa15 	stw	r2,-24(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
     a28:	e0bffb17 	ldw	r2,-20(fp)
     a2c:	e0bff915 	stw	r2,-28(fp)
     a30:	00007106 	br	bf8 <vid_scroll_string+0x35c>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
     a34:	e0bffc17 	ldw	r2,-16(fp)
     a38:	10c00917 	ldw	r3,36(r2)
     a3c:	e0bffc17 	ldw	r2,-16(fp)
     a40:	10800b17 	ldw	r2,44(r2)
     a44:	1880050e 	bge	r3,r2,a5c <vid_scroll_string+0x1c0>
        string_x_index = (x_index - x_start);
     a48:	e0bff917 	ldw	r2,-28(fp)
     a4c:	e0fffb17 	ldw	r3,-20(fp)
     a50:	10c5c83a 	sub	r2,r2,r3
     a54:	e0bff815 	stw	r2,-32(fp)
     a58:	00000a06 	br	a84 <vid_scroll_string+0x1e8>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
     a5c:	e0bffc17 	ldw	r2,-16(fp)
     a60:	10c00917 	ldw	r3,36(r2)
     a64:	e0bffc17 	ldw	r2,-16(fp)
     a68:	10800b17 	ldw	r2,44(r2)
     a6c:	1887c83a 	sub	r3,r3,r2
     a70:	e0bff917 	ldw	r2,-28(fp)
     a74:	1887883a 	add	r3,r3,r2
     a78:	e0bffb17 	ldw	r2,-20(fp)
     a7c:	1885c83a 	sub	r2,r3,r2
     a80:	e0bff815 	stw	r2,-32(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
     a84:	e0bff817 	ldw	r2,-32(fp)
     a88:	e0bffe15 	stw	r2,-8(fp)
     a8c:	e0fffe17 	ldw	r3,-8(fp)
     a90:	1804403a 	cmpge	r2,r3,zero
     a94:	1000031e 	bne	r2,zero,aa4 <vid_scroll_string+0x208>
     a98:	e0bffe17 	ldw	r2,-8(fp)
     a9c:	108001c4 	addi	r2,r2,7
     aa0:	e0bffe15 	stw	r2,-8(fp)
     aa4:	e0fffe17 	ldw	r3,-8(fp)
     aa8:	1805d0fa 	srai	r2,r3,3
     aac:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
     ab0:	e0bffc17 	ldw	r2,-16(fp)
     ab4:	10c00517 	ldw	r3,20(r2)
     ab8:	e0bff717 	ldw	r2,-36(fp)
     abc:	1885883a 	add	r2,r3,r2
     ac0:	10800003 	ldbu	r2,0(r2)
     ac4:	e0bff445 	stb	r2,-47(fp)
      char_column = (string_x_index % 8);
     ac8:	e0fff817 	ldw	r3,-32(fp)
     acc:	00a00034 	movhi	r2,32768
     ad0:	108001c4 	addi	r2,r2,7
     ad4:	1886703a 	and	r3,r3,r2
     ad8:	e0ffff15 	stw	r3,-4(fp)
     adc:	e0ffff17 	ldw	r3,-4(fp)
     ae0:	1804403a 	cmpge	r2,r3,zero
     ae4:	10000a1e 	bne	r2,zero,b10 <vid_scroll_string+0x274>
     ae8:	e0bfff17 	ldw	r2,-4(fp)
     aec:	10bfffc4 	addi	r2,r2,-1
     af0:	e0bfff15 	stw	r2,-4(fp)
     af4:	00bffe04 	movi	r2,-8
     af8:	e0ffff17 	ldw	r3,-4(fp)
     afc:	1886b03a 	or	r3,r3,r2
     b00:	e0ffff15 	stw	r3,-4(fp)
     b04:	e0bfff17 	ldw	r2,-4(fp)
     b08:	10800044 	addi	r2,r2,1
     b0c:	e0bfff15 	stw	r2,-4(fp)
     b10:	e0ffff17 	ldw	r3,-4(fp)
     b14:	e0fff515 	stw	r3,-44(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
     b18:	00c02004 	movi	r3,128
     b1c:	e0bff517 	ldw	r2,-44(fp)
     b20:	1884d83a 	srl	r2,r3,r2
     b24:	e0bff405 	stb	r2,-48(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
     b28:	e0bffc17 	ldw	r2,-16(fp)
     b2c:	14000617 	ldw	r16,24(r2)
     b30:	e13ff447 	ldb	r4,-47(fp)
     b34:	014002c4 	movi	r5,11
     b38:	000a0540 	call	a054 <__mulsi3>
     b3c:	8085883a 	add	r2,r16,r2
     b40:	10bfa804 	addi	r2,r2,-352
     b44:	e0bff315 	stw	r2,-52(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
     b48:	e03ff615 	stw	zero,-40(fp)
     b4c:	00002406 	br	be0 <vid_scroll_string+0x344>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
     b50:	e0bff617 	ldw	r2,-40(fp)
     b54:	1007883a 	mov	r3,r2
     b58:	e0bff317 	ldw	r2,-52(fp)
     b5c:	1885883a 	add	r2,r3,r2
     b60:	10c00003 	ldbu	r3,0(r2)
     b64:	e0bff403 	ldbu	r2,-48(fp)
     b68:	1884703a 	and	r2,r3,r2
     b6c:	10803fcc 	andi	r2,r2,255
     b70:	1080201c 	xori	r2,r2,128
     b74:	10bfe004 	addi	r2,r2,-128
     b78:	1005003a 	cmpeq	r2,r2,zero
     b7c:	10000b1e 	bne	r2,zero,bac <vid_scroll_string+0x310>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
     b80:	e0bffc17 	ldw	r2,-16(fp)
     b84:	10c00117 	ldw	r3,4(r2)
     b88:	e0bff617 	ldw	r2,-40(fp)
     b8c:	188b883a 	add	r5,r3,r2
     b90:	e0bffc17 	ldw	r2,-16(fp)
     b94:	10800317 	ldw	r2,12(r2)
     b98:	100d883a 	mov	r6,r2
     b9c:	e13ff917 	ldw	r4,-28(fp)
     ba0:	e1fffd17 	ldw	r7,-12(fp)
     ba4:	00010b80 	call	10b8 <vid_set_pixel>
     ba8:	00000a06 	br	bd4 <vid_scroll_string+0x338>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
     bac:	e0bffc17 	ldw	r2,-16(fp)
     bb0:	10c00117 	ldw	r3,4(r2)
     bb4:	e0bff617 	ldw	r2,-40(fp)
     bb8:	188b883a 	add	r5,r3,r2
     bbc:	e0bffc17 	ldw	r2,-16(fp)
     bc0:	10800417 	ldw	r2,16(r2)
     bc4:	100d883a 	mov	r6,r2
     bc8:	e13ff917 	ldw	r4,-28(fp)
     bcc:	e1fffd17 	ldw	r7,-12(fp)
     bd0:	00010b80 	call	10b8 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
     bd4:	e0bff617 	ldw	r2,-40(fp)
     bd8:	10800044 	addi	r2,r2,1
     bdc:	e0bff615 	stw	r2,-40(fp)
     be0:	e0bff617 	ldw	r2,-40(fp)
     be4:	108002d0 	cmplti	r2,r2,11
     be8:	103fd91e 	bne	r2,zero,b50 <vid_scroll_string+0x2b4>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
     bec:	e0bff917 	ldw	r2,-28(fp)
     bf0:	10800044 	addi	r2,r2,1
     bf4:	e0bff915 	stw	r2,-28(fp)
     bf8:	e0fff917 	ldw	r3,-28(fp)
     bfc:	e0bffa17 	ldw	r2,-24(fp)
     c00:	18bf8c16 	blt	r3,r2,a34 <vid_scroll_string+0x198>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
     c04:	e0bffc17 	ldw	r2,-16(fp)
     c08:	11400117 	ldw	r5,4(r2)
     c0c:	e0bffc17 	ldw	r2,-16(fp)
     c10:	10800117 	ldw	r2,4(r2)
     c14:	11c00284 	addi	r7,r2,10
     c18:	e0bffc17 	ldw	r2,-16(fp)
     c1c:	10c00417 	ldw	r3,16(r2)
     c20:	00800044 	movi	r2,1
     c24:	d8800015 	stw	r2,0(sp)
     c28:	d8c00115 	stw	r3,4(sp)
     c2c:	e0bffd17 	ldw	r2,-12(fp)
     c30:	d8800215 	stw	r2,8(sp)
     c34:	e13ffa17 	ldw	r4,-24(fp)
     c38:	e1bffa17 	ldw	r6,-24(fp)
     c3c:	00006580 	call	658 <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
     c40:	0005883a 	mov	r2,zero
}
     c44:	e037883a 	mov	sp,fp
     c48:	dfc00317 	ldw	ra,12(sp)
     c4c:	df000217 	ldw	fp,8(sp)
     c50:	dc400117 	ldw	r17,4(sp)
     c54:	dc000017 	ldw	r16,0(sp)
     c58:	dec00404 	addi	sp,sp,16
     c5c:	f800283a 	ret

00000c60 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
     c60:	defff504 	addi	sp,sp,-44
     c64:	dfc00a15 	stw	ra,40(sp)
     c68:	df000915 	stw	fp,36(sp)
     c6c:	df000904 	addi	fp,sp,36
     c70:	e13ffc15 	stw	r4,-16(fp)
     c74:	e17ffd15 	stw	r5,-12(fp)
     c78:	e1bffe15 	stw	r6,-8(fp)
     c7c:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
     c80:	e0800217 	ldw	r2,8(fp)
     c84:	10800048 	cmpgei	r2,r2,1
     c88:	1000361e 	bne	r2,zero,d64 <vid_move_block+0x104>
     c8c:	e0800317 	ldw	r2,12(fp)
     c90:	10800048 	cmpgei	r2,r2,1
     c94:	1000331e 	bne	r2,zero,d64 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
     c98:	e0bffd17 	ldw	r2,-12(fp)
     c9c:	e0bffa15 	stw	r2,-24(fp)
     ca0:	00002d06 	br	d58 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
     ca4:	e0fffa17 	ldw	r3,-24(fp)
     ca8:	e0800317 	ldw	r2,12(fp)
     cac:	1885883a 	add	r2,r3,r2
     cb0:	e0bff815 	stw	r2,-32(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
     cb4:	e0bffc17 	ldw	r2,-16(fp)
     cb8:	e0bffb15 	stw	r2,-20(fp)
     cbc:	00002006 	br	d40 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
     cc0:	e0fffb17 	ldw	r3,-20(fp)
     cc4:	e0800217 	ldw	r2,8(fp)
     cc8:	1885883a 	add	r2,r3,r2
     ccc:	e0bff915 	stw	r2,-28(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
     cd0:	e13ffb17 	ldw	r4,-20(fp)
     cd4:	e17ffa17 	ldw	r5,-24(fp)
     cd8:	e1800517 	ldw	r6,20(fp)
     cdc:	00012400 	call	1240 <vid_get_pixel>
     ce0:	e0bff70d 	sth	r2,-36(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
     ce4:	e1bff70f 	ldh	r6,-36(fp)
     ce8:	e13ff917 	ldw	r4,-28(fp)
     cec:	e17ff817 	ldw	r5,-32(fp)
     cf0:	e1c00517 	ldw	r7,20(fp)
     cf4:	00010b80 	call	10b8 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
     cf8:	e0fffe17 	ldw	r3,-8(fp)
     cfc:	e0800217 	ldw	r2,8(fp)
     d00:	1887883a 	add	r3,r3,r2
     d04:	e0bffb17 	ldw	r2,-20(fp)
     d08:	10c0050e 	bge	r2,r3,d20 <vid_move_block+0xc0>
     d0c:	e0ffff17 	ldw	r3,-4(fp)
     d10:	e0800317 	ldw	r2,12(fp)
     d14:	1887883a 	add	r3,r3,r2
     d18:	e0bffa17 	ldw	r2,-24(fp)
     d1c:	10c00516 	blt	r2,r3,d34 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
     d20:	e1800417 	ldw	r6,16(fp)
     d24:	e13ffb17 	ldw	r4,-20(fp)
     d28:	e17ffa17 	ldw	r5,-24(fp)
     d2c:	e1c00517 	ldw	r7,20(fp)
     d30:	00010b80 	call	10b8 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
     d34:	e0bffb17 	ldw	r2,-20(fp)
     d38:	10800044 	addi	r2,r2,1
     d3c:	e0bffb15 	stw	r2,-20(fp)
     d40:	e0fffb17 	ldw	r3,-20(fp)
     d44:	e0bffe17 	ldw	r2,-8(fp)
     d48:	18bfdd16 	blt	r3,r2,cc0 <vid_move_block+0x60>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
     d4c:	e0bffa17 	ldw	r2,-24(fp)
     d50:	10800044 	addi	r2,r2,1
     d54:	e0bffa15 	stw	r2,-24(fp)
     d58:	e0fffa17 	ldw	r3,-24(fp)
     d5c:	e0bfff17 	ldw	r2,-4(fp)
     d60:	18bfd016 	blt	r3,r2,ca4 <vid_move_block+0x44>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
     d64:	0005883a 	mov	r2,zero
}
     d68:	e037883a 	mov	sp,fp
     d6c:	dfc00117 	ldw	ra,4(sp)
     d70:	df000017 	ldw	fp,0(sp)
     d74:	dec00204 	addi	sp,sp,8
     d78:	f800283a 	ret

00000d7c <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
     d7c:	defff604 	addi	sp,sp,-40
     d80:	dfc00915 	stw	ra,36(sp)
     d84:	df000815 	stw	fp,32(sp)
     d88:	df000804 	addi	fp,sp,32
     d8c:	e13ffc15 	stw	r4,-16(fp)
     d90:	e17ffd15 	stw	r5,-12(fp)
     d94:	e1bffe15 	stw	r6,-8(fp)
     d98:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
     d9c:	e03ffb15 	stw	zero,-20(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
     da0:	e0bffc17 	ldw	r2,-16(fp)
     da4:	e0bffa15 	stw	r2,-24(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
     da8:	00002906 	br	e50 <vid_print_string+0xd4>
    //Handle newline char here.
    if (string[i] == '\n') {
     dac:	e0bffb17 	ldw	r2,-20(fp)
     db0:	1007883a 	mov	r3,r2
     db4:	e0800317 	ldw	r2,12(fp)
     db8:	1885883a 	add	r2,r3,r2
     dbc:	10800003 	ldbu	r2,0(r2)
     dc0:	10803fcc 	andi	r2,r2,255
     dc4:	1080201c 	xori	r2,r2,128
     dc8:	10bfe004 	addi	r2,r2,-128
     dcc:	10800298 	cmpnei	r2,r2,10
     dd0:	1000091e 	bne	r2,zero,df8 <vid_print_string+0x7c>
      horiz_offset = original_horiz_offset;
     dd4:	e0bffa17 	ldw	r2,-24(fp)
     dd8:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
     ddc:	e0bffd17 	ldw	r2,-12(fp)
     de0:	10800304 	addi	r2,r2,12
     de4:	e0bffd15 	stw	r2,-12(fp)
      i++;
     de8:	e0bffb17 	ldw	r2,-20(fp)
     dec:	10800044 	addi	r2,r2,1
     df0:	e0bffb15 	stw	r2,-20(fp)
      continue;
     df4:	00001606 	br	e50 <vid_print_string+0xd4>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
     df8:	e0bffb17 	ldw	r2,-20(fp)
     dfc:	1007883a 	mov	r3,r2
     e00:	e0800317 	ldw	r2,12(fp)
     e04:	1885883a 	add	r2,r3,r2
     e08:	10800003 	ldbu	r2,0(r2)
     e0c:	11c03fcc 	andi	r7,r2,255
     e10:	39c0201c 	xori	r7,r7,128
     e14:	39ffe004 	addi	r7,r7,-128
     e18:	e0bfff17 	ldw	r2,-4(fp)
     e1c:	d8800015 	stw	r2,0(sp)
     e20:	e0800217 	ldw	r2,8(fp)
     e24:	d8800115 	stw	r2,4(sp)
     e28:	e13ffc17 	ldw	r4,-16(fp)
     e2c:	e17ffd17 	ldw	r5,-12(fp)
     e30:	e1bffe17 	ldw	r6,-8(fp)
     e34:	0000fcc0 	call	fcc <vid_print_char>
    i++;
     e38:	e0bffb17 	ldw	r2,-20(fp)
     e3c:	10800044 	addi	r2,r2,1
     e40:	e0bffb15 	stw	r2,-20(fp)
    horiz_offset += 8;
     e44:	e0bffc17 	ldw	r2,-16(fp)
     e48:	10800204 	addi	r2,r2,8
     e4c:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
     e50:	e0bffb17 	ldw	r2,-20(fp)
     e54:	1007883a 	mov	r3,r2
     e58:	e0800317 	ldw	r2,12(fp)
     e5c:	1885883a 	add	r2,r3,r2
     e60:	10800003 	ldbu	r2,0(r2)
     e64:	10803fcc 	andi	r2,r2,255
     e68:	1080201c 	xori	r2,r2,128
     e6c:	10bfe004 	addi	r2,r2,-128
     e70:	1004c03a 	cmpne	r2,r2,zero
     e74:	103fcd1e 	bne	r2,zero,dac <vid_print_string+0x30>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
     e78:	0005883a 	mov	r2,zero
}
     e7c:	e037883a 	mov	sp,fp
     e80:	dfc00117 	ldw	ra,4(sp)
     e84:	df000017 	ldw	fp,0(sp)
     e88:	dec00204 	addi	sp,sp,8
     e8c:	f800283a 	ret

00000e90 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
     e90:	defff704 	addi	sp,sp,-36
     e94:	dfc00815 	stw	ra,32(sp)
     e98:	df000715 	stw	fp,28(sp)
     e9c:	df000704 	addi	fp,sp,28
     ea0:	e13ffc15 	stw	r4,-16(fp)
     ea4:	e17ffd15 	stw	r5,-12(fp)
     ea8:	e1bffe15 	stw	r6,-8(fp)
     eac:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
     eb0:	e0800317 	ldw	r2,12(fp)
     eb4:	1005003a 	cmpeq	r2,r2,zero
     eb8:	10000a1e 	bne	r2,zero,ee4 <vid_draw_box+0x54>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
     ebc:	e0800217 	ldw	r2,8(fp)
     ec0:	d8800015 	stw	r2,0(sp)
     ec4:	e0800417 	ldw	r2,16(fp)
     ec8:	d8800115 	stw	r2,4(sp)
     ecc:	e13ffc17 	ldw	r4,-16(fp)
     ed0:	e17ffd17 	ldw	r5,-12(fp)
     ed4:	e1bffe17 	ldw	r6,-8(fp)
     ed8:	e1ffff17 	ldw	r7,-4(fp)
     edc:	00012c00 	call	12c0 <vid_paint_block>
     ee0:	00003406 	br	fb4 <vid_draw_box+0x124>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
     ee4:	e0bfff17 	ldw	r2,-4(fp)
     ee8:	11ffffc4 	addi	r7,r2,-1
     eec:	00800044 	movi	r2,1
     ef0:	d8800015 	stw	r2,0(sp)
     ef4:	e0800217 	ldw	r2,8(fp)
     ef8:	d8800115 	stw	r2,4(sp)
     efc:	e0800417 	ldw	r2,16(fp)
     f00:	d8800215 	stw	r2,8(sp)
     f04:	e13ffc17 	ldw	r4,-16(fp)
     f08:	e17ffd17 	ldw	r5,-12(fp)
     f0c:	e1bffc17 	ldw	r6,-16(fp)
     f10:	00006580 	call	658 <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
     f14:	e0bffe17 	ldw	r2,-8(fp)
     f18:	113fffc4 	addi	r4,r2,-1
     f1c:	e0bffe17 	ldw	r2,-8(fp)
     f20:	11bfffc4 	addi	r6,r2,-1
     f24:	e0bfff17 	ldw	r2,-4(fp)
     f28:	11ffffc4 	addi	r7,r2,-1
     f2c:	00800044 	movi	r2,1
     f30:	d8800015 	stw	r2,0(sp)
     f34:	e0800217 	ldw	r2,8(fp)
     f38:	d8800115 	stw	r2,4(sp)
     f3c:	e0800417 	ldw	r2,16(fp)
     f40:	d8800215 	stw	r2,8(sp)
     f44:	e17ffd17 	ldw	r5,-12(fp)
     f48:	00006580 	call	658 <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
     f4c:	e0bffe17 	ldw	r2,-8(fp)
     f50:	11bfffc4 	addi	r6,r2,-1
     f54:	00800044 	movi	r2,1
     f58:	d8800015 	stw	r2,0(sp)
     f5c:	e0800217 	ldw	r2,8(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800417 	ldw	r2,16(fp)
     f68:	d8800215 	stw	r2,8(sp)
     f6c:	e13ffc17 	ldw	r4,-16(fp)
     f70:	e17ffd17 	ldw	r5,-12(fp)
     f74:	e1fffd17 	ldw	r7,-12(fp)
     f78:	00006580 	call	658 <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
     f7c:	e0bfff17 	ldw	r2,-4(fp)
     f80:	117fffc4 	addi	r5,r2,-1
     f84:	e0bffe17 	ldw	r2,-8(fp)
     f88:	11bfffc4 	addi	r6,r2,-1
     f8c:	e0bfff17 	ldw	r2,-4(fp)
     f90:	11ffffc4 	addi	r7,r2,-1
     f94:	00800044 	movi	r2,1
     f98:	d8800015 	stw	r2,0(sp)
     f9c:	e0800217 	ldw	r2,8(fp)
     fa0:	d8800115 	stw	r2,4(sp)
     fa4:	e0800417 	ldw	r2,16(fp)
     fa8:	d8800215 	stw	r2,8(sp)
     fac:	e13ffc17 	ldw	r4,-16(fp)
     fb0:	00006580 	call	658 <vid_draw_line>
  }

  return (0);
     fb4:	0005883a 	mov	r2,zero
}
     fb8:	e037883a 	mov	sp,fp
     fbc:	dfc00117 	ldw	ra,4(sp)
     fc0:	df000017 	ldw	fp,0(sp)
     fc4:	dec00204 	addi	sp,sp,8
     fc8:	f800283a 	ret

00000fcc <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
     fcc:	defff704 	addi	sp,sp,-36
     fd0:	dfc00815 	stw	ra,32(sp)
     fd4:	df000715 	stw	fp,28(sp)
     fd8:	df000704 	addi	fp,sp,28
     fdc:	e13ffc15 	stw	r4,-16(fp)
     fe0:	e17ffd15 	stw	r5,-12(fp)
     fe4:	e1bffe15 	stw	r6,-8(fp)
     fe8:	e1ffff05 	stb	r7,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
     fec:	e0bfff03 	ldbu	r2,-4(fp)
     ff0:	10bff804 	addi	r2,r2,-32
     ff4:	e0bff945 	stb	r2,-27(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
     ff8:	e03ffb15 	stw	zero,-20(fp)
     ffc:	00002506 	br	1094 <vid_print_char+0xc8>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    1000:	e13ff947 	ldb	r4,-27(fp)
    1004:	014002c4 	movi	r5,11
    1008:	000a0540 	call	a054 <__mulsi3>
    100c:	1007883a 	mov	r3,r2
    1010:	e0800217 	ldw	r2,8(fp)
    1014:	1887883a 	add	r3,r3,r2
    1018:	e0bffb17 	ldw	r2,-20(fp)
    101c:	1885883a 	add	r2,r3,r2
    1020:	10800003 	ldbu	r2,0(r2)
    1024:	e0bff905 	stb	r2,-28(fp)
    for (j = 0; j < 8; j++) {
    1028:	e03ffa15 	stw	zero,-24(fp)
    102c:	00001306 	br	107c <vid_print_char+0xb0>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
    1030:	e13ff907 	ldb	r4,-28(fp)
    1034:	00c02004 	movi	r3,128
    1038:	e0bffa17 	ldw	r2,-24(fp)
    103c:	1885d83a 	sra	r2,r3,r2
    1040:	2084703a 	and	r2,r4,r2
    1044:	1005003a 	cmpeq	r2,r2,zero
    1048:	1000091e 	bne	r2,zero,1070 <vid_print_char+0xa4>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
    104c:	e0fffc17 	ldw	r3,-16(fp)
    1050:	e0bffa17 	ldw	r2,-24(fp)
    1054:	1889883a 	add	r4,r3,r2
    1058:	e0fffd17 	ldw	r3,-12(fp)
    105c:	e0bffb17 	ldw	r2,-20(fp)
    1060:	188b883a 	add	r5,r3,r2
    1064:	e1bffe17 	ldw	r6,-8(fp)
    1068:	e1c00317 	ldw	r7,12(fp)
    106c:	00010b80 	call	10b8 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
    1070:	e0bffa17 	ldw	r2,-24(fp)
    1074:	10800044 	addi	r2,r2,1
    1078:	e0bffa15 	stw	r2,-24(fp)
    107c:	e0bffa17 	ldw	r2,-24(fp)
    1080:	10800210 	cmplti	r2,r2,8
    1084:	103fea1e 	bne	r2,zero,1030 <vid_print_char+0x64>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
    1088:	e0bffb17 	ldw	r2,-20(fp)
    108c:	10800044 	addi	r2,r2,1
    1090:	e0bffb15 	stw	r2,-20(fp)
    1094:	e0bffb17 	ldw	r2,-20(fp)
    1098:	108002d0 	cmplti	r2,r2,11
    109c:	103fd81e 	bne	r2,zero,1000 <vid_print_char+0x34>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
    10a0:	0005883a 	mov	r2,zero
}
    10a4:	e037883a 	mov	sp,fp
    10a8:	dfc00117 	ldw	ra,4(sp)
    10ac:	df000017 	ldw	fp,0(sp)
    10b0:	dec00204 	addi	sp,sp,8
    10b4:	f800283a 	ret

000010b8 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
    10b8:	defff804 	addi	sp,sp,-32
    10bc:	dfc00715 	stw	ra,28(sp)
    10c0:	df000615 	stw	fp,24(sp)
    10c4:	dc000515 	stw	r16,20(sp)
    10c8:	df000504 	addi	fp,sp,20
    10cc:	e13ffc15 	stw	r4,-16(fp)
    10d0:	e17ffd15 	stw	r5,-12(fp)
    10d4:	e1bffe15 	stw	r6,-8(fp)
    10d8:	e1ffff15 	stw	r7,-4(fp)
  int addr;
  
  if( display->color_depth == 32 )
    10dc:	e0bfff17 	ldw	r2,-4(fp)
    10e0:	10800417 	ldw	r2,16(r2)
    10e4:	10800818 	cmpnei	r2,r2,32
    10e8:	1000121e 	bne	r2,zero,1134 <vid_set_pixel+0x7c>
  {
//  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 4)) + horiz * 4);
    10ec:	e13fff17 	ldw	r4,-4(fp)
    10f0:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    10f4:	1021883a 	mov	r16,r2
    10f8:	e0bfff17 	ldw	r2,-4(fp)
    10fc:	11000517 	ldw	r4,20(r2)
    1100:	e17ffd17 	ldw	r5,-12(fp)
    1104:	000a0540 	call	a054 <__mulsi3>
    1108:	1007883a 	mov	r3,r2
    110c:	e0bffc17 	ldw	r2,-16(fp)
    1110:	1885883a 	add	r2,r3,r2
    1114:	1085883a 	add	r2,r2,r2
    1118:	1085883a 	add	r2,r2,r2
    111c:	8085883a 	add	r2,r16,r2
    1120:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT( addr, 0, (unsigned int)(color));
    1124:	e0bffb17 	ldw	r2,-20(fp)
    1128:	e0fffe17 	ldw	r3,-8(fp)
    112c:	10c00035 	stwio	r3,0(r2)
    1130:	00003d06 	br	1228 <vid_set_pixel+0x170>
  }
  
  else if( display->color_depth == 24 )
    1134:	e0bfff17 	ldw	r2,-4(fp)
    1138:	10800417 	ldw	r2,16(r2)
    113c:	10800618 	cmpnei	r2,r2,24
    1140:	1000251e 	bne	r2,zero,11d8 <vid_set_pixel+0x120>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 3)) + horiz * 3);
    1144:	e13fff17 	ldw	r4,-4(fp)
    1148:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    114c:	1021883a 	mov	r16,r2
    1150:	e0bfff17 	ldw	r2,-4(fp)
    1154:	11000517 	ldw	r4,20(r2)
    1158:	e17ffd17 	ldw	r5,-12(fp)
    115c:	000a0540 	call	a054 <__mulsi3>
    1160:	1007883a 	mov	r3,r2
    1164:	e0bffc17 	ldw	r2,-16(fp)
    1168:	1887883a 	add	r3,r3,r2
    116c:	1805883a 	mov	r2,r3
    1170:	1085883a 	add	r2,r2,r2
    1174:	10c5883a 	add	r2,r2,r3
    1178:	8085883a 	add	r2,r16,r2
    117c:	e0bffb15 	stw	r2,-20(fp)
		IOWR_8DIRECT( addr, 0, (unsigned char)(color));
    1180:	e13ffb17 	ldw	r4,-20(fp)
    1184:	e0bffe17 	ldw	r2,-8(fp)
    1188:	10c03fcc 	andi	r3,r2,255
    118c:	2005883a 	mov	r2,r4
    1190:	10c00025 	stbio	r3,0(r2)
 		IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
    1194:	e0bffb17 	ldw	r2,-20(fp)
    1198:	10800044 	addi	r2,r2,1
    119c:	1009883a 	mov	r4,r2
    11a0:	e0bffe17 	ldw	r2,-8(fp)
    11a4:	1004d23a 	srli	r2,r2,8
    11a8:	10c03fcc 	andi	r3,r2,255
    11ac:	2005883a 	mov	r2,r4
    11b0:	10c00025 	stbio	r3,0(r2)
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
    11b4:	e0bffb17 	ldw	r2,-20(fp)
    11b8:	10800084 	addi	r2,r2,2
    11bc:	1009883a 	mov	r4,r2
    11c0:	e0bffe17 	ldw	r2,-8(fp)
    11c4:	1004d43a 	srli	r2,r2,16
    11c8:	10c03fcc 	andi	r3,r2,255
    11cc:	2005883a 	mov	r2,r4
    11d0:	10c00025 	stbio	r3,0(r2)
    11d4:	00001406 	br	1228 <vid_set_pixel+0x170>
  }
  
  else if( display->color_depth == 16 )
    11d8:	e0bfff17 	ldw	r2,-4(fp)
    11dc:	10800417 	ldw	r2,16(r2)
    11e0:	10800418 	cmpnei	r2,r2,16
    11e4:	1000101e 	bne	r2,zero,1228 <vid_set_pixel+0x170>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
    11e8:	e13fff17 	ldw	r4,-4(fp)
    11ec:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    11f0:	1021883a 	mov	r16,r2
    11f4:	e0bfff17 	ldw	r2,-4(fp)
    11f8:	11000517 	ldw	r4,20(r2)
    11fc:	e17ffd17 	ldw	r5,-12(fp)
    1200:	000a0540 	call	a054 <__mulsi3>
    1204:	1007883a 	mov	r3,r2
    1208:	e0bffc17 	ldw	r2,-16(fp)
    120c:	1885883a 	add	r2,r3,r2
    1210:	1085883a 	add	r2,r2,r2
    1214:	8085883a 	add	r2,r16,r2
    1218:	e0bffb15 	stw	r2,-20(fp)
  	IOWR_16DIRECT( addr, 0, (int)(color));
    121c:	e0bffb17 	ldw	r2,-20(fp)
    1220:	e0fffe17 	ldw	r3,-8(fp)
    1224:	10c0002d 	sthio	r3,0(r2)
	}


}
    1228:	e037883a 	mov	sp,fp
    122c:	dfc00217 	ldw	ra,8(sp)
    1230:	df000117 	ldw	fp,4(sp)
    1234:	dc000017 	ldw	r16,0(sp)
    1238:	dec00304 	addi	sp,sp,12
    123c:	f800283a 	ret

00001240 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
    1240:	defff904 	addi	sp,sp,-28
    1244:	dfc00615 	stw	ra,24(sp)
    1248:	df000515 	stw	fp,20(sp)
    124c:	dc000415 	stw	r16,16(sp)
    1250:	df000404 	addi	fp,sp,16
    1254:	e13ffd15 	stw	r4,-12(fp)
    1258:	e17ffe15 	stw	r5,-8(fp)
    125c:	e1bfff15 	stw	r6,-4(fp)
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
    1260:	e13fff17 	ldw	r4,-4(fp)
    1264:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    1268:	1021883a 	mov	r16,r2
    126c:	e0bfff17 	ldw	r2,-4(fp)
    1270:	11000517 	ldw	r4,20(r2)
    1274:	e17ffe17 	ldw	r5,-8(fp)
    1278:	000a0540 	call	a054 <__mulsi3>
    127c:	1007883a 	mov	r3,r2
    1280:	e0bffd17 	ldw	r2,-12(fp)
    1284:	1885883a 	add	r2,r3,r2
    1288:	1085883a 	add	r2,r2,r2
    128c:	8085883a 	add	r2,r16,r2
    1290:	e0bffc15 	stw	r2,-16(fp)
  return(IORD_16DIRECT(addr, 0));
    1294:	e0bffc17 	ldw	r2,-16(fp)
    1298:	1080002b 	ldhuio	r2,0(r2)
    129c:	10bfffcc 	andi	r2,r2,65535
    12a0:	10a0001c 	xori	r2,r2,32768
    12a4:	10a00004 	addi	r2,r2,-32768

}
    12a8:	e037883a 	mov	sp,fp
    12ac:	dfc00217 	ldw	ra,8(sp)
    12b0:	df000117 	ldw	fp,4(sp)
    12b4:	dc000017 	ldw	r16,0(sp)
    12b8:	dec00304 	addi	sp,sp,12
    12bc:	f800283a 	ret

000012c0 <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
    12c0:	defff204 	addi	sp,sp,-56
    12c4:	dfc00d15 	stw	ra,52(sp)
    12c8:	df000c15 	stw	fp,48(sp)
    12cc:	dc400b15 	stw	r17,44(sp)
    12d0:	dc000a15 	stw	r16,40(sp)
    12d4:	df000a04 	addi	fp,sp,40
    12d8:	e13ffb15 	stw	r4,-20(fp)
    12dc:	e17ffc15 	stw	r5,-16(fp)
    12e0:	e1bffd15 	stw	r6,-12(fp)
    12e4:	e1fffe15 	stw	r7,-8(fp)
  int i;
  unsigned int addr; // richard add unsigned
  int bytes_per_line, bytes_per_pixel;
  char* line;
  
  bytes_per_pixel = (display->color_depth / 8);
    12e8:	e0800517 	ldw	r2,20(fp)
    12ec:	10800417 	ldw	r2,16(r2)
    12f0:	e0bfff15 	stw	r2,-4(fp)
    12f4:	e0ffff17 	ldw	r3,-4(fp)
    12f8:	1804403a 	cmpge	r2,r3,zero
    12fc:	1000031e 	bne	r2,zero,130c <vid_paint_block+0x4c>
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	108001c4 	addi	r2,r2,7
    1308:	e0bfff15 	stw	r2,-4(fp)
    130c:	e0ffff17 	ldw	r3,-4(fp)
    1310:	1805d0fa 	srai	r2,r3,3
    1314:	e0bff715 	stw	r2,-36(fp)
  bytes_per_line = ((Hend - Hstart) * bytes_per_pixel);
    1318:	e0fffd17 	ldw	r3,-12(fp)
    131c:	e0bffb17 	ldw	r2,-20(fp)
    1320:	1889c83a 	sub	r4,r3,r2
    1324:	e17ff717 	ldw	r5,-36(fp)
    1328:	000a0540 	call	a054 <__mulsi3>
    132c:	e0bff815 	stw	r2,-32(fp)

  line = malloc(bytes_per_line + 12);
    1330:	e0bff817 	ldw	r2,-32(fp)
    1334:	10800304 	addi	r2,r2,12
    1338:	1009883a 	mov	r4,r2
    133c:	000a7680 	call	a768 <malloc>
    1340:	e0bff615 	stw	r2,-40(fp)

	if(display->color_depth == 16)
    1344:	e0800517 	ldw	r2,20(fp)
    1348:	10800417 	ldw	r2,16(r2)
    134c:	10800418 	cmpnei	r2,r2,16
    1350:	1000171e 	bne	r2,zero,13b0 <vid_paint_block+0xf0>
	{
    for (i = 0; i < bytes_per_line; i+=2) 
    1354:	e03ffa15 	stw	zero,-24(fp)
    1358:	00001106 	br	13a0 <vid_paint_block+0xe0>
    {
      *(line + i) = (unsigned char)color;
    135c:	e0bffa17 	ldw	r2,-24(fp)
    1360:	1007883a 	mov	r3,r2
    1364:	e0bff617 	ldw	r2,-40(fp)
    1368:	1887883a 	add	r3,r3,r2
    136c:	e0800417 	ldw	r2,16(fp)
    1370:	18800005 	stb	r2,0(r3)
      *(line + i + 1) = (unsigned char)(color >> 8);
    1374:	e0bffa17 	ldw	r2,-24(fp)
    1378:	1007883a 	mov	r3,r2
    137c:	e0bff617 	ldw	r2,-40(fp)
    1380:	1885883a 	add	r2,r3,r2
    1384:	10c00044 	addi	r3,r2,1
    1388:	e0800417 	ldw	r2,16(fp)
    138c:	1005d23a 	srai	r2,r2,8
    1390:	18800005 	stb	r2,0(r3)

  line = malloc(bytes_per_line + 12);

	if(display->color_depth == 16)
	{
    for (i = 0; i < bytes_per_line; i+=2) 
    1394:	e0bffa17 	ldw	r2,-24(fp)
    1398:	10800084 	addi	r2,r2,2
    139c:	e0bffa15 	stw	r2,-24(fp)
    13a0:	e0fffa17 	ldw	r3,-24(fp)
    13a4:	e0bff817 	ldw	r2,-32(fp)
    13a8:	18bfec16 	blt	r3,r2,135c <vid_paint_block+0x9c>
    13ac:	00003606 	br	1488 <vid_paint_block+0x1c8>
    {
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
    13b0:	e0800517 	ldw	r2,20(fp)
    13b4:	10800417 	ldw	r2,16(r2)
    13b8:	10800618 	cmpnei	r2,r2,24
    13bc:	10001f1e 	bne	r2,zero,143c <vid_paint_block+0x17c>
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
    13c0:	e03ffa15 	stw	zero,-24(fp)
    13c4:	00001906 	br	142c <vid_paint_block+0x16c>
    {
      *(line + i) = (unsigned char)color;
    13c8:	e0bffa17 	ldw	r2,-24(fp)
    13cc:	1007883a 	mov	r3,r2
    13d0:	e0bff617 	ldw	r2,-40(fp)
    13d4:	1887883a 	add	r3,r3,r2
    13d8:	e0800417 	ldw	r2,16(fp)
    13dc:	18800005 	stb	r2,0(r3)
      *(line + i + 1) = (unsigned char)(color >> 8);
    13e0:	e0bffa17 	ldw	r2,-24(fp)
    13e4:	1007883a 	mov	r3,r2
    13e8:	e0bff617 	ldw	r2,-40(fp)
    13ec:	1885883a 	add	r2,r3,r2
    13f0:	10c00044 	addi	r3,r2,1
    13f4:	e0800417 	ldw	r2,16(fp)
    13f8:	1005d23a 	srai	r2,r2,8
    13fc:	18800005 	stb	r2,0(r3)
      *(line + i + 2) = (unsigned char)(color >> 16);
    1400:	e0bffa17 	ldw	r2,-24(fp)
    1404:	1007883a 	mov	r3,r2
    1408:	e0bff617 	ldw	r2,-40(fp)
    140c:	1885883a 	add	r2,r3,r2
    1410:	10c00084 	addi	r3,r2,2
    1414:	e0800417 	ldw	r2,16(fp)
    1418:	1005d43a 	srai	r2,r2,16
    141c:	18800005 	stb	r2,0(r3)
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
    1420:	e0bffa17 	ldw	r2,-24(fp)
    1424:	108000c4 	addi	r2,r2,3
    1428:	e0bffa15 	stw	r2,-24(fp)
    142c:	e0fffa17 	ldw	r3,-24(fp)
    1430:	e0bff817 	ldw	r2,-32(fp)
    1434:	18bfe416 	blt	r3,r2,13c8 <vid_paint_block+0x108>
    1438:	00001306 	br	1488 <vid_paint_block+0x1c8>
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
    143c:	e0800517 	ldw	r2,20(fp)
    1440:	10800417 	ldw	r2,16(r2)
    1444:	10800818 	cmpnei	r2,r2,32
    1448:	10000f1e 	bne	r2,zero,1488 <vid_paint_block+0x1c8>
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
    144c:	e03ffa15 	stw	zero,-24(fp)
    1450:	00000a06 	br	147c <vid_paint_block+0x1bc>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(line + i) = (unsigned int)color;
    1454:	e0bffa17 	ldw	r2,-24(fp)
    1458:	1007883a 	mov	r3,r2
    145c:	e0bff617 	ldw	r2,-40(fp)
    1460:	1885883a 	add	r2,r3,r2
    1464:	1007883a 	mov	r3,r2
    1468:	e0800417 	ldw	r2,16(fp)
    146c:	18800015 	stw	r2,0(r3)
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
    1470:	e0bffa17 	ldw	r2,-24(fp)
    1474:	10800104 	addi	r2,r2,4
    1478:	e0bffa15 	stw	r2,-24(fp)
    147c:	e0fffa17 	ldw	r3,-24(fp)
    1480:	e0bff817 	ldw	r2,-32(fp)
    1484:	18bff316 	blt	r3,r2,1454 <vid_paint_block+0x194>
      *(int*)(line + i) = (unsigned int)color;
    }
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
    1488:	e1000517 	ldw	r4,20(fp)
    148c:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    1490:	1023883a 	mov	r17,r2
    1494:	e0800517 	ldw	r2,20(fp)
    1498:	11000517 	ldw	r4,20(r2)
    149c:	e17ff717 	ldw	r5,-36(fp)
    14a0:	000a0540 	call	a054 <__mulsi3>
    14a4:	1009883a 	mov	r4,r2
    14a8:	e17ffc17 	ldw	r5,-16(fp)
    14ac:	000a0540 	call	a054 <__mulsi3>
    14b0:	1021883a 	mov	r16,r2
    14b4:	e13ffb17 	ldw	r4,-20(fp)
    14b8:	e17ff717 	ldw	r5,-36(fp)
    14bc:	000a0540 	call	a054 <__mulsi3>
    14c0:	8085883a 	add	r2,r16,r2
    14c4:	8885883a 	add	r2,r17,r2
    14c8:	e0bff915 	stw	r2,-28(fp)
  
  for (i = Vstart; i < Vend; i++)
    14cc:	e0bffc17 	ldw	r2,-16(fp)
    14d0:	e0bffa15 	stw	r2,-24(fp)
    14d4:	00001106 	br	151c <vid_paint_block+0x25c>
  {
    memcpy( (void*)addr, line, bytes_per_line );
    14d8:	e0fff917 	ldw	r3,-28(fp)
    14dc:	e1bff817 	ldw	r6,-32(fp)
    14e0:	e0bff617 	ldw	r2,-40(fp)
    14e4:	1809883a 	mov	r4,r3
    14e8:	100b883a 	mov	r5,r2
    14ec:	000aebc0 	call	aebc <memcpy>
    addr += (display->width * bytes_per_pixel);
    14f0:	e0800517 	ldw	r2,20(fp)
    14f4:	11000517 	ldw	r4,20(r2)
    14f8:	e17ff717 	ldw	r5,-36(fp)
    14fc:	000a0540 	call	a054 <__mulsi3>
    1500:	1007883a 	mov	r3,r2
    1504:	e0bff917 	ldw	r2,-28(fp)
    1508:	10c5883a 	add	r2,r2,r3
    150c:	e0bff915 	stw	r2,-28(fp)
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
  
  for (i = Vstart; i < Vend; i++)
    1510:	e0bffa17 	ldw	r2,-24(fp)
    1514:	10800044 	addi	r2,r2,1
    1518:	e0bffa15 	stw	r2,-24(fp)
    151c:	e0fffa17 	ldw	r3,-24(fp)
    1520:	e0bffe17 	ldw	r2,-8(fp)
    1524:	18bfec16 	blt	r3,r2,14d8 <vid_paint_block+0x218>
  {
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
    1528:	e13ff617 	ldw	r4,-40(fp)
    152c:	000a7540 	call	a754 <free>
}
    1530:	e037883a 	mov	sp,fp
    1534:	dfc00317 	ldw	ra,12(sp)
    1538:	df000217 	ldw	fp,8(sp)
    153c:	dc400117 	ldw	r17,4(sp)
    1540:	dc000017 	ldw	r16,0(sp)
    1544:	dec00404 	addi	sp,sp,16
    1548:	f800283a 	ret

0000154c <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
    154c:	defff404 	addi	sp,sp,-48
    1550:	dfc00b15 	stw	ra,44(sp)
    1554:	df000a15 	stw	fp,40(sp)
    1558:	dc000915 	stw	r16,36(sp)
    155c:	df000904 	addi	fp,sp,36
    1560:	e1bffe15 	stw	r6,-8(fp)
    1564:	e1ffff15 	stw	r7,-4(fp)
    1568:	e13ffc0d 	sth	r4,-16(fp)
    156c:	e17ffd0d 	sth	r5,-12(fp)

  int i;
  int addr;
  int bytes_per_line;

  char *fast_buffer = malloc(1024 * 3);
    1570:	01030004 	movi	r4,3072
    1574:	000a7680 	call	a768 <malloc>
    1578:	e0bff815 	stw	r2,-32(fp)

  if( Hstart > Hend )
    157c:	e0fffc0f 	ldh	r3,-16(fp)
    1580:	e0bffd0f 	ldh	r2,-12(fp)
    1584:	10c0060e 	bge	r2,r3,15a0 <vid_draw_horiz_line+0x54>
  {
    short temp = Hstart;
    1588:	e0bffc0b 	ldhu	r2,-16(fp)
    158c:	e0bff70d 	sth	r2,-36(fp)
    Hstart = Hend;
    1590:	e0bffd0b 	ldhu	r2,-12(fp)
    1594:	e0bffc0d 	sth	r2,-16(fp)
    Hend = temp;
    1598:	e0bff70b 	ldhu	r2,-36(fp)
    159c:	e0bffd0d 	sth	r2,-12(fp)
  }
  
  if(display->color_depth == 32)
    15a0:	e0800317 	ldw	r2,12(fp)
    15a4:	10800417 	ldw	r2,16(r2)
    15a8:	10800818 	cmpnei	r2,r2,32
    15ac:	1000291e 	bne	r2,zero,1654 <vid_draw_horiz_line+0x108>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
    15b0:	e1000317 	ldw	r4,12(fp)
    15b4:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    15b8:	1021883a 	mov	r16,r2
    15bc:	e0800317 	ldw	r2,12(fp)
    15c0:	11000517 	ldw	r4,20(r2)
    15c4:	e17ffe17 	ldw	r5,-8(fp)
    15c8:	000a0540 	call	a054 <__mulsi3>
    15cc:	1007883a 	mov	r3,r2
    15d0:	e0bffc0f 	ldh	r2,-16(fp)
    15d4:	1885883a 	add	r2,r3,r2
    15d8:	1085883a 	add	r2,r2,r2
    15dc:	1085883a 	add	r2,r2,r2
    15e0:	8085883a 	add	r2,r16,r2
    15e4:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 4);
    15e8:	e0fffd0f 	ldh	r3,-12(fp)
    15ec:	e0bffc0f 	ldh	r2,-16(fp)
    15f0:	1885c83a 	sub	r2,r3,r2
    15f4:	1085883a 	add	r2,r2,r2
    15f8:	1085883a 	add	r2,r2,r2
    15fc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < bytes_per_line; i+=4) 
    1600:	e03ffb15 	stw	zero,-20(fp)
    1604:	00000a06 	br	1630 <vid_draw_horiz_line+0xe4>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
    1608:	e0bffb17 	ldw	r2,-20(fp)
    160c:	1007883a 	mov	r3,r2
    1610:	e0bff817 	ldw	r2,-32(fp)
    1614:	1885883a 	add	r2,r3,r2
    1618:	1007883a 	mov	r3,r2
    161c:	e0bfff17 	ldw	r2,-4(fp)
    1620:	18800015 	stw	r2,0(r3)
  
  if(display->color_depth == 32)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
    bytes_per_line = ((Hend - Hstart) * 4);
    for (i = 0; i < bytes_per_line; i+=4) 
    1624:	e0bffb17 	ldw	r2,-20(fp)
    1628:	10800104 	addi	r2,r2,4
    162c:	e0bffb15 	stw	r2,-20(fp)
    1630:	e0fffb17 	ldw	r3,-20(fp)
    1634:	e0bff917 	ldw	r2,-28(fp)
    1638:	18bff316 	blt	r3,r2,1608 <vid_draw_horiz_line+0xbc>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
    163c:	e0fffa17 	ldw	r3,-24(fp)
    1640:	e1bff917 	ldw	r6,-28(fp)
    1644:	e0bff817 	ldw	r2,-32(fp)
    1648:	1809883a 	mov	r4,r3
    164c:	100b883a 	mov	r5,r2
    1650:	000aebc0 	call	aebc <memcpy>
  }
  if(display->color_depth == 24)
    1654:	e0800317 	ldw	r2,12(fp)
    1658:	10800417 	ldw	r2,16(r2)
    165c:	10800618 	cmpnei	r2,r2,24
    1660:	10003b1e 	bne	r2,zero,1750 <vid_draw_horiz_line+0x204>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
    1664:	e1000317 	ldw	r4,12(fp)
    1668:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    166c:	1021883a 	mov	r16,r2
    1670:	e0800317 	ldw	r2,12(fp)
    1674:	11000517 	ldw	r4,20(r2)
    1678:	e17ffe17 	ldw	r5,-8(fp)
    167c:	000a0540 	call	a054 <__mulsi3>
    1680:	1007883a 	mov	r3,r2
    1684:	e0bffc0f 	ldh	r2,-16(fp)
    1688:	1887883a 	add	r3,r3,r2
    168c:	1805883a 	mov	r2,r3
    1690:	1085883a 	add	r2,r2,r2
    1694:	10c5883a 	add	r2,r2,r3
    1698:	8085883a 	add	r2,r16,r2
    169c:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 3);
    16a0:	e0fffd0f 	ldh	r3,-12(fp)
    16a4:	e0bffc0f 	ldh	r2,-16(fp)
    16a8:	1887c83a 	sub	r3,r3,r2
    16ac:	1805883a 	mov	r2,r3
    16b0:	1085883a 	add	r2,r2,r2
    16b4:	10c5883a 	add	r2,r2,r3
    16b8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < bytes_per_line; i+=3) 
    16bc:	e03ffb15 	stw	zero,-20(fp)
    16c0:	00001906 	br	1728 <vid_draw_horiz_line+0x1dc>
    {
      *(fast_buffer + i) = (unsigned char)color;
    16c4:	e0bffb17 	ldw	r2,-20(fp)
    16c8:	1007883a 	mov	r3,r2
    16cc:	e0bff817 	ldw	r2,-32(fp)
    16d0:	1887883a 	add	r3,r3,r2
    16d4:	e0bfff17 	ldw	r2,-4(fp)
    16d8:	18800005 	stb	r2,0(r3)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    16dc:	e0bffb17 	ldw	r2,-20(fp)
    16e0:	1007883a 	mov	r3,r2
    16e4:	e0bff817 	ldw	r2,-32(fp)
    16e8:	1885883a 	add	r2,r3,r2
    16ec:	10c00044 	addi	r3,r2,1
    16f0:	e0bfff17 	ldw	r2,-4(fp)
    16f4:	1005d23a 	srai	r2,r2,8
    16f8:	18800005 	stb	r2,0(r3)
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
    16fc:	e0bffb17 	ldw	r2,-20(fp)
    1700:	1007883a 	mov	r3,r2
    1704:	e0bff817 	ldw	r2,-32(fp)
    1708:	1885883a 	add	r2,r3,r2
    170c:	10c00084 	addi	r3,r2,2
    1710:	e0bfff17 	ldw	r2,-4(fp)
    1714:	1005d43a 	srai	r2,r2,16
    1718:	18800005 	stb	r2,0(r3)
  }
  if(display->color_depth == 24)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
    bytes_per_line = ((Hend - Hstart) * 3);
    for (i = 0; i < bytes_per_line; i+=3) 
    171c:	e0bffb17 	ldw	r2,-20(fp)
    1720:	108000c4 	addi	r2,r2,3
    1724:	e0bffb15 	stw	r2,-20(fp)
    1728:	e0fffb17 	ldw	r3,-20(fp)
    172c:	e0bff917 	ldw	r2,-28(fp)
    1730:	18bfe416 	blt	r3,r2,16c4 <vid_draw_horiz_line+0x178>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
    1734:	e0fffa17 	ldw	r3,-24(fp)
    1738:	e1bff917 	ldw	r6,-28(fp)
    173c:	e0bff817 	ldw	r2,-32(fp)
    1740:	1809883a 	mov	r4,r3
    1744:	100b883a 	mov	r5,r2
    1748:	000aebc0 	call	aebc <memcpy>
    174c:	00003206 	br	1818 <vid_draw_horiz_line+0x2cc>
  }
  else if(display->color_depth == 16)
    1750:	e0800317 	ldw	r2,12(fp)
    1754:	10800417 	ldw	r2,16(r2)
    1758:	10800418 	cmpnei	r2,r2,16
    175c:	10002e1e 	bne	r2,zero,1818 <vid_draw_horiz_line+0x2cc>
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
    1760:	e1000317 	ldw	r4,12(fp)
    1764:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    1768:	1021883a 	mov	r16,r2
    176c:	e0800317 	ldw	r2,12(fp)
    1770:	11000517 	ldw	r4,20(r2)
    1774:	e17ffe17 	ldw	r5,-8(fp)
    1778:	000a0540 	call	a054 <__mulsi3>
    177c:	1007883a 	mov	r3,r2
    1780:	e0bffc0f 	ldh	r2,-16(fp)
    1784:	1885883a 	add	r2,r3,r2
    1788:	1085883a 	add	r2,r2,r2
    178c:	8085883a 	add	r2,r16,r2
    1790:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 2);
    1794:	e0fffd0f 	ldh	r3,-12(fp)
    1798:	e0bffc0f 	ldh	r2,-16(fp)
    179c:	1885c83a 	sub	r2,r3,r2
    17a0:	1085883a 	add	r2,r2,r2
    17a4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < bytes_per_line; i+=2) 
    17a8:	e03ffb15 	stw	zero,-20(fp)
    17ac:	00001106 	br	17f4 <vid_draw_horiz_line+0x2a8>
    {
      *(fast_buffer + i) = (unsigned char)color;
    17b0:	e0bffb17 	ldw	r2,-20(fp)
    17b4:	1007883a 	mov	r3,r2
    17b8:	e0bff817 	ldw	r2,-32(fp)
    17bc:	1887883a 	add	r3,r3,r2
    17c0:	e0bfff17 	ldw	r2,-4(fp)
    17c4:	18800005 	stb	r2,0(r3)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    17c8:	e0bffb17 	ldw	r2,-20(fp)
    17cc:	1007883a 	mov	r3,r2
    17d0:	e0bff817 	ldw	r2,-32(fp)
    17d4:	1885883a 	add	r2,r3,r2
    17d8:	10c00044 	addi	r3,r2,1
    17dc:	e0bfff17 	ldw	r2,-4(fp)
    17e0:	1005d23a 	srai	r2,r2,8
    17e4:	18800005 	stb	r2,0(r3)
  }
  else if(display->color_depth == 16)
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
    bytes_per_line = ((Hend - Hstart) * 2);
    for (i = 0; i < bytes_per_line; i+=2) 
    17e8:	e0bffb17 	ldw	r2,-20(fp)
    17ec:	10800084 	addi	r2,r2,2
    17f0:	e0bffb15 	stw	r2,-20(fp)
    17f4:	e0fffb17 	ldw	r3,-20(fp)
    17f8:	e0bff917 	ldw	r2,-28(fp)
    17fc:	18bfec16 	blt	r3,r2,17b0 <vid_draw_horiz_line+0x264>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
    1800:	e0fffa17 	ldw	r3,-24(fp)
    1804:	e1bff917 	ldw	r6,-28(fp)
    1808:	e0bff817 	ldw	r2,-32(fp)
    180c:	1809883a 	mov	r4,r3
    1810:	100b883a 	mov	r5,r2
    1814:	000aebc0 	call	aebc <memcpy>
  }
  free(fast_buffer);
    1818:	e13ff817 	ldw	r4,-32(fp)
    181c:	000a7540 	call	a754 <free>
}
    1820:	e037883a 	mov	sp,fp
    1824:	dfc00217 	ldw	ra,8(sp)
    1828:	df000117 	ldw	fp,4(sp)
    182c:	dc000017 	ldw	r16,0(sp)
    1830:	dec00304 	addi	sp,sp,12
    1834:	f800283a 	ret

00001838 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
    1838:	defffc04 	addi	sp,sp,-16
    183c:	df000315 	stw	fp,12(sp)
    1840:	df000304 	addi	fp,sp,12
    1844:	e13ffd15 	stw	r4,-12(fp)
    1848:	e17ffe15 	stw	r5,-8(fp)
    184c:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
    1850:	e0bffe17 	ldw	r2,-8(fp)
    1854:	1085883a 	add	r2,r2,r2
    1858:	10800054 	ori	r2,r2,1
    185c:	1006917a 	slli	r3,r2,5
    1860:	e0bfff17 	ldw	r2,-4(fp)
    1864:	1886b03a 	or	r3,r3,r2
    1868:	e0bffd17 	ldw	r2,-12(fp)
    186c:	100492fa 	slli	r2,r2,11
    1870:	1884b03a 	or	r2,r3,r2
}
    1874:	e037883a 	mov	sp,fp
    1878:	df000017 	ldw	fp,0(sp)
    187c:	dec00104 	addi	sp,sp,4
    1880:	f800283a 	ret

00001884 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
    1884:	defffc04 	addi	sp,sp,-16
    1888:	df000315 	stw	fp,12(sp)
    188c:	df000304 	addi	fp,sp,12
    1890:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
    1894:	e0bfff17 	ldw	r2,-4(fp)
    1898:	10800003 	ldbu	r2,0(r2)
    189c:	1007883a 	mov	r3,r2
    18a0:	00bffe04 	movi	r2,-8
    18a4:	1884703a 	and	r2,r3,r2
    18a8:	e0bffe05 	stb	r2,-8(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
    18ac:	e0bfff17 	ldw	r2,-4(fp)
    18b0:	10800044 	addi	r2,r2,1
    18b4:	10800003 	ldbu	r2,0(r2)
    18b8:	1007883a 	mov	r3,r2
    18bc:	00bfff04 	movi	r2,-4
    18c0:	1884703a 	and	r2,r3,r2
    18c4:	e0bffdc5 	stb	r2,-9(fp)
	blue = *(color24 + 2) & 0xF8;
    18c8:	e0bfff17 	ldw	r2,-4(fp)
    18cc:	10800084 	addi	r2,r2,2
    18d0:	10800003 	ldbu	r2,0(r2)
    18d4:	1007883a 	mov	r3,r2
    18d8:	00bffe04 	movi	r2,-8
    18dc:	1884703a 	and	r2,r3,r2
    18e0:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
    18e4:	e0bffd83 	ldbu	r2,-10(fp)
    18e8:	1004d0fa 	srli	r2,r2,3
    18ec:	10c03fcc 	andi	r3,r2,255
    18f0:	e0bffdc3 	ldbu	r2,-9(fp)
    18f4:	100490fa 	slli	r2,r2,3
    18f8:	1884b03a 	or	r2,r3,r2
    18fc:	1007883a 	mov	r3,r2
    1900:	e0bffe03 	ldbu	r2,-8(fp)
    1904:	1004923a 	slli	r2,r2,8
    1908:	1884b03a 	or	r2,r3,r2
    190c:	e0bffd0d 	sth	r2,-12(fp)
	return output;
    1910:	e0bffd0b 	ldhu	r2,-12(fp)
}
    1914:	e037883a 	mov	sp,fp
    1918:	df000017 	ldw	fp,0(sp)
    191c:	dec00104 	addi	sp,sp,4
    1920:	f800283a 	ret

00001924 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
    1924:	defffd04 	addi	sp,sp,-12
    1928:	df000215 	stw	fp,8(sp)
    192c:	df000204 	addi	fp,sp,8
    1930:	e17fff15 	stw	r5,-4(fp)
    1934:	e13ffe0d 	sth	r4,-8(fp)
	*(color24 + 0) = color16 >> 11;
    1938:	e0bffe0b 	ldhu	r2,-8(fp)
    193c:	1004d2fa 	srli	r2,r2,11
    1940:	1007883a 	mov	r3,r2
    1944:	e0bfff17 	ldw	r2,-4(fp)
    1948:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
    194c:	e0bfff17 	ldw	r2,-4(fp)
    1950:	10c00044 	addi	r3,r2,1
    1954:	e0bffe0b 	ldhu	r2,-8(fp)
    1958:	10800f8c 	andi	r2,r2,62
    195c:	1005d17a 	srai	r2,r2,5
    1960:	18800005 	stb	r2,0(r3)
	*(color24 + 2) = (color16 & 0x1F);
    1964:	e0bfff17 	ldw	r2,-4(fp)
    1968:	10c00084 	addi	r3,r2,2
    196c:	e0bffe0b 	ldhu	r2,-8(fp)
    1970:	108007cc 	andi	r2,r2,31
    1974:	18800005 	stb	r2,0(r3)
	
	return (0);
    1978:	0005883a 	mov	r2,zero
}
    197c:	e037883a 	mov	sp,fp
    1980:	df000017 	ldw	fp,0(sp)
    1984:	dec00104 	addi	sp,sp,4
    1988:	f800283a 	ret

0000198c <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
    198c:	defff304 	addi	sp,sp,-52
    1990:	dfc00c15 	stw	ra,48(sp)
    1994:	df000b15 	stw	fp,44(sp)
    1998:	dc400a15 	stw	r17,40(sp)
    199c:	dc000915 	stw	r16,36(sp)
    19a0:	df000904 	addi	fp,sp,36
    19a4:	e13ffc15 	stw	r4,-16(fp)
    19a8:	e17ffd15 	stw	r5,-12(fp)
    19ac:	e1bffe15 	stw	r6,-8(fp)
    19b0:	e1ffff15 	stw	r7,-4(fp)
  unsigned short* temp_line;
  int index_24 = 0;
    19b4:	e03ffa15 	stw	zero,-24(fp)
  int index_16 = 0;
    19b8:	e03ff915 	stw	zero,-28(fp)
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
    19bc:	e1000517 	ldw	r4,20(fp)
    19c0:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    19c4:	1023883a 	mov	r17,r2
    19c8:	e0800517 	ldw	r2,20(fp)
    19cc:	11000517 	ldw	r4,20(r2)
    19d0:	e0800517 	ldw	r2,20(fp)
    19d4:	11400717 	ldw	r5,28(r2)
    19d8:	000a0540 	call	a054 <__mulsi3>
    19dc:	1009883a 	mov	r4,r2
    19e0:	e17ffd17 	ldw	r5,-12(fp)
    19e4:	000a0540 	call	a054 <__mulsi3>
    19e8:	1021883a 	mov	r16,r2
    19ec:	e0800517 	ldw	r2,20(fp)
    19f0:	11000717 	ldw	r4,28(r2)
    19f4:	e17ffc17 	ldw	r5,-16(fp)
    19f8:	000a0540 	call	a054 <__mulsi3>
    19fc:	8085883a 	add	r2,r16,r2
    1a00:	8885883a 	add	r2,r17,r2
    1a04:	e0bff815 	stw	r2,-32(fp)
    ((y * (display->width * (display->bytes_per_pixel))) + 
    (x * (display->bytes_per_pixel)));
  
  bytes_in_line = num_pixels * display->bytes_per_pixel;
    1a08:	e0800517 	ldw	r2,20(fp)
    1a0c:	11000717 	ldw	r4,28(r2)
    1a10:	e17fff17 	ldw	r5,-4(fp)
    1a14:	000a0540 	call	a054 <__mulsi3>
    1a18:	e0bff715 	stw	r2,-36(fp)
  
  if(source_color_depth == 24)
    1a1c:	e0800417 	ldw	r2,16(fp)
    1a20:	10800618 	cmpnei	r2,r2,24
    1a24:	10004f1e 	bne	r2,zero,1b64 <vid_copy_line_to_frame_buffer+0x1d8>
  {
    if(display->color_depth == 16)
    1a28:	e0800517 	ldw	r2,20(fp)
    1a2c:	10800417 	ldw	r2,16(r2)
    1a30:	10800418 	cmpnei	r2,r2,16
    1a34:	1000401e 	bne	r2,zero,1b38 <vid_copy_line_to_frame_buffer+0x1ac>
    {
      temp_line = malloc(bytes_in_line);
    1a38:	e13ff717 	ldw	r4,-36(fp)
    1a3c:	000a7680 	call	a768 <malloc>
    1a40:	e0bffb15 	stw	r2,-20(fp)
      while(index_24 < bytes_in_line)
    1a44:	00003006 	br	1b08 <vid_copy_line_to_frame_buffer+0x17c>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
    1a48:	e0bff917 	ldw	r2,-28(fp)
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	1007883a 	mov	r3,r2
    1a54:	e0bffb17 	ldw	r2,-20(fp)
    1a58:	188b883a 	add	r5,r3,r2
    1a5c:	e0bffa17 	ldw	r2,-24(fp)
    1a60:	1007883a 	mov	r3,r2
    1a64:	e0bffe17 	ldw	r2,-8(fp)
    1a68:	1885883a 	add	r2,r3,r2
    1a6c:	10800084 	addi	r2,r2,2
    1a70:	10800003 	ldbu	r2,0(r2)
    1a74:	10803fcc 	andi	r2,r2,255
    1a78:	1080201c 	xori	r2,r2,128
    1a7c:	10bfe004 	addi	r2,r2,-128
    1a80:	10803e0c 	andi	r2,r2,248
    1a84:	1005d0fa 	srai	r2,r2,3
    1a88:	1009883a 	mov	r4,r2
    1a8c:	e0bffa17 	ldw	r2,-24(fp)
    1a90:	1007883a 	mov	r3,r2
    1a94:	e0bffe17 	ldw	r2,-8(fp)
    1a98:	1885883a 	add	r2,r3,r2
    1a9c:	10800044 	addi	r2,r2,1
    1aa0:	10800003 	ldbu	r2,0(r2)
    1aa4:	10803fcc 	andi	r2,r2,255
    1aa8:	1080201c 	xori	r2,r2,128
    1aac:	10bfe004 	addi	r2,r2,-128
    1ab0:	10803f0c 	andi	r2,r2,252
    1ab4:	100490fa 	slli	r2,r2,3
    1ab8:	2084b03a 	or	r2,r4,r2
    1abc:	1009883a 	mov	r4,r2
    1ac0:	e0bffa17 	ldw	r2,-24(fp)
    1ac4:	1007883a 	mov	r3,r2
    1ac8:	e0bffe17 	ldw	r2,-8(fp)
    1acc:	1885883a 	add	r2,r3,r2
    1ad0:	10800003 	ldbu	r2,0(r2)
    1ad4:	10803fcc 	andi	r2,r2,255
    1ad8:	1080201c 	xori	r2,r2,128
    1adc:	10bfe004 	addi	r2,r2,-128
    1ae0:	10803e0c 	andi	r2,r2,248
    1ae4:	1004923a 	slli	r2,r2,8
    1ae8:	2084b03a 	or	r2,r4,r2
    1aec:	2880000d 	sth	r2,0(r5)
        index_16++;
    1af0:	e0bff917 	ldw	r2,-28(fp)
    1af4:	10800044 	addi	r2,r2,1
    1af8:	e0bff915 	stw	r2,-28(fp)
        index_24+=3;
    1afc:	e0bffa17 	ldw	r2,-24(fp)
    1b00:	108000c4 	addi	r2,r2,3
    1b04:	e0bffa15 	stw	r2,-24(fp)
  if(source_color_depth == 24)
  {
    if(display->color_depth == 16)
    {
      temp_line = malloc(bytes_in_line);
      while(index_24 < bytes_in_line)
    1b08:	e0fffa17 	ldw	r3,-24(fp)
    1b0c:	e0bff717 	ldw	r2,-36(fp)
    1b10:	18bfcd36 	bltu	r3,r2,1a48 <vid_copy_line_to_frame_buffer+0xbc>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
    1b14:	e0bff817 	ldw	r2,-32(fp)
    1b18:	e0fffb17 	ldw	r3,-20(fp)
    1b1c:	1009883a 	mov	r4,r2
    1b20:	180b883a 	mov	r5,r3
    1b24:	e1bff717 	ldw	r6,-36(fp)
    1b28:	000aebc0 	call	aebc <memcpy>
      free(temp_line);
    1b2c:	e13ffb17 	ldw	r4,-20(fp)
    1b30:	000a7540 	call	a754 <free>
    1b34:	00004206 	br	1c40 <vid_copy_line_to_frame_buffer+0x2b4>
    }
    else if(display->color_depth == 24)
    1b38:	e0800517 	ldw	r2,20(fp)
    1b3c:	10800417 	ldw	r2,16(r2)
    1b40:	10800618 	cmpnei	r2,r2,24
    1b44:	10003e1e 	bne	r2,zero,1c40 <vid_copy_line_to_frame_buffer+0x2b4>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    1b48:	e0bff817 	ldw	r2,-32(fp)
    1b4c:	e0fffe17 	ldw	r3,-8(fp)
    1b50:	1009883a 	mov	r4,r2
    1b54:	180b883a 	mov	r5,r3
    1b58:	e1bff717 	ldw	r6,-36(fp)
    1b5c:	000aebc0 	call	aebc <memcpy>
    1b60:	00003706 	br	1c40 <vid_copy_line_to_frame_buffer+0x2b4>
    }
  }
  else if(source_color_depth == 16)
    1b64:	e0800417 	ldw	r2,16(fp)
    1b68:	10800418 	cmpnei	r2,r2,16
    1b6c:	1000341e 	bne	r2,zero,1c40 <vid_copy_line_to_frame_buffer+0x2b4>
  {
    if(display->color_depth == 24)
    1b70:	e0800517 	ldw	r2,20(fp)
    1b74:	10800417 	ldw	r2,16(r2)
    1b78:	10800618 	cmpnei	r2,r2,24
    1b7c:	1000261e 	bne	r2,zero,1c18 <vid_copy_line_to_frame_buffer+0x28c>
    {
      temp_line = malloc(bytes_in_line);
    1b80:	e13ff717 	ldw	r4,-36(fp)
    1b84:	000a7680 	call	a768 <malloc>
    1b88:	e0bffb15 	stw	r2,-20(fp)
      while(index_16 < num_pixels )
    1b8c:	00001606 	br	1be8 <vid_copy_line_to_frame_buffer+0x25c>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
    1b90:	e0bff917 	ldw	r2,-28(fp)
    1b94:	1007883a 	mov	r3,r2
    1b98:	e0bffe17 	ldw	r2,-8(fp)
    1b9c:	1885883a 	add	r2,r3,r2
    1ba0:	10800003 	ldbu	r2,0(r2)
    1ba4:	10803fcc 	andi	r2,r2,255
    1ba8:	1080201c 	xori	r2,r2,128
    1bac:	10bfe004 	addi	r2,r2,-128
    1bb0:	113fffcc 	andi	r4,r2,65535
    1bb4:	e0bffa17 	ldw	r2,-24(fp)
    1bb8:	1085883a 	add	r2,r2,r2
    1bbc:	1007883a 	mov	r3,r2
    1bc0:	e0bffb17 	ldw	r2,-20(fp)
    1bc4:	1885883a 	add	r2,r3,r2
    1bc8:	100b883a 	mov	r5,r2
    1bcc:	00019240 	call	1924 <vid_color_convert16_24>
        index_16++;
    1bd0:	e0bff917 	ldw	r2,-28(fp)
    1bd4:	10800044 	addi	r2,r2,1
    1bd8:	e0bff915 	stw	r2,-28(fp)
        index_24+=3;
    1bdc:	e0bffa17 	ldw	r2,-24(fp)
    1be0:	108000c4 	addi	r2,r2,3
    1be4:	e0bffa15 	stw	r2,-24(fp)
  else if(source_color_depth == 16)
  {
    if(display->color_depth == 24)
    {
      temp_line = malloc(bytes_in_line);
      while(index_16 < num_pixels )
    1be8:	e0fff917 	ldw	r3,-28(fp)
    1bec:	e0bfff17 	ldw	r2,-4(fp)
    1bf0:	18bfe716 	blt	r3,r2,1b90 <vid_copy_line_to_frame_buffer+0x204>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
    1bf4:	e0bff817 	ldw	r2,-32(fp)
    1bf8:	e0fffb17 	ldw	r3,-20(fp)
    1bfc:	1009883a 	mov	r4,r2
    1c00:	180b883a 	mov	r5,r3
    1c04:	e1bff717 	ldw	r6,-36(fp)
    1c08:	000aebc0 	call	aebc <memcpy>
      free(temp_line);
    1c0c:	e13ffb17 	ldw	r4,-20(fp)
    1c10:	000a7540 	call	a754 <free>
    1c14:	00000a06 	br	1c40 <vid_copy_line_to_frame_buffer+0x2b4>
      
    }
    else if(display->color_depth == 16)
    1c18:	e0800517 	ldw	r2,20(fp)
    1c1c:	10800417 	ldw	r2,16(r2)
    1c20:	10800418 	cmpnei	r2,r2,16
    1c24:	1000061e 	bne	r2,zero,1c40 <vid_copy_line_to_frame_buffer+0x2b4>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    1c28:	e0bff817 	ldw	r2,-32(fp)
    1c2c:	e0fffe17 	ldw	r3,-8(fp)
    1c30:	1009883a 	mov	r4,r2
    1c34:	180b883a 	mov	r5,r3
    1c38:	e1bff717 	ldw	r6,-36(fp)
    1c3c:	000aebc0 	call	aebc <memcpy>
    }
  }
  return(0);
    1c40:	0005883a 	mov	r2,zero
}
    1c44:	e037883a 	mov	sp,fp
    1c48:	dfc00317 	ldw	ra,12(sp)
    1c4c:	df000217 	ldw	fp,8(sp)
    1c50:	dc400117 	ldw	r17,4(sp)
    1c54:	dc000017 	ldw	r16,0(sp)
    1c58:	dec00404 	addi	sp,sp,16
    1c5c:	f800283a 	ret

00001c60 <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
    1c60:	deffef04 	addi	sp,sp,-68
    1c64:	dfc01015 	stw	ra,64(sp)
    1c68:	df000f15 	stw	fp,60(sp)
    1c6c:	df000f04 	addi	fp,sp,60
    1c70:	e0800217 	ldw	r2,8(fp)
    1c74:	e13ffb0d 	sth	r4,-20(fp)
    1c78:	e17ffc0d 	sth	r5,-16(fp)
    1c7c:	e1bffd0d 	sth	r6,-12(fp)
    1c80:	e1fffe0d 	sth	r7,-8(fp)
    1c84:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
    1c88:	e0fffd0b 	ldhu	r3,-12(fp)
    1c8c:	e0bffb0b 	ldhu	r2,-20(fp)
    1c90:	1885c83a 	sub	r2,r3,r2
    1c94:	e0bffa15 	stw	r2,-24(fp)
    1c98:	e0bffa17 	ldw	r2,-24(fp)
    1c9c:	1004403a 	cmpge	r2,r2,zero
    1ca0:	1000031e 	bne	r2,zero,1cb0 <vid_draw_sloped_line+0x50>
    1ca4:	e0bffa17 	ldw	r2,-24(fp)
    1ca8:	0085c83a 	sub	r2,zero,r2
    1cac:	e0bffa15 	stw	r2,-24(fp)
  int vert_delta = abs(vert_end-vert_start);
    1cb0:	e0fffe0b 	ldhu	r3,-8(fp)
    1cb4:	e0bffc0b 	ldhu	r2,-16(fp)
    1cb8:	1885c83a 	sub	r2,r3,r2
    1cbc:	e0bff915 	stw	r2,-28(fp)
    1cc0:	e0bff917 	ldw	r2,-28(fp)
    1cc4:	1004403a 	cmpge	r2,r2,zero
    1cc8:	1000031e 	bne	r2,zero,1cd8 <vid_draw_sloped_line+0x78>
    1ccc:	e0bff917 	ldw	r2,-28(fp)
    1cd0:	0085c83a 	sub	r2,zero,r2
    1cd4:	e0bff915 	stw	r2,-28(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
    1cd8:	e0fffb0b 	ldhu	r3,-20(fp)
    1cdc:	e0bffd0b 	ldhu	r2,-12(fp)
    1ce0:	10c0032e 	bgeu	r2,r3,1cf0 <vid_draw_sloped_line+0x90>
    1ce4:	00bfffc4 	movi	r2,-1
    1ce8:	e0bff815 	stw	r2,-32(fp)
    1cec:	00000206 	br	1cf8 <vid_draw_sloped_line+0x98>
    1cf0:	00800044 	movi	r2,1
    1cf4:	e0bff815 	stw	r2,-32(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
    1cf8:	e0fffc0b 	ldhu	r3,-16(fp)
    1cfc:	e0bffe0b 	ldhu	r2,-8(fp)
    1d00:	10c0032e 	bgeu	r2,r3,1d10 <vid_draw_sloped_line+0xb0>
    1d04:	00bfffc4 	movi	r2,-1
    1d08:	e0bff715 	stw	r2,-36(fp)
    1d0c:	00000206 	br	1d18 <vid_draw_sloped_line+0xb8>
    1d10:	00800044 	movi	r2,1
    1d14:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
    1d18:	e0fffa17 	ldw	r3,-24(fp)
    1d1c:	e0bff917 	ldw	r2,-28(fp)
    1d20:	18803516 	blt	r3,r2,1df8 <vid_draw_sloped_line+0x198>
    int dPr   = vert_delta<<1;
    1d24:	e0bff917 	ldw	r2,-28(fp)
    1d28:	1085883a 	add	r2,r2,r2
    1d2c:	e0bff615 	stw	r2,-40(fp)
    int dPru  = dPr - (horiz_delta<<1);
    1d30:	e0bffa17 	ldw	r2,-24(fp)
    1d34:	1085883a 	add	r2,r2,r2
    1d38:	1007883a 	mov	r3,r2
    1d3c:	e0bff617 	ldw	r2,-40(fp)
    1d40:	10c5c83a 	sub	r2,r2,r3
    1d44:	e0bff515 	stw	r2,-44(fp)
    int P     = dPr - horiz_delta;
    1d48:	e0fff617 	ldw	r3,-40(fp)
    1d4c:	e0bffa17 	ldw	r2,-24(fp)
    1d50:	1885c83a 	sub	r2,r3,r2
    1d54:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
    1d58:	00002306 	br	1de8 <vid_draw_sloped_line+0x188>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
    1d5c:	e13ffb0b 	ldhu	r4,-20(fp)
    1d60:	e17ffc0b 	ldhu	r5,-16(fp)
    1d64:	e1800317 	ldw	r6,12(fp)
    1d68:	e1c00417 	ldw	r7,16(fp)
    1d6c:	00010b80 	call	10b8 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
    1d70:	e0bff417 	ldw	r2,-48(fp)
    1d74:	10800050 	cmplti	r2,r2,1
    1d78:	10000f1e 	bne	r2,zero,1db8 <vid_draw_sloped_line+0x158>
        horiz_start+=horiz_incr;
    1d7c:	e0bff817 	ldw	r2,-32(fp)
    1d80:	1007883a 	mov	r3,r2
    1d84:	e0bffb0b 	ldhu	r2,-20(fp)
    1d88:	10c5883a 	add	r2,r2,r3
    1d8c:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
    1d90:	e0bff717 	ldw	r2,-36(fp)
    1d94:	1007883a 	mov	r3,r2
    1d98:	e0bffc0b 	ldhu	r2,-16(fp)
    1d9c:	10c5883a 	add	r2,r2,r3
    1da0:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
    1da4:	e0fff417 	ldw	r3,-48(fp)
    1da8:	e0bff517 	ldw	r2,-44(fp)
    1dac:	1885883a 	add	r2,r3,r2
    1db0:	e0bff415 	stw	r2,-48(fp)
    1db4:	00000906 	br	1ddc <vid_draw_sloped_line+0x17c>
      } else {
        horiz_start+=horiz_incr;
    1db8:	e0bff817 	ldw	r2,-32(fp)
    1dbc:	1007883a 	mov	r3,r2
    1dc0:	e0bffb0b 	ldhu	r2,-20(fp)
    1dc4:	10c5883a 	add	r2,r2,r3
    1dc8:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
    1dcc:	e0fff417 	ldw	r3,-48(fp)
    1dd0:	e0bff617 	ldw	r2,-40(fp)
    1dd4:	1885883a 	add	r2,r3,r2
    1dd8:	e0bff415 	stw	r2,-48(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
    1ddc:	e0bffa17 	ldw	r2,-24(fp)
    1de0:	10bfffc4 	addi	r2,r2,-1
    1de4:	e0bffa15 	stw	r2,-24(fp)
    1de8:	e0bffa17 	ldw	r2,-24(fp)
    1dec:	1004403a 	cmpge	r2,r2,zero
    1df0:	103fda1e 	bne	r2,zero,1d5c <vid_draw_sloped_line+0xfc>
    1df4:	00003406 	br	1ec8 <vid_draw_sloped_line+0x268>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
    1df8:	e0bffa17 	ldw	r2,-24(fp)
    1dfc:	1085883a 	add	r2,r2,r2
    1e00:	e0bff315 	stw	r2,-52(fp)
    int dPru  = dPr - (vert_delta<<1);
    1e04:	e0bff917 	ldw	r2,-28(fp)
    1e08:	1085883a 	add	r2,r2,r2
    1e0c:	1007883a 	mov	r3,r2
    1e10:	e0bff317 	ldw	r2,-52(fp)
    1e14:	10c5c83a 	sub	r2,r2,r3
    1e18:	e0bff215 	stw	r2,-56(fp)
    int P     = dPr - vert_delta;
    1e1c:	e0fff317 	ldw	r3,-52(fp)
    1e20:	e0bff917 	ldw	r2,-28(fp)
    1e24:	1885c83a 	sub	r2,r3,r2
    1e28:	e0bff115 	stw	r2,-60(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
    1e2c:	00002306 	br	1ebc <vid_draw_sloped_line+0x25c>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
    1e30:	e13ffb0b 	ldhu	r4,-20(fp)
    1e34:	e17ffc0b 	ldhu	r5,-16(fp)
    1e38:	e1800317 	ldw	r6,12(fp)
    1e3c:	e1c00417 	ldw	r7,16(fp)
    1e40:	00010b80 	call	10b8 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
    1e44:	e0bff117 	ldw	r2,-60(fp)
    1e48:	10800050 	cmplti	r2,r2,1
    1e4c:	10000f1e 	bne	r2,zero,1e8c <vid_draw_sloped_line+0x22c>
        horiz_start+=horiz_incr;
    1e50:	e0bff817 	ldw	r2,-32(fp)
    1e54:	1007883a 	mov	r3,r2
    1e58:	e0bffb0b 	ldhu	r2,-20(fp)
    1e5c:	10c5883a 	add	r2,r2,r3
    1e60:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
    1e64:	e0bff717 	ldw	r2,-36(fp)
    1e68:	1007883a 	mov	r3,r2
    1e6c:	e0bffc0b 	ldhu	r2,-16(fp)
    1e70:	10c5883a 	add	r2,r2,r3
    1e74:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
    1e78:	e0fff117 	ldw	r3,-60(fp)
    1e7c:	e0bff217 	ldw	r2,-56(fp)
    1e80:	1885883a 	add	r2,r3,r2
    1e84:	e0bff115 	stw	r2,-60(fp)
    1e88:	00000906 	br	1eb0 <vid_draw_sloped_line+0x250>
      } else {
        vert_start+=vert_incr;
    1e8c:	e0bff717 	ldw	r2,-36(fp)
    1e90:	1007883a 	mov	r3,r2
    1e94:	e0bffc0b 	ldhu	r2,-16(fp)
    1e98:	10c5883a 	add	r2,r2,r3
    1e9c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
    1ea0:	e0fff117 	ldw	r3,-60(fp)
    1ea4:	e0bff317 	ldw	r2,-52(fp)
    1ea8:	1885883a 	add	r2,r3,r2
    1eac:	e0bff115 	stw	r2,-60(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
    1eb0:	e0bff917 	ldw	r2,-28(fp)
    1eb4:	10bfffc4 	addi	r2,r2,-1
    1eb8:	e0bff915 	stw	r2,-28(fp)
    1ebc:	e0bff917 	ldw	r2,-28(fp)
    1ec0:	1004403a 	cmpge	r2,r2,zero
    1ec4:	103fda1e 	bne	r2,zero,1e30 <vid_draw_sloped_line+0x1d0>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
    1ec8:	e037883a 	mov	sp,fp
    1ecc:	dfc00117 	ldw	ra,4(sp)
    1ed0:	df000017 	ldw	fp,0(sp)
    1ed4:	dec00204 	addi	sp,sp,8
    1ed8:	f800283a 	ret

00001edc <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
    1edc:	defff004 	addi	sp,sp,-64
    1ee0:	dfc00f15 	stw	ra,60(sp)
    1ee4:	df000e15 	stw	fp,56(sp)
    1ee8:	df000e04 	addi	fp,sp,56
    1eec:	e13ffa15 	stw	r4,-24(fp)
    1ef0:	e17ffb15 	stw	r5,-20(fp)
    1ef4:	e1bffc15 	stw	r6,-16(fp)
    1ef8:	e1fffd15 	stw	r7,-12(fp)
    1efc:	e0800217 	ldw	r2,8(fp)
    1f00:	e0bffe05 	stb	r2,-8(fp)
  int x = 0;
    1f04:	e03ff915 	stw	zero,-28(fp)
  int y = radius;
    1f08:	e0bffc17 	ldw	r2,-16(fp)
    1f0c:	e0bff815 	stw	r2,-32(fp)
  int p = (5 - radius*4)/4;
    1f10:	e0bffc17 	ldw	r2,-16(fp)
    1f14:	1085883a 	add	r2,r2,r2
    1f18:	1085883a 	add	r2,r2,r2
    1f1c:	1007883a 	mov	r3,r2
    1f20:	00800144 	movi	r2,5
    1f24:	10c5c83a 	sub	r2,r2,r3
    1f28:	e0bfff15 	stw	r2,-4(fp)
    1f2c:	e0ffff17 	ldw	r3,-4(fp)
    1f30:	1804403a 	cmpge	r2,r3,zero
    1f34:	1000031e 	bne	r2,zero,1f44 <vid_draw_circle+0x68>
    1f38:	e0bfff17 	ldw	r2,-4(fp)
    1f3c:	108000c4 	addi	r2,r2,3
    1f40:	e0bfff15 	stw	r2,-4(fp)
    1f44:	e0ffff17 	ldw	r3,-4(fp)
    1f48:	1805d0ba 	srai	r2,r3,2
    1f4c:	e0bff715 	stw	r2,-36(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
    1f50:	e0fffe07 	ldb	r3,-8(fp)
    1f54:	d8000015 	stw	zero,0(sp)
    1f58:	d8000115 	stw	zero,4(sp)
    1f5c:	e0bffd17 	ldw	r2,-12(fp)
    1f60:	d8800215 	stw	r2,8(sp)
    1f64:	d8c00315 	stw	r3,12(sp)
    1f68:	e0800317 	ldw	r2,12(fp)
    1f6c:	d8800415 	stw	r2,16(sp)
    1f70:	e13ffa17 	ldw	r4,-24(fp)
    1f74:	e17ffb17 	ldw	r5,-20(fp)
    1f78:	e1bff917 	ldw	r6,-28(fp)
    1f7c:	e1fff817 	ldw	r7,-32(fp)
    1f80:	00024140 	call	2414 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
    1f84:	00002706 	br	2024 <vid_draw_circle+0x148>
    x++;
    1f88:	e0bff917 	ldw	r2,-28(fp)
    1f8c:	10800044 	addi	r2,r2,1
    1f90:	e0bff915 	stw	r2,-28(fp)
    if (p < 0) {
    1f94:	e0bff717 	ldw	r2,-36(fp)
    1f98:	1004403a 	cmpge	r2,r2,zero
    1f9c:	1000081e 	bne	r2,zero,1fc0 <vid_draw_circle+0xe4>
      p += 2*x+1;
    1fa0:	e0bff917 	ldw	r2,-28(fp)
    1fa4:	1085883a 	add	r2,r2,r2
    1fa8:	1007883a 	mov	r3,r2
    1fac:	e0bff717 	ldw	r2,-36(fp)
    1fb0:	1885883a 	add	r2,r3,r2
    1fb4:	10800044 	addi	r2,r2,1
    1fb8:	e0bff715 	stw	r2,-36(fp)
    1fbc:	00000c06 	br	1ff0 <vid_draw_circle+0x114>
    } else {
      y--;
    1fc0:	e0bff817 	ldw	r2,-32(fp)
    1fc4:	10bfffc4 	addi	r2,r2,-1
    1fc8:	e0bff815 	stw	r2,-32(fp)
      p += 2*(x-y)+1;
    1fcc:	e0fff917 	ldw	r3,-28(fp)
    1fd0:	e0bff817 	ldw	r2,-32(fp)
    1fd4:	1885c83a 	sub	r2,r3,r2
    1fd8:	1085883a 	add	r2,r2,r2
    1fdc:	1007883a 	mov	r3,r2
    1fe0:	e0bff717 	ldw	r2,-36(fp)
    1fe4:	1885883a 	add	r2,r3,r2
    1fe8:	10800044 	addi	r2,r2,1
    1fec:	e0bff715 	stw	r2,-36(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
    1ff0:	e0bffe07 	ldb	r2,-8(fp)
    1ff4:	d8000015 	stw	zero,0(sp)
    1ff8:	d8000115 	stw	zero,4(sp)
    1ffc:	e0fffd17 	ldw	r3,-12(fp)
    2000:	d8c00215 	stw	r3,8(sp)
    2004:	d8800315 	stw	r2,12(sp)
    2008:	e0800317 	ldw	r2,12(fp)
    200c:	d8800415 	stw	r2,16(sp)
    2010:	e13ffa17 	ldw	r4,-24(fp)
    2014:	e17ffb17 	ldw	r5,-20(fp)
    2018:	e1bff917 	ldw	r6,-28(fp)
    201c:	e1fff817 	ldw	r7,-32(fp)
    2020:	00024140 	call	2414 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
    2024:	e0fff917 	ldw	r3,-28(fp)
    2028:	e0bff817 	ldw	r2,-32(fp)
    202c:	18bfd616 	blt	r3,r2,1f88 <vid_draw_circle+0xac>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
    2030:	0005883a 	mov	r2,zero
}
    2034:	e037883a 	mov	sp,fp
    2038:	dfc00117 	ldw	ra,4(sp)
    203c:	df000017 	ldw	fp,0(sp)
    2040:	dec00204 	addi	sp,sp,8
    2044:	f800283a 	ret

00002048 <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
    2048:	deffeb04 	addi	sp,sp,-84
    204c:	dfc01415 	stw	ra,80(sp)
    2050:	df001315 	stw	fp,76(sp)
    2054:	df001304 	addi	fp,sp,76
    2058:	e13ffb15 	stw	r4,-20(fp)
    205c:	e17ffc15 	stw	r5,-16(fp)
    2060:	e1bffd15 	stw	r6,-12(fp)
    2064:	e1fffe15 	stw	r7,-8(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
    2068:	e0fffb17 	ldw	r3,-20(fp)
    206c:	e0bffd17 	ldw	r2,-12(fp)
    2070:	10c0060e 	bge	r2,r3,208c <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
    2074:	e0bffd17 	ldw	r2,-12(fp)
    2078:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
    207c:	e0bffb17 	ldw	r2,-20(fp)
    2080:	e0bffd15 	stw	r2,-12(fp)
    horiz_start = temp;
    2084:	e0bff617 	ldw	r2,-40(fp)
    2088:	e0bffb15 	stw	r2,-20(fp)
  }
  
  if( vert_start > vert_end )
    208c:	e0fffc17 	ldw	r3,-16(fp)
    2090:	e0bffe17 	ldw	r2,-8(fp)
    2094:	10c0060e 	bge	r2,r3,20b0 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
    2098:	e0bffe17 	ldw	r2,-8(fp)
    209c:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
    20a0:	e0bffc17 	ldw	r2,-16(fp)
    20a4:	e0bffe15 	stw	r2,-8(fp)
    vert_start = temp;
    20a8:	e0bff617 	ldw	r2,-40(fp)
    20ac:	e0bffc15 	stw	r2,-16(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
    20b0:	e0fffd17 	ldw	r3,-12(fp)
    20b4:	e0bffb17 	ldw	r2,-20(fp)
    20b8:	1885c83a 	sub	r2,r3,r2
    20bc:	e0bff515 	stw	r2,-44(fp)
  height = vert_end - vert_start;
    20c0:	e0fffe17 	ldw	r3,-8(fp)
    20c4:	e0bffc17 	ldw	r2,-16(fp)
    20c8:	1885c83a 	sub	r2,r3,r2
    20cc:	e0bff415 	stw	r2,-48(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
    20d0:	e0c00217 	ldw	r3,8(fp)
    20d4:	e0bff517 	ldw	r2,-44(fp)
    20d8:	1004d07a 	srli	r2,r2,1
    20dc:	10c0032e 	bgeu	r2,r3,20ec <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
    20e0:	e0bff517 	ldw	r2,-44(fp)
    20e4:	1004d07a 	srli	r2,r2,1
    20e8:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
    20ec:	e0800217 	ldw	r2,8(fp)
    20f0:	e0fff417 	ldw	r3,-48(fp)
    20f4:	1806d07a 	srli	r3,r3,1
    20f8:	1880032e 	bgeu	r3,r2,2108 <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
    20fc:	e0bff417 	ldw	r2,-48(fp)
    2100:	1004d07a 	srli	r2,r2,1
    2104:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
    2108:	e0800217 	ldw	r2,8(fp)
    210c:	1085883a 	add	r2,r2,r2
    2110:	e0bff715 	stw	r2,-36(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
    2114:	e0fff717 	ldw	r3,-36(fp)
    2118:	e0bff517 	ldw	r2,-44(fp)
    211c:	10c5c83a 	sub	r2,r2,r3
    2120:	e0bff315 	stw	r2,-52(fp)
  straight_height = height - diameter;
    2124:	e0fff717 	ldw	r3,-36(fp)
    2128:	e0bff417 	ldw	r2,-48(fp)
    212c:	10c5c83a 	sub	r2,r2,r3
    2130:	e0bff215 	stw	r2,-56(fp)

  x = 0;
    2134:	e03ffa15 	stw	zero,-24(fp)
  y = radius;
    2138:	e0800217 	ldw	r2,8(fp)
    213c:	e0bff915 	stw	r2,-28(fp)
  p = (5 - radius*4)/4;
    2140:	e0800217 	ldw	r2,8(fp)
    2144:	1085883a 	add	r2,r2,r2
    2148:	1085883a 	add	r2,r2,r2
    214c:	1007883a 	mov	r3,r2
    2150:	00800144 	movi	r2,5
    2154:	10c5c83a 	sub	r2,r2,r3
    2158:	e0bfff15 	stw	r2,-4(fp)
    215c:	e0ffff17 	ldw	r3,-4(fp)
    2160:	1804403a 	cmpge	r2,r3,zero
    2164:	1000031e 	bne	r2,zero,2174 <vid_draw_round_corner_box+0x12c>
    2168:	e0bfff17 	ldw	r2,-4(fp)
    216c:	108000c4 	addi	r2,r2,3
    2170:	e0bfff15 	stw	r2,-4(fp)
    2174:	e0ffff17 	ldw	r3,-4(fp)
    2178:	1805d0ba 	srai	r2,r3,2
    217c:	e0bff815 	stw	r2,-32(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
    2180:	e0fffb17 	ldw	r3,-20(fp)
    2184:	e0800217 	ldw	r2,8(fp)
    2188:	188d883a 	add	r6,r3,r2
    218c:	e0fffc17 	ldw	r3,-16(fp)
    2190:	e0800217 	ldw	r2,8(fp)
    2194:	188f883a 	add	r7,r3,r2
    2198:	e23ffa17 	ldw	r8,-24(fp)
    219c:	e27ff917 	ldw	r9,-28(fp)
    21a0:	e0fff317 	ldw	r3,-52(fp)
    21a4:	e13ff217 	ldw	r4,-56(fp)
    21a8:	e0800417 	ldw	r2,16(fp)
    21ac:	11403fcc 	andi	r5,r2,255
    21b0:	2940201c 	xori	r5,r5,128
    21b4:	297fe004 	addi	r5,r5,-128
    21b8:	d8c00015 	stw	r3,0(sp)
    21bc:	d9000115 	stw	r4,4(sp)
    21c0:	e0800317 	ldw	r2,12(fp)
    21c4:	d8800215 	stw	r2,8(sp)
    21c8:	d9400315 	stw	r5,12(sp)
    21cc:	e0800517 	ldw	r2,20(fp)
    21d0:	d8800415 	stw	r2,16(sp)
    21d4:	3009883a 	mov	r4,r6
    21d8:	380b883a 	mov	r5,r7
    21dc:	400d883a 	mov	r6,r8
    21e0:	480f883a 	mov	r7,r9
    21e4:	00024140 	call	2414 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
    21e8:	00003406 	br	22bc <vid_draw_round_corner_box+0x274>
    x++;
    21ec:	e0bffa17 	ldw	r2,-24(fp)
    21f0:	10800044 	addi	r2,r2,1
    21f4:	e0bffa15 	stw	r2,-24(fp)
    if (p < 0) {
    21f8:	e0bff817 	ldw	r2,-32(fp)
    21fc:	1004403a 	cmpge	r2,r2,zero
    2200:	1000081e 	bne	r2,zero,2224 <vid_draw_round_corner_box+0x1dc>
      p += 2*x+1;
    2204:	e0bffa17 	ldw	r2,-24(fp)
    2208:	1085883a 	add	r2,r2,r2
    220c:	1007883a 	mov	r3,r2
    2210:	e0bff817 	ldw	r2,-32(fp)
    2214:	1885883a 	add	r2,r3,r2
    2218:	10800044 	addi	r2,r2,1
    221c:	e0bff815 	stw	r2,-32(fp)
    2220:	00000c06 	br	2254 <vid_draw_round_corner_box+0x20c>
    } else {
      y--;
    2224:	e0bff917 	ldw	r2,-28(fp)
    2228:	10bfffc4 	addi	r2,r2,-1
    222c:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
    2230:	e0fffa17 	ldw	r3,-24(fp)
    2234:	e0bff917 	ldw	r2,-28(fp)
    2238:	1885c83a 	sub	r2,r3,r2
    223c:	1085883a 	add	r2,r2,r2
    2240:	1007883a 	mov	r3,r2
    2244:	e0bff817 	ldw	r2,-32(fp)
    2248:	1885883a 	add	r2,r3,r2
    224c:	10800044 	addi	r2,r2,1
    2250:	e0bff815 	stw	r2,-32(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
    2254:	e0fffb17 	ldw	r3,-20(fp)
    2258:	e0800217 	ldw	r2,8(fp)
    225c:	188d883a 	add	r6,r3,r2
    2260:	e0fffc17 	ldw	r3,-16(fp)
    2264:	e0800217 	ldw	r2,8(fp)
    2268:	188f883a 	add	r7,r3,r2
    226c:	e23ffa17 	ldw	r8,-24(fp)
    2270:	e27ff917 	ldw	r9,-28(fp)
    2274:	e0fff317 	ldw	r3,-52(fp)
    2278:	e13ff217 	ldw	r4,-56(fp)
    227c:	e0800417 	ldw	r2,16(fp)
    2280:	11403fcc 	andi	r5,r2,255
    2284:	2940201c 	xori	r5,r5,128
    2288:	297fe004 	addi	r5,r5,-128
    228c:	d8c00015 	stw	r3,0(sp)
    2290:	d9000115 	stw	r4,4(sp)
    2294:	e0800317 	ldw	r2,12(fp)
    2298:	d8800215 	stw	r2,8(sp)
    229c:	d9400315 	stw	r5,12(sp)
    22a0:	e0800517 	ldw	r2,20(fp)
    22a4:	d8800415 	stw	r2,16(sp)
    22a8:	3009883a 	mov	r4,r6
    22ac:	380b883a 	mov	r5,r7
    22b0:	400d883a 	mov	r6,r8
    22b4:	480f883a 	mov	r7,r9
    22b8:	00024140 	call	2414 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
    22bc:	e0fffa17 	ldw	r3,-24(fp)
    22c0:	e0bff917 	ldw	r2,-28(fp)
    22c4:	18bfc936 	bltu	r3,r2,21ec <vid_draw_round_corner_box+0x1a4>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
    22c8:	e0800417 	ldw	r2,16(fp)
    22cc:	1005003a 	cmpeq	r2,r2,zero
    22d0:	10000e1e 	bne	r2,zero,230c <vid_draw_round_corner_box+0x2c4>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
    22d4:	e0fffc17 	ldw	r3,-16(fp)
    22d8:	e0800217 	ldw	r2,8(fp)
    22dc:	188b883a 	add	r5,r3,r2
    22e0:	e0fffe17 	ldw	r3,-8(fp)
    22e4:	e0800217 	ldw	r2,8(fp)
    22e8:	188fc83a 	sub	r7,r3,r2
    22ec:	e0800317 	ldw	r2,12(fp)
    22f0:	d8800015 	stw	r2,0(sp)
    22f4:	e0800517 	ldw	r2,20(fp)
    22f8:	d8800115 	stw	r2,4(sp)
    22fc:	e13ffb17 	ldw	r4,-20(fp)
    2300:	e1bffd17 	ldw	r6,-12(fp)
    2304:	00012c00 	call	12c0 <vid_paint_block>
    2308:	00003c06 	br	23fc <vid_draw_round_corner_box+0x3b4>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
    230c:	e0fffc17 	ldw	r3,-16(fp)
    2310:	e0800217 	ldw	r2,8(fp)
    2314:	188b883a 	add	r5,r3,r2
    2318:	e0fffe17 	ldw	r3,-8(fp)
    231c:	e0800217 	ldw	r2,8(fp)
    2320:	188fc83a 	sub	r7,r3,r2
    2324:	00800044 	movi	r2,1
    2328:	d8800015 	stw	r2,0(sp)
    232c:	e0800317 	ldw	r2,12(fp)
    2330:	d8800115 	stw	r2,4(sp)
    2334:	e0800517 	ldw	r2,20(fp)
    2338:	d8800215 	stw	r2,8(sp)
    233c:	e13ffb17 	ldw	r4,-20(fp)
    2340:	e1bffb17 	ldw	r6,-20(fp)
    2344:	00006580 	call	658 <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
    2348:	e0fffc17 	ldw	r3,-16(fp)
    234c:	e0800217 	ldw	r2,8(fp)
    2350:	188b883a 	add	r5,r3,r2
    2354:	e0fffe17 	ldw	r3,-8(fp)
    2358:	e0800217 	ldw	r2,8(fp)
    235c:	188fc83a 	sub	r7,r3,r2
    2360:	00800044 	movi	r2,1
    2364:	d8800015 	stw	r2,0(sp)
    2368:	e0800317 	ldw	r2,12(fp)
    236c:	d8800115 	stw	r2,4(sp)
    2370:	e0800517 	ldw	r2,20(fp)
    2374:	d8800215 	stw	r2,8(sp)
    2378:	e13ffd17 	ldw	r4,-12(fp)
    237c:	e1bffd17 	ldw	r6,-12(fp)
    2380:	00006580 	call	658 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
    2384:	e0fffb17 	ldw	r3,-20(fp)
    2388:	e0800217 	ldw	r2,8(fp)
    238c:	1889883a 	add	r4,r3,r2
    2390:	e0fffd17 	ldw	r3,-12(fp)
    2394:	e0800217 	ldw	r2,8(fp)
    2398:	188dc83a 	sub	r6,r3,r2
    239c:	00800044 	movi	r2,1
    23a0:	d8800015 	stw	r2,0(sp)
    23a4:	e0800317 	ldw	r2,12(fp)
    23a8:	d8800115 	stw	r2,4(sp)
    23ac:	e0800517 	ldw	r2,20(fp)
    23b0:	d8800215 	stw	r2,8(sp)
    23b4:	e17ffc17 	ldw	r5,-16(fp)
    23b8:	e1fffc17 	ldw	r7,-16(fp)
    23bc:	00006580 	call	658 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
    23c0:	e0fffb17 	ldw	r3,-20(fp)
    23c4:	e0800217 	ldw	r2,8(fp)
    23c8:	1889883a 	add	r4,r3,r2
    23cc:	e0fffd17 	ldw	r3,-12(fp)
    23d0:	e0800217 	ldw	r2,8(fp)
    23d4:	188dc83a 	sub	r6,r3,r2
    23d8:	00800044 	movi	r2,1
    23dc:	d8800015 	stw	r2,0(sp)
    23e0:	e0800317 	ldw	r2,12(fp)
    23e4:	d8800115 	stw	r2,4(sp)
    23e8:	e0800517 	ldw	r2,20(fp)
    23ec:	d8800215 	stw	r2,8(sp)
    23f0:	e17ffe17 	ldw	r5,-8(fp)
    23f4:	e1fffe17 	ldw	r7,-8(fp)
    23f8:	00006580 	call	658 <vid_draw_line>
  }

  return (0);
    23fc:	0005883a 	mov	r2,zero
}
    2400:	e037883a 	mov	sp,fp
    2404:	dfc00117 	ldw	ra,4(sp)
    2408:	df000017 	ldw	fp,0(sp)
    240c:	dec00204 	addi	sp,sp,8
    2410:	f800283a 	ret

00002414 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
    2414:	defff604 	addi	sp,sp,-40
    2418:	dfc00915 	stw	ra,36(sp)
    241c:	df000815 	stw	fp,32(sp)
    2420:	df000804 	addi	fp,sp,32
    2424:	e13ffb15 	stw	r4,-20(fp)
    2428:	e17ffc15 	stw	r5,-16(fp)
    242c:	e1bffd15 	stw	r6,-12(fp)
    2430:	e1fffe15 	stw	r7,-8(fp)
    2434:	e0800517 	ldw	r2,20(fp)
    2438:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
    243c:	e0bffd17 	ldw	r2,-12(fp)
    2440:	1004c03a 	cmpne	r2,r2,zero
    2444:	1000731e 	bne	r2,zero,2614 <vid_round_corner_points+0x200>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
    2448:	e0fffc17 	ldw	r3,-16(fp)
    244c:	e0bffe17 	ldw	r2,-8(fp)
    2450:	1887883a 	add	r3,r3,r2
    2454:	e0800317 	ldw	r2,12(fp)
    2458:	188b883a 	add	r5,r3,r2
    245c:	e1800417 	ldw	r6,16(fp)
    2460:	e13ffb17 	ldw	r4,-20(fp)
    2464:	e1c00617 	ldw	r7,24(fp)
    2468:	00010b80 	call	10b8 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
    246c:	e0fffb17 	ldw	r3,-20(fp)
    2470:	e0800217 	ldw	r2,8(fp)
    2474:	1889883a 	add	r4,r3,r2
    2478:	e0fffc17 	ldw	r3,-16(fp)
    247c:	e0bffe17 	ldw	r2,-8(fp)
    2480:	1887883a 	add	r3,r3,r2
    2484:	e0800317 	ldw	r2,12(fp)
    2488:	188b883a 	add	r5,r3,r2
    248c:	e1800417 	ldw	r6,16(fp)
    2490:	e1c00617 	ldw	r7,24(fp)
    2494:	00010b80 	call	10b8 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
    2498:	e0fffc17 	ldw	r3,-16(fp)
    249c:	e0bffe17 	ldw	r2,-8(fp)
    24a0:	188bc83a 	sub	r5,r3,r2
    24a4:	e1800417 	ldw	r6,16(fp)
    24a8:	e13ffb17 	ldw	r4,-20(fp)
    24ac:	e1c00617 	ldw	r7,24(fp)
    24b0:	00010b80 	call	10b8 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
    24b4:	e0fffb17 	ldw	r3,-20(fp)
    24b8:	e0800217 	ldw	r2,8(fp)
    24bc:	1889883a 	add	r4,r3,r2
    24c0:	e0fffc17 	ldw	r3,-16(fp)
    24c4:	e0bffe17 	ldw	r2,-8(fp)
    24c8:	188bc83a 	sub	r5,r3,r2
    24cc:	e1800417 	ldw	r6,16(fp)
    24d0:	e1c00617 	ldw	r7,24(fp)
    24d4:	00010b80 	call	10b8 <vid_set_pixel>

        if(fill) {
    24d8:	e0bfff07 	ldb	r2,-4(fp)
    24dc:	1005003a 	cmpeq	r2,r2,zero
    24e0:	1000271e 	bne	r2,zero,2580 <vid_round_corner_points+0x16c>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
    24e4:	e0fffb17 	ldw	r3,-20(fp)
    24e8:	e0bffe17 	ldw	r2,-8(fp)
    24ec:	1889c83a 	sub	r4,r3,r2
    24f0:	e0fffb17 	ldw	r3,-20(fp)
    24f4:	e0bffe17 	ldw	r2,-8(fp)
    24f8:	1887883a 	add	r3,r3,r2
    24fc:	e0800217 	ldw	r2,8(fp)
    2500:	188d883a 	add	r6,r3,r2
    2504:	00800044 	movi	r2,1
    2508:	d8800015 	stw	r2,0(sp)
    250c:	e0800417 	ldw	r2,16(fp)
    2510:	d8800115 	stw	r2,4(sp)
    2514:	e0800617 	ldw	r2,24(fp)
    2518:	d8800215 	stw	r2,8(sp)
    251c:	e17ffc17 	ldw	r5,-16(fp)
    2520:	e1fffc17 	ldw	r7,-16(fp)
    2524:	00006580 	call	658 <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
    2528:	e0fffb17 	ldw	r3,-20(fp)
    252c:	e0bffe17 	ldw	r2,-8(fp)
    2530:	1889c83a 	sub	r4,r3,r2
    2534:	e0fffc17 	ldw	r3,-16(fp)
    2538:	e0800317 	ldw	r2,12(fp)
    253c:	188b883a 	add	r5,r3,r2
    2540:	e0fffb17 	ldw	r3,-20(fp)
    2544:	e0bffe17 	ldw	r2,-8(fp)
    2548:	1887883a 	add	r3,r3,r2
    254c:	e0800217 	ldw	r2,8(fp)
    2550:	188d883a 	add	r6,r3,r2
    2554:	e0fffc17 	ldw	r3,-16(fp)
    2558:	e0800317 	ldw	r2,12(fp)
    255c:	188f883a 	add	r7,r3,r2
    2560:	00800044 	movi	r2,1
    2564:	d8800015 	stw	r2,0(sp)
    2568:	e0800417 	ldw	r2,16(fp)
    256c:	d8800115 	stw	r2,4(sp)
    2570:	e0800617 	ldw	r2,24(fp)
    2574:	d8800215 	stw	r2,8(sp)
    2578:	00006580 	call	658 <vid_draw_line>
    257c:	00014206 	br	2a88 <vid_round_corner_points+0x674>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
    2580:	e0fffb17 	ldw	r3,-20(fp)
    2584:	e0bffe17 	ldw	r2,-8(fp)
    2588:	1887883a 	add	r3,r3,r2
    258c:	e0800217 	ldw	r2,8(fp)
    2590:	1889883a 	add	r4,r3,r2
    2594:	e1800417 	ldw	r6,16(fp)
    2598:	e17ffc17 	ldw	r5,-16(fp)
    259c:	e1c00617 	ldw	r7,24(fp)
    25a0:	00010b80 	call	10b8 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
    25a4:	e0fffb17 	ldw	r3,-20(fp)
    25a8:	e0bffe17 	ldw	r2,-8(fp)
    25ac:	1887883a 	add	r3,r3,r2
    25b0:	e0800217 	ldw	r2,8(fp)
    25b4:	1889883a 	add	r4,r3,r2
    25b8:	e0fffc17 	ldw	r3,-16(fp)
    25bc:	e0800317 	ldw	r2,12(fp)
    25c0:	188b883a 	add	r5,r3,r2
    25c4:	e1800417 	ldw	r6,16(fp)
    25c8:	e1c00617 	ldw	r7,24(fp)
    25cc:	00010b80 	call	10b8 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
    25d0:	e0fffb17 	ldw	r3,-20(fp)
    25d4:	e0bffe17 	ldw	r2,-8(fp)
    25d8:	1889c83a 	sub	r4,r3,r2
    25dc:	e1800417 	ldw	r6,16(fp)
    25e0:	e17ffc17 	ldw	r5,-16(fp)
    25e4:	e1c00617 	ldw	r7,24(fp)
    25e8:	00010b80 	call	10b8 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
    25ec:	e0fffb17 	ldw	r3,-20(fp)
    25f0:	e0bffe17 	ldw	r2,-8(fp)
    25f4:	1889c83a 	sub	r4,r3,r2
    25f8:	e0fffc17 	ldw	r3,-16(fp)
    25fc:	e0800317 	ldw	r2,12(fp)
    2600:	188b883a 	add	r5,r3,r2
    2604:	e1800417 	ldw	r6,16(fp)
    2608:	e1c00617 	ldw	r7,24(fp)
    260c:	00010b80 	call	10b8 <vid_set_pixel>
    2610:	00011d06 	br	2a88 <vid_round_corner_points+0x674>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
    2614:	e0fffd17 	ldw	r3,-12(fp)
    2618:	e0bffe17 	ldw	r2,-8(fp)
    261c:	18805f1e 	bne	r3,r2,279c <vid_round_corner_points+0x388>
      if(fill) {
    2620:	e0bfff07 	ldb	r2,-4(fp)
    2624:	1005003a 	cmpeq	r2,r2,zero
    2628:	10002f1e 	bne	r2,zero,26e8 <vid_round_corner_points+0x2d4>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
    262c:	e0fffb17 	ldw	r3,-20(fp)
    2630:	e0bffd17 	ldw	r2,-12(fp)
    2634:	1889c83a 	sub	r4,r3,r2
    2638:	e0fffc17 	ldw	r3,-16(fp)
    263c:	e0bffe17 	ldw	r2,-8(fp)
    2640:	1887883a 	add	r3,r3,r2
    2644:	e0800317 	ldw	r2,12(fp)
    2648:	188b883a 	add	r5,r3,r2
    264c:	e0fffb17 	ldw	r3,-20(fp)
    2650:	e0bffd17 	ldw	r2,-12(fp)
    2654:	1887883a 	add	r3,r3,r2
    2658:	e0800217 	ldw	r2,8(fp)
    265c:	188d883a 	add	r6,r3,r2
    2660:	e0fffc17 	ldw	r3,-16(fp)
    2664:	e0bffe17 	ldw	r2,-8(fp)
    2668:	1887883a 	add	r3,r3,r2
    266c:	e0800317 	ldw	r2,12(fp)
    2670:	188f883a 	add	r7,r3,r2
    2674:	00800044 	movi	r2,1
    2678:	d8800015 	stw	r2,0(sp)
    267c:	e0800417 	ldw	r2,16(fp)
    2680:	d8800115 	stw	r2,4(sp)
    2684:	e0800617 	ldw	r2,24(fp)
    2688:	d8800215 	stw	r2,8(sp)
    268c:	00006580 	call	658 <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
    2690:	e0fffb17 	ldw	r3,-20(fp)
    2694:	e0bffd17 	ldw	r2,-12(fp)
    2698:	1889c83a 	sub	r4,r3,r2
    269c:	e0fffc17 	ldw	r3,-16(fp)
    26a0:	e0bffe17 	ldw	r2,-8(fp)
    26a4:	188bc83a 	sub	r5,r3,r2
    26a8:	e0fffb17 	ldw	r3,-20(fp)
    26ac:	e0bffd17 	ldw	r2,-12(fp)
    26b0:	1887883a 	add	r3,r3,r2
    26b4:	e0800217 	ldw	r2,8(fp)
    26b8:	188d883a 	add	r6,r3,r2
    26bc:	e0fffc17 	ldw	r3,-16(fp)
    26c0:	e0bffe17 	ldw	r2,-8(fp)
    26c4:	188fc83a 	sub	r7,r3,r2
    26c8:	00800044 	movi	r2,1
    26cc:	d8800015 	stw	r2,0(sp)
    26d0:	e0800417 	ldw	r2,16(fp)
    26d4:	d8800115 	stw	r2,4(sp)
    26d8:	e0800617 	ldw	r2,24(fp)
    26dc:	d8800215 	stw	r2,8(sp)
    26e0:	00006580 	call	658 <vid_draw_line>
    26e4:	0000e806 	br	2a88 <vid_round_corner_points+0x674>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
    26e8:	e0fffb17 	ldw	r3,-20(fp)
    26ec:	e0bffd17 	ldw	r2,-12(fp)
    26f0:	1887883a 	add	r3,r3,r2
    26f4:	e0800217 	ldw	r2,8(fp)
    26f8:	1889883a 	add	r4,r3,r2
    26fc:	e0fffc17 	ldw	r3,-16(fp)
    2700:	e0bffe17 	ldw	r2,-8(fp)
    2704:	1887883a 	add	r3,r3,r2
    2708:	e0800317 	ldw	r2,12(fp)
    270c:	188b883a 	add	r5,r3,r2
    2710:	e1800417 	ldw	r6,16(fp)
    2714:	e1c00617 	ldw	r7,24(fp)
    2718:	00010b80 	call	10b8 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
    271c:	e0fffb17 	ldw	r3,-20(fp)
    2720:	e0bffd17 	ldw	r2,-12(fp)
    2724:	1889c83a 	sub	r4,r3,r2
    2728:	e0fffc17 	ldw	r3,-16(fp)
    272c:	e0bffe17 	ldw	r2,-8(fp)
    2730:	1887883a 	add	r3,r3,r2
    2734:	e0800317 	ldw	r2,12(fp)
    2738:	188b883a 	add	r5,r3,r2
    273c:	e1800417 	ldw	r6,16(fp)
    2740:	e1c00617 	ldw	r7,24(fp)
    2744:	00010b80 	call	10b8 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
    2748:	e0fffb17 	ldw	r3,-20(fp)
    274c:	e0bffd17 	ldw	r2,-12(fp)
    2750:	1887883a 	add	r3,r3,r2
    2754:	e0800217 	ldw	r2,8(fp)
    2758:	1889883a 	add	r4,r3,r2
    275c:	e0fffc17 	ldw	r3,-16(fp)
    2760:	e0bffe17 	ldw	r2,-8(fp)
    2764:	188bc83a 	sub	r5,r3,r2
    2768:	e1800417 	ldw	r6,16(fp)
    276c:	e1c00617 	ldw	r7,24(fp)
    2770:	00010b80 	call	10b8 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
    2774:	e0fffb17 	ldw	r3,-20(fp)
    2778:	e0bffd17 	ldw	r2,-12(fp)
    277c:	1889c83a 	sub	r4,r3,r2
    2780:	e0fffc17 	ldw	r3,-16(fp)
    2784:	e0bffe17 	ldw	r2,-8(fp)
    2788:	188bc83a 	sub	r5,r3,r2
    278c:	e1800417 	ldw	r6,16(fp)
    2790:	e1c00617 	ldw	r7,24(fp)
    2794:	00010b80 	call	10b8 <vid_set_pixel>
    2798:	0000bb06 	br	2a88 <vid_round_corner_points+0x674>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
    279c:	e0fffd17 	ldw	r3,-12(fp)
    27a0:	e0bffe17 	ldw	r2,-8(fp)
    27a4:	1880b80e 	bge	r3,r2,2a88 <vid_round_corner_points+0x674>
        if(fill) {
    27a8:	e0bfff07 	ldb	r2,-4(fp)
    27ac:	1005003a 	cmpeq	r2,r2,zero
    27b0:	10005d1e 	bne	r2,zero,2928 <vid_round_corner_points+0x514>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
    27b4:	e0fffb17 	ldw	r3,-20(fp)
    27b8:	e0bffd17 	ldw	r2,-12(fp)
    27bc:	1889c83a 	sub	r4,r3,r2
    27c0:	e0fffc17 	ldw	r3,-16(fp)
    27c4:	e0bffe17 	ldw	r2,-8(fp)
    27c8:	1887883a 	add	r3,r3,r2
    27cc:	e0800317 	ldw	r2,12(fp)
    27d0:	188b883a 	add	r5,r3,r2
    27d4:	e0fffb17 	ldw	r3,-20(fp)
    27d8:	e0bffd17 	ldw	r2,-12(fp)
    27dc:	1887883a 	add	r3,r3,r2
    27e0:	e0800217 	ldw	r2,8(fp)
    27e4:	188d883a 	add	r6,r3,r2
    27e8:	e0fffc17 	ldw	r3,-16(fp)
    27ec:	e0bffe17 	ldw	r2,-8(fp)
    27f0:	1887883a 	add	r3,r3,r2
    27f4:	e0800317 	ldw	r2,12(fp)
    27f8:	188f883a 	add	r7,r3,r2
    27fc:	00800044 	movi	r2,1
    2800:	d8800015 	stw	r2,0(sp)
    2804:	e0800417 	ldw	r2,16(fp)
    2808:	d8800115 	stw	r2,4(sp)
    280c:	e0800617 	ldw	r2,24(fp)
    2810:	d8800215 	stw	r2,8(sp)
    2814:	00006580 	call	658 <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
    2818:	e0fffb17 	ldw	r3,-20(fp)
    281c:	e0bffe17 	ldw	r2,-8(fp)
    2820:	1889c83a 	sub	r4,r3,r2
    2824:	e0fffc17 	ldw	r3,-16(fp)
    2828:	e0bffd17 	ldw	r2,-12(fp)
    282c:	1887883a 	add	r3,r3,r2
    2830:	e0800317 	ldw	r2,12(fp)
    2834:	188b883a 	add	r5,r3,r2
    2838:	e0fffb17 	ldw	r3,-20(fp)
    283c:	e0bffe17 	ldw	r2,-8(fp)
    2840:	1887883a 	add	r3,r3,r2
    2844:	e0800217 	ldw	r2,8(fp)
    2848:	188d883a 	add	r6,r3,r2
    284c:	e0fffc17 	ldw	r3,-16(fp)
    2850:	e0bffd17 	ldw	r2,-12(fp)
    2854:	1887883a 	add	r3,r3,r2
    2858:	e0800317 	ldw	r2,12(fp)
    285c:	188f883a 	add	r7,r3,r2
    2860:	00800044 	movi	r2,1
    2864:	d8800015 	stw	r2,0(sp)
    2868:	e0800417 	ldw	r2,16(fp)
    286c:	d8800115 	stw	r2,4(sp)
    2870:	e0800617 	ldw	r2,24(fp)
    2874:	d8800215 	stw	r2,8(sp)
    2878:	00006580 	call	658 <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
    287c:	e0fffb17 	ldw	r3,-20(fp)
    2880:	e0bffe17 	ldw	r2,-8(fp)
    2884:	1889c83a 	sub	r4,r3,r2
    2888:	e0fffc17 	ldw	r3,-16(fp)
    288c:	e0bffd17 	ldw	r2,-12(fp)
    2890:	188bc83a 	sub	r5,r3,r2
    2894:	e0fffb17 	ldw	r3,-20(fp)
    2898:	e0bffe17 	ldw	r2,-8(fp)
    289c:	1887883a 	add	r3,r3,r2
    28a0:	e0800217 	ldw	r2,8(fp)
    28a4:	188d883a 	add	r6,r3,r2
    28a8:	e0fffc17 	ldw	r3,-16(fp)
    28ac:	e0bffd17 	ldw	r2,-12(fp)
    28b0:	188fc83a 	sub	r7,r3,r2
    28b4:	00800044 	movi	r2,1
    28b8:	d8800015 	stw	r2,0(sp)
    28bc:	e0800417 	ldw	r2,16(fp)
    28c0:	d8800115 	stw	r2,4(sp)
    28c4:	e0800617 	ldw	r2,24(fp)
    28c8:	d8800215 	stw	r2,8(sp)
    28cc:	00006580 	call	658 <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
    28d0:	e0fffb17 	ldw	r3,-20(fp)
    28d4:	e0bffd17 	ldw	r2,-12(fp)
    28d8:	1889c83a 	sub	r4,r3,r2
    28dc:	e0fffc17 	ldw	r3,-16(fp)
    28e0:	e0bffe17 	ldw	r2,-8(fp)
    28e4:	188bc83a 	sub	r5,r3,r2
    28e8:	e0fffb17 	ldw	r3,-20(fp)
    28ec:	e0bffd17 	ldw	r2,-12(fp)
    28f0:	1887883a 	add	r3,r3,r2
    28f4:	e0800217 	ldw	r2,8(fp)
    28f8:	188d883a 	add	r6,r3,r2
    28fc:	e0fffc17 	ldw	r3,-16(fp)
    2900:	e0bffe17 	ldw	r2,-8(fp)
    2904:	188fc83a 	sub	r7,r3,r2
    2908:	00800044 	movi	r2,1
    290c:	d8800015 	stw	r2,0(sp)
    2910:	e0800417 	ldw	r2,16(fp)
    2914:	d8800115 	stw	r2,4(sp)
    2918:	e0800617 	ldw	r2,24(fp)
    291c:	d8800215 	stw	r2,8(sp)
    2920:	00006580 	call	658 <vid_draw_line>
    2924:	00005806 	br	2a88 <vid_round_corner_points+0x674>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
    2928:	e0fffb17 	ldw	r3,-20(fp)
    292c:	e0bffd17 	ldw	r2,-12(fp)
    2930:	1887883a 	add	r3,r3,r2
    2934:	e0800217 	ldw	r2,8(fp)
    2938:	1889883a 	add	r4,r3,r2
    293c:	e0fffc17 	ldw	r3,-16(fp)
    2940:	e0bffe17 	ldw	r2,-8(fp)
    2944:	1887883a 	add	r3,r3,r2
    2948:	e0800317 	ldw	r2,12(fp)
    294c:	188b883a 	add	r5,r3,r2
    2950:	e1800417 	ldw	r6,16(fp)
    2954:	e1c00617 	ldw	r7,24(fp)
    2958:	00010b80 	call	10b8 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
    295c:	e0fffb17 	ldw	r3,-20(fp)
    2960:	e0bffd17 	ldw	r2,-12(fp)
    2964:	1889c83a 	sub	r4,r3,r2
    2968:	e0fffc17 	ldw	r3,-16(fp)
    296c:	e0bffe17 	ldw	r2,-8(fp)
    2970:	1887883a 	add	r3,r3,r2
    2974:	e0800317 	ldw	r2,12(fp)
    2978:	188b883a 	add	r5,r3,r2
    297c:	e1800417 	ldw	r6,16(fp)
    2980:	e1c00617 	ldw	r7,24(fp)
    2984:	00010b80 	call	10b8 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
    2988:	e0fffb17 	ldw	r3,-20(fp)
    298c:	e0bffd17 	ldw	r2,-12(fp)
    2990:	1887883a 	add	r3,r3,r2
    2994:	e0800217 	ldw	r2,8(fp)
    2998:	1889883a 	add	r4,r3,r2
    299c:	e0fffc17 	ldw	r3,-16(fp)
    29a0:	e0bffe17 	ldw	r2,-8(fp)
    29a4:	188bc83a 	sub	r5,r3,r2
    29a8:	e1800417 	ldw	r6,16(fp)
    29ac:	e1c00617 	ldw	r7,24(fp)
    29b0:	00010b80 	call	10b8 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
    29b4:	e0fffb17 	ldw	r3,-20(fp)
    29b8:	e0bffd17 	ldw	r2,-12(fp)
    29bc:	1889c83a 	sub	r4,r3,r2
    29c0:	e0fffc17 	ldw	r3,-16(fp)
    29c4:	e0bffe17 	ldw	r2,-8(fp)
    29c8:	188bc83a 	sub	r5,r3,r2
    29cc:	e1800417 	ldw	r6,16(fp)
    29d0:	e1c00617 	ldw	r7,24(fp)
    29d4:	00010b80 	call	10b8 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
    29d8:	e0fffb17 	ldw	r3,-20(fp)
    29dc:	e0bffe17 	ldw	r2,-8(fp)
    29e0:	1887883a 	add	r3,r3,r2
    29e4:	e0800217 	ldw	r2,8(fp)
    29e8:	1889883a 	add	r4,r3,r2
    29ec:	e0fffc17 	ldw	r3,-16(fp)
    29f0:	e0bffd17 	ldw	r2,-12(fp)
    29f4:	1887883a 	add	r3,r3,r2
    29f8:	e0800317 	ldw	r2,12(fp)
    29fc:	188b883a 	add	r5,r3,r2
    2a00:	e1800417 	ldw	r6,16(fp)
    2a04:	e1c00617 	ldw	r7,24(fp)
    2a08:	00010b80 	call	10b8 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
    2a0c:	e0fffb17 	ldw	r3,-20(fp)
    2a10:	e0bffe17 	ldw	r2,-8(fp)
    2a14:	1889c83a 	sub	r4,r3,r2
    2a18:	e0fffc17 	ldw	r3,-16(fp)
    2a1c:	e0bffd17 	ldw	r2,-12(fp)
    2a20:	1887883a 	add	r3,r3,r2
    2a24:	e0800317 	ldw	r2,12(fp)
    2a28:	188b883a 	add	r5,r3,r2
    2a2c:	e1800417 	ldw	r6,16(fp)
    2a30:	e1c00617 	ldw	r7,24(fp)
    2a34:	00010b80 	call	10b8 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
    2a38:	e0fffb17 	ldw	r3,-20(fp)
    2a3c:	e0bffe17 	ldw	r2,-8(fp)
    2a40:	1887883a 	add	r3,r3,r2
    2a44:	e0800217 	ldw	r2,8(fp)
    2a48:	1889883a 	add	r4,r3,r2
    2a4c:	e0fffc17 	ldw	r3,-16(fp)
    2a50:	e0bffd17 	ldw	r2,-12(fp)
    2a54:	188bc83a 	sub	r5,r3,r2
    2a58:	e1800417 	ldw	r6,16(fp)
    2a5c:	e1c00617 	ldw	r7,24(fp)
    2a60:	00010b80 	call	10b8 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
    2a64:	e0fffb17 	ldw	r3,-20(fp)
    2a68:	e0bffe17 	ldw	r2,-8(fp)
    2a6c:	1889c83a 	sub	r4,r3,r2
    2a70:	e0fffc17 	ldw	r3,-16(fp)
    2a74:	e0bffd17 	ldw	r2,-12(fp)
    2a78:	188bc83a 	sub	r5,r3,r2
    2a7c:	e1800417 	ldw	r6,16(fp)
    2a80:	e1c00617 	ldw	r7,24(fp)
    2a84:	00010b80 	call	10b8 <vid_set_pixel>
        }
    }
}
    2a88:	e037883a 	mov	sp,fp
    2a8c:	dfc00117 	ldw	ra,4(sp)
    2a90:	df000017 	ldw	fp,0(sp)
    2a94:	dec00204 	addi	sp,sp,8
    2a98:	f800283a 	ret

00002a9c <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
    2a9c:	defffc04 	addi	sp,sp,-16
    2aa0:	df000315 	stw	fp,12(sp)
    2aa4:	df000304 	addi	fp,sp,12
    2aa8:	e13ffd15 	stw	r4,-12(fp)
    2aac:	e17ffe15 	stw	r5,-8(fp)
    2ab0:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
    2ab4:	e0fffd17 	ldw	r3,-12(fp)
    2ab8:	e0bffe17 	ldw	r2,-8(fp)
    2abc:	1880020e 	bge	r3,r2,2ac8 <max3+0x2c>
    a = b;
    2ac0:	e0bffe17 	ldw	r2,-8(fp)
    2ac4:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
    2ac8:	e0fffd17 	ldw	r3,-12(fp)
    2acc:	e0bfff17 	ldw	r2,-4(fp)
    2ad0:	1880020e 	bge	r3,r2,2adc <max3+0x40>
    a = c;
    2ad4:	e0bfff17 	ldw	r2,-4(fp)
    2ad8:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
    2adc:	e0bffd17 	ldw	r2,-12(fp)
}
    2ae0:	e037883a 	mov	sp,fp
    2ae4:	df000017 	ldw	fp,0(sp)
    2ae8:	dec00104 	addi	sp,sp,4
    2aec:	f800283a 	ret

00002af0 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
    2af0:	defffc04 	addi	sp,sp,-16
    2af4:	df000315 	stw	fp,12(sp)
    2af8:	df000304 	addi	fp,sp,12
    2afc:	e13ffd15 	stw	r4,-12(fp)
    2b00:	e17ffe15 	stw	r5,-8(fp)
    2b04:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
    2b08:	e0fffd17 	ldw	r3,-12(fp)
    2b0c:	e0bffe17 	ldw	r2,-8(fp)
    2b10:	10c0020e 	bge	r2,r3,2b1c <min3+0x2c>
    a = b;
    2b14:	e0bffe17 	ldw	r2,-8(fp)
    2b18:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
    2b1c:	e0fffd17 	ldw	r3,-12(fp)
    2b20:	e0bfff17 	ldw	r2,-4(fp)
    2b24:	10c0020e 	bge	r2,r3,2b30 <min3+0x40>
    a = c;
    2b28:	e0bfff17 	ldw	r2,-4(fp)
    2b2c:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
    2b30:	e0bffd17 	ldw	r2,-12(fp)
}
    2b34:	e037883a 	mov	sp,fp
    2b38:	df000017 	ldw	fp,0(sp)
    2b3c:	dec00104 	addi	sp,sp,4
    2b40:	f800283a 	ret

00002b44 <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
    2b44:	defff904 	addi	sp,sp,-28
    2b48:	dfc00615 	stw	ra,24(sp)
    2b4c:	df000515 	stw	fp,20(sp)
    2b50:	df000504 	addi	fp,sp,20
    2b54:	e13ffd15 	stw	r4,-12(fp)
    2b58:	e17ffe15 	stw	r5,-8(fp)
    2b5c:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
    2b60:	e13ffd17 	ldw	r4,-12(fp)
    2b64:	e17ffe17 	ldw	r5,-8(fp)
    2b68:	e1bfff17 	ldw	r6,-4(fp)
    2b6c:	0002a9c0 	call	2a9c <max3>
    2b70:	e0bffc15 	stw	r2,-16(fp)
  min = min3( a, b, c );
    2b74:	e13ffd17 	ldw	r4,-12(fp)
    2b78:	e17ffe17 	ldw	r5,-8(fp)
    2b7c:	e1bfff17 	ldw	r6,-4(fp)
    2b80:	0002af00 	call	2af0 <min3>
    2b84:	e0bffb15 	stw	r2,-20(fp)
  return (max - min);
    2b88:	e0fffc17 	ldw	r3,-16(fp)
    2b8c:	e0bffb17 	ldw	r2,-20(fp)
    2b90:	1885c83a 	sub	r2,r3,r2
}
    2b94:	e037883a 	mov	sp,fp
    2b98:	dfc00117 	ldw	ra,4(sp)
    2b9c:	df000017 	ldw	fp,0(sp)
    2ba0:	dec00204 	addi	sp,sp,8
    2ba4:	f800283a 	ret

00002ba8 <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
    2ba8:	defffc04 	addi	sp,sp,-16
    2bac:	df000315 	stw	fp,12(sp)
    2bb0:	df000304 	addi	fp,sp,12
    2bb4:	e13ffd15 	stw	r4,-12(fp)
    2bb8:	e17ffe15 	stw	r5,-8(fp)
    2bbc:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
    2bc0:	e0bffe17 	ldw	r2,-8(fp)
    2bc4:	100490fa 	slli	r2,r2,3
    2bc8:	1007883a 	mov	r3,r2
    2bcc:	e0bfff17 	ldw	r2,-4(fp)
    2bd0:	1885883a 	add	r2,r3,r2
    2bd4:	10800017 	ldw	r2,0(r2)
    2bd8:	10bfffd8 	cmpnei	r2,r2,-1
    2bdc:	1000101e 	bne	r2,zero,2c20 <vid_put_pixel_in_span_map+0x78>
  {
    span_array[y*2] = x;
    2be0:	e0bffe17 	ldw	r2,-8(fp)
    2be4:	100490fa 	slli	r2,r2,3
    2be8:	1007883a 	mov	r3,r2
    2bec:	e0bfff17 	ldw	r2,-4(fp)
    2bf0:	1887883a 	add	r3,r3,r2
    2bf4:	e0bffd17 	ldw	r2,-12(fp)
    2bf8:	18800015 	stw	r2,0(r3)
    span_array[(y*2)+1] = x;
    2bfc:	e0bffe17 	ldw	r2,-8(fp)
    2c00:	100490fa 	slli	r2,r2,3
    2c04:	1007883a 	mov	r3,r2
    2c08:	e0bfff17 	ldw	r2,-4(fp)
    2c0c:	1885883a 	add	r2,r3,r2
    2c10:	10c00104 	addi	r3,r2,4
    2c14:	e0bffd17 	ldw	r2,-12(fp)
    2c18:	18800015 	stw	r2,0(r3)
    2c1c:	00002106 	br	2ca4 <vid_put_pixel_in_span_map+0xfc>
  }
  else if( span_array[y*2] > x )
    2c20:	e0bffe17 	ldw	r2,-8(fp)
    2c24:	100490fa 	slli	r2,r2,3
    2c28:	1007883a 	mov	r3,r2
    2c2c:	e0bfff17 	ldw	r2,-4(fp)
    2c30:	1885883a 	add	r2,r3,r2
    2c34:	10c00017 	ldw	r3,0(r2)
    2c38:	e0bffd17 	ldw	r2,-12(fp)
    2c3c:	10c0080e 	bge	r2,r3,2c60 <vid_put_pixel_in_span_map+0xb8>
    span_array[y*2] = x;
    2c40:	e0bffe17 	ldw	r2,-8(fp)
    2c44:	100490fa 	slli	r2,r2,3
    2c48:	1007883a 	mov	r3,r2
    2c4c:	e0bfff17 	ldw	r2,-4(fp)
    2c50:	1887883a 	add	r3,r3,r2
    2c54:	e0bffd17 	ldw	r2,-12(fp)
    2c58:	18800015 	stw	r2,0(r3)
    2c5c:	00001106 	br	2ca4 <vid_put_pixel_in_span_map+0xfc>
  else if( span_array[(y*2)+1] < x )
    2c60:	e0bffe17 	ldw	r2,-8(fp)
    2c64:	100490fa 	slli	r2,r2,3
    2c68:	1007883a 	mov	r3,r2
    2c6c:	e0bfff17 	ldw	r2,-4(fp)
    2c70:	1885883a 	add	r2,r3,r2
    2c74:	10800104 	addi	r2,r2,4
    2c78:	10c00017 	ldw	r3,0(r2)
    2c7c:	e0bffd17 	ldw	r2,-12(fp)
    2c80:	1880080e 	bge	r3,r2,2ca4 <vid_put_pixel_in_span_map+0xfc>
    span_array[(y*2)+1] = x;
    2c84:	e0bffe17 	ldw	r2,-8(fp)
    2c88:	100490fa 	slli	r2,r2,3
    2c8c:	1007883a 	mov	r3,r2
    2c90:	e0bfff17 	ldw	r2,-4(fp)
    2c94:	1885883a 	add	r2,r3,r2
    2c98:	10c00104 	addi	r3,r2,4
    2c9c:	e0bffd17 	ldw	r2,-12(fp)
    2ca0:	18800015 	stw	r2,0(r3)
}
    2ca4:	e037883a 	mov	sp,fp
    2ca8:	df000017 	ldw	fp,0(sp)
    2cac:	dec00104 	addi	sp,sp,4
    2cb0:	f800283a 	ret

00002cb4 <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
    2cb4:	deffee04 	addi	sp,sp,-72
    2cb8:	dfc01115 	stw	ra,68(sp)
    2cbc:	df001015 	stw	fp,64(sp)
    2cc0:	df001004 	addi	fp,sp,64
    2cc4:	e13ffc15 	stw	r4,-16(fp)
    2cc8:	e17ffd15 	stw	r5,-12(fp)
    2ccc:	e1bffe15 	stw	r6,-8(fp)
    2cd0:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
    2cd4:	e0fffc17 	ldw	r3,-16(fp)
    2cd8:	e0bffe17 	ldw	r2,-8(fp)
    2cdc:	10c00c0e 	bge	r2,r3,2d10 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
    2ce0:	e0bffe17 	ldw	r2,-8(fp)
    2ce4:	e0bff715 	stw	r2,-36(fp)
    x2 = x1;
    2ce8:	e0bffc17 	ldw	r2,-16(fp)
    2cec:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
    2cf0:	e0bff717 	ldw	r2,-36(fp)
    2cf4:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
    2cf8:	e0bfff17 	ldw	r2,-4(fp)
    2cfc:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
    2d00:	e0bffd17 	ldw	r2,-12(fp)
    2d04:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
    2d08:	e0bff617 	ldw	r2,-40(fp)
    2d0c:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
    2d10:	e0fffd17 	ldw	r3,-12(fp)
    2d14:	e0bfff17 	ldw	r2,-4(fp)
    2d18:	1885c83a 	sub	r2,r3,r2
    2d1c:	e0bff915 	stw	r2,-28(fp)
    2d20:	e0bff917 	ldw	r2,-28(fp)
    2d24:	1004403a 	cmpge	r2,r2,zero
    2d28:	1000031e 	bne	r2,zero,2d38 <vid_bres_scan_edges+0x84>
    2d2c:	e0bff917 	ldw	r2,-28(fp)
    2d30:	0085c83a 	sub	r2,zero,r2
    2d34:	e0bff915 	stw	r2,-28(fp)
  x_delta = (x2-x1);
    2d38:	e0fffe17 	ldw	r3,-8(fp)
    2d3c:	e0bffc17 	ldw	r2,-16(fp)
    2d40:	1885c83a 	sub	r2,r3,r2
    2d44:	e0bff815 	stw	r2,-32(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
    2d48:	e0fffd17 	ldw	r3,-12(fp)
    2d4c:	e0bfff17 	ldw	r2,-4(fp)
    2d50:	10c0030e 	bge	r2,r3,2d60 <vid_bres_scan_edges+0xac>
    2d54:	00bfffc4 	movi	r2,-1
    2d58:	e0bffa15 	stw	r2,-24(fp)
    2d5c:	00000206 	br	2d68 <vid_bres_scan_edges+0xb4>
    2d60:	00800044 	movi	r2,1
    2d64:	e0bffa15 	stw	r2,-24(fp)
  x_incr=1;
    2d68:	00800044 	movi	r2,1
    2d6c:	e0bffb15 	stw	r2,-20(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
    2d70:	e0fff817 	ldw	r3,-32(fp)
    2d74:	e0bff917 	ldw	r2,-28(fp)
    2d78:	18803116 	blt	r3,r2,2e40 <vid_bres_scan_edges+0x18c>
    int dPr   = y_delta<<1;
    2d7c:	e0bff917 	ldw	r2,-28(fp)
    2d80:	1085883a 	add	r2,r2,r2
    2d84:	e0bff515 	stw	r2,-44(fp)
    int dPru  = dPr - (x_delta<<1);
    2d88:	e0bff817 	ldw	r2,-32(fp)
    2d8c:	1085883a 	add	r2,r2,r2
    2d90:	1007883a 	mov	r3,r2
    2d94:	e0bff517 	ldw	r2,-44(fp)
    2d98:	10c5c83a 	sub	r2,r2,r3
    2d9c:	e0bff415 	stw	r2,-48(fp)
    int P     = dPr - x_delta;
    2da0:	e0fff517 	ldw	r3,-44(fp)
    2da4:	e0bff817 	ldw	r2,-32(fp)
    2da8:	1885c83a 	sub	r2,r3,r2
    2dac:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
    2db0:	00001f06 	br	2e30 <vid_bres_scan_edges+0x17c>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
    2db4:	e13ffc17 	ldw	r4,-16(fp)
    2db8:	e17ffd17 	ldw	r5,-12(fp)
    2dbc:	e1800217 	ldw	r6,8(fp)
    2dc0:	0002ba80 	call	2ba8 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
    2dc4:	e0bff317 	ldw	r2,-52(fp)
    2dc8:	10800050 	cmplti	r2,r2,1
    2dcc:	10000d1e 	bne	r2,zero,2e04 <vid_bres_scan_edges+0x150>
        x1+=x_incr;
    2dd0:	e0fffc17 	ldw	r3,-16(fp)
    2dd4:	e0bffb17 	ldw	r2,-20(fp)
    2dd8:	1885883a 	add	r2,r3,r2
    2ddc:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
    2de0:	e0fffd17 	ldw	r3,-12(fp)
    2de4:	e0bffa17 	ldw	r2,-24(fp)
    2de8:	1885883a 	add	r2,r3,r2
    2dec:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
    2df0:	e0fff317 	ldw	r3,-52(fp)
    2df4:	e0bff417 	ldw	r2,-48(fp)
    2df8:	1885883a 	add	r2,r3,r2
    2dfc:	e0bff315 	stw	r2,-52(fp)
    2e00:	00000806 	br	2e24 <vid_bres_scan_edges+0x170>
      } else {
        x1+=x_incr;
    2e04:	e0fffc17 	ldw	r3,-16(fp)
    2e08:	e0bffb17 	ldw	r2,-20(fp)
    2e0c:	1885883a 	add	r2,r3,r2
    2e10:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
    2e14:	e0fff317 	ldw	r3,-52(fp)
    2e18:	e0bff517 	ldw	r2,-44(fp)
    2e1c:	1885883a 	add	r2,r3,r2
    2e20:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
    2e24:	e0bff817 	ldw	r2,-32(fp)
    2e28:	10bfffc4 	addi	r2,r2,-1
    2e2c:	e0bff815 	stw	r2,-32(fp)
    2e30:	e0bff817 	ldw	r2,-32(fp)
    2e34:	1004403a 	cmpge	r2,r2,zero
    2e38:	103fde1e 	bne	r2,zero,2db4 <vid_bres_scan_edges+0x100>
    2e3c:	00003006 	br	2f00 <vid_bres_scan_edges+0x24c>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
    2e40:	e0bff817 	ldw	r2,-32(fp)
    2e44:	1085883a 	add	r2,r2,r2
    2e48:	e0bff215 	stw	r2,-56(fp)
    int dPru  = dPr - (y_delta<<1);
    2e4c:	e0bff917 	ldw	r2,-28(fp)
    2e50:	1085883a 	add	r2,r2,r2
    2e54:	1007883a 	mov	r3,r2
    2e58:	e0bff217 	ldw	r2,-56(fp)
    2e5c:	10c5c83a 	sub	r2,r2,r3
    2e60:	e0bff115 	stw	r2,-60(fp)
    int P     = dPr - y_delta;
    2e64:	e0fff217 	ldw	r3,-56(fp)
    2e68:	e0bff917 	ldw	r2,-28(fp)
    2e6c:	1885c83a 	sub	r2,r3,r2
    2e70:	e0bff015 	stw	r2,-64(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
    2e74:	00001f06 	br	2ef4 <vid_bres_scan_edges+0x240>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
    2e78:	e13ffc17 	ldw	r4,-16(fp)
    2e7c:	e17ffd17 	ldw	r5,-12(fp)
    2e80:	e1800217 	ldw	r6,8(fp)
    2e84:	0002ba80 	call	2ba8 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
    2e88:	e0bff017 	ldw	r2,-64(fp)
    2e8c:	10800050 	cmplti	r2,r2,1
    2e90:	10000d1e 	bne	r2,zero,2ec8 <vid_bres_scan_edges+0x214>
        x1+=x_incr;
    2e94:	e0fffc17 	ldw	r3,-16(fp)
    2e98:	e0bffb17 	ldw	r2,-20(fp)
    2e9c:	1885883a 	add	r2,r3,r2
    2ea0:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
    2ea4:	e0fffd17 	ldw	r3,-12(fp)
    2ea8:	e0bffa17 	ldw	r2,-24(fp)
    2eac:	1885883a 	add	r2,r3,r2
    2eb0:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
    2eb4:	e0fff017 	ldw	r3,-64(fp)
    2eb8:	e0bff117 	ldw	r2,-60(fp)
    2ebc:	1885883a 	add	r2,r3,r2
    2ec0:	e0bff015 	stw	r2,-64(fp)
    2ec4:	00000806 	br	2ee8 <vid_bres_scan_edges+0x234>
      } else {
        y1+=y_incr;
    2ec8:	e0fffd17 	ldw	r3,-12(fp)
    2ecc:	e0bffa17 	ldw	r2,-24(fp)
    2ed0:	1885883a 	add	r2,r3,r2
    2ed4:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
    2ed8:	e0fff017 	ldw	r3,-64(fp)
    2edc:	e0bff217 	ldw	r2,-56(fp)
    2ee0:	1885883a 	add	r2,r3,r2
    2ee4:	e0bff015 	stw	r2,-64(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
    2ee8:	e0bff917 	ldw	r2,-28(fp)
    2eec:	10bfffc4 	addi	r2,r2,-1
    2ef0:	e0bff915 	stw	r2,-28(fp)
    2ef4:	e0bff917 	ldw	r2,-28(fp)
    2ef8:	1004403a 	cmpge	r2,r2,zero
    2efc:	103fde1e 	bne	r2,zero,2e78 <vid_bres_scan_edges+0x1c4>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
    2f00:	e037883a 	mov	sp,fp
    2f04:	dfc00117 	ldw	ra,4(sp)
    2f08:	df000017 	ldw	fp,0(sp)
    2f0c:	dec00204 	addi	sp,sp,8
    2f10:	f800283a 	ret

00002f14 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
    2f14:	defff804 	addi	sp,sp,-32
    2f18:	dfc00715 	stw	ra,28(sp)
    2f1c:	df000615 	stw	fp,24(sp)
    2f20:	df000604 	addi	fp,sp,24
    2f24:	e13ffe15 	stw	r4,-8(fp)
    2f28:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
    2f2c:	e0bffe17 	ldw	r2,-8(fp)
    2f30:	11000017 	ldw	r4,0(r2)
    2f34:	e0bffe17 	ldw	r2,-8(fp)
    2f38:	11400317 	ldw	r5,12(r2)
    2f3c:	e0bffe17 	ldw	r2,-8(fp)
    2f40:	11800117 	ldw	r6,4(r2)
    2f44:	e0bffe17 	ldw	r2,-8(fp)
    2f48:	11c00417 	ldw	r7,16(r2)
    2f4c:	e0bffe17 	ldw	r2,-8(fp)
    2f50:	10c00a17 	ldw	r3,40(r2)
    2f54:	00800044 	movi	r2,1
    2f58:	d8800015 	stw	r2,0(sp)
    2f5c:	d8c00115 	stw	r3,4(sp)
    2f60:	e0bfff17 	ldw	r2,-4(fp)
    2f64:	d8800215 	stw	r2,8(sp)
    2f68:	00006580 	call	658 <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
    2f6c:	e0bffe17 	ldw	r2,-8(fp)
    2f70:	11000117 	ldw	r4,4(r2)
    2f74:	e0bffe17 	ldw	r2,-8(fp)
    2f78:	11400417 	ldw	r5,16(r2)
    2f7c:	e0bffe17 	ldw	r2,-8(fp)
    2f80:	11800217 	ldw	r6,8(r2)
    2f84:	e0bffe17 	ldw	r2,-8(fp)
    2f88:	11c00517 	ldw	r7,20(r2)
    2f8c:	e0bffe17 	ldw	r2,-8(fp)
    2f90:	10c00a17 	ldw	r3,40(r2)
    2f94:	00800044 	movi	r2,1
    2f98:	d8800015 	stw	r2,0(sp)
    2f9c:	d8c00115 	stw	r3,4(sp)
    2fa0:	e0bfff17 	ldw	r2,-4(fp)
    2fa4:	d8800215 	stw	r2,8(sp)
    2fa8:	00006580 	call	658 <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
    2fac:	e0bffe17 	ldw	r2,-8(fp)
    2fb0:	11000217 	ldw	r4,8(r2)
    2fb4:	e0bffe17 	ldw	r2,-8(fp)
    2fb8:	11400517 	ldw	r5,20(r2)
    2fbc:	e0bffe17 	ldw	r2,-8(fp)
    2fc0:	11800017 	ldw	r6,0(r2)
    2fc4:	e0bffe17 	ldw	r2,-8(fp)
    2fc8:	11c00317 	ldw	r7,12(r2)
    2fcc:	e0bffe17 	ldw	r2,-8(fp)
    2fd0:	10c00a17 	ldw	r3,40(r2)
    2fd4:	00800044 	movi	r2,1
    2fd8:	d8800015 	stw	r2,0(sp)
    2fdc:	d8c00115 	stw	r3,4(sp)
    2fe0:	e0bfff17 	ldw	r2,-4(fp)
    2fe4:	d8800215 	stw	r2,8(sp)
    2fe8:	00006580 	call	658 <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
    2fec:	e0bffe17 	ldw	r2,-8(fp)
    2ff0:	10800b17 	ldw	r2,44(r2)
    2ff4:	10800058 	cmpnei	r2,r2,1
    2ff8:	1000931e 	bne	r2,zero,3248 <vid_draw_triangle+0x334>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    2ffc:	e0bffe17 	ldw	r2,-8(fp)
    3000:	11000317 	ldw	r4,12(r2)
    3004:	e0bffe17 	ldw	r2,-8(fp)
    3008:	11400417 	ldw	r5,16(r2)
    300c:	e0bffe17 	ldw	r2,-8(fp)
    3010:	11800517 	ldw	r6,20(r2)
    3014:	0002af00 	call	2af0 <min3>
    3018:	1007883a 	mov	r3,r2
    301c:	e0bffe17 	ldw	r2,-8(fp)
    3020:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    3024:	e0bffe17 	ldw	r2,-8(fp)
    3028:	11000317 	ldw	r4,12(r2)
    302c:	e0bffe17 	ldw	r2,-8(fp)
    3030:	11400417 	ldw	r5,16(r2)
    3034:	e0bffe17 	ldw	r2,-8(fp)
    3038:	11800517 	ldw	r6,20(r2)
    303c:	0002a9c0 	call	2a9c <max3>
    3040:	1007883a 	mov	r3,r2
    3044:	e0bffe17 	ldw	r2,-8(fp)
    3048:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    304c:	e0bffe17 	ldw	r2,-8(fp)
    3050:	11000317 	ldw	r4,12(r2)
    3054:	e0bffe17 	ldw	r2,-8(fp)
    3058:	11400417 	ldw	r5,16(r2)
    305c:	e0bffe17 	ldw	r2,-8(fp)
    3060:	11800517 	ldw	r6,20(r2)
    3064:	0002b440 	call	2b44 <max_diff3>
    3068:	1007883a 	mov	r3,r2
    306c:	e0bffe17 	ldw	r2,-8(fp)
    3070:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    3074:	e0bffe17 	ldw	r2,-8(fp)
    3078:	11000017 	ldw	r4,0(r2)
    307c:	e0bffe17 	ldw	r2,-8(fp)
    3080:	11400117 	ldw	r5,4(r2)
    3084:	e0bffe17 	ldw	r2,-8(fp)
    3088:	11800217 	ldw	r6,8(r2)
    308c:	0002b440 	call	2b44 <max_diff3>
    3090:	1007883a 	mov	r3,r2
    3094:	e0bffe17 	ldw	r2,-8(fp)
    3098:	10c00715 	stw	r3,28(r2)
    tri->span_array = malloc(display->height * 4 * 2);
    309c:	e0bfff17 	ldw	r2,-4(fp)
    30a0:	10800617 	ldw	r2,24(r2)
    30a4:	100490fa 	slli	r2,r2,3
    30a8:	1009883a 	mov	r4,r2
    30ac:	000a7680 	call	a768 <malloc>
    30b0:	1007883a 	mov	r3,r2
    30b4:	e0bffe17 	ldw	r2,-8(fp)
    30b8:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
    30bc:	e0bffe17 	ldw	r2,-8(fp)
    30c0:	10800817 	ldw	r2,32(r2)
    30c4:	e0bffd15 	stw	r2,-12(fp)
    30c8:	00001206 	br	3114 <vid_draw_triangle+0x200>
    {
      tri->span_array[i*2] = -1;
    30cc:	e0bffe17 	ldw	r2,-8(fp)
    30d0:	10c00d17 	ldw	r3,52(r2)
    30d4:	e0bffd17 	ldw	r2,-12(fp)
    30d8:	100490fa 	slli	r2,r2,3
    30dc:	1887883a 	add	r3,r3,r2
    30e0:	00bfffc4 	movi	r2,-1
    30e4:	18800015 	stw	r2,0(r3)
      tri->span_array[(i*2) + 1] = -1;
    30e8:	e0bffe17 	ldw	r2,-8(fp)
    30ec:	10c00d17 	ldw	r3,52(r2)
    30f0:	e0bffd17 	ldw	r2,-12(fp)
    30f4:	100490fa 	slli	r2,r2,3
    30f8:	1885883a 	add	r2,r3,r2
    30fc:	10c00104 	addi	r3,r2,4
    3100:	00bfffc4 	movi	r2,-1
    3104:	18800015 	stw	r2,0(r3)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
    3108:	e0bffd17 	ldw	r2,-12(fp)
    310c:	10800044 	addi	r2,r2,1
    3110:	e0bffd15 	stw	r2,-12(fp)
    3114:	e0bffe17 	ldw	r2,-8(fp)
    3118:	10c00917 	ldw	r3,36(r2)
    311c:	e0bffd17 	ldw	r2,-12(fp)
    3120:	18bfea0e 	bge	r3,r2,30cc <vid_draw_triangle+0x1b8>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
    3124:	e0bffe17 	ldw	r2,-8(fp)
    3128:	11000017 	ldw	r4,0(r2)
    312c:	e0bffe17 	ldw	r2,-8(fp)
    3130:	11400317 	ldw	r5,12(r2)
    3134:	e0bffe17 	ldw	r2,-8(fp)
    3138:	11800117 	ldw	r6,4(r2)
    313c:	e0bffe17 	ldw	r2,-8(fp)
    3140:	11c00417 	ldw	r7,16(r2)
    3144:	e0bffe17 	ldw	r2,-8(fp)
    3148:	10800d17 	ldw	r2,52(r2)
    314c:	d8800015 	stw	r2,0(sp)
    3150:	0002cb40 	call	2cb4 <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
    3154:	e0bffe17 	ldw	r2,-8(fp)
    3158:	11000117 	ldw	r4,4(r2)
    315c:	e0bffe17 	ldw	r2,-8(fp)
    3160:	11400417 	ldw	r5,16(r2)
    3164:	e0bffe17 	ldw	r2,-8(fp)
    3168:	11800217 	ldw	r6,8(r2)
    316c:	e0bffe17 	ldw	r2,-8(fp)
    3170:	11c00517 	ldw	r7,20(r2)
    3174:	e0bffe17 	ldw	r2,-8(fp)
    3178:	10800d17 	ldw	r2,52(r2)
    317c:	d8800015 	stw	r2,0(sp)
    3180:	0002cb40 	call	2cb4 <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
    3184:	e0bffe17 	ldw	r2,-8(fp)
    3188:	11000217 	ldw	r4,8(r2)
    318c:	e0bffe17 	ldw	r2,-8(fp)
    3190:	11400517 	ldw	r5,20(r2)
    3194:	e0bffe17 	ldw	r2,-8(fp)
    3198:	11800017 	ldw	r6,0(r2)
    319c:	e0bffe17 	ldw	r2,-8(fp)
    31a0:	11c00317 	ldw	r7,12(r2)
    31a4:	e0bffe17 	ldw	r2,-8(fp)
    31a8:	10800d17 	ldw	r2,52(r2)
    31ac:	d8800015 	stw	r2,0(sp)
    31b0:	0002cb40 	call	2cb4 <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
    31b4:	e0bffe17 	ldw	r2,-8(fp)
    31b8:	10800817 	ldw	r2,32(r2)
    31bc:	e0bffd15 	stw	r2,-12(fp)
    31c0:	00001a06 	br	322c <vid_draw_triangle+0x318>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
    31c4:	e0bffe17 	ldw	r2,-8(fp)
    31c8:	10c00d17 	ldw	r3,52(r2)
    31cc:	e0bffd17 	ldw	r2,-12(fp)
    31d0:	100490fa 	slli	r2,r2,3
    31d4:	1885883a 	add	r2,r3,r2
    31d8:	11000017 	ldw	r4,0(r2)
    31dc:	e0bffe17 	ldw	r2,-8(fp)
    31e0:	10c00d17 	ldw	r3,52(r2)
    31e4:	e0bffd17 	ldw	r2,-12(fp)
    31e8:	100490fa 	slli	r2,r2,3
    31ec:	1885883a 	add	r2,r3,r2
    31f0:	10800104 	addi	r2,r2,4
    31f4:	11800017 	ldw	r6,0(r2)
    31f8:	e0bffe17 	ldw	r2,-8(fp)
    31fc:	10c00a17 	ldw	r3,40(r2)
    3200:	00800044 	movi	r2,1
    3204:	d8800015 	stw	r2,0(sp)
    3208:	d8c00115 	stw	r3,4(sp)
    320c:	e0bfff17 	ldw	r2,-4(fp)
    3210:	d8800215 	stw	r2,8(sp)
    3214:	e17ffd17 	ldw	r5,-12(fp)
    3218:	e1fffd17 	ldw	r7,-12(fp)
    321c:	00006580 	call	658 <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
    3220:	e0bffd17 	ldw	r2,-12(fp)
    3224:	10800044 	addi	r2,r2,1
    3228:	e0bffd15 	stw	r2,-12(fp)
    322c:	e0bffe17 	ldw	r2,-8(fp)
    3230:	10c00917 	ldw	r3,36(r2)
    3234:	e0bffd17 	ldw	r2,-12(fp)
    3238:	18bfe20e 	bge	r3,r2,31c4 <vid_draw_triangle+0x2b0>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
    323c:	e0bffe17 	ldw	r2,-8(fp)
    3240:	11000d17 	ldw	r4,52(r2)
    3244:	000a7540 	call	a754 <free>
  }
}
    3248:	e037883a 	mov	sp,fp
    324c:	dfc00117 	ldw	ra,4(sp)
    3250:	df000017 	ldw	fp,0(sp)
    3254:	dec00204 	addi	sp,sp,8
    3258:	f800283a 	ret

0000325c <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
    325c:	defff404 	addi	sp,sp,-48
    3260:	dfc00b15 	stw	ra,44(sp)
    3264:	df000a15 	stw	fp,40(sp)
    3268:	df000a04 	addi	fp,sp,40
    326c:	e13ffa15 	stw	r4,-24(fp)
    3270:	e17ffb15 	stw	r5,-20(fp)
    3274:	e0800217 	ldw	r2,8(fp)
    3278:	e0c00317 	ldw	r3,12(fp)
    327c:	e1bffc0d 	sth	r6,-16(fp)
    3280:	e1fffd0d 	sth	r7,-12(fp)
    3284:	e0bffe0d 	sth	r2,-8(fp)
    3288:	e0ffff0d 	sth	r3,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
    328c:	e03ff715 	stw	zero,-36(fp)
  int y_dst_offset = 0;
    3290:	e03ff615 	stw	zero,-40(fp)
  
  for( y_src = 0, y_dst = 0; 
    3294:	e03ff915 	stw	zero,-28(fp)
    3298:	e03ff815 	stw	zero,-32(fp)
       y_src <= ( source_height  - 1 ); 
    329c:	00001d06 	br	3314 <CopyImage16+0xb8>
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
    32a0:	e0bff617 	ldw	r2,-40(fp)
    32a4:	1085883a 	add	r2,r2,r2
    32a8:	1007883a 	mov	r3,r2
    32ac:	e0bffb17 	ldw	r2,-20(fp)
    32b0:	1889883a 	add	r4,r3,r2
    32b4:	e0bff717 	ldw	r2,-36(fp)
    32b8:	1085883a 	add	r2,r2,r2
    32bc:	1007883a 	mov	r3,r2
    32c0:	e0bffa17 	ldw	r2,-24(fp)
    32c4:	1887883a 	add	r3,r3,r2
    32c8:	e0bffc0f 	ldh	r2,-16(fp)
    32cc:	1085883a 	add	r2,r2,r2
    32d0:	180b883a 	mov	r5,r3
    32d4:	100d883a 	mov	r6,r2
    32d8:	000aebc0 	call	aebc <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
    32dc:	e0bff917 	ldw	r2,-28(fp)
    32e0:	10800044 	addi	r2,r2,1
    32e4:	e0bff915 	stw	r2,-28(fp)
    32e8:	e0bff817 	ldw	r2,-32(fp)
    32ec:	10800044 	addi	r2,r2,1
    32f0:	e0bff815 	stw	r2,-32(fp)
    32f4:	e0fffc0f 	ldh	r3,-16(fp)
    32f8:	e0bff717 	ldw	r2,-36(fp)
    32fc:	10c5883a 	add	r2,r2,r3
    3300:	e0bff715 	stw	r2,-36(fp)
    3304:	e0fffe0f 	ldh	r3,-8(fp)
    3308:	e0bff617 	ldw	r2,-40(fp)
    330c:	10c5883a 	add	r2,r2,r3
    3310:	e0bff615 	stw	r2,-40(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
    3314:	e0bffd0f 	ldh	r2,-12(fp)
    3318:	10ffffc4 	addi	r3,r2,-1
    331c:	e0bff917 	ldw	r2,-28(fp)
    3320:	18bfdf0e 	bge	r3,r2,32a0 <CopyImage16+0x44>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
    3324:	e037883a 	mov	sp,fp
    3328:	dfc00117 	ldw	ra,4(sp)
    332c:	df000017 	ldw	fp,0(sp)
    3330:	dec00204 	addi	sp,sp,8
    3334:	f800283a 	ret

00003338 <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
    3338:	defff004 	addi	sp,sp,-64
    333c:	dfc00f15 	stw	ra,60(sp)
    3340:	df000e15 	stw	fp,56(sp)
    3344:	df000e04 	addi	fp,sp,56
    3348:	e13ff615 	stw	r4,-40(fp)
    334c:	e17ff715 	stw	r5,-36(fp)
    3350:	e0800217 	ldw	r2,8(fp)
    3354:	e0c00317 	ldw	r3,12(fp)
    3358:	e1000417 	ldw	r4,16(fp)
    335c:	e1400517 	ldw	r5,20(fp)
    3360:	e2000617 	ldw	r8,24(fp)
    3364:	e2400717 	ldw	r9,28(fp)
    3368:	e1bff80d 	sth	r6,-32(fp)
    336c:	e1fff90d 	sth	r7,-28(fp)
    3370:	e0bffa0d 	sth	r2,-24(fp)
    3374:	e0fffb0d 	sth	r3,-20(fp)
    3378:	e13ffc0d 	sth	r4,-16(fp)
    337c:	e17ffd0d 	sth	r5,-12(fp)
    3380:	e23ffe0d 	sth	r8,-8(fp)
    3384:	e27fff0d 	sth	r9,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
    3388:	e13ff80f 	ldh	r4,-32(fp)
    338c:	e17ffc0f 	ldh	r5,-16(fp)
    3390:	000a0540 	call	a054 <__mulsi3>
    3394:	e0bff315 	stw	r2,-52(fp)
  int y_dst_offset = 0;
    3398:	e03ff215 	stw	zero,-56(fp)
  
  for( y_src = crop_top, y_dst = 0; 
    339c:	e0bffc0f 	ldh	r2,-16(fp)
    33a0:	e0bff515 	stw	r2,-44(fp)
    33a4:	e03ff415 	stw	zero,-48(fp)
       y_src <= ( source_height - crop_bottom - 1 ); 
    33a8:	00002306 	br	3438 <CropImage16+0x100>
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
    33ac:	e0bff217 	ldw	r2,-56(fp)
    33b0:	1085883a 	add	r2,r2,r2
    33b4:	1007883a 	mov	r3,r2
    33b8:	e0bff717 	ldw	r2,-36(fp)
    33bc:	1889883a 	add	r4,r3,r2
    33c0:	e0bffa0f 	ldh	r2,-24(fp)
    33c4:	1007883a 	mov	r3,r2
    33c8:	e0bff317 	ldw	r2,-52(fp)
    33cc:	1885883a 	add	r2,r3,r2
    33d0:	1085883a 	add	r2,r2,r2
    33d4:	1007883a 	mov	r3,r2
    33d8:	e0bff617 	ldw	r2,-40(fp)
    33dc:	188b883a 	add	r5,r3,r2
    33e0:	e0fff80f 	ldh	r3,-32(fp)
    33e4:	e0bffa0f 	ldh	r2,-24(fp)
    33e8:	1887c83a 	sub	r3,r3,r2
    33ec:	e0bffb0f 	ldh	r2,-20(fp)
    33f0:	1885c83a 	sub	r2,r3,r2
    33f4:	1085883a 	add	r2,r2,r2
    33f8:	100d883a 	mov	r6,r2
    33fc:	000aebc0 	call	aebc <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
    3400:	e0bff517 	ldw	r2,-44(fp)
    3404:	10800044 	addi	r2,r2,1
    3408:	e0bff515 	stw	r2,-44(fp)
    340c:	e0bff417 	ldw	r2,-48(fp)
    3410:	10800044 	addi	r2,r2,1
    3414:	e0bff415 	stw	r2,-48(fp)
    3418:	e0fff80f 	ldh	r3,-32(fp)
    341c:	e0bff317 	ldw	r2,-52(fp)
    3420:	10c5883a 	add	r2,r2,r3
    3424:	e0bff315 	stw	r2,-52(fp)
    3428:	e0fffe0f 	ldh	r3,-8(fp)
    342c:	e0bff217 	ldw	r2,-56(fp)
    3430:	10c5883a 	add	r2,r2,r3
    3434:	e0bff215 	stw	r2,-56(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
    3438:	e0fff90f 	ldh	r3,-28(fp)
    343c:	e0bffd0f 	ldh	r2,-12(fp)
    3440:	1885c83a 	sub	r2,r3,r2
    3444:	10ffffc4 	addi	r3,r2,-1
    3448:	e0bff517 	ldw	r2,-44(fp)
    344c:	18bfd70e 	bge	r3,r2,33ac <CropImage16+0x74>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
    3450:	e037883a 	mov	sp,fp
    3454:	dfc00117 	ldw	ra,4(sp)
    3458:	df000017 	ldw	fp,0(sp)
    345c:	dec00204 	addi	sp,sp,8
    3460:	f800283a 	ret

00003464 <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
    3464:	defff404 	addi	sp,sp,-48
    3468:	dfc00b15 	stw	ra,44(sp)
    346c:	df000a15 	stw	fp,40(sp)
    3470:	df000a04 	addi	fp,sp,40
    3474:	e13ffc15 	stw	r4,-16(fp)
    3478:	e17ffd15 	stw	r5,-12(fp)
    347c:	e1bffe15 	stw	r6,-8(fp)
    3480:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
    3484:	e03ffb15 	stw	zero,-20(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
    3488:	e0bffc17 	ldw	r2,-16(fp)
    348c:	e0bff915 	stw	r2,-28(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
    3490:	00008206 	br	369c <vid_print_string_alpha+0x238>
    //Handle newline char here.
    if (string[i] == '\n') {
    3494:	e0bffb17 	ldw	r2,-20(fp)
    3498:	1007883a 	mov	r3,r2
    349c:	e0800417 	ldw	r2,16(fp)
    34a0:	1885883a 	add	r2,r3,r2
    34a4:	10800003 	ldbu	r2,0(r2)
    34a8:	10803fcc 	andi	r2,r2,255
    34ac:	1080201c 	xori	r2,r2,128
    34b0:	10bfe004 	addi	r2,r2,-128
    34b4:	10800298 	cmpnei	r2,r2,10
    34b8:	10000c1e 	bne	r2,zero,34ec <vid_print_string_alpha+0x88>
      horiz_offset = original_horiz_offset;
    34bc:	e0bff917 	ldw	r2,-28(fp)
    34c0:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
    34c4:	e0800217 	ldw	r2,8(fp)
    34c8:	1082d804 	addi	r2,r2,2912
    34cc:	10c00517 	ldw	r3,20(r2)
    34d0:	e0bffd17 	ldw	r2,-12(fp)
    34d4:	1885883a 	add	r2,r3,r2
    34d8:	e0bffd15 	stw	r2,-12(fp)
      i++;
    34dc:	e0bffb17 	ldw	r2,-20(fp)
    34e0:	10800044 	addi	r2,r2,1
    34e4:	e0bffb15 	stw	r2,-20(fp)
      continue;
    34e8:	00006c06 	br	369c <vid_print_string_alpha+0x238>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
    34ec:	e0bffb17 	ldw	r2,-20(fp)
    34f0:	1007883a 	mov	r3,r2
    34f4:	e0800417 	ldw	r2,16(fp)
    34f8:	1885883a 	add	r2,r3,r2
    34fc:	10800003 	ldbu	r2,0(r2)
    3500:	10803fcc 	andi	r2,r2,255
    3504:	1080201c 	xori	r2,r2,128
    3508:	10bfe004 	addi	r2,r2,-128
    350c:	10800818 	cmpnei	r2,r2,32
    3510:	1000151e 	bne	r2,zero,3568 <vid_print_string_alpha+0x104>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
    3514:	e0bfff17 	ldw	r2,-4(fp)
    3518:	10bfffe0 	cmpeqi	r2,r2,-1
    351c:	10000b1e 	bne	r2,zero,354c <vid_print_string_alpha+0xe8>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
    3520:	e0bfff17 	ldw	r2,-4(fp)
    3524:	d8800015 	stw	r2,0(sp)
    3528:	e0800217 	ldw	r2,8(fp)
    352c:	d8800115 	stw	r2,4(sp)
    3530:	e0800317 	ldw	r2,12(fp)
    3534:	d8800215 	stw	r2,8(sp)
    3538:	e13ffc17 	ldw	r4,-16(fp)
    353c:	e17ffd17 	ldw	r5,-12(fp)
    3540:	e1bfff17 	ldw	r6,-4(fp)
    3544:	01c00b44 	movi	r7,45
    3548:	0003e600 	call	3e60 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    354c:	e0800217 	ldw	r2,8(fp)
    3550:	10806004 	addi	r2,r2,384
    3554:	10c00417 	ldw	r3,16(r2)
    3558:	e0bffc17 	ldw	r2,-16(fp)
    355c:	1885883a 	add	r2,r3,r2
    3560:	e0bffc15 	stw	r2,-16(fp)
    3564:	00004a06 	br	3690 <vid_print_string_alpha+0x22c>
    }
    else if(string[i] == '\t')  // this is a tab
    3568:	e0bffb17 	ldw	r2,-20(fp)
    356c:	1007883a 	mov	r3,r2
    3570:	e0800417 	ldw	r2,16(fp)
    3574:	1885883a 	add	r2,r3,r2
    3578:	10800003 	ldbu	r2,0(r2)
    357c:	10803fcc 	andi	r2,r2,255
    3580:	1080201c 	xori	r2,r2,128
    3584:	10bfe004 	addi	r2,r2,-128
    3588:	10800258 	cmpnei	r2,r2,9
    358c:	10001d1e 	bne	r2,zero,3604 <vid_print_string_alpha+0x1a0>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
    3590:	e03ffa15 	stw	zero,-24(fp)
    3594:	00001706 	br	35f4 <vid_print_string_alpha+0x190>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
    3598:	e0bfff17 	ldw	r2,-4(fp)
    359c:	10bfffe0 	cmpeqi	r2,r2,-1
    35a0:	10000b1e 	bne	r2,zero,35d0 <vid_print_string_alpha+0x16c>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
    35a4:	e0bfff17 	ldw	r2,-4(fp)
    35a8:	d8800015 	stw	r2,0(sp)
    35ac:	e0800217 	ldw	r2,8(fp)
    35b0:	d8800115 	stw	r2,4(sp)
    35b4:	e0800317 	ldw	r2,12(fp)
    35b8:	d8800215 	stw	r2,8(sp)
    35bc:	e13ffc17 	ldw	r4,-16(fp)
    35c0:	e17ffd17 	ldw	r5,-12(fp)
    35c4:	e1bfff17 	ldw	r6,-4(fp)
    35c8:	01c00b44 	movi	r7,45
    35cc:	0003e600 	call	3e60 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    35d0:	e0800217 	ldw	r2,8(fp)
    35d4:	10806004 	addi	r2,r2,384
    35d8:	10c00417 	ldw	r3,16(r2)
    35dc:	e0bffc17 	ldw	r2,-16(fp)
    35e0:	1885883a 	add	r2,r3,r2
    35e4:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
    35e8:	e0bffa17 	ldw	r2,-24(fp)
    35ec:	10800044 	addi	r2,r2,1
    35f0:	e0bffa15 	stw	r2,-24(fp)
    35f4:	e0bffa17 	ldw	r2,-24(fp)
    35f8:	10800090 	cmplti	r2,r2,2
    35fc:	103fe61e 	bne	r2,zero,3598 <vid_print_string_alpha+0x134>
    3600:	00002306 	br	3690 <vid_print_string_alpha+0x22c>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
    3604:	e0bffb17 	ldw	r2,-20(fp)
    3608:	1007883a 	mov	r3,r2
    360c:	e0800417 	ldw	r2,16(fp)
    3610:	1885883a 	add	r2,r3,r2
    3614:	10800003 	ldbu	r2,0(r2)
    3618:	11c03fcc 	andi	r7,r2,255
    361c:	39c0201c 	xori	r7,r7,128
    3620:	39ffe004 	addi	r7,r7,-128
    3624:	e0bfff17 	ldw	r2,-4(fp)
    3628:	d8800015 	stw	r2,0(sp)
    362c:	e0800217 	ldw	r2,8(fp)
    3630:	d8800115 	stw	r2,4(sp)
    3634:	e0800317 	ldw	r2,12(fp)
    3638:	d8800215 	stw	r2,8(sp)
    363c:	e13ffc17 	ldw	r4,-16(fp)
    3640:	e17ffd17 	ldw	r5,-12(fp)
    3644:	e1bffe17 	ldw	r6,-8(fp)
    3648:	0003e600 	call	3e60 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
    364c:	e0bffb17 	ldw	r2,-20(fp)
    3650:	1007883a 	mov	r3,r2
    3654:	e0800417 	ldw	r2,16(fp)
    3658:	1885883a 	add	r2,r3,r2
    365c:	10800003 	ldbu	r2,0(r2)
    3660:	10803fcc 	andi	r2,r2,255
    3664:	1080201c 	xori	r2,r2,128
    3668:	10bfe004 	addi	r2,r2,-128
    366c:	1004917a 	slli	r2,r2,5
    3670:	1007883a 	mov	r3,r2
    3674:	e0800217 	ldw	r2,8(fp)
    3678:	1885883a 	add	r2,r3,r2
    367c:	10bef804 	addi	r2,r2,-1056
    3680:	10c00417 	ldw	r3,16(r2)
    3684:	e0bffc17 	ldw	r2,-16(fp)
    3688:	1885883a 	add	r2,r3,r2
    368c:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
    3690:	e0bffb17 	ldw	r2,-20(fp)
    3694:	10800044 	addi	r2,r2,1
    3698:	e0bffb15 	stw	r2,-20(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
    369c:	e0bffb17 	ldw	r2,-20(fp)
    36a0:	1007883a 	mov	r3,r2
    36a4:	e0800417 	ldw	r2,16(fp)
    36a8:	1885883a 	add	r2,r3,r2
    36ac:	10800003 	ldbu	r2,0(r2)
    36b0:	10803fcc 	andi	r2,r2,255
    36b4:	1080201c 	xori	r2,r2,128
    36b8:	10bfe004 	addi	r2,r2,-128
    36bc:	1004c03a 	cmpne	r2,r2,zero
    36c0:	103f741e 	bne	r2,zero,3494 <vid_print_string_alpha+0x30>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
    36c4:	0005883a 	mov	r2,zero
}
    36c8:	e037883a 	mov	sp,fp
    36cc:	dfc00117 	ldw	ra,4(sp)
    36d0:	df000017 	ldw	fp,0(sp)
    36d4:	dec00204 	addi	sp,sp,8
    36d8:	f800283a 	ret

000036dc <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
    36dc:	defff904 	addi	sp,sp,-28
    36e0:	df000615 	stw	fp,24(sp)
    36e4:	df000604 	addi	fp,sp,24
    36e8:	e13ffc15 	stw	r4,-16(fp)
    36ec:	e17ffd15 	stw	r5,-12(fp)
    36f0:	e1bffe15 	stw	r6,-8(fp)
    36f4:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
    36f8:	e03ffa0d 	sth	zero,-24(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
    36fc:	e0bffc17 	ldw	r2,-16(fp)
    3700:	10800418 	cmpnei	r2,r2,16
    3704:	1000231e 	bne	r2,zero,3794 <seperate_color_channels+0xb8>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
    3708:	e0bffd17 	ldw	r2,-12(fp)
    370c:	10800003 	ldbu	r2,0(r2)
    3710:	10803fcc 	andi	r2,r2,255
    3714:	e0bffa0d 	sth	r2,-24(fp)
    3718:	e0bffd17 	ldw	r2,-12(fp)
    371c:	10800044 	addi	r2,r2,1
    3720:	e0bffd15 	stw	r2,-12(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
    3724:	e0bffd17 	ldw	r2,-12(fp)
    3728:	10800003 	ldbu	r2,0(r2)
    372c:	10803fcc 	andi	r2,r2,255
    3730:	1004923a 	slli	r2,r2,8
    3734:	1007883a 	mov	r3,r2
    3738:	e0bffa0b 	ldhu	r2,-24(fp)
    373c:	10c5883a 	add	r2,r2,r3
    3740:	e0bffa0d 	sth	r2,-24(fp)
    *blue = temp_color & 0x1F; 
    3744:	e0bffa0b 	ldhu	r2,-24(fp)
    3748:	108007cc 	andi	r2,r2,31
    374c:	1007883a 	mov	r3,r2
    3750:	e0800117 	ldw	r2,4(fp)
    3754:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
    3758:	e0bffa0b 	ldhu	r2,-24(fp)
    375c:	1004d17a 	srli	r2,r2,5
    3760:	10800fcc 	andi	r2,r2,63
    3764:	1007883a 	mov	r3,r2
    3768:	e0bfff17 	ldw	r2,-4(fp)
    376c:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
    3770:	e0bffa0b 	ldhu	r2,-24(fp)
    3774:	1004d2fa 	srli	r2,r2,11
    3778:	108007cc 	andi	r2,r2,31
    377c:	1007883a 	mov	r3,r2
    3780:	e0bffe17 	ldw	r2,-8(fp)
    3784:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    3788:	00800044 	movi	r2,1
    378c:	e0bffb15 	stw	r2,-20(fp)
    3790:	00002206 	br	381c <seperate_color_channels+0x140>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
    3794:	e0bffc17 	ldw	r2,-16(fp)
    3798:	10800620 	cmpeqi	r2,r2,24
    379c:	1000031e 	bne	r2,zero,37ac <seperate_color_channels+0xd0>
    37a0:	e0bffc17 	ldw	r2,-16(fp)
    37a4:	10800818 	cmpnei	r2,r2,32
    37a8:	1000151e 	bne	r2,zero,3800 <seperate_color_channels+0x124>
  {
    *blue = *color++;
    37ac:	e0bffd17 	ldw	r2,-12(fp)
    37b0:	10c00003 	ldbu	r3,0(r2)
    37b4:	e0800117 	ldw	r2,4(fp)
    37b8:	10c00005 	stb	r3,0(r2)
    37bc:	e0bffd17 	ldw	r2,-12(fp)
    37c0:	10800044 	addi	r2,r2,1
    37c4:	e0bffd15 	stw	r2,-12(fp)
    *green = *color++;
    37c8:	e0bffd17 	ldw	r2,-12(fp)
    37cc:	10c00003 	ldbu	r3,0(r2)
    37d0:	e0bfff17 	ldw	r2,-4(fp)
    37d4:	10c00005 	stb	r3,0(r2)
    37d8:	e0bffd17 	ldw	r2,-12(fp)
    37dc:	10800044 	addi	r2,r2,1
    37e0:	e0bffd15 	stw	r2,-12(fp)
    *red = *color;   
    37e4:	e0bffd17 	ldw	r2,-12(fp)
    37e8:	10c00003 	ldbu	r3,0(r2)
    37ec:	e0bffe17 	ldw	r2,-8(fp)
    37f0:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    37f4:	00800044 	movi	r2,1
    37f8:	e0bffb15 	stw	r2,-20(fp)
    *blue = temp_color & 0x1F; 
    *green = (temp_color >> 5) & 0x3F;
    *red = (temp_color >> 11) & 0x1F;
    return_value = 1;
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
    37fc:	00000706 	br	381c <seperate_color_channels+0x140>
    *red = *color;   
    return_value = 1;
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
    3800:	e0bffe17 	ldw	r2,-8(fp)
    3804:	10000005 	stb	zero,0(r2)
    *green = 0;
    3808:	e0bfff17 	ldw	r2,-4(fp)
    380c:	10000005 	stb	zero,0(r2)
    *blue = 0;    
    3810:	e0800117 	ldw	r2,4(fp)
    3814:	10000005 	stb	zero,0(r2)
    return_value = 0;    
    3818:	e03ffb15 	stw	zero,-20(fp)
  }
  return return_value;
    381c:	e0bffb17 	ldw	r2,-20(fp)
}
    3820:	e037883a 	mov	sp,fp
    3824:	df000017 	ldw	fp,0(sp)
    3828:	dec00104 	addi	sp,sp,4
    382c:	f800283a 	ret

00003830 <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
    3830:	defff904 	addi	sp,sp,-28
    3834:	df000615 	stw	fp,24(sp)
    3838:	df000604 	addi	fp,sp,24
    383c:	e13ffc15 	stw	r4,-16(fp)
    3840:	e17ffd05 	stb	r5,-12(fp)
    3844:	e1bffe05 	stb	r6,-8(fp)
    3848:	e1ffff05 	stb	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
    384c:	e0bffc17 	ldw	r2,-16(fp)
    3850:	10800418 	cmpnei	r2,r2,16
    3854:	1000221e 	bne	r2,zero,38e0 <merge_color_channels+0xb0>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
    3858:	e0bfff03 	ldbu	r2,-4(fp)
    385c:	108007cc 	andi	r2,r2,31
    3860:	1007883a 	mov	r3,r2
    3864:	e0bffe03 	ldbu	r2,-8(fp)
    3868:	10800fcc 	andi	r2,r2,63
    386c:	1004917a 	slli	r2,r2,5
    3870:	1884b03a 	or	r2,r3,r2
    3874:	1007883a 	mov	r3,r2
    3878:	e0bffd03 	ldbu	r2,-12(fp)
    387c:	108007cc 	andi	r2,r2,31
    3880:	100492fa 	slli	r2,r2,11
    3884:	1884b03a 	or	r2,r3,r2
    3888:	e0bffa0d 	sth	r2,-24(fp)
    *color++ = temp_color & 0xFF;
    388c:	e0bffa0b 	ldhu	r2,-24(fp)
    3890:	1007883a 	mov	r3,r2
    3894:	00bfffc4 	movi	r2,-1
    3898:	1884703a 	and	r2,r3,r2
    389c:	1007883a 	mov	r3,r2
    38a0:	e0800117 	ldw	r2,4(fp)
    38a4:	10c00005 	stb	r3,0(r2)
    38a8:	e0800117 	ldw	r2,4(fp)
    38ac:	10800044 	addi	r2,r2,1
    38b0:	e0800115 	stw	r2,4(fp)
    *color = (temp_color >> 8) & 0xFF;
    38b4:	e0bffa0b 	ldhu	r2,-24(fp)
    38b8:	1004d23a 	srli	r2,r2,8
    38bc:	1007883a 	mov	r3,r2
    38c0:	00bfffc4 	movi	r2,-1
    38c4:	1884703a 	and	r2,r3,r2
    38c8:	1007883a 	mov	r3,r2
    38cc:	e0800117 	ldw	r2,4(fp)
    38d0:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    38d4:	00800044 	movi	r2,1
    38d8:	e0bffb15 	stw	r2,-20(fp)
    38dc:	00002506 	br	3974 <merge_color_channels+0x144>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
    38e0:	e0bffc17 	ldw	r2,-16(fp)
    38e4:	10800620 	cmpeqi	r2,r2,24
    38e8:	1000031e 	bne	r2,zero,38f8 <merge_color_channels+0xc8>
    38ec:	e0bffc17 	ldw	r2,-16(fp)
    38f0:	10800818 	cmpnei	r2,r2,32
    38f4:	1000121e 	bne	r2,zero,3940 <merge_color_channels+0x110>
  {
    *color++ = blue;
    38f8:	e0c00117 	ldw	r3,4(fp)
    38fc:	e0bfff03 	ldbu	r2,-4(fp)
    3900:	18800005 	stb	r2,0(r3)
    3904:	e0800117 	ldw	r2,4(fp)
    3908:	10800044 	addi	r2,r2,1
    390c:	e0800115 	stw	r2,4(fp)
    *color++ = green;
    3910:	e0c00117 	ldw	r3,4(fp)
    3914:	e0bffe03 	ldbu	r2,-8(fp)
    3918:	18800005 	stb	r2,0(r3)
    391c:	e0800117 	ldw	r2,4(fp)
    3920:	10800044 	addi	r2,r2,1
    3924:	e0800115 	stw	r2,4(fp)
    *color = red;
    3928:	e0c00117 	ldw	r3,4(fp)
    392c:	e0bffd03 	ldbu	r2,-12(fp)
    3930:	18800005 	stb	r2,0(r3)
    return_value = 1;
    3934:	00800044 	movi	r2,1
    3938:	e0bffb15 	stw	r2,-20(fp)
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
    *color++ = temp_color & 0xFF;
    *color = (temp_color >> 8) & 0xFF;
    return_value = 1;
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
    393c:	00000d06 	br	3974 <merge_color_channels+0x144>
    *color = red;
    return_value = 1;
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
    3940:	e0800117 	ldw	r2,4(fp)
    3944:	10000005 	stb	zero,0(r2)
    3948:	e0800117 	ldw	r2,4(fp)
    394c:	10800044 	addi	r2,r2,1
    3950:	e0800115 	stw	r2,4(fp)
    *color++ = 0;
    3954:	e0800117 	ldw	r2,4(fp)
    3958:	10000005 	stb	zero,0(r2)
    395c:	e0800117 	ldw	r2,4(fp)
    3960:	10800044 	addi	r2,r2,1
    3964:	e0800115 	stw	r2,4(fp)
    *color = 0;
    3968:	e0800117 	ldw	r2,4(fp)
    396c:	10000005 	stb	zero,0(r2)
    return_value = 0;    
    3970:	e03ffb15 	stw	zero,-20(fp)
  }
  return return_value;  
    3974:	e0bffb17 	ldw	r2,-20(fp)
}
    3978:	e037883a 	mov	sp,fp
    397c:	df000017 	ldw	fp,0(sp)
    3980:	dec00104 	addi	sp,sp,4
    3984:	f800283a 	ret

00003988 <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
    3988:	defff604 	addi	sp,sp,-40
    398c:	dfc00915 	stw	ra,36(sp)
    3990:	df000815 	stw	fp,32(sp)
    3994:	dc000715 	stw	r16,28(sp)
    3998:	df000704 	addi	fp,sp,28
    399c:	e13ffc15 	stw	r4,-16(fp)
    39a0:	e17ffd15 	stw	r5,-12(fp)
    39a4:	e1bffe15 	stw	r6,-8(fp)
    39a8:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned int temp_color;
  unsigned int addr;
  
  if( display->color_depth == 32 )
    39ac:	e0800417 	ldw	r2,16(fp)
    39b0:	10800417 	ldw	r2,16(r2)
    39b4:	10800818 	cmpnei	r2,r2,32
    39b8:	1000221e 	bne	r2,zero,3a44 <read_from_frame+0xbc>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 4) + (horiz * 4)));
    39bc:	e1000417 	ldw	r4,16(fp)
    39c0:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    39c4:	1021883a 	mov	r16,r2
    39c8:	e0800417 	ldw	r2,16(fp)
    39cc:	11000517 	ldw	r4,20(r2)
    39d0:	e17ffd17 	ldw	r5,-12(fp)
    39d4:	000a0540 	call	a054 <__mulsi3>
    39d8:	1007883a 	mov	r3,r2
    39dc:	e0bffc17 	ldw	r2,-16(fp)
    39e0:	1885883a 	add	r2,r3,r2
    39e4:	1085883a 	add	r2,r2,r2
    39e8:	1085883a 	add	r2,r2,r2
    39ec:	8085883a 	add	r2,r16,r2
    39f0:	e0bff915 	stw	r2,-28(fp)
    temp_color = IORD_32DIRECT(addr, 0);
    39f4:	e0bff917 	ldw	r2,-28(fp)
    39f8:	10800037 	ldwio	r2,0(r2)
    39fc:	e0bffa15 	stw	r2,-24(fp)
    *blue = (unsigned char)(temp_color & 0xFF);
    3a00:	e0bffa17 	ldw	r2,-24(fp)
    3a04:	1007883a 	mov	r3,r2
    3a08:	e0800317 	ldw	r2,12(fp)
    3a0c:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 8) & 0xFF);
    3a10:	e0bffa17 	ldw	r2,-24(fp)
    3a14:	1004d23a 	srli	r2,r2,8
    3a18:	1007883a 	mov	r3,r2
    3a1c:	e0bfff17 	ldw	r2,-4(fp)
    3a20:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 16) & 0xFF);
    3a24:	e0bffa17 	ldw	r2,-24(fp)
    3a28:	1004d43a 	srli	r2,r2,16
    3a2c:	1007883a 	mov	r3,r2
    3a30:	e0bffe17 	ldw	r2,-8(fp)
    3a34:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    3a38:	00800044 	movi	r2,1
    3a3c:	e0bffb15 	stw	r2,-20(fp)
    3a40:	00005606 	br	3b9c <read_from_frame+0x214>
  }
  else if( display->color_depth == 24 )
    3a44:	e0800417 	ldw	r2,16(fp)
    3a48:	10800417 	ldw	r2,16(r2)
    3a4c:	10800618 	cmpnei	r2,r2,24
    3a50:	1000231e 	bne	r2,zero,3ae0 <read_from_frame+0x158>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 3) + (horiz * 3)));
    3a54:	e1000417 	ldw	r4,16(fp)
    3a58:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    3a5c:	1021883a 	mov	r16,r2
    3a60:	e0800417 	ldw	r2,16(fp)
    3a64:	11000517 	ldw	r4,20(r2)
    3a68:	e17ffd17 	ldw	r5,-12(fp)
    3a6c:	000a0540 	call	a054 <__mulsi3>
    3a70:	1007883a 	mov	r3,r2
    3a74:	e0bffc17 	ldw	r2,-16(fp)
    3a78:	1887883a 	add	r3,r3,r2
    3a7c:	1805883a 	mov	r2,r3
    3a80:	1085883a 	add	r2,r2,r2
    3a84:	10c5883a 	add	r2,r2,r3
    3a88:	8085883a 	add	r2,r16,r2
    3a8c:	e0bff915 	stw	r2,-28(fp)
    *blue = IORD_8DIRECT(addr, 0);
    3a90:	e0bff917 	ldw	r2,-28(fp)
    3a94:	10800023 	ldbuio	r2,0(r2)
    3a98:	1007883a 	mov	r3,r2
    3a9c:	e0800317 	ldw	r2,12(fp)
    3aa0:	10c00005 	stb	r3,0(r2)
    *green = IORD_8DIRECT(addr, 1);
    3aa4:	e0bff917 	ldw	r2,-28(fp)
    3aa8:	10800044 	addi	r2,r2,1
    3aac:	10800023 	ldbuio	r2,0(r2)
    3ab0:	1007883a 	mov	r3,r2
    3ab4:	e0bfff17 	ldw	r2,-4(fp)
    3ab8:	10c00005 	stb	r3,0(r2)
    *red = IORD_8DIRECT(addr, 2);
    3abc:	e0bff917 	ldw	r2,-28(fp)
    3ac0:	10800084 	addi	r2,r2,2
    3ac4:	10800023 	ldbuio	r2,0(r2)
    3ac8:	1007883a 	mov	r3,r2
    3acc:	e0bffe17 	ldw	r2,-8(fp)
    3ad0:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    3ad4:	00800044 	movi	r2,1
    3ad8:	e0bffb15 	stw	r2,-20(fp)
    3adc:	00002f06 	br	3b9c <read_from_frame+0x214>
  }
  else if( display->color_depth == 16 )
    3ae0:	e0800417 	ldw	r2,16(fp)
    3ae4:	10800417 	ldw	r2,16(r2)
    3ae8:	10800418 	cmpnei	r2,r2,16
    3aec:	1000241e 	bne	r2,zero,3b80 <read_from_frame+0x1f8>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 2) + (horiz * 2)));
    3af0:	e1000417 	ldw	r4,16(fp)
    3af4:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    3af8:	1021883a 	mov	r16,r2
    3afc:	e0800417 	ldw	r2,16(fp)
    3b00:	11000517 	ldw	r4,20(r2)
    3b04:	e17ffd17 	ldw	r5,-12(fp)
    3b08:	000a0540 	call	a054 <__mulsi3>
    3b0c:	1007883a 	mov	r3,r2
    3b10:	e0bffc17 	ldw	r2,-16(fp)
    3b14:	1885883a 	add	r2,r3,r2
    3b18:	1085883a 	add	r2,r2,r2
    3b1c:	8085883a 	add	r2,r16,r2
    3b20:	e0bff915 	stw	r2,-28(fp)
    temp_color = (unsigned int)IORD_16DIRECT(addr, 0);
    3b24:	e0bff917 	ldw	r2,-28(fp)
    3b28:	1080002b 	ldhuio	r2,0(r2)
    3b2c:	e0bffa15 	stw	r2,-24(fp)
    *blue = (unsigned char)(temp_color & 0x1F); 
    3b30:	e0bffa17 	ldw	r2,-24(fp)
    3b34:	108007cc 	andi	r2,r2,31
    3b38:	1007883a 	mov	r3,r2
    3b3c:	e0800317 	ldw	r2,12(fp)
    3b40:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 5) & 0x3F);
    3b44:	e0bffa17 	ldw	r2,-24(fp)
    3b48:	1004d17a 	srli	r2,r2,5
    3b4c:	10800fcc 	andi	r2,r2,63
    3b50:	1007883a 	mov	r3,r2
    3b54:	e0bfff17 	ldw	r2,-4(fp)
    3b58:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 11) & 0x1F);
    3b5c:	e0bffa17 	ldw	r2,-24(fp)
    3b60:	1004d2fa 	srli	r2,r2,11
    3b64:	108007cc 	andi	r2,r2,31
    3b68:	1007883a 	mov	r3,r2
    3b6c:	e0bffe17 	ldw	r2,-8(fp)
    3b70:	10c00005 	stb	r3,0(r2)
    return_value = 1;
    3b74:	00800044 	movi	r2,1
    3b78:	e0bffb15 	stw	r2,-20(fp)
    3b7c:	00000706 	br	3b9c <read_from_frame+0x214>
  }
  else
  {
    *blue = 0;
    3b80:	e0800317 	ldw	r2,12(fp)
    3b84:	10000005 	stb	zero,0(r2)
    *red = 0;
    3b88:	e0bffe17 	ldw	r2,-8(fp)
    3b8c:	10000005 	stb	zero,0(r2)
    *green = 0;
    3b90:	e0bfff17 	ldw	r2,-4(fp)
    3b94:	10000005 	stb	zero,0(r2)
    return_value = 0; 
    3b98:	e03ffb15 	stw	zero,-20(fp)
  }

  return return_value;
    3b9c:	e0bffb17 	ldw	r2,-20(fp)
}
    3ba0:	e037883a 	mov	sp,fp
    3ba4:	dfc00217 	ldw	ra,8(sp)
    3ba8:	df000117 	ldw	fp,4(sp)
    3bac:	dc000017 	ldw	r16,0(sp)
    3bb0:	dec00304 	addi	sp,sp,12
    3bb4:	f800283a 	ret

00003bb8 <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
    3bb8:	deffec04 	addi	sp,sp,-80
    3bbc:	dfc01315 	stw	ra,76(sp)
    3bc0:	df001215 	stw	fp,72(sp)
    3bc4:	dc001115 	stw	r16,68(sp)
    3bc8:	df001104 	addi	fp,sp,68
    3bcc:	e13ff615 	stw	r4,-40(fp)
    3bd0:	e17ff715 	stw	r5,-36(fp)
    3bd4:	e1bff815 	stw	r6,-32(fp)
    3bd8:	e1fff905 	stb	r7,-28(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
    3bdc:	e0bff817 	ldw	r2,-32(fp)
    3be0:	10bfffd8 	cmpnei	r2,r2,-1
    3be4:	10000a1e 	bne	r2,zero,3c10 <alpha_blending+0x58>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
    3be8:	e1bff504 	addi	r6,fp,-44
    3bec:	e1fff544 	addi	r7,fp,-43
    3bf0:	e0bff584 	addi	r2,fp,-42
    3bf4:	d8800015 	stw	r2,0(sp)
    3bf8:	e0800617 	ldw	r2,24(fp)
    3bfc:	d8800115 	stw	r2,4(sp)
    3c00:	e13ff617 	ldw	r4,-40(fp)
    3c04:	e17ff717 	ldw	r5,-36(fp)
    3c08:	00039880 	call	3988 <read_from_frame>
    3c0c:	00000806 	br	3c30 <alpha_blending+0x78>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
    3c10:	e0800617 	ldw	r2,24(fp)
    3c14:	11000417 	ldw	r4,16(r2)
    3c18:	e17ff804 	addi	r5,fp,-32
    3c1c:	e1bff504 	addi	r6,fp,-44
    3c20:	e1fff544 	addi	r7,fp,-43
    3c24:	e0bff584 	addi	r2,fp,-42
    3c28:	d8800015 	stw	r2,0(sp)
    3c2c:	00036dc0 	call	36dc <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
    3c30:	e0800317 	ldw	r2,12(fp)
    3c34:	10800003 	ldbu	r2,0(r2)
    3c38:	11003fcc 	andi	r4,r2,255
    3c3c:	e17ff903 	ldbu	r5,-28(fp)
    3c40:	000a0540 	call	a054 <__mulsi3>
    3c44:	1021883a 	mov	r16,r2
    3c48:	e0bff503 	ldbu	r2,-44(fp)
    3c4c:	11003fcc 	andi	r4,r2,255
    3c50:	e0fff903 	ldbu	r3,-28(fp)
    3c54:	00803fc4 	movi	r2,255
    3c58:	10cbc83a 	sub	r5,r2,r3
    3c5c:	000a0540 	call	a054 <__mulsi3>
    3c60:	8089883a 	add	r4,r16,r2
    3c64:	01403fc4 	movi	r5,255
    3c68:	0009f840 	call	9f84 <__divsi3>
    3c6c:	e0bff315 	stw	r2,-52(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
    3c70:	e0800417 	ldw	r2,16(fp)
    3c74:	10800003 	ldbu	r2,0(r2)
    3c78:	11003fcc 	andi	r4,r2,255
    3c7c:	e17ff903 	ldbu	r5,-28(fp)
    3c80:	000a0540 	call	a054 <__mulsi3>
    3c84:	1021883a 	mov	r16,r2
    3c88:	e0bff543 	ldbu	r2,-43(fp)
    3c8c:	11003fcc 	andi	r4,r2,255
    3c90:	e0fff903 	ldbu	r3,-28(fp)
    3c94:	00803fc4 	movi	r2,255
    3c98:	10cbc83a 	sub	r5,r2,r3
    3c9c:	000a0540 	call	a054 <__mulsi3>
    3ca0:	8089883a 	add	r4,r16,r2
    3ca4:	01403fc4 	movi	r5,255
    3ca8:	0009f840 	call	9f84 <__divsi3>
    3cac:	e0bff215 	stw	r2,-56(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
    3cb0:	e0800517 	ldw	r2,20(fp)
    3cb4:	10800003 	ldbu	r2,0(r2)
    3cb8:	11003fcc 	andi	r4,r2,255
    3cbc:	e17ff903 	ldbu	r5,-28(fp)
    3cc0:	000a0540 	call	a054 <__mulsi3>
    3cc4:	1021883a 	mov	r16,r2
    3cc8:	e0bff583 	ldbu	r2,-42(fp)
    3ccc:	11003fcc 	andi	r4,r2,255
    3cd0:	e0fff903 	ldbu	r3,-28(fp)
    3cd4:	00803fc4 	movi	r2,255
    3cd8:	10cbc83a 	sub	r5,r2,r3
    3cdc:	000a0540 	call	a054 <__mulsi3>
    3ce0:	8089883a 	add	r4,r16,r2
    3ce4:	01403fc4 	movi	r5,255
    3ce8:	0009f840 	call	9f84 <__divsi3>
    3cec:	e0bff115 	stw	r2,-60(fp)
  

  if(display->color_depth == 16)
    3cf0:	e0800617 	ldw	r2,24(fp)
    3cf4:	10800417 	ldw	r2,16(r2)
    3cf8:	10800418 	cmpnei	r2,r2,16
    3cfc:	1000241e 	bne	r2,zero,3d90 <alpha_blending+0x1d8>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
    3d00:	e0bff317 	ldw	r2,-52(fp)
    3d04:	e0bfff15 	stw	r2,-4(fp)
    3d08:	e0ffff17 	ldw	r3,-4(fp)
    3d0c:	18800830 	cmpltui	r2,r3,32
    3d10:	1000021e 	bne	r2,zero,3d1c <alpha_blending+0x164>
    3d14:	008007c4 	movi	r2,31
    3d18:	e0bfff15 	stw	r2,-4(fp)
    3d1c:	e0ffff17 	ldw	r3,-4(fp)
    3d20:	1805883a 	mov	r2,r3
    3d24:	e0c00317 	ldw	r3,12(fp)
    3d28:	18800005 	stb	r2,0(r3)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
    3d2c:	e0bff217 	ldw	r2,-56(fp)
    3d30:	e0bffe15 	stw	r2,-8(fp)
    3d34:	e0fffe17 	ldw	r3,-8(fp)
    3d38:	18801030 	cmpltui	r2,r3,64
    3d3c:	1000021e 	bne	r2,zero,3d48 <alpha_blending+0x190>
    3d40:	00800fc4 	movi	r2,63
    3d44:	e0bffe15 	stw	r2,-8(fp)
    3d48:	e0fffe17 	ldw	r3,-8(fp)
    3d4c:	1805883a 	mov	r2,r3
    3d50:	e0c00417 	ldw	r3,16(fp)
    3d54:	18800005 	stb	r2,0(r3)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
    3d58:	e0bff117 	ldw	r2,-60(fp)
    3d5c:	e0bffd15 	stw	r2,-12(fp)
    3d60:	e0fffd17 	ldw	r3,-12(fp)
    3d64:	18800830 	cmpltui	r2,r3,32
    3d68:	1000021e 	bne	r2,zero,3d74 <alpha_blending+0x1bc>
    3d6c:	008007c4 	movi	r2,31
    3d70:	e0bffd15 	stw	r2,-12(fp)
    3d74:	e0fffd17 	ldw	r3,-12(fp)
    3d78:	1805883a 	mov	r2,r3
    3d7c:	e0c00517 	ldw	r3,20(fp)
    3d80:	18800005 	stb	r2,0(r3)
    return_value = 1;        
    3d84:	00800044 	movi	r2,1
    3d88:	e0bff415 	stw	r2,-48(fp)
    3d8c:	00002d06 	br	3e44 <alpha_blending+0x28c>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
    3d90:	e0800617 	ldw	r2,24(fp)
    3d94:	10800417 	ldw	r2,16(r2)
    3d98:	10800620 	cmpeqi	r2,r2,24
    3d9c:	1000041e 	bne	r2,zero,3db0 <alpha_blending+0x1f8>
    3da0:	e0800617 	ldw	r2,24(fp)
    3da4:	10800417 	ldw	r2,16(r2)
    3da8:	10800818 	cmpnei	r2,r2,32
    3dac:	1000241e 	bne	r2,zero,3e40 <alpha_blending+0x288>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
    3db0:	e0bff317 	ldw	r2,-52(fp)
    3db4:	e0bffc15 	stw	r2,-16(fp)
    3db8:	e0fffc17 	ldw	r3,-16(fp)
    3dbc:	18804030 	cmpltui	r2,r3,256
    3dc0:	1000021e 	bne	r2,zero,3dcc <alpha_blending+0x214>
    3dc4:	00803fc4 	movi	r2,255
    3dc8:	e0bffc15 	stw	r2,-16(fp)
    3dcc:	e0fffc17 	ldw	r3,-16(fp)
    3dd0:	1805883a 	mov	r2,r3
    3dd4:	e0c00317 	ldw	r3,12(fp)
    3dd8:	18800005 	stb	r2,0(r3)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
    3ddc:	e0bff217 	ldw	r2,-56(fp)
    3de0:	e0bffb15 	stw	r2,-20(fp)
    3de4:	e0fffb17 	ldw	r3,-20(fp)
    3de8:	18804030 	cmpltui	r2,r3,256
    3dec:	1000021e 	bne	r2,zero,3df8 <alpha_blending+0x240>
    3df0:	00803fc4 	movi	r2,255
    3df4:	e0bffb15 	stw	r2,-20(fp)
    3df8:	e0fffb17 	ldw	r3,-20(fp)
    3dfc:	1805883a 	mov	r2,r3
    3e00:	e0c00417 	ldw	r3,16(fp)
    3e04:	18800005 	stb	r2,0(r3)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
    3e08:	e0bff117 	ldw	r2,-60(fp)
    3e0c:	e0bffa15 	stw	r2,-24(fp)
    3e10:	e0fffa17 	ldw	r3,-24(fp)
    3e14:	18804030 	cmpltui	r2,r3,256
    3e18:	1000021e 	bne	r2,zero,3e24 <alpha_blending+0x26c>
    3e1c:	00803fc4 	movi	r2,255
    3e20:	e0bffa15 	stw	r2,-24(fp)
    3e24:	e0fffa17 	ldw	r3,-24(fp)
    3e28:	1805883a 	mov	r2,r3
    3e2c:	e0c00517 	ldw	r3,20(fp)
    3e30:	18800005 	stb	r2,0(r3)
    return_value = 1;            
    3e34:	00800044 	movi	r2,1
    3e38:	e0bff415 	stw	r2,-48(fp)
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
    return_value = 1;        
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
    3e3c:	00000106 	br	3e44 <alpha_blending+0x28c>
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
    return_value = 1;            
  }
  else
  {
    return_value = 0;     
    3e40:	e03ff415 	stw	zero,-48(fp)
  }  
 
  return return_value;
    3e44:	e0bff417 	ldw	r2,-48(fp)
} 
    3e48:	e037883a 	mov	sp,fp
    3e4c:	dfc00217 	ldw	ra,8(sp)
    3e50:	df000117 	ldw	fp,4(sp)
    3e54:	dc000017 	ldw	r16,0(sp)
    3e58:	dec00304 	addi	sp,sp,12
    3e5c:	f800283a 	ret

00003e60 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
    3e60:	defff004 	addi	sp,sp,-64
    3e64:	dfc00f15 	stw	ra,60(sp)
    3e68:	df000e15 	stw	fp,56(sp)
    3e6c:	df000e04 	addi	fp,sp,56
    3e70:	e13ffc15 	stw	r4,-16(fp)
    3e74:	e17ffd15 	stw	r5,-12(fp)
    3e78:	e1bffe15 	stw	r6,-8(fp)
    3e7c:	e1ffff05 	stb	r7,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
    3e80:	e0bfff07 	ldb	r2,-4(fp)
    3e84:	1004917a 	slli	r2,r2,5
    3e88:	1007883a 	mov	r3,r2
    3e8c:	e0800317 	ldw	r2,12(fp)
    3e90:	1885883a 	add	r2,r3,r2
    3e94:	10bef804 	addi	r2,r2,-1056
    3e98:	10800617 	ldw	r2,24(r2)
    3e9c:	e0bff615 	stw	r2,-40(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
    3ea0:	e0800417 	ldw	r2,16(fp)
    3ea4:	11000417 	ldw	r4,16(r2)
    3ea8:	e17ffe04 	addi	r5,fp,-8
    3eac:	e1bff904 	addi	r6,fp,-28
    3eb0:	e1fff984 	addi	r7,fp,-26
    3eb4:	e0bff944 	addi	r2,fp,-27
    3eb8:	d8800015 	stw	r2,0(sp)
    3ebc:	00036dc0 	call	36dc <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
    3ec0:	e03ff815 	stw	zero,-32(fp)
    3ec4:	00004206 	br	3fd0 <vid_print_char_alpha+0x170>
    for (j = 0; j < font[character-33].bounds_width; j++) {
    3ec8:	e03ff715 	stw	zero,-36(fp)
    3ecc:	00003406 	br	3fa0 <vid_print_char_alpha+0x140>
      red = original_red;
    3ed0:	e0bff903 	ldbu	r2,-28(fp)
    3ed4:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
    3ed8:	e0bff983 	ldbu	r2,-26(fp)
    3edc:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
    3ee0:	e0bff943 	ldbu	r2,-27(fp)
    3ee4:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
    3ee8:	e0fffc17 	ldw	r3,-16(fp)
    3eec:	e0bff717 	ldw	r2,-36(fp)
    3ef0:	1889883a 	add	r4,r3,r2
    3ef4:	e0fffd17 	ldw	r3,-12(fp)
    3ef8:	e0bff817 	ldw	r2,-32(fp)
    3efc:	188b883a 	add	r5,r3,r2
    3f00:	e0bff617 	ldw	r2,-40(fp)
    3f04:	10800003 	ldbu	r2,0(r2)
    3f08:	11c03fcc 	andi	r7,r2,255
    3f0c:	e0bff9c4 	addi	r2,fp,-25
    3f10:	d8800015 	stw	r2,0(sp)
    3f14:	e0bffa04 	addi	r2,fp,-24
    3f18:	d8800115 	stw	r2,4(sp)
    3f1c:	e0bffa44 	addi	r2,fp,-23
    3f20:	d8800215 	stw	r2,8(sp)
    3f24:	e0800417 	ldw	r2,16(fp)
    3f28:	d8800315 	stw	r2,12(sp)
    3f2c:	e1800217 	ldw	r6,8(fp)
    3f30:	0003bb80 	call	3bb8 <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
    3f34:	e0800417 	ldw	r2,16(fp)
    3f38:	11000417 	ldw	r4,16(r2)
    3f3c:	e0bff9c3 	ldbu	r2,-25(fp)
    3f40:	11403fcc 	andi	r5,r2,255
    3f44:	e0bffa03 	ldbu	r2,-24(fp)
    3f48:	11803fcc 	andi	r6,r2,255
    3f4c:	e0bffa43 	ldbu	r2,-23(fp)
    3f50:	11c03fcc 	andi	r7,r2,255
    3f54:	e0bffb04 	addi	r2,fp,-20
    3f58:	d8800015 	stw	r2,0(sp)
    3f5c:	00038300 	call	3830 <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
    3f60:	e0fffc17 	ldw	r3,-16(fp)
    3f64:	e0bff717 	ldw	r2,-36(fp)
    3f68:	1889883a 	add	r4,r3,r2
    3f6c:	e0fffd17 	ldw	r3,-12(fp)
    3f70:	e0bff817 	ldw	r2,-32(fp)
    3f74:	188b883a 	add	r5,r3,r2
    3f78:	e0bffb17 	ldw	r2,-20(fp)
    3f7c:	100d883a 	mov	r6,r2
    3f80:	e1c00417 	ldw	r7,16(fp)
    3f84:	00010b80 	call	10b8 <vid_set_pixel>

      alpha++;
    3f88:	e0bff617 	ldw	r2,-40(fp)
    3f8c:	10800044 	addi	r2,r2,1
    3f90:	e0bff615 	stw	r2,-40(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
    3f94:	e0bff717 	ldw	r2,-36(fp)
    3f98:	10800044 	addi	r2,r2,1
    3f9c:	e0bff715 	stw	r2,-36(fp)
    3fa0:	e13ff717 	ldw	r4,-36(fp)
    3fa4:	e0bfff07 	ldb	r2,-4(fp)
    3fa8:	1004917a 	slli	r2,r2,5
    3fac:	1007883a 	mov	r3,r2
    3fb0:	e0800317 	ldw	r2,12(fp)
    3fb4:	1885883a 	add	r2,r3,r2
    3fb8:	10bef804 	addi	r2,r2,-1056
    3fbc:	10800417 	ldw	r2,16(r2)
    3fc0:	20bfc336 	bltu	r4,r2,3ed0 <vid_print_char_alpha+0x70>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    3fc4:	e0bff817 	ldw	r2,-32(fp)
    3fc8:	10800044 	addi	r2,r2,1
    3fcc:	e0bff815 	stw	r2,-32(fp)
    3fd0:	e13ff817 	ldw	r4,-32(fp)
    3fd4:	e0bfff07 	ldb	r2,-4(fp)
    3fd8:	1004917a 	slli	r2,r2,5
    3fdc:	1007883a 	mov	r3,r2
    3fe0:	e0800317 	ldw	r2,12(fp)
    3fe4:	1885883a 	add	r2,r3,r2
    3fe8:	10bef804 	addi	r2,r2,-1056
    3fec:	10800517 	ldw	r2,20(r2)
    3ff0:	20bfb536 	bltu	r4,r2,3ec8 <vid_print_char_alpha+0x68>

      alpha++;
    }
  }

  return(0);
    3ff4:	0005883a 	mov	r2,zero
}
    3ff8:	e037883a 	mov	sp,fp
    3ffc:	dfc00117 	ldw	ra,4(sp)
    4000:	df000017 	ldw	fp,0(sp)
    4004:	dec00204 	addi	sp,sp,8
    4008:	f800283a 	ret

0000400c <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
    400c:	defffb04 	addi	sp,sp,-20
    4010:	df000415 	stw	fp,16(sp)
    4014:	df000404 	addi	fp,sp,16
    4018:	e13ffe15 	stw	r4,-8(fp)
    401c:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
    4020:	e03ffd15 	stw	zero,-12(fp)
  int length = 0;
    4024:	e03ffc15 	stw	zero,-16(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
    4028:	e03ffd15 	stw	zero,-12(fp)
    402c:	00002506 	br	40c4 <vid_string_pixel_length_alpha+0xb8>
  {
    if( string[i] == ' ' )
    4030:	e0bffd17 	ldw	r2,-12(fp)
    4034:	1007883a 	mov	r3,r2
    4038:	e0bfff17 	ldw	r2,-4(fp)
    403c:	1885883a 	add	r2,r3,r2
    4040:	10800003 	ldbu	r2,0(r2)
    4044:	10803fcc 	andi	r2,r2,255
    4048:	1080201c 	xori	r2,r2,128
    404c:	10bfe004 	addi	r2,r2,-128
    4050:	10800818 	cmpnei	r2,r2,32
    4054:	1000071e 	bne	r2,zero,4074 <vid_string_pixel_length_alpha+0x68>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
    4058:	e0bffe17 	ldw	r2,-8(fp)
    405c:	10806004 	addi	r2,r2,384
    4060:	10c00417 	ldw	r3,16(r2)
    4064:	e0bffc17 	ldw	r2,-16(fp)
    4068:	1885883a 	add	r2,r3,r2
    406c:	e0bffc15 	stw	r2,-16(fp)
    4070:	00001106 	br	40b8 <vid_string_pixel_length_alpha+0xac>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
    4074:	e0bffd17 	ldw	r2,-12(fp)
    4078:	1007883a 	mov	r3,r2
    407c:	e0bfff17 	ldw	r2,-4(fp)
    4080:	1885883a 	add	r2,r3,r2
    4084:	10800003 	ldbu	r2,0(r2)
    4088:	10803fcc 	andi	r2,r2,255
    408c:	1080201c 	xori	r2,r2,128
    4090:	10bfe004 	addi	r2,r2,-128
    4094:	1004917a 	slli	r2,r2,5
    4098:	1007883a 	mov	r3,r2
    409c:	e0bffe17 	ldw	r2,-8(fp)
    40a0:	1885883a 	add	r2,r3,r2
    40a4:	10bef804 	addi	r2,r2,-1056
    40a8:	10c00417 	ldw	r3,16(r2)
    40ac:	e0bffc17 	ldw	r2,-16(fp)
    40b0:	1885883a 	add	r2,r3,r2
    40b4:	e0bffc15 	stw	r2,-16(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
    40b8:	e0bffd17 	ldw	r2,-12(fp)
    40bc:	10800044 	addi	r2,r2,1
    40c0:	e0bffd15 	stw	r2,-12(fp)
    40c4:	e0bffd17 	ldw	r2,-12(fp)
    40c8:	1007883a 	mov	r3,r2
    40cc:	e0bfff17 	ldw	r2,-4(fp)
    40d0:	1885883a 	add	r2,r3,r2
    40d4:	10800003 	ldbu	r2,0(r2)
    40d8:	10803fcc 	andi	r2,r2,255
    40dc:	1080201c 	xori	r2,r2,128
    40e0:	10bfe004 	addi	r2,r2,-128
    40e4:	1004c03a 	cmpne	r2,r2,zero
    40e8:	103fd11e 	bne	r2,zero,4030 <vid_string_pixel_length_alpha+0x24>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
    40ec:	e0bffc17 	ldw	r2,-16(fp)
}
    40f0:	e037883a 	mov	sp,fp
    40f4:	df000017 	ldw	fp,0(sp)
    40f8:	dec00104 	addi	sp,sp,4
    40fc:	f800283a 	ret

00004100 <GUI_DeskInit>:
    int Paint4_Index;
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;

void GUI_DeskInit(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
    4100:	deffee04 	addi	sp,sp,-72
    4104:	dfc01115 	stw	ra,68(sp)
    4108:	df001015 	stw	fp,64(sp)
    410c:	dc400f15 	stw	r17,60(sp)
    4110:	dc000e15 	stw	r16,56(sp)
    4114:	df000e04 	addi	fp,sp,56
    4118:	e13ffe15 	stw	r4,-8(fp)
    411c:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 70;
    4120:	00801184 	movi	r2,70
    4124:	e0bff815 	stw	r2,-32(fp)
    const int BoxW = 70;
    4128:	00801184 	movi	r2,70
    412c:	e0bff715 	stw	r2,-36(fp)
    const int GapH = 10;
    4130:	00800284 	movi	r2,10
    4134:	e0bff615 	stw	r2,-40(fp)
    const int DrawBorder = 2;
    4138:	00800084 	movi	r2,2
    413c:	e0bff515 	stw	r2,-44(fp)
    const int TextW = 120;
    4140:	00801e04 	movi	r2,120
    4144:	e0bff415 	stw	r2,-48(fp)
    int GapW;

    
    GapW = (pReader->width - TextW - (BTN_NUM*BoxW))/(BTN_NUM+1);
    4148:	e0bffe17 	ldw	r2,-8(fp)
    414c:	10c00517 	ldw	r3,20(r2)
    4150:	e0bff417 	ldw	r2,-48(fp)
    4154:	18a1c83a 	sub	r16,r3,r2
    4158:	e13ff717 	ldw	r4,-36(fp)
    415c:	01400244 	movi	r5,9
    4160:	000a0540 	call	a054 <__mulsi3>
    4164:	8089c83a 	sub	r4,r16,r2
    4168:	01400284 	movi	r5,10
    416c:	0009f840 	call	9f84 <__divsi3>
    4170:	e0bff315 	stw	r2,-52(fp)
    rc.top = pReader->height - BoxH - GapH;
    4174:	e0bffe17 	ldw	r2,-8(fp)
    4178:	10c00617 	ldw	r3,24(r2)
    417c:	e0bff817 	ldw	r2,-32(fp)
    4180:	1887c83a 	sub	r3,r3,r2
    4184:	e0bff617 	ldw	r2,-40(fp)
    4188:	1885c83a 	sub	r2,r3,r2
    418c:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
    4190:	e0fffc17 	ldw	r3,-16(fp)
    4194:	e0bff817 	ldw	r2,-32(fp)
    4198:	1885883a 	add	r2,r3,r2
    419c:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW;
    41a0:	e0fff317 	ldw	r3,-52(fp)
    41a4:	e0bff417 	ldw	r2,-48(fp)
    41a8:	1885883a 	add	r2,r3,r2
    41ac:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
    41b0:	e0fffa17 	ldw	r3,-24(fp)
    41b4:	e0bff717 	ldw	r2,-36(fp)
    41b8:	1885883a 	add	r2,r3,r2
    41bc:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pReader->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    41c0:	e0bfff17 	ldw	r2,-4(fp)
    41c4:	11000504 	addi	r4,r2,20
    41c8:	e0bffe17 	ldw	r2,-8(fp)
    41cc:	10c00517 	ldw	r3,20(r2)
    41d0:	e0bff517 	ldw	r2,-44(fp)
    41d4:	188dc83a 	sub	r6,r3,r2
    41d8:	e0fffc17 	ldw	r3,-16(fp)
    41dc:	e0bff517 	ldw	r2,-44(fp)
    41e0:	1885c83a 	sub	r2,r3,r2
    41e4:	d8800015 	stw	r2,0(sp)
    41e8:	e17ff517 	ldw	r5,-44(fp)
    41ec:	e1fff517 	ldw	r7,-44(fp)
    41f0:	00002c40 	call	2c4 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
    41f4:	e03ff915 	stw	zero,-28(fp)
    41f8:	00002006 	br	427c <GUI_DeskInit+0x17c>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
    41fc:	e13ff917 	ldw	r4,-28(fp)
    4200:	01400504 	movi	r5,20
    4204:	000a0540 	call	a054 <__mulsi3>
    4208:	10c00904 	addi	r3,r2,36
    420c:	e0bfff17 	ldw	r2,-4(fp)
    4210:	1889883a 	add	r4,r3,r2
    4214:	e17ffa04 	addi	r5,fp,-24
    4218:	00004300 	call	430 <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
    421c:	e13ff917 	ldw	r4,-28(fp)
    4220:	e0bff917 	ldw	r2,-28(fp)
    4224:	00c001f4 	movhi	r3,7
    4228:	18d9e604 	addi	r3,r3,26520
    422c:	1085883a 	add	r2,r2,r2
    4230:	1085883a 	add	r2,r2,r2
    4234:	10c5883a 	add	r2,r2,r3
    4238:	10800017 	ldw	r2,0(r2)
    423c:	1023883a 	mov	r17,r2
    4240:	e43fff17 	ldw	r16,-4(fp)
    4244:	01400504 	movi	r5,20
    4248:	000a0540 	call	a054 <__mulsi3>
    424c:	1405883a 	add	r2,r2,r16
    4250:	10800d04 	addi	r2,r2,52
    4254:	14400015 	stw	r17,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
    4258:	e0fff717 	ldw	r3,-36(fp)
    425c:	e0bff317 	ldw	r2,-52(fp)
    4260:	188b883a 	add	r5,r3,r2
    4264:	e13ffa04 	addi	r4,fp,-24
    4268:	000d883a 	mov	r6,zero
    426c:	00003a80 	call	3a8 <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pReader->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
    4270:	e0bff917 	ldw	r2,-28(fp)
    4274:	10800044 	addi	r2,r2,1
    4278:	e0bff915 	stw	r2,-28(fp)
    427c:	e0bff917 	ldw	r2,-28(fp)
    4280:	10800250 	cmplti	r2,r2,9
    4284:	103fdd1e 	bne	r2,zero,41fc <GUI_DeskInit+0xfc>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->Paint0_Index = BTN_BLUE;
    4288:	e0ffff17 	ldw	r3,-4(fp)
    428c:	008000c4 	movi	r2,3
    4290:	18800015 	stw	r2,0(r3)
    pDeskInfo->Paint1_Index = BTN_GREEN;
    4294:	e0ffff17 	ldw	r3,-4(fp)
    4298:	00800104 	movi	r2,4
    429c:	18800115 	stw	r2,4(r3)
    //add by matthew for mtl2
    pDeskInfo->Paint2_Index = BTN_RED;
    42a0:	e0ffff17 	ldw	r3,-4(fp)
    42a4:	00800144 	movi	r2,5
    42a8:	18800215 	stw	r2,8(r3)
    pDeskInfo->Paint3_Index = BTN_SKY;
    42ac:	e0ffff17 	ldw	r3,-4(fp)
    42b0:	00800184 	movi	r2,6
    42b4:	18800315 	stw	r2,12(r3)
    pDeskInfo->Paint4_Index = BTN_YELLOW;
    42b8:	e0ffff17 	ldw	r3,-4(fp)
    42bc:	008001c4 	movi	r2,7
    42c0:	18800415 	stw	r2,16(r3)
}
    42c4:	e037883a 	mov	sp,fp
    42c8:	dfc00317 	ldw	ra,12(sp)
    42cc:	df000217 	ldw	fp,8(sp)
    42d0:	dc400117 	ldw	r17,4(sp)
    42d4:	dc000017 	ldw	r16,0(sp)
    42d8:	dec00404 	addi	sp,sp,16
    42dc:	f800283a 	ret

000042e0 <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    42e0:	defffa04 	addi	sp,sp,-24
    42e4:	dfc00515 	stw	ra,20(sp)
    42e8:	df000415 	stw	fp,16(sp)
    42ec:	df000404 	addi	fp,sp,16
    42f0:	e13ffe15 	stw	r4,-8(fp)
    42f4:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
    42f8:	00800284 	movi	r2,10
    42fc:	e0bffd15 	stw	r2,-12(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
    4300:	e03ffc15 	stw	zero,-16(fp)
    4304:	00000f06 	br	4344 <GUI_CheckButton+0x64>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
    4308:	e13ffc17 	ldw	r4,-16(fp)
    430c:	01400504 	movi	r5,20
    4310:	000a0540 	call	a054 <__mulsi3>
    4314:	10c00904 	addi	r3,r2,36
    4318:	e0bffe17 	ldw	r2,-8(fp)
    431c:	188b883a 	add	r5,r3,r2
    4320:	e13fff17 	ldw	r4,-4(fp)
    4324:	00002000 	call	200 <IsPtInRect>
    4328:	1005003a 	cmpeq	r2,r2,zero
    432c:	1000021e 	bne	r2,zero,4338 <GUI_CheckButton+0x58>
            ButtonId = i;
    4330:	e0bffc17 	ldw	r2,-16(fp)
    4334:	e0bffd15 	stw	r2,-12(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
    4338:	e0bffc17 	ldw	r2,-16(fp)
    433c:	10800044 	addi	r2,r2,1
    4340:	e0bffc15 	stw	r2,-16(fp)
    4344:	e0bffc17 	ldw	r2,-16(fp)
    4348:	10800248 	cmpgei	r2,r2,9
    434c:	1000031e 	bne	r2,zero,435c <GUI_CheckButton+0x7c>
    4350:	e0bffd17 	ldw	r2,-12(fp)
    4354:	108002a0 	cmpeqi	r2,r2,10
    4358:	103feb1e 	bne	r2,zero,4308 <GUI_CheckButton+0x28>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
    435c:	e0bffd17 	ldw	r2,-12(fp)
}
    4360:	e037883a 	mov	sp,fp
    4364:	dfc00117 	ldw	ra,4(sp)
    4368:	df000017 	ldw	fp,0(sp)
    436c:	dec00204 	addi	sp,sp,8
    4370:	f800283a 	ret

00004374 <GUI_DeskDraw>:

void GUI_DeskDraw(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
    4374:	deffee04 	addi	sp,sp,-72
    4378:	dfc01115 	stw	ra,68(sp)
    437c:	df001015 	stw	fp,64(sp)
    4380:	dd000f15 	stw	r20,60(sp)
    4384:	dcc00e15 	stw	r19,56(sp)
    4388:	dc800d15 	stw	r18,52(sp)
    438c:	dc400c15 	stw	r17,48(sp)
    4390:	dc000b15 	stw	r16,44(sp)
    4394:	df000b04 	addi	fp,sp,44
    4398:	e13ffe15 	stw	r4,-8(fp)
    439c:	e17fff15 	stw	r5,-4(fp)
    int i, active;
    RECT rc;
    
    
    // show text
    vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pReader, "Terasic");
    43a0:	e0bfff17 	ldw	r2,-4(fp)
    43a4:	11000517 	ldw	r4,20(r2)
    43a8:	e0bfff17 	ldw	r2,-4(fp)
    43ac:	11400b17 	ldw	r5,44(r2)
    43b0:	008001f4 	movhi	r2,7
    43b4:	10930004 	addi	r2,r2,19456
    43b8:	d8800015 	stw	r2,0(sp)
    43bc:	e0bffe17 	ldw	r2,-8(fp)
    43c0:	d8800115 	stw	r2,4(sp)
    43c4:	008001f4 	movhi	r2,7
    43c8:	10911304 	addi	r2,r2,17484
    43cc:	d8800215 	stw	r2,8(sp)
    43d0:	01803fc4 	movi	r6,255
    43d4:	000f883a 	mov	r7,zero
    43d8:	00034640 	call	3464 <vid_print_string_alpha>
    vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pReader, "Multi-Touch");
    43dc:	e0bfff17 	ldw	r2,-4(fp)
    43e0:	11000517 	ldw	r4,20(r2)
    43e4:	e0bfff17 	ldw	r2,-4(fp)
    43e8:	10800b17 	ldw	r2,44(r2)
    43ec:	11400584 	addi	r5,r2,22
    43f0:	008001f4 	movhi	r2,7
    43f4:	10930004 	addi	r2,r2,19456
    43f8:	d8800015 	stw	r2,0(sp)
    43fc:	e0bffe17 	ldw	r2,-8(fp)
    4400:	d8800115 	stw	r2,4(sp)
    4404:	008001f4 	movhi	r2,7
    4408:	10911504 	addi	r2,r2,17492
    440c:	d8800215 	stw	r2,8(sp)
    4410:	01803fc4 	movi	r6,255
    4414:	000f883a 	mov	r7,zero
    4418:	00034640 	call	3464 <vid_print_string_alpha>

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
    441c:	e0bfff17 	ldw	r2,-4(fp)
    4420:	11400504 	addi	r5,r2,20
    4424:	e13ffa04 	addi	r4,fp,-24
    4428:	00004300 	call	430 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pReader);
    442c:	e13ffa17 	ldw	r4,-24(fp)
    4430:	e17ffc17 	ldw	r5,-16(fp)
    4434:	e1bffb17 	ldw	r6,-20(fp)
    4438:	e1fffd17 	ldw	r7,-12(fp)
    443c:	00804034 	movhi	r2,256
    4440:	10bfffc4 	addi	r2,r2,-1
    4444:	d8800015 	stw	r2,0(sp)
    4448:	d8000115 	stw	zero,4(sp)
    444c:	e0bffe17 	ldw	r2,-8(fp)
    4450:	d8800215 	stw	r2,8(sp)
    4454:	0000e900 	call	e90 <vid_draw_box>
    

    // draw palette
    for(i=0;i<BTN_NUM;i++){
    4458:	e03ff915 	stw	zero,-28(fp)
    445c:	00005506 	br	45b4 <GUI_DeskDraw+0x240>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
    4460:	e13ff917 	ldw	r4,-28(fp)
    4464:	01400504 	movi	r5,20
    4468:	000a0540 	call	a054 <__mulsi3>
    446c:	10c00904 	addi	r3,r2,36
    4470:	e0bfff17 	ldw	r2,-4(fp)
    4474:	188b883a 	add	r5,r3,r2
    4478:	e13ffa04 	addi	r4,fp,-24
    447c:	00004300 	call	430 <RectCopy>
        if (i == BTN_CLEAR){
    4480:	e0bff917 	ldw	r2,-28(fp)
    4484:	10800058 	cmpnei	r2,r2,1
    4488:	1000321e 	bne	r2,zero,4554 <GUI_DeskDraw+0x1e0>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pReader);
    448c:	e47ffa17 	ldw	r17,-24(fp)
    4490:	e4bffc17 	ldw	r18,-16(fp)
    4494:	e4fffb17 	ldw	r19,-20(fp)
    4498:	e53ffd17 	ldw	r20,-12(fp)
    449c:	e13ff917 	ldw	r4,-28(fp)
    44a0:	e43fff17 	ldw	r16,-4(fp)
    44a4:	01400504 	movi	r5,20
    44a8:	000a0540 	call	a054 <__mulsi3>
    44ac:	1405883a 	add	r2,r2,r16
    44b0:	10800d04 	addi	r2,r2,52
    44b4:	10800017 	ldw	r2,0(r2)
    44b8:	d8800015 	stw	r2,0(sp)
    44bc:	d8000115 	stw	zero,4(sp)
    44c0:	e0bffe17 	ldw	r2,-8(fp)
    44c4:	d8800215 	stw	r2,8(sp)
    44c8:	8809883a 	mov	r4,r17
    44cc:	900b883a 	mov	r5,r18
    44d0:	980d883a 	mov	r6,r19
    44d4:	a00f883a 	mov	r7,r20
    44d8:	0000e900 	call	e90 <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pReader, "Clear");
    44dc:	e0bffa17 	ldw	r2,-24(fp)
    44e0:	14400204 	addi	r17,r2,8
    44e4:	e43ffc17 	ldw	r16,-16(fp)
    44e8:	e13ffa04 	addi	r4,fp,-24
    44ec:	00004c80 	call	4c8 <RectHeight>
    44f0:	10fffa84 	addi	r3,r2,-22
    44f4:	1804d7fa 	srli	r2,r3,31
    44f8:	10c5883a 	add	r2,r2,r3
    44fc:	1005d07a 	srai	r2,r2,1
    4500:	80a5883a 	add	r18,r16,r2
    4504:	e13ff917 	ldw	r4,-28(fp)
    4508:	e43fff17 	ldw	r16,-4(fp)
    450c:	01400504 	movi	r5,20
    4510:	000a0540 	call	a054 <__mulsi3>
    4514:	1405883a 	add	r2,r2,r16
    4518:	10800d04 	addi	r2,r2,52
    451c:	11800017 	ldw	r6,0(r2)
    4520:	008001f4 	movhi	r2,7
    4524:	10930004 	addi	r2,r2,19456
    4528:	d8800015 	stw	r2,0(sp)
    452c:	e0bffe17 	ldw	r2,-8(fp)
    4530:	d8800115 	stw	r2,4(sp)
    4534:	008001f4 	movhi	r2,7
    4538:	10911804 	addi	r2,r2,17504
    453c:	d8800215 	stw	r2,8(sp)
    4540:	8809883a 	mov	r4,r17
    4544:	900b883a 	mov	r5,r18
    4548:	000f883a 	mov	r7,zero
    454c:	00034640 	call	3464 <vid_print_string_alpha>
    4550:	00001506 	br	45a8 <GUI_DeskDraw+0x234>
        }else{
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pReader);
    4554:	e47ffa17 	ldw	r17,-24(fp)
    4558:	e4bffc17 	ldw	r18,-16(fp)
    455c:	e4fffb17 	ldw	r19,-20(fp)
    4560:	e53ffd17 	ldw	r20,-12(fp)
    4564:	e13ff917 	ldw	r4,-28(fp)
    4568:	e43fff17 	ldw	r16,-4(fp)
    456c:	01400504 	movi	r5,20
    4570:	000a0540 	call	a054 <__mulsi3>
    4574:	1405883a 	add	r2,r2,r16
    4578:	10800d04 	addi	r2,r2,52
    457c:	10800017 	ldw	r2,0(r2)
    4580:	d8800015 	stw	r2,0(sp)
    4584:	00800044 	movi	r2,1
    4588:	d8800115 	stw	r2,4(sp)
    458c:	e0bffe17 	ldw	r2,-8(fp)
    4590:	d8800215 	stw	r2,8(sp)
    4594:	8809883a 	mov	r4,r17
    4598:	900b883a 	mov	r5,r18
    459c:	980d883a 	mov	r6,r19
    45a0:	a00f883a 	mov	r7,r20
    45a4:	0000e900 	call	e90 <vid_draw_box>
    RectCopy(&rc, &pDeskInfo->rcPaint);
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pReader);
    

    // draw palette
    for(i=0;i<BTN_NUM;i++){
    45a8:	e0bff917 	ldw	r2,-28(fp)
    45ac:	10800044 	addi	r2,r2,1
    45b0:	e0bff915 	stw	r2,-28(fp)
    45b4:	e0bff917 	ldw	r2,-28(fp)
    45b8:	10800250 	cmplti	r2,r2,9
    45bc:	103fa81e 	bne	r2,zero,4460 <GUI_DeskDraw+0xec>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pReader);
        }            
    }
  
    // draw activce color
    active = pDeskInfo->Paint0_Index;
    45c0:	e0bfff17 	ldw	r2,-4(fp)
    45c4:	10800017 	ldw	r2,0(r2)
    45c8:	e0bff815 	stw	r2,-32(fp)
    RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    45cc:	e13ff817 	ldw	r4,-32(fp)
    45d0:	01400504 	movi	r5,20
    45d4:	000a0540 	call	a054 <__mulsi3>
    45d8:	10c00904 	addi	r3,r2,36
    45dc:	e0bfff17 	ldw	r2,-4(fp)
    45e0:	188b883a 	add	r5,r3,r2
    45e4:	e13ffa04 	addi	r4,fp,-24
    45e8:	00004300 	call	430 <RectCopy>
    vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "1");
    45ec:	e0bffa17 	ldw	r2,-24(fp)
    45f0:	14400084 	addi	r17,r2,2
    45f4:	e0bffc17 	ldw	r2,-16(fp)
    45f8:	14800084 	addi	r18,r2,2
    45fc:	e13ff817 	ldw	r4,-32(fp)
    4600:	e43fff17 	ldw	r16,-4(fp)
    4604:	01400504 	movi	r5,20
    4608:	000a0540 	call	a054 <__mulsi3>
    460c:	1405883a 	add	r2,r2,r16
    4610:	10800d04 	addi	r2,r2,52
    4614:	11c00017 	ldw	r7,0(r2)
    4618:	008001f4 	movhi	r2,7
    461c:	10930004 	addi	r2,r2,19456
    4620:	d8800015 	stw	r2,0(sp)
    4624:	e0bffe17 	ldw	r2,-8(fp)
    4628:	d8800115 	stw	r2,4(sp)
    462c:	008001f4 	movhi	r2,7
    4630:	10911a04 	addi	r2,r2,17512
    4634:	d8800215 	stw	r2,8(sp)
    4638:	8809883a 	mov	r4,r17
    463c:	900b883a 	mov	r5,r18
    4640:	000d883a 	mov	r6,zero
    4644:	00034640 	call	3464 <vid_print_string_alpha>
        
    active = pDeskInfo->Paint1_Index;
    4648:	e0bfff17 	ldw	r2,-4(fp)
    464c:	10800117 	ldw	r2,4(r2)
    4650:	e0bff815 	stw	r2,-32(fp)
    RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    4654:	e13ff817 	ldw	r4,-32(fp)
    4658:	01400504 	movi	r5,20
    465c:	000a0540 	call	a054 <__mulsi3>
    4660:	10c00904 	addi	r3,r2,36
    4664:	e0bfff17 	ldw	r2,-4(fp)
    4668:	188b883a 	add	r5,r3,r2
    466c:	e13ffa04 	addi	r4,fp,-24
    4670:	00004300 	call	430 <RectCopy>
    vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "2");
    4674:	e0bffa17 	ldw	r2,-24(fp)
    4678:	14400084 	addi	r17,r2,2
    467c:	e0bffc17 	ldw	r2,-16(fp)
    4680:	14800084 	addi	r18,r2,2
    4684:	e13ff817 	ldw	r4,-32(fp)
    4688:	e43fff17 	ldw	r16,-4(fp)
    468c:	01400504 	movi	r5,20
    4690:	000a0540 	call	a054 <__mulsi3>
    4694:	1405883a 	add	r2,r2,r16
    4698:	10800d04 	addi	r2,r2,52
    469c:	11c00017 	ldw	r7,0(r2)
    46a0:	008001f4 	movhi	r2,7
    46a4:	10930004 	addi	r2,r2,19456
    46a8:	d8800015 	stw	r2,0(sp)
    46ac:	e0bffe17 	ldw	r2,-8(fp)
    46b0:	d8800115 	stw	r2,4(sp)
    46b4:	008001f4 	movhi	r2,7
    46b8:	10911b04 	addi	r2,r2,17516
    46bc:	d8800215 	stw	r2,8(sp)
    46c0:	8809883a 	mov	r4,r17
    46c4:	900b883a 	mov	r5,r18
    46c8:	000d883a 	mov	r6,zero
    46cc:	00034640 	call	3464 <vid_print_string_alpha>
    active = pDeskInfo->Paint2_Index;
    46d0:	e0bfff17 	ldw	r2,-4(fp)
    46d4:	10800217 	ldw	r2,8(r2)
    46d8:	e0bff815 	stw	r2,-32(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    46dc:	e13ff817 	ldw	r4,-32(fp)
    46e0:	01400504 	movi	r5,20
    46e4:	000a0540 	call	a054 <__mulsi3>
    46e8:	10c00904 	addi	r3,r2,36
    46ec:	e0bfff17 	ldw	r2,-4(fp)
    46f0:	188b883a 	add	r5,r3,r2
    46f4:	e13ffa04 	addi	r4,fp,-24
    46f8:	00004300 	call	430 <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "3");
    46fc:	e0bffa17 	ldw	r2,-24(fp)
    4700:	14400084 	addi	r17,r2,2
    4704:	e0bffc17 	ldw	r2,-16(fp)
    4708:	14800084 	addi	r18,r2,2
    470c:	e13ff817 	ldw	r4,-32(fp)
    4710:	e43fff17 	ldw	r16,-4(fp)
    4714:	01400504 	movi	r5,20
    4718:	000a0540 	call	a054 <__mulsi3>
    471c:	1405883a 	add	r2,r2,r16
    4720:	10800d04 	addi	r2,r2,52
    4724:	11c00017 	ldw	r7,0(r2)
    4728:	008001f4 	movhi	r2,7
    472c:	10930004 	addi	r2,r2,19456
    4730:	d8800015 	stw	r2,0(sp)
    4734:	e0bffe17 	ldw	r2,-8(fp)
    4738:	d8800115 	stw	r2,4(sp)
    473c:	008001f4 	movhi	r2,7
    4740:	10911c04 	addi	r2,r2,17520
    4744:	d8800215 	stw	r2,8(sp)
    4748:	8809883a 	mov	r4,r17
    474c:	900b883a 	mov	r5,r18
    4750:	000d883a 	mov	r6,zero
    4754:	00034640 	call	3464 <vid_print_string_alpha>
	active = pDeskInfo->Paint3_Index;
    4758:	e0bfff17 	ldw	r2,-4(fp)
    475c:	10800317 	ldw	r2,12(r2)
    4760:	e0bff815 	stw	r2,-32(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    4764:	e13ff817 	ldw	r4,-32(fp)
    4768:	01400504 	movi	r5,20
    476c:	000a0540 	call	a054 <__mulsi3>
    4770:	10c00904 	addi	r3,r2,36
    4774:	e0bfff17 	ldw	r2,-4(fp)
    4778:	188b883a 	add	r5,r3,r2
    477c:	e13ffa04 	addi	r4,fp,-24
    4780:	00004300 	call	430 <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "4");
    4784:	e0bffa17 	ldw	r2,-24(fp)
    4788:	14400084 	addi	r17,r2,2
    478c:	e0bffc17 	ldw	r2,-16(fp)
    4790:	14800084 	addi	r18,r2,2
    4794:	e13ff817 	ldw	r4,-32(fp)
    4798:	e43fff17 	ldw	r16,-4(fp)
    479c:	01400504 	movi	r5,20
    47a0:	000a0540 	call	a054 <__mulsi3>
    47a4:	1405883a 	add	r2,r2,r16
    47a8:	10800d04 	addi	r2,r2,52
    47ac:	11c00017 	ldw	r7,0(r2)
    47b0:	008001f4 	movhi	r2,7
    47b4:	10930004 	addi	r2,r2,19456
    47b8:	d8800015 	stw	r2,0(sp)
    47bc:	e0bffe17 	ldw	r2,-8(fp)
    47c0:	d8800115 	stw	r2,4(sp)
    47c4:	008001f4 	movhi	r2,7
    47c8:	10911d04 	addi	r2,r2,17524
    47cc:	d8800215 	stw	r2,8(sp)
    47d0:	8809883a 	mov	r4,r17
    47d4:	900b883a 	mov	r5,r18
    47d8:	000d883a 	mov	r6,zero
    47dc:	00034640 	call	3464 <vid_print_string_alpha>
	active = pDeskInfo->Paint4_Index;
    47e0:	e0bfff17 	ldw	r2,-4(fp)
    47e4:	10800417 	ldw	r2,16(r2)
    47e8:	e0bff815 	stw	r2,-32(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    47ec:	e13ff817 	ldw	r4,-32(fp)
    47f0:	01400504 	movi	r5,20
    47f4:	000a0540 	call	a054 <__mulsi3>
    47f8:	10c00904 	addi	r3,r2,36
    47fc:	e0bfff17 	ldw	r2,-4(fp)
    4800:	188b883a 	add	r5,r3,r2
    4804:	e13ffa04 	addi	r4,fp,-24
    4808:	00004300 	call	430 <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "5");
    480c:	e0bffa17 	ldw	r2,-24(fp)
    4810:	14400084 	addi	r17,r2,2
    4814:	e0bffc17 	ldw	r2,-16(fp)
    4818:	14800084 	addi	r18,r2,2
    481c:	e13ff817 	ldw	r4,-32(fp)
    4820:	e43fff17 	ldw	r16,-4(fp)
    4824:	01400504 	movi	r5,20
    4828:	000a0540 	call	a054 <__mulsi3>
    482c:	1405883a 	add	r2,r2,r16
    4830:	10800d04 	addi	r2,r2,52
    4834:	11c00017 	ldw	r7,0(r2)
    4838:	008001f4 	movhi	r2,7
    483c:	10930004 	addi	r2,r2,19456
    4840:	d8800015 	stw	r2,0(sp)
    4844:	e0bffe17 	ldw	r2,-8(fp)
    4848:	d8800115 	stw	r2,4(sp)
    484c:	008001f4 	movhi	r2,7
    4850:	10911e04 	addi	r2,r2,17528
    4854:	d8800215 	stw	r2,8(sp)
    4858:	8809883a 	mov	r4,r17
    485c:	900b883a 	mov	r5,r18
    4860:	000d883a 	mov	r6,zero
    4864:	00034640 	call	3464 <vid_print_string_alpha>
        
        
}
    4868:	e037883a 	mov	sp,fp
    486c:	dfc00617 	ldw	ra,24(sp)
    4870:	df000517 	ldw	fp,20(sp)
    4874:	dd000417 	ldw	r20,16(sp)
    4878:	dcc00317 	ldw	r19,12(sp)
    487c:	dc800217 	ldw	r18,8(sp)
    4880:	dc400117 	ldw	r17,4(sp)
    4884:	dc000017 	ldw	r16,0(sp)
    4888:	dec00704 	addi	sp,sp,28
    488c:	f800283a 	ret

00004890 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
    4890:	defff904 	addi	sp,sp,-28
    4894:	df000615 	stw	fp,24(sp)
    4898:	df000604 	addi	fp,sp,24
    489c:	e13ffc15 	stw	r4,-16(fp)
    48a0:	e17ffd15 	stw	r5,-12(fp)
    bool bYes = TRUE;
    48a4:	00800044 	movi	r2,1
    48a8:	e0bffb15 	stw	r2,-20(fp)
    const int nMax = 50;
    48ac:	00800c84 	movi	r2,50
    48b0:	e0bffa15 	stw	r2,-24(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
    48b4:	e0bffc17 	ldw	r2,-16(fp)
    48b8:	10c00017 	ldw	r3,0(r2)
    48bc:	e0bffd17 	ldw	r2,-12(fp)
    48c0:	10800017 	ldw	r2,0(r2)
    48c4:	1885c83a 	sub	r2,r3,r2
    48c8:	e0bfff15 	stw	r2,-4(fp)
    48cc:	e0ffff17 	ldw	r3,-4(fp)
    48d0:	1804403a 	cmpge	r2,r3,zero
    48d4:	1000031e 	bne	r2,zero,48e4 <IsContinuedPoint+0x54>
    48d8:	e0bfff17 	ldw	r2,-4(fp)
    48dc:	0085c83a 	sub	r2,zero,r2
    48e0:	e0bfff15 	stw	r2,-4(fp)
    48e4:	e0bffa17 	ldw	r2,-24(fp)
    48e8:	e0ffff17 	ldw	r3,-4(fp)
    48ec:	10c0020e 	bge	r2,r3,48f8 <IsContinuedPoint+0x68>
        bYes = FALSE;
    48f0:	e03ffb15 	stw	zero,-20(fp)
    48f4:	00001006 	br	4938 <IsContinuedPoint+0xa8>
    else if (abs(ptPre->y - ptNew->y) > nMax)
    48f8:	e0bffc17 	ldw	r2,-16(fp)
    48fc:	10c00117 	ldw	r3,4(r2)
    4900:	e0bffd17 	ldw	r2,-12(fp)
    4904:	10800117 	ldw	r2,4(r2)
    4908:	1885c83a 	sub	r2,r3,r2
    490c:	e0bffe15 	stw	r2,-8(fp)
    4910:	e0fffe17 	ldw	r3,-8(fp)
    4914:	1804403a 	cmpge	r2,r3,zero
    4918:	1000031e 	bne	r2,zero,4928 <IsContinuedPoint+0x98>
    491c:	e0bffe17 	ldw	r2,-8(fp)
    4920:	0085c83a 	sub	r2,zero,r2
    4924:	e0bffe15 	stw	r2,-8(fp)
    4928:	e0bffa17 	ldw	r2,-24(fp)
    492c:	e0fffe17 	ldw	r3,-8(fp)
    4930:	10c0010e 	bge	r2,r3,4938 <IsContinuedPoint+0xa8>
        bYes = FALSE;
    4934:	e03ffb15 	stw	zero,-20(fp)
        
    return bYes;        
    4938:	e0bffb17 	ldw	r2,-20(fp)
        
}
    493c:	e037883a 	mov	sp,fp
    4940:	df000017 	ldw	fp,0(sp)
    4944:	dec00104 	addi	sp,sp,4
    4948:	f800283a 	ret

0000494c <GUI_ShowGesture>:

void GUI_ShowGesture(VIP_FRAME_READER *pReader, POINT *ptDraw, alt_u8 GestureId ){
    494c:	defff004 	addi	sp,sp,-64
    4950:	dfc00f15 	stw	ra,60(sp)
    4954:	df000e15 	stw	fp,56(sp)
    4958:	dc400d15 	stw	r17,52(sp)
    495c:	dc000c15 	stw	r16,48(sp)
    4960:	df000c04 	addi	fp,sp,48
    4964:	e13ffc15 	stw	r4,-16(fp)
    4968:	e17ffd15 	stw	r5,-12(fp)
    496c:	e1bffe05 	stb	r6,-8(fp)
    // show bitmap
    int nIndex = -1, x, y;
    4970:	00bfffc4 	movi	r2,-1
    4974:	e0bffb15 	stw	r2,-20(fp)
    const int BmpW = 60;
    4978:	00800f04 	movi	r2,60
    497c:	e0bff815 	stw	r2,-32(fp)
    const int BmpH = 60;
    4980:	00800f04 	movi	r2,60
    4984:	e0bff715 	stw	r2,-36(fp)
    alt_u8 *pDes, *pSrc, *pDesStart;

    // find gesture bitmap id
    switch(GestureId){
    4988:	e0bffe03 	ldbu	r2,-8(fp)
    498c:	10bffc04 	addi	r2,r2,-16
    4990:	e0bfff15 	stw	r2,-4(fp)
    4994:	e0ffff17 	ldw	r3,-4(fp)
    4998:	18800ea8 	cmpgeui	r2,r3,58
    499c:	1000531e 	bne	r2,zero,4aec <GUI_ShowGesture+0x1a0>
    49a0:	e13fff17 	ldw	r4,-4(fp)
    49a4:	e13fff17 	ldw	r4,-4(fp)
    49a8:	2105883a 	add	r2,r4,r4
    49ac:	1087883a 	add	r3,r2,r2
    49b0:	00800034 	movhi	r2,0
    49b4:	10927104 	addi	r2,r2,18884
    49b8:	1885883a 	add	r2,r3,r2
    49bc:	10800017 	ldw	r2,0(r2)
    49c0:	1000683a 	jmp	r2
    49c4:	00004acc 	andi	zero,zero,299
    49c8:	00004aec 	andhi	zero,zero,299
    49cc:	00004aec 	andhi	zero,zero,299
    49d0:	00004aec 	andhi	zero,zero,299
    49d4:	00004ab4 	movhi	zero,298
    49d8:	00004aec 	andhi	zero,zero,299
    49dc:	00004aec 	andhi	zero,zero,299
    49e0:	00004aec 	andhi	zero,zero,299
    49e4:	00004ac0 	call	4ac <RectWidth+0x18>
    49e8:	00004aec 	andhi	zero,zero,299
    49ec:	00004aec 	andhi	zero,zero,299
    49f0:	00004aec 	andhi	zero,zero,299
    49f4:	00004aac 	andhi	zero,zero,298
    49f8:	00004aec 	andhi	zero,zero,299
    49fc:	00004aec 	andhi	zero,zero,299
    4a00:	00004aec 	andhi	zero,zero,299
    4a04:	00004aec 	andhi	zero,zero,299
    4a08:	00004aec 	andhi	zero,zero,299
    4a0c:	00004aec 	andhi	zero,zero,299
    4a10:	00004aec 	andhi	zero,zero,299
    4a14:	00004aec 	andhi	zero,zero,299
    4a18:	00004aec 	andhi	zero,zero,299
    4a1c:	00004aec 	andhi	zero,zero,299
    4a20:	00004aec 	andhi	zero,zero,299
    4a24:	00004aec 	andhi	zero,zero,299
    4a28:	00004aec 	andhi	zero,zero,299
    4a2c:	00004aec 	andhi	zero,zero,299
    4a30:	00004aec 	andhi	zero,zero,299
    4a34:	00004aec 	andhi	zero,zero,299
    4a38:	00004aec 	andhi	zero,zero,299
    4a3c:	00004aec 	andhi	zero,zero,299
    4a40:	00004aec 	andhi	zero,zero,299
    4a44:	00004aec 	andhi	zero,zero,299
    4a48:	00004aec 	andhi	zero,zero,299
    4a4c:	00004aec 	andhi	zero,zero,299
    4a50:	00004aec 	andhi	zero,zero,299
    4a54:	00004aec 	andhi	zero,zero,299
    4a58:	00004aec 	andhi	zero,zero,299
    4a5c:	00004aec 	andhi	zero,zero,299
    4a60:	00004aec 	andhi	zero,zero,299
    4a64:	00004aec 	andhi	zero,zero,299
    4a68:	00004aec 	andhi	zero,zero,299
    4a6c:	00004aec 	andhi	zero,zero,299
    4a70:	00004aec 	andhi	zero,zero,299
    4a74:	00004aec 	andhi	zero,zero,299
    4a78:	00004aec 	andhi	zero,zero,299
    4a7c:	00004aec 	andhi	zero,zero,299
    4a80:	00004aec 	andhi	zero,zero,299
    4a84:	00004aec 	andhi	zero,zero,299
    4a88:	00004aec 	andhi	zero,zero,299
    4a8c:	00004aec 	andhi	zero,zero,299
    4a90:	00004aec 	andhi	zero,zero,299
    4a94:	00004aec 	andhi	zero,zero,299
    4a98:	00004aec 	andhi	zero,zero,299
    4a9c:	00004aec 	andhi	zero,zero,299
    4aa0:	00004aec 	andhi	zero,zero,299
    4aa4:	00004ad8 	cmpnei	zero,zero,299
    4aa8:	00004ae4 	muli	zero,zero,299
        case MTC_ST_UP:  nIndex = 0; break;
    4aac:	e03ffb15 	stw	zero,-20(fp)
    4ab0:	00000e06 	br	4aec <GUI_ShowGesture+0x1a0>
        case MTC_ST_DOWN:  nIndex = 1; break;
    4ab4:	00800044 	movi	r2,1
    4ab8:	e0bffb15 	stw	r2,-20(fp)
    4abc:	00000b06 	br	4aec <GUI_ShowGesture+0x1a0>
        case MTC_ST_RIGHT:   nIndex = 2; break;
    4ac0:	00800084 	movi	r2,2
    4ac4:	e0bffb15 	stw	r2,-20(fp)
    4ac8:	00000806 	br	4aec <GUI_ShowGesture+0x1a0>
        case MTC_ST_LEFT:   nIndex = 3; break;
    4acc:	008000c4 	movi	r2,3
    4ad0:	e0bffb15 	stw	r2,-20(fp)
    4ad4:	00000506 	br	4aec <GUI_ShowGesture+0x1a0>

        case MTC_ZOOM_IN:         nIndex = 24; break;
    4ad8:	00800604 	movi	r2,24
    4adc:	e0bffb15 	stw	r2,-20(fp)
    4ae0:	00000206 	br	4aec <GUI_ShowGesture+0x1a0>
        case MTC_ZOOM_OUT:        nIndex = 25; break;
    4ae4:	00800644 	movi	r2,25
    4ae8:	e0bffb15 	stw	r2,-20(fp)
    }

    if (nIndex  == -1)
    4aec:	e0bffb17 	ldw	r2,-20(fp)
    4af0:	10bfffe0 	cmpeqi	r2,r2,-1
    4af4:	10004a1e 	bne	r2,zero,4c20 <GUI_ShowGesture+0x2d4>
        return;

    pSrc = (alt_u8 *)gesture_bmp.pixel_data + nIndex * BmpW * BmpH * 3;
    4af8:	e13ffb17 	ldw	r4,-20(fp)
    4afc:	e17ff817 	ldw	r5,-32(fp)
    4b00:	000a0540 	call	a054 <__mulsi3>
    4b04:	1009883a 	mov	r4,r2
    4b08:	e17ff717 	ldw	r5,-36(fp)
    4b0c:	000a0540 	call	a054 <__mulsi3>
    4b10:	1007883a 	mov	r3,r2
    4b14:	1805883a 	mov	r2,r3
    4b18:	1085883a 	add	r2,r2,r2
    4b1c:	10c5883a 	add	r2,r2,r3
    4b20:	1007883a 	mov	r3,r2
    4b24:	008000f4 	movhi	r2,3
    4b28:	10beda04 	addi	r2,r2,-1176
    4b2c:	1885883a 	add	r2,r3,r2
    4b30:	e0bff515 	stw	r2,-44(fp)

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);
    4b34:	e13ffc17 	ldw	r4,-16(fp)
    4b38:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    4b3c:	1021883a 	mov	r16,r2
    4b40:	e0bffd17 	ldw	r2,-12(fp)
    4b44:	10800017 	ldw	r2,0(r2)
    4b48:	1023883a 	mov	r17,r2
    4b4c:	e0bffd17 	ldw	r2,-12(fp)
    4b50:	11000117 	ldw	r4,4(r2)
    4b54:	e0bffc17 	ldw	r2,-16(fp)
    4b58:	11400517 	ldw	r5,20(r2)
    4b5c:	000a0540 	call	a054 <__mulsi3>
    4b60:	8889883a 	add	r4,r17,r2
    4b64:	e0bffc17 	ldw	r2,-16(fp)
    4b68:	10800717 	ldw	r2,28(r2)
    4b6c:	100b883a 	mov	r5,r2
    4b70:	000a0540 	call	a054 <__mulsi3>
    4b74:	8085883a 	add	r2,r16,r2
    4b78:	e0bff415 	stw	r2,-48(fp)

    for(y=0;y<BmpH;y++){
    4b7c:	e03ff915 	stw	zero,-28(fp)
    4b80:	00002406 	br	4c14 <GUI_ShowGesture+0x2c8>
        pDes = pDesStart;
    4b84:	e0bff417 	ldw	r2,-48(fp)
    4b88:	e0bff615 	stw	r2,-40(fp)
        for(x=0;x<BmpW;x++){
    4b8c:	e03ffa15 	stw	zero,-24(fp)
    4b90:	00001106 	br	4bd8 <GUI_ShowGesture+0x28c>
            memcpy(pDes, pSrc, 3);
    4b94:	e13ff617 	ldw	r4,-40(fp)
    4b98:	e0fff517 	ldw	r3,-44(fp)
    4b9c:	18800003 	ldbu	r2,0(r3)
    4ba0:	20800005 	stb	r2,0(r4)
    4ba4:	18800043 	ldbu	r2,1(r3)
    4ba8:	20800045 	stb	r2,1(r4)
    4bac:	18800083 	ldbu	r2,2(r3)
    4bb0:	20800085 	stb	r2,2(r4)
            pDes += 4;
    4bb4:	e0bff617 	ldw	r2,-40(fp)
    4bb8:	10800104 	addi	r2,r2,4
    4bbc:	e0bff615 	stw	r2,-40(fp)
            pSrc += 3;
    4bc0:	e0bff517 	ldw	r2,-44(fp)
    4bc4:	108000c4 	addi	r2,r2,3
    4bc8:	e0bff515 	stw	r2,-44(fp)

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);

    for(y=0;y<BmpH;y++){
        pDes = pDesStart;
        for(x=0;x<BmpW;x++){
    4bcc:	e0bffa17 	ldw	r2,-24(fp)
    4bd0:	10800044 	addi	r2,r2,1
    4bd4:	e0bffa15 	stw	r2,-24(fp)
    4bd8:	e0fffa17 	ldw	r3,-24(fp)
    4bdc:	e0bff817 	ldw	r2,-32(fp)
    4be0:	18bfec16 	blt	r3,r2,4b94 <GUI_ShowGesture+0x248>
            memcpy(pDes, pSrc, 3);
            pDes += 4;
            pSrc += 3;
        }
        pDesStart += pReader->width*pReader->bytes_per_pixel;
    4be4:	e0bffc17 	ldw	r2,-16(fp)
    4be8:	11000517 	ldw	r4,20(r2)
    4bec:	e0bffc17 	ldw	r2,-16(fp)
    4bf0:	11400717 	ldw	r5,28(r2)
    4bf4:	000a0540 	call	a054 <__mulsi3>
    4bf8:	1007883a 	mov	r3,r2
    4bfc:	e0bff417 	ldw	r2,-48(fp)
    4c00:	10c5883a 	add	r2,r2,r3
    4c04:	e0bff415 	stw	r2,-48(fp)

    pSrc = (alt_u8 *)gesture_bmp.pixel_data + nIndex * BmpW * BmpH * 3;

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);

    for(y=0;y<BmpH;y++){
    4c08:	e0bff917 	ldw	r2,-28(fp)
    4c0c:	10800044 	addi	r2,r2,1
    4c10:	e0bff915 	stw	r2,-28(fp)
    4c14:	e0fff917 	ldw	r3,-28(fp)
    4c18:	e0bff717 	ldw	r2,-36(fp)
    4c1c:	18bfd916 	blt	r3,r2,4b84 <GUI_ShowGesture+0x238>
            pDes += 4;
            pSrc += 3;
        }
        pDesStart += pReader->width*pReader->bytes_per_pixel;
    }
}
    4c20:	e037883a 	mov	sp,fp
    4c24:	dfc00317 	ldw	ra,12(sp)
    4c28:	df000217 	ldw	fp,8(sp)
    4c2c:	dc400117 	ldw	r17,4(sp)
    4c30:	dc000017 	ldw	r16,0(sp)
    4c34:	dec00404 	addi	sp,sp,16
    4c38:	f800283a 	ret

00004c3c <GUI_TraceGesture>:

void GUI_TraceGesture(VIP_FRAME_READER *pReader, POINT *ptDraw, alt_u8 GestureId ){
    4c3c:	defffb04 	addi	sp,sp,-20
    4c40:	dfc00415 	stw	ra,16(sp)
    4c44:	df000315 	stw	fp,12(sp)
    4c48:	df000304 	addi	fp,sp,12
    4c4c:	e13ffd15 	stw	r4,-12(fp)
    4c50:	e17ffe15 	stw	r5,-8(fp)
    4c54:	e1bfff05 	stb	r6,-4(fp)
      GUI_ShowGesture(pReader, ptDraw, GestureId);
    4c58:	e1bfff03 	ldbu	r6,-4(fp)
    4c5c:	e13ffd17 	ldw	r4,-12(fp)
    4c60:	e17ffe17 	ldw	r5,-8(fp)
    4c64:	000494c0 	call	494c <GUI_ShowGesture>
}
    4c68:	e037883a 	mov	sp,fp
    4c6c:	dfc00117 	ldw	ra,4(sp)
    4c70:	df000017 	ldw	fp,0(sp)
    4c74:	dec00204 	addi	sp,sp,8
    4c78:	f800283a 	ret

00004c7c <GUI_ClearPaintArea>:

void GUI_ClearPaintArea(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
    4c7c:	defff504 	addi	sp,sp,-44
    4c80:	dfc00a15 	stw	ra,40(sp)
    4c84:	df000915 	stw	fp,36(sp)
    4c88:	df000904 	addi	fp,sp,36
    4c8c:	e13ffe15 	stw	r4,-8(fp)
    4c90:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
    4c94:	e0bfff17 	ldw	r2,-4(fp)
    4c98:	11400504 	addi	r5,r2,20
    4c9c:	e13ffa04 	addi	r4,fp,-24
    4ca0:	00004300 	call	430 <RectCopy>
    RectInflate(&rc, -1, -1);
    4ca4:	e13ffa04 	addi	r4,fp,-24
    4ca8:	017fffc4 	movi	r5,-1
    4cac:	01bfffc4 	movi	r6,-1
    4cb0:	00003200 	call	320 <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pReader);
    4cb4:	e13ffa17 	ldw	r4,-24(fp)
    4cb8:	e17ffc17 	ldw	r5,-16(fp)
    4cbc:	e1bffb17 	ldw	r6,-20(fp)
    4cc0:	e1fffd17 	ldw	r7,-12(fp)
    4cc4:	d8000015 	stw	zero,0(sp)
    4cc8:	00800044 	movi	r2,1
    4ccc:	d8800115 	stw	r2,4(sp)
    4cd0:	e0bffe17 	ldw	r2,-8(fp)
    4cd4:	d8800215 	stw	r2,8(sp)
    4cd8:	0000e900 	call	e90 <vid_draw_box>
    //
    RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
    4cdc:	e0bfff17 	ldw	r2,-4(fp)
    4ce0:	11400904 	addi	r5,r2,36
    4ce4:	e13ffa04 	addi	r4,fp,-24
    4ce8:	00004300 	call	430 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pReader);
    4cec:	e13ffa17 	ldw	r4,-24(fp)
    4cf0:	e17ffc17 	ldw	r5,-16(fp)
    4cf4:	e1bffb17 	ldw	r6,-20(fp)
    4cf8:	e1fffd17 	ldw	r7,-12(fp)
    4cfc:	d8000015 	stw	zero,0(sp)
    4d00:	00800044 	movi	r2,1
    4d04:	d8800115 	stw	r2,4(sp)
    4d08:	e0bffe17 	ldw	r2,-8(fp)
    4d0c:	d8800215 	stw	r2,8(sp)
    4d10:	0000e900 	call	e90 <vid_draw_box>
}
    4d14:	e037883a 	mov	sp,fp
    4d18:	dfc00117 	ldw	ra,4(sp)
    4d1c:	df000017 	ldw	fp,0(sp)
    4d20:	dec00204 	addi	sp,sp,8
    4d24:	f800283a 	ret

00004d28 <GUI>:

void GUI(MTC2_INFO *pTouch){
    4d28:	deff9304 	addi	sp,sp,-436
    4d2c:	dfc06c15 	stw	ra,432(sp)
    4d30:	df006b15 	stw	fp,428(sp)
    4d34:	df006b04 	addi	fp,sp,428
    4d38:	e13ffd15 	stw	r4,-12(fp)
    // video
    DESK_INFO DeskInfo;
    VIP_FRAME_READER *pReader;
    int X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5 ;
    POINT Pt1, Pt2, Pt3, Pt4, Pt5, ptGesture;
    alt_u8 Event, TouchNum, LedMask = 0x01;
    4d3c:	00800044 	movi	r2,1
    4d40:	e0bfaa05 	stb	r2,-344(fp)
    const int nDotSize = DOT_SIZE;
    4d44:	00800184 	movi	r2,6
    4d48:	e0bfa915 	stw	r2,-348(fp)
    /////////////////////////////////////////////
    // frame reader
#ifdef DUAL_FRAME_BUFFER    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
#else    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_0, FRAME_WIDTH, FRAME_HEIGHT);
    4d4c:	00807804 	movi	r2,480
    4d50:	d8800015 	stw	r2,0(sp)
    4d54:	01024434 	movhi	r4,2320
    4d58:	21040004 	addi	r4,r4,4096
    4d5c:	01401034 	movhi	r5,64
    4d60:	01801034 	movhi	r6,64
    4d64:	01c0c804 	movi	r7,800
    4d68:	00087580 	call	8758 <VIPFR_Init>
    4d6c:	e0bfab15 	stw	r2,-340(fp)
#endif // DUAL_FRAME_BUFFER    
    VIPFR_Go(pReader, TRUE);
    4d70:	e13fab17 	ldw	r4,-340(fp)
    4d74:	01400044 	movi	r5,1
    4d78:	00089700 	call	8970 <VIPFR_Go>
    
    
    // clean screen
    vid_clean_screen(pReader, BLACK_24);
    4d7c:	e13fab17 	ldw	r4,-340(fp)
    4d80:	000b883a 	mov	r5,zero
    4d84:	00006000 	call	600 <vid_clean_screen>
    
   
    GUI_DeskInit(pReader, &DeskInfo);
    4d88:	e17fac04 	addi	r5,fp,-336
    4d8c:	e13fab17 	ldw	r4,-340(fp)
    4d90:	00041000 	call	4100 <GUI_DeskInit>
    GUI_DeskDraw(pReader, &DeskInfo);
    4d94:	e17fac04 	addi	r5,fp,-336
    4d98:	e13fab17 	ldw	r4,-340(fp)
    4d9c:	00043740 	call	4374 <GUI_DeskDraw>
    
    VIPFR_ActiveDrawFrame(pReader);
    4da0:	e13fab17 	ldw	r4,-340(fp)
    4da4:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
    4da8:	e13ff904 	addi	r4,fp,-28
    4dac:	e0bfac04 	addi	r2,fp,-336
    4db0:	11400504 	addi	r5,r2,20
    4db4:	00004300 	call	430 <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
    4db8:	e0bfa917 	ldw	r2,-348(fp)
    4dbc:	0085c83a 	sub	r2,zero,r2
    4dc0:	117fff84 	addi	r5,r2,-2
    4dc4:	e0bfa917 	ldw	r2,-348(fp)
    4dc8:	0085c83a 	sub	r2,zero,r2
    4dcc:	11bfff84 	addi	r6,r2,-2
    4dd0:	e13ff904 	addi	r4,fp,-28
    4dd4:	00003200 	call	320 <RectInflate>
    
    ColorPen0 = DeskInfo.szPalette[DeskInfo.Paint0_Index].color;
    4dd8:	e13fac17 	ldw	r4,-336(fp)
    4ddc:	01400504 	movi	r5,20
    4de0:	000a0540 	call	a054 <__mulsi3>
    4de4:	e0ff9e04 	addi	r3,fp,-392
    4de8:	10c5883a 	add	r2,r2,r3
    4dec:	10801b04 	addi	r2,r2,108
    4df0:	10800017 	ldw	r2,0(r2)
    4df4:	e0bfa815 	stw	r2,-352(fp)
    ColorPen1 = DeskInfo.szPalette[DeskInfo.Paint1_Index].color;
    4df8:	e13fad17 	ldw	r4,-332(fp)
    4dfc:	01400504 	movi	r5,20
    4e00:	000a0540 	call	a054 <__mulsi3>
    4e04:	e13f9e04 	addi	r4,fp,-392
    4e08:	1105883a 	add	r2,r2,r4
    4e0c:	10801b04 	addi	r2,r2,108
    4e10:	10800017 	ldw	r2,0(r2)
    4e14:	e0bfa715 	stw	r2,-356(fp)
    ColorPen2 = DeskInfo.szPalette[DeskInfo.Paint2_Index].color;
    4e18:	e13fae17 	ldw	r4,-328(fp)
    4e1c:	01400504 	movi	r5,20
    4e20:	000a0540 	call	a054 <__mulsi3>
    4e24:	e0ff9e04 	addi	r3,fp,-392
    4e28:	10c5883a 	add	r2,r2,r3
    4e2c:	10801b04 	addi	r2,r2,108
    4e30:	10800017 	ldw	r2,0(r2)
    4e34:	e0bfa615 	stw	r2,-360(fp)
    ColorPen3 = DeskInfo.szPalette[DeskInfo.Paint3_Index].color;
    4e38:	e13faf17 	ldw	r4,-324(fp)
    4e3c:	01400504 	movi	r5,20
    4e40:	000a0540 	call	a054 <__mulsi3>
    4e44:	e13f9e04 	addi	r4,fp,-392
    4e48:	1105883a 	add	r2,r2,r4
    4e4c:	10801b04 	addi	r2,r2,108
    4e50:	10800017 	ldw	r2,0(r2)
    4e54:	e0bfa515 	stw	r2,-364(fp)
    ColorPen4 = DeskInfo.szPalette[DeskInfo.Paint4_Index].color;
    4e58:	e13fb017 	ldw	r4,-320(fp)
    4e5c:	01400504 	movi	r5,20
    4e60:	000a0540 	call	a054 <__mulsi3>
    4e64:	e0ff9e04 	addi	r3,fp,-392
    4e68:	10c5883a 	add	r2,r2,r3
    4e6c:	10801b04 	addi	r2,r2,108
    4e70:	10800017 	ldw	r2,0(r2)
    4e74:	e0bfa415 	stw	r2,-368(fp)
    
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
    PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);
    4e78:	e0bfb517 	ldw	r2,-300(fp)
    4e7c:	11400144 	addi	r5,r2,5
    4e80:	e0bfb717 	ldw	r2,-292(fp)
    4e84:	11800144 	addi	r6,r2,5
    4e88:	e13ff604 	addi	r4,fp,-40
    4e8c:	00002840 	call	284 <PtSet>
    4e90:	00000006 	br	4e94 <GUI+0x16c>
    
    while(1)
    {
        // touch
        if (MTC2_GetStatus(pTouch,&Event, &TouchNum, &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)){
    4e94:	e17ff804 	addi	r5,fp,-32
    4e98:	e1bff844 	addi	r6,fp,-31
    4e9c:	e1ffe204 	addi	r7,fp,-120
    4ea0:	e0bfe304 	addi	r2,fp,-116
    4ea4:	d8800015 	stw	r2,0(sp)
    4ea8:	e0bfe404 	addi	r2,fp,-112
    4eac:	d8800115 	stw	r2,4(sp)
    4eb0:	e0bfe504 	addi	r2,fp,-108
    4eb4:	d8800215 	stw	r2,8(sp)
    4eb8:	e0bfe604 	addi	r2,fp,-104
    4ebc:	d8800315 	stw	r2,12(sp)
    4ec0:	e0bfe704 	addi	r2,fp,-100
    4ec4:	d8800415 	stw	r2,16(sp)
    4ec8:	e0bfe804 	addi	r2,fp,-96
    4ecc:	d8800515 	stw	r2,20(sp)
    4ed0:	e0bfe904 	addi	r2,fp,-92
    4ed4:	d8800615 	stw	r2,24(sp)
    4ed8:	e0bfea04 	addi	r2,fp,-88
    4edc:	d8800715 	stw	r2,28(sp)
    4ee0:	e0bfeb04 	addi	r2,fp,-84
    4ee4:	d8800815 	stw	r2,32(sp)
    4ee8:	e13ffd17 	ldw	r4,-12(fp)
    4eec:	00083240 	call	8324 <MTC2_GetStatus>
    4ef0:	1005003a 	cmpeq	r2,r2,zero
    4ef4:	103fe71e 	bne	r2,zero,4e94 <GUI+0x16c>
            IOWR(LED_BASE, 0x00, LedMask);
    4ef8:	e0ffaa03 	ldbu	r3,-344(fp)
    4efc:	00820034 	movhi	r2,2048
    4f00:	10801004 	addi	r2,r2,64
    4f04:	10c00035 	stwio	r3,0(r2)
            LedMask <<= 1;
    4f08:	e0bfaa03 	ldbu	r2,-344(fp)
    4f0c:	1085883a 	add	r2,r2,r2
    4f10:	e0bfaa05 	stb	r2,-344(fp)
            if (LedMask == 0x00)
    4f14:	e0bfaa03 	ldbu	r2,-344(fp)
    4f18:	1004c03a 	cmpne	r2,r2,zero
    4f1c:	1000021e 	bne	r2,zero,4f28 <GUI+0x200>
                LedMask = 0x01;
    4f20:	00800044 	movi	r2,1
    4f24:	e0bfaa05 	stb	r2,-344(fp)

           GUI_TraceGesture(pReader, &ptGesture, Event);
    4f28:	e0bff803 	ldbu	r2,-32(fp)
    4f2c:	11803fcc 	andi	r6,r2,255
    4f30:	e17ff604 	addi	r5,fp,-40
    4f34:	e13fab17 	ldw	r4,-340(fp)
    4f38:	0004c3c0 	call	4c3c <GUI_TraceGesture>
           printf(".");
    4f3c:	01000b84 	movi	r4,46
    4f40:	000b06c0 	call	b06c <putchar>
            switch(TouchNum)
    4f44:	e0bff843 	ldbu	r2,-31(fp)
    4f48:	10803fcc 	andi	r2,r2,255
    4f4c:	e0bfff15 	stw	r2,-4(fp)
    4f50:	e13fff17 	ldw	r4,-4(fp)
    4f54:	208001a8 	cmpgeui	r2,r4,6
    4f58:	1000231e 	bne	r2,zero,4fe8 <GUI+0x2c0>
    4f5c:	e0ffff17 	ldw	r3,-4(fp)
    4f60:	e0ffff17 	ldw	r3,-4(fp)
    4f64:	18c5883a 	add	r2,r3,r3
    4f68:	1087883a 	add	r3,r2,r2
    4f6c:	00800034 	movhi	r2,0
    4f70:	1093e004 	addi	r2,r2,20352
    4f74:	1885883a 	add	r2,r3,r2
    4f78:	10800017 	ldw	r2,0(r2)
    4f7c:	1000683a 	jmp	r2
    4f80:	00004fe8 	cmpgeui	zero,zero,319
    4f84:	00004fd8 	cmpnei	zero,zero,319
    4f88:	00004fc8 	cmpgei	zero,zero,319
    4f8c:	00004fb8 	rdprs	zero,zero,318
    4f90:	00004fa8 	cmpgeui	zero,zero,318
    4f94:	00004f98 	cmpnei	zero,zero,318
            {
            case 5 :
            	PtSet(&Pt5, X5, Y5);
    4f98:	e17fea17 	ldw	r5,-88(fp)
    4f9c:	e1bfeb17 	ldw	r6,-84(fp)
    4fa0:	e13ff404 	addi	r4,fp,-48
    4fa4:	00002840 	call	284 <PtSet>
            case 4 :
            	PtSet(&Pt4, X4, Y4);
    4fa8:	e17fe817 	ldw	r5,-96(fp)
    4fac:	e1bfe917 	ldw	r6,-92(fp)
    4fb0:	e13ff204 	addi	r4,fp,-56
    4fb4:	00002840 	call	284 <PtSet>
            case 3:
            	PtSet(&Pt3, X3, Y3);
    4fb8:	e17fe617 	ldw	r5,-104(fp)
    4fbc:	e1bfe717 	ldw	r6,-100(fp)
    4fc0:	e13ff004 	addi	r4,fp,-64
    4fc4:	00002840 	call	284 <PtSet>
            case 2:
            	PtSet(&Pt2, X2, Y2);
    4fc8:	e17fe417 	ldw	r5,-112(fp)
    4fcc:	e1bfe517 	ldw	r6,-108(fp)
    4fd0:	e13fee04 	addi	r4,fp,-72
    4fd4:	00002840 	call	284 <PtSet>
            case 1:
            	PtSet(&Pt1, X1, Y1); break;
    4fd8:	e17fe217 	ldw	r5,-120(fp)
    4fdc:	e1bfe317 	ldw	r6,-116(fp)
    4fe0:	e13fec04 	addi	r4,fp,-80
    4fe4:	00002840 	call	284 <PtSet>
            default:break;
            }

            if (TouchNum >= 1 && IsPtInRect(&Pt1, &rcTouch)){
    4fe8:	e0bff843 	ldbu	r2,-31(fp)
    4fec:	10803fcc 	andi	r2,r2,255
    4ff0:	1005003a 	cmpeq	r2,r2,zero
    4ff4:	1000591e 	bne	r2,zero,515c <GUI+0x434>
    4ff8:	e13fec04 	addi	r4,fp,-80
    4ffc:	e17ff904 	addi	r5,fp,-28
    5000:	00002000 	call	200 <IsPtInRect>
    5004:	1005003a 	cmpeq	r2,r2,zero
    5008:	1000541e 	bne	r2,zero,515c <GUI+0x434>
                    }
                }else{
                    printf("invalid pt1(%d,%d) pre(%d,%d)\r\n", Pt1.x, Pt1.y, LastPt1.x, LastPt1.y);
                }
#else
                vid_draw_circle(Pt1.x, Pt1.y, nDotSize, ColorPen0, DO_FILL, pReader);
    500c:	e13fec17 	ldw	r4,-80(fp)
    5010:	e17fed17 	ldw	r5,-76(fp)
    5014:	00800044 	movi	r2,1
    5018:	d8800015 	stw	r2,0(sp)
    501c:	e0bfab17 	ldw	r2,-340(fp)
    5020:	d8800115 	stw	r2,4(sp)
    5024:	e1bfa917 	ldw	r6,-348(fp)
    5028:	e1ffa817 	ldw	r7,-352(fp)
    502c:	0001edc0 	call	1edc <vid_draw_circle>
                if (TouchNum >= 2 && IsPtInRect(&Pt2, &rcTouch))
    5030:	e0bff843 	ldbu	r2,-31(fp)
    5034:	10803fcc 	andi	r2,r2,255
    5038:	108000b0 	cmpltui	r2,r2,2
    503c:	10000e1e 	bne	r2,zero,5078 <GUI+0x350>
    5040:	e13fee04 	addi	r4,fp,-72
    5044:	e17ff904 	addi	r5,fp,-28
    5048:	00002000 	call	200 <IsPtInRect>
    504c:	1005003a 	cmpeq	r2,r2,zero
    5050:	1000091e 	bne	r2,zero,5078 <GUI+0x350>
                    vid_draw_circle(Pt2.x, Pt2.y, nDotSize, ColorPen1, DO_FILL, pReader);
    5054:	e13fee17 	ldw	r4,-72(fp)
    5058:	e17fef17 	ldw	r5,-68(fp)
    505c:	00800044 	movi	r2,1
    5060:	d8800015 	stw	r2,0(sp)
    5064:	e0bfab17 	ldw	r2,-340(fp)
    5068:	d8800115 	stw	r2,4(sp)
    506c:	e1bfa917 	ldw	r6,-348(fp)
    5070:	e1ffa717 	ldw	r7,-356(fp)
    5074:	0001edc0 	call	1edc <vid_draw_circle>
                if (TouchNum >= 3 && IsPtInRect(&Pt3, &rcTouch))
    5078:	e0bff843 	ldbu	r2,-31(fp)
    507c:	10803fcc 	andi	r2,r2,255
    5080:	108000f0 	cmpltui	r2,r2,3
    5084:	10000e1e 	bne	r2,zero,50c0 <GUI+0x398>
    5088:	e13ff004 	addi	r4,fp,-64
    508c:	e17ff904 	addi	r5,fp,-28
    5090:	00002000 	call	200 <IsPtInRect>
    5094:	1005003a 	cmpeq	r2,r2,zero
    5098:	1000091e 	bne	r2,zero,50c0 <GUI+0x398>
                    vid_draw_circle(Pt3.x, Pt3.y, nDotSize, ColorPen2, DO_FILL, pReader);
    509c:	e13ff017 	ldw	r4,-64(fp)
    50a0:	e17ff117 	ldw	r5,-60(fp)
    50a4:	00800044 	movi	r2,1
    50a8:	d8800015 	stw	r2,0(sp)
    50ac:	e0bfab17 	ldw	r2,-340(fp)
    50b0:	d8800115 	stw	r2,4(sp)
    50b4:	e1bfa917 	ldw	r6,-348(fp)
    50b8:	e1ffa617 	ldw	r7,-360(fp)
    50bc:	0001edc0 	call	1edc <vid_draw_circle>
                if (TouchNum >= 4 && IsPtInRect(&Pt4, &rcTouch))
    50c0:	e0bff843 	ldbu	r2,-31(fp)
    50c4:	10803fcc 	andi	r2,r2,255
    50c8:	10800130 	cmpltui	r2,r2,4
    50cc:	10000e1e 	bne	r2,zero,5108 <GUI+0x3e0>
    50d0:	e13ff204 	addi	r4,fp,-56
    50d4:	e17ff904 	addi	r5,fp,-28
    50d8:	00002000 	call	200 <IsPtInRect>
    50dc:	1005003a 	cmpeq	r2,r2,zero
    50e0:	1000091e 	bne	r2,zero,5108 <GUI+0x3e0>
                    vid_draw_circle(Pt4.x, Pt4.y, nDotSize, ColorPen3, DO_FILL, pReader);
    50e4:	e13ff217 	ldw	r4,-56(fp)
    50e8:	e17ff317 	ldw	r5,-52(fp)
    50ec:	00800044 	movi	r2,1
    50f0:	d8800015 	stw	r2,0(sp)
    50f4:	e0bfab17 	ldw	r2,-340(fp)
    50f8:	d8800115 	stw	r2,4(sp)
    50fc:	e1bfa917 	ldw	r6,-348(fp)
    5100:	e1ffa517 	ldw	r7,-364(fp)
    5104:	0001edc0 	call	1edc <vid_draw_circle>
                if (TouchNum >= 5 && IsPtInRect(&Pt5, &rcTouch))
    5108:	e0bff843 	ldbu	r2,-31(fp)
    510c:	10803fcc 	andi	r2,r2,255
    5110:	10800170 	cmpltui	r2,r2,5
    5114:	10000e1e 	bne	r2,zero,5150 <GUI+0x428>
    5118:	e13ff404 	addi	r4,fp,-48
    511c:	e17ff904 	addi	r5,fp,-28
    5120:	00002000 	call	200 <IsPtInRect>
    5124:	1005003a 	cmpeq	r2,r2,zero
    5128:	1000091e 	bne	r2,zero,5150 <GUI+0x428>
                     vid_draw_circle(Pt5.x, Pt5.y, nDotSize, ColorPen4, DO_FILL, pReader);
    512c:	e13ff417 	ldw	r4,-48(fp)
    5130:	e17ff517 	ldw	r5,-44(fp)
    5134:	00800044 	movi	r2,1
    5138:	d8800015 	stw	r2,0(sp)
    513c:	e0bfab17 	ldw	r2,-340(fp)
    5140:	d8800115 	stw	r2,4(sp)
    5144:	e1bfa917 	ldw	r6,-348(fp)
    5148:	e1ffa417 	ldw	r7,-368(fp)
    514c:	0001edc0 	call	1edc <vid_draw_circle>
#endif
//            }else if (Event == MTC_ST_DOUBLECLICK || (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR)){
                VIPFR_ActiveDrawFrame(pReader);
    5150:	e13fab17 	ldw	r4,-340(fp)
    5154:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
            case 1:
            	PtSet(&Pt1, X1, Y1); break;
            default:break;
            }

            if (TouchNum >= 1 && IsPtInRect(&Pt1, &rcTouch)){
    5158:	003f4e06 	br	4e94 <GUI+0x16c>
                if (TouchNum >= 5 && IsPtInRect(&Pt5, &rcTouch))
                     vid_draw_circle(Pt5.x, Pt5.y, nDotSize, ColorPen4, DO_FILL, pReader);
#endif
//            }else if (Event == MTC_ST_DOUBLECLICK || (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR)){
                VIPFR_ActiveDrawFrame(pReader);
            }else if (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR){
    515c:	e0bff843 	ldbu	r2,-31(fp)
    5160:	10803fcc 	andi	r2,r2,255
    5164:	10800058 	cmpnei	r2,r2,1
    5168:	10000d1e 	bne	r2,zero,51a0 <GUI+0x478>
    516c:	e13fac04 	addi	r4,fp,-336
    5170:	e17fec04 	addi	r5,fp,-80
    5174:	00042e00 	call	42e0 <GUI_CheckButton>
    5178:	10800058 	cmpnei	r2,r2,1
    517c:	1000081e 	bne	r2,zero,51a0 <GUI+0x478>
                GUI_ClearPaintArea(pReader, &DeskInfo);
    5180:	e17fac04 	addi	r5,fp,-336
    5184:	e13fab17 	ldw	r4,-340(fp)
    5188:	0004c7c0 	call	4c7c <GUI_ClearPaintArea>
                //vid_clean_screen(pReader, BLACK_24);
                //GUI_DeskDraw(pReader, &DeskInfo);
                VIPFR_ActiveDrawFrame(pReader);
    518c:	e13fab17 	ldw	r4,-340(fp)
    5190:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
                MTC2_ClearEvent(pTouch);
    5194:	e13ffd17 	ldw	r4,-12(fp)
    5198:	000847c0 	call	847c <MTC2_ClearEvent>
                if (TouchNum >= 5 && IsPtInRect(&Pt5, &rcTouch))
                     vid_draw_circle(Pt5.x, Pt5.y, nDotSize, ColorPen4, DO_FILL, pReader);
#endif
//            }else if (Event == MTC_ST_DOUBLECLICK || (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR)){
                VIPFR_ActiveDrawFrame(pReader);
            }else if (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR){
    519c:	003f3d06 	br	4e94 <GUI+0x16c>
                GUI_ClearPaintArea(pReader, &DeskInfo);
                //vid_clean_screen(pReader, BLACK_24);
                //GUI_DeskDraw(pReader, &DeskInfo);
                VIPFR_ActiveDrawFrame(pReader);
                MTC2_ClearEvent(pTouch);
            }else if (TouchNum >= 1){
    51a0:	e0bff843 	ldbu	r2,-31(fp)
    51a4:	10803fcc 	andi	r2,r2,255
    51a8:	1005003a 	cmpeq	r2,r2,zero
    51ac:	103f391e 	bne	r2,zero,4e94 <GUI+0x16c>
                ButtonId = GUI_CheckButton(&DeskInfo, &Pt1);
    51b0:	e13fac04 	addi	r4,fp,-336
    51b4:	e17fec04 	addi	r5,fp,-80
    51b8:	00042e00 	call	42e0 <GUI_CheckButton>
    51bc:	e0bfa315 	stw	r2,-372(fp)
                UpdatePalette = FALSE;
    51c0:	e03f9e15 	stw	zero,-392(fp)
                switch(TouchNum)
    51c4:	e0bff843 	ldbu	r2,-31(fp)
    51c8:	10803fcc 	andi	r2,r2,255
    51cc:	e0bffe15 	stw	r2,-8(fp)
    51d0:	e13ffe17 	ldw	r4,-8(fp)
    51d4:	208001a8 	cmpgeui	r2,r4,6
    51d8:	1000981e 	bne	r2,zero,543c <GUI+0x714>
    51dc:	e0fffe17 	ldw	r3,-8(fp)
    51e0:	e0fffe17 	ldw	r3,-8(fp)
    51e4:	18c5883a 	add	r2,r3,r3
    51e8:	1087883a 	add	r3,r2,r2
    51ec:	00800034 	movhi	r2,0
    51f0:	10948004 	addi	r2,r2,20992
    51f4:	1885883a 	add	r2,r3,r2
    51f8:	10800017 	ldw	r2,0(r2)
    51fc:	1000683a 	jmp	r2
    5200:	0000543c 	xorhi	zero,zero,336
    5204:	000053c8 	cmpgei	zero,zero,335
    5208:	0000535c 	xori	zero,zero,333
    520c:	000052f0 	cmpltui	zero,zero,331
    5210:	00005284 	movi	zero,330
    5214:	00005218 	cmpnei	zero,zero,328
                {
                	case 5:
					{
						ButtonId5 = GUI_CheckButton(&DeskInfo, &Pt5);
    5218:	e13fac04 	addi	r4,fp,-336
    521c:	e17ff404 	addi	r5,fp,-48
    5220:	00042e00 	call	42e0 <GUI_CheckButton>
    5224:	e0bf9f15 	stw	r2,-388(fp)
						if(ButtonId5 != BTN_NONE && ButtonId5 != BTN_CLEAR && ButtonId5 != BTN_GESTRUE &&ButtonId5 != DeskInfo.Paint0_Index  &&  ButtonId5 != DeskInfo.Paint1_Index&&  ButtonId5 != DeskInfo.Paint2_Index && ButtonId5 != DeskInfo.Paint3_Index)
    5228:	e0bf9f17 	ldw	r2,-388(fp)
    522c:	108002a0 	cmpeqi	r2,r2,10
    5230:	1000141e 	bne	r2,zero,5284 <GUI+0x55c>
    5234:	e0bf9f17 	ldw	r2,-388(fp)
    5238:	10800060 	cmpeqi	r2,r2,1
    523c:	1000111e 	bne	r2,zero,5284 <GUI+0x55c>
    5240:	e0bf9f17 	ldw	r2,-388(fp)
    5244:	1005003a 	cmpeq	r2,r2,zero
    5248:	10000e1e 	bne	r2,zero,5284 <GUI+0x55c>
    524c:	e0ffac17 	ldw	r3,-336(fp)
    5250:	e0bf9f17 	ldw	r2,-388(fp)
    5254:	18800b26 	beq	r3,r2,5284 <GUI+0x55c>
    5258:	e0ffad17 	ldw	r3,-332(fp)
    525c:	e0bf9f17 	ldw	r2,-388(fp)
    5260:	18800826 	beq	r3,r2,5284 <GUI+0x55c>
    5264:	e0ffae17 	ldw	r3,-328(fp)
    5268:	e0bf9f17 	ldw	r2,-388(fp)
    526c:	18800526 	beq	r3,r2,5284 <GUI+0x55c>
    5270:	e0ffaf17 	ldw	r3,-324(fp)
    5274:	e0bf9f17 	ldw	r2,-388(fp)
    5278:	18800226 	beq	r3,r2,5284 <GUI+0x55c>
						DeskInfo.Paint4_Index = ButtonId5;
    527c:	e0bf9f17 	ldw	r2,-388(fp)
    5280:	e0bfb015 	stw	r2,-320(fp)
					}
                	case 4:
                	{
                		ButtonId4 = GUI_CheckButton(&DeskInfo, &Pt4);
    5284:	e13fac04 	addi	r4,fp,-336
    5288:	e17ff204 	addi	r5,fp,-56
    528c:	00042e00 	call	42e0 <GUI_CheckButton>
    5290:	e0bfa015 	stw	r2,-384(fp)
                		if(ButtonId4 != BTN_NONE && ButtonId4 != BTN_CLEAR && ButtonId4 != BTN_GESTRUE &&ButtonId4 != DeskInfo.Paint0_Index  &&  ButtonId4 != DeskInfo.Paint1_Index&&  ButtonId4 != DeskInfo.Paint2_Index && ButtonId4 != DeskInfo.Paint4_Index)
    5294:	e0bfa017 	ldw	r2,-384(fp)
    5298:	108002a0 	cmpeqi	r2,r2,10
    529c:	1000141e 	bne	r2,zero,52f0 <GUI+0x5c8>
    52a0:	e0bfa017 	ldw	r2,-384(fp)
    52a4:	10800060 	cmpeqi	r2,r2,1
    52a8:	1000111e 	bne	r2,zero,52f0 <GUI+0x5c8>
    52ac:	e0bfa017 	ldw	r2,-384(fp)
    52b0:	1005003a 	cmpeq	r2,r2,zero
    52b4:	10000e1e 	bne	r2,zero,52f0 <GUI+0x5c8>
    52b8:	e0ffac17 	ldw	r3,-336(fp)
    52bc:	e0bfa017 	ldw	r2,-384(fp)
    52c0:	18800b26 	beq	r3,r2,52f0 <GUI+0x5c8>
    52c4:	e0ffad17 	ldw	r3,-332(fp)
    52c8:	e0bfa017 	ldw	r2,-384(fp)
    52cc:	18800826 	beq	r3,r2,52f0 <GUI+0x5c8>
    52d0:	e0ffae17 	ldw	r3,-328(fp)
    52d4:	e0bfa017 	ldw	r2,-384(fp)
    52d8:	18800526 	beq	r3,r2,52f0 <GUI+0x5c8>
    52dc:	e0ffb017 	ldw	r3,-320(fp)
    52e0:	e0bfa017 	ldw	r2,-384(fp)
    52e4:	18800226 	beq	r3,r2,52f0 <GUI+0x5c8>
                		DeskInfo.Paint3_Index = ButtonId4;
    52e8:	e0bfa017 	ldw	r2,-384(fp)
    52ec:	e0bfaf15 	stw	r2,-324(fp)
                	}
                	case 3:
                	{
                		ButtonId3 = GUI_CheckButton(&DeskInfo, &Pt3);
    52f0:	e13fac04 	addi	r4,fp,-336
    52f4:	e17ff004 	addi	r5,fp,-64
    52f8:	00042e00 	call	42e0 <GUI_CheckButton>
    52fc:	e0bfa115 	stw	r2,-380(fp)
                		 if(ButtonId3 != BTN_NONE && ButtonId3 != BTN_CLEAR && ButtonId3 != BTN_GESTRUE && ButtonId3 != DeskInfo.Paint4_Index && ButtonId3 != DeskInfo.Paint3_Index &&ButtonId3 != DeskInfo.Paint0_Index  &&  ButtonId3 != DeskInfo.Paint1_Index)
    5300:	e0bfa117 	ldw	r2,-380(fp)
    5304:	108002a0 	cmpeqi	r2,r2,10
    5308:	1000141e 	bne	r2,zero,535c <GUI+0x634>
    530c:	e0bfa117 	ldw	r2,-380(fp)
    5310:	10800060 	cmpeqi	r2,r2,1
    5314:	1000111e 	bne	r2,zero,535c <GUI+0x634>
    5318:	e0bfa117 	ldw	r2,-380(fp)
    531c:	1005003a 	cmpeq	r2,r2,zero
    5320:	10000e1e 	bne	r2,zero,535c <GUI+0x634>
    5324:	e0ffb017 	ldw	r3,-320(fp)
    5328:	e0bfa117 	ldw	r2,-380(fp)
    532c:	18800b26 	beq	r3,r2,535c <GUI+0x634>
    5330:	e0ffaf17 	ldw	r3,-324(fp)
    5334:	e0bfa117 	ldw	r2,-380(fp)
    5338:	18800826 	beq	r3,r2,535c <GUI+0x634>
    533c:	e0ffac17 	ldw	r3,-336(fp)
    5340:	e0bfa117 	ldw	r2,-380(fp)
    5344:	18800526 	beq	r3,r2,535c <GUI+0x634>
    5348:	e0ffad17 	ldw	r3,-332(fp)
    534c:	e0bfa117 	ldw	r2,-380(fp)
    5350:	18800226 	beq	r3,r2,535c <GUI+0x634>
                		DeskInfo.Paint2_Index = ButtonId3;
    5354:	e0bfa117 	ldw	r2,-380(fp)
    5358:	e0bfae15 	stw	r2,-328(fp)
                	}
                	case 2:
					{
						ButtonId2 = GUI_CheckButton(&DeskInfo, &Pt2);
    535c:	e13fac04 	addi	r4,fp,-336
    5360:	e17fee04 	addi	r5,fp,-72
    5364:	00042e00 	call	42e0 <GUI_CheckButton>
    5368:	e0bfa215 	stw	r2,-376(fp)
					   if(ButtonId2 != BTN_NONE && ButtonId2 != BTN_CLEAR && ButtonId2 != BTN_GESTRUE && ButtonId2 != DeskInfo.Paint4_Index && ButtonId2 != DeskInfo.Paint3_Index && ButtonId2 != DeskInfo.Paint2_Index &&ButtonId2 != DeskInfo.Paint0_Index )
    536c:	e0bfa217 	ldw	r2,-376(fp)
    5370:	108002a0 	cmpeqi	r2,r2,10
    5374:	1000141e 	bne	r2,zero,53c8 <GUI+0x6a0>
    5378:	e0bfa217 	ldw	r2,-376(fp)
    537c:	10800060 	cmpeqi	r2,r2,1
    5380:	1000111e 	bne	r2,zero,53c8 <GUI+0x6a0>
    5384:	e0bfa217 	ldw	r2,-376(fp)
    5388:	1005003a 	cmpeq	r2,r2,zero
    538c:	10000e1e 	bne	r2,zero,53c8 <GUI+0x6a0>
    5390:	e0ffb017 	ldw	r3,-320(fp)
    5394:	e0bfa217 	ldw	r2,-376(fp)
    5398:	18800b26 	beq	r3,r2,53c8 <GUI+0x6a0>
    539c:	e0ffaf17 	ldw	r3,-324(fp)
    53a0:	e0bfa217 	ldw	r2,-376(fp)
    53a4:	18800826 	beq	r3,r2,53c8 <GUI+0x6a0>
    53a8:	e0ffae17 	ldw	r3,-328(fp)
    53ac:	e0bfa217 	ldw	r2,-376(fp)
    53b0:	18800526 	beq	r3,r2,53c8 <GUI+0x6a0>
    53b4:	e0ffac17 	ldw	r3,-336(fp)
    53b8:	e0bfa217 	ldw	r2,-376(fp)
    53bc:	18800226 	beq	r3,r2,53c8 <GUI+0x6a0>
						DeskInfo.Paint1_Index = ButtonId2;
    53c0:	e0bfa217 	ldw	r2,-376(fp)
    53c4:	e0bfad15 	stw	r2,-332(fp)
					}
                	case 1:
					{
						ButtonId = GUI_CheckButton(&DeskInfo, &Pt1);
    53c8:	e13fac04 	addi	r4,fp,-336
    53cc:	e17fec04 	addi	r5,fp,-80
    53d0:	00042e00 	call	42e0 <GUI_CheckButton>
    53d4:	e0bfa315 	stw	r2,-372(fp)
						if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR && ButtonId != BTN_GESTRUE && ButtonId != DeskInfo.Paint4_Index && ButtonId != DeskInfo.Paint3_Index && ButtonId != DeskInfo.Paint2_Index && ButtonId != DeskInfo.Paint1_Index)
    53d8:	e0bfa317 	ldw	r2,-372(fp)
    53dc:	108002a0 	cmpeqi	r2,r2,10
    53e0:	1000161e 	bne	r2,zero,543c <GUI+0x714>
    53e4:	e0bfa317 	ldw	r2,-372(fp)
    53e8:	10800060 	cmpeqi	r2,r2,1
    53ec:	1000131e 	bne	r2,zero,543c <GUI+0x714>
    53f0:	e0bfa317 	ldw	r2,-372(fp)
    53f4:	1005003a 	cmpeq	r2,r2,zero
    53f8:	1000101e 	bne	r2,zero,543c <GUI+0x714>
    53fc:	e0ffb017 	ldw	r3,-320(fp)
    5400:	e0bfa317 	ldw	r2,-372(fp)
    5404:	18800d26 	beq	r3,r2,543c <GUI+0x714>
    5408:	e0ffaf17 	ldw	r3,-324(fp)
    540c:	e0bfa317 	ldw	r2,-372(fp)
    5410:	18800a26 	beq	r3,r2,543c <GUI+0x714>
    5414:	e0ffae17 	ldw	r3,-328(fp)
    5418:	e0bfa317 	ldw	r2,-372(fp)
    541c:	18800726 	beq	r3,r2,543c <GUI+0x714>
    5420:	e0ffad17 	ldw	r3,-332(fp)
    5424:	e0bfa317 	ldw	r2,-372(fp)
    5428:	18800426 	beq	r3,r2,543c <GUI+0x714>
						{
						       UpdatePalette = TRUE;
    542c:	00800044 	movi	r2,1
    5430:	e0bf9e15 	stw	r2,-392(fp)
						       DeskInfo.Paint0_Index = ButtonId;
    5434:	e0bfa317 	ldw	r2,-372(fp)
    5438:	e0bfac15 	stw	r2,-336(fp)
						}
					}break;
                	default:break;
                }
				if (UpdatePalette){
    543c:	e0bf9e17 	ldw	r2,-392(fp)
    5440:	1005003a 	cmpeq	r2,r2,zero
    5444:	103e931e 	bne	r2,zero,4e94 <GUI+0x16c>
					ColorPen0 = DeskInfo.szPalette[DeskInfo.Paint0_Index].color;
    5448:	e13fac17 	ldw	r4,-336(fp)
    544c:	01400504 	movi	r5,20
    5450:	000a0540 	call	a054 <__mulsi3>
    5454:	e13f9e04 	addi	r4,fp,-392
    5458:	1105883a 	add	r2,r2,r4
    545c:	10801b04 	addi	r2,r2,108
    5460:	10800017 	ldw	r2,0(r2)
    5464:	e0bfa815 	stw	r2,-352(fp)
					ColorPen1 = DeskInfo.szPalette[DeskInfo.Paint1_Index].color;
    5468:	e13fad17 	ldw	r4,-332(fp)
    546c:	01400504 	movi	r5,20
    5470:	000a0540 	call	a054 <__mulsi3>
    5474:	e0ff9e04 	addi	r3,fp,-392
    5478:	10c5883a 	add	r2,r2,r3
    547c:	10801b04 	addi	r2,r2,108
    5480:	10800017 	ldw	r2,0(r2)
    5484:	e0bfa715 	stw	r2,-356(fp)
					ColorPen2 = DeskInfo.szPalette[DeskInfo.Paint2_Index].color;
    5488:	e13fae17 	ldw	r4,-328(fp)
    548c:	01400504 	movi	r5,20
    5490:	000a0540 	call	a054 <__mulsi3>
    5494:	e13f9e04 	addi	r4,fp,-392
    5498:	1105883a 	add	r2,r2,r4
    549c:	10801b04 	addi	r2,r2,108
    54a0:	10800017 	ldw	r2,0(r2)
    54a4:	e0bfa615 	stw	r2,-360(fp)
					ColorPen3 = DeskInfo.szPalette[DeskInfo.Paint3_Index].color;
    54a8:	e13faf17 	ldw	r4,-324(fp)
    54ac:	01400504 	movi	r5,20
    54b0:	000a0540 	call	a054 <__mulsi3>
    54b4:	e0ff9e04 	addi	r3,fp,-392
    54b8:	10c5883a 	add	r2,r2,r3
    54bc:	10801b04 	addi	r2,r2,108
    54c0:	10800017 	ldw	r2,0(r2)
    54c4:	e0bfa515 	stw	r2,-364(fp)
					ColorPen4 = DeskInfo.szPalette[DeskInfo.Paint4_Index].color;
    54c8:	e13fb017 	ldw	r4,-320(fp)
    54cc:	01400504 	movi	r5,20
    54d0:	000a0540 	call	a054 <__mulsi3>
    54d4:	e13f9e04 	addi	r4,fp,-392
    54d8:	1105883a 	add	r2,r2,r4
    54dc:	10801b04 	addi	r2,r2,108
    54e0:	10800017 	ldw	r2,0(r2)
    54e4:	e0bfa415 	stw	r2,-368(fp)
					GUI_DeskDraw(pReader, &DeskInfo);
    54e8:	e17fac04 	addi	r5,fp,-336
    54ec:	e13fab17 	ldw	r4,-340(fp)
    54f0:	00043740 	call	4374 <GUI_DeskDraw>
					VIPFR_ActiveDrawFrame(pReader);
    54f4:	e13fab17 	ldw	r4,-340(fp)
    54f8:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
					MTC2_ClearEvent(pTouch);
    54fc:	e13ffd17 	ldw	r4,-12(fp)
    5500:	000847c0 	call	847c <MTC2_ClearEvent>
				}
                }
        }
    }
    5504:	003e6306 	br	4e94 <GUI+0x16c>

00005508 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(VIP_FRAME_READER *pReader, char *pText){
    5508:	defff904 	addi	sp,sp,-28
    550c:	dfc00615 	stw	ra,24(sp)
    5510:	df000515 	stw	fp,20(sp)
    5514:	df000504 	addi	fp,sp,20
    5518:	e13ffe15 	stw	r4,-8(fp)
    551c:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pReader, pText);
    5520:	d12d9c17 	ldw	r4,-18832(gp)
    5524:	d1600117 	ldw	r5,-32764(gp)
    5528:	008001f4 	movhi	r2,7
    552c:	10930004 	addi	r2,r2,19456
    5530:	d8800015 	stw	r2,0(sp)
    5534:	e0bffe17 	ldw	r2,-8(fp)
    5538:	d8800115 	stw	r2,4(sp)
    553c:	e0bfff17 	ldw	r2,-4(fp)
    5540:	d8800215 	stw	r2,8(sp)
    5544:	01803fc4 	movi	r6,255
    5548:	000f883a 	mov	r7,zero
    554c:	00034640 	call	3464 <vid_print_string_alpha>
    VIPFR_ActiveDrawFrame(pReader);
    5550:	e13ffe17 	ldw	r4,-8(fp)
    5554:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
}
    5558:	e037883a 	mov	sp,fp
    555c:	dfc00117 	ldw	ra,4(sp)
    5560:	df000017 	ldw	fp,0(sp)
    5564:	dec00204 	addi	sp,sp,8
    5568:	f800283a 	ret

0000556c <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(VIP_FRAME_READER *pReader, int X, int Y, int color){
    556c:	defff804 	addi	sp,sp,-32
    5570:	dfc00715 	stw	ra,28(sp)
    5574:	df000615 	stw	fp,24(sp)
    5578:	df000604 	addi	fp,sp,24
    557c:	e13ffc15 	stw	r4,-16(fp)
    5580:	e17ffd15 	stw	r5,-12(fp)
    5584:	e1bffe15 	stw	r6,-8(fp)
    5588:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pReader);
    558c:	00800044 	movi	r2,1
    5590:	d8800015 	stw	r2,0(sp)
    5594:	e0bffc17 	ldw	r2,-16(fp)
    5598:	d8800115 	stw	r2,4(sp)
    559c:	e13ffd17 	ldw	r4,-12(fp)
    55a0:	e17ffe17 	ldw	r5,-8(fp)
    55a4:	01800284 	movi	r6,10
    55a8:	e1ffff17 	ldw	r7,-4(fp)
    55ac:	0001edc0 	call	1edc <vid_draw_circle>
    VIPFR_ActiveDrawFrame(pReader);    
    55b0:	e13ffc17 	ldw	r4,-16(fp)
    55b4:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
}
    55b8:	e037883a 	mov	sp,fp
    55bc:	dfc00117 	ldw	ra,4(sp)
    55c0:	df000017 	ldw	fp,0(sp)
    55c4:	dec00204 	addi	sp,sp,8
    55c8:	f800283a 	ret

000055cc <ShowInfo>:
#define FRAME_HEIGHT 480

#define FR_FRAME_0  (SDRAM_BASE + SDRAM_SPAN/2)
#define FR_FRAME_1  (SDRAM_BASE + SDRAM_SPAN/2 + FRAME_WIDTH*FRAME_HEIGHT*4)

void ShowInfo(VIP_FRAME_READER *pReader, char *pText){
    55cc:	defff904 	addi	sp,sp,-28
    55d0:	dfc00615 	stw	ra,24(sp)
    55d4:	df000515 	stw	fp,20(sp)
    55d8:	df000504 	addi	fp,sp,20
    55dc:	e13ffe15 	stw	r4,-8(fp)
    55e0:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pReader, pText);    
    55e4:	008001f4 	movhi	r2,7
    55e8:	10930004 	addi	r2,r2,19456
    55ec:	d8800015 	stw	r2,0(sp)
    55f0:	e0bffe17 	ldw	r2,-8(fp)
    55f4:	d8800115 	stw	r2,4(sp)
    55f8:	e0bfff17 	ldw	r2,-4(fp)
    55fc:	d8800215 	stw	r2,8(sp)
    5600:	01000044 	movi	r4,1
    5604:	01400044 	movi	r5,1
    5608:	01804034 	movhi	r6,256
    560c:	31bfffc4 	addi	r6,r6,-1
    5610:	000f883a 	mov	r7,zero
    5614:	00034640 	call	3464 <vid_print_string_alpha>
}
    5618:	e037883a 	mov	sp,fp
    561c:	dfc00117 	ldw	ra,4(sp)
    5620:	df000017 	ldw	fp,0(sp)
    5624:	dec00204 	addi	sp,sp,8
    5628:	f800283a 	ret

0000562c <VPG_XLine>:

void VPG_XLine(VIP_FRAME_READER *pReader){
    562c:	defff904 	addi	sp,sp,-28
    5630:	dfc00615 	stw	ra,24(sp)
    5634:	df000515 	stw	fp,20(sp)
    5638:	df000504 	addi	fp,sp,20
    563c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 *p;
    
    p = VIPFR_GetDrawFrame(pReader);
    5640:	e13fff17 	ldw	r4,-4(fp)
    5644:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    5648:	e0bffe15 	stw	r2,-8(fp)

    // erase background
     vid_clean_screen(pReader, BLACK_24);
    564c:	e13fff17 	ldw	r4,-4(fp)
    5650:	000b883a 	mov	r5,zero
    5654:	00006000 	call	600 <vid_clean_screen>
    
    // draw line    
    vid_draw_line(0, 0, FRAME_HEIGHT-1, FRAME_HEIGHT-1, 1, WHITE_24, pReader);
    5658:	00800044 	movi	r2,1
    565c:	d8800015 	stw	r2,0(sp)
    5660:	00804034 	movhi	r2,256
    5664:	10bfffc4 	addi	r2,r2,-1
    5668:	d8800115 	stw	r2,4(sp)
    566c:	e0bfff17 	ldw	r2,-4(fp)
    5670:	d8800215 	stw	r2,8(sp)
    5674:	0009883a 	mov	r4,zero
    5678:	000b883a 	mov	r5,zero
    567c:	018077c4 	movi	r6,479
    5680:	01c077c4 	movi	r7,479
    5684:	00006580 	call	658 <vid_draw_line>
    vid_draw_line(FRAME_HEIGHT-1, 0, 0, FRAME_HEIGHT-1, 1, WHITE_24, pReader);
    5688:	00800044 	movi	r2,1
    568c:	d8800015 	stw	r2,0(sp)
    5690:	00804034 	movhi	r2,256
    5694:	10bfffc4 	addi	r2,r2,-1
    5698:	d8800115 	stw	r2,4(sp)
    569c:	e0bfff17 	ldw	r2,-4(fp)
    56a0:	d8800215 	stw	r2,8(sp)
    56a4:	010077c4 	movi	r4,479
    56a8:	000b883a 	mov	r5,zero
    56ac:	000d883a 	mov	r6,zero
    56b0:	01c077c4 	movi	r7,479
    56b4:	00006580 	call	658 <vid_draw_line>

    // show text
    ShowInfo(pReader, "X Line");
    56b8:	e13fff17 	ldw	r4,-4(fp)
    56bc:	014001f4 	movhi	r5,7
    56c0:	29511f04 	addi	r5,r5,17532
    56c4:	00055cc0 	call	55cc <ShowInfo>
    
    //    
    VIPFR_ActiveDrawFrame(pReader);        
    56c8:	e13fff17 	ldw	r4,-4(fp)
    56cc:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
}
    56d0:	e037883a 	mov	sp,fp
    56d4:	dfc00117 	ldw	ra,4(sp)
    56d8:	df000017 	ldw	fp,0(sp)
    56dc:	dec00204 	addi	sp,sp,8
    56e0:	f800283a 	ret

000056e4 <VPG_ColorPanel>:

void VPG_ColorPanel(VIP_FRAME_READER *pReader, alt_u32 Color){
    56e4:	defff204 	addi	sp,sp,-56
    56e8:	dfc00d15 	stw	ra,52(sp)
    56ec:	df000c15 	stw	fp,48(sp)
    56f0:	df000c04 	addi	fp,sp,48
    56f4:	e13ffe15 	stw	r4,-8(fp)
    56f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *p;
    int i;
    char szText[32];
    
    
    p = VIPFR_GetDrawFrame(pReader);
    56fc:	e13ffe17 	ldw	r4,-8(fp)
    5700:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    5704:	e0bff515 	stw	r2,-44(fp)
    for(i=0;i<FRAME_HEIGHT*FRAME_WIDTH;i++)
    5708:	e03ff415 	stw	zero,-48(fp)
    570c:	00000906 	br	5734 <VPG_ColorPanel+0x50>
        *p++ = Color;
    5710:	e0fff517 	ldw	r3,-44(fp)
    5714:	e0bfff17 	ldw	r2,-4(fp)
    5718:	18800015 	stw	r2,0(r3)
    571c:	e0bff517 	ldw	r2,-44(fp)
    5720:	10800104 	addi	r2,r2,4
    5724:	e0bff515 	stw	r2,-44(fp)
    int i;
    char szText[32];
    
    
    p = VIPFR_GetDrawFrame(pReader);
    for(i=0;i<FRAME_HEIGHT*FRAME_WIDTH;i++)
    5728:	e0bff417 	ldw	r2,-48(fp)
    572c:	10800044 	addi	r2,r2,1
    5730:	e0bff415 	stw	r2,-48(fp)
    5734:	e0fff417 	ldw	r3,-48(fp)
    5738:	008001b4 	movhi	r2,6
    573c:	10b6ffc4 	addi	r2,r2,-9217
    5740:	10fff30e 	bge	r2,r3,5710 <VPG_ColorPanel+0x2c>
        *p++ = Color;
        
    // show text
    sprintf(szText,"Panel: %08xh", Color);
    5744:	e13ff604 	addi	r4,fp,-40
    5748:	014001f4 	movhi	r5,7
    574c:	29512104 	addi	r5,r5,17540
    5750:	e1bfff17 	ldw	r6,-4(fp)
    5754:	000b1b40 	call	b1b4 <sprintf>
    ShowInfo(pReader, szText);
    5758:	e17ff604 	addi	r5,fp,-40
    575c:	e13ffe17 	ldw	r4,-8(fp)
    5760:	00055cc0 	call	55cc <ShowInfo>
        
    VIPFR_ActiveDrawFrame(pReader);        
    5764:	e13ffe17 	ldw	r4,-8(fp)
    5768:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
    
}
    576c:	e037883a 	mov	sp,fp
    5770:	dfc00117 	ldw	ra,4(sp)
    5774:	df000017 	ldw	fp,0(sp)
    5778:	dec00204 	addi	sp,sp,8
    577c:	f800283a 	ret

00005780 <VPG_Grid>:

void VPG_Grid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
    5780:	defff004 	addi	sp,sp,-64
    5784:	dfc00f15 	stw	ra,60(sp)
    5788:	df000e15 	stw	fp,56(sp)
    578c:	df000e04 	addi	fp,sp,56
    5790:	e13ffe15 	stw	r4,-8(fp)
    5794:	e17fff05 	stb	r5,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    5798:	e13ffe17 	ldw	r4,-8(fp)
    579c:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    57a0:	e0bff315 	stw	r2,-52(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
    57a4:	e03ff415 	stw	zero,-48(fp)
    57a8:	00002006 	br	582c <VPG_Grid+0xac>
        for(x=0;x<FRAME_WIDTH;x++){
    57ac:	e03ff515 	stw	zero,-44(fp)
    57b0:	00001806 	br	5814 <VPG_Grid+0x94>
            if (x%GridSize == 0 || y%GridSize == 0)
    57b4:	e17fff03 	ldbu	r5,-4(fp)
    57b8:	e13ff517 	ldw	r4,-44(fp)
    57bc:	0009fe40 	call	9fe4 <__modsi3>
    57c0:	1005003a 	cmpeq	r2,r2,zero
    57c4:	1000051e 	bne	r2,zero,57dc <VPG_Grid+0x5c>
    57c8:	e17fff03 	ldbu	r5,-4(fp)
    57cc:	e13ff417 	ldw	r4,-48(fp)
    57d0:	0009fe40 	call	9fe4 <__modsi3>
    57d4:	1004c03a 	cmpne	r2,r2,zero
    57d8:	1000041e 	bne	r2,zero,57ec <VPG_Grid+0x6c>
                Value32 = WHITE_24;
    57dc:	00804034 	movhi	r2,256
    57e0:	10bfffc4 	addi	r2,r2,-1
    57e4:	e0bff215 	stw	r2,-56(fp)
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
            if (x%GridSize == 0 || y%GridSize == 0)
    57e8:	00000106 	br	57f0 <VPG_Grid+0x70>
                Value32 = WHITE_24;
            else
                Value32 = BLACK_24;
    57ec:	e03ff215 	stw	zero,-56(fp)
            *p++ = Value32;
    57f0:	e0fff317 	ldw	r3,-52(fp)
    57f4:	e0bff217 	ldw	r2,-56(fp)
    57f8:	18800015 	stw	r2,0(r3)
    57fc:	e0bff317 	ldw	r2,-52(fp)
    5800:	10800104 	addi	r2,r2,4
    5804:	e0bff315 	stw	r2,-52(fp)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
    5808:	e0bff517 	ldw	r2,-44(fp)
    580c:	10800044 	addi	r2,r2,1
    5810:	e0bff515 	stw	r2,-44(fp)
    5814:	e0bff517 	ldw	r2,-44(fp)
    5818:	1080c810 	cmplti	r2,r2,800
    581c:	103fe51e 	bne	r2,zero,57b4 <VPG_Grid+0x34>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
    5820:	e0bff417 	ldw	r2,-48(fp)
    5824:	10800044 	addi	r2,r2,1
    5828:	e0bff415 	stw	r2,-48(fp)
    582c:	e0bff417 	ldw	r2,-48(fp)
    5830:	10807810 	cmplti	r2,r2,480
    5834:	103fdd1e 	bne	r2,zero,57ac <VPG_Grid+0x2c>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
    5838:	e1bfff03 	ldbu	r6,-4(fp)
    583c:	e13ff604 	addi	r4,fp,-40
    5840:	014001f4 	movhi	r5,7
    5844:	29512504 	addi	r5,r5,17556
    5848:	000b1b40 	call	b1b4 <sprintf>
    ShowInfo(pReader, szText);
    584c:	e17ff604 	addi	r5,fp,-40
    5850:	e13ffe17 	ldw	r4,-8(fp)
    5854:	00055cc0 	call	55cc <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
    5858:	e13ffe17 	ldw	r4,-8(fp)
    585c:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
}
    5860:	e037883a 	mov	sp,fp
    5864:	dfc00117 	ldw	ra,4(sp)
    5868:	df000017 	ldw	fp,0(sp)
    586c:	dec00204 	addi	sp,sp,8
    5870:	f800283a 	ret

00005874 <VPG_VGrid>:

void VPG_VGrid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
    5874:	defff004 	addi	sp,sp,-64
    5878:	dfc00f15 	stw	ra,60(sp)
    587c:	df000e15 	stw	fp,56(sp)
    5880:	df000e04 	addi	fp,sp,56
    5884:	e13ffe15 	stw	r4,-8(fp)
    5888:	e17fff05 	stb	r5,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    588c:	e13ffe17 	ldw	r4,-8(fp)
    5890:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    5894:	e0bff315 	stw	r2,-52(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
    5898:	e03ff415 	stw	zero,-48(fp)
    589c:	00001b06 	br	590c <VPG_VGrid+0x98>
        for(x=0;x<FRAME_WIDTH;x++){
    58a0:	e03ff515 	stw	zero,-44(fp)
    58a4:	00001306 	br	58f4 <VPG_VGrid+0x80>
            if (x%GridSize == 0)
    58a8:	e17fff03 	ldbu	r5,-4(fp)
    58ac:	e13ff517 	ldw	r4,-44(fp)
    58b0:	0009fe40 	call	9fe4 <__modsi3>
    58b4:	1004c03a 	cmpne	r2,r2,zero
    58b8:	1000041e 	bne	r2,zero,58cc <VPG_VGrid+0x58>
                Value32 = WHITE_24;
    58bc:	00804034 	movhi	r2,256
    58c0:	10bfffc4 	addi	r2,r2,-1
    58c4:	e0bff215 	stw	r2,-56(fp)
    58c8:	00000106 	br	58d0 <VPG_VGrid+0x5c>
            else
                Value32 = BLACK_24;
    58cc:	e03ff215 	stw	zero,-56(fp)
            *p++ = Value32;
    58d0:	e0fff317 	ldw	r3,-52(fp)
    58d4:	e0bff217 	ldw	r2,-56(fp)
    58d8:	18800015 	stw	r2,0(r3)
    58dc:	e0bff317 	ldw	r2,-52(fp)
    58e0:	10800104 	addi	r2,r2,4
    58e4:	e0bff315 	stw	r2,-52(fp)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
    58e8:	e0bff517 	ldw	r2,-44(fp)
    58ec:	10800044 	addi	r2,r2,1
    58f0:	e0bff515 	stw	r2,-44(fp)
    58f4:	e0bff517 	ldw	r2,-44(fp)
    58f8:	1080c810 	cmplti	r2,r2,800
    58fc:	103fea1e 	bne	r2,zero,58a8 <VPG_VGrid+0x34>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
    5900:	e0bff417 	ldw	r2,-48(fp)
    5904:	10800044 	addi	r2,r2,1
    5908:	e0bff415 	stw	r2,-48(fp)
    590c:	e0bff417 	ldw	r2,-48(fp)
    5910:	10807810 	cmplti	r2,r2,480
    5914:	103fe21e 	bne	r2,zero,58a0 <VPG_VGrid+0x2c>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
    5918:	e1bfff03 	ldbu	r6,-4(fp)
    591c:	e13ff604 	addi	r4,fp,-40
    5920:	014001f4 	movhi	r5,7
    5924:	29512704 	addi	r5,r5,17564
    5928:	000b1b40 	call	b1b4 <sprintf>
    ShowInfo(pReader, szText);
    592c:	e17ff604 	addi	r5,fp,-40
    5930:	e13ffe17 	ldw	r4,-8(fp)
    5934:	00055cc0 	call	55cc <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
    5938:	e13ffe17 	ldw	r4,-8(fp)
    593c:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
}
    5940:	e037883a 	mov	sp,fp
    5944:	dfc00117 	ldw	ra,4(sp)
    5948:	df000017 	ldw	fp,0(sp)
    594c:	dec00204 	addi	sp,sp,8
    5950:	f800283a 	ret

00005954 <VPG_HGrid>:

void VPG_HGrid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
    5954:	defff004 	addi	sp,sp,-64
    5958:	dfc00f15 	stw	ra,60(sp)
    595c:	df000e15 	stw	fp,56(sp)
    5960:	df000e04 	addi	fp,sp,56
    5964:	e13ffe15 	stw	r4,-8(fp)
    5968:	e17fff05 	stb	r5,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    596c:	e13ffe17 	ldw	r4,-8(fp)
    5970:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    5974:	e0bff315 	stw	r2,-52(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
    5978:	e03ff415 	stw	zero,-48(fp)
    597c:	00001b06 	br	59ec <VPG_HGrid+0x98>
        for(x=0;x<FRAME_WIDTH;x++){
    5980:	e03ff515 	stw	zero,-44(fp)
    5984:	00001306 	br	59d4 <VPG_HGrid+0x80>
            if (y%GridSize == 0)
    5988:	e17fff03 	ldbu	r5,-4(fp)
    598c:	e13ff417 	ldw	r4,-48(fp)
    5990:	0009fe40 	call	9fe4 <__modsi3>
    5994:	1004c03a 	cmpne	r2,r2,zero
    5998:	1000041e 	bne	r2,zero,59ac <VPG_HGrid+0x58>
                Value32 = WHITE_24;
    599c:	00804034 	movhi	r2,256
    59a0:	10bfffc4 	addi	r2,r2,-1
    59a4:	e0bff215 	stw	r2,-56(fp)
    59a8:	00000106 	br	59b0 <VPG_HGrid+0x5c>
            else
                Value32 = BLACK_24;
    59ac:	e03ff215 	stw	zero,-56(fp)
            *p++ = Value32;
    59b0:	e0fff317 	ldw	r3,-52(fp)
    59b4:	e0bff217 	ldw	r2,-56(fp)
    59b8:	18800015 	stw	r2,0(r3)
    59bc:	e0bff317 	ldw	r2,-52(fp)
    59c0:	10800104 	addi	r2,r2,4
    59c4:	e0bff315 	stw	r2,-52(fp)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
    59c8:	e0bff517 	ldw	r2,-44(fp)
    59cc:	10800044 	addi	r2,r2,1
    59d0:	e0bff515 	stw	r2,-44(fp)
    59d4:	e0bff517 	ldw	r2,-44(fp)
    59d8:	1080c810 	cmplti	r2,r2,800
    59dc:	103fea1e 	bne	r2,zero,5988 <VPG_HGrid+0x34>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
    59e0:	e0bff417 	ldw	r2,-48(fp)
    59e4:	10800044 	addi	r2,r2,1
    59e8:	e0bff415 	stw	r2,-48(fp)
    59ec:	e0bff417 	ldw	r2,-48(fp)
    59f0:	10807810 	cmplti	r2,r2,480
    59f4:	103fe21e 	bne	r2,zero,5980 <VPG_HGrid+0x2c>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
    59f8:	e1bfff03 	ldbu	r6,-4(fp)
    59fc:	e13ff604 	addi	r4,fp,-40
    5a00:	014001f4 	movhi	r5,7
    5a04:	29512904 	addi	r5,r5,17572
    5a08:	000b1b40 	call	b1b4 <sprintf>
    ShowInfo(pReader, szText);
    5a0c:	e17ff604 	addi	r5,fp,-40
    5a10:	e13ffe17 	ldw	r4,-8(fp)
    5a14:	00055cc0 	call	55cc <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
    5a18:	e13ffe17 	ldw	r4,-8(fp)
    5a1c:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
}
    5a20:	e037883a 	mov	sp,fp
    5a24:	dfc00117 	ldw	ra,4(sp)
    5a28:	df000017 	ldw	fp,0(sp)
    5a2c:	dec00204 	addi	sp,sp,8
    5a30:	f800283a 	ret

00005a34 <VPG_ColorBar>:




void VPG_ColorBar(VIP_FRAME_READER *pReader){
    5a34:	defff904 	addi	sp,sp,-28
    5a38:	dfc00615 	stw	ra,24(sp)
    5a3c:	df000515 	stw	fp,20(sp)
    5a40:	df000504 	addi	fp,sp,20
    5a44:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    5a48:	e13fff17 	ldw	r4,-4(fp)
    5a4c:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    5a50:	e0bffc15 	stw	r2,-16(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
    5a54:	e03ffd15 	stw	zero,-12(fp)
    5a58:	00004906 	br	5b80 <VPG_ColorBar+0x14c>
        for(x=0;x<FRAME_WIDTH;x++){
    5a5c:	e03ffe15 	stw	zero,-8(fp)
    5a60:	00004106 	br	5b68 <VPG_ColorBar+0x134>
            if (x == 0 || y == 0 || x == FRAME_WIDTH-1 || y == FRAME_HEIGHT-1){
    5a64:	e0bffe17 	ldw	r2,-8(fp)
    5a68:	1005003a 	cmpeq	r2,r2,zero
    5a6c:	1000091e 	bne	r2,zero,5a94 <VPG_ColorBar+0x60>
    5a70:	e0bffd17 	ldw	r2,-12(fp)
    5a74:	1005003a 	cmpeq	r2,r2,zero
    5a78:	1000061e 	bne	r2,zero,5a94 <VPG_ColorBar+0x60>
    5a7c:	e0bffe17 	ldw	r2,-8(fp)
    5a80:	1080c7e0 	cmpeqi	r2,r2,799
    5a84:	1000031e 	bne	r2,zero,5a94 <VPG_ColorBar+0x60>
    5a88:	e0bffd17 	ldw	r2,-12(fp)
    5a8c:	108077d8 	cmpnei	r2,r2,479
    5a90:	1000041e 	bne	r2,zero,5aa4 <VPG_ColorBar+0x70>
                Value32 = WHITE_24;
    5a94:	00804034 	movhi	r2,256
    5a98:	10bfffc4 	addi	r2,r2,-1
    5a9c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
            if (x == 0 || y == 0 || x == FRAME_WIDTH-1 || y == FRAME_HEIGHT-1){
    5aa0:	00002806 	br	5b44 <VPG_ColorBar+0x110>
                Value32 = WHITE_24;
            }else if (y < FRAME_HEIGHT/4){
    5aa4:	e0bffd17 	ldw	r2,-12(fp)
    5aa8:	10801e08 	cmpgei	r2,r2,120
    5aac:	1000041e 	bne	r2,zero,5ac0 <VPG_ColorBar+0x8c>
                // red
                Value32 = x & 0xFF;
    5ab0:	e0bffe17 	ldw	r2,-8(fp)
    5ab4:	10803fcc 	andi	r2,r2,255
    5ab8:	e0bffb15 	stw	r2,-20(fp)
    5abc:	00002106 	br	5b44 <VPG_ColorBar+0x110>
            }else if (y < FRAME_HEIGHT/2){
    5ac0:	e0bffd17 	ldw	r2,-12(fp)
    5ac4:	10803c08 	cmpgei	r2,r2,240
    5ac8:	1000051e 	bne	r2,zero,5ae0 <VPG_ColorBar+0xac>
                Value32 = (x & 0xFF) << 8;
    5acc:	e0bffe17 	ldw	r2,-8(fp)
    5ad0:	10803fcc 	andi	r2,r2,255
    5ad4:	1004923a 	slli	r2,r2,8
    5ad8:	e0bffb15 	stw	r2,-20(fp)
    5adc:	00001906 	br	5b44 <VPG_ColorBar+0x110>
            }else if (y < FRAME_HEIGHT*3/4){
    5ae0:	e0bffd17 	ldw	r2,-12(fp)
    5ae4:	10805a08 	cmpgei	r2,r2,360
    5ae8:	1000051e 	bne	r2,zero,5b00 <VPG_ColorBar+0xcc>
                Value32 = (x & 0xFF) << 16;
    5aec:	e0bffe17 	ldw	r2,-8(fp)
    5af0:	10803fcc 	andi	r2,r2,255
    5af4:	1004943a 	slli	r2,r2,16
    5af8:	e0bffb15 	stw	r2,-20(fp)
    5afc:	00001106 	br	5b44 <VPG_ColorBar+0x110>
            }else{
                Value32 = x & 0xFF;
    5b00:	e0bffe17 	ldw	r2,-8(fp)
    5b04:	10803fcc 	andi	r2,r2,255
    5b08:	e0bffb15 	stw	r2,-20(fp)
                Value32 |= (x & 0xFF) << 8;
    5b0c:	e0bffe17 	ldw	r2,-8(fp)
    5b10:	10803fcc 	andi	r2,r2,255
    5b14:	1004923a 	slli	r2,r2,8
    5b18:	1007883a 	mov	r3,r2
    5b1c:	e0bffb17 	ldw	r2,-20(fp)
    5b20:	10c4b03a 	or	r2,r2,r3
    5b24:	e0bffb15 	stw	r2,-20(fp)
                Value32 |= (x & 0xFF) << 16;
    5b28:	e0bffe17 	ldw	r2,-8(fp)
    5b2c:	10803fcc 	andi	r2,r2,255
    5b30:	1004943a 	slli	r2,r2,16
    5b34:	1007883a 	mov	r3,r2
    5b38:	e0bffb17 	ldw	r2,-20(fp)
    5b3c:	10c4b03a 	or	r2,r2,r3
    5b40:	e0bffb15 	stw	r2,-20(fp)
            }
            *p++ = Value32;
    5b44:	e0fffc17 	ldw	r3,-16(fp)
    5b48:	e0bffb17 	ldw	r2,-20(fp)
    5b4c:	18800015 	stw	r2,0(r3)
    5b50:	e0bffc17 	ldw	r2,-16(fp)
    5b54:	10800104 	addi	r2,r2,4
    5b58:	e0bffc15 	stw	r2,-16(fp)
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
    5b5c:	e0bffe17 	ldw	r2,-8(fp)
    5b60:	10800044 	addi	r2,r2,1
    5b64:	e0bffe15 	stw	r2,-8(fp)
    5b68:	e0bffe17 	ldw	r2,-8(fp)
    5b6c:	1080c810 	cmplti	r2,r2,800
    5b70:	103fbc1e 	bne	r2,zero,5a64 <VPG_ColorBar+0x30>
void VPG_ColorBar(VIP_FRAME_READER *pReader){
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
    5b74:	e0bffd17 	ldw	r2,-12(fp)
    5b78:	10800044 	addi	r2,r2,1
    5b7c:	e0bffd15 	stw	r2,-12(fp)
    5b80:	e0bffd17 	ldw	r2,-12(fp)
    5b84:	10807810 	cmplti	r2,r2,480
    5b88:	103fb41e 	bne	r2,zero,5a5c <VPG_ColorBar+0x28>
            *p++ = Value32;
        }            
        
    }
    
    VIPFR_ActiveDrawFrame(pReader);
    5b8c:	e13fff17 	ldw	r4,-4(fp)
    5b90:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
}
    5b94:	e037883a 	mov	sp,fp
    5b98:	dfc00117 	ldw	ra,4(sp)
    5b9c:	df000017 	ldw	fp,0(sp)
    5ba0:	dec00204 	addi	sp,sp,8
    5ba4:	f800283a 	ret

00005ba8 <GUI_ShowPAT>:

void GUI_ShowPAT(VIP_FRAME_READER *pReader, int PatId){
    5ba8:	defffc04 	addi	sp,sp,-16
    5bac:	dfc00315 	stw	ra,12(sp)
    5bb0:	df000215 	stw	fp,8(sp)
    5bb4:	df000204 	addi	fp,sp,8
    5bb8:	e13ffe15 	stw	r4,-8(fp)
    5bbc:	e17fff15 	stw	r5,-4(fp)
                switch(PatId){
    5bc0:	e0bfff17 	ldw	r2,-4(fp)
    5bc4:	108003e8 	cmpgeui	r2,r2,15
    5bc8:	1000511e 	bne	r2,zero,5d10 <GUI_ShowPAT+0x168>
    5bcc:	e0bfff17 	ldw	r2,-4(fp)
    5bd0:	1085883a 	add	r2,r2,r2
    5bd4:	1087883a 	add	r3,r2,r2
    5bd8:	00800034 	movhi	r2,0
    5bdc:	1096fb04 	addi	r2,r2,23532
    5be0:	1885883a 	add	r2,r3,r2
    5be4:	10800017 	ldw	r2,0(r2)
    5be8:	1000683a 	jmp	r2
    5bec:	00005c28 	cmpgeui	zero,zero,368
    5bf0:	00005c34 	movhi	zero,368
    5bf4:	00005c48 	cmpgei	zero,zero,369
    5bf8:	00005c58 	cmpnei	zero,zero,369
    5bfc:	00005c68 	cmpgeui	zero,zero,369
    5c00:	00005c78 	rdprs	zero,zero,369
    5c04:	00005c84 	movi	zero,370
    5c08:	00005c94 	movui	zero,370
    5c0c:	00005ca4 	muli	zero,zero,370
    5c10:	00005cb4 	movhi	zero,370
    5c14:	00005cc4 	movi	zero,371
    5c18:	00005cd4 	movui	zero,371
    5c1c:	00005ce4 	muli	zero,zero,371
    5c20:	00005cf4 	movhi	zero,371
    5c24:	00005d04 	movi	zero,372
                    case 0: VPG_ColorBar(pReader); break;
    5c28:	e13ffe17 	ldw	r4,-8(fp)
    5c2c:	0005a340 	call	5a34 <VPG_ColorBar>
    5c30:	00003706 	br	5d10 <GUI_ShowPAT+0x168>
                    case 1: VPG_ColorPanel(pReader, WHITE_24); break;
    5c34:	e13ffe17 	ldw	r4,-8(fp)
    5c38:	01404034 	movhi	r5,256
    5c3c:	297fffc4 	addi	r5,r5,-1
    5c40:	00056e40 	call	56e4 <VPG_ColorPanel>
    5c44:	00003206 	br	5d10 <GUI_ShowPAT+0x168>
                    case 2: VPG_ColorPanel(pReader, RED_24); break;
    5c48:	e13ffe17 	ldw	r4,-8(fp)
    5c4c:	01403ff4 	movhi	r5,255
    5c50:	00056e40 	call	56e4 <VPG_ColorPanel>
    5c54:	00002e06 	br	5d10 <GUI_ShowPAT+0x168>
                    case 3: VPG_ColorPanel(pReader, GREEN_24); break;
    5c58:	e13ffe17 	ldw	r4,-8(fp)
    5c5c:	01600014 	movui	r5,32768
    5c60:	00056e40 	call	56e4 <VPG_ColorPanel>
    5c64:	00002a06 	br	5d10 <GUI_ShowPAT+0x168>
                    case 4: VPG_ColorPanel(pReader, BLUE_24); break;
    5c68:	e13ffe17 	ldw	r4,-8(fp)
    5c6c:	01403fc4 	movi	r5,255
    5c70:	00056e40 	call	56e4 <VPG_ColorPanel>
    5c74:	00002606 	br	5d10 <GUI_ShowPAT+0x168>
                    case 5: VPG_XLine(pReader); break;
    5c78:	e13ffe17 	ldw	r4,-8(fp)
    5c7c:	000562c0 	call	562c <VPG_XLine>
    5c80:	00002306 	br	5d10 <GUI_ShowPAT+0x168>
                    case 6: VPG_VGrid(pReader, 2); break;
    5c84:	e13ffe17 	ldw	r4,-8(fp)
    5c88:	01400084 	movi	r5,2
    5c8c:	00058740 	call	5874 <VPG_VGrid>
    5c90:	00001f06 	br	5d10 <GUI_ShowPAT+0x168>
                    case 7: VPG_VGrid(pReader, 4); break;
    5c94:	e13ffe17 	ldw	r4,-8(fp)
    5c98:	01400104 	movi	r5,4
    5c9c:	00058740 	call	5874 <VPG_VGrid>
    5ca0:	00001b06 	br	5d10 <GUI_ShowPAT+0x168>
                    case 8: VPG_VGrid(pReader, 8); break;
    5ca4:	e13ffe17 	ldw	r4,-8(fp)
    5ca8:	01400204 	movi	r5,8
    5cac:	00058740 	call	5874 <VPG_VGrid>
    5cb0:	00001706 	br	5d10 <GUI_ShowPAT+0x168>
                    case 9: VPG_HGrid(pReader, 2); break;
    5cb4:	e13ffe17 	ldw	r4,-8(fp)
    5cb8:	01400084 	movi	r5,2
    5cbc:	00059540 	call	5954 <VPG_HGrid>
    5cc0:	00001306 	br	5d10 <GUI_ShowPAT+0x168>
                    case 10: VPG_HGrid(pReader, 4); break;
    5cc4:	e13ffe17 	ldw	r4,-8(fp)
    5cc8:	01400104 	movi	r5,4
    5ccc:	00059540 	call	5954 <VPG_HGrid>
    5cd0:	00000f06 	br	5d10 <GUI_ShowPAT+0x168>
                    case 11: VPG_HGrid(pReader, 8); break;
    5cd4:	e13ffe17 	ldw	r4,-8(fp)
    5cd8:	01400204 	movi	r5,8
    5cdc:	00059540 	call	5954 <VPG_HGrid>
    5ce0:	00000b06 	br	5d10 <GUI_ShowPAT+0x168>
                    case 12: VPG_Grid(pReader, 2); break;
    5ce4:	e13ffe17 	ldw	r4,-8(fp)
    5ce8:	01400084 	movi	r5,2
    5cec:	00057800 	call	5780 <VPG_Grid>
    5cf0:	00000706 	br	5d10 <GUI_ShowPAT+0x168>
                    case 13: VPG_Grid(pReader, 4); break;
    5cf4:	e13ffe17 	ldw	r4,-8(fp)
    5cf8:	01400104 	movi	r5,4
    5cfc:	00057800 	call	5780 <VPG_Grid>
    5d00:	00000306 	br	5d10 <GUI_ShowPAT+0x168>
                    case 14: VPG_Grid(pReader, 8); break;
    5d04:	e13ffe17 	ldw	r4,-8(fp)
    5d08:	01400204 	movi	r5,8
    5d0c:	00057800 	call	5780 <VPG_Grid>
                }
    
}
    5d10:	e037883a 	mov	sp,fp
    5d14:	dfc00117 	ldw	ra,4(sp)
    5d18:	df000017 	ldw	fp,0(sp)
    5d1c:	dec00204 	addi	sp,sp,8
    5d20:	f800283a 	ret

00005d24 <GUI_VPG>:

void GUI_VPG(MTC2_INFO *pTouch){
    5d24:	deffe704 	addi	sp,sp,-100
    5d28:	dfc01815 	stw	ra,96(sp)
    5d2c:	df001715 	stw	fp,92(sp)
    5d30:	df001704 	addi	fp,sp,92
    5d34:	e13fff15 	stw	r4,-4(fp)
    // video
    VIP_FRAME_READER *pReader;
    int X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5;
    alt_u8 Event, TouchNum;    
    alt_u8 PatId = 0;
    5d38:	e03ff205 	stb	zero,-56(fp)
    /////////////////////////////////////////////
    // frame reader
#ifdef DUAL_FRAME_BUFFER
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
#else    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_0, FRAME_WIDTH, FRAME_HEIGHT);
    5d3c:	00807804 	movi	r2,480
    5d40:	d8800015 	stw	r2,0(sp)
    5d44:	01024434 	movhi	r4,2320
    5d48:	21040004 	addi	r4,r4,4096
    5d4c:	01401034 	movhi	r5,64
    5d50:	01801034 	movhi	r6,64
    5d54:	01c0c804 	movi	r7,800
    5d58:	00087580 	call	8758 <VIPFR_Init>
    5d5c:	e0bff315 	stw	r2,-52(fp)
#endif // DUAL_FRAME_BUFFER    
    VIPFR_Go(pReader, TRUE);
    5d60:	e13ff317 	ldw	r4,-52(fp)
    5d64:	01400044 	movi	r5,1
    5d68:	00089700 	call	8970 <VIPFR_Go>
    
    
    // clean screen
    vid_clean_screen(pReader, BLACK_24);
    5d6c:	e13ff317 	ldw	r4,-52(fp)
    5d70:	000b883a 	mov	r5,zero
    5d74:	00006000 	call	600 <vid_clean_screen>
    
   
    VIPFR_ActiveDrawFrame(pReader);
    5d78:	e13ff317 	ldw	r4,-52(fp)
    5d7c:	0008a040 	call	8a04 <VIPFR_ActiveDrawFrame>
    
    VPG_ColorBar(pReader);
    5d80:	e13ff317 	ldw	r4,-52(fp)
    5d84:	0005a340 	call	5a34 <VPG_ColorBar>

   GUI_ShowPAT(pReader, PatId);    
    5d88:	e17ff203 	ldbu	r5,-56(fp)
    5d8c:	e13ff317 	ldw	r4,-52(fp)
    5d90:	0005ba80 	call	5ba8 <GUI_ShowPAT>
    5d94:	00000006 	br	5d98 <GUI_VPG+0x74>
    
    while(1){
        if (MTC2_GetStatus(pTouch,&Event, &TouchNum, &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)){
    5d98:	e17ffe04 	addi	r5,fp,-8
    5d9c:	e1bffe44 	addi	r6,fp,-7
    5da0:	e1fff404 	addi	r7,fp,-48
    5da4:	e0bff504 	addi	r2,fp,-44
    5da8:	d8800015 	stw	r2,0(sp)
    5dac:	e0bff604 	addi	r2,fp,-40
    5db0:	d8800115 	stw	r2,4(sp)
    5db4:	e0bff704 	addi	r2,fp,-36
    5db8:	d8800215 	stw	r2,8(sp)
    5dbc:	e0bff804 	addi	r2,fp,-32
    5dc0:	d8800315 	stw	r2,12(sp)
    5dc4:	e0bff904 	addi	r2,fp,-28
    5dc8:	d8800415 	stw	r2,16(sp)
    5dcc:	e0bffa04 	addi	r2,fp,-24
    5dd0:	d8800515 	stw	r2,20(sp)
    5dd4:	e0bffb04 	addi	r2,fp,-20
    5dd8:	d8800615 	stw	r2,24(sp)
    5ddc:	e0bffc04 	addi	r2,fp,-16
    5de0:	d8800715 	stw	r2,28(sp)
    5de4:	e0bffd04 	addi	r2,fp,-12
    5de8:	d8800815 	stw	r2,32(sp)
    5dec:	e13fff17 	ldw	r4,-4(fp)
    5df0:	00083240 	call	8324 <MTC2_GetStatus>
    5df4:	1005003a 	cmpeq	r2,r2,zero
    5df8:	103fe71e 	bne	r2,zero,5d98 <GUI_VPG+0x74>
           // printf(".");
            //
            if (TouchNum > 0){
    5dfc:	e0bffe43 	ldbu	r2,-7(fp)
    5e00:	10803fcc 	andi	r2,r2,255
    5e04:	1005003a 	cmpeq	r2,r2,zero
    5e08:	103fe31e 	bne	r2,zero,5d98 <GUI_VPG+0x74>
                // change patter
                PatId++;
    5e0c:	e0bff203 	ldbu	r2,-56(fp)
    5e10:	10800044 	addi	r2,r2,1
    5e14:	e0bff205 	stb	r2,-56(fp)
                if (PatId > 14)
    5e18:	e0bff203 	ldbu	r2,-56(fp)
    5e1c:	108003f0 	cmpltui	r2,r2,15
    5e20:	1000011e 	bne	r2,zero,5e28 <GUI_VPG+0x104>
                    PatId = 0;
    5e24:	e03ff205 	stb	zero,-56(fp)
                GUI_ShowPAT(pReader, PatId);
    5e28:	e17ff203 	ldbu	r5,-56(fp)
    5e2c:	e13ff317 	ldw	r4,-52(fp)
    5e30:	0005ba80 	call	5ba8 <GUI_ShowPAT>
                usleep(300*1000); // debounce
    5e34:	01000174 	movhi	r4,5
    5e38:	2124f804 	addi	r4,r4,-27680
    5e3c:	0013ff40 	call	13ff4 <usleep>
                MTC2_ClearEvent(pTouch);
    5e40:	e13fff17 	ldw	r4,-4(fp)
    5e44:	000847c0 	call	847c <MTC2_ClearEvent>
            }
        }
    }
    5e48:	003fd306 	br	5d98 <GUI_VPG+0x74>

00005e4c <main>:
#include "gui.h"
#include "system.h"


int main()
{
    5e4c:	defffc04 	addi	sp,sp,-16
    5e50:	dfc00315 	stw	ra,12(sp)
    5e54:	df000215 	stw	fp,8(sp)
    5e58:	df000204 	addi	fp,sp,8

    // touch
    MTC2_INFO *pTouch;
    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
    5e5c:	00820034 	movhi	r2,2048
    5e60:	10800804 	addi	r2,r2,32
    5e64:	10800037 	ldwio	r2,0(r2)
    5e68:	1080004c 	andi	r2,r2,1
    5e6c:	1005003a 	cmpeq	r2,r2,zero
    5e70:	e0bffe15 	stw	r2,-8(fp)
    IOWR(LED_BASE, 0x00, 0xFF); // high-active
    5e74:	00c20034 	movhi	r3,2048
    5e78:	18c01004 	addi	r3,r3,64
    5e7c:	00803fc4 	movi	r2,255
    5e80:	18800035 	stwio	r2,0(r3)
//    if (LCD_Open()){
//        LCD_TextOut(bVPG?"Multi-Touch\nPattern\n" : "Multi-Touch\nPainter\n");
//    }
    printf("Terasic Painter Demo\r\n");
    5e84:	010001f4 	movhi	r4,7
    5e88:	21112b04 	addi	r4,r4,17580
    5e8c:	000b1300 	call	b130 <puts>

    oc_i2c_init(I2C_OPENCORES_0_BASE);
    5e90:	01024434 	movhi	r4,2320
    5e94:	21042004 	addi	r4,r4,4224
    5e98:	00071980 	call	7198 <oc_i2c_init>

    usleep(1000);
    5e9c:	0100fa04 	movi	r4,1000
    5ea0:	0013ff40 	call	13ff4 <usleep>

    pTouch=MTC2_Init(I2C_OPENCORES_0_BASE,LCD_TOUCH_INT_BASE,LCD_TOUCH_INT_IRQ);
    5ea4:	01024434 	movhi	r4,2320
    5ea8:	21042004 	addi	r4,r4,4224
    5eac:	01424434 	movhi	r5,2320
    5eb0:	29443404 	addi	r5,r5,4304
    5eb4:	01800144 	movi	r6,5
    5eb8:	00081e80 	call	81e8 <MTC2_Init>
    5ebc:	e0bfff15 	stw	r2,-4(fp)
    if (!pTouch){
    5ec0:	e0bfff17 	ldw	r2,-4(fp)
    5ec4:	1004c03a 	cmpne	r2,r2,zero
    5ec8:	1000041e 	bne	r2,zero,5edc <main+0x90>
        printf("Failed to init multi-touch\r\n");
    5ecc:	010001f4 	movhi	r4,7
    5ed0:	21113104 	addi	r4,r4,17604
    5ed4:	000b1300 	call	b130 <puts>
    5ed8:	00000306 	br	5ee8 <main+0x9c>
    }else{
        printf("Init touch successfully\r\n");
    5edc:	010001f4 	movhi	r4,7
    5ee0:	21113804 	addi	r4,r4,17632
    5ee4:	000b1300 	call	b130 <puts>

    }
   if (bVPG)
    5ee8:	e0bffe17 	ldw	r2,-8(fp)
    5eec:	1005003a 	cmpeq	r2,r2,zero
    5ef0:	1000021e 	bne	r2,zero,5efc <main+0xb0>
       GUI_VPG(pTouch); // enter vpg mode when users press KEY0
    5ef4:	e13fff17 	ldw	r4,-4(fp)
    5ef8:	0005d240 	call	5d24 <GUI_VPG>
       GUI(pTouch);
    5efc:	e13fff17 	ldw	r4,-4(fp)
    5f00:	0004d280 	call	4d28 <GUI>
  return 0;
    5f04:	0005883a 	mov	r2,zero
}
    5f08:	e037883a 	mov	sp,fp
    5f0c:	dfc00117 	ldw	ra,4(sp)
    5f10:	df000017 	ldw	fp,0(sp)
    5f14:	dec00204 	addi	sp,sp,8
    5f18:	f800283a 	ret

00005f1c <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
    5f1c:	defffd04 	addi	sp,sp,-12
    5f20:	df000215 	stw	fp,8(sp)
    5f24:	df000204 	addi	fp,sp,8
    5f28:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
    5f2c:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
    5f30:	00000306 	br	5f40 <my_wait+0x24>
        i++;
    5f34:	e0bffe17 	ldw	r2,-8(fp)
    5f38:	10800044 	addi	r2,r2,1
    5f3c:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
    5f40:	e0fffe17 	ldw	r3,-8(fp)
    5f44:	e0bfff17 	ldw	r2,-4(fp)
    5f48:	18bffa16 	blt	r3,r2,5f34 <my_wait+0x18>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
    5f4c:	e037883a 	mov	sp,fp
    5f50:	df000017 	ldw	fp,0(sp)
    5f54:	dec00104 	addi	sp,sp,4
    5f58:	f800283a 	ret

00005f5c <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
    5f5c:	defff804 	addi	sp,sp,-32
    5f60:	dfc00715 	stw	ra,28(sp)
    5f64:	df000615 	stw	fp,24(sp)
    5f68:	df000604 	addi	fp,sp,24
    5f6c:	e13ffb15 	stw	r4,-20(fp)
    5f70:	e17ffc15 	stw	r5,-16(fp)
    5f74:	e0800217 	ldw	r2,8(fp)
    5f78:	e1bffd05 	stb	r6,-12(fp)
    5f7c:	e1fffe05 	stb	r7,-8(fp)
    5f80:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
    5f84:	00800044 	movi	r2,1
    5f88:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
    5f8c:	e13ffb17 	ldw	r4,-20(fp)
    5f90:	e17ffc17 	ldw	r5,-16(fp)
    5f94:	00065cc0 	call	65cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    5f98:	e0bffd03 	ldbu	r2,-12(fp)
    5f9c:	11803fcc 	andi	r6,r2,255
    5fa0:	e13ffb17 	ldw	r4,-20(fp)
    5fa4:	e17ffc17 	ldw	r5,-16(fp)
    5fa8:	00066d40 	call	66d4 <i2c_write>
    5fac:	1004c03a 	cmpne	r2,r2,zero
    5fb0:	1000041e 	bne	r2,zero,5fc4 <I2C_Write+0x68>
        bSuccess = FALSE;
    5fb4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    5fb8:	010001f4 	movhi	r4,7
    5fbc:	21113f04 	addi	r4,r4,17660
    5fc0:	0007cd80 	call	7cd8 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
    5fc4:	e0bffa17 	ldw	r2,-24(fp)
    5fc8:	1005003a 	cmpeq	r2,r2,zero
    5fcc:	10000a1e 	bne	r2,zero,5ff8 <I2C_Write+0x9c>
    5fd0:	e1bffe03 	ldbu	r6,-8(fp)
    5fd4:	e13ffb17 	ldw	r4,-20(fp)
    5fd8:	e17ffc17 	ldw	r5,-16(fp)
    5fdc:	00066d40 	call	66d4 <i2c_write>
    5fe0:	1004c03a 	cmpne	r2,r2,zero
    5fe4:	1000041e 	bne	r2,zero,5ff8 <I2C_Write+0x9c>
        bSuccess = FALSE;
    5fe8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    5fec:	010001f4 	movhi	r4,7
    5ff0:	21114704 	addi	r4,r4,17692
    5ff4:	0007cd80 	call	7cd8 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
    5ff8:	e0bffa17 	ldw	r2,-24(fp)
    5ffc:	1005003a 	cmpeq	r2,r2,zero
    6000:	10000a1e 	bne	r2,zero,602c <I2C_Write+0xd0>
    6004:	e1bfff03 	ldbu	r6,-4(fp)
    6008:	e13ffb17 	ldw	r4,-20(fp)
    600c:	e17ffc17 	ldw	r5,-16(fp)
    6010:	00066d40 	call	66d4 <i2c_write>
    6014:	1004c03a 	cmpne	r2,r2,zero
    6018:	1000041e 	bne	r2,zero,602c <I2C_Write+0xd0>
        bSuccess = FALSE;
    601c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    6020:	010001f4 	movhi	r4,7
    6024:	21115004 	addi	r4,r4,17728
    6028:	0007cd80 	call	7cd8 <myprintf>
    }
    i2c_stop(clk_base, data_base);
    602c:	e13ffb17 	ldw	r4,-20(fp)
    6030:	e17ffc17 	ldw	r5,-16(fp)
    6034:	00066540 	call	6654 <i2c_stop>
    
    usleep(7*100); // delay to wait EE2 ready (at least 5 ms delay is required)
    6038:	0100af04 	movi	r4,700
    603c:	0013ff40 	call	13ff4 <usleep>
    
    return bSuccess;
    6040:	e0bffa17 	ldw	r2,-24(fp)

    
}
    6044:	e037883a 	mov	sp,fp
    6048:	dfc00117 	ldw	ra,4(sp)
    604c:	df000017 	ldw	fp,0(sp)
    6050:	dec00204 	addi	sp,sp,8
    6054:	f800283a 	ret

00006058 <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
    6058:	defff704 	addi	sp,sp,-36
    605c:	dfc00815 	stw	ra,32(sp)
    6060:	df000715 	stw	fp,28(sp)
    6064:	df000704 	addi	fp,sp,28
    6068:	e13ffb15 	stw	r4,-20(fp)
    606c:	e17ffc15 	stw	r5,-16(fp)
    6070:	e0800217 	ldw	r2,8(fp)
    6074:	e1bffd05 	stb	r6,-12(fp)
    6078:	e1fffe05 	stb	r7,-8(fp)
    607c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
    6080:	00800044 	movi	r2,1
    6084:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
    6088:	e0bfff0b 	ldhu	r2,-4(fp)
    608c:	1004d23a 	srli	r2,r2,8
    6090:	1007883a 	mov	r3,r2
    6094:	00bfffc4 	movi	r2,-1
    6098:	1884703a 	and	r2,r3,r2
    609c:	e0bff945 	stb	r2,-27(fp)
    LowByte = ControlData & 0xFF; 
    60a0:	e0bfff0b 	ldhu	r2,-4(fp)
    60a4:	1007883a 	mov	r3,r2
    60a8:	00bfffc4 	movi	r2,-1
    60ac:	1884703a 	and	r2,r3,r2
    60b0:	e0bff905 	stb	r2,-28(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
    60b4:	e13ffb17 	ldw	r4,-20(fp)
    60b8:	e17ffc17 	ldw	r5,-16(fp)
    60bc:	00065cc0 	call	65cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    60c0:	e0bffd03 	ldbu	r2,-12(fp)
    60c4:	11803fcc 	andi	r6,r2,255
    60c8:	e13ffb17 	ldw	r4,-20(fp)
    60cc:	e17ffc17 	ldw	r5,-16(fp)
    60d0:	00066d40 	call	66d4 <i2c_write>
    60d4:	1004c03a 	cmpne	r2,r2,zero
    60d8:	1000041e 	bne	r2,zero,60ec <I2C_Write16+0x94>
        bSuccess = FALSE;
    60dc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    60e0:	010001f4 	movhi	r4,7
    60e4:	21113f04 	addi	r4,r4,17660
    60e8:	0007cd80 	call	7cd8 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
    60ec:	e0bffa17 	ldw	r2,-24(fp)
    60f0:	1005003a 	cmpeq	r2,r2,zero
    60f4:	10000a1e 	bne	r2,zero,6120 <I2C_Write16+0xc8>
    60f8:	e1bffe03 	ldbu	r6,-8(fp)
    60fc:	e13ffb17 	ldw	r4,-20(fp)
    6100:	e17ffc17 	ldw	r5,-16(fp)
    6104:	00066d40 	call	66d4 <i2c_write>
    6108:	1004c03a 	cmpne	r2,r2,zero
    610c:	1000041e 	bne	r2,zero,6120 <I2C_Write16+0xc8>
        bSuccess = FALSE;
    6110:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    6114:	010001f4 	movhi	r4,7
    6118:	21114704 	addi	r4,r4,17692
    611c:	0007cd80 	call	7cd8 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
    6120:	e0bffa17 	ldw	r2,-24(fp)
    6124:	1005003a 	cmpeq	r2,r2,zero
    6128:	10000a1e 	bne	r2,zero,6154 <I2C_Write16+0xfc>
    612c:	e1bff943 	ldbu	r6,-27(fp)
    6130:	e13ffb17 	ldw	r4,-20(fp)
    6134:	e17ffc17 	ldw	r5,-16(fp)
    6138:	00066d40 	call	66d4 <i2c_write>
    613c:	1004c03a 	cmpne	r2,r2,zero
    6140:	1000041e 	bne	r2,zero,6154 <I2C_Write16+0xfc>
        bSuccess = FALSE;
    6144:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    6148:	010001f4 	movhi	r4,7
    614c:	21115004 	addi	r4,r4,17728
    6150:	0007cd80 	call	7cd8 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
    6154:	e0bffa17 	ldw	r2,-24(fp)
    6158:	1005003a 	cmpeq	r2,r2,zero
    615c:	10000a1e 	bne	r2,zero,6188 <I2C_Write16+0x130>
    6160:	e1bff903 	ldbu	r6,-28(fp)
    6164:	e13ffb17 	ldw	r4,-20(fp)
    6168:	e17ffc17 	ldw	r5,-16(fp)
    616c:	00066d40 	call	66d4 <i2c_write>
    6170:	1004c03a 	cmpne	r2,r2,zero
    6174:	1000041e 	bne	r2,zero,6188 <I2C_Write16+0x130>
        bSuccess = FALSE;
    6178:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    617c:	010001f4 	movhi	r4,7
    6180:	21115004 	addi	r4,r4,17728
    6184:	0007cd80 	call	7cd8 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
    6188:	e13ffb17 	ldw	r4,-20(fp)
    618c:	e17ffc17 	ldw	r5,-16(fp)
    6190:	00066540 	call	6654 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
    6194:	0106d604 	movi	r4,7000
    6198:	0013ff40 	call	13ff4 <usleep>
    
    return bSuccess;
    619c:	e0bffa17 	ldw	r2,-24(fp)
}
    61a0:	e037883a 	mov	sp,fp
    61a4:	dfc00117 	ldw	ra,4(sp)
    61a8:	df000017 	ldw	fp,0(sp)
    61ac:	dec00204 	addi	sp,sp,8
    61b0:	f800283a 	ret

000061b4 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
    61b4:	defff904 	addi	sp,sp,-28
    61b8:	dfc00615 	stw	ra,24(sp)
    61bc:	df000515 	stw	fp,20(sp)
    61c0:	df000504 	addi	fp,sp,20
    61c4:	e13ffc15 	stw	r4,-16(fp)
    61c8:	e17ffd15 	stw	r5,-12(fp)
    61cc:	e1bffe05 	stb	r6,-8(fp)
    61d0:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
    61d4:	00800044 	movi	r2,1
    61d8:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    61dc:	e0bffe03 	ldbu	r2,-8(fp)
    61e0:	11803fcc 	andi	r6,r2,255
    61e4:	e13ffc17 	ldw	r4,-16(fp)
    61e8:	e17ffd17 	ldw	r5,-12(fp)
    61ec:	00066d40 	call	66d4 <i2c_write>
    61f0:	1004c03a 	cmpne	r2,r2,zero
    61f4:	1000041e 	bne	r2,zero,6208 <I2C_Read+0x54>
        bSuccess = FALSE;
    61f8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
    61fc:	010001f4 	movhi	r4,7
    6200:	21115804 	addi	r4,r4,17760
    6204:	0007cd80 	call	7cd8 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
    6208:	e0bffb17 	ldw	r2,-20(fp)
    620c:	1005003a 	cmpeq	r2,r2,zero
    6210:	10000a1e 	bne	r2,zero,623c <I2C_Read+0x88>
    6214:	e1bfff03 	ldbu	r6,-4(fp)
    6218:	e13ffc17 	ldw	r4,-16(fp)
    621c:	e17ffd17 	ldw	r5,-12(fp)
    6220:	00066d40 	call	66d4 <i2c_write>
    6224:	1004c03a 	cmpne	r2,r2,zero
    6228:	1000041e 	bne	r2,zero,623c <I2C_Read+0x88>
        bSuccess = FALSE;
    622c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
    6230:	010001f4 	movhi	r4,7
    6234:	21116104 	addi	r4,r4,17796
    6238:	0007cd80 	call	7cd8 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
    623c:	e13ffc17 	ldw	r4,-16(fp)
    6240:	e17ffd17 	ldw	r5,-12(fp)
    6244:	00065cc0 	call	65cc <i2c_start>
    DeviceAddr |= 1; // Read
    6248:	e0bffe03 	ldbu	r2,-8(fp)
    624c:	10800054 	ori	r2,r2,1
    6250:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
    6254:	e0bffb17 	ldw	r2,-20(fp)
    6258:	1005003a 	cmpeq	r2,r2,zero
    625c:	10000b1e 	bne	r2,zero,628c <I2C_Read+0xd8>
    6260:	e0bffe03 	ldbu	r2,-8(fp)
    6264:	11803fcc 	andi	r6,r2,255
    6268:	e13ffc17 	ldw	r4,-16(fp)
    626c:	e17ffd17 	ldw	r5,-12(fp)
    6270:	00066d40 	call	66d4 <i2c_write>
    6274:	1004c03a 	cmpne	r2,r2,zero
    6278:	1000041e 	bne	r2,zero,628c <I2C_Read+0xd8>
        bSuccess = FALSE;
    627c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
    6280:	010001f4 	movhi	r4,7
    6284:	21116a04 	addi	r4,r4,17832
    6288:	0007cd80 	call	7cd8 <myprintf>
    }
    
    if (bSuccess){
    628c:	e0bffb17 	ldw	r2,-20(fp)
    6290:	1005003a 	cmpeq	r2,r2,zero
    6294:	1000051e 	bne	r2,zero,62ac <I2C_Read+0xf8>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
    6298:	e13ffc17 	ldw	r4,-16(fp)
    629c:	e17ffd17 	ldw	r5,-12(fp)
    62a0:	e1800217 	ldw	r6,8(fp)
    62a4:	000f883a 	mov	r7,zero
    62a8:	00068100 	call	6810 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
    62ac:	e13ffc17 	ldw	r4,-16(fp)
    62b0:	e17ffd17 	ldw	r5,-12(fp)
    62b4:	00066540 	call	6654 <i2c_stop>
    
    return bSuccess;
    62b8:	e0bffb17 	ldw	r2,-20(fp)
}
    62bc:	e037883a 	mov	sp,fp
    62c0:	dfc00117 	ldw	ra,4(sp)
    62c4:	df000017 	ldw	fp,0(sp)
    62c8:	dec00204 	addi	sp,sp,8
    62cc:	f800283a 	ret

000062d0 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
    62d0:	defff804 	addi	sp,sp,-32
    62d4:	dfc00715 	stw	ra,28(sp)
    62d8:	df000615 	stw	fp,24(sp)
    62dc:	df000604 	addi	fp,sp,24
    62e0:	e13ffc15 	stw	r4,-16(fp)
    62e4:	e17ffd15 	stw	r5,-12(fp)
    62e8:	e1bffe05 	stb	r6,-8(fp)
    62ec:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
    62f0:	00800044 	movi	r2,1
    62f4:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 LowByte, HighByte;
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
    62f8:	e13ffc17 	ldw	r4,-16(fp)
    62fc:	e17ffd17 	ldw	r5,-12(fp)
    6300:	00065cc0 	call	65cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    6304:	e0bffe03 	ldbu	r2,-8(fp)
    6308:	11803fcc 	andi	r6,r2,255
    630c:	e13ffc17 	ldw	r4,-16(fp)
    6310:	e17ffd17 	ldw	r5,-12(fp)
    6314:	00066d40 	call	66d4 <i2c_write>
    6318:	1004c03a 	cmpne	r2,r2,zero
    631c:	1000041e 	bne	r2,zero,6330 <I2C_Read16+0x60>
        bSuccess = FALSE;
    6320:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    6324:	010001f4 	movhi	r4,7
    6328:	21113f04 	addi	r4,r4,17660
    632c:	0007cd80 	call	7cd8 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
    6330:	e0bffa17 	ldw	r2,-24(fp)
    6334:	1005003a 	cmpeq	r2,r2,zero
    6338:	10000a1e 	bne	r2,zero,6364 <I2C_Read16+0x94>
    633c:	e1bfff03 	ldbu	r6,-4(fp)
    6340:	e13ffc17 	ldw	r4,-16(fp)
    6344:	e17ffd17 	ldw	r5,-12(fp)
    6348:	00066d40 	call	66d4 <i2c_write>
    634c:	1004c03a 	cmpne	r2,r2,zero
    6350:	1000041e 	bne	r2,zero,6364 <I2C_Read16+0x94>
        bSuccess = FALSE;
    6354:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    6358:	010001f4 	movhi	r4,7
    635c:	21114704 	addi	r4,r4,17692
    6360:	0007cd80 	call	7cd8 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
    6364:	e13ffc17 	ldw	r4,-16(fp)
    6368:	e17ffd17 	ldw	r5,-12(fp)
    636c:	00065cc0 	call	65cc <i2c_start>
    DeviceAddr |= 1; // Read
    6370:	e0bffe03 	ldbu	r2,-8(fp)
    6374:	10800054 	ori	r2,r2,1
    6378:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
    637c:	e0bffa17 	ldw	r2,-24(fp)
    6380:	1005003a 	cmpeq	r2,r2,zero
    6384:	10000b1e 	bne	r2,zero,63b4 <I2C_Read16+0xe4>
    6388:	e0bffe03 	ldbu	r2,-8(fp)
    638c:	11803fcc 	andi	r6,r2,255
    6390:	e13ffc17 	ldw	r4,-16(fp)
    6394:	e17ffd17 	ldw	r5,-12(fp)
    6398:	00066d40 	call	66d4 <i2c_write>
    639c:	1004c03a 	cmpne	r2,r2,zero
    63a0:	1000041e 	bne	r2,zero,63b4 <I2C_Read16+0xe4>
        bSuccess = FALSE;
    63a4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    63a8:	010001f4 	movhi	r4,7
    63ac:	21117304 	addi	r4,r4,17868
    63b0:	0007cd80 	call	7cd8 <myprintf>
    }
    
    if (bSuccess){
    63b4:	e0bffa17 	ldw	r2,-24(fp)
    63b8:	1005003a 	cmpeq	r2,r2,zero
    63bc:	1000051e 	bne	r2,zero,63d4 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
    63c0:	e1bffb44 	addi	r6,fp,-19
    63c4:	e13ffc17 	ldw	r4,-16(fp)
    63c8:	e17ffd17 	ldw	r5,-12(fp)
    63cc:	01c00044 	movi	r7,1
    63d0:	00068100 	call	6810 <i2c_read>
    }        
    if (bSuccess){
    63d4:	e0bffa17 	ldw	r2,-24(fp)
    63d8:	1005003a 	cmpeq	r2,r2,zero
    63dc:	1000051e 	bne	r2,zero,63f4 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
    63e0:	e1bffb04 	addi	r6,fp,-20
    63e4:	e13ffc17 	ldw	r4,-16(fp)
    63e8:	e17ffd17 	ldw	r5,-12(fp)
    63ec:	000f883a 	mov	r7,zero
    63f0:	00068100 	call	6810 <i2c_read>
    }        
    if (bSuccess)
    63f4:	e0bffa17 	ldw	r2,-24(fp)
    63f8:	1005003a 	cmpeq	r2,r2,zero
    63fc:	10000a1e 	bne	r2,zero,6428 <I2C_Read16+0x158>
        *pControlData = (HighByte << 8) | LowByte;
    6400:	e0bffb43 	ldbu	r2,-19(fp)
    6404:	10803fcc 	andi	r2,r2,255
    6408:	1004923a 	slli	r2,r2,8
    640c:	1007883a 	mov	r3,r2
    6410:	e0bffb03 	ldbu	r2,-20(fp)
    6414:	10803fcc 	andi	r2,r2,255
    6418:	1884b03a 	or	r2,r3,r2
    641c:	1007883a 	mov	r3,r2
    6420:	e0800217 	ldw	r2,8(fp)
    6424:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
    6428:	e13ffc17 	ldw	r4,-16(fp)
    642c:	e17ffd17 	ldw	r5,-12(fp)
    6430:	00066540 	call	6654 <i2c_stop>
    return bSuccess;
    6434:	e0bffa17 	ldw	r2,-24(fp)
}
    6438:	e037883a 	mov	sp,fp
    643c:	dfc00117 	ldw	ra,4(sp)
    6440:	df000017 	ldw	fp,0(sp)
    6444:	dec00204 	addi	sp,sp,8
    6448:	f800283a 	ret

0000644c <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
    644c:	defff704 	addi	sp,sp,-36
    6450:	dfc00815 	stw	ra,32(sp)
    6454:	df000715 	stw	fp,28(sp)
    6458:	df000704 	addi	fp,sp,28
    645c:	e13ffb15 	stw	r4,-20(fp)
    6460:	e17ffc15 	stw	r5,-16(fp)
    6464:	e0800317 	ldw	r2,12(fp)
    6468:	e1bffd05 	stb	r6,-12(fp)
    646c:	e1fffe05 	stb	r7,-8(fp)
    6470:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
    6474:	00800044 	movi	r2,1
    6478:	e0bff915 	stw	r2,-28(fp)
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
    647c:	e13ffb17 	ldw	r4,-20(fp)
    6480:	e17ffc17 	ldw	r5,-16(fp)
    6484:	00065cc0 	call	65cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    6488:	e0bffd03 	ldbu	r2,-12(fp)
    648c:	11803fcc 	andi	r6,r2,255
    6490:	e13ffb17 	ldw	r4,-20(fp)
    6494:	e17ffc17 	ldw	r5,-16(fp)
    6498:	00066d40 	call	66d4 <i2c_write>
    649c:	1004c03a 	cmpne	r2,r2,zero
    64a0:	1000041e 	bne	r2,zero,64b4 <I2C_MultipleRead+0x68>
        bSuccess = FALSE;
    64a4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
    64a8:	010001f4 	movhi	r4,7
    64ac:	21117c04 	addi	r4,r4,17904
    64b0:	0007cd80 	call	7cd8 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
    64b4:	e0bff917 	ldw	r2,-28(fp)
    64b8:	1005003a 	cmpeq	r2,r2,zero
    64bc:	10000a1e 	bne	r2,zero,64e8 <I2C_MultipleRead+0x9c>
    64c0:	e1bffe03 	ldbu	r6,-8(fp)
    64c4:	e13ffb17 	ldw	r4,-20(fp)
    64c8:	e17ffc17 	ldw	r5,-16(fp)
    64cc:	00066d40 	call	66d4 <i2c_write>
    64d0:	1004c03a 	cmpne	r2,r2,zero
    64d4:	1000041e 	bne	r2,zero,64e8 <I2C_MultipleRead+0x9c>
        bSuccess = FALSE;
    64d8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
    64dc:	010001f4 	movhi	r4,7
    64e0:	21118704 	addi	r4,r4,17948
    64e4:	0007cd80 	call	7cd8 <myprintf>
    }    
    if (bSuccess)        
    64e8:	e0bff917 	ldw	r2,-28(fp)
    64ec:	1005003a 	cmpeq	r2,r2,zero
    64f0:	1000031e 	bne	r2,zero,6500 <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
    64f4:	e13ffb17 	ldw	r4,-20(fp)
    64f8:	e17ffc17 	ldw	r5,-16(fp)
    64fc:	00065cc0 	call	65cc <i2c_start>
    DeviceAddr |= 1; // Read
    6500:	e0bffd03 	ldbu	r2,-12(fp)
    6504:	10800054 	ori	r2,r2,1
    6508:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
    650c:	e0bff917 	ldw	r2,-28(fp)
    6510:	1005003a 	cmpeq	r2,r2,zero
    6514:	10000b1e 	bne	r2,zero,6544 <I2C_MultipleRead+0xf8>
    6518:	e0bffd03 	ldbu	r2,-12(fp)
    651c:	11803fcc 	andi	r6,r2,255
    6520:	e13ffb17 	ldw	r4,-20(fp)
    6524:	e17ffc17 	ldw	r5,-16(fp)
    6528:	00066d40 	call	66d4 <i2c_write>
    652c:	1004c03a 	cmpne	r2,r2,zero
    6530:	1000041e 	bne	r2,zero,6544 <I2C_MultipleRead+0xf8>
        bSuccess = FALSE;
    6534:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    6538:	010001f4 	movhi	r4,7
    653c:	21119204 	addi	r4,r4,17992
    6540:	0007cd80 	call	7cd8 <myprintf>
    }
    
    if (bSuccess){
    6544:	e0bff917 	ldw	r2,-28(fp)
    6548:	1005003a 	cmpeq	r2,r2,zero
    654c:	1000161e 	bne	r2,zero,65a8 <I2C_MultipleRead+0x15c>
        for(i=0;i<len && bSuccess;i++){
    6550:	e03ffa15 	stw	zero,-24(fp)
    6554:	00000e06 	br	6590 <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
    6558:	e0bfff0b 	ldhu	r2,-4(fp)
    655c:	10ffffc4 	addi	r3,r2,-1
    6560:	e0bffa17 	ldw	r2,-24(fp)
    6564:	188ec03a 	cmpne	r7,r3,r2
    6568:	e13ffb17 	ldw	r4,-20(fp)
    656c:	e17ffc17 	ldw	r5,-16(fp)
    6570:	e1800217 	ldw	r6,8(fp)
    6574:	00068100 	call	6810 <i2c_read>
            pBuf++;
    6578:	e0800217 	ldw	r2,8(fp)
    657c:	10800044 	addi	r2,r2,1
    6580:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
    6584:	e0bffa17 	ldw	r2,-24(fp)
    6588:	10800044 	addi	r2,r2,1
    658c:	e0bffa15 	stw	r2,-24(fp)
    6590:	e0ffff0b 	ldhu	r3,-4(fp)
    6594:	e0bffa17 	ldw	r2,-24(fp)
    6598:	10c0030e 	bge	r2,r3,65a8 <I2C_MultipleRead+0x15c>
    659c:	e0bff917 	ldw	r2,-28(fp)
    65a0:	1004c03a 	cmpne	r2,r2,zero
    65a4:	103fec1e 	bne	r2,zero,6558 <I2C_MultipleRead+0x10c>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
    65a8:	e13ffb17 	ldw	r4,-20(fp)
    65ac:	e17ffc17 	ldw	r5,-16(fp)
    65b0:	00066540 	call	6654 <i2c_stop>
    
    return bSuccess;    
    65b4:	e0bff917 	ldw	r2,-28(fp)
    
}
    65b8:	e037883a 	mov	sp,fp
    65bc:	dfc00117 	ldw	ra,4(sp)
    65c0:	df000017 	ldw	fp,0(sp)
    65c4:	dec00204 	addi	sp,sp,8
    65c8:	f800283a 	ret

000065cc <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
    65cc:	defffc04 	addi	sp,sp,-16
    65d0:	dfc00315 	stw	ra,12(sp)
    65d4:	df000215 	stw	fp,8(sp)
    65d8:	df000204 	addi	fp,sp,8
    65dc:	e13ffe15 	stw	r4,-8(fp)
    65e0:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
    65e4:	e0bfff17 	ldw	r2,-4(fp)
    65e8:	10800104 	addi	r2,r2,4
    65ec:	1007883a 	mov	r3,r2
    65f0:	00800044 	movi	r2,1
    65f4:	18800035 	stwio	r2,0(r3)
    // start condition
    SDA_HIGH(data_base); // data high
    65f8:	e0bfff17 	ldw	r2,-4(fp)
    65fc:	1007883a 	mov	r3,r2
    6600:	00800044 	movi	r2,1
    6604:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
    6608:	e0bffe17 	ldw	r2,-8(fp)
    660c:	1007883a 	mov	r3,r2
    6610:	00800044 	movi	r2,1
    6614:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
    6618:	01000784 	movi	r4,30
    661c:	0013ff40 	call	13ff4 <usleep>
    SDA_LOW(data_base); // data low
    6620:	e0bfff17 	ldw	r2,-4(fp)
    6624:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
    6628:	01000784 	movi	r4,30
    662c:	0013ff40 	call	13ff4 <usleep>
    SCL_LOW(clk_base); // clock low
    6630:	e0bffe17 	ldw	r2,-8(fp)
    6634:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
    6638:	01000784 	movi	r4,30
    663c:	0013ff40 	call	13ff4 <usleep>
}
    6640:	e037883a 	mov	sp,fp
    6644:	dfc00117 	ldw	ra,4(sp)
    6648:	df000017 	ldw	fp,0(sp)
    664c:	dec00204 	addi	sp,sp,8
    6650:	f800283a 	ret

00006654 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
    6654:	defffc04 	addi	sp,sp,-16
    6658:	dfc00315 	stw	ra,12(sp)
    665c:	df000215 	stw	fp,8(sp)
    6660:	df000204 	addi	fp,sp,8
    6664:	e13ffe15 	stw	r4,-8(fp)
    6668:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
    666c:	e0bfff17 	ldw	r2,-4(fp)
    6670:	10800104 	addi	r2,r2,4
    6674:	1007883a 	mov	r3,r2
    6678:	00800044 	movi	r2,1
    667c:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
    6680:	e0bfff17 	ldw	r2,-4(fp)
    6684:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
    6688:	01000784 	movi	r4,30
    668c:	0013ff40 	call	13ff4 <usleep>
    SCL_HIGH(clk_base);  // clock high
    6690:	e0bffe17 	ldw	r2,-8(fp)
    6694:	1007883a 	mov	r3,r2
    6698:	00800044 	movi	r2,1
    669c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
    66a0:	01000784 	movi	r4,30
    66a4:	0013ff40 	call	13ff4 <usleep>
    SDA_HIGH(data_base); // data high
    66a8:	e0bfff17 	ldw	r2,-4(fp)
    66ac:	1007883a 	mov	r3,r2
    66b0:	00800044 	movi	r2,1
    66b4:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
    66b8:	01000784 	movi	r4,30
    66bc:	0013ff40 	call	13ff4 <usleep>
 //   SDA_DIR_IN(data_base);  // data read modes
}
    66c0:	e037883a 	mov	sp,fp
    66c4:	dfc00117 	ldw	ra,4(sp)
    66c8:	df000017 	ldw	fp,0(sp)
    66cc:	dec00204 	addi	sp,sp,8
    66d0:	f800283a 	ret

000066d4 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    66d4:	defff704 	addi	sp,sp,-36
    66d8:	dfc00815 	stw	ra,32(sp)
    66dc:	df000715 	stw	fp,28(sp)
    66e0:	df000704 	addi	fp,sp,28
    66e4:	e13ffd15 	stw	r4,-12(fp)
    66e8:	e17ffe15 	stw	r5,-8(fp)
    66ec:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
    66f0:	00bfe004 	movi	r2,-128
    66f4:	e0bffc05 	stb	r2,-16(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    66f8:	e0bffe17 	ldw	r2,-8(fp)
    66fc:	10800104 	addi	r2,r2,4
    6700:	1007883a 	mov	r3,r2
    6704:	00800044 	movi	r2,1
    6708:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
    670c:	e03ffa15 	stw	zero,-24(fp)
    6710:	00002106 	br	6798 <i2c_write+0xc4>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
    6714:	e0bffd17 	ldw	r2,-12(fp)
    6718:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
    671c:	e0ffff03 	ldbu	r3,-4(fp)
    6720:	e0bffc03 	ldbu	r2,-16(fp)
    6724:	1884703a 	and	r2,r3,r2
    6728:	10803fcc 	andi	r2,r2,255
    672c:	1005003a 	cmpeq	r2,r2,zero
    6730:	1000051e 	bne	r2,zero,6748 <i2c_write+0x74>
            SDA_HIGH(data_base);
    6734:	e0bffe17 	ldw	r2,-8(fp)
    6738:	1007883a 	mov	r3,r2
    673c:	00800044 	movi	r2,1
    6740:	18800035 	stwio	r2,0(r3)
    6744:	00000206 	br	6750 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
    6748:	e0bffe17 	ldw	r2,-8(fp)
    674c:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
    6750:	e0bffc03 	ldbu	r2,-16(fp)
    6754:	1004d07a 	srli	r2,r2,1
    6758:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_DELAY;
    675c:	01000784 	movi	r4,30
    6760:	0013ff40 	call	13ff4 <usleep>
        SCL_HIGH(clk_base);
    6764:	e0bffd17 	ldw	r2,-12(fp)
    6768:	1007883a 	mov	r3,r2
    676c:	00800044 	movi	r2,1
    6770:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
    6774:	01000784 	movi	r4,30
    6778:	0013ff40 	call	13ff4 <usleep>
        SCL_LOW(clk_base);
    677c:	e0bffd17 	ldw	r2,-12(fp)
    6780:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
    6784:	01000784 	movi	r4,30
    6788:	0013ff40 	call	13ff4 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
    678c:	e0bffa17 	ldw	r2,-24(fp)
    6790:	10800044 	addi	r2,r2,1
    6794:	e0bffa15 	stw	r2,-24(fp)
    6798:	e0bffa17 	ldw	r2,-24(fp)
    679c:	10800210 	cmplti	r2,r2,8
    67a0:	103fdc1e 	bne	r2,zero,6714 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
    67a4:	e0bffe17 	ldw	r2,-8(fp)
    67a8:	10800104 	addi	r2,r2,4
    67ac:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
    SCL_DELAY;
    67b0:	01000784 	movi	r4,30
    67b4:	0013ff40 	call	13ff4 <usleep>
//	while(SDA_READ(data_base) && w++ < 1000000){
//	}


    // clock high
    SCL_HIGH(clk_base);  // clock high
    67b8:	e0bffd17 	ldw	r2,-12(fp)
    67bc:	1007883a 	mov	r3,r2
    67c0:	00800044 	movi	r2,1
    67c4:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
    67c8:	01000784 	movi	r4,30
    67cc:	0013ff40 	call	13ff4 <usleep>
    SCL_DELAY;  // clock high delay
    67d0:	01000784 	movi	r4,30
    67d4:	0013ff40 	call	13ff4 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
    67d8:	e0bffe17 	ldw	r2,-8(fp)
    67dc:	10800037 	ldwio	r2,0(r2)
    67e0:	1005003a 	cmpeq	r2,r2,zero
    67e4:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
    67e8:	e0bffd17 	ldw	r2,-12(fp)
    67ec:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
    67f0:	01000784 	movi	r4,30
    67f4:	0013ff40 	call	13ff4 <usleep>
    return bAck;
    67f8:	e0bffb17 	ldw	r2,-20(fp)
}    
    67fc:	e037883a 	mov	sp,fp
    6800:	dfc00117 	ldw	ra,4(sp)
    6804:	df000017 	ldw	fp,0(sp)
    6808:	dec00204 	addi	sp,sp,8
    680c:	f800283a 	ret

00006810 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
    6810:	defff804 	addi	sp,sp,-32
    6814:	dfc00715 	stw	ra,28(sp)
    6818:	df000615 	stw	fp,24(sp)
    681c:	df000604 	addi	fp,sp,24
    6820:	e13ffc15 	stw	r4,-16(fp)
    6824:	e17ffd15 	stw	r5,-12(fp)
    6828:	e1bffe15 	stw	r6,-8(fp)
    682c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
    6830:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    SDA_DIR_IN(data_base);  // set data read mode
    6834:	e0bffd17 	ldw	r2,-12(fp)
    6838:	10800104 	addi	r2,r2,4
    683c:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
    6840:	e0bffc17 	ldw	r2,-16(fp)
    6844:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
    6848:	01000784 	movi	r4,30
    684c:	0013ff40 	call	13ff4 <usleep>

    for(i=0;i<8;i++){
    6850:	e03ffa15 	stw	zero,-24(fp)
    6854:	00001706 	br	68b4 <i2c_read+0xa4>
        Data <<= 1;
    6858:	e0bffb03 	ldbu	r2,-20(fp)
    685c:	1085883a 	add	r2,r2,r2
    6860:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
    6864:	e0bffc17 	ldw	r2,-16(fp)
    6868:	1007883a 	mov	r3,r2
    686c:	00800044 	movi	r2,1
    6870:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
    6874:	01000784 	movi	r4,30
    6878:	0013ff40 	call	13ff4 <usleep>
        if (SDA_READ(data_base))  // read data   
    687c:	e0bffd17 	ldw	r2,-12(fp)
    6880:	10800037 	ldwio	r2,0(r2)
    6884:	1005003a 	cmpeq	r2,r2,zero
    6888:	1000031e 	bne	r2,zero,6898 <i2c_read+0x88>
            Data |= 0x01;
    688c:	e0bffb03 	ldbu	r2,-20(fp)
    6890:	10800054 	ori	r2,r2,1
    6894:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
    6898:	e0bffc17 	ldw	r2,-16(fp)
    689c:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
    68a0:	01000784 	movi	r4,30
    68a4:	0013ff40 	call	13ff4 <usleep>
    // assume SCL = low
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
    68a8:	e0bffa17 	ldw	r2,-24(fp)
    68ac:	10800044 	addi	r2,r2,1
    68b0:	e0bffa15 	stw	r2,-24(fp)
    68b4:	e0bffa17 	ldw	r2,-24(fp)
    68b8:	10800210 	cmplti	r2,r2,8
    68bc:	103fe61e 	bne	r2,zero,6858 <i2c_read+0x48>
            Data |= 0x01;
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
    68c0:	e0bffc17 	ldw	r2,-16(fp)
    68c4:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
    68c8:	e0bffd17 	ldw	r2,-12(fp)
    68cc:	10800104 	addi	r2,r2,4
    68d0:	1007883a 	mov	r3,r2
    68d4:	00800044 	movi	r2,1
    68d8:	18800035 	stwio	r2,0(r3)
    if (bAck)
    68dc:	e0bfff17 	ldw	r2,-4(fp)
    68e0:	1005003a 	cmpeq	r2,r2,zero
    68e4:	1000031e 	bne	r2,zero,68f4 <i2c_read+0xe4>
        SDA_LOW(data_base);
    68e8:	e0bffd17 	ldw	r2,-12(fp)
    68ec:	10000035 	stwio	zero,0(r2)
    68f0:	00000406 	br	6904 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
    68f4:	e0bffd17 	ldw	r2,-12(fp)
    68f8:	1007883a 	mov	r3,r2
    68fc:	00800044 	movi	r2,1
    6900:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
    6904:	e0bffc17 	ldw	r2,-16(fp)
    6908:	1007883a 	mov	r3,r2
    690c:	00800044 	movi	r2,1
    6910:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
    6914:	01000784 	movi	r4,30
    6918:	0013ff40 	call	13ff4 <usleep>
    SCL_LOW(clk_base); // clock low
    691c:	e0bffc17 	ldw	r2,-16(fp)
    6920:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
    6924:	01000784 	movi	r4,30
    6928:	0013ff40 	call	13ff4 <usleep>
    SDA_LOW(data_base);  // data low
    692c:	e0bffd17 	ldw	r2,-12(fp)
    6930:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
    6934:	01000784 	movi	r4,30
    6938:	0013ff40 	call	13ff4 <usleep>
//    SDA_DIR_IN;  // set data read mode
    *pData = Data;
    693c:	e0fffe17 	ldw	r3,-8(fp)
    6940:	e0bffb03 	ldbu	r2,-20(fp)
    6944:	18800005 	stb	r2,0(r3)
}
    6948:	e037883a 	mov	sp,fp
    694c:	dfc00117 	ldw	ra,4(sp)
    6950:	df000017 	ldw	fp,0(sp)
    6954:	dec00204 	addi	sp,sp,8
    6958:	f800283a 	ret

0000695c <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
    695c:	defff704 	addi	sp,sp,-36
    6960:	dfc00815 	stw	ra,32(sp)
    6964:	df000715 	stw	fp,28(sp)
    6968:	df000704 	addi	fp,sp,28
    696c:	e13ffb15 	stw	r4,-20(fp)
    6970:	e17ffc15 	stw	r5,-16(fp)
    6974:	e0800217 	ldw	r2,8(fp)
    6978:	e1bffd05 	stb	r6,-12(fp)
    697c:	e1fffe0d 	sth	r7,-8(fp)
    6980:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
    6984:	00800044 	movi	r2,1
    6988:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
    698c:	e0bffe0b 	ldhu	r2,-8(fp)
    6990:	1004d23a 	srli	r2,r2,8
    6994:	1007883a 	mov	r3,r2
    6998:	00bfffc4 	movi	r2,-1
    699c:	1884703a 	and	r2,r3,r2
    69a0:	e0bff945 	stb	r2,-27(fp)
    AddrLow  = ControlAddr & 0xFF; 
    69a4:	e0bffe0b 	ldhu	r2,-8(fp)
    69a8:	1007883a 	mov	r3,r2
    69ac:	00bfffc4 	movi	r2,-1
    69b0:	1884703a 	and	r2,r3,r2
    69b4:	e0bff905 	stb	r2,-28(fp)

    i2c_start(clk_base, data_base);
    69b8:	e13ffb17 	ldw	r4,-20(fp)
    69bc:	e17ffc17 	ldw	r5,-16(fp)
    69c0:	00065cc0 	call	65cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    69c4:	e0bffd03 	ldbu	r2,-12(fp)
    69c8:	11803fcc 	andi	r6,r2,255
    69cc:	e13ffb17 	ldw	r4,-20(fp)
    69d0:	e17ffc17 	ldw	r5,-16(fp)
    69d4:	00066d40 	call	66d4 <i2c_write>
    69d8:	1004c03a 	cmpne	r2,r2,zero
    69dc:	1000041e 	bne	r2,zero,69f0 <I2CL_Write+0x94>
        bSuccess = FALSE;
    69e0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    69e4:	010001f4 	movhi	r4,7
    69e8:	21113f04 	addi	r4,r4,17660
    69ec:	0007cd80 	call	7cd8 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
    69f0:	e0bffa17 	ldw	r2,-24(fp)
    69f4:	1005003a 	cmpeq	r2,r2,zero
    69f8:	10000a1e 	bne	r2,zero,6a24 <I2CL_Write+0xc8>
    69fc:	e1bff943 	ldbu	r6,-27(fp)
    6a00:	e13ffb17 	ldw	r4,-20(fp)
    6a04:	e17ffc17 	ldw	r5,-16(fp)
    6a08:	00066d40 	call	66d4 <i2c_write>
    6a0c:	1004c03a 	cmpne	r2,r2,zero
    6a10:	1000041e 	bne	r2,zero,6a24 <I2CL_Write+0xc8>
        bSuccess = FALSE;
    6a14:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    6a18:	010001f4 	movhi	r4,7
    6a1c:	21119d04 	addi	r4,r4,18036
    6a20:	0007cd80 	call	7cd8 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
    6a24:	e0bffa17 	ldw	r2,-24(fp)
    6a28:	1005003a 	cmpeq	r2,r2,zero
    6a2c:	10000a1e 	bne	r2,zero,6a58 <I2CL_Write+0xfc>
    6a30:	e1bff903 	ldbu	r6,-28(fp)
    6a34:	e13ffb17 	ldw	r4,-20(fp)
    6a38:	e17ffc17 	ldw	r5,-16(fp)
    6a3c:	00066d40 	call	66d4 <i2c_write>
    6a40:	1004c03a 	cmpne	r2,r2,zero
    6a44:	1000041e 	bne	r2,zero,6a58 <I2CL_Write+0xfc>
        bSuccess = FALSE;
    6a48:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    6a4c:	010001f4 	movhi	r4,7
    6a50:	2111a704 	addi	r4,r4,18076
    6a54:	0007cd80 	call	7cd8 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
    6a58:	e0bffa17 	ldw	r2,-24(fp)
    6a5c:	1005003a 	cmpeq	r2,r2,zero
    6a60:	10000a1e 	bne	r2,zero,6a8c <I2CL_Write+0x130>
    6a64:	e1bfff03 	ldbu	r6,-4(fp)
    6a68:	e13ffb17 	ldw	r4,-20(fp)
    6a6c:	e17ffc17 	ldw	r5,-16(fp)
    6a70:	00066d40 	call	66d4 <i2c_write>
    6a74:	1004c03a 	cmpne	r2,r2,zero
    6a78:	1000041e 	bne	r2,zero,6a8c <I2CL_Write+0x130>
        bSuccess = FALSE;
    6a7c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    6a80:	010001f4 	movhi	r4,7
    6a84:	21115004 	addi	r4,r4,17728
    6a88:	0007cd80 	call	7cd8 <myprintf>
    }
    i2c_stop(clk_base, data_base);
    6a8c:	e13ffb17 	ldw	r4,-20(fp)
    6a90:	e17ffc17 	ldw	r5,-16(fp)
    6a94:	00066540 	call	6654 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
    6a98:	0106d604 	movi	r4,7000
    6a9c:	0013ff40 	call	13ff4 <usleep>
    
    return bSuccess;
    6aa0:	e0bffa17 	ldw	r2,-24(fp)
    
}
    6aa4:	e037883a 	mov	sp,fp
    6aa8:	dfc00117 	ldw	ra,4(sp)
    6aac:	df000017 	ldw	fp,0(sp)
    6ab0:	dec00204 	addi	sp,sp,8
    6ab4:	f800283a 	ret

00006ab8 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
    6ab8:	defff804 	addi	sp,sp,-32
    6abc:	dfc00715 	stw	ra,28(sp)
    6ac0:	df000615 	stw	fp,24(sp)
    6ac4:	df000604 	addi	fp,sp,24
    6ac8:	e13ffc15 	stw	r4,-16(fp)
    6acc:	e17ffd15 	stw	r5,-12(fp)
    6ad0:	e1bffe05 	stb	r6,-8(fp)
    6ad4:	e1ffff0d 	sth	r7,-4(fp)
    bool bSuccess = TRUE;
    6ad8:	00800044 	movi	r2,1
    6adc:	e0bffb15 	stw	r2,-20(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
    6ae0:	e0bfff0b 	ldhu	r2,-4(fp)
    6ae4:	1004d23a 	srli	r2,r2,8
    6ae8:	1007883a 	mov	r3,r2
    6aec:	00bfffc4 	movi	r2,-1
    6af0:	1884703a 	and	r2,r3,r2
    6af4:	e0bffa45 	stb	r2,-23(fp)
    AddrLow  = ControlAddr & 0xFF; 
    6af8:	e0bfff0b 	ldhu	r2,-4(fp)
    6afc:	1007883a 	mov	r3,r2
    6b00:	00bfffc4 	movi	r2,-1
    6b04:	1884703a 	and	r2,r3,r2
    6b08:	e0bffa05 	stb	r2,-24(fp)

    i2c_start(clk_base, data_base);
    6b0c:	e13ffc17 	ldw	r4,-16(fp)
    6b10:	e17ffd17 	ldw	r5,-12(fp)
    6b14:	00065cc0 	call	65cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    6b18:	e0bffe03 	ldbu	r2,-8(fp)
    6b1c:	11803fcc 	andi	r6,r2,255
    6b20:	e13ffc17 	ldw	r4,-16(fp)
    6b24:	e17ffd17 	ldw	r5,-12(fp)
    6b28:	00066d40 	call	66d4 <i2c_write>
    6b2c:	1004c03a 	cmpne	r2,r2,zero
    6b30:	1000041e 	bne	r2,zero,6b44 <I2CL_Read+0x8c>
        bSuccess = FALSE;
    6b34:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    6b38:	010001f4 	movhi	r4,7
    6b3c:	21113f04 	addi	r4,r4,17660
    6b40:	0007cd80 	call	7cd8 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
    6b44:	e0bffb17 	ldw	r2,-20(fp)
    6b48:	1005003a 	cmpeq	r2,r2,zero
    6b4c:	10000a1e 	bne	r2,zero,6b78 <I2CL_Read+0xc0>
    6b50:	e1bffa43 	ldbu	r6,-23(fp)
    6b54:	e13ffc17 	ldw	r4,-16(fp)
    6b58:	e17ffd17 	ldw	r5,-12(fp)
    6b5c:	00066d40 	call	66d4 <i2c_write>
    6b60:	1004c03a 	cmpne	r2,r2,zero
    6b64:	1000041e 	bne	r2,zero,6b78 <I2CL_Read+0xc0>
        bSuccess = FALSE;
    6b68:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    6b6c:	010001f4 	movhi	r4,7
    6b70:	21119d04 	addi	r4,r4,18036
    6b74:	0007cd80 	call	7cd8 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
    6b78:	e0bffb17 	ldw	r2,-20(fp)
    6b7c:	1005003a 	cmpeq	r2,r2,zero
    6b80:	10000a1e 	bne	r2,zero,6bac <I2CL_Read+0xf4>
    6b84:	e1bffa03 	ldbu	r6,-24(fp)
    6b88:	e13ffc17 	ldw	r4,-16(fp)
    6b8c:	e17ffd17 	ldw	r5,-12(fp)
    6b90:	00066d40 	call	66d4 <i2c_write>
    6b94:	1004c03a 	cmpne	r2,r2,zero
    6b98:	1000041e 	bne	r2,zero,6bac <I2CL_Read+0xf4>
        bSuccess = FALSE;
    6b9c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    6ba0:	010001f4 	movhi	r4,7
    6ba4:	2111a704 	addi	r4,r4,18076
    6ba8:	0007cd80 	call	7cd8 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
    6bac:	e13ffc17 	ldw	r4,-16(fp)
    6bb0:	e17ffd17 	ldw	r5,-12(fp)
    6bb4:	00065cc0 	call	65cc <i2c_start>
    DeviceAddr |= 1; // Read
    6bb8:	e0bffe03 	ldbu	r2,-8(fp)
    6bbc:	10800054 	ori	r2,r2,1
    6bc0:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
    6bc4:	e0bffb17 	ldw	r2,-20(fp)
    6bc8:	1005003a 	cmpeq	r2,r2,zero
    6bcc:	10000b1e 	bne	r2,zero,6bfc <I2CL_Read+0x144>
    6bd0:	e0bffe03 	ldbu	r2,-8(fp)
    6bd4:	11803fcc 	andi	r6,r2,255
    6bd8:	e13ffc17 	ldw	r4,-16(fp)
    6bdc:	e17ffd17 	ldw	r5,-12(fp)
    6be0:	00066d40 	call	66d4 <i2c_write>
    6be4:	1004c03a 	cmpne	r2,r2,zero
    6be8:	1000041e 	bne	r2,zero,6bfc <I2CL_Read+0x144>
        bSuccess = FALSE;
    6bec:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    6bf0:	010001f4 	movhi	r4,7
    6bf4:	21117304 	addi	r4,r4,17868
    6bf8:	0007cd80 	call	7cd8 <myprintf>
    }
    
    if (bSuccess){
    6bfc:	e0bffb17 	ldw	r2,-20(fp)
    6c00:	1005003a 	cmpeq	r2,r2,zero
    6c04:	1000051e 	bne	r2,zero,6c1c <I2CL_Read+0x164>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
    6c08:	e13ffc17 	ldw	r4,-16(fp)
    6c0c:	e17ffd17 	ldw	r5,-12(fp)
    6c10:	e1800217 	ldw	r6,8(fp)
    6c14:	000f883a 	mov	r7,zero
    6c18:	00068100 	call	6810 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
    6c1c:	e13ffc17 	ldw	r4,-16(fp)
    6c20:	e17ffd17 	ldw	r5,-12(fp)
    6c24:	00066540 	call	6654 <i2c_stop>
    
    return bSuccess;    
    6c28:	e0bffb17 	ldw	r2,-20(fp)
}
    6c2c:	e037883a 	mov	sp,fp
    6c30:	dfc00117 	ldw	ra,4(sp)
    6c34:	df000017 	ldw	fp,0(sp)
    6c38:	dec00204 	addi	sp,sp,8
    6c3c:	f800283a 	ret

00006c40 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
    6c40:	defff604 	addi	sp,sp,-40
    6c44:	dfc00915 	stw	ra,36(sp)
    6c48:	df000815 	stw	fp,32(sp)
    6c4c:	df000804 	addi	fp,sp,32
    6c50:	e13ffb15 	stw	r4,-20(fp)
    6c54:	e17ffc15 	stw	r5,-16(fp)
    6c58:	e0800317 	ldw	r2,12(fp)
    6c5c:	e1bffd05 	stb	r6,-12(fp)
    6c60:	e1fffe0d 	sth	r7,-8(fp)
    6c64:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
    6c68:	00800044 	movi	r2,1
    6c6c:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
    6c70:	e0bffe0b 	ldhu	r2,-8(fp)
    6c74:	1004d23a 	srli	r2,r2,8
    6c78:	1007883a 	mov	r3,r2
    6c7c:	00bfffc4 	movi	r2,-1
    6c80:	1884703a 	and	r2,r3,r2
    6c84:	e0bff845 	stb	r2,-31(fp)
    AddrLow  = ControlAddr & 0xFF;     
    6c88:	e0bffe0b 	ldhu	r2,-8(fp)
    6c8c:	1007883a 	mov	r3,r2
    6c90:	00bfffc4 	movi	r2,-1
    6c94:	1884703a 	and	r2,r3,r2
    6c98:	e0bff805 	stb	r2,-32(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
    6c9c:	e13ffb17 	ldw	r4,-20(fp)
    6ca0:	e17ffc17 	ldw	r5,-16(fp)
    6ca4:	00065cc0 	call	65cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    6ca8:	e0bffd03 	ldbu	r2,-12(fp)
    6cac:	11803fcc 	andi	r6,r2,255
    6cb0:	e13ffb17 	ldw	r4,-20(fp)
    6cb4:	e17ffc17 	ldw	r5,-16(fp)
    6cb8:	00066d40 	call	66d4 <i2c_write>
    6cbc:	1004c03a 	cmpne	r2,r2,zero
    6cc0:	1000041e 	bne	r2,zero,6cd4 <I2CL_MultipleRead+0x94>
        bSuccess = FALSE;
    6cc4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    6cc8:	010001f4 	movhi	r4,7
    6ccc:	21113f04 	addi	r4,r4,17660
    6cd0:	0007cd80 	call	7cd8 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
    6cd4:	e0bff917 	ldw	r2,-28(fp)
    6cd8:	1005003a 	cmpeq	r2,r2,zero
    6cdc:	10000a1e 	bne	r2,zero,6d08 <I2CL_MultipleRead+0xc8>
    6ce0:	e1bff843 	ldbu	r6,-31(fp)
    6ce4:	e13ffb17 	ldw	r4,-20(fp)
    6ce8:	e17ffc17 	ldw	r5,-16(fp)
    6cec:	00066d40 	call	66d4 <i2c_write>
    6cf0:	1004c03a 	cmpne	r2,r2,zero
    6cf4:	1000041e 	bne	r2,zero,6d08 <I2CL_MultipleRead+0xc8>
        bSuccess = FALSE;
    6cf8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    6cfc:	010001f4 	movhi	r4,7
    6d00:	21119d04 	addi	r4,r4,18036
    6d04:	0007cd80 	call	7cd8 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
    6d08:	e0bff917 	ldw	r2,-28(fp)
    6d0c:	1005003a 	cmpeq	r2,r2,zero
    6d10:	10000a1e 	bne	r2,zero,6d3c <I2CL_MultipleRead+0xfc>
    6d14:	e1bff803 	ldbu	r6,-32(fp)
    6d18:	e13ffb17 	ldw	r4,-20(fp)
    6d1c:	e17ffc17 	ldw	r5,-16(fp)
    6d20:	00066d40 	call	66d4 <i2c_write>
    6d24:	1004c03a 	cmpne	r2,r2,zero
    6d28:	1000041e 	bne	r2,zero,6d3c <I2CL_MultipleRead+0xfc>
        bSuccess = FALSE;
    6d2c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    6d30:	010001f4 	movhi	r4,7
    6d34:	2111a704 	addi	r4,r4,18076
    6d38:	0007cd80 	call	7cd8 <myprintf>
    }    
    if (bSuccess)        
    6d3c:	e0bff917 	ldw	r2,-28(fp)
    6d40:	1005003a 	cmpeq	r2,r2,zero
    6d44:	1000031e 	bne	r2,zero,6d54 <I2CL_MultipleRead+0x114>
        i2c_start(clk_base, data_base);  // restart
    6d48:	e13ffb17 	ldw	r4,-20(fp)
    6d4c:	e17ffc17 	ldw	r5,-16(fp)
    6d50:	00065cc0 	call	65cc <i2c_start>
    DeviceAddr |= 1; // Read
    6d54:	e0bffd03 	ldbu	r2,-12(fp)
    6d58:	10800054 	ori	r2,r2,1
    6d5c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
    6d60:	e0bff917 	ldw	r2,-28(fp)
    6d64:	1005003a 	cmpeq	r2,r2,zero
    6d68:	10000b1e 	bne	r2,zero,6d98 <I2CL_MultipleRead+0x158>
    6d6c:	e0bffd03 	ldbu	r2,-12(fp)
    6d70:	11803fcc 	andi	r6,r2,255
    6d74:	e13ffb17 	ldw	r4,-20(fp)
    6d78:	e17ffc17 	ldw	r5,-16(fp)
    6d7c:	00066d40 	call	66d4 <i2c_write>
    6d80:	1004c03a 	cmpne	r2,r2,zero
    6d84:	1000041e 	bne	r2,zero,6d98 <I2CL_MultipleRead+0x158>
        bSuccess = FALSE;
    6d88:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    6d8c:	010001f4 	movhi	r4,7
    6d90:	2111b104 	addi	r4,r4,18116
    6d94:	0007cd80 	call	7cd8 <myprintf>
    }
    
    if (bSuccess){
    6d98:	e0bff917 	ldw	r2,-28(fp)
    6d9c:	1005003a 	cmpeq	r2,r2,zero
    6da0:	1000161e 	bne	r2,zero,6dfc <I2CL_MultipleRead+0x1bc>
        for(i=0;i<len && bSuccess;i++){
    6da4:	e03ffa15 	stw	zero,-24(fp)
    6da8:	00000e06 	br	6de4 <I2CL_MultipleRead+0x1a4>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
    6dac:	e0bffa17 	ldw	r2,-24(fp)
    6db0:	1007883a 	mov	r3,r2
    6db4:	e0800217 	ldw	r2,8(fp)
    6db8:	188d883a 	add	r6,r3,r2
    6dbc:	e0bfff0b 	ldhu	r2,-4(fp)
    6dc0:	10ffffc4 	addi	r3,r2,-1
    6dc4:	e0bffa17 	ldw	r2,-24(fp)
    6dc8:	188ec03a 	cmpne	r7,r3,r2
    6dcc:	e13ffb17 	ldw	r4,-20(fp)
    6dd0:	e17ffc17 	ldw	r5,-16(fp)
    6dd4:	00068100 	call	6810 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
    6dd8:	e0bffa17 	ldw	r2,-24(fp)
    6ddc:	10800044 	addi	r2,r2,1
    6de0:	e0bffa15 	stw	r2,-24(fp)
    6de4:	e0ffff0b 	ldhu	r3,-4(fp)
    6de8:	e0bffa17 	ldw	r2,-24(fp)
    6dec:	10c0030e 	bge	r2,r3,6dfc <I2CL_MultipleRead+0x1bc>
    6df0:	e0bff917 	ldw	r2,-28(fp)
    6df4:	1004c03a 	cmpne	r2,r2,zero
    6df8:	103fec1e 	bne	r2,zero,6dac <I2CL_MultipleRead+0x16c>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
    6dfc:	e13ffb17 	ldw	r4,-20(fp)
    6e00:	e17ffc17 	ldw	r5,-16(fp)
    6e04:	00066540 	call	6654 <i2c_stop>
    
    return bSuccess;    
    6e08:	e0bff917 	ldw	r2,-28(fp)
    
} 
    6e0c:	e037883a 	mov	sp,fp
    6e10:	dfc00117 	ldw	ra,4(sp)
    6e14:	df000017 	ldw	fp,0(sp)
    6e18:	dec00204 	addi	sp,sp,8
    6e1c:	f800283a 	ret

00006e20 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
    6e20:	defff604 	addi	sp,sp,-40
    6e24:	dfc00915 	stw	ra,36(sp)
    6e28:	df000815 	stw	fp,32(sp)
    6e2c:	df000804 	addi	fp,sp,32
    6e30:	e13ffb15 	stw	r4,-20(fp)
    6e34:	e17ffc15 	stw	r5,-16(fp)
    6e38:	e0800317 	ldw	r2,12(fp)
    6e3c:	e1bffd05 	stb	r6,-12(fp)
    6e40:	e1fffe0d 	sth	r7,-8(fp)
    6e44:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
    6e48:	00800044 	movi	r2,1
    6e4c:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
    6e50:	e0bffe0b 	ldhu	r2,-8(fp)
    6e54:	1004d23a 	srli	r2,r2,8
    6e58:	1007883a 	mov	r3,r2
    6e5c:	00bfffc4 	movi	r2,-1
    6e60:	1884703a 	and	r2,r3,r2
    6e64:	e0bff945 	stb	r2,-27(fp)
    AddrLow  = ControlAddr & 0xFF; 
    6e68:	e0bffe0b 	ldhu	r2,-8(fp)
    6e6c:	1007883a 	mov	r3,r2
    6e70:	00bfffc4 	movi	r2,-1
    6e74:	1884703a 	and	r2,r3,r2
    6e78:	e0bff905 	stb	r2,-28(fp)
    

    i2c_start(clk_base, data_base);
    6e7c:	e13ffb17 	ldw	r4,-20(fp)
    6e80:	e17ffc17 	ldw	r5,-16(fp)
    6e84:	00065cc0 	call	65cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
    6e88:	e0bffd03 	ldbu	r2,-12(fp)
    6e8c:	11803fcc 	andi	r6,r2,255
    6e90:	e13ffb17 	ldw	r4,-20(fp)
    6e94:	e17ffc17 	ldw	r5,-16(fp)
    6e98:	00066d40 	call	66d4 <i2c_write>
    6e9c:	1004c03a 	cmpne	r2,r2,zero
    6ea0:	1000041e 	bne	r2,zero,6eb4 <I2CL_MultipleWrite+0x94>
        bSuccess = FALSE;
    6ea4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    6ea8:	010001f4 	movhi	r4,7
    6eac:	21113f04 	addi	r4,r4,17660
    6eb0:	0007cd80 	call	7cd8 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
    6eb4:	e0bffa17 	ldw	r2,-24(fp)
    6eb8:	1005003a 	cmpeq	r2,r2,zero
    6ebc:	10000a1e 	bne	r2,zero,6ee8 <I2CL_MultipleWrite+0xc8>
    6ec0:	e1bff943 	ldbu	r6,-27(fp)
    6ec4:	e13ffb17 	ldw	r4,-20(fp)
    6ec8:	e17ffc17 	ldw	r5,-16(fp)
    6ecc:	00066d40 	call	66d4 <i2c_write>
    6ed0:	1004c03a 	cmpne	r2,r2,zero
    6ed4:	1000041e 	bne	r2,zero,6ee8 <I2CL_MultipleWrite+0xc8>
        bSuccess = FALSE;
    6ed8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    6edc:	010001f4 	movhi	r4,7
    6ee0:	21119d04 	addi	r4,r4,18036
    6ee4:	0007cd80 	call	7cd8 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
    6ee8:	e0bffa17 	ldw	r2,-24(fp)
    6eec:	1005003a 	cmpeq	r2,r2,zero
    6ef0:	10000a1e 	bne	r2,zero,6f1c <I2CL_MultipleWrite+0xfc>
    6ef4:	e1bff903 	ldbu	r6,-28(fp)
    6ef8:	e13ffb17 	ldw	r4,-20(fp)
    6efc:	e17ffc17 	ldw	r5,-16(fp)
    6f00:	00066d40 	call	66d4 <i2c_write>
    6f04:	1004c03a 	cmpne	r2,r2,zero
    6f08:	1000041e 	bne	r2,zero,6f1c <I2CL_MultipleWrite+0xfc>
        bSuccess = FALSE;
    6f0c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    6f10:	010001f4 	movhi	r4,7
    6f14:	2111a704 	addi	r4,r4,18076
    6f18:	0007cd80 	call	7cd8 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
    6f1c:	e0bffa17 	ldw	r2,-24(fp)
    6f20:	1005003a 	cmpeq	r2,r2,zero
    6f24:	10001b1e 	bne	r2,zero,6f94 <I2CL_MultipleWrite+0x174>
        for(i=0;i<len && bSuccess;i++){
    6f28:	e03ff815 	stw	zero,-32(fp)
    6f2c:	00000d06 	br	6f64 <I2CL_MultipleWrite+0x144>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
    6f30:	e0bff817 	ldw	r2,-32(fp)
    6f34:	1007883a 	mov	r3,r2
    6f38:	e0800217 	ldw	r2,8(fp)
    6f3c:	1885883a 	add	r2,r3,r2
    6f40:	10800003 	ldbu	r2,0(r2)
    6f44:	11803fcc 	andi	r6,r2,255
    6f48:	e13ffb17 	ldw	r4,-20(fp)
    6f4c:	e17ffc17 	ldw	r5,-16(fp)
    6f50:	00066d40 	call	66d4 <i2c_write>
    6f54:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
    6f58:	e0bff817 	ldw	r2,-32(fp)
    6f5c:	10800044 	addi	r2,r2,1
    6f60:	e0bff815 	stw	r2,-32(fp)
    6f64:	e0ffff0b 	ldhu	r3,-4(fp)
    6f68:	e0bff817 	ldw	r2,-32(fp)
    6f6c:	10c0030e 	bge	r2,r3,6f7c <I2CL_MultipleWrite+0x15c>
    6f70:	e0bffa17 	ldw	r2,-24(fp)
    6f74:	1004c03a 	cmpne	r2,r2,zero
    6f78:	103fed1e 	bne	r2,zero,6f30 <I2CL_MultipleWrite+0x110>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
    6f7c:	e0bffa17 	ldw	r2,-24(fp)
    6f80:	1004c03a 	cmpne	r2,r2,zero
    6f84:	1000031e 	bne	r2,zero,6f94 <I2CL_MultipleWrite+0x174>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    6f88:	010001f4 	movhi	r4,7
    6f8c:	21115004 	addi	r4,r4,17728
    6f90:	0007cd80 	call	7cd8 <myprintf>
    }
    i2c_stop(clk_base, data_base);
    6f94:	e13ffb17 	ldw	r4,-20(fp)
    6f98:	e17ffc17 	ldw	r5,-16(fp)
    6f9c:	00066540 	call	6654 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
    6fa0:	0106d604 	movi	r4,7000
    6fa4:	0013ff40 	call	13ff4 <usleep>
    
    return bSuccess;
    6fa8:	e0bffa17 	ldw	r2,-24(fp)
    
}
    6fac:	e037883a 	mov	sp,fp
    6fb0:	dfc00117 	ldw	ra,4(sp)
    6fb4:	df000017 	ldw	fp,0(sp)
    6fb8:	dec00204 	addi	sp,sp,8
    6fbc:	f800283a 	ret

00006fc0 <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
    6fc0:	defff604 	addi	sp,sp,-40
    6fc4:	dfc00915 	stw	ra,36(sp)
    6fc8:	df000815 	stw	fp,32(sp)
    6fcc:	df000804 	addi	fp,sp,32
    6fd0:	e13ffc15 	stw	r4,-16(fp)
    6fd4:	e17ffd15 	stw	r5,-12(fp)
    6fd8:	e1bffe05 	stb	r6,-8(fp)
    6fdc:	e1ffff0d 	sth	r7,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
    6fe0:	e1bffe07 	ldb	r6,-8(fp)
    6fe4:	e1ffff0b 	ldhu	r7,-4(fp)
    6fe8:	e0bffb04 	addi	r2,fp,-20
    6fec:	d8800015 	stw	r2,0(sp)
    6ff0:	00800084 	movi	r2,2
    6ff4:	d8800115 	stw	r2,4(sp)
    6ff8:	e13ffc17 	ldw	r4,-16(fp)
    6ffc:	e17ffd17 	ldw	r5,-12(fp)
    7000:	0006c400 	call	6c40 <I2CL_MultipleRead>
    7004:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
    7008:	e0bffa17 	ldw	r2,-24(fp)
    700c:	1005003a 	cmpeq	r2,r2,zero
    7010:	10000a1e 	bne	r2,zero,703c <I2CL_Read16+0x7c>
        *pControlData = (szData[0] << 8 ) | szData[1];
    7014:	e0bffb03 	ldbu	r2,-20(fp)
    7018:	10803fcc 	andi	r2,r2,255
    701c:	1004923a 	slli	r2,r2,8
    7020:	1007883a 	mov	r3,r2
    7024:	e0bffb43 	ldbu	r2,-19(fp)
    7028:	10803fcc 	andi	r2,r2,255
    702c:	1884b03a 	or	r2,r3,r2
    7030:	1007883a 	mov	r3,r2
    7034:	e0800217 	ldw	r2,8(fp)
    7038:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
    703c:	e0bffa17 	ldw	r2,-24(fp)
}
    7040:	e037883a 	mov	sp,fp
    7044:	dfc00117 	ldw	ra,4(sp)
    7048:	df000017 	ldw	fp,0(sp)
    704c:	dec00204 	addi	sp,sp,8
    7050:	f800283a 	ret

00007054 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
    7054:	defff504 	addi	sp,sp,-44
    7058:	dfc00a15 	stw	ra,40(sp)
    705c:	df000915 	stw	fp,36(sp)
    7060:	df000904 	addi	fp,sp,36
    7064:	e13ffb15 	stw	r4,-20(fp)
    7068:	e17ffc15 	stw	r5,-16(fp)
    706c:	e0800217 	ldw	r2,8(fp)
    7070:	e1bffd05 	stb	r6,-12(fp)
    7074:	e1fffe0d 	sth	r7,-8(fp)
    7078:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
    707c:	e0bfff0b 	ldhu	r2,-4(fp)
    7080:	1004d23a 	srli	r2,r2,8
    7084:	1007883a 	mov	r3,r2
    7088:	00bfffc4 	movi	r2,-1
    708c:	1884703a 	and	r2,r3,r2
    7090:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
    7094:	e0bfff0b 	ldhu	r2,-4(fp)
    7098:	1007883a 	mov	r3,r2
    709c:	00bfffc4 	movi	r2,-1
    70a0:	1884703a 	and	r2,r3,r2
    70a4:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
    70a8:	e1bffd07 	ldb	r6,-12(fp)
    70ac:	e1fffe0b 	ldhu	r7,-8(fp)
    70b0:	e0bffa04 	addi	r2,fp,-24
    70b4:	d8800015 	stw	r2,0(sp)
    70b8:	00800084 	movi	r2,2
    70bc:	d8800115 	stw	r2,4(sp)
    70c0:	e13ffb17 	ldw	r4,-20(fp)
    70c4:	e17ffc17 	ldw	r5,-16(fp)
    70c8:	0006e200 	call	6e20 <I2CL_MultipleWrite>
    70cc:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
    70d0:	e0bff917 	ldw	r2,-28(fp)
}
    70d4:	e037883a 	mov	sp,fp
    70d8:	dfc00117 	ldw	ra,4(sp)
    70dc:	df000017 	ldw	fp,0(sp)
    70e0:	dec00204 	addi	sp,sp,8
    70e4:	f800283a 	ret

000070e8 <Write32_Data>:

#define SLEEP_TIME 15  //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
    70e8:	defffb04 	addi	sp,sp,-20
    70ec:	df000415 	stw	fp,16(sp)
    70f0:	df000404 	addi	fp,sp,16
    70f4:	e13ffd15 	stw	r4,-12(fp)
    70f8:	e17ffe15 	stw	r5,-8(fp)
    70fc:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
    7100:	e0bffe17 	ldw	r2,-8(fp)
    7104:	1085883a 	add	r2,r2,r2
    7108:	1085883a 	add	r2,r2,r2
    710c:	1007883a 	mov	r3,r2
    7110:	e0bffd17 	ldw	r2,-12(fp)
    7114:	1885883a 	add	r2,r3,r2
    7118:	1007883a 	mov	r3,r2
    711c:	e0bfff17 	ldw	r2,-4(fp)
    7120:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
    7124:	00800044 	movi	r2,1
    7128:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
    712c:	e0bffc17 	ldw	r2,-16(fp)
}
    7130:	e037883a 	mov	sp,fp
    7134:	df000017 	ldw	fp,0(sp)
    7138:	dec00104 	addi	sp,sp,4
    713c:	f800283a 	ret

00007140 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
    7140:	defffb04 	addi	sp,sp,-20
    7144:	df000415 	stw	fp,16(sp)
    7148:	df000404 	addi	fp,sp,16
    714c:	e13ffd15 	stw	r4,-12(fp)
    7150:	e17ffe15 	stw	r5,-8(fp)
    7154:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
    7158:	e0bffe17 	ldw	r2,-8(fp)
    715c:	1085883a 	add	r2,r2,r2
    7160:	1085883a 	add	r2,r2,r2
    7164:	1007883a 	mov	r3,r2
    7168:	e0bffd17 	ldw	r2,-12(fp)
    716c:	1885883a 	add	r2,r3,r2
    7170:	10c00037 	ldwio	r3,0(r2)
    7174:	e0bfff17 	ldw	r2,-4(fp)
    7178:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
    717c:	00800044 	movi	r2,1
    7180:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
    7184:	e0bffc17 	ldw	r2,-16(fp)
}
    7188:	e037883a 	mov	sp,fp
    718c:	df000017 	ldw	fp,0(sp)
    7190:	dec00104 	addi	sp,sp,4
    7194:	f800283a 	ret

00007198 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base)
{
    7198:	defffb04 	addi	sp,sp,-20
    719c:	dfc00415 	stw	ra,16(sp)
    71a0:	df000315 	stw	fp,12(sp)
    71a4:	df000304 	addi	fp,sp,12
    71a8:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
    71ac:	00800044 	movi	r2,1
    71b0:	e0bffe15 	stw	r2,-8(fp)
	alt_32 read_data;
    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
   IOWR(i2c_base, 0,0x18);//write high prescale
    71b4:	e0bfff17 	ldw	r2,-4(fp)
    71b8:	1007883a 	mov	r3,r2
    71bc:	00800604 	movi	r2,24
    71c0:	18800035 	stwio	r2,0(r3)
   IOWR(i2c_base, 1,0x00);//write low prescale
    71c4:	e0bfff17 	ldw	r2,-4(fp)
    71c8:	10800104 	addi	r2,r2,4
    71cc:	10000035 	stwio	zero,0(r2)
   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2,0x80);
    71d0:	e0bfff17 	ldw	r2,-4(fp)
    71d4:	10800204 	addi	r2,r2,8
    71d8:	1007883a 	mov	r3,r2
    71dc:	00802004 	movi	r2,128
    71e0:	18800035 	stwio	r2,0(r3)

    read_data =IORD(i2c_base, 0);
    71e4:	e0bfff17 	ldw	r2,-4(fp)
    71e8:	10800037 	ldwio	r2,0(r2)
    71ec:	e0bffd15 	stw	r2,-12(fp)
    if( (read_data & 0x00ff) != 0x18)
    71f0:	e0bffd17 	ldw	r2,-12(fp)
    71f4:	10803fcc 	andi	r2,r2,255
    71f8:	10800620 	cmpeqi	r2,r2,24
    71fc:	10000b1e 	bne	r2,zero,722c <oc_i2c_init+0x94>
    {
    	bSuccess = FALSE;
    7200:	e03ffe15 	stw	zero,-8(fp)
       	read_data =IORD(i2c_base, 1);
    7204:	e0bfff17 	ldw	r2,-4(fp)
    7208:	10800104 	addi	r2,r2,4
    720c:	10800037 	ldwio	r2,0(r2)
    7210:	e0bffd15 	stw	r2,-12(fp)
		if((read_data & 0x00ff) != 0x00){
    7214:	e0bffd17 	ldw	r2,-12(fp)
    7218:	10803fcc 	andi	r2,r2,255
    721c:	1005003a 	cmpeq	r2,r2,zero
    7220:	10000e1e 	bne	r2,zero,725c <oc_i2c_init+0xc4>
			bSuccess = FALSE;
    7224:	e03ffe15 	stw	zero,-8(fp)
    7228:	00000c06 	br	725c <oc_i2c_init+0xc4>
		}
    }
    else if (bSuccess){
    722c:	e0bffe17 	ldw	r2,-8(fp)
    7230:	1005003a 	cmpeq	r2,r2,zero
    7234:	1000091e 	bne	r2,zero,725c <oc_i2c_init+0xc4>
    	read_data =IORD(i2c_base, 2);
    7238:	e0bfff17 	ldw	r2,-4(fp)
    723c:	10800204 	addi	r2,r2,8
    7240:	10800037 	ldwio	r2,0(r2)
    7244:	e0bffd15 	stw	r2,-12(fp)
        if( (read_data & 0x00ff) != 0x80 ){
    7248:	e0bffd17 	ldw	r2,-12(fp)
    724c:	10803fcc 	andi	r2,r2,255
    7250:	10802020 	cmpeqi	r2,r2,128
    7254:	1000011e 	bne	r2,zero,725c <oc_i2c_init+0xc4>
            bSuccess = FALSE;
    7258:	e03ffe15 	stw	zero,-8(fp)
        }
    }

   if (bSuccess)
    725c:	e0bffe17 	ldw	r2,-8(fp)
    7260:	1005003a 	cmpeq	r2,r2,zero
    7264:	1000041e 	bne	r2,zero,7278 <oc_i2c_init+0xe0>
       printf("\nI2C core is enabled! \r\n");
    7268:	010001f4 	movhi	r4,7
    726c:	2111bc04 	addi	r4,r4,18160
    7270:	000b1300 	call	b130 <puts>
    7274:	00000306 	br	7284 <oc_i2c_init+0xec>
   else
       printf("\nI2C core is not enabled! \r\n");
    7278:	010001f4 	movhi	r4,7
    727c:	2111c204 	addi	r4,r4,18184
    7280:	000b1300 	call	b130 <puts>

   return bSuccess;
    7284:	e0bffe17 	ldw	r2,-8(fp)

}
    7288:	e037883a 	mov	sp,fp
    728c:	dfc00117 	ldw	ra,4(sp)
    7290:	df000017 	ldw	fp,0(sp)
    7294:	dec00204 	addi	sp,sp,8
    7298:	f800283a 	ret

0000729c <ACK_single_check>:

bool  ACK_single_check(alt_32 i2c_base)
{
    729c:	defffb04 	addi	sp,sp,-20
    72a0:	dfc00415 	stw	ra,16(sp)
    72a4:	df000315 	stw	fp,12(sp)
    72a8:	df000304 	addi	fp,sp,12
    72ac:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
    72b0:	00800044 	movi	r2,1
    72b4:	e0bffe15 	stw	r2,-8(fp)
	alt_32 read_data;

    usleep(SLEEP_TIME);
    72b8:	010003c4 	movi	r4,15
    72bc:	0013ff40 	call	13ff4 <usleep>
    read_data =IORD(i2c_base, 4);
    72c0:	e0bfff17 	ldw	r2,-4(fp)
    72c4:	10800404 	addi	r2,r2,16
    72c8:	10800037 	ldwio	r2,0(r2)
    72cc:	e0bffd15 	stw	r2,-12(fp)
    if(read_data & 0x02)
    72d0:	e0bffd17 	ldw	r2,-12(fp)
    72d4:	1080008c 	andi	r2,r2,2
    72d8:	1005003a 	cmpeq	r2,r2,zero
    72dc:	1000011e 	bne	r2,zero,72e4 <ACK_single_check+0x48>
            bSuccess = FALSE;
    72e0:	e03ffe15 	stw	zero,-8(fp)
     if (bSuccess){
    72e4:	e0bffe17 	ldw	r2,-8(fp)
    72e8:	1005003a 	cmpeq	r2,r2,zero
    72ec:	10000b1e 	bne	r2,zero,731c <ACK_single_check+0x80>
            usleep(SLEEP_TIME);
    72f0:	010003c4 	movi	r4,15
    72f4:	0013ff40 	call	13ff4 <usleep>
            read_data =IORD(i2c_base, 4);
    72f8:	e0bfff17 	ldw	r2,-4(fp)
    72fc:	10800404 	addi	r2,r2,16
    7300:	10800037 	ldwio	r2,0(r2)
    7304:	e0bffd15 	stw	r2,-12(fp)
                if(read_data & 0x80)
    7308:	e0bffd17 	ldw	r2,-12(fp)
    730c:	1080200c 	andi	r2,r2,128
    7310:	1005003a 	cmpeq	r2,r2,zero
    7314:	1000011e 	bne	r2,zero,731c <ACK_single_check+0x80>
                    bSuccess = FALSE;
    7318:	e03ffe15 	stw	zero,-8(fp)
     }
    return bSuccess;
    731c:	e0bffe17 	ldw	r2,-8(fp)
}
    7320:	e037883a 	mov	sp,fp
    7324:	dfc00117 	ldw	ra,4(sp)
    7328:	df000017 	ldw	fp,0(sp)
    732c:	dec00204 	addi	sp,sp,8
    7330:	f800283a 	ret

00007334 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
    7334:	defffb04 	addi	sp,sp,-20
    7338:	dfc00415 	stw	ra,16(sp)
    733c:	df000315 	stw	fp,12(sp)
    7340:	df000304 	addi	fp,sp,12
    7344:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
    7348:	e03ffe15 	stw	zero,-8(fp)
    int i=0;
    734c:	e03ffd15 	stw	zero,-12(fp)

    while(!bSuccess && i++ < 10){
    7350:	00000306 	br	7360 <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
    7354:	e13fff17 	ldw	r4,-4(fp)
    7358:	000729c0 	call	729c <ACK_single_check>
    735c:	e0bffe15 	stw	r2,-8(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
    7360:	e0bffe17 	ldw	r2,-8(fp)
    7364:	1004c03a 	cmpne	r2,r2,zero
    7368:	1000091e 	bne	r2,zero,7390 <ACK_check+0x5c>
    736c:	e0bffd17 	ldw	r2,-12(fp)
    7370:	10800290 	cmplti	r2,r2,10
    7374:	1007883a 	mov	r3,r2
    7378:	e0bffd17 	ldw	r2,-12(fp)
    737c:	10800044 	addi	r2,r2,1
    7380:	e0bffd15 	stw	r2,-12(fp)
    7384:	18803fcc 	andi	r2,r3,255
    7388:	1004c03a 	cmpne	r2,r2,zero
    738c:	103ff11e 	bne	r2,zero,7354 <ACK_check+0x20>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
    7390:	e0bffe17 	ldw	r2,-8(fp)
}
    7394:	e037883a 	mov	sp,fp
    7398:	dfc00117 	ldw	ra,4(sp)
    739c:	df000017 	ldw	fp,0(sp)
    73a0:	dec00204 	addi	sp,sp,8
    73a4:	f800283a 	ret

000073a8 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
    73a8:	defff804 	addi	sp,sp,-32
    73ac:	dfc00715 	stw	ra,28(sp)
    73b0:	df000615 	stw	fp,24(sp)
    73b4:	df000604 	addi	fp,sp,24
    73b8:	e13ffb15 	stw	r4,-20(fp)
    73bc:	e1fffe15 	stw	r7,-8(fp)
    73c0:	e17ffc05 	stb	r5,-16(fp)
    73c4:	e1bffd05 	stb	r6,-12(fp)
    //DWORD reg_data = 0x0;
    int i;
   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
    73c8:	e1bffc03 	ldbu	r6,-16(fp)
    73cc:	e13ffb17 	ldw	r4,-20(fp)
    73d0:	014000c4 	movi	r5,3
    73d4:	00070e80 	call	70e8 <Write32_Data>
    73d8:	1004c03a 	cmpne	r2,r2,zero
    73dc:	1000051e 	bne	r2,zero,73f4 <OC_I2C_Write+0x4c>
       printf("OC_I2C_Write error[0]\r\n");
    73e0:	010001f4 	movhi	r4,7
    73e4:	2111c904 	addi	r4,r4,18212
    73e8:	000b1300 	call	b130 <puts>
       return FALSE;
    73ec:	e03fff15 	stw	zero,-4(fp)
    73f0:	00006e06 	br	75ac <OC_I2C_Write+0x204>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
    73f4:	e13ffb17 	ldw	r4,-20(fp)
    73f8:	01400104 	movi	r5,4
    73fc:	01802404 	movi	r6,144
    7400:	00070e80 	call	70e8 <Write32_Data>
    7404:	1004c03a 	cmpne	r2,r2,zero
    7408:	1000051e 	bne	r2,zero,7420 <OC_I2C_Write+0x78>
       printf("OC_I2C_Write error[1]\r\n");
    740c:	010001f4 	movhi	r4,7
    7410:	2111cf04 	addi	r4,r4,18236
    7414:	000b1300 	call	b130 <puts>
       return FALSE;
    7418:	e03fff15 	stw	zero,-4(fp)
    741c:	00006306 	br	75ac <OC_I2C_Write+0x204>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
    7420:	e13ffb17 	ldw	r4,-20(fp)
    7424:	00073340 	call	7334 <ACK_check>
    7428:	1004c03a 	cmpne	r2,r2,zero
    742c:	1000051e 	bne	r2,zero,7444 <OC_I2C_Write+0x9c>
        printf("OC_I2C_Write error[2]\r\n");
    7430:	010001f4 	movhi	r4,7
    7434:	2111d504 	addi	r4,r4,18260
    7438:	000b1300 	call	b130 <puts>
        return FALSE;
    743c:	e03fff15 	stw	zero,-4(fp)
    7440:	00005a06 	br	75ac <OC_I2C_Write+0x204>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
    7444:	e1bffd03 	ldbu	r6,-12(fp)
    7448:	e13ffb17 	ldw	r4,-20(fp)
    744c:	014000c4 	movi	r5,3
    7450:	00070e80 	call	70e8 <Write32_Data>
    7454:	1004c03a 	cmpne	r2,r2,zero
    7458:	1000051e 	bne	r2,zero,7470 <OC_I2C_Write+0xc8>
       printf("OC_I2C_Write error[3]\r\n");
    745c:	010001f4 	movhi	r4,7
    7460:	2111db04 	addi	r4,r4,18284
    7464:	000b1300 	call	b130 <puts>
       return FALSE;
    7468:	e03fff15 	stw	zero,-4(fp)
    746c:	00004f06 	br	75ac <OC_I2C_Write+0x204>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
    7470:	e13ffb17 	ldw	r4,-20(fp)
    7474:	01400104 	movi	r5,4
    7478:	01800404 	movi	r6,16
    747c:	00070e80 	call	70e8 <Write32_Data>
    7480:	1004c03a 	cmpne	r2,r2,zero
    7484:	1000051e 	bne	r2,zero,749c <OC_I2C_Write+0xf4>
        printf("OC_I2C_Write error[4]\r\n");
    7488:	010001f4 	movhi	r4,7
    748c:	2111e104 	addi	r4,r4,18308
    7490:	000b1300 	call	b130 <puts>
        return FALSE;
    7494:	e03fff15 	stw	zero,-4(fp)
    7498:	00004406 	br	75ac <OC_I2C_Write+0x204>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
    749c:	e13ffb17 	ldw	r4,-20(fp)
    74a0:	00073340 	call	7334 <ACK_check>
    74a4:	1004c03a 	cmpne	r2,r2,zero
    74a8:	1000051e 	bne	r2,zero,74c0 <OC_I2C_Write+0x118>
        printf("OC_I2C_Write error[5]\r\n");
    74ac:	010001f4 	movhi	r4,7
    74b0:	2111e704 	addi	r4,r4,18332
    74b4:	000b1300 	call	b130 <puts>
        return FALSE;
    74b8:	e03fff15 	stw	zero,-4(fp)
    74bc:	00003b06 	br	75ac <OC_I2C_Write+0x204>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
    74c0:	e03ffa15 	stw	zero,-24(fp)
    74c4:	00002706 	br	7564 <OC_I2C_Write+0x1bc>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
    74c8:	e0bffa17 	ldw	r2,-24(fp)
    74cc:	1007883a 	mov	r3,r2
    74d0:	e0bffe17 	ldw	r2,-8(fp)
    74d4:	1885883a 	add	r2,r3,r2
    74d8:	10800003 	ldbu	r2,0(r2)
    74dc:	11803fcc 	andi	r6,r2,255
    74e0:	e13ffb17 	ldw	r4,-20(fp)
    74e4:	014000c4 	movi	r5,3
    74e8:	00070e80 	call	70e8 <Write32_Data>
    74ec:	1004c03a 	cmpne	r2,r2,zero
    74f0:	1000051e 	bne	r2,zero,7508 <OC_I2C_Write+0x160>
              printf("OC_I2C_Write error[6]\r\n");
    74f4:	010001f4 	movhi	r4,7
    74f8:	2111ed04 	addi	r4,r4,18356
    74fc:	000b1300 	call	b130 <puts>
              return FALSE;
    7500:	e03fff15 	stw	zero,-4(fp)
    7504:	00002906 	br	75ac <OC_I2C_Write+0x204>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
    7508:	e13ffb17 	ldw	r4,-20(fp)
    750c:	01400104 	movi	r5,4
    7510:	01800404 	movi	r6,16
    7514:	00070e80 	call	70e8 <Write32_Data>
    7518:	1004c03a 	cmpne	r2,r2,zero
    751c:	1000051e 	bne	r2,zero,7534 <OC_I2C_Write+0x18c>
             printf("OC_I2C_Write error[7]\r\n");
    7520:	010001f4 	movhi	r4,7
    7524:	2111f304 	addi	r4,r4,18380
    7528:	000b1300 	call	b130 <puts>
              return FALSE;
    752c:	e03fff15 	stw	zero,-4(fp)
    7530:	00001e06 	br	75ac <OC_I2C_Write+0x204>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
    7534:	e13ffb17 	ldw	r4,-20(fp)
    7538:	00073340 	call	7334 <ACK_check>
    753c:	1004c03a 	cmpne	r2,r2,zero
    7540:	1000051e 	bne	r2,zero,7558 <OC_I2C_Write+0x1b0>
              printf("OC_I2C_Write error[8]\r\n");
    7544:	010001f4 	movhi	r4,7
    7548:	2111f904 	addi	r4,r4,18404
    754c:	000b1300 	call	b130 <puts>
              return FALSE;
    7550:	e03fff15 	stw	zero,-4(fp)
    7554:	00001506 	br	75ac <OC_I2C_Write+0x204>
        return FALSE;
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
    7558:	e0bffa17 	ldw	r2,-24(fp)
    755c:	10800044 	addi	r2,r2,1
    7560:	e0bffa15 	stw	r2,-24(fp)
    7564:	e0fffa17 	ldw	r3,-24(fp)
    7568:	e0800217 	ldw	r2,8(fp)
    756c:	18bfd616 	blt	r3,r2,74c8 <OC_I2C_Write+0x120>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
    7570:	e13ffb17 	ldw	r4,-20(fp)
    7574:	01400104 	movi	r5,4
    7578:	01801004 	movi	r6,64
    757c:	00070e80 	call	70e8 <Write32_Data>
    7580:	1004c03a 	cmpne	r2,r2,zero
    7584:	1000051e 	bne	r2,zero,759c <OC_I2C_Write+0x1f4>
         printf("OC_I2C_Write error[9]\r\n");
    7588:	010001f4 	movhi	r4,7
    758c:	2111ff04 	addi	r4,r4,18428
    7590:	000b1300 	call	b130 <puts>
         return FALSE;
    7594:	e03fff15 	stw	zero,-4(fp)
    7598:	00000406 	br	75ac <OC_I2C_Write+0x204>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
    759c:	010003c4 	movi	r4,15
    75a0:	0013ff40 	call	13ff4 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
    75a4:	00800044 	movi	r2,1
    75a8:	e0bfff15 	stw	r2,-4(fp)
    75ac:	e0bfff17 	ldw	r2,-4(fp)

}
    75b0:	e037883a 	mov	sp,fp
    75b4:	dfc00117 	ldw	ra,4(sp)
    75b8:	df000017 	ldw	fp,0(sp)
    75bc:	dec00204 	addi	sp,sp,8
    75c0:	f800283a 	ret

000075c4 <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
    75c4:	defffb04 	addi	sp,sp,-20
    75c8:	dfc00415 	stw	ra,16(sp)
    75cc:	df000315 	stw	fp,12(sp)
    75d0:	df000304 	addi	fp,sp,12
    75d4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(SLEEP_TIME);
    75d8:	010003c4 	movi	r4,15
    75dc:	0013ff40 	call	13ff4 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
    75e0:	e1bffe04 	addi	r6,fp,-8
    75e4:	e13fff17 	ldw	r4,-4(fp)
    75e8:	01400104 	movi	r5,4
    75ec:	00071400 	call	7140 <Read32_Data>
    75f0:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
    75f4:	e0bffd17 	ldw	r2,-12(fp)
    75f8:	1005003a 	cmpeq	r2,r2,zero
    75fc:	1000051e 	bne	r2,zero,7614 <ACK_judge_for_read+0x50>
        if(this_data & 0x02)
    7600:	e0bffe17 	ldw	r2,-8(fp)
    7604:	1080008c 	andi	r2,r2,2
    7608:	1005003a 	cmpeq	r2,r2,zero
    760c:	1000011e 	bne	r2,zero,7614 <ACK_judge_for_read+0x50>
            bSuccess = FALSE;
    7610:	e03ffd15 	stw	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
    7614:	e0bffd17 	ldw	r2,-12(fp)

}
    7618:	e037883a 	mov	sp,fp
    761c:	dfc00117 	ldw	ra,4(sp)
    7620:	df000017 	ldw	fp,0(sp)
    7624:	dec00204 	addi	sp,sp,8
    7628:	f800283a 	ret

0000762c <OC_I2C_Read>:


bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
    762c:	defff504 	addi	sp,sp,-44
    7630:	dfc00a15 	stw	ra,40(sp)
    7634:	df000915 	stw	fp,36(sp)
    7638:	df000904 	addi	fp,sp,36
    763c:	e13ff915 	stw	r4,-28(fp)
    7640:	e1fffc15 	stw	r7,-16(fp)
    7644:	e17ffa05 	stb	r5,-24(fp)
    7648:	e1bffb05 	stb	r6,-20(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
    764c:	e0bff917 	ldw	r2,-28(fp)
    7650:	10800304 	addi	r2,r2,12
    7654:	e0fffa03 	ldbu	r3,-24(fp)
    7658:	10c00035 	stwio	r3,0(r2)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
    765c:	e0bff917 	ldw	r2,-28(fp)
    7660:	10800404 	addi	r2,r2,16
    7664:	1007883a 	mov	r3,r2
    7668:	00802404 	movi	r2,144
    766c:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
    7670:	e13ff917 	ldw	r4,-28(fp)
    7674:	00073340 	call	7334 <ACK_check>
    7678:	1004c03a 	cmpne	r2,r2,zero
    767c:	1000051e 	bne	r2,zero,7694 <OC_I2C_Read+0x68>
       printf("OC_I2C_Read error[2]\r\n");
    7680:	010001f4 	movhi	r4,7
    7684:	21120504 	addi	r4,r4,18452
    7688:	000b1300 	call	b130 <puts>
       return FALSE;
    768c:	e03fff15 	stw	zero,-4(fp)
    7690:	00005d06 	br	7808 <OC_I2C_Read+0x1dc>
   }
   IOWR(i2c_base, 3,sub_address);
    7694:	e0bff917 	ldw	r2,-28(fp)
    7698:	10800304 	addi	r2,r2,12
    769c:	e0fffb03 	ldbu	r3,-20(fp)
    76a0:	10c00035 	stwio	r3,0(r2)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
    76a4:	e0bff917 	ldw	r2,-28(fp)
    76a8:	10800404 	addi	r2,r2,16
    76ac:	1007883a 	mov	r3,r2
    76b0:	00800404 	movi	r2,16
    76b4:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
    76b8:	e13ff917 	ldw	r4,-28(fp)
    76bc:	00073340 	call	7334 <ACK_check>
    76c0:	1004c03a 	cmpne	r2,r2,zero
    76c4:	1000051e 	bne	r2,zero,76dc <OC_I2C_Read+0xb0>
        printf("OC_I2C_Read error[5]\r\n");
    76c8:	010001f4 	movhi	r4,7
    76cc:	21120b04 	addi	r4,r4,18476
    76d0:	000b1300 	call	b130 <puts>
        return FALSE;
    76d4:	e03fff15 	stw	zero,-4(fp)
    76d8:	00004b06 	br	7808 <OC_I2C_Read+0x1dc>
    }
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
    IOWR(i2c_base, 3,device_address|0x01);
    76dc:	e0bff917 	ldw	r2,-28(fp)
    76e0:	11000304 	addi	r4,r2,12
    76e4:	e0bffa03 	ldbu	r2,-24(fp)
    76e8:	10800054 	ori	r2,r2,1
    76ec:	10c03fcc 	andi	r3,r2,255
    76f0:	2005883a 	mov	r2,r4
    76f4:	10c00035 	stwio	r3,0(r2)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
    76f8:	e0bff917 	ldw	r2,-28(fp)
    76fc:	10800404 	addi	r2,r2,16
    7700:	1007883a 	mov	r3,r2
    7704:	00802404 	movi	r2,144
    7708:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
    770c:	e13ff917 	ldw	r4,-28(fp)
    7710:	00073340 	call	7334 <ACK_check>
    7714:	1004c03a 	cmpne	r2,r2,zero
    7718:	1000051e 	bne	r2,zero,7730 <OC_I2C_Read+0x104>
        printf("OC_I2C_Read error[8]\r\n");
    771c:	010001f4 	movhi	r4,7
    7720:	21121104 	addi	r4,r4,18500
    7724:	000b1300 	call	b130 <puts>
        return FALSE;
    7728:	e03fff15 	stw	zero,-4(fp)
    772c:	00003606 	br	7808 <OC_I2C_Read+0x1dc>
    }

    for(i=0;i<nReadLength;i++){
    7730:	e03ff715 	stw	zero,-36(fp)
    7734:	00002806 	br	77d8 <OC_I2C_Read+0x1ac>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
    7738:	e0bff917 	ldw	r2,-28(fp)
    773c:	10800404 	addi	r2,r2,16
    7740:	e0bffe15 	stw	r2,-8(fp)
    7744:	e0bff717 	ldw	r2,-36(fp)
    7748:	10c00044 	addi	r3,r2,1
    774c:	e0800217 	ldw	r2,8(fp)
    7750:	1880031e 	bne	r3,r2,7760 <OC_I2C_Read+0x134>
    7754:	00800a04 	movi	r2,40
    7758:	e0bffd15 	stw	r2,-12(fp)
    775c:	00000206 	br	7768 <OC_I2C_Read+0x13c>
    7760:	00c00804 	movi	r3,32
    7764:	e0fffd15 	stw	r3,-12(fp)
    7768:	e0bffe17 	ldw	r2,-8(fp)
    776c:	e0fffd17 	ldw	r3,-12(fp)
    7770:	10c00035 	stwio	r3,0(r2)

        if (!ACK_judge_for_read( i2c_base)){
    7774:	e13ff917 	ldw	r4,-28(fp)
    7778:	00075c40 	call	75c4 <ACK_judge_for_read>
    777c:	1004c03a 	cmpne	r2,r2,zero
    7780:	1000051e 	bne	r2,zero,7798 <OC_I2C_Read+0x16c>
            printf("OC_I2C_Read error[10]\r\n");
    7784:	010001f4 	movhi	r4,7
    7788:	21121704 	addi	r4,r4,18524
    778c:	000b1300 	call	b130 <puts>
            return FALSE;
    7790:	e03fff15 	stw	zero,-4(fp)
    7794:	00001c06 	br	7808 <OC_I2C_Read+0x1dc>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
    7798:	e0bff917 	ldw	r2,-28(fp)
    779c:	10800304 	addi	r2,r2,12
    77a0:	10800037 	ldwio	r2,0(r2)
    77a4:	e0bff815 	stw	r2,-32(fp)
        *(pData8+i) =  Data32 & 0xff;
    77a8:	e0bff717 	ldw	r2,-36(fp)
    77ac:	1007883a 	mov	r3,r2
    77b0:	e0bffc17 	ldw	r2,-16(fp)
    77b4:	1889883a 	add	r4,r3,r2
    77b8:	e0bff817 	ldw	r2,-32(fp)
    77bc:	1007883a 	mov	r3,r2
    77c0:	00bfffc4 	movi	r2,-1
    77c4:	1884703a 	and	r2,r3,r2
    77c8:	20800005 	stb	r2,0(r4)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
    77cc:	e0bff717 	ldw	r2,-36(fp)
    77d0:	10800044 	addi	r2,r2,1
    77d4:	e0bff715 	stw	r2,-36(fp)
    77d8:	e0fff717 	ldw	r3,-36(fp)
    77dc:	e0800217 	ldw	r2,8(fp)
    77e0:	18bfd516 	blt	r3,r2,7738 <OC_I2C_Read+0x10c>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
    77e4:	e0bff917 	ldw	r2,-28(fp)
    77e8:	10800404 	addi	r2,r2,16
    77ec:	1007883a 	mov	r3,r2
    77f0:	00801004 	movi	r2,64
    77f4:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
    77f8:	010003c4 	movi	r4,15
    77fc:	0013ff40 	call	13ff4 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
    7800:	00800044 	movi	r2,1
    7804:	e0bfff15 	stw	r2,-4(fp)
    7808:	e0bfff17 	ldw	r2,-4(fp)

}
    780c:	e037883a 	mov	sp,fp
    7810:	dfc00117 	ldw	ra,4(sp)
    7814:	df000017 	ldw	fp,0(sp)
    7818:	dec00204 	addi	sp,sp,8
    781c:	f800283a 	ret

00007820 <OC_I2CL_Write>:
//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,int sub_address,alt_u8 *pData, int nWriteLength)
    {
    7820:	defff704 	addi	sp,sp,-36
    7824:	dfc00815 	stw	ra,32(sp)
    7828:	df000715 	stw	fp,28(sp)
    782c:	df000704 	addi	fp,sp,28
    7830:	e13ffb15 	stw	r4,-20(fp)
    7834:	e1bffd15 	stw	r6,-12(fp)
    7838:	e1fffe15 	stw	r7,-8(fp)
    783c:	e17ffc05 	stb	r5,-16(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
    7840:	e0bffd17 	ldw	r2,-12(fp)
    7844:	1005d23a 	srai	r2,r2,8
    7848:	1007883a 	mov	r3,r2
    784c:	00bfffc4 	movi	r2,-1
    7850:	1884703a 	and	r2,r3,r2
    7854:	e0bffa45 	stb	r2,-23(fp)
    AddrLow  = sub_address & 0xFF;
    7858:	e0bffd17 	ldw	r2,-12(fp)
    785c:	1007883a 	mov	r3,r2
    7860:	00bfffc4 	movi	r2,-1
    7864:	1884703a 	and	r2,r3,r2
    7868:	e0bffa05 	stb	r2,-24(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
    786c:	e1bffc03 	ldbu	r6,-16(fp)
    7870:	e13ffb17 	ldw	r4,-20(fp)
    7874:	014000c4 	movi	r5,3
    7878:	00070e80 	call	70e8 <Write32_Data>
    787c:	1004c03a 	cmpne	r2,r2,zero
    7880:	1000021e 	bne	r2,zero,788c <OC_I2CL_Write+0x6c>
       return FALSE;
    7884:	e03fff15 	stw	zero,-4(fp)
    7888:	00006506 	br	7a20 <OC_I2CL_Write+0x200>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
    788c:	e13ffb17 	ldw	r4,-20(fp)
    7890:	01400104 	movi	r5,4
    7894:	01802404 	movi	r6,144
    7898:	00070e80 	call	70e8 <Write32_Data>
    789c:	1004c03a 	cmpne	r2,r2,zero
    78a0:	1000021e 	bne	r2,zero,78ac <OC_I2CL_Write+0x8c>
       return FALSE;
    78a4:	e03fff15 	stw	zero,-4(fp)
    78a8:	00005d06 	br	7a20 <OC_I2CL_Write+0x200>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    78ac:	e13ffb17 	ldw	r4,-20(fp)
    78b0:	00073340 	call	7334 <ACK_check>
    78b4:	1004c03a 	cmpne	r2,r2,zero
    78b8:	1000021e 	bne	r2,zero,78c4 <OC_I2CL_Write+0xa4>
        return FALSE;
    78bc:	e03fff15 	stw	zero,-4(fp)
    78c0:	00005706 	br	7a20 <OC_I2CL_Write+0x200>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
    78c4:	e1bffa43 	ldbu	r6,-23(fp)
    78c8:	e13ffb17 	ldw	r4,-20(fp)
    78cc:	014000c4 	movi	r5,3
    78d0:	00070e80 	call	70e8 <Write32_Data>
    78d4:	1004c03a 	cmpne	r2,r2,zero
    78d8:	1000021e 	bne	r2,zero,78e4 <OC_I2CL_Write+0xc4>
       return FALSE;
    78dc:	e03fff15 	stw	zero,-4(fp)
    78e0:	00004f06 	br	7a20 <OC_I2CL_Write+0x200>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
    78e4:	e13ffb17 	ldw	r4,-20(fp)
    78e8:	01400104 	movi	r5,4
    78ec:	01800404 	movi	r6,16
    78f0:	00070e80 	call	70e8 <Write32_Data>
    78f4:	1004c03a 	cmpne	r2,r2,zero
    78f8:	1000021e 	bne	r2,zero,7904 <OC_I2CL_Write+0xe4>
        return FALSE;
    78fc:	e03fff15 	stw	zero,-4(fp)
    7900:	00004706 	br	7a20 <OC_I2CL_Write+0x200>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7904:	e13ffb17 	ldw	r4,-20(fp)
    7908:	00073340 	call	7334 <ACK_check>
    790c:	1004c03a 	cmpne	r2,r2,zero
    7910:	1000021e 	bne	r2,zero,791c <OC_I2CL_Write+0xfc>
        return FALSE;
    7914:	e03fff15 	stw	zero,-4(fp)
    7918:	00004106 	br	7a20 <OC_I2CL_Write+0x200>
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
    791c:	e1bffa03 	ldbu	r6,-24(fp)
    7920:	e13ffb17 	ldw	r4,-20(fp)
    7924:	014000c4 	movi	r5,3
    7928:	00070e80 	call	70e8 <Write32_Data>
    792c:	1004c03a 	cmpne	r2,r2,zero
    7930:	1000021e 	bne	r2,zero,793c <OC_I2CL_Write+0x11c>
       return FALSE;
    7934:	e03fff15 	stw	zero,-4(fp)
    7938:	00003906 	br	7a20 <OC_I2CL_Write+0x200>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
    793c:	e13ffb17 	ldw	r4,-20(fp)
    7940:	01400104 	movi	r5,4
    7944:	01800404 	movi	r6,16
    7948:	00070e80 	call	70e8 <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    794c:	e13ffb17 	ldw	r4,-20(fp)
    7950:	00073340 	call	7334 <ACK_check>
    7954:	1004c03a 	cmpne	r2,r2,zero
    7958:	1000021e 	bne	r2,zero,7964 <OC_I2CL_Write+0x144>
        return FALSE;
    795c:	e03fff15 	stw	zero,-4(fp)
    7960:	00002f06 	br	7a20 <OC_I2CL_Write+0x200>
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
    7964:	e03ff915 	stw	zero,-28(fp)
    7968:	00001e06 	br	79e4 <OC_I2CL_Write+0x1c4>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
    796c:	e0bff917 	ldw	r2,-28(fp)
    7970:	1007883a 	mov	r3,r2
    7974:	e0bffe17 	ldw	r2,-8(fp)
    7978:	1885883a 	add	r2,r3,r2
    797c:	10800003 	ldbu	r2,0(r2)
    7980:	11803fcc 	andi	r6,r2,255
    7984:	e13ffb17 	ldw	r4,-20(fp)
    7988:	014000c4 	movi	r5,3
    798c:	00070e80 	call	70e8 <Write32_Data>
    7990:	1004c03a 	cmpne	r2,r2,zero
    7994:	1000021e 	bne	r2,zero,79a0 <OC_I2CL_Write+0x180>
            return FALSE;
    7998:	e03fff15 	stw	zero,-4(fp)
    799c:	00002006 	br	7a20 <OC_I2CL_Write+0x200>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
    79a0:	e13ffb17 	ldw	r4,-20(fp)
    79a4:	01400104 	movi	r5,4
    79a8:	01800404 	movi	r6,16
    79ac:	00070e80 	call	70e8 <Write32_Data>
    79b0:	1004c03a 	cmpne	r2,r2,zero
    79b4:	1000021e 	bne	r2,zero,79c0 <OC_I2CL_Write+0x1a0>
            return FALSE;
    79b8:	e03fff15 	stw	zero,-4(fp)
    79bc:	00001806 	br	7a20 <OC_I2CL_Write+0x200>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base))
    79c0:	e13ffb17 	ldw	r4,-20(fp)
    79c4:	00073340 	call	7334 <ACK_check>
    79c8:	1004c03a 	cmpne	r2,r2,zero
    79cc:	1000021e 	bne	r2,zero,79d8 <OC_I2CL_Write+0x1b8>
             return FALSE;
    79d0:	e03fff15 	stw	zero,-4(fp)
    79d4:	00001206 	br	7a20 <OC_I2CL_Write+0x200>
    if(!ACK_check( i2c_base))
        return FALSE;
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
    79d8:	e0bff917 	ldw	r2,-28(fp)
    79dc:	10800044 	addi	r2,r2,1
    79e0:	e0bff915 	stw	r2,-28(fp)
    79e4:	e0fff917 	ldw	r3,-28(fp)
    79e8:	e0800217 	ldw	r2,8(fp)
    79ec:	18bfdf16 	blt	r3,r2,796c <OC_I2CL_Write+0x14c>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
    79f0:	e13ffb17 	ldw	r4,-20(fp)
    79f4:	01400104 	movi	r5,4
    79f8:	01801004 	movi	r6,64
    79fc:	00070e80 	call	70e8 <Write32_Data>
    7a00:	1004c03a 	cmpne	r2,r2,zero
    7a04:	1000021e 	bne	r2,zero,7a10 <OC_I2CL_Write+0x1f0>
         return FALSE;
    7a08:	e03fff15 	stw	zero,-4(fp)
    7a0c:	00000406 	br	7a20 <OC_I2CL_Write+0x200>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
    7a10:	010003c4 	movi	r4,15
    7a14:	0013ff40 	call	13ff4 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
    7a18:	00800044 	movi	r2,1
    7a1c:	e0bfff15 	stw	r2,-4(fp)
    7a20:	e0bfff17 	ldw	r2,-4(fp)
}
    7a24:	e037883a 	mov	sp,fp
    7a28:	dfc00117 	ldw	ra,4(sp)
    7a2c:	df000017 	ldw	fp,0(sp)
    7a30:	dec00204 	addi	sp,sp,8
    7a34:	f800283a 	ret

00007a38 <OC_I2CL_Read>:


bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address,int sub_address, alt_u8 *pData8){
    7a38:	defff704 	addi	sp,sp,-36
    7a3c:	dfc00815 	stw	ra,32(sp)
    7a40:	df000715 	stw	fp,28(sp)
    7a44:	df000704 	addi	fp,sp,28
    7a48:	e13ffb15 	stw	r4,-20(fp)
    7a4c:	e1bffd15 	stw	r6,-12(fp)
    7a50:	e1fffe15 	stw	r7,-8(fp)
    7a54:	e17ffc05 	stb	r5,-16(fp)
    //DWORD reg_data = 0x0;
    alt_32 Data32;// = 0x0;

    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
    7a58:	e0bffd17 	ldw	r2,-12(fp)
    7a5c:	1005d23a 	srai	r2,r2,8
    7a60:	1007883a 	mov	r3,r2
    7a64:	00bfffc4 	movi	r2,-1
    7a68:	1884703a 	and	r2,r3,r2
    7a6c:	e0bff945 	stb	r2,-27(fp)
    AddrLow  = sub_address & 0xFF;
    7a70:	e0bffd17 	ldw	r2,-12(fp)
    7a74:	1007883a 	mov	r3,r2
    7a78:	00bfffc4 	movi	r2,-1
    7a7c:	1884703a 	and	r2,r3,r2
    7a80:	e0bff905 	stb	r2,-28(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
    7a84:	e1bffc03 	ldbu	r6,-16(fp)
    7a88:	e13ffb17 	ldw	r4,-20(fp)
    7a8c:	014000c4 	movi	r5,3
    7a90:	00070e80 	call	70e8 <Write32_Data>
    7a94:	1004c03a 	cmpne	r2,r2,zero
    7a98:	1000021e 	bne	r2,zero,7aa4 <OC_I2CL_Read+0x6c>
       return FALSE;
    7a9c:	e03fff15 	stw	zero,-4(fp)
    7aa0:	00007b06 	br	7c90 <OC_I2CL_Read+0x258>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
    7aa4:	e13ffb17 	ldw	r4,-20(fp)
    7aa8:	01400104 	movi	r5,4
    7aac:	01802404 	movi	r6,144
    7ab0:	00070e80 	call	70e8 <Write32_Data>
    7ab4:	1004c03a 	cmpne	r2,r2,zero
    7ab8:	1000021e 	bne	r2,zero,7ac4 <OC_I2CL_Read+0x8c>
       return FALSE;
    7abc:	e03fff15 	stw	zero,-4(fp)
    7ac0:	00007306 	br	7c90 <OC_I2CL_Read+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7ac4:	e13ffb17 	ldw	r4,-20(fp)
    7ac8:	00073340 	call	7334 <ACK_check>
    7acc:	1004c03a 	cmpne	r2,r2,zero
    7ad0:	1000021e 	bne	r2,zero,7adc <OC_I2CL_Read+0xa4>
        return FALSE;
    7ad4:	e03fff15 	stw	zero,-4(fp)
    7ad8:	00006d06 	br	7c90 <OC_I2CL_Read+0x258>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
    7adc:	e1bff943 	ldbu	r6,-27(fp)
    7ae0:	e13ffb17 	ldw	r4,-20(fp)
    7ae4:	014000c4 	movi	r5,3
    7ae8:	00070e80 	call	70e8 <Write32_Data>
    7aec:	1004c03a 	cmpne	r2,r2,zero
    7af0:	1000021e 	bne	r2,zero,7afc <OC_I2CL_Read+0xc4>
       return FALSE;
    7af4:	e03fff15 	stw	zero,-4(fp)
    7af8:	00006506 	br	7c90 <OC_I2CL_Read+0x258>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
    7afc:	e13ffb17 	ldw	r4,-20(fp)
    7b00:	01400104 	movi	r5,4
    7b04:	01800404 	movi	r6,16
    7b08:	00070e80 	call	70e8 <Write32_Data>
    7b0c:	1004c03a 	cmpne	r2,r2,zero
    7b10:	1000021e 	bne	r2,zero,7b1c <OC_I2CL_Read+0xe4>
        return FALSE;
    7b14:	e03fff15 	stw	zero,-4(fp)
    7b18:	00005d06 	br	7c90 <OC_I2CL_Read+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7b1c:	e13ffb17 	ldw	r4,-20(fp)
    7b20:	00073340 	call	7334 <ACK_check>
    7b24:	1004c03a 	cmpne	r2,r2,zero
    7b28:	1000021e 	bne	r2,zero,7b34 <OC_I2CL_Read+0xfc>
        return FALSE;
    7b2c:	e03fff15 	stw	zero,-4(fp)
    7b30:	00005706 	br	7c90 <OC_I2CL_Read+0x258>
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
    7b34:	e1bff903 	ldbu	r6,-28(fp)
    7b38:	e13ffb17 	ldw	r4,-20(fp)
    7b3c:	014000c4 	movi	r5,3
    7b40:	00070e80 	call	70e8 <Write32_Data>
    7b44:	1004c03a 	cmpne	r2,r2,zero
    7b48:	1000021e 	bne	r2,zero,7b54 <OC_I2CL_Read+0x11c>
       return FALSE;
    7b4c:	e03fff15 	stw	zero,-4(fp)
    7b50:	00004f06 	br	7c90 <OC_I2CL_Read+0x258>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
    7b54:	e13ffb17 	ldw	r4,-20(fp)
    7b58:	01400104 	movi	r5,4
    7b5c:	01800404 	movi	r6,16
    7b60:	00070e80 	call	70e8 <Write32_Data>
    7b64:	1004c03a 	cmpne	r2,r2,zero
    7b68:	1000021e 	bne	r2,zero,7b74 <OC_I2CL_Read+0x13c>
        return FALSE;
    7b6c:	e03fff15 	stw	zero,-4(fp)
    7b70:	00004706 	br	7c90 <OC_I2CL_Read+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7b74:	e13ffb17 	ldw	r4,-20(fp)
    7b78:	00073340 	call	7334 <ACK_check>
    7b7c:	1004c03a 	cmpne	r2,r2,zero
    7b80:	1000021e 	bne	r2,zero,7b8c <OC_I2CL_Read+0x154>
        return FALSE;
    7b84:	e03fff15 	stw	zero,-4(fp)
    7b88:	00004106 	br	7c90 <OC_I2CL_Read+0x258>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
    7b8c:	e0bffc03 	ldbu	r2,-16(fp)
    7b90:	10800054 	ori	r2,r2,1
    7b94:	11803fcc 	andi	r6,r2,255
    7b98:	e13ffb17 	ldw	r4,-20(fp)
    7b9c:	014000c4 	movi	r5,3
    7ba0:	00070e80 	call	70e8 <Write32_Data>
    7ba4:	1004c03a 	cmpne	r2,r2,zero
    7ba8:	1000021e 	bne	r2,zero,7bb4 <OC_I2CL_Read+0x17c>
         return FALSE;
    7bac:	e03fff15 	stw	zero,-4(fp)
    7bb0:	00003706 	br	7c90 <OC_I2CL_Read+0x258>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
    7bb4:	e13ffb17 	ldw	r4,-20(fp)
    7bb8:	01400104 	movi	r5,4
    7bbc:	01802404 	movi	r6,144
    7bc0:	00070e80 	call	70e8 <Write32_Data>
    7bc4:	1004c03a 	cmpne	r2,r2,zero
    7bc8:	1000021e 	bne	r2,zero,7bd4 <OC_I2CL_Read+0x19c>
         return FALSE;
    7bcc:	e03fff15 	stw	zero,-4(fp)
    7bd0:	00002f06 	br	7c90 <OC_I2CL_Read+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
    7bd4:	e13ffb17 	ldw	r4,-20(fp)
    7bd8:	00073340 	call	7334 <ACK_check>
    7bdc:	1004c03a 	cmpne	r2,r2,zero
    7be0:	1000021e 	bne	r2,zero,7bec <OC_I2CL_Read+0x1b4>
        return FALSE;
    7be4:	e03fff15 	stw	zero,-4(fp)
    7be8:	00002906 	br	7c90 <OC_I2CL_Read+0x258>

       //read the rxr data


   //set the RD and ACK bit(bit5 and bit3)
    if (!Write32_Data( i2c_base, 4,0x28))
    7bec:	e13ffb17 	ldw	r4,-20(fp)
    7bf0:	01400104 	movi	r5,4
    7bf4:	01800a04 	movi	r6,40
    7bf8:	00070e80 	call	70e8 <Write32_Data>
    7bfc:	1004c03a 	cmpne	r2,r2,zero
    7c00:	1000021e 	bne	r2,zero,7c0c <OC_I2CL_Read+0x1d4>
        return FALSE;
    7c04:	e03fff15 	stw	zero,-4(fp)
    7c08:	00002106 	br	7c90 <OC_I2CL_Read+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_judge_for_read( i2c_base))
    7c0c:	e13ffb17 	ldw	r4,-20(fp)
    7c10:	00075c40 	call	75c4 <ACK_judge_for_read>
    7c14:	1004c03a 	cmpne	r2,r2,zero
    7c18:	1000021e 	bne	r2,zero,7c24 <OC_I2CL_Read+0x1ec>
        return FALSE;
    7c1c:	e03fff15 	stw	zero,-4(fp)
    7c20:	00001b06 	br	7c90 <OC_I2CL_Read+0x258>

//    printf("\n read receive ACK-device address(read)! \n");
    if (!Read32_Data ( i2c_base, 3, &Data32))
    7c24:	e1bffa04 	addi	r6,fp,-24
    7c28:	e13ffb17 	ldw	r4,-20(fp)
    7c2c:	014000c4 	movi	r5,3
    7c30:	00071400 	call	7140 <Read32_Data>
    7c34:	1004c03a 	cmpne	r2,r2,zero
    7c38:	1000021e 	bne	r2,zero,7c44 <OC_I2CL_Read+0x20c>
        return FALSE;
    7c3c:	e03fff15 	stw	zero,-4(fp)
    7c40:	00001306 	br	7c90 <OC_I2CL_Read+0x258>

    *pData8 =  Data32 & 0xff;
    7c44:	e0bffa17 	ldw	r2,-24(fp)
    7c48:	1007883a 	mov	r3,r2
    7c4c:	00bfffc4 	movi	r2,-1
    7c50:	1884703a 	and	r2,r3,r2
    7c54:	1007883a 	mov	r3,r2
    7c58:	e0bffe17 	ldw	r2,-8(fp)
    7c5c:	10c00005 	stb	r3,0(r2)


   if (!Write32_Data( i2c_base, 4,0x40))
    7c60:	e13ffb17 	ldw	r4,-20(fp)
    7c64:	01400104 	movi	r5,4
    7c68:	01801004 	movi	r6,64
    7c6c:	00070e80 	call	70e8 <Write32_Data>
    7c70:	1004c03a 	cmpne	r2,r2,zero
    7c74:	1000021e 	bne	r2,zero,7c80 <OC_I2CL_Read+0x248>
       return FALSE;
    7c78:	e03fff15 	stw	zero,-4(fp)
    7c7c:	00000406 	br	7c90 <OC_I2CL_Read+0x258>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
    7c80:	010003c4 	movi	r4,15
    7c84:	0013ff40 	call	13ff4 <usleep>

   return TRUE;
    7c88:	00800044 	movi	r2,1
    7c8c:	e0bfff15 	stw	r2,-4(fp)
    7c90:	e0bfff17 	ldw	r2,-4(fp)

}
    7c94:	e037883a 	mov	sp,fp
    7c98:	dfc00117 	ldw	ra,4(sp)
    7c9c:	df000017 	ldw	fp,0(sp)
    7ca0:	dec00204 	addi	sp,sp,8
    7ca4:	f800283a 	ret

00007ca8 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
    7ca8:	defffd04 	addi	sp,sp,-12
    7cac:	dfc00215 	stw	ra,8(sp)
    7cb0:	df000115 	stw	fp,4(sp)
    7cb4:	df000104 	addi	fp,sp,4
    7cb8:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
    7cbc:	e13fff17 	ldw	r4,-4(fp)
    7cc0:	000aff40 	call	aff4 <printf>
}
    7cc4:	e037883a 	mov	sp,fp
    7cc8:	dfc00117 	ldw	ra,4(sp)
    7ccc:	df000017 	ldw	fp,0(sp)
    7cd0:	dec00204 	addi	sp,sp,8
    7cd4:	f800283a 	ret

00007cd8 <myprintf>:





int myprintf(char *format, ...){
    7cd8:	deff7804 	addi	sp,sp,-544
    7cdc:	dfc08415 	stw	ra,528(sp)
    7ce0:	df008315 	stw	fp,524(sp)
    7ce4:	df008304 	addi	fp,sp,524
    7ce8:	e1400215 	stw	r5,8(fp)
    7cec:	e1800315 	stw	r6,12(fp)
    7cf0:	e1c00415 	stw	r7,16(fp)
    7cf4:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    7cf8:	e0800204 	addi	r2,fp,8
    7cfc:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
    7d00:	e1fffe17 	ldw	r7,-8(fp)
    7d04:	e13f7e04 	addi	r4,fp,-520
    7d08:	01408004 	movi	r5,512
    7d0c:	e1bfff17 	ldw	r6,-4(fp)
    7d10:	000d37c0 	call	d37c <vsnprintf>
    7d14:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
    7d18:	e13f7e04 	addi	r4,fp,-520
    7d1c:	0007ca80 	call	7ca8 <debug_output>

    return rc;    
    7d20:	e0bf7d17 	ldw	r2,-524(fp)
}
    7d24:	e037883a 	mov	sp,fp
    7d28:	dfc00117 	ldw	ra,4(sp)
    7d2c:	df000017 	ldw	fp,0(sp)
    7d30:	dec00504 	addi	sp,sp,20
    7d34:	f800283a 	ret

00007d38 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
    7d38:	defff704 	addi	sp,sp,-36
    7d3c:	dfc00815 	stw	ra,32(sp)
    7d40:	df000715 	stw	fp,28(sp)
    7d44:	df000704 	addi	fp,sp,28
    7d48:	e13ffe15 	stw	r4,-8(fp)
    7d4c:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
    7d50:	e03ff915 	stw	zero,-28(fp)
    7d54:	00000f06 	br	7d94 <myprintf_hexarray+0x5c>
        sprintf(szText, "[%02X]", *(pHex+i));
    7d58:	e13ffa04 	addi	r4,fp,-24
    7d5c:	e0bff917 	ldw	r2,-28(fp)
    7d60:	1007883a 	mov	r3,r2
    7d64:	e0bffe17 	ldw	r2,-8(fp)
    7d68:	1885883a 	add	r2,r3,r2
    7d6c:	10800003 	ldbu	r2,0(r2)
    7d70:	11803fcc 	andi	r6,r2,255
    7d74:	014001f4 	movhi	r5,7
    7d78:	29521d04 	addi	r5,r5,18548
    7d7c:	000b1b40 	call	b1b4 <sprintf>
        DEBUG((szText));
    7d80:	e13ffa04 	addi	r4,fp,-24
    7d84:	0007cd80 	call	7cd8 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
    7d88:	e0bff917 	ldw	r2,-28(fp)
    7d8c:	10800044 	addi	r2,r2,1
    7d90:	e0bff915 	stw	r2,-28(fp)
    7d94:	e0fff917 	ldw	r3,-28(fp)
    7d98:	e0bfff17 	ldw	r2,-4(fp)
    7d9c:	18bfee16 	blt	r3,r2,7d58 <myprintf_hexarray+0x20>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
    7da0:	e0bfff17 	ldw	r2,-4(fp)
}
    7da4:	e037883a 	mov	sp,fp
    7da8:	dfc00117 	ldw	ra,4(sp)
    7dac:	df000017 	ldw	fp,0(sp)
    7db0:	dec00204 	addi	sp,sp,8
    7db4:	f800283a 	ret

00007db8 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    7db8:	defff704 	addi	sp,sp,-36
    7dbc:	dfc00815 	stw	ra,32(sp)
    7dc0:	df000715 	stw	fp,28(sp)
    7dc4:	df000704 	addi	fp,sp,28
    7dc8:	e13ffe15 	stw	r4,-8(fp)
    7dcc:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
    7dd0:	e03ff915 	stw	zero,-28(fp)
    7dd4:	00001006 	br	7e18 <myprintf_dwordarray+0x60>
        sprintf(szText, "[%08X]", *(pArray+i));
    7dd8:	e0bff917 	ldw	r2,-28(fp)
    7ddc:	1085883a 	add	r2,r2,r2
    7de0:	1085883a 	add	r2,r2,r2
    7de4:	1007883a 	mov	r3,r2
    7de8:	e0bffe17 	ldw	r2,-8(fp)
    7dec:	1885883a 	add	r2,r3,r2
    7df0:	11800017 	ldw	r6,0(r2)
    7df4:	e13ffa04 	addi	r4,fp,-24
    7df8:	014001f4 	movhi	r5,7
    7dfc:	29521f04 	addi	r5,r5,18556
    7e00:	000b1b40 	call	b1b4 <sprintf>
        DEBUG((szText));
    7e04:	e13ffa04 	addi	r4,fp,-24
    7e08:	0007cd80 	call	7cd8 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
    7e0c:	e0bff917 	ldw	r2,-28(fp)
    7e10:	10800044 	addi	r2,r2,1
    7e14:	e0bff915 	stw	r2,-28(fp)
    7e18:	e0fff917 	ldw	r3,-28(fp)
    7e1c:	e0bfff17 	ldw	r2,-4(fp)
    7e20:	18bfed16 	blt	r3,r2,7dd8 <myprintf_dwordarray+0x20>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
    7e24:	e0bfff17 	ldw	r2,-4(fp)
}
    7e28:	e037883a 	mov	sp,fp
    7e2c:	dfc00117 	ldw	ra,4(sp)
    7e30:	df000017 	ldw	fp,0(sp)
    7e34:	dec00204 	addi	sp,sp,8
    7e38:	f800283a 	ret

00007e3c <mtc2_QueryData>:
#include "alt_types.h"

#define TRUE 1


static void mtc2_QueryData(MTC2_INFO *p){
    7e3c:	deffe804 	addi	sp,sp,-96
    7e40:	dfc01715 	stw	ra,92(sp)
    7e44:	df001615 	stw	fp,88(sp)
    7e48:	df001604 	addi	fp,sp,88
    7e4c:	e13fff15 	stw	r4,-4(fp)
    MTC2_EVENT *pEvent, *pOldEvent;
    unsigned char reg_data[31];
    unsigned long x1,y1,x2,y2,x3,y3,x4,y4,x5,y5;
    if(OC_I2C_Read(p->TOUCH_I2C_BASE,I2C_FT5316_ADDR,0x00,reg_data,31))
    7e50:	e0bfff17 	ldw	r2,-4(fp)
    7e54:	10800017 	ldw	r2,0(r2)
    7e58:	1009883a 	mov	r4,r2
    7e5c:	e1fff704 	addi	r7,fp,-36
    7e60:	008007c4 	movi	r2,31
    7e64:	d8800015 	stw	r2,0(sp)
    7e68:	01401c04 	movi	r5,112
    7e6c:	000d883a 	mov	r6,zero
    7e70:	000762c0 	call	762c <OC_I2C_Read>
    7e74:	1005003a 	cmpeq	r2,r2,zero
    7e78:	10009f1e 	bne	r2,zero,80f8 <mtc2_QueryData+0x2bc>
        {
 //   			if(reg_data[1]>0)
//    				printf("reg_data[1]=%x\n",reg_data[1]);
    			 pEvent = (MTC2_EVENT *)malloc(sizeof(MTC2_EVENT));
    7e7c:	01000584 	movi	r4,22
    7e80:	000a7680 	call	a768 <malloc>
    7e84:	e0bff615 	stw	r2,-40(fp)
    			 pEvent->Event=reg_data[1];
    7e88:	e0fff743 	ldbu	r3,-35(fp)
    7e8c:	e0bff617 	ldw	r2,-40(fp)
    7e90:	10c00005 	stb	r3,0(r2)
        		 pEvent->TouchNum = reg_data[2];
    7e94:	e0fff783 	ldbu	r3,-34(fp)
    7e98:	e0bff617 	ldw	r2,-40(fp)
    7e9c:	10c00045 	stb	r3,1(r2)
        		 x1 = ((reg_data[3]&0x0f)<<8)|reg_data[4];
    7ea0:	e0bff7c3 	ldbu	r2,-33(fp)
    7ea4:	10803fcc 	andi	r2,r2,255
    7ea8:	108003cc 	andi	r2,r2,15
    7eac:	1006923a 	slli	r3,r2,8
    7eb0:	e0bff803 	ldbu	r2,-32(fp)
    7eb4:	10803fcc 	andi	r2,r2,255
    7eb8:	1884b03a 	or	r2,r3,r2
    7ebc:	e0bff415 	stw	r2,-48(fp)
        		 y1 = ((reg_data[5]&0x0f)<<8)|reg_data[6];
    7ec0:	e0bff843 	ldbu	r2,-31(fp)
    7ec4:	10803fcc 	andi	r2,r2,255
    7ec8:	108003cc 	andi	r2,r2,15
    7ecc:	1006923a 	slli	r3,r2,8
    7ed0:	e0bff883 	ldbu	r2,-30(fp)
    7ed4:	10803fcc 	andi	r2,r2,255
    7ed8:	1884b03a 	or	r2,r3,r2
    7edc:	e0bff315 	stw	r2,-52(fp)
        		 x2 = ((reg_data[9]&0x0f)<<8)|reg_data[10];
    7ee0:	e0bff943 	ldbu	r2,-27(fp)
    7ee4:	10803fcc 	andi	r2,r2,255
    7ee8:	108003cc 	andi	r2,r2,15
    7eec:	1006923a 	slli	r3,r2,8
    7ef0:	e0bff983 	ldbu	r2,-26(fp)
    7ef4:	10803fcc 	andi	r2,r2,255
    7ef8:	1884b03a 	or	r2,r3,r2
    7efc:	e0bff215 	stw	r2,-56(fp)
        		 y2 = ((reg_data[11]&0x0f)<<8)|reg_data[12];
    7f00:	e0bff9c3 	ldbu	r2,-25(fp)
    7f04:	10803fcc 	andi	r2,r2,255
    7f08:	108003cc 	andi	r2,r2,15
    7f0c:	1006923a 	slli	r3,r2,8
    7f10:	e0bffa03 	ldbu	r2,-24(fp)
    7f14:	10803fcc 	andi	r2,r2,255
    7f18:	1884b03a 	or	r2,r3,r2
    7f1c:	e0bff115 	stw	r2,-60(fp)

        		 x3 = ((reg_data[15]&0x0f)<<8)|reg_data[16];
    7f20:	e0bffac3 	ldbu	r2,-21(fp)
    7f24:	10803fcc 	andi	r2,r2,255
    7f28:	108003cc 	andi	r2,r2,15
    7f2c:	1006923a 	slli	r3,r2,8
    7f30:	e0bffb03 	ldbu	r2,-20(fp)
    7f34:	10803fcc 	andi	r2,r2,255
    7f38:	1884b03a 	or	r2,r3,r2
    7f3c:	e0bff015 	stw	r2,-64(fp)
				 y3 = ((reg_data[17]&0x0f)<<8)|reg_data[18];
    7f40:	e0bffb43 	ldbu	r2,-19(fp)
    7f44:	10803fcc 	andi	r2,r2,255
    7f48:	108003cc 	andi	r2,r2,15
    7f4c:	1006923a 	slli	r3,r2,8
    7f50:	e0bffb83 	ldbu	r2,-18(fp)
    7f54:	10803fcc 	andi	r2,r2,255
    7f58:	1884b03a 	or	r2,r3,r2
    7f5c:	e0bfef15 	stw	r2,-68(fp)

				 x4 = ((reg_data[21]&0x0f)<<8)|reg_data[22];
    7f60:	e0bffc43 	ldbu	r2,-15(fp)
    7f64:	10803fcc 	andi	r2,r2,255
    7f68:	108003cc 	andi	r2,r2,15
    7f6c:	1006923a 	slli	r3,r2,8
    7f70:	e0bffc83 	ldbu	r2,-14(fp)
    7f74:	10803fcc 	andi	r2,r2,255
    7f78:	1884b03a 	or	r2,r3,r2
    7f7c:	e0bfee15 	stw	r2,-72(fp)
				 y4 = ((reg_data[23]&0x0f)<<8)|reg_data[24];
    7f80:	e0bffcc3 	ldbu	r2,-13(fp)
    7f84:	10803fcc 	andi	r2,r2,255
    7f88:	108003cc 	andi	r2,r2,15
    7f8c:	1006923a 	slli	r3,r2,8
    7f90:	e0bffd03 	ldbu	r2,-12(fp)
    7f94:	10803fcc 	andi	r2,r2,255
    7f98:	1884b03a 	or	r2,r3,r2
    7f9c:	e0bfed15 	stw	r2,-76(fp)

				 x5 = ((reg_data[27]&0x0f)<<8)|reg_data[28];
    7fa0:	e0bffdc3 	ldbu	r2,-9(fp)
    7fa4:	10803fcc 	andi	r2,r2,255
    7fa8:	108003cc 	andi	r2,r2,15
    7fac:	1006923a 	slli	r3,r2,8
    7fb0:	e0bffe03 	ldbu	r2,-8(fp)
    7fb4:	10803fcc 	andi	r2,r2,255
    7fb8:	1884b03a 	or	r2,r3,r2
    7fbc:	e0bfec15 	stw	r2,-80(fp)
				 y5 = ((reg_data[29]&0x0f)<<8)|reg_data[30];
    7fc0:	e0bffe43 	ldbu	r2,-7(fp)
    7fc4:	10803fcc 	andi	r2,r2,255
    7fc8:	108003cc 	andi	r2,r2,15
    7fcc:	1006923a 	slli	r3,r2,8
    7fd0:	e0bffe83 	ldbu	r2,-6(fp)
    7fd4:	10803fcc 	andi	r2,r2,255
    7fd8:	1884b03a 	or	r2,r3,r2
    7fdc:	e0bfeb15 	stw	r2,-84(fp)
				 //the register value (1024,600)
				 //change the value to (800,480)
        		 pEvent->x1=(x1*800)>>10;
    7fe0:	e13ff417 	ldw	r4,-48(fp)
    7fe4:	0140c804 	movi	r5,800
    7fe8:	000a0540 	call	a054 <__mulsi3>
    7fec:	1004d2ba 	srli	r2,r2,10
    7ff0:	1007883a 	mov	r3,r2
    7ff4:	e0bff617 	ldw	r2,-40(fp)
    7ff8:	10c0008d 	sth	r3,2(r2)
        		 pEvent->y1=(y1/10)<<3;
    7ffc:	e13ff317 	ldw	r4,-52(fp)
    8000:	01400284 	movi	r5,10
    8004:	000a0440 	call	a044 <__udivsi3>
    8008:	100490fa 	slli	r2,r2,3
    800c:	1007883a 	mov	r3,r2
    8010:	e0bff617 	ldw	r2,-40(fp)
    8014:	10c0010d 	sth	r3,4(r2)
        		 pEvent->x2=(x2*800)>>10;
    8018:	e13ff217 	ldw	r4,-56(fp)
    801c:	0140c804 	movi	r5,800
    8020:	000a0540 	call	a054 <__mulsi3>
    8024:	1004d2ba 	srli	r2,r2,10
    8028:	1007883a 	mov	r3,r2
    802c:	e0bff617 	ldw	r2,-40(fp)
    8030:	10c0018d 	sth	r3,6(r2)
        		 pEvent->y2=(y2/10)<<3;
    8034:	e13ff117 	ldw	r4,-60(fp)
    8038:	01400284 	movi	r5,10
    803c:	000a0440 	call	a044 <__udivsi3>
    8040:	100490fa 	slli	r2,r2,3
    8044:	1007883a 	mov	r3,r2
    8048:	e0bff617 	ldw	r2,-40(fp)
    804c:	10c0020d 	sth	r3,8(r2)
        		 pEvent->x3=(x3*800)>>10;
    8050:	e13ff017 	ldw	r4,-64(fp)
    8054:	0140c804 	movi	r5,800
    8058:	000a0540 	call	a054 <__mulsi3>
    805c:	1004d2ba 	srli	r2,r2,10
    8060:	1007883a 	mov	r3,r2
    8064:	e0bff617 	ldw	r2,-40(fp)
    8068:	10c0028d 	sth	r3,10(r2)
				 pEvent->y3=(y3/10)<<3;
    806c:	e13fef17 	ldw	r4,-68(fp)
    8070:	01400284 	movi	r5,10
    8074:	000a0440 	call	a044 <__udivsi3>
    8078:	100490fa 	slli	r2,r2,3
    807c:	1007883a 	mov	r3,r2
    8080:	e0bff617 	ldw	r2,-40(fp)
    8084:	10c0030d 	sth	r3,12(r2)
				 pEvent->x4=(x4*800)>>10;
    8088:	e13fee17 	ldw	r4,-72(fp)
    808c:	0140c804 	movi	r5,800
    8090:	000a0540 	call	a054 <__mulsi3>
    8094:	1004d2ba 	srli	r2,r2,10
    8098:	1007883a 	mov	r3,r2
    809c:	e0bff617 	ldw	r2,-40(fp)
    80a0:	10c0038d 	sth	r3,14(r2)
				 pEvent->y4=(y4/10)<<3;
    80a4:	e13fed17 	ldw	r4,-76(fp)
    80a8:	01400284 	movi	r5,10
    80ac:	000a0440 	call	a044 <__udivsi3>
    80b0:	100490fa 	slli	r2,r2,3
    80b4:	1007883a 	mov	r3,r2
    80b8:	e0bff617 	ldw	r2,-40(fp)
    80bc:	10c0040d 	sth	r3,16(r2)
				 pEvent->x5=(x5*800)>>10;
    80c0:	e13fec17 	ldw	r4,-80(fp)
    80c4:	0140c804 	movi	r5,800
    80c8:	000a0540 	call	a054 <__mulsi3>
    80cc:	1004d2ba 	srli	r2,r2,10
    80d0:	1007883a 	mov	r3,r2
    80d4:	e0bff617 	ldw	r2,-40(fp)
    80d8:	10c0048d 	sth	r3,18(r2)
				 pEvent->y5=(y5/10)<<3;
    80dc:	e13feb17 	ldw	r4,-84(fp)
    80e0:	01400284 	movi	r5,10
    80e4:	000a0440 	call	a044 <__udivsi3>
    80e8:	100490fa 	slli	r2,r2,3
    80ec:	1007883a 	mov	r3,r2
    80f0:	e0bff617 	ldw	r2,-40(fp)
    80f4:	10c0050d 	sth	r3,20(r2)

        }
    if((pEvent->TouchNum>0)&&(pEvent->TouchNum<=5))
    80f8:	e0bff617 	ldw	r2,-40(fp)
    80fc:	10800043 	ldbu	r2,1(r2)
    8100:	10803fcc 	andi	r2,r2,255
    8104:	1005003a 	cmpeq	r2,r2,zero
    8108:	1000161e 	bne	r2,zero,8164 <mtc2_QueryData+0x328>
    810c:	e0bff617 	ldw	r2,-40(fp)
    8110:	10800043 	ldbu	r2,1(r2)
    8114:	10803fcc 	andi	r2,r2,255
    8118:	108001a8 	cmpgeui	r2,r2,6
    811c:	1000111e 	bne	r2,zero,8164 <mtc2_QueryData+0x328>
    {
		if (QUEUE_IsFull(p->pQueue)){
    8120:	e0bfff17 	ldw	r2,-4(fp)
    8124:	11000317 	ldw	r4,12(r2)
    8128:	00085980 	call	8598 <QUEUE_IsFull>
    812c:	1005003a 	cmpeq	r2,r2,zero
    8130:	1000061e 	bne	r2,zero,814c <mtc2_QueryData+0x310>
					  // remove the old one
		  pOldEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
    8134:	e0bfff17 	ldw	r2,-4(fp)
    8138:	11000317 	ldw	r4,12(r2)
    813c:	00086940 	call	8694 <QUEUE_Pop>
    8140:	e0bff515 	stw	r2,-44(fp)
		  free(pOldEvent);
    8144:	e13ff517 	ldw	r4,-44(fp)
    8148:	000a7540 	call	a754 <free>
		 }
		 QUEUE_Push(p->pQueue, (alt_u32)pEvent);
    814c:	e0bfff17 	ldw	r2,-4(fp)
    8150:	11000317 	ldw	r4,12(r2)
    8154:	e0bff617 	ldw	r2,-40(fp)
    8158:	100b883a 	mov	r5,r2
    815c:	00085fc0 	call	85fc <QUEUE_Push>
				 pEvent->y4=(y4/10)<<3;
				 pEvent->x5=(x5*800)>>10;
				 pEvent->y5=(y5/10)<<3;

        }
    if((pEvent->TouchNum>0)&&(pEvent->TouchNum<=5))
    8160:	00000206 	br	816c <mtc2_QueryData+0x330>
		  free(pOldEvent);
		 }
		 QUEUE_Push(p->pQueue, (alt_u32)pEvent);
    }
    else
    	free(pEvent);
    8164:	e13ff617 	ldw	r4,-40(fp)
    8168:	000a7540 	call	a754 <free>
}
    816c:	e037883a 	mov	sp,fp
    8170:	dfc00117 	ldw	ra,4(sp)
    8174:	df000017 	ldw	fp,0(sp)
    8178:	dec00204 	addi	sp,sp,8
    817c:	f800283a 	ret

00008180 <mtc2_ISR>:


#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void mtc2_ISR(void* context){
    8180:	defffc04 	addi	sp,sp,-16
    8184:	dfc00315 	stw	ra,12(sp)
    8188:	df000215 	stw	fp,8(sp)
    818c:	df000204 	addi	fp,sp,8
    8190:	e13fff15 	stw	r4,-4(fp)
#else
static void mtc2_ISR(void* context, alt_u32 id){
#endif
   MTC2_INFO *p = (MTC2_INFO *)context;
    8194:	e0bfff17 	ldw	r2,-4(fp)
    8198:	e0bffe15 	stw	r2,-8(fp)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,p->INT_IRQ_NUM);
    819c:	e0bffe17 	ldw	r2,-8(fp)
    81a0:	11400217 	ldw	r5,8(r2)
    81a4:	0009883a 	mov	r4,zero
    81a8:	00135a80 	call	135a8 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif
    mtc2_QueryData(p);
    81ac:	e13ffe17 	ldw	r4,-8(fp)
    81b0:	0007e3c0 	call	7e3c <mtc2_QueryData>

    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE,0);
    81b4:	e0bffe17 	ldw	r2,-8(fp)
    81b8:	10800117 	ldw	r2,4(r2)
    81bc:	10800304 	addi	r2,r2,12
    81c0:	10000035 	stwio	zero,0(r2)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,p->INT_IRQ_NUM);
    81c4:	e0bffe17 	ldw	r2,-8(fp)
    81c8:	11400217 	ldw	r5,8(r2)
    81cc:	0009883a 	mov	r4,zero
    81d0:	001350c0 	call	1350c <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif
 }
    81d4:	e037883a 	mov	sp,fp
    81d8:	dfc00117 	ldw	ra,4(sp)
    81dc:	df000017 	ldw	fp,0(sp)
    81e0:	dec00204 	addi	sp,sp,8
    81e4:	f800283a 	ret

000081e8 <MTC2_Init>:

MTC2_INFO* MTC2_Init(alt_u32 TOUCH_I2C_BASE,alt_u32 TOUCH_INT_BASE, alt_u32 INT_IRQ_NUM)
{
    81e8:	defff904 	addi	sp,sp,-28
    81ec:	dfc00615 	stw	ra,24(sp)
    81f0:	df000515 	stw	fp,20(sp)
    81f4:	df000504 	addi	fp,sp,20
    81f8:	e13ffd15 	stw	r4,-12(fp)
    81fc:	e17ffe15 	stw	r5,-8(fp)
    8200:	e1bfff15 	stw	r6,-4(fp)
    MTC2_INFO *p;

    p = (MTC2_INFO *)malloc(sizeof(MTC2_INFO));
    8204:	01000404 	movi	r4,16
    8208:	000a7680 	call	a768 <malloc>
    820c:	e0bffc15 	stw	r2,-16(fp)
    p->TOUCH_I2C_BASE=TOUCH_I2C_BASE;
    8210:	e0fffc17 	ldw	r3,-16(fp)
    8214:	e0bffd17 	ldw	r2,-12(fp)
    8218:	18800015 	stw	r2,0(r3)
    p->TOUCH_INT_BASE=TOUCH_INT_BASE;
    821c:	e0fffc17 	ldw	r3,-16(fp)
    8220:	e0bffe17 	ldw	r2,-8(fp)
    8224:	18800115 	stw	r2,4(r3)

    p->INT_IRQ_NUM = INT_IRQ_NUM;
    8228:	e0fffc17 	ldw	r3,-16(fp)
    822c:	e0bfff17 	ldw	r2,-4(fp)
    8230:	18800215 	stw	r2,8(r3)
    p->pQueue = QUEUE_New(TOUCH_QUEUE_SIZE);
    8234:	01000804 	movi	r4,32
    8238:	00084b00 	call	84b0 <QUEUE_New>
    823c:	1007883a 	mov	r3,r2
    8240:	e0bffc17 	ldw	r2,-16(fp)
    8244:	10c00315 	stw	r3,12(r2)


//    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x00);
    8248:	e0bffc17 	ldw	r2,-16(fp)
    824c:	10800117 	ldw	r2,4(r2)
    8250:	10800204 	addi	r2,r2,8
    8254:	10000035 	stwio	zero,0(r2)
//    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE, 0x00);
    8258:	e0bffc17 	ldw	r2,-16(fp)
    825c:	10800117 	ldw	r2,4(r2)
    8260:	10800304 	addi	r2,r2,12
    8264:	10000035 	stwio	zero,0(r2)
 // register callback function
 //   error = alt_irq_register (p->INT_IRQ_NUM, p, mtc2_ISR);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,
    8268:	e0bffc17 	ldw	r2,-16(fp)
    826c:	11400217 	ldw	r5,8(r2)
    8270:	d8000015 	stw	zero,0(sp)
    8274:	0009883a 	mov	r4,zero
    8278:	01800074 	movhi	r6,1
    827c:	31a06004 	addi	r6,r6,-32384
    8280:	e1fffc17 	ldw	r7,-16(fp)
    8284:	00134bc0 	call	134bc <alt_ic_isr_register>
    8288:	1005003a 	cmpeq	r2,r2,zero
    828c:	1000041e 	bne	r2,zero,82a0 <MTC2_Init+0xb8>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->INT_IRQ_NUM, (void *)p, mtc2_ISR) != 0)){
 #endif

	  printf(("[TOUCH]register IRQ fail\n"));
    8290:	010001f4 	movhi	r4,7
    8294:	21122104 	addi	r4,r4,18564
    8298:	000b1300 	call	b130 <puts>
    829c:	00000306 	br	82ac <MTC2_Init+0xc4>
		  }else{
			  printf(("[TOUCH]register IRQ success\n"));
    82a0:	010001f4 	movhi	r4,7
    82a4:	21122804 	addi	r4,r4,18592
    82a8:	000b1300 	call	b130 <puts>
		  }
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x01);
    82ac:	e0bffc17 	ldw	r2,-16(fp)
    82b0:	10800117 	ldw	r2,4(r2)
    82b4:	10800204 	addi	r2,r2,8
    82b8:	1007883a 	mov	r3,r2
    82bc:	00800044 	movi	r2,1
    82c0:	18800035 	stwio	r2,0(r3)
    return p;
    82c4:	e0bffc17 	ldw	r2,-16(fp)
}
    82c8:	e037883a 	mov	sp,fp
    82cc:	dfc00117 	ldw	ra,4(sp)
    82d0:	df000017 	ldw	fp,0(sp)
    82d4:	dec00204 	addi	sp,sp,8
    82d8:	f800283a 	ret

000082dc <MTC2_UnInit>:

void MTC2_UnInit(MTC2_INFO *p){
    82dc:	defffd04 	addi	sp,sp,-12
    82e0:	dfc00215 	stw	ra,8(sp)
    82e4:	df000115 	stw	fp,4(sp)
    82e8:	df000104 	addi	fp,sp,4
    82ec:	e13fff15 	stw	r4,-4(fp)
    if (p){
    82f0:	e0bfff17 	ldw	r2,-4(fp)
    82f4:	1005003a 	cmpeq	r2,r2,zero
    82f8:	1000051e 	bne	r2,zero,8310 <MTC2_UnInit+0x34>
        QUEUE_Delete(p->pQueue);
    82fc:	e0bfff17 	ldw	r2,-4(fp)
    8300:	11000317 	ldw	r4,12(r2)
    8304:	00085200 	call	8520 <QUEUE_Delete>
        free(p);
    8308:	e13fff17 	ldw	r4,-4(fp)
    830c:	000a7540 	call	a754 <free>
    }
}
    8310:	e037883a 	mov	sp,fp
    8314:	dfc00117 	ldw	ra,4(sp)
    8318:	df000017 	ldw	fp,0(sp)
    831c:	dec00204 	addi	sp,sp,8
    8320:	f800283a 	ret

00008324 <MTC2_GetStatus>:

//, int X3,int Y3,int X4,int Y4,int X5,int Y5
bool MTC2_GetStatus(MTC2_INFO *p, alt_u8 *Event, alt_u8 *TouchNum, int *X1, int *Y1, int *X2, int *Y2,int *X3, int *Y3, int *X4, int *Y4,int *X5,int *Y5)
{
    8324:	defff804 	addi	sp,sp,-32
    8328:	dfc00715 	stw	ra,28(sp)
    832c:	df000615 	stw	fp,24(sp)
    8330:	df000604 	addi	fp,sp,24
    8334:	e13ffc15 	stw	r4,-16(fp)
    8338:	e17ffd15 	stw	r5,-12(fp)
    833c:	e1bffe15 	stw	r6,-8(fp)
    8340:	e1ffff15 	stw	r7,-4(fp)
    bool bFind;
    MTC2_EVENT *pEvent;
    bFind = QUEUE_IsEmpty(p->pQueue)?FALSE:TRUE;
    8344:	e0bffc17 	ldw	r2,-16(fp)
    8348:	11000317 	ldw	r4,12(r2)
    834c:	00085500 	call	8550 <QUEUE_IsEmpty>
    8350:	1005003a 	cmpeq	r2,r2,zero
    8354:	e0bffb15 	stw	r2,-20(fp)
    if (bFind){
    8358:	e0bffb17 	ldw	r2,-20(fp)
    835c:	1005003a 	cmpeq	r2,r2,zero
    8360:	1000401e 	bne	r2,zero,8464 <MTC2_GetStatus+0x140>
        pEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
    8364:	e0bffc17 	ldw	r2,-16(fp)
    8368:	11000317 	ldw	r4,12(r2)
    836c:	00086940 	call	8694 <QUEUE_Pop>
    8370:	e0bffa15 	stw	r2,-24(fp)
        *Event=pEvent->Event;;
    8374:	e0bffa17 	ldw	r2,-24(fp)
    8378:	10c00003 	ldbu	r3,0(r2)
    837c:	e0bffd17 	ldw	r2,-12(fp)
    8380:	10c00005 	stb	r3,0(r2)
        *TouchNum = pEvent->TouchNum;
    8384:	e0bffa17 	ldw	r2,-24(fp)
    8388:	10c00043 	ldbu	r3,1(r2)
    838c:	e0bffe17 	ldw	r2,-8(fp)
    8390:	10c00005 	stb	r3,0(r2)
        *X1 = pEvent->x1;
    8394:	e0bffa17 	ldw	r2,-24(fp)
    8398:	1080008b 	ldhu	r2,2(r2)
    839c:	10ffffcc 	andi	r3,r2,65535
    83a0:	e0bfff17 	ldw	r2,-4(fp)
    83a4:	10c00015 	stw	r3,0(r2)
        *Y1 = pEvent->y1;
    83a8:	e0bffa17 	ldw	r2,-24(fp)
    83ac:	1080010b 	ldhu	r2,4(r2)
    83b0:	10ffffcc 	andi	r3,r2,65535
    83b4:	e0800217 	ldw	r2,8(fp)
    83b8:	10c00015 	stw	r3,0(r2)
        *X2 = pEvent->x2;
    83bc:	e0bffa17 	ldw	r2,-24(fp)
    83c0:	1080018b 	ldhu	r2,6(r2)
    83c4:	10ffffcc 	andi	r3,r2,65535
    83c8:	e0800317 	ldw	r2,12(fp)
    83cc:	10c00015 	stw	r3,0(r2)
        *Y2 = pEvent->y2;
    83d0:	e0bffa17 	ldw	r2,-24(fp)
    83d4:	1080020b 	ldhu	r2,8(r2)
    83d8:	10ffffcc 	andi	r3,r2,65535
    83dc:	e0800417 	ldw	r2,16(fp)
    83e0:	10c00015 	stw	r3,0(r2)
        *X3 = pEvent->x3;
    83e4:	e0bffa17 	ldw	r2,-24(fp)
    83e8:	1080028b 	ldhu	r2,10(r2)
    83ec:	10ffffcc 	andi	r3,r2,65535
    83f0:	e0800517 	ldw	r2,20(fp)
    83f4:	10c00015 	stw	r3,0(r2)
		*Y3 = pEvent->y3;
    83f8:	e0bffa17 	ldw	r2,-24(fp)
    83fc:	1080030b 	ldhu	r2,12(r2)
    8400:	10ffffcc 	andi	r3,r2,65535
    8404:	e0800617 	ldw	r2,24(fp)
    8408:	10c00015 	stw	r3,0(r2)
		*X4 = pEvent->x4;
    840c:	e0bffa17 	ldw	r2,-24(fp)
    8410:	1080038b 	ldhu	r2,14(r2)
    8414:	10ffffcc 	andi	r3,r2,65535
    8418:	e0800717 	ldw	r2,28(fp)
    841c:	10c00015 	stw	r3,0(r2)
		*Y4 = pEvent->y4;
    8420:	e0bffa17 	ldw	r2,-24(fp)
    8424:	1080040b 	ldhu	r2,16(r2)
    8428:	10ffffcc 	andi	r3,r2,65535
    842c:	e0800817 	ldw	r2,32(fp)
    8430:	10c00015 	stw	r3,0(r2)
		*X5 = pEvent->x5;
    8434:	e0bffa17 	ldw	r2,-24(fp)
    8438:	1080048b 	ldhu	r2,18(r2)
    843c:	10ffffcc 	andi	r3,r2,65535
    8440:	e0800917 	ldw	r2,36(fp)
    8444:	10c00015 	stw	r3,0(r2)
		*Y5 = pEvent->y5;
    8448:	e0bffa17 	ldw	r2,-24(fp)
    844c:	1080050b 	ldhu	r2,20(r2)
    8450:	10ffffcc 	andi	r3,r2,65535
    8454:	e0800a17 	ldw	r2,40(fp)
    8458:	10c00015 	stw	r3,0(r2)
        free(pEvent);
    845c:	e13ffa17 	ldw	r4,-24(fp)
    8460:	000a7540 	call	a754 <free>
    }
    return bFind;
    8464:	e0bffb17 	ldw	r2,-20(fp)
}
    8468:	e037883a 	mov	sp,fp
    846c:	dfc00117 	ldw	ra,4(sp)
    8470:	df000017 	ldw	fp,0(sp)
    8474:	dec00204 	addi	sp,sp,8
    8478:	f800283a 	ret

0000847c <MTC2_ClearEvent>:


void MTC2_ClearEvent(MTC2_INFO *p){
    847c:	defffd04 	addi	sp,sp,-12
    8480:	dfc00215 	stw	ra,8(sp)
    8484:	df000115 	stw	fp,4(sp)
    8488:	df000104 	addi	fp,sp,4
    848c:	e13fff15 	stw	r4,-4(fp)
    QUEUE_Empty(p->pQueue);
    8490:	e0bfff17 	ldw	r2,-4(fp)
    8494:	11000317 	ldw	r4,12(r2)
    8498:	00087280 	call	8728 <QUEUE_Empty>
}
    849c:	e037883a 	mov	sp,fp
    84a0:	dfc00117 	ldw	ra,4(sp)
    84a4:	df000017 	ldw	fp,0(sp)
    84a8:	dec00204 	addi	sp,sp,8
    84ac:	f800283a 	ret

000084b0 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
    84b0:	defffb04 	addi	sp,sp,-20
    84b4:	dfc00415 	stw	ra,16(sp)
    84b8:	df000315 	stw	fp,12(sp)
    84bc:	df000304 	addi	fp,sp,12
    84c0:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
    84c4:	e0bfff17 	ldw	r2,-4(fp)
    84c8:	1085883a 	add	r2,r2,r2
    84cc:	1085883a 	add	r2,r2,r2
    84d0:	10800504 	addi	r2,r2,20
    84d4:	e0bffe15 	stw	r2,-8(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
    84d8:	e13ffe17 	ldw	r4,-8(fp)
    84dc:	000a7680 	call	a768 <malloc>
    84e0:	e0bffd15 	stw	r2,-12(fp)
    memset((void *)pQueue, 0, nSize);
    84e4:	e0fffe17 	ldw	r3,-8(fp)
    84e8:	e0bffd17 	ldw	r2,-12(fp)
    84ec:	1009883a 	mov	r4,r2
    84f0:	180d883a 	mov	r6,r3
    84f4:	000b883a 	mov	r5,zero
    84f8:	000af5c0 	call	af5c <memset>
    pQueue->num = nQueueNum;
    84fc:	e0ffff17 	ldw	r3,-4(fp)
    8500:	e0bffd17 	ldw	r2,-12(fp)
    8504:	10c00015 	stw	r3,0(r2)
    return pQueue;
    8508:	e0bffd17 	ldw	r2,-12(fp)
}
    850c:	e037883a 	mov	sp,fp
    8510:	dfc00117 	ldw	ra,4(sp)
    8514:	df000017 	ldw	fp,0(sp)
    8518:	dec00204 	addi	sp,sp,8
    851c:	f800283a 	ret

00008520 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
    8520:	defffd04 	addi	sp,sp,-12
    8524:	dfc00215 	stw	ra,8(sp)
    8528:	df000115 	stw	fp,4(sp)
    852c:	df000104 	addi	fp,sp,4
    8530:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
    8534:	e13fff17 	ldw	r4,-4(fp)
    8538:	000a7540 	call	a754 <free>
}
    853c:	e037883a 	mov	sp,fp
    8540:	dfc00117 	ldw	ra,4(sp)
    8544:	df000017 	ldw	fp,0(sp)
    8548:	dec00204 	addi	sp,sp,8
    854c:	f800283a 	ret

00008550 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
    8550:	defffd04 	addi	sp,sp,-12
    8554:	df000215 	stw	fp,8(sp)
    8558:	df000204 	addi	fp,sp,8
    855c:	e13ffe15 	stw	r4,-8(fp)
    if (pQueue->front == pQueue->rear)
    8560:	e0bffe17 	ldw	r2,-8(fp)
    8564:	10c00117 	ldw	r3,4(r2)
    8568:	e0bffe17 	ldw	r2,-8(fp)
    856c:	10800217 	ldw	r2,8(r2)
    8570:	1880031e 	bne	r3,r2,8580 <QUEUE_IsEmpty+0x30>
        return TRUE;
    8574:	00800044 	movi	r2,1
    8578:	e0bfff15 	stw	r2,-4(fp)
    857c:	00000106 	br	8584 <QUEUE_IsEmpty+0x34>
    return FALSE;
    8580:	e03fff15 	stw	zero,-4(fp)
    8584:	e0bfff17 	ldw	r2,-4(fp)
}
    8588:	e037883a 	mov	sp,fp
    858c:	df000017 	ldw	fp,0(sp)
    8590:	dec00104 	addi	sp,sp,4
    8594:	f800283a 	ret

00008598 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
    8598:	defffc04 	addi	sp,sp,-16
    859c:	dfc00315 	stw	ra,12(sp)
    85a0:	df000215 	stw	fp,8(sp)
    85a4:	df000204 	addi	fp,sp,8
    85a8:	e13ffe15 	stw	r4,-8(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
    85ac:	e0bffe17 	ldw	r2,-8(fp)
    85b0:	10800117 	ldw	r2,4(r2)
    85b4:	11000044 	addi	r4,r2,1
    85b8:	e0bffe17 	ldw	r2,-8(fp)
    85bc:	11400017 	ldw	r5,0(r2)
    85c0:	000a04c0 	call	a04c <__umodsi3>
    85c4:	1007883a 	mov	r3,r2
    85c8:	e0bffe17 	ldw	r2,-8(fp)
    85cc:	10800217 	ldw	r2,8(r2)
    85d0:	1880031e 	bne	r3,r2,85e0 <QUEUE_IsFull+0x48>
        return TRUE;
    85d4:	00800044 	movi	r2,1
    85d8:	e0bfff15 	stw	r2,-4(fp)
    85dc:	00000106 	br	85e4 <QUEUE_IsFull+0x4c>
    return FALSE;
    85e0:	e03fff15 	stw	zero,-4(fp)
    85e4:	e0bfff17 	ldw	r2,-4(fp)
}
    85e8:	e037883a 	mov	sp,fp
    85ec:	dfc00117 	ldw	ra,4(sp)
    85f0:	df000017 	ldw	fp,0(sp)
    85f4:	dec00204 	addi	sp,sp,8
    85f8:	f800283a 	ret

000085fc <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
    85fc:	defffb04 	addi	sp,sp,-20
    8600:	dfc00415 	stw	ra,16(sp)
    8604:	df000315 	stw	fp,12(sp)
    8608:	df000304 	addi	fp,sp,12
    860c:	e13ffd15 	stw	r4,-12(fp)
    8610:	e17ffe15 	stw	r5,-8(fp)
    if (QUEUE_IsFull(pQueue))
    8614:	e13ffd17 	ldw	r4,-12(fp)
    8618:	00085980 	call	8598 <QUEUE_IsFull>
    861c:	1005003a 	cmpeq	r2,r2,zero
    8620:	1000021e 	bne	r2,zero,862c <QUEUE_Push+0x30>
        return FALSE;
    8624:	e03fff15 	stw	zero,-4(fp)
    8628:	00001406 	br	867c <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
    862c:	e0bffd17 	ldw	r2,-12(fp)
    8630:	10800117 	ldw	r2,4(r2)
    8634:	e0fffd17 	ldw	r3,-12(fp)
    8638:	1085883a 	add	r2,r2,r2
    863c:	1085883a 	add	r2,r2,r2
    8640:	10c5883a 	add	r2,r2,r3
    8644:	10c00304 	addi	r3,r2,12
    8648:	e0bffe17 	ldw	r2,-8(fp)
    864c:	18800015 	stw	r2,0(r3)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
    8650:	e0bffd17 	ldw	r2,-12(fp)
    8654:	10800117 	ldw	r2,4(r2)
    8658:	11000044 	addi	r4,r2,1
    865c:	e0bffd17 	ldw	r2,-12(fp)
    8660:	11400017 	ldw	r5,0(r2)
    8664:	000a04c0 	call	a04c <__umodsi3>
    8668:	1007883a 	mov	r3,r2
    866c:	e0bffd17 	ldw	r2,-12(fp)
    8670:	10c00115 	stw	r3,4(r2)
    return TRUE;
    8674:	00800044 	movi	r2,1
    8678:	e0bfff15 	stw	r2,-4(fp)
    867c:	e0bfff17 	ldw	r2,-4(fp)
}
    8680:	e037883a 	mov	sp,fp
    8684:	dfc00117 	ldw	ra,4(sp)
    8688:	df000017 	ldw	fp,0(sp)
    868c:	dec00204 	addi	sp,sp,8
    8690:	f800283a 	ret

00008694 <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
    8694:	defffb04 	addi	sp,sp,-20
    8698:	dfc00415 	stw	ra,16(sp)
    869c:	df000315 	stw	fp,12(sp)
    86a0:	df000304 	addi	fp,sp,12
    86a4:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
    86a8:	e13ffe17 	ldw	r4,-8(fp)
    86ac:	00085500 	call	8550 <QUEUE_IsEmpty>
    86b0:	1005003a 	cmpeq	r2,r2,zero
    86b4:	1000021e 	bne	r2,zero,86c0 <QUEUE_Pop+0x2c>
        return 0;
    86b8:	e03fff15 	stw	zero,-4(fp)
    86bc:	00001406 	br	8710 <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
    86c0:	e0bffe17 	ldw	r2,-8(fp)
    86c4:	10800217 	ldw	r2,8(r2)
    86c8:	e0fffe17 	ldw	r3,-8(fp)
    86cc:	1085883a 	add	r2,r2,r2
    86d0:	1085883a 	add	r2,r2,r2
    86d4:	10c5883a 	add	r2,r2,r3
    86d8:	10800304 	addi	r2,r2,12
    86dc:	10800017 	ldw	r2,0(r2)
    86e0:	e0bffd15 	stw	r2,-12(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
    86e4:	e0bffe17 	ldw	r2,-8(fp)
    86e8:	10800217 	ldw	r2,8(r2)
    86ec:	11000044 	addi	r4,r2,1
    86f0:	e0bffe17 	ldw	r2,-8(fp)
    86f4:	11400017 	ldw	r5,0(r2)
    86f8:	000a04c0 	call	a04c <__umodsi3>
    86fc:	1007883a 	mov	r3,r2
    8700:	e0bffe17 	ldw	r2,-8(fp)
    8704:	10c00215 	stw	r3,8(r2)
    return data32;
    8708:	e0bffd17 	ldw	r2,-12(fp)
    870c:	e0bfff15 	stw	r2,-4(fp)
    8710:	e0bfff17 	ldw	r2,-4(fp)
}
    8714:	e037883a 	mov	sp,fp
    8718:	dfc00117 	ldw	ra,4(sp)
    871c:	df000017 	ldw	fp,0(sp)
    8720:	dec00204 	addi	sp,sp,8
    8724:	f800283a 	ret

00008728 <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
    8728:	defffe04 	addi	sp,sp,-8
    872c:	df000115 	stw	fp,4(sp)
    8730:	df000104 	addi	fp,sp,4
    8734:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
    8738:	e0bfff17 	ldw	r2,-4(fp)
    873c:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
    8740:	e0bfff17 	ldw	r2,-4(fp)
    8744:	10000215 	stw	zero,8(r2)
}
    8748:	e037883a 	mov	sp,fp
    874c:	df000017 	ldw	fp,0(sp)
    8750:	dec00104 	addi	sp,sp,4
    8754:	f800283a 	ret

00008758 <VIPFR_Init>:
void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex);
void FrameReader_Go(alt_u32 VipBase, bool bGO);



VIP_FRAME_READER* VIPFR_Init(alt_u32 VipBase, void* Frame0_Base, void* Frame1_Base, alt_u32 Frame_Width, alt_u32 Frame_Height){
    8758:	defff904 	addi	sp,sp,-28
    875c:	dfc00615 	stw	ra,24(sp)
    8760:	df000515 	stw	fp,20(sp)
    8764:	df000504 	addi	fp,sp,20
    8768:	e13ffc15 	stw	r4,-16(fp)
    876c:	e17ffd15 	stw	r5,-12(fp)
    8770:	e1bffe15 	stw	r6,-8(fp)
    8774:	e1ffff15 	stw	r7,-4(fp)

    VIP_FRAME_READER *p;
    
    p = malloc(sizeof(VIP_FRAME_READER));
    8778:	01000904 	movi	r4,36
    877c:	000a7680 	call	a768 <malloc>
    8780:	e0bffb15 	stw	r2,-20(fp)
    p->VipBase = VipBase;
    8784:	e0fffb17 	ldw	r3,-20(fp)
    8788:	e0bffc17 	ldw	r2,-16(fp)
    878c:	18800015 	stw	r2,0(r3)
    p->Frame0_Base = Frame0_Base;
    8790:	e0fffb17 	ldw	r3,-20(fp)
    8794:	e0bffd17 	ldw	r2,-12(fp)
    8798:	18800115 	stw	r2,4(r3)
    p->Frame1_Base = Frame1_Base;
    879c:	e0fffb17 	ldw	r3,-20(fp)
    87a0:	e0bffe17 	ldw	r2,-8(fp)
    87a4:	18800215 	stw	r2,8(r3)
    p->DisplayFrame = 0;
    87a8:	e0bffb17 	ldw	r2,-20(fp)
    87ac:	10000305 	stb	zero,12(r2)
     
    p->bytes_per_pixel = 4;
    87b0:	e0fffb17 	ldw	r3,-20(fp)
    87b4:	00800104 	movi	r2,4
    87b8:	18800715 	stw	r2,28(r3)
    p->color_depth = 32;
    87bc:	e0fffb17 	ldw	r3,-20(fp)
    87c0:	00800804 	movi	r2,32
    87c4:	18800415 	stw	r2,16(r3)
    p->interlace = 0;
    87c8:	e0bffb17 	ldw	r2,-20(fp)
    87cc:	10000815 	stw	zero,32(r2)
    
    FrameReader_Go(VipBase, FALSE); // stop for config
    87d0:	e13ffc17 	ldw	r4,-16(fp)
    87d4:	000b883a 	mov	r5,zero
    87d8:	0008c780 	call	8c78 <FrameReader_Go>
    
    VIPFR_SetFrameSize(p, Frame_Width, Frame_Height);
    87dc:	e17fff17 	ldw	r5,-4(fp)
    87e0:	e1800217 	ldw	r6,8(fp)
    87e4:	e13ffb17 	ldw	r4,-20(fp)
    87e8:	00088600 	call	8860 <VIPFR_SetFrameSize>
    
    FrameReader_SelectFrame(VipBase, p->DisplayFrame);
    87ec:	e0bffb17 	ldw	r2,-20(fp)
    87f0:	10800303 	ldbu	r2,12(r2)
    87f4:	11403fcc 	andi	r5,r2,255
    87f8:	e13ffc17 	ldw	r4,-16(fp)
    87fc:	0008c440 	call	8c44 <FrameReader_SelectFrame>
    //
    FrameReader_Go(VipBase, TRUE); // go
    8800:	e13ffc17 	ldw	r4,-16(fp)
    8804:	01400044 	movi	r5,1
    8808:	0008c780 	call	8c78 <FrameReader_Go>
    
    return p;
    880c:	e0bffb17 	ldw	r2,-20(fp)
}
    8810:	e037883a 	mov	sp,fp
    8814:	dfc00117 	ldw	ra,4(sp)
    8818:	df000017 	ldw	fp,0(sp)
    881c:	dec00204 	addi	sp,sp,8
    8820:	f800283a 	ret

00008824 <VIPFR_UnInit>:

void VIPFR_UnInit(VIP_FRAME_READER* p){
    8824:	defffd04 	addi	sp,sp,-12
    8828:	dfc00215 	stw	ra,8(sp)
    882c:	df000115 	stw	fp,4(sp)
    8830:	df000104 	addi	fp,sp,4
    8834:	e13fff15 	stw	r4,-4(fp)
    if (p)
    8838:	e0bfff17 	ldw	r2,-4(fp)
    883c:	1005003a 	cmpeq	r2,r2,zero
    8840:	1000021e 	bne	r2,zero,884c <VIPFR_UnInit+0x28>
        free(p);
    8844:	e13fff17 	ldw	r4,-4(fp)
    8848:	000a7540 	call	a754 <free>
}
    884c:	e037883a 	mov	sp,fp
    8850:	dfc00117 	ldw	ra,4(sp)
    8854:	df000017 	ldw	fp,0(sp)
    8858:	dec00204 	addi	sp,sp,8
    885c:	f800283a 	ret

00008860 <VIPFR_SetFrameSize>:

void VIPFR_SetFrameSize(VIP_FRAME_READER* p, int width, int height){
    8860:	defff604 	addi	sp,sp,-40
    8864:	dfc00915 	stw	ra,36(sp)
    8868:	df000815 	stw	fp,32(sp)
    886c:	df000804 	addi	fp,sp,32
    8870:	e13ffd15 	stw	r4,-12(fp)
    8874:	e17ffe15 	stw	r5,-8(fp)
    8878:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 words, cycle;
    words = width*height;
    887c:	e13ffe17 	ldw	r4,-8(fp)
    8880:	e17fff17 	ldw	r5,-4(fp)
    8884:	000a0540 	call	a054 <__mulsi3>
    8888:	e0bffc15 	stw	r2,-16(fp)
    cycle = width*height;
    888c:	e13ffe17 	ldw	r4,-8(fp)
    8890:	e17fff17 	ldw	r5,-4(fp)
    8894:	000a0540 	call	a054 <__mulsi3>
    8898:	e0bffb15 	stw	r2,-20(fp)
    
  //  p->Frame_Width = width;
  //  p->Frame_Height = height;
    //
    p->width = width;
    889c:	e0fffd17 	ldw	r3,-12(fp)
    88a0:	e0bffe17 	ldw	r2,-8(fp)
    88a4:	18800515 	stw	r2,20(r3)
    p->height = height;
    88a8:	e0fffd17 	ldw	r3,-12(fp)
    88ac:	e0bfff17 	ldw	r2,-4(fp)
    88b0:	18800615 	stw	r2,24(r3)
    //
    FrameReader_SetFrame0(p->VipBase, (alt_u32)p->Frame0_Base, words, cycle, p->width, p->height, p->interlace);
    88b4:	e0bffd17 	ldw	r2,-12(fp)
    88b8:	11400017 	ldw	r5,0(r2)
    88bc:	e0bffd17 	ldw	r2,-12(fp)
    88c0:	10800117 	ldw	r2,4(r2)
    88c4:	100d883a 	mov	r6,r2
    88c8:	e0bffd17 	ldw	r2,-12(fp)
    88cc:	10800517 	ldw	r2,20(r2)
    88d0:	1009883a 	mov	r4,r2
    88d4:	e0bffd17 	ldw	r2,-12(fp)
    88d8:	10800617 	ldw	r2,24(r2)
    88dc:	1007883a 	mov	r3,r2
    88e0:	e0bffd17 	ldw	r2,-12(fp)
    88e4:	10800817 	ldw	r2,32(r2)
    88e8:	d9000015 	stw	r4,0(sp)
    88ec:	d8c00115 	stw	r3,4(sp)
    88f0:	d8800215 	stw	r2,8(sp)
    88f4:	2809883a 	mov	r4,r5
    88f8:	300b883a 	mov	r5,r6
    88fc:	e1bffc17 	ldw	r6,-16(fp)
    8900:	e1fffb17 	ldw	r7,-20(fp)
    8904:	0008b2c0 	call	8b2c <FrameReader_SetFrame0>
    FrameReader_SetFrame1(p->VipBase, (alt_u32)p->Frame1_Base, words, cycle, p->width, p->height, p->interlace);
    8908:	e0bffd17 	ldw	r2,-12(fp)
    890c:	11400017 	ldw	r5,0(r2)
    8910:	e0bffd17 	ldw	r2,-12(fp)
    8914:	10800217 	ldw	r2,8(r2)
    8918:	100d883a 	mov	r6,r2
    891c:	e0bffd17 	ldw	r2,-12(fp)
    8920:	10800517 	ldw	r2,20(r2)
    8924:	1009883a 	mov	r4,r2
    8928:	e0bffd17 	ldw	r2,-12(fp)
    892c:	10800617 	ldw	r2,24(r2)
    8930:	1007883a 	mov	r3,r2
    8934:	e0bffd17 	ldw	r2,-12(fp)
    8938:	10800817 	ldw	r2,32(r2)
    893c:	d9000015 	stw	r4,0(sp)
    8940:	d8c00115 	stw	r3,4(sp)
    8944:	d8800215 	stw	r2,8(sp)
    8948:	2809883a 	mov	r4,r5
    894c:	300b883a 	mov	r5,r6
    8950:	e1bffc17 	ldw	r6,-16(fp)
    8954:	e1fffb17 	ldw	r7,-20(fp)
    8958:	0008bb80 	call	8bb8 <FrameReader_SetFrame1>
    
}
    895c:	e037883a 	mov	sp,fp
    8960:	dfc00117 	ldw	ra,4(sp)
    8964:	df000017 	ldw	fp,0(sp)
    8968:	dec00204 	addi	sp,sp,8
    896c:	f800283a 	ret

00008970 <VIPFR_Go>:

void VIPFR_Go(VIP_FRAME_READER* p, bool bGo){
    8970:	defffd04 	addi	sp,sp,-12
    8974:	df000215 	stw	fp,8(sp)
    8978:	df000204 	addi	fp,sp,8
    897c:	e13ffe15 	stw	r4,-8(fp)
    8980:	e17fff15 	stw	r5,-4(fp)
    IOWR(p->VipBase, 0x00, bGo?0x01:0x00);
    8984:	e0bffe17 	ldw	r2,-8(fp)
    8988:	10800017 	ldw	r2,0(r2)
    898c:	1009883a 	mov	r4,r2
    8990:	e0bfff17 	ldw	r2,-4(fp)
    8994:	1006c03a 	cmpne	r3,r2,zero
    8998:	2005883a 	mov	r2,r4
    899c:	10c00035 	stwio	r3,0(r2)
}
    89a0:	e037883a 	mov	sp,fp
    89a4:	df000017 	ldw	fp,0(sp)
    89a8:	dec00104 	addi	sp,sp,4
    89ac:	f800283a 	ret

000089b0 <VIPFR_GetDrawFrame>:

void* VIPFR_GetDrawFrame(VIP_FRAME_READER* p){
    89b0:	defffd04 	addi	sp,sp,-12
    89b4:	df000215 	stw	fp,8(sp)
    89b8:	df000204 	addi	fp,sp,8
    89bc:	e13ffe15 	stw	r4,-8(fp)
        if (p->DisplayFrame == 0)
    89c0:	e0bffe17 	ldw	r2,-8(fp)
    89c4:	10800303 	ldbu	r2,12(r2)
    89c8:	10803fcc 	andi	r2,r2,255
    89cc:	1004c03a 	cmpne	r2,r2,zero
    89d0:	1000041e 	bne	r2,zero,89e4 <VIPFR_GetDrawFrame+0x34>
            return p->Frame1_Base;
    89d4:	e0bffe17 	ldw	r2,-8(fp)
    89d8:	10800217 	ldw	r2,8(r2)
    89dc:	e0bfff15 	stw	r2,-4(fp)
    89e0:	00000306 	br	89f0 <VIPFR_GetDrawFrame+0x40>
        return p->Frame0_Base;
    89e4:	e0bffe17 	ldw	r2,-8(fp)
    89e8:	10800117 	ldw	r2,4(r2)
    89ec:	e0bfff15 	stw	r2,-4(fp)
    89f0:	e0bfff17 	ldw	r2,-4(fp)
}
    89f4:	e037883a 	mov	sp,fp
    89f8:	df000017 	ldw	fp,0(sp)
    89fc:	dec00104 	addi	sp,sp,4
    8a00:	f800283a 	ret

00008a04 <VIPFR_ActiveDrawFrame>:
void VIPFR_ActiveDrawFrame(VIP_FRAME_READER* p){
    8a04:	defffc04 	addi	sp,sp,-16
    8a08:	dfc00315 	stw	ra,12(sp)
    8a0c:	df000215 	stw	fp,8(sp)
    8a10:	df000204 	addi	fp,sp,8
    8a14:	e13ffe15 	stw	r4,-8(fp)
     p->DisplayFrame =  (p->DisplayFrame+1)%2;
    8a18:	e0bffe17 	ldw	r2,-8(fp)
    8a1c:	10800303 	ldbu	r2,12(r2)
    8a20:	10803fcc 	andi	r2,r2,255
    8a24:	10c00044 	addi	r3,r2,1
    8a28:	00a00034 	movhi	r2,32768
    8a2c:	10800044 	addi	r2,r2,1
    8a30:	1886703a 	and	r3,r3,r2
    8a34:	e0ffff15 	stw	r3,-4(fp)
    8a38:	e0ffff17 	ldw	r3,-4(fp)
    8a3c:	1804403a 	cmpge	r2,r3,zero
    8a40:	10000a1e 	bne	r2,zero,8a6c <VIPFR_ActiveDrawFrame+0x68>
    8a44:	e0bfff17 	ldw	r2,-4(fp)
    8a48:	10bfffc4 	addi	r2,r2,-1
    8a4c:	e0bfff15 	stw	r2,-4(fp)
    8a50:	00bfff84 	movi	r2,-2
    8a54:	e0ffff17 	ldw	r3,-4(fp)
    8a58:	1886b03a 	or	r3,r3,r2
    8a5c:	e0ffff15 	stw	r3,-4(fp)
    8a60:	e0bfff17 	ldw	r2,-4(fp)
    8a64:	10800044 	addi	r2,r2,1
    8a68:	e0bfff15 	stw	r2,-4(fp)
    8a6c:	e0bfff17 	ldw	r2,-4(fp)
    8a70:	1007883a 	mov	r3,r2
    8a74:	e0bffe17 	ldw	r2,-8(fp)
    8a78:	10c00305 	stb	r3,12(r2)
     FrameReader_SelectFrame(p->VipBase, p->DisplayFrame);
    8a7c:	e0bffe17 	ldw	r2,-8(fp)
    8a80:	11000017 	ldw	r4,0(r2)
    8a84:	e0bffe17 	ldw	r2,-8(fp)
    8a88:	10800303 	ldbu	r2,12(r2)
    8a8c:	11403fcc 	andi	r5,r2,255
    8a90:	0008c440 	call	8c44 <FrameReader_SelectFrame>
     alt_dcache_flush_all();
    8a94:	00133140 	call	13314 <alt_dcache_flush_all>
}
    8a98:	e037883a 	mov	sp,fp
    8a9c:	dfc00117 	ldw	ra,4(sp)
    8aa0:	df000017 	ldw	fp,0(sp)
    8aa4:	dec00204 	addi	sp,sp,8
    8aa8:	f800283a 	ret

00008aac <DRAW_EraseScreen>:

void DRAW_EraseScreen(VIP_FRAME_READER *p, alt_u32 Color){
    8aac:	defffa04 	addi	sp,sp,-24
    8ab0:	dfc00515 	stw	ra,20(sp)
    8ab4:	df000415 	stw	fp,16(sp)
    8ab8:	dc400315 	stw	r17,12(sp)
    8abc:	dc000215 	stw	r16,8(sp)
    8ac0:	df000204 	addi	fp,sp,8
    8ac4:	e13ffe15 	stw	r4,-8(fp)
    8ac8:	e17fff15 	stw	r5,-4(fp)
    memset(VIPFR_GetDrawFrame(p), Color, p->width*p->height*p->bytes_per_pixel);
    8acc:	e13ffe17 	ldw	r4,-8(fp)
    8ad0:	00089b00 	call	89b0 <VIPFR_GetDrawFrame>
    8ad4:	1021883a 	mov	r16,r2
    8ad8:	e47fff17 	ldw	r17,-4(fp)
    8adc:	e0bffe17 	ldw	r2,-8(fp)
    8ae0:	11000517 	ldw	r4,20(r2)
    8ae4:	e0bffe17 	ldw	r2,-8(fp)
    8ae8:	11400617 	ldw	r5,24(r2)
    8aec:	000a0540 	call	a054 <__mulsi3>
    8af0:	1009883a 	mov	r4,r2
    8af4:	e0bffe17 	ldw	r2,-8(fp)
    8af8:	11400717 	ldw	r5,28(r2)
    8afc:	000a0540 	call	a054 <__mulsi3>
    8b00:	100d883a 	mov	r6,r2
    8b04:	8009883a 	mov	r4,r16
    8b08:	880b883a 	mov	r5,r17
    8b0c:	000af5c0 	call	af5c <memset>
}
    8b10:	e037883a 	mov	sp,fp
    8b14:	dfc00317 	ldw	ra,12(sp)
    8b18:	df000217 	ldw	fp,8(sp)
    8b1c:	dc400117 	ldw	r17,4(sp)
    8b20:	dc000017 	ldw	r16,0(sp)
    8b24:	dec00404 	addi	sp,sp,16
    8b28:	f800283a 	ret

00008b2c <FrameReader_SetFrame0>:
////////////////////////////////////////////////////////////////////
// internal function
////////////////////////////////////////////////////////////////////


void FrameReader_SetFrame0(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
    8b2c:	defffb04 	addi	sp,sp,-20
    8b30:	df000415 	stw	fp,16(sp)
    8b34:	df000404 	addi	fp,sp,16
    8b38:	e13ffc15 	stw	r4,-16(fp)
    8b3c:	e17ffd15 	stw	r5,-12(fp)
    8b40:	e1bffe15 	stw	r6,-8(fp)
    8b44:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 4, FrameBase); // frame0 base address
    8b48:	e0bffc17 	ldw	r2,-16(fp)
    8b4c:	10800404 	addi	r2,r2,16
    8b50:	e0fffd17 	ldw	r3,-12(fp)
    8b54:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 5, words); // frame0 words
    8b58:	e0bffc17 	ldw	r2,-16(fp)
    8b5c:	10800504 	addi	r2,r2,20
    8b60:	e0fffe17 	ldw	r3,-8(fp)
    8b64:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 6, cycle); // frame0 single cylce color pattern
    8b68:	e0bffc17 	ldw	r2,-16(fp)
    8b6c:	10800604 	addi	r2,r2,24
    8b70:	e0ffff17 	ldw	r3,-4(fp)
    8b74:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 8, width); // frame0 width
    8b78:	e0bffc17 	ldw	r2,-16(fp)
    8b7c:	10800804 	addi	r2,r2,32
    8b80:	e0c00117 	ldw	r3,4(fp)
    8b84:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 9, height); // frame0 height
    8b88:	e0bffc17 	ldw	r2,-16(fp)
    8b8c:	10800904 	addi	r2,r2,36
    8b90:	e0c00217 	ldw	r3,8(fp)
    8b94:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 10, interlace); // frame0 interlaced
    8b98:	e0bffc17 	ldw	r2,-16(fp)
    8b9c:	10800a04 	addi	r2,r2,40
    8ba0:	e0c00317 	ldw	r3,12(fp)
    8ba4:	10c00035 	stwio	r3,0(r2)
}
    8ba8:	e037883a 	mov	sp,fp
    8bac:	df000017 	ldw	fp,0(sp)
    8bb0:	dec00104 	addi	sp,sp,4
    8bb4:	f800283a 	ret

00008bb8 <FrameReader_SetFrame1>:

void FrameReader_SetFrame1(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
    8bb8:	defffb04 	addi	sp,sp,-20
    8bbc:	df000415 	stw	fp,16(sp)
    8bc0:	df000404 	addi	fp,sp,16
    8bc4:	e13ffc15 	stw	r4,-16(fp)
    8bc8:	e17ffd15 	stw	r5,-12(fp)
    8bcc:	e1bffe15 	stw	r6,-8(fp)
    8bd0:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 11, FrameBase); // frame0 base address
    8bd4:	e0bffc17 	ldw	r2,-16(fp)
    8bd8:	10800b04 	addi	r2,r2,44
    8bdc:	e0fffd17 	ldw	r3,-12(fp)
    8be0:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 12, words); // frame0 words
    8be4:	e0bffc17 	ldw	r2,-16(fp)
    8be8:	10800c04 	addi	r2,r2,48
    8bec:	e0fffe17 	ldw	r3,-8(fp)
    8bf0:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 13, cycle); // frame0 single cylce color pattern
    8bf4:	e0bffc17 	ldw	r2,-16(fp)
    8bf8:	10800d04 	addi	r2,r2,52
    8bfc:	e0ffff17 	ldw	r3,-4(fp)
    8c00:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 15, width); // frame0 width
    8c04:	e0bffc17 	ldw	r2,-16(fp)
    8c08:	10800f04 	addi	r2,r2,60
    8c0c:	e0c00117 	ldw	r3,4(fp)
    8c10:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 16, height); // frame0 height
    8c14:	e0bffc17 	ldw	r2,-16(fp)
    8c18:	10801004 	addi	r2,r2,64
    8c1c:	e0c00217 	ldw	r3,8(fp)
    8c20:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 17, interlace); // frame0 interlaced
    8c24:	e0bffc17 	ldw	r2,-16(fp)
    8c28:	10801104 	addi	r2,r2,68
    8c2c:	e0c00317 	ldw	r3,12(fp)
    8c30:	10c00035 	stwio	r3,0(r2)
}
    8c34:	e037883a 	mov	sp,fp
    8c38:	df000017 	ldw	fp,0(sp)
    8c3c:	dec00104 	addi	sp,sp,4
    8c40:	f800283a 	ret

00008c44 <FrameReader_SelectFrame>:

void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex){
    8c44:	defffd04 	addi	sp,sp,-12
    8c48:	df000215 	stw	fp,8(sp)
    8c4c:	df000204 	addi	fp,sp,8
    8c50:	e13ffe15 	stw	r4,-8(fp)
    8c54:	e17fff05 	stb	r5,-4(fp)
    IOWR(VipBase, 3, FrameIndex);
    8c58:	e0bffe17 	ldw	r2,-8(fp)
    8c5c:	10800304 	addi	r2,r2,12
    8c60:	e0ffff03 	ldbu	r3,-4(fp)
    8c64:	10c00035 	stwio	r3,0(r2)
}        
    8c68:	e037883a 	mov	sp,fp
    8c6c:	df000017 	ldw	fp,0(sp)
    8c70:	dec00104 	addi	sp,sp,4
    8c74:	f800283a 	ret

00008c78 <FrameReader_Go>:

void FrameReader_Go(alt_u32 VipBase, bool bGO){
    8c78:	defffd04 	addi	sp,sp,-12
    8c7c:	df000215 	stw	fp,8(sp)
    8c80:	df000204 	addi	fp,sp,8
    8c84:	e13ffe15 	stw	r4,-8(fp)
    8c88:	e17fff15 	stw	r5,-4(fp)
    IOWR(VipBase, 0, bGO?0x01:0x00);
    8c8c:	e13ffe17 	ldw	r4,-8(fp)
    8c90:	e0bfff17 	ldw	r2,-4(fp)
    8c94:	1006c03a 	cmpne	r3,r2,zero
    8c98:	2005883a 	mov	r2,r4
    8c9c:	10c00035 	stwio	r3,0(r2)
}
    8ca0:	e037883a 	mov	sp,fp
    8ca4:	df000017 	ldw	fp,0(sp)
    8ca8:	dec00104 	addi	sp,sp,4
    8cac:	f800283a 	ret

00008cb0 <VIPFR_ReserveBackground>:


///////////////////////////////////////////////////////////////


void VIPFR_ReserveBackground(VIP_FRAME_READER* p){
    8cb0:	defffa04 	addi	sp,sp,-24
    8cb4:	dfc00515 	stw	ra,20(sp)
    8cb8:	df000415 	stw	fp,16(sp)
    8cbc:	df000404 	addi	fp,sp,16
    8cc0:	e13fff15 	stw	r4,-4(fp)
    alt_u32 *pSrc, *pDes;
    int nSize;
    
    nSize = p->width * p->height * p->bytes_per_pixel;
    8cc4:	e0bfff17 	ldw	r2,-4(fp)
    8cc8:	11000517 	ldw	r4,20(r2)
    8ccc:	e0bfff17 	ldw	r2,-4(fp)
    8cd0:	11400617 	ldw	r5,24(r2)
    8cd4:	000a0540 	call	a054 <__mulsi3>
    8cd8:	1009883a 	mov	r4,r2
    8cdc:	e0bfff17 	ldw	r2,-4(fp)
    8ce0:	11400717 	ldw	r5,28(r2)
    8ce4:	000a0540 	call	a054 <__mulsi3>
    8ce8:	e0bffc15 	stw	r2,-16(fp)
        
    
    if (p->DisplayFrame == 0){
    8cec:	e0bfff17 	ldw	r2,-4(fp)
    8cf0:	10800303 	ldbu	r2,12(r2)
    8cf4:	10803fcc 	andi	r2,r2,255
    8cf8:	1004c03a 	cmpne	r2,r2,zero
    8cfc:	1000071e 	bne	r2,zero,8d1c <VIPFR_ReserveBackground+0x6c>
        pSrc = p->Frame0_Base;
    8d00:	e0bfff17 	ldw	r2,-4(fp)
    8d04:	10800117 	ldw	r2,4(r2)
    8d08:	e0bffe15 	stw	r2,-8(fp)
        pDes = p->Frame1_Base;
    8d0c:	e0bfff17 	ldw	r2,-4(fp)
    8d10:	10800217 	ldw	r2,8(r2)
    8d14:	e0bffd15 	stw	r2,-12(fp)
    8d18:	00000606 	br	8d34 <VIPFR_ReserveBackground+0x84>
    }else{
        pDes = p->Frame0_Base;
    8d1c:	e0bfff17 	ldw	r2,-4(fp)
    8d20:	10800117 	ldw	r2,4(r2)
    8d24:	e0bffd15 	stw	r2,-12(fp)
        pSrc = p->Frame1_Base;
    8d28:	e0bfff17 	ldw	r2,-4(fp)
    8d2c:	10800217 	ldw	r2,8(r2)
    8d30:	e0bffe15 	stw	r2,-8(fp)
    }
#ifdef ENABLE_DMA    
    my_memcpy(pDes, pSrc, nSize);
#else    
    memcpy(pDes, pSrc, nSize);
    8d34:	e1bffc17 	ldw	r6,-16(fp)
    8d38:	e0bffd17 	ldw	r2,-12(fp)
    8d3c:	e0fffe17 	ldw	r3,-8(fp)
    8d40:	1009883a 	mov	r4,r2
    8d44:	180b883a 	mov	r5,r3
    8d48:	000aebc0 	call	aebc <memcpy>
#endif //ENABLE_DMA    
}
    8d4c:	e037883a 	mov	sp,fp
    8d50:	dfc00117 	ldw	ra,4(sp)
    8d54:	df000017 	ldw	fp,0(sp)
    8d58:	dec00204 	addi	sp,sp,8
    8d5c:	f800283a 	ret

00008d60 <sqrt>:
    8d60:	defff104 	addi	sp,sp,-60
    8d64:	dd000d15 	stw	r20,52(sp)
    8d68:	05000234 	movhi	r20,8
    8d6c:	a5207804 	addi	r20,r20,-32288
    8d70:	dcc00c15 	stw	r19,48(sp)
    8d74:	dc800b15 	stw	r18,44(sp)
    8d78:	dc400a15 	stw	r17,40(sp)
    8d7c:	dc000915 	stw	r16,36(sp)
    8d80:	2025883a 	mov	r18,r4
    8d84:	dfc00e15 	stw	ra,56(sp)
    8d88:	2827883a 	mov	r19,r5
    8d8c:	0008e900 	call	8e90 <__ieee754_sqrt>
    8d90:	a1000017 	ldw	r4,0(r20)
    8d94:	1021883a 	mov	r16,r2
    8d98:	00bfffc4 	movi	r2,-1
    8d9c:	1823883a 	mov	r17,r3
    8da0:	20800a26 	beq	r4,r2,8dcc <sqrt+0x6c>
    8da4:	9009883a 	mov	r4,r18
    8da8:	980b883a 	mov	r5,r19
    8dac:	00091580 	call	9158 <__isnand>
    8db0:	1000061e 	bne	r2,zero,8dcc <sqrt+0x6c>
    8db4:	000d883a 	mov	r6,zero
    8db8:	000f883a 	mov	r7,zero
    8dbc:	9009883a 	mov	r4,r18
    8dc0:	980b883a 	mov	r5,r19
    8dc4:	0009cb00 	call	9cb0 <__ltdf2>
    8dc8:	10000a16 	blt	r2,zero,8df4 <sqrt+0x94>
    8dcc:	8005883a 	mov	r2,r16
    8dd0:	8807883a 	mov	r3,r17
    8dd4:	dfc00e17 	ldw	ra,56(sp)
    8dd8:	dd000d17 	ldw	r20,52(sp)
    8ddc:	dcc00c17 	ldw	r19,48(sp)
    8de0:	dc800b17 	ldw	r18,44(sp)
    8de4:	dc400a17 	ldw	r17,40(sp)
    8de8:	dc000917 	ldw	r16,36(sp)
    8dec:	dec00f04 	addi	sp,sp,60
    8df0:	f800283a 	ret
    8df4:	a4000017 	ldw	r16,0(r20)
    8df8:	00800044 	movi	r2,1
    8dfc:	00c001f4 	movhi	r3,7
    8e00:	18d22f04 	addi	r3,r3,18620
    8e04:	d8800015 	stw	r2,0(sp)
    8e08:	d8c00115 	stw	r3,4(sp)
    8e0c:	dcc00315 	stw	r19,12(sp)
    8e10:	d8000815 	stw	zero,32(sp)
    8e14:	dc800415 	stw	r18,16(sp)
    8e18:	dcc00515 	stw	r19,20(sp)
    8e1c:	dc800215 	stw	r18,8(sp)
    8e20:	80000a1e 	bne	r16,zero,8e4c <sqrt+0xec>
    8e24:	d8000615 	stw	zero,24(sp)
    8e28:	d8000715 	stw	zero,28(sp)
    8e2c:	d809883a 	mov	r4,sp
    8e30:	00091880 	call	9188 <matherr>
    8e34:	10000e26 	beq	r2,zero,8e70 <sqrt+0x110>
    8e38:	d8800817 	ldw	r2,32(sp)
    8e3c:	1000101e 	bne	r2,zero,8e80 <sqrt+0x120>
    8e40:	dc000617 	ldw	r16,24(sp)
    8e44:	dc400717 	ldw	r17,28(sp)
    8e48:	003fe006 	br	8dcc <sqrt+0x6c>
    8e4c:	0009883a 	mov	r4,zero
    8e50:	000d883a 	mov	r6,zero
    8e54:	000b883a 	mov	r5,zero
    8e58:	000f883a 	mov	r7,zero
    8e5c:	0009a580 	call	9a58 <__divdf3>
    8e60:	d8800615 	stw	r2,24(sp)
    8e64:	00800084 	movi	r2,2
    8e68:	d8c00715 	stw	r3,28(sp)
    8e6c:	80bfef1e 	bne	r16,r2,8e2c <sqrt+0xcc>
    8e70:	000a7440 	call	a744 <__errno>
    8e74:	00c00844 	movi	r3,33
    8e78:	10c00015 	stw	r3,0(r2)
    8e7c:	003fee06 	br	8e38 <sqrt+0xd8>
    8e80:	000a7440 	call	a744 <__errno>
    8e84:	d8c00817 	ldw	r3,32(sp)
    8e88:	10c00015 	stw	r3,0(r2)
    8e8c:	003fec06 	br	8e40 <sqrt+0xe0>

00008e90 <__ieee754_sqrt>:
    8e90:	defffd04 	addi	sp,sp,-12
    8e94:	dc000015 	stw	r16,0(sp)
    8e98:	009ffc34 	movhi	r2,32752
    8e9c:	2021883a 	mov	r16,r4
    8ea0:	291ffc2c 	andhi	r4,r5,32752
    8ea4:	dc400115 	stw	r17,4(sp)
    8ea8:	dfc00215 	stw	ra,8(sp)
    8eac:	2823883a 	mov	r17,r5
    8eb0:	280f883a 	mov	r7,r5
    8eb4:	2807883a 	mov	r3,r5
    8eb8:	8011883a 	mov	r8,r16
    8ebc:	20807d26 	beq	r4,r2,90b4 <__ieee754_sqrt+0x224>
    8ec0:	01408d0e 	bge	zero,r5,90f8 <__ieee754_sqrt+0x268>
    8ec4:	380dd53a 	srai	r6,r7,20
    8ec8:	3000131e 	bne	r6,zero,8f18 <__ieee754_sqrt+0x88>
    8ecc:	1800041e 	bne	r3,zero,8ee0 <__ieee754_sqrt+0x50>
    8ed0:	400ed2fa 	srli	r7,r8,11
    8ed4:	31bffac4 	addi	r6,r6,-21
    8ed8:	4010957a 	slli	r8,r8,21
    8edc:	383ffc26 	beq	r7,zero,8ed0 <__ieee754_sqrt+0x40>
    8ee0:	3880042c 	andhi	r2,r7,16
    8ee4:	1000991e 	bne	r2,zero,914c <__ieee754_sqrt+0x2bc>
    8ee8:	0009883a 	mov	r4,zero
    8eec:	39cf883a 	add	r7,r7,r7
    8ef0:	3880042c 	andhi	r2,r7,16
    8ef4:	21000044 	addi	r4,r4,1
    8ef8:	103ffc26 	beq	r2,zero,8eec <__ieee754_sqrt+0x5c>
    8efc:	00800804 	movi	r2,32
    8f00:	1105c83a 	sub	r2,r2,r4
    8f04:	4086d83a 	srl	r3,r8,r2
    8f08:	4110983a 	sll	r8,r8,r4
    8f0c:	3105c83a 	sub	r2,r6,r4
    8f10:	38ceb03a 	or	r7,r7,r3
    8f14:	11800044 	addi	r6,r2,1
    8f18:	31bf0044 	addi	r6,r6,-1023
    8f1c:	30c0004c 	andi	r3,r6,1
    8f20:	00800434 	movhi	r2,16
    8f24:	10bfffc4 	addi	r2,r2,-1
    8f28:	3884703a 	and	r2,r7,r2
    8f2c:	1807003a 	cmpeq	r3,r3,zero
    8f30:	11000434 	orhi	r4,r2,16
    8f34:	18005426 	beq	r3,zero,9088 <__ieee754_sqrt+0x1f8>
    8f38:	4004d7fa 	srli	r2,r8,31
    8f3c:	4207883a 	add	r3,r8,r8
    8f40:	02800834 	movhi	r10,32
    8f44:	1105883a 	add	r2,r2,r4
    8f48:	2089883a 	add	r4,r4,r2
    8f4c:	0011883a 	mov	r8,zero
    8f50:	000b883a 	mov	r5,zero
    8f54:	0013883a 	mov	r9,zero
    8f58:	02c00584 	movi	r11,22
    8f5c:	520f883a 	add	r7,r10,r8
    8f60:	1804d7fa 	srli	r2,r3,31
    8f64:	4a400044 	addi	r9,r9,1
    8f68:	18c7883a 	add	r3,r3,r3
    8f6c:	21c00316 	blt	r4,r7,8f7c <__ieee754_sqrt+0xec>
    8f70:	21c9c83a 	sub	r4,r4,r7
    8f74:	2a8b883a 	add	r5,r5,r10
    8f78:	51d1883a 	add	r8,r10,r7
    8f7c:	1105883a 	add	r2,r2,r4
    8f80:	5014d07a 	srli	r10,r10,1
    8f84:	2089883a 	add	r4,r4,r2
    8f88:	4afff41e 	bne	r9,r11,8f5c <__ieee754_sqrt+0xcc>
    8f8c:	02600034 	movhi	r9,32768
    8f90:	0017883a 	mov	r11,zero
    8f94:	0019883a 	mov	r12,zero
    8f98:	0015883a 	mov	r10,zero
    8f9c:	4821883a 	mov	r16,r9
    8fa0:	03c00804 	movi	r15,32
    8fa4:	00000806 	br	8fc8 <__ieee754_sqrt+0x138>
    8fa8:	22003426 	beq	r4,r8,907c <__ieee754_sqrt+0x1ec>
    8fac:	1804d7fa 	srli	r2,r3,31
    8fb0:	52800044 	addi	r10,r10,1
    8fb4:	18c7883a 	add	r3,r3,r3
    8fb8:	1105883a 	add	r2,r2,r4
    8fbc:	2089883a 	add	r4,r4,r2
    8fc0:	4812d07a 	srli	r9,r9,1
    8fc4:	53c01326 	beq	r10,r15,9014 <__ieee754_sqrt+0x184>
    8fc8:	4acf883a 	add	r7,r9,r11
    8fcc:	413ff60e 	bge	r8,r4,8fa8 <__ieee754_sqrt+0x118>
    8fd0:	38a0002c 	andhi	r2,r7,32768
    8fd4:	3a57883a 	add	r11,r7,r9
    8fd8:	14002426 	beq	r2,r16,906c <__ieee754_sqrt+0x1dc>
    8fdc:	4005883a 	mov	r2,r8
    8fe0:	2209c83a 	sub	r4,r4,r8
    8fe4:	19c0012e 	bgeu	r3,r7,8fec <__ieee754_sqrt+0x15c>
    8fe8:	213fffc4 	addi	r4,r4,-1
    8fec:	19c7c83a 	sub	r3,r3,r7
    8ff0:	1011883a 	mov	r8,r2
    8ff4:	1804d7fa 	srli	r2,r3,31
    8ff8:	52800044 	addi	r10,r10,1
    8ffc:	6259883a 	add	r12,r12,r9
    9000:	1105883a 	add	r2,r2,r4
    9004:	18c7883a 	add	r3,r3,r3
    9008:	2089883a 	add	r4,r4,r2
    900c:	4812d07a 	srli	r9,r9,1
    9010:	53ffed1e 	bne	r10,r15,8fc8 <__ieee754_sqrt+0x138>
    9014:	20c4b03a 	or	r2,r4,r3
    9018:	1000201e 	bne	r2,zero,909c <__ieee754_sqrt+0x20c>
    901c:	600ed07a 	srli	r7,r12,1
    9020:	2880004c 	andi	r2,r5,1
    9024:	1005003a 	cmpeq	r2,r2,zero
    9028:	1000011e 	bne	r2,zero,9030 <__ieee754_sqrt+0x1a0>
    902c:	39e00034 	orhi	r7,r7,32768
    9030:	300dd07a 	srai	r6,r6,1
    9034:	280bd07a 	srai	r5,r5,1
    9038:	010ff834 	movhi	r4,16352
    903c:	300c953a 	slli	r6,r6,20
    9040:	290b883a 	add	r5,r5,r4
    9044:	3821883a 	mov	r16,r7
    9048:	299d883a 	add	r14,r5,r6
    904c:	7023883a 	mov	r17,r14
    9050:	8005883a 	mov	r2,r16
    9054:	8807883a 	mov	r3,r17
    9058:	dfc00217 	ldw	ra,8(sp)
    905c:	dc400117 	ldw	r17,4(sp)
    9060:	dc000017 	ldw	r16,0(sp)
    9064:	dec00304 	addi	sp,sp,12
    9068:	f800283a 	ret
    906c:	5884703a 	and	r2,r11,r2
    9070:	103fda1e 	bne	r2,zero,8fdc <__ieee754_sqrt+0x14c>
    9074:	40800044 	addi	r2,r8,1
    9078:	003fd906 	br	8fe0 <__ieee754_sqrt+0x150>
    907c:	19ffd42e 	bgeu	r3,r7,8fd0 <__ieee754_sqrt+0x140>
    9080:	2011883a 	mov	r8,r4
    9084:	003fc906 	br	8fac <__ieee754_sqrt+0x11c>
    9088:	4004d7fa 	srli	r2,r8,31
    908c:	4211883a 	add	r8,r8,r8
    9090:	1105883a 	add	r2,r2,r4
    9094:	2089883a 	add	r4,r4,r2
    9098:	003fa706 	br	8f38 <__ieee754_sqrt+0xa8>
    909c:	00bfffc4 	movi	r2,-1
    90a0:	60802726 	beq	r12,r2,9140 <__ieee754_sqrt+0x2b0>
    90a4:	6080004c 	andi	r2,r12,1
    90a8:	6085883a 	add	r2,r12,r2
    90ac:	100ed07a 	srli	r7,r2,1
    90b0:	003fdb06 	br	9020 <__ieee754_sqrt+0x190>
    90b4:	8009883a 	mov	r4,r16
    90b8:	800d883a 	mov	r6,r16
    90bc:	00096940 	call	9694 <__muldf3>
    90c0:	180f883a 	mov	r7,r3
    90c4:	880b883a 	mov	r5,r17
    90c8:	8009883a 	mov	r4,r16
    90cc:	100d883a 	mov	r6,r2
    90d0:	00096200 	call	9620 <__adddf3>
    90d4:	1021883a 	mov	r16,r2
    90d8:	1823883a 	mov	r17,r3
    90dc:	8005883a 	mov	r2,r16
    90e0:	8807883a 	mov	r3,r17
    90e4:	dfc00217 	ldw	ra,8(sp)
    90e8:	dc400117 	ldw	r17,4(sp)
    90ec:	dc000017 	ldw	r16,0(sp)
    90f0:	dec00304 	addi	sp,sp,12
    90f4:	f800283a 	ret
    90f8:	00a00034 	movhi	r2,32768
    90fc:	10bfffc4 	addi	r2,r2,-1
    9100:	2884703a 	and	r2,r5,r2
    9104:	8084b03a 	or	r2,r16,r2
    9108:	103fd126 	beq	r2,zero,9050 <__ieee754_sqrt+0x1c0>
    910c:	283f6d26 	beq	r5,zero,8ec4 <__ieee754_sqrt+0x34>
    9110:	280f883a 	mov	r7,r5
    9114:	8009883a 	mov	r4,r16
    9118:	800d883a 	mov	r6,r16
    911c:	00095a00 	call	95a0 <__subdf3>
    9120:	1009883a 	mov	r4,r2
    9124:	180b883a 	mov	r5,r3
    9128:	100d883a 	mov	r6,r2
    912c:	180f883a 	mov	r7,r3
    9130:	0009a580 	call	9a58 <__divdf3>
    9134:	1021883a 	mov	r16,r2
    9138:	1823883a 	mov	r17,r3
    913c:	003fc406 	br	9050 <__ieee754_sqrt+0x1c0>
    9140:	29400044 	addi	r5,r5,1
    9144:	000f883a 	mov	r7,zero
    9148:	003fb506 	br	9020 <__ieee754_sqrt+0x190>
    914c:	0009883a 	mov	r4,zero
    9150:	00800804 	movi	r2,32
    9154:	003f6b06 	br	8f04 <__ieee754_sqrt+0x74>

00009158 <__isnand>:
    9158:	200d883a 	mov	r6,r4
    915c:	0109c83a 	sub	r4,zero,r4
    9160:	2188b03a 	or	r4,r4,r6
    9164:	2008d7fa 	srli	r4,r4,31
    9168:	00a00034 	movhi	r2,32768
    916c:	10bfffc4 	addi	r2,r2,-1
    9170:	1144703a 	and	r2,r2,r5
    9174:	2088b03a 	or	r4,r4,r2
    9178:	009ffc34 	movhi	r2,32752
    917c:	1105c83a 	sub	r2,r2,r4
    9180:	1004d7fa 	srli	r2,r2,31
    9184:	f800283a 	ret

00009188 <matherr>:
    9188:	0005883a 	mov	r2,zero
    918c:	f800283a 	ret

00009190 <_fpadd_parts>:
    9190:	defff804 	addi	sp,sp,-32
    9194:	dcc00315 	stw	r19,12(sp)
    9198:	2027883a 	mov	r19,r4
    919c:	21000017 	ldw	r4,0(r4)
    91a0:	00c00044 	movi	r3,1
    91a4:	dd400515 	stw	r21,20(sp)
    91a8:	dd000415 	stw	r20,16(sp)
    91ac:	ddc00715 	stw	r23,28(sp)
    91b0:	dd800615 	stw	r22,24(sp)
    91b4:	dc800215 	stw	r18,8(sp)
    91b8:	dc400115 	stw	r17,4(sp)
    91bc:	dc000015 	stw	r16,0(sp)
    91c0:	282b883a 	mov	r21,r5
    91c4:	3029883a 	mov	r20,r6
    91c8:	1900632e 	bgeu	r3,r4,9358 <_fpadd_parts+0x1c8>
    91cc:	28800017 	ldw	r2,0(r5)
    91d0:	1880812e 	bgeu	r3,r2,93d8 <_fpadd_parts+0x248>
    91d4:	00c00104 	movi	r3,4
    91d8:	20c0dc26 	beq	r4,r3,954c <_fpadd_parts+0x3bc>
    91dc:	10c07e26 	beq	r2,r3,93d8 <_fpadd_parts+0x248>
    91e0:	00c00084 	movi	r3,2
    91e4:	10c06726 	beq	r2,r3,9384 <_fpadd_parts+0x1f4>
    91e8:	20c07b26 	beq	r4,r3,93d8 <_fpadd_parts+0x248>
    91ec:	9dc00217 	ldw	r23,8(r19)
    91f0:	28c00217 	ldw	r3,8(r5)
    91f4:	9c400317 	ldw	r17,12(r19)
    91f8:	2bc00317 	ldw	r15,12(r5)
    91fc:	b8cdc83a 	sub	r6,r23,r3
    9200:	9c800417 	ldw	r18,16(r19)
    9204:	2c000417 	ldw	r16,16(r5)
    9208:	3009883a 	mov	r4,r6
    920c:	30009716 	blt	r6,zero,946c <_fpadd_parts+0x2dc>
    9210:	00800fc4 	movi	r2,63
    9214:	11806b16 	blt	r2,r6,93c4 <_fpadd_parts+0x234>
    9218:	0100a40e 	bge	zero,r4,94ac <_fpadd_parts+0x31c>
    921c:	35bff804 	addi	r22,r6,-32
    9220:	b000bc16 	blt	r22,zero,9514 <_fpadd_parts+0x384>
    9224:	8596d83a 	srl	r11,r16,r22
    9228:	0019883a 	mov	r12,zero
    922c:	0013883a 	mov	r9,zero
    9230:	01000044 	movi	r4,1
    9234:	0015883a 	mov	r10,zero
    9238:	b000be16 	blt	r22,zero,9534 <_fpadd_parts+0x3a4>
    923c:	2590983a 	sll	r8,r4,r22
    9240:	000f883a 	mov	r7,zero
    9244:	00bfffc4 	movi	r2,-1
    9248:	3889883a 	add	r4,r7,r2
    924c:	408b883a 	add	r5,r8,r2
    9250:	21cd803a 	cmpltu	r6,r4,r7
    9254:	314b883a 	add	r5,r6,r5
    9258:	7904703a 	and	r2,r15,r4
    925c:	8146703a 	and	r3,r16,r5
    9260:	10c4b03a 	or	r2,r2,r3
    9264:	10000226 	beq	r2,zero,9270 <_fpadd_parts+0xe0>
    9268:	02400044 	movi	r9,1
    926c:	0015883a 	mov	r10,zero
    9270:	5a5eb03a 	or	r15,r11,r9
    9274:	62a0b03a 	or	r16,r12,r10
    9278:	99400117 	ldw	r5,4(r19)
    927c:	a8800117 	ldw	r2,4(r21)
    9280:	28806e26 	beq	r5,r2,943c <_fpadd_parts+0x2ac>
    9284:	28006626 	beq	r5,zero,9420 <_fpadd_parts+0x290>
    9288:	7c45c83a 	sub	r2,r15,r17
    928c:	7889803a 	cmpltu	r4,r15,r2
    9290:	8487c83a 	sub	r3,r16,r18
    9294:	1909c83a 	sub	r4,r3,r4
    9298:	100d883a 	mov	r6,r2
    929c:	200f883a 	mov	r7,r4
    92a0:	38007716 	blt	r7,zero,9480 <_fpadd_parts+0x2f0>
    92a4:	a5c00215 	stw	r23,8(r20)
    92a8:	a1c00415 	stw	r7,16(r20)
    92ac:	a0000115 	stw	zero,4(r20)
    92b0:	a1800315 	stw	r6,12(r20)
    92b4:	a2000317 	ldw	r8,12(r20)
    92b8:	a2400417 	ldw	r9,16(r20)
    92bc:	00bfffc4 	movi	r2,-1
    92c0:	408b883a 	add	r5,r8,r2
    92c4:	2a09803a 	cmpltu	r4,r5,r8
    92c8:	488d883a 	add	r6,r9,r2
    92cc:	01c40034 	movhi	r7,4096
    92d0:	39ffffc4 	addi	r7,r7,-1
    92d4:	218d883a 	add	r6,r4,r6
    92d8:	39801736 	bltu	r7,r6,9338 <_fpadd_parts+0x1a8>
    92dc:	31c06526 	beq	r6,r7,9474 <_fpadd_parts+0x2e4>
    92e0:	a3000217 	ldw	r12,8(r20)
    92e4:	4209883a 	add	r4,r8,r8
    92e8:	00bfffc4 	movi	r2,-1
    92ec:	220f803a 	cmpltu	r7,r4,r8
    92f0:	4a4b883a 	add	r5,r9,r9
    92f4:	394f883a 	add	r7,r7,r5
    92f8:	2095883a 	add	r10,r4,r2
    92fc:	3897883a 	add	r11,r7,r2
    9300:	510d803a 	cmpltu	r6,r10,r4
    9304:	6099883a 	add	r12,r12,r2
    9308:	32d7883a 	add	r11,r6,r11
    930c:	00840034 	movhi	r2,4096
    9310:	10bfffc4 	addi	r2,r2,-1
    9314:	2011883a 	mov	r8,r4
    9318:	3813883a 	mov	r9,r7
    931c:	a1000315 	stw	r4,12(r20)
    9320:	a1c00415 	stw	r7,16(r20)
    9324:	a3000215 	stw	r12,8(r20)
    9328:	12c00336 	bltu	r2,r11,9338 <_fpadd_parts+0x1a8>
    932c:	58bfed1e 	bne	r11,r2,92e4 <_fpadd_parts+0x154>
    9330:	00bfff84 	movi	r2,-2
    9334:	12bfeb2e 	bgeu	r2,r10,92e4 <_fpadd_parts+0x154>
    9338:	a2800417 	ldw	r10,16(r20)
    933c:	008000c4 	movi	r2,3
    9340:	00c80034 	movhi	r3,8192
    9344:	18ffffc4 	addi	r3,r3,-1
    9348:	a2400317 	ldw	r9,12(r20)
    934c:	a0800015 	stw	r2,0(r20)
    9350:	1a802336 	bltu	r3,r10,93e0 <_fpadd_parts+0x250>
    9354:	a027883a 	mov	r19,r20
    9358:	9805883a 	mov	r2,r19
    935c:	ddc00717 	ldw	r23,28(sp)
    9360:	dd800617 	ldw	r22,24(sp)
    9364:	dd400517 	ldw	r21,20(sp)
    9368:	dd000417 	ldw	r20,16(sp)
    936c:	dcc00317 	ldw	r19,12(sp)
    9370:	dc800217 	ldw	r18,8(sp)
    9374:	dc400117 	ldw	r17,4(sp)
    9378:	dc000017 	ldw	r16,0(sp)
    937c:	dec00804 	addi	sp,sp,32
    9380:	f800283a 	ret
    9384:	20fff41e 	bne	r4,r3,9358 <_fpadd_parts+0x1c8>
    9388:	31000015 	stw	r4,0(r6)
    938c:	98800117 	ldw	r2,4(r19)
    9390:	30800115 	stw	r2,4(r6)
    9394:	98c00217 	ldw	r3,8(r19)
    9398:	30c00215 	stw	r3,8(r6)
    939c:	98800317 	ldw	r2,12(r19)
    93a0:	30800315 	stw	r2,12(r6)
    93a4:	98c00417 	ldw	r3,16(r19)
    93a8:	30c00415 	stw	r3,16(r6)
    93ac:	98800117 	ldw	r2,4(r19)
    93b0:	28c00117 	ldw	r3,4(r5)
    93b4:	3027883a 	mov	r19,r6
    93b8:	10c4703a 	and	r2,r2,r3
    93bc:	30800115 	stw	r2,4(r6)
    93c0:	003fe506 	br	9358 <_fpadd_parts+0x1c8>
    93c4:	1dc02616 	blt	r3,r23,9460 <_fpadd_parts+0x2d0>
    93c8:	0023883a 	mov	r17,zero
    93cc:	182f883a 	mov	r23,r3
    93d0:	0025883a 	mov	r18,zero
    93d4:	003fa806 	br	9278 <_fpadd_parts+0xe8>
    93d8:	a827883a 	mov	r19,r21
    93dc:	003fde06 	br	9358 <_fpadd_parts+0x1c8>
    93e0:	01800044 	movi	r6,1
    93e4:	500497fa 	slli	r2,r10,31
    93e8:	4808d07a 	srli	r4,r9,1
    93ec:	518ad83a 	srl	r5,r10,r6
    93f0:	a2000217 	ldw	r8,8(r20)
    93f4:	1108b03a 	or	r4,r2,r4
    93f8:	0007883a 	mov	r3,zero
    93fc:	4984703a 	and	r2,r9,r6
    9400:	208cb03a 	or	r6,r4,r2
    9404:	28ceb03a 	or	r7,r5,r3
    9408:	42000044 	addi	r8,r8,1
    940c:	a027883a 	mov	r19,r20
    9410:	a1c00415 	stw	r7,16(r20)
    9414:	a2000215 	stw	r8,8(r20)
    9418:	a1800315 	stw	r6,12(r20)
    941c:	003fce06 	br	9358 <_fpadd_parts+0x1c8>
    9420:	8bc5c83a 	sub	r2,r17,r15
    9424:	8889803a 	cmpltu	r4,r17,r2
    9428:	9407c83a 	sub	r3,r18,r16
    942c:	1909c83a 	sub	r4,r3,r4
    9430:	100d883a 	mov	r6,r2
    9434:	200f883a 	mov	r7,r4
    9438:	003f9906 	br	92a0 <_fpadd_parts+0x110>
    943c:	7c45883a 	add	r2,r15,r17
    9440:	13c9803a 	cmpltu	r4,r2,r15
    9444:	8487883a 	add	r3,r16,r18
    9448:	20c9883a 	add	r4,r4,r3
    944c:	a1400115 	stw	r5,4(r20)
    9450:	a5c00215 	stw	r23,8(r20)
    9454:	a0800315 	stw	r2,12(r20)
    9458:	a1000415 	stw	r4,16(r20)
    945c:	003fb606 	br	9338 <_fpadd_parts+0x1a8>
    9460:	001f883a 	mov	r15,zero
    9464:	0021883a 	mov	r16,zero
    9468:	003f8306 	br	9278 <_fpadd_parts+0xe8>
    946c:	018dc83a 	sub	r6,zero,r6
    9470:	003f6706 	br	9210 <_fpadd_parts+0x80>
    9474:	00bfff84 	movi	r2,-2
    9478:	117faf36 	bltu	r2,r5,9338 <_fpadd_parts+0x1a8>
    947c:	003f9806 	br	92e0 <_fpadd_parts+0x150>
    9480:	0005883a 	mov	r2,zero
    9484:	1189c83a 	sub	r4,r2,r6
    9488:	1105803a 	cmpltu	r2,r2,r4
    948c:	01cbc83a 	sub	r5,zero,r7
    9490:	2885c83a 	sub	r2,r5,r2
    9494:	01800044 	movi	r6,1
    9498:	a1800115 	stw	r6,4(r20)
    949c:	a5c00215 	stw	r23,8(r20)
    94a0:	a1000315 	stw	r4,12(r20)
    94a4:	a0800415 	stw	r2,16(r20)
    94a8:	003f8206 	br	92b4 <_fpadd_parts+0x124>
    94ac:	203f7226 	beq	r4,zero,9278 <_fpadd_parts+0xe8>
    94b0:	35bff804 	addi	r22,r6,-32
    94b4:	b9af883a 	add	r23,r23,r6
    94b8:	b0003116 	blt	r22,zero,9580 <_fpadd_parts+0x3f0>
    94bc:	959ad83a 	srl	r13,r18,r22
    94c0:	001d883a 	mov	r14,zero
    94c4:	000f883a 	mov	r7,zero
    94c8:	01000044 	movi	r4,1
    94cc:	0011883a 	mov	r8,zero
    94d0:	b0002516 	blt	r22,zero,9568 <_fpadd_parts+0x3d8>
    94d4:	2594983a 	sll	r10,r4,r22
    94d8:	0013883a 	mov	r9,zero
    94dc:	00bfffc4 	movi	r2,-1
    94e0:	4889883a 	add	r4,r9,r2
    94e4:	508b883a 	add	r5,r10,r2
    94e8:	224d803a 	cmpltu	r6,r4,r9
    94ec:	314b883a 	add	r5,r6,r5
    94f0:	8904703a 	and	r2,r17,r4
    94f4:	9146703a 	and	r3,r18,r5
    94f8:	10c4b03a 	or	r2,r2,r3
    94fc:	10000226 	beq	r2,zero,9508 <_fpadd_parts+0x378>
    9500:	01c00044 	movi	r7,1
    9504:	0011883a 	mov	r8,zero
    9508:	69e2b03a 	or	r17,r13,r7
    950c:	7224b03a 	or	r18,r14,r8
    9510:	003f5906 	br	9278 <_fpadd_parts+0xe8>
    9514:	8407883a 	add	r3,r16,r16
    9518:	008007c4 	movi	r2,31
    951c:	1185c83a 	sub	r2,r2,r6
    9520:	1886983a 	sll	r3,r3,r2
    9524:	7996d83a 	srl	r11,r15,r6
    9528:	8198d83a 	srl	r12,r16,r6
    952c:	1ad6b03a 	or	r11,r3,r11
    9530:	003f3e06 	br	922c <_fpadd_parts+0x9c>
    9534:	2006d07a 	srli	r3,r4,1
    9538:	008007c4 	movi	r2,31
    953c:	1185c83a 	sub	r2,r2,r6
    9540:	1890d83a 	srl	r8,r3,r2
    9544:	218e983a 	sll	r7,r4,r6
    9548:	003f3e06 	br	9244 <_fpadd_parts+0xb4>
    954c:	113f821e 	bne	r2,r4,9358 <_fpadd_parts+0x1c8>
    9550:	28c00117 	ldw	r3,4(r5)
    9554:	98800117 	ldw	r2,4(r19)
    9558:	10ff7f26 	beq	r2,r3,9358 <_fpadd_parts+0x1c8>
    955c:	04c001f4 	movhi	r19,7
    9560:	9cd23104 	addi	r19,r19,18628
    9564:	003f7c06 	br	9358 <_fpadd_parts+0x1c8>
    9568:	2006d07a 	srli	r3,r4,1
    956c:	008007c4 	movi	r2,31
    9570:	1185c83a 	sub	r2,r2,r6
    9574:	1894d83a 	srl	r10,r3,r2
    9578:	2192983a 	sll	r9,r4,r6
    957c:	003fd706 	br	94dc <_fpadd_parts+0x34c>
    9580:	9487883a 	add	r3,r18,r18
    9584:	008007c4 	movi	r2,31
    9588:	1185c83a 	sub	r2,r2,r6
    958c:	1886983a 	sll	r3,r3,r2
    9590:	899ad83a 	srl	r13,r17,r6
    9594:	919cd83a 	srl	r14,r18,r6
    9598:	1b5ab03a 	or	r13,r3,r13
    959c:	003fc906 	br	94c4 <_fpadd_parts+0x334>

000095a0 <__subdf3>:
    95a0:	deffea04 	addi	sp,sp,-88
    95a4:	dcc01415 	stw	r19,80(sp)
    95a8:	dcc00404 	addi	r19,sp,16
    95ac:	2011883a 	mov	r8,r4
    95b0:	2813883a 	mov	r9,r5
    95b4:	dc401315 	stw	r17,76(sp)
    95b8:	d809883a 	mov	r4,sp
    95bc:	980b883a 	mov	r5,r19
    95c0:	dc400904 	addi	r17,sp,36
    95c4:	dfc01515 	stw	ra,84(sp)
    95c8:	da400115 	stw	r9,4(sp)
    95cc:	d9c00315 	stw	r7,12(sp)
    95d0:	da000015 	stw	r8,0(sp)
    95d4:	d9800215 	stw	r6,8(sp)
    95d8:	000a5440 	call	a544 <__unpack_d>
    95dc:	d9000204 	addi	r4,sp,8
    95e0:	880b883a 	mov	r5,r17
    95e4:	000a5440 	call	a544 <__unpack_d>
    95e8:	d8800a17 	ldw	r2,40(sp)
    95ec:	880b883a 	mov	r5,r17
    95f0:	9809883a 	mov	r4,r19
    95f4:	d9800e04 	addi	r6,sp,56
    95f8:	1080005c 	xori	r2,r2,1
    95fc:	d8800a15 	stw	r2,40(sp)
    9600:	00091900 	call	9190 <_fpadd_parts>
    9604:	1009883a 	mov	r4,r2
    9608:	000a2300 	call	a230 <__pack_d>
    960c:	dfc01517 	ldw	ra,84(sp)
    9610:	dcc01417 	ldw	r19,80(sp)
    9614:	dc401317 	ldw	r17,76(sp)
    9618:	dec01604 	addi	sp,sp,88
    961c:	f800283a 	ret

00009620 <__adddf3>:
    9620:	deffea04 	addi	sp,sp,-88
    9624:	dcc01415 	stw	r19,80(sp)
    9628:	dcc00404 	addi	r19,sp,16
    962c:	2011883a 	mov	r8,r4
    9630:	2813883a 	mov	r9,r5
    9634:	dc401315 	stw	r17,76(sp)
    9638:	d809883a 	mov	r4,sp
    963c:	980b883a 	mov	r5,r19
    9640:	dc400904 	addi	r17,sp,36
    9644:	dfc01515 	stw	ra,84(sp)
    9648:	da400115 	stw	r9,4(sp)
    964c:	d9c00315 	stw	r7,12(sp)
    9650:	da000015 	stw	r8,0(sp)
    9654:	d9800215 	stw	r6,8(sp)
    9658:	000a5440 	call	a544 <__unpack_d>
    965c:	d9000204 	addi	r4,sp,8
    9660:	880b883a 	mov	r5,r17
    9664:	000a5440 	call	a544 <__unpack_d>
    9668:	d9800e04 	addi	r6,sp,56
    966c:	9809883a 	mov	r4,r19
    9670:	880b883a 	mov	r5,r17
    9674:	00091900 	call	9190 <_fpadd_parts>
    9678:	1009883a 	mov	r4,r2
    967c:	000a2300 	call	a230 <__pack_d>
    9680:	dfc01517 	ldw	ra,84(sp)
    9684:	dcc01417 	ldw	r19,80(sp)
    9688:	dc401317 	ldw	r17,76(sp)
    968c:	dec01604 	addi	sp,sp,88
    9690:	f800283a 	ret

00009694 <__muldf3>:
    9694:	deffe004 	addi	sp,sp,-128
    9698:	dc401815 	stw	r17,96(sp)
    969c:	dc400404 	addi	r17,sp,16
    96a0:	2011883a 	mov	r8,r4
    96a4:	2813883a 	mov	r9,r5
    96a8:	dc001715 	stw	r16,92(sp)
    96ac:	d809883a 	mov	r4,sp
    96b0:	880b883a 	mov	r5,r17
    96b4:	dc000904 	addi	r16,sp,36
    96b8:	dfc01f15 	stw	ra,124(sp)
    96bc:	da400115 	stw	r9,4(sp)
    96c0:	d9c00315 	stw	r7,12(sp)
    96c4:	da000015 	stw	r8,0(sp)
    96c8:	d9800215 	stw	r6,8(sp)
    96cc:	ddc01e15 	stw	r23,120(sp)
    96d0:	dd801d15 	stw	r22,116(sp)
    96d4:	dd401c15 	stw	r21,112(sp)
    96d8:	dd001b15 	stw	r20,108(sp)
    96dc:	dcc01a15 	stw	r19,104(sp)
    96e0:	dc801915 	stw	r18,100(sp)
    96e4:	000a5440 	call	a544 <__unpack_d>
    96e8:	d9000204 	addi	r4,sp,8
    96ec:	800b883a 	mov	r5,r16
    96f0:	000a5440 	call	a544 <__unpack_d>
    96f4:	d9000417 	ldw	r4,16(sp)
    96f8:	00800044 	movi	r2,1
    96fc:	1100102e 	bgeu	r2,r4,9740 <__muldf3+0xac>
    9700:	d8c00917 	ldw	r3,36(sp)
    9704:	10c0062e 	bgeu	r2,r3,9720 <__muldf3+0x8c>
    9708:	00800104 	movi	r2,4
    970c:	20800a26 	beq	r4,r2,9738 <__muldf3+0xa4>
    9710:	1880cc26 	beq	r3,r2,9a44 <__muldf3+0x3b0>
    9714:	00800084 	movi	r2,2
    9718:	20800926 	beq	r4,r2,9740 <__muldf3+0xac>
    971c:	1880191e 	bne	r3,r2,9784 <__muldf3+0xf0>
    9720:	d8c00a17 	ldw	r3,40(sp)
    9724:	d8800517 	ldw	r2,20(sp)
    9728:	8009883a 	mov	r4,r16
    972c:	10c4c03a 	cmpne	r2,r2,r3
    9730:	d8800a15 	stw	r2,40(sp)
    9734:	00000706 	br	9754 <__muldf3+0xc0>
    9738:	00800084 	movi	r2,2
    973c:	1880c326 	beq	r3,r2,9a4c <__muldf3+0x3b8>
    9740:	d8800517 	ldw	r2,20(sp)
    9744:	d8c00a17 	ldw	r3,40(sp)
    9748:	8809883a 	mov	r4,r17
    974c:	10c4c03a 	cmpne	r2,r2,r3
    9750:	d8800515 	stw	r2,20(sp)
    9754:	000a2300 	call	a230 <__pack_d>
    9758:	dfc01f17 	ldw	ra,124(sp)
    975c:	ddc01e17 	ldw	r23,120(sp)
    9760:	dd801d17 	ldw	r22,116(sp)
    9764:	dd401c17 	ldw	r21,112(sp)
    9768:	dd001b17 	ldw	r20,108(sp)
    976c:	dcc01a17 	ldw	r19,104(sp)
    9770:	dc801917 	ldw	r18,100(sp)
    9774:	dc401817 	ldw	r17,96(sp)
    9778:	dc001717 	ldw	r16,92(sp)
    977c:	dec02004 	addi	sp,sp,128
    9780:	f800283a 	ret
    9784:	dd800717 	ldw	r22,28(sp)
    9788:	dc800c17 	ldw	r18,48(sp)
    978c:	002b883a 	mov	r21,zero
    9790:	0023883a 	mov	r17,zero
    9794:	a80b883a 	mov	r5,r21
    9798:	b00d883a 	mov	r6,r22
    979c:	880f883a 	mov	r7,r17
    97a0:	ddc00817 	ldw	r23,32(sp)
    97a4:	dcc00d17 	ldw	r19,52(sp)
    97a8:	9009883a 	mov	r4,r18
    97ac:	000a08c0 	call	a08c <__muldi3>
    97b0:	001b883a 	mov	r13,zero
    97b4:	680f883a 	mov	r7,r13
    97b8:	b009883a 	mov	r4,r22
    97bc:	000b883a 	mov	r5,zero
    97c0:	980d883a 	mov	r6,r19
    97c4:	b82d883a 	mov	r22,r23
    97c8:	002f883a 	mov	r23,zero
    97cc:	db401615 	stw	r13,88(sp)
    97d0:	d8801315 	stw	r2,76(sp)
    97d4:	d8c01415 	stw	r3,80(sp)
    97d8:	dcc01515 	stw	r19,84(sp)
    97dc:	000a08c0 	call	a08c <__muldi3>
    97e0:	b00d883a 	mov	r6,r22
    97e4:	000b883a 	mov	r5,zero
    97e8:	9009883a 	mov	r4,r18
    97ec:	b80f883a 	mov	r7,r23
    97f0:	1021883a 	mov	r16,r2
    97f4:	1823883a 	mov	r17,r3
    97f8:	000a08c0 	call	a08c <__muldi3>
    97fc:	8085883a 	add	r2,r16,r2
    9800:	140d803a 	cmpltu	r6,r2,r16
    9804:	88c7883a 	add	r3,r17,r3
    9808:	30cd883a 	add	r6,r6,r3
    980c:	1029883a 	mov	r20,r2
    9810:	302b883a 	mov	r21,r6
    9814:	da801317 	ldw	r10,76(sp)
    9818:	dac01417 	ldw	r11,80(sp)
    981c:	db001517 	ldw	r12,84(sp)
    9820:	db401617 	ldw	r13,88(sp)
    9824:	3440612e 	bgeu	r6,r17,99ac <__muldf3+0x318>
    9828:	0009883a 	mov	r4,zero
    982c:	5105883a 	add	r2,r10,r4
    9830:	128d803a 	cmpltu	r6,r2,r10
    9834:	5d07883a 	add	r3,r11,r20
    9838:	30cd883a 	add	r6,r6,r3
    983c:	0021883a 	mov	r16,zero
    9840:	04400044 	movi	r17,1
    9844:	1025883a 	mov	r18,r2
    9848:	3027883a 	mov	r19,r6
    984c:	32c06236 	bltu	r6,r11,99d8 <__muldf3+0x344>
    9850:	59807a26 	beq	r11,r6,9a3c <__muldf3+0x3a8>
    9854:	680b883a 	mov	r5,r13
    9858:	b80f883a 	mov	r7,r23
    985c:	6009883a 	mov	r4,r12
    9860:	b00d883a 	mov	r6,r22
    9864:	000a08c0 	call	a08c <__muldi3>
    9868:	1009883a 	mov	r4,r2
    986c:	000f883a 	mov	r7,zero
    9870:	1545883a 	add	r2,r2,r21
    9874:	1111803a 	cmpltu	r8,r2,r4
    9878:	19c7883a 	add	r3,r3,r7
    987c:	40c7883a 	add	r3,r8,r3
    9880:	88cb883a 	add	r5,r17,r3
    9884:	d8c00617 	ldw	r3,24(sp)
    9888:	8089883a 	add	r4,r16,r2
    988c:	d8800b17 	ldw	r2,44(sp)
    9890:	18c00104 	addi	r3,r3,4
    9894:	240d803a 	cmpltu	r6,r4,r16
    9898:	10c7883a 	add	r3,r2,r3
    989c:	2013883a 	mov	r9,r4
    98a0:	d8800a17 	ldw	r2,40(sp)
    98a4:	d9000517 	ldw	r4,20(sp)
    98a8:	314d883a 	add	r6,r6,r5
    98ac:	3015883a 	mov	r10,r6
    98b0:	2088c03a 	cmpne	r4,r4,r2
    98b4:	00880034 	movhi	r2,8192
    98b8:	10bfffc4 	addi	r2,r2,-1
    98bc:	d9000f15 	stw	r4,60(sp)
    98c0:	d8c01015 	stw	r3,64(sp)
    98c4:	1180162e 	bgeu	r2,r6,9920 <__muldf3+0x28c>
    98c8:	1811883a 	mov	r8,r3
    98cc:	101f883a 	mov	r15,r2
    98d0:	980497fa 	slli	r2,r19,31
    98d4:	9016d07a 	srli	r11,r18,1
    98d8:	500697fa 	slli	r3,r10,31
    98dc:	480cd07a 	srli	r6,r9,1
    98e0:	500ed07a 	srli	r7,r10,1
    98e4:	12d6b03a 	or	r11,r2,r11
    98e8:	00800044 	movi	r2,1
    98ec:	198cb03a 	or	r6,r3,r6
    98f0:	4888703a 	and	r4,r9,r2
    98f4:	9818d07a 	srli	r12,r19,1
    98f8:	001b883a 	mov	r13,zero
    98fc:	03a00034 	movhi	r14,32768
    9900:	3013883a 	mov	r9,r6
    9904:	3815883a 	mov	r10,r7
    9908:	4091883a 	add	r8,r8,r2
    990c:	20000226 	beq	r4,zero,9918 <__muldf3+0x284>
    9910:	5b64b03a 	or	r18,r11,r13
    9914:	63a6b03a 	or	r19,r12,r14
    9918:	7abfed36 	bltu	r15,r10,98d0 <__muldf3+0x23c>
    991c:	da001015 	stw	r8,64(sp)
    9920:	00840034 	movhi	r2,4096
    9924:	10bfffc4 	addi	r2,r2,-1
    9928:	12801436 	bltu	r2,r10,997c <__muldf3+0x2e8>
    992c:	da001017 	ldw	r8,64(sp)
    9930:	101f883a 	mov	r15,r2
    9934:	4a45883a 	add	r2,r9,r9
    9938:	124d803a 	cmpltu	r6,r2,r9
    993c:	5287883a 	add	r3,r10,r10
    9940:	9497883a 	add	r11,r18,r18
    9944:	5c8f803a 	cmpltu	r7,r11,r18
    9948:	9cd9883a 	add	r12,r19,r19
    994c:	01000044 	movi	r4,1
    9950:	30cd883a 	add	r6,r6,r3
    9954:	3b0f883a 	add	r7,r7,r12
    9958:	423fffc4 	addi	r8,r8,-1
    995c:	1013883a 	mov	r9,r2
    9960:	3015883a 	mov	r10,r6
    9964:	111ab03a 	or	r13,r2,r4
    9968:	98003016 	blt	r19,zero,9a2c <__muldf3+0x398>
    996c:	5825883a 	mov	r18,r11
    9970:	3827883a 	mov	r19,r7
    9974:	7abfef2e 	bgeu	r15,r10,9934 <__muldf3+0x2a0>
    9978:	da001015 	stw	r8,64(sp)
    997c:	00803fc4 	movi	r2,255
    9980:	488e703a 	and	r7,r9,r2
    9984:	00802004 	movi	r2,128
    9988:	0007883a 	mov	r3,zero
    998c:	0011883a 	mov	r8,zero
    9990:	38801826 	beq	r7,r2,99f4 <__muldf3+0x360>
    9994:	008000c4 	movi	r2,3
    9998:	d9000e04 	addi	r4,sp,56
    999c:	da801215 	stw	r10,72(sp)
    99a0:	d8800e15 	stw	r2,56(sp)
    99a4:	da401115 	stw	r9,68(sp)
    99a8:	003f6a06 	br	9754 <__muldf3+0xc0>
    99ac:	89802126 	beq	r17,r6,9a34 <__muldf3+0x3a0>
    99b0:	0009883a 	mov	r4,zero
    99b4:	5105883a 	add	r2,r10,r4
    99b8:	128d803a 	cmpltu	r6,r2,r10
    99bc:	5d07883a 	add	r3,r11,r20
    99c0:	30cd883a 	add	r6,r6,r3
    99c4:	0021883a 	mov	r16,zero
    99c8:	0023883a 	mov	r17,zero
    99cc:	1025883a 	mov	r18,r2
    99d0:	3027883a 	mov	r19,r6
    99d4:	32ff9e2e 	bgeu	r6,r11,9850 <__muldf3+0x1bc>
    99d8:	00800044 	movi	r2,1
    99dc:	8089883a 	add	r4,r16,r2
    99e0:	240d803a 	cmpltu	r6,r4,r16
    99e4:	344d883a 	add	r6,r6,r17
    99e8:	2021883a 	mov	r16,r4
    99ec:	3023883a 	mov	r17,r6
    99f0:	003f9806 	br	9854 <__muldf3+0x1c0>
    99f4:	403fe71e 	bne	r8,zero,9994 <__muldf3+0x300>
    99f8:	01004004 	movi	r4,256
    99fc:	4904703a 	and	r2,r9,r4
    9a00:	10c4b03a 	or	r2,r2,r3
    9a04:	103fe31e 	bne	r2,zero,9994 <__muldf3+0x300>
    9a08:	94c4b03a 	or	r2,r18,r19
    9a0c:	103fe126 	beq	r2,zero,9994 <__muldf3+0x300>
    9a10:	49c5883a 	add	r2,r9,r7
    9a14:	1251803a 	cmpltu	r8,r2,r9
    9a18:	4291883a 	add	r8,r8,r10
    9a1c:	013fc004 	movi	r4,-256
    9a20:	1112703a 	and	r9,r2,r4
    9a24:	4015883a 	mov	r10,r8
    9a28:	003fda06 	br	9994 <__muldf3+0x300>
    9a2c:	6813883a 	mov	r9,r13
    9a30:	003fce06 	br	996c <__muldf3+0x2d8>
    9a34:	143f7c36 	bltu	r2,r16,9828 <__muldf3+0x194>
    9a38:	003fdd06 	br	99b0 <__muldf3+0x31c>
    9a3c:	12bf852e 	bgeu	r2,r10,9854 <__muldf3+0x1c0>
    9a40:	003fe506 	br	99d8 <__muldf3+0x344>
    9a44:	00800084 	movi	r2,2
    9a48:	20bf351e 	bne	r4,r2,9720 <__muldf3+0x8c>
    9a4c:	010001f4 	movhi	r4,7
    9a50:	21123104 	addi	r4,r4,18628
    9a54:	003f3f06 	br	9754 <__muldf3+0xc0>

00009a58 <__divdf3>:
    9a58:	deffed04 	addi	sp,sp,-76
    9a5c:	dcc01115 	stw	r19,68(sp)
    9a60:	dcc00404 	addi	r19,sp,16
    9a64:	2011883a 	mov	r8,r4
    9a68:	2813883a 	mov	r9,r5
    9a6c:	dc000e15 	stw	r16,56(sp)
    9a70:	d809883a 	mov	r4,sp
    9a74:	980b883a 	mov	r5,r19
    9a78:	dc000904 	addi	r16,sp,36
    9a7c:	dfc01215 	stw	ra,72(sp)
    9a80:	da400115 	stw	r9,4(sp)
    9a84:	d9c00315 	stw	r7,12(sp)
    9a88:	da000015 	stw	r8,0(sp)
    9a8c:	d9800215 	stw	r6,8(sp)
    9a90:	dc801015 	stw	r18,64(sp)
    9a94:	dc400f15 	stw	r17,60(sp)
    9a98:	000a5440 	call	a544 <__unpack_d>
    9a9c:	d9000204 	addi	r4,sp,8
    9aa0:	800b883a 	mov	r5,r16
    9aa4:	000a5440 	call	a544 <__unpack_d>
    9aa8:	d9000417 	ldw	r4,16(sp)
    9aac:	00800044 	movi	r2,1
    9ab0:	11000b2e 	bgeu	r2,r4,9ae0 <__divdf3+0x88>
    9ab4:	d9400917 	ldw	r5,36(sp)
    9ab8:	1140762e 	bgeu	r2,r5,9c94 <__divdf3+0x23c>
    9abc:	d8800517 	ldw	r2,20(sp)
    9ac0:	d8c00a17 	ldw	r3,40(sp)
    9ac4:	01800104 	movi	r6,4
    9ac8:	10c4f03a 	xor	r2,r2,r3
    9acc:	d8800515 	stw	r2,20(sp)
    9ad0:	21800226 	beq	r4,r6,9adc <__divdf3+0x84>
    9ad4:	00800084 	movi	r2,2
    9ad8:	2080141e 	bne	r4,r2,9b2c <__divdf3+0xd4>
    9adc:	29000926 	beq	r5,r4,9b04 <__divdf3+0xac>
    9ae0:	9809883a 	mov	r4,r19
    9ae4:	000a2300 	call	a230 <__pack_d>
    9ae8:	dfc01217 	ldw	ra,72(sp)
    9aec:	dcc01117 	ldw	r19,68(sp)
    9af0:	dc801017 	ldw	r18,64(sp)
    9af4:	dc400f17 	ldw	r17,60(sp)
    9af8:	dc000e17 	ldw	r16,56(sp)
    9afc:	dec01304 	addi	sp,sp,76
    9b00:	f800283a 	ret
    9b04:	010001f4 	movhi	r4,7
    9b08:	21123104 	addi	r4,r4,18628
    9b0c:	000a2300 	call	a230 <__pack_d>
    9b10:	dfc01217 	ldw	ra,72(sp)
    9b14:	dcc01117 	ldw	r19,68(sp)
    9b18:	dc801017 	ldw	r18,64(sp)
    9b1c:	dc400f17 	ldw	r17,60(sp)
    9b20:	dc000e17 	ldw	r16,56(sp)
    9b24:	dec01304 	addi	sp,sp,76
    9b28:	f800283a 	ret
    9b2c:	29805b26 	beq	r5,r6,9c9c <__divdf3+0x244>
    9b30:	28802d26 	beq	r5,r2,9be8 <__divdf3+0x190>
    9b34:	d8c00617 	ldw	r3,24(sp)
    9b38:	d8800b17 	ldw	r2,44(sp)
    9b3c:	d9c00817 	ldw	r7,32(sp)
    9b40:	dc400d17 	ldw	r17,52(sp)
    9b44:	188bc83a 	sub	r5,r3,r2
    9b48:	d9800717 	ldw	r6,28(sp)
    9b4c:	dc000c17 	ldw	r16,48(sp)
    9b50:	d9400615 	stw	r5,24(sp)
    9b54:	3c403836 	bltu	r7,r17,9c38 <__divdf3+0x1e0>
    9b58:	89c03626 	beq	r17,r7,9c34 <__divdf3+0x1dc>
    9b5c:	0015883a 	mov	r10,zero
    9b60:	001d883a 	mov	r14,zero
    9b64:	02c40034 	movhi	r11,4096
    9b68:	001f883a 	mov	r15,zero
    9b6c:	003f883a 	mov	ra,zero
    9b70:	04800f44 	movi	r18,61
    9b74:	00000f06 	br	9bb4 <__divdf3+0x15c>
    9b78:	601d883a 	mov	r14,r12
    9b7c:	681f883a 	mov	r15,r13
    9b80:	400d883a 	mov	r6,r8
    9b84:	100f883a 	mov	r7,r2
    9b88:	3191883a 	add	r8,r6,r6
    9b8c:	5808d07a 	srli	r4,r11,1
    9b90:	4185803a 	cmpltu	r2,r8,r6
    9b94:	39d3883a 	add	r9,r7,r7
    9b98:	28c6b03a 	or	r3,r5,r3
    9b9c:	1245883a 	add	r2,r2,r9
    9ba0:	1815883a 	mov	r10,r3
    9ba4:	2017883a 	mov	r11,r4
    9ba8:	400d883a 	mov	r6,r8
    9bac:	100f883a 	mov	r7,r2
    9bb0:	fc801726 	beq	ra,r18,9c10 <__divdf3+0x1b8>
    9bb4:	580a97fa 	slli	r5,r11,31
    9bb8:	5006d07a 	srli	r3,r10,1
    9bbc:	ffc00044 	addi	ra,ra,1
    9bc0:	3c7ff136 	bltu	r7,r17,9b88 <__divdf3+0x130>
    9bc4:	3411c83a 	sub	r8,r6,r16
    9bc8:	3205803a 	cmpltu	r2,r6,r8
    9bcc:	3c53c83a 	sub	r9,r7,r17
    9bd0:	7298b03a 	or	r12,r14,r10
    9bd4:	7adab03a 	or	r13,r15,r11
    9bd8:	4885c83a 	sub	r2,r9,r2
    9bdc:	89ffe61e 	bne	r17,r7,9b78 <__divdf3+0x120>
    9be0:	343fe936 	bltu	r6,r16,9b88 <__divdf3+0x130>
    9be4:	003fe406 	br	9b78 <__divdf3+0x120>
    9be8:	9809883a 	mov	r4,r19
    9bec:	d9800415 	stw	r6,16(sp)
    9bf0:	000a2300 	call	a230 <__pack_d>
    9bf4:	dfc01217 	ldw	ra,72(sp)
    9bf8:	dcc01117 	ldw	r19,68(sp)
    9bfc:	dc801017 	ldw	r18,64(sp)
    9c00:	dc400f17 	ldw	r17,60(sp)
    9c04:	dc000e17 	ldw	r16,56(sp)
    9c08:	dec01304 	addi	sp,sp,76
    9c0c:	f800283a 	ret
    9c10:	00803fc4 	movi	r2,255
    9c14:	7090703a 	and	r8,r14,r2
    9c18:	00802004 	movi	r2,128
    9c1c:	0007883a 	mov	r3,zero
    9c20:	0013883a 	mov	r9,zero
    9c24:	40800d26 	beq	r8,r2,9c5c <__divdf3+0x204>
    9c28:	dbc00815 	stw	r15,32(sp)
    9c2c:	db800715 	stw	r14,28(sp)
    9c30:	003fab06 	br	9ae0 <__divdf3+0x88>
    9c34:	343fc92e 	bgeu	r6,r16,9b5c <__divdf3+0x104>
    9c38:	3185883a 	add	r2,r6,r6
    9c3c:	1189803a 	cmpltu	r4,r2,r6
    9c40:	39c7883a 	add	r3,r7,r7
    9c44:	20c9883a 	add	r4,r4,r3
    9c48:	297fffc4 	addi	r5,r5,-1
    9c4c:	100d883a 	mov	r6,r2
    9c50:	200f883a 	mov	r7,r4
    9c54:	d9400615 	stw	r5,24(sp)
    9c58:	003fc006 	br	9b5c <__divdf3+0x104>
    9c5c:	483ff21e 	bne	r9,zero,9c28 <__divdf3+0x1d0>
    9c60:	01004004 	movi	r4,256
    9c64:	7104703a 	and	r2,r14,r4
    9c68:	10c4b03a 	or	r2,r2,r3
    9c6c:	103fee1e 	bne	r2,zero,9c28 <__divdf3+0x1d0>
    9c70:	31c4b03a 	or	r2,r6,r7
    9c74:	103fec26 	beq	r2,zero,9c28 <__divdf3+0x1d0>
    9c78:	7205883a 	add	r2,r14,r8
    9c7c:	1391803a 	cmpltu	r8,r2,r14
    9c80:	43d1883a 	add	r8,r8,r15
    9c84:	013fc004 	movi	r4,-256
    9c88:	111c703a 	and	r14,r2,r4
    9c8c:	401f883a 	mov	r15,r8
    9c90:	003fe506 	br	9c28 <__divdf3+0x1d0>
    9c94:	8009883a 	mov	r4,r16
    9c98:	003f9206 	br	9ae4 <__divdf3+0x8c>
    9c9c:	9809883a 	mov	r4,r19
    9ca0:	d8000715 	stw	zero,28(sp)
    9ca4:	d8000815 	stw	zero,32(sp)
    9ca8:	d8000615 	stw	zero,24(sp)
    9cac:	003f8d06 	br	9ae4 <__divdf3+0x8c>

00009cb0 <__ltdf2>:
    9cb0:	deffef04 	addi	sp,sp,-68
    9cb4:	dc400f15 	stw	r17,60(sp)
    9cb8:	dc400404 	addi	r17,sp,16
    9cbc:	2005883a 	mov	r2,r4
    9cc0:	2807883a 	mov	r3,r5
    9cc4:	dc000e15 	stw	r16,56(sp)
    9cc8:	d809883a 	mov	r4,sp
    9ccc:	880b883a 	mov	r5,r17
    9cd0:	dc000904 	addi	r16,sp,36
    9cd4:	d8c00115 	stw	r3,4(sp)
    9cd8:	d8800015 	stw	r2,0(sp)
    9cdc:	d9800215 	stw	r6,8(sp)
    9ce0:	dfc01015 	stw	ra,64(sp)
    9ce4:	d9c00315 	stw	r7,12(sp)
    9ce8:	000a5440 	call	a544 <__unpack_d>
    9cec:	d9000204 	addi	r4,sp,8
    9cf0:	800b883a 	mov	r5,r16
    9cf4:	000a5440 	call	a544 <__unpack_d>
    9cf8:	d8800417 	ldw	r2,16(sp)
    9cfc:	00c00044 	movi	r3,1
    9d00:	180d883a 	mov	r6,r3
    9d04:	1880062e 	bgeu	r3,r2,9d20 <__ltdf2+0x70>
    9d08:	d8800917 	ldw	r2,36(sp)
    9d0c:	8809883a 	mov	r4,r17
    9d10:	800b883a 	mov	r5,r16
    9d14:	1880022e 	bgeu	r3,r2,9d20 <__ltdf2+0x70>
    9d18:	000a67c0 	call	a67c <__fpcmp_parts_d>
    9d1c:	100d883a 	mov	r6,r2
    9d20:	3005883a 	mov	r2,r6
    9d24:	dfc01017 	ldw	ra,64(sp)
    9d28:	dc400f17 	ldw	r17,60(sp)
    9d2c:	dc000e17 	ldw	r16,56(sp)
    9d30:	dec01104 	addi	sp,sp,68
    9d34:	f800283a 	ret

00009d38 <__floatsidf>:
    9d38:	2006d7fa 	srli	r3,r4,31
    9d3c:	defff604 	addi	sp,sp,-40
    9d40:	008000c4 	movi	r2,3
    9d44:	dfc00915 	stw	ra,36(sp)
    9d48:	dcc00815 	stw	r19,32(sp)
    9d4c:	dc800715 	stw	r18,28(sp)
    9d50:	dc400615 	stw	r17,24(sp)
    9d54:	dc000515 	stw	r16,20(sp)
    9d58:	d8800015 	stw	r2,0(sp)
    9d5c:	d8c00115 	stw	r3,4(sp)
    9d60:	20000f1e 	bne	r4,zero,9da0 <__floatsidf+0x68>
    9d64:	00800084 	movi	r2,2
    9d68:	d8800015 	stw	r2,0(sp)
    9d6c:	d809883a 	mov	r4,sp
    9d70:	000a2300 	call	a230 <__pack_d>
    9d74:	1009883a 	mov	r4,r2
    9d78:	180b883a 	mov	r5,r3
    9d7c:	2005883a 	mov	r2,r4
    9d80:	2807883a 	mov	r3,r5
    9d84:	dfc00917 	ldw	ra,36(sp)
    9d88:	dcc00817 	ldw	r19,32(sp)
    9d8c:	dc800717 	ldw	r18,28(sp)
    9d90:	dc400617 	ldw	r17,24(sp)
    9d94:	dc000517 	ldw	r16,20(sp)
    9d98:	dec00a04 	addi	sp,sp,40
    9d9c:	f800283a 	ret
    9da0:	00800f04 	movi	r2,60
    9da4:	1807003a 	cmpeq	r3,r3,zero
    9da8:	d8800215 	stw	r2,8(sp)
    9dac:	18001126 	beq	r3,zero,9df4 <__floatsidf+0xbc>
    9db0:	0027883a 	mov	r19,zero
    9db4:	2025883a 	mov	r18,r4
    9db8:	d9000315 	stw	r4,12(sp)
    9dbc:	dcc00415 	stw	r19,16(sp)
    9dc0:	000a1b00 	call	a1b0 <__clzsi2>
    9dc4:	11000744 	addi	r4,r2,29
    9dc8:	013fe80e 	bge	zero,r4,9d6c <__floatsidf+0x34>
    9dcc:	10bfff44 	addi	r2,r2,-3
    9dd0:	10000c16 	blt	r2,zero,9e04 <__floatsidf+0xcc>
    9dd4:	90a2983a 	sll	r17,r18,r2
    9dd8:	0021883a 	mov	r16,zero
    9ddc:	d8800217 	ldw	r2,8(sp)
    9de0:	dc400415 	stw	r17,16(sp)
    9de4:	dc000315 	stw	r16,12(sp)
    9de8:	1105c83a 	sub	r2,r2,r4
    9dec:	d8800215 	stw	r2,8(sp)
    9df0:	003fde06 	br	9d6c <__floatsidf+0x34>
    9df4:	00a00034 	movhi	r2,32768
    9df8:	20800a26 	beq	r4,r2,9e24 <__floatsidf+0xec>
    9dfc:	0109c83a 	sub	r4,zero,r4
    9e00:	003feb06 	br	9db0 <__floatsidf+0x78>
    9e04:	9006d07a 	srli	r3,r18,1
    9e08:	008007c4 	movi	r2,31
    9e0c:	1105c83a 	sub	r2,r2,r4
    9e10:	1886d83a 	srl	r3,r3,r2
    9e14:	9922983a 	sll	r17,r19,r4
    9e18:	9120983a 	sll	r16,r18,r4
    9e1c:	1c62b03a 	or	r17,r3,r17
    9e20:	003fee06 	br	9ddc <__floatsidf+0xa4>
    9e24:	0009883a 	mov	r4,zero
    9e28:	01707834 	movhi	r5,49632
    9e2c:	003fd306 	br	9d7c <__floatsidf+0x44>

00009e30 <__fixdfsi>:
    9e30:	defff804 	addi	sp,sp,-32
    9e34:	2005883a 	mov	r2,r4
    9e38:	2807883a 	mov	r3,r5
    9e3c:	d809883a 	mov	r4,sp
    9e40:	d9400204 	addi	r5,sp,8
    9e44:	d8c00115 	stw	r3,4(sp)
    9e48:	d8800015 	stw	r2,0(sp)
    9e4c:	dfc00715 	stw	ra,28(sp)
    9e50:	000a5440 	call	a544 <__unpack_d>
    9e54:	d8c00217 	ldw	r3,8(sp)
    9e58:	00800084 	movi	r2,2
    9e5c:	1880051e 	bne	r3,r2,9e74 <__fixdfsi+0x44>
    9e60:	0007883a 	mov	r3,zero
    9e64:	1805883a 	mov	r2,r3
    9e68:	dfc00717 	ldw	ra,28(sp)
    9e6c:	dec00804 	addi	sp,sp,32
    9e70:	f800283a 	ret
    9e74:	00800044 	movi	r2,1
    9e78:	10fff92e 	bgeu	r2,r3,9e60 <__fixdfsi+0x30>
    9e7c:	00800104 	movi	r2,4
    9e80:	18800426 	beq	r3,r2,9e94 <__fixdfsi+0x64>
    9e84:	d8c00417 	ldw	r3,16(sp)
    9e88:	183ff516 	blt	r3,zero,9e60 <__fixdfsi+0x30>
    9e8c:	00800784 	movi	r2,30
    9e90:	10c0080e 	bge	r2,r3,9eb4 <__fixdfsi+0x84>
    9e94:	d8800317 	ldw	r2,12(sp)
    9e98:	1000121e 	bne	r2,zero,9ee4 <__fixdfsi+0xb4>
    9e9c:	00e00034 	movhi	r3,32768
    9ea0:	18ffffc4 	addi	r3,r3,-1
    9ea4:	1805883a 	mov	r2,r3
    9ea8:	dfc00717 	ldw	ra,28(sp)
    9eac:	dec00804 	addi	sp,sp,32
    9eb0:	f800283a 	ret
    9eb4:	00800f04 	movi	r2,60
    9eb8:	10d1c83a 	sub	r8,r2,r3
    9ebc:	40bff804 	addi	r2,r8,-32
    9ec0:	d9800517 	ldw	r6,20(sp)
    9ec4:	d9c00617 	ldw	r7,24(sp)
    9ec8:	10000816 	blt	r2,zero,9eec <__fixdfsi+0xbc>
    9ecc:	3888d83a 	srl	r4,r7,r2
    9ed0:	d8800317 	ldw	r2,12(sp)
    9ed4:	2007883a 	mov	r3,r4
    9ed8:	103fe226 	beq	r2,zero,9e64 <__fixdfsi+0x34>
    9edc:	0107c83a 	sub	r3,zero,r4
    9ee0:	003fe006 	br	9e64 <__fixdfsi+0x34>
    9ee4:	00e00034 	movhi	r3,32768
    9ee8:	003fde06 	br	9e64 <__fixdfsi+0x34>
    9eec:	39c7883a 	add	r3,r7,r7
    9ef0:	008007c4 	movi	r2,31
    9ef4:	1205c83a 	sub	r2,r2,r8
    9ef8:	1886983a 	sll	r3,r3,r2
    9efc:	3208d83a 	srl	r4,r6,r8
    9f00:	1908b03a 	or	r4,r3,r4
    9f04:	003ff206 	br	9ed0 <__fixdfsi+0xa0>

00009f08 <udivmodsi4>:
    9f08:	29001b2e 	bgeu	r5,r4,9f78 <udivmodsi4+0x70>
    9f0c:	28001a16 	blt	r5,zero,9f78 <udivmodsi4+0x70>
    9f10:	00800044 	movi	r2,1
    9f14:	0007883a 	mov	r3,zero
    9f18:	01c007c4 	movi	r7,31
    9f1c:	00000306 	br	9f2c <udivmodsi4+0x24>
    9f20:	19c01326 	beq	r3,r7,9f70 <udivmodsi4+0x68>
    9f24:	18c00044 	addi	r3,r3,1
    9f28:	28000416 	blt	r5,zero,9f3c <udivmodsi4+0x34>
    9f2c:	294b883a 	add	r5,r5,r5
    9f30:	1085883a 	add	r2,r2,r2
    9f34:	293ffa36 	bltu	r5,r4,9f20 <udivmodsi4+0x18>
    9f38:	10000d26 	beq	r2,zero,9f70 <udivmodsi4+0x68>
    9f3c:	0007883a 	mov	r3,zero
    9f40:	21400236 	bltu	r4,r5,9f4c <udivmodsi4+0x44>
    9f44:	2149c83a 	sub	r4,r4,r5
    9f48:	1886b03a 	or	r3,r3,r2
    9f4c:	1004d07a 	srli	r2,r2,1
    9f50:	280ad07a 	srli	r5,r5,1
    9f54:	103ffa1e 	bne	r2,zero,9f40 <udivmodsi4+0x38>
    9f58:	30000226 	beq	r6,zero,9f64 <udivmodsi4+0x5c>
    9f5c:	2005883a 	mov	r2,r4
    9f60:	f800283a 	ret
    9f64:	1809883a 	mov	r4,r3
    9f68:	2005883a 	mov	r2,r4
    9f6c:	f800283a 	ret
    9f70:	0007883a 	mov	r3,zero
    9f74:	003ff806 	br	9f58 <udivmodsi4+0x50>
    9f78:	00800044 	movi	r2,1
    9f7c:	0007883a 	mov	r3,zero
    9f80:	003fef06 	br	9f40 <udivmodsi4+0x38>

00009f84 <__divsi3>:
    9f84:	defffe04 	addi	sp,sp,-8
    9f88:	dc000015 	stw	r16,0(sp)
    9f8c:	dfc00115 	stw	ra,4(sp)
    9f90:	0021883a 	mov	r16,zero
    9f94:	20000c16 	blt	r4,zero,9fc8 <__divsi3+0x44>
    9f98:	000d883a 	mov	r6,zero
    9f9c:	28000e16 	blt	r5,zero,9fd8 <__divsi3+0x54>
    9fa0:	0009f080 	call	9f08 <udivmodsi4>
    9fa4:	1007883a 	mov	r3,r2
    9fa8:	8005003a 	cmpeq	r2,r16,zero
    9fac:	1000011e 	bne	r2,zero,9fb4 <__divsi3+0x30>
    9fb0:	00c7c83a 	sub	r3,zero,r3
    9fb4:	1805883a 	mov	r2,r3
    9fb8:	dfc00117 	ldw	ra,4(sp)
    9fbc:	dc000017 	ldw	r16,0(sp)
    9fc0:	dec00204 	addi	sp,sp,8
    9fc4:	f800283a 	ret
    9fc8:	0109c83a 	sub	r4,zero,r4
    9fcc:	04000044 	movi	r16,1
    9fd0:	000d883a 	mov	r6,zero
    9fd4:	283ff20e 	bge	r5,zero,9fa0 <__divsi3+0x1c>
    9fd8:	014bc83a 	sub	r5,zero,r5
    9fdc:	8021003a 	cmpeq	r16,r16,zero
    9fe0:	003fef06 	br	9fa0 <__divsi3+0x1c>

00009fe4 <__modsi3>:
    9fe4:	deffff04 	addi	sp,sp,-4
    9fe8:	dfc00015 	stw	ra,0(sp)
    9fec:	01800044 	movi	r6,1
    9ff0:	2807883a 	mov	r3,r5
    9ff4:	20000416 	blt	r4,zero,a008 <__modsi3+0x24>
    9ff8:	28000c16 	blt	r5,zero,a02c <__modsi3+0x48>
    9ffc:	dfc00017 	ldw	ra,0(sp)
    a000:	dec00104 	addi	sp,sp,4
    a004:	0009f081 	jmpi	9f08 <udivmodsi4>
    a008:	0109c83a 	sub	r4,zero,r4
    a00c:	28000b16 	blt	r5,zero,a03c <__modsi3+0x58>
    a010:	180b883a 	mov	r5,r3
    a014:	01800044 	movi	r6,1
    a018:	0009f080 	call	9f08 <udivmodsi4>
    a01c:	0085c83a 	sub	r2,zero,r2
    a020:	dfc00017 	ldw	ra,0(sp)
    a024:	dec00104 	addi	sp,sp,4
    a028:	f800283a 	ret
    a02c:	014bc83a 	sub	r5,zero,r5
    a030:	dfc00017 	ldw	ra,0(sp)
    a034:	dec00104 	addi	sp,sp,4
    a038:	0009f081 	jmpi	9f08 <udivmodsi4>
    a03c:	0147c83a 	sub	r3,zero,r5
    a040:	003ff306 	br	a010 <__modsi3+0x2c>

0000a044 <__udivsi3>:
    a044:	000d883a 	mov	r6,zero
    a048:	0009f081 	jmpi	9f08 <udivmodsi4>

0000a04c <__umodsi3>:
    a04c:	01800044 	movi	r6,1
    a050:	0009f081 	jmpi	9f08 <udivmodsi4>

0000a054 <__mulsi3>:
    a054:	20000a26 	beq	r4,zero,a080 <__mulsi3+0x2c>
    a058:	0007883a 	mov	r3,zero
    a05c:	2080004c 	andi	r2,r4,1
    a060:	1005003a 	cmpeq	r2,r2,zero
    a064:	2008d07a 	srli	r4,r4,1
    a068:	1000011e 	bne	r2,zero,a070 <__mulsi3+0x1c>
    a06c:	1947883a 	add	r3,r3,r5
    a070:	294b883a 	add	r5,r5,r5
    a074:	203ff91e 	bne	r4,zero,a05c <__mulsi3+0x8>
    a078:	1805883a 	mov	r2,r3
    a07c:	f800283a 	ret
    a080:	0007883a 	mov	r3,zero
    a084:	1805883a 	mov	r2,r3
    a088:	f800283a 	ret

0000a08c <__muldi3>:
    a08c:	defff204 	addi	sp,sp,-56
    a090:	df000c15 	stw	fp,48(sp)
    a094:	3038d43a 	srli	fp,r6,16
    a098:	dd000815 	stw	r20,32(sp)
    a09c:	dc400515 	stw	r17,20(sp)
    a0a0:	2028d43a 	srli	r20,r4,16
    a0a4:	247fffcc 	andi	r17,r4,65535
    a0a8:	dc000415 	stw	r16,16(sp)
    a0ac:	343fffcc 	andi	r16,r6,65535
    a0b0:	dcc00715 	stw	r19,28(sp)
    a0b4:	d9000015 	stw	r4,0(sp)
    a0b8:	2827883a 	mov	r19,r5
    a0bc:	8809883a 	mov	r4,r17
    a0c0:	d9400115 	stw	r5,4(sp)
    a0c4:	800b883a 	mov	r5,r16
    a0c8:	d9800215 	stw	r6,8(sp)
    a0cc:	dfc00d15 	stw	ra,52(sp)
    a0d0:	d9c00315 	stw	r7,12(sp)
    a0d4:	dd800a15 	stw	r22,40(sp)
    a0d8:	dd400915 	stw	r21,36(sp)
    a0dc:	302d883a 	mov	r22,r6
    a0e0:	ddc00b15 	stw	r23,44(sp)
    a0e4:	dc800615 	stw	r18,24(sp)
    a0e8:	000a0540 	call	a054 <__mulsi3>
    a0ec:	8809883a 	mov	r4,r17
    a0f0:	e00b883a 	mov	r5,fp
    a0f4:	102b883a 	mov	r21,r2
    a0f8:	000a0540 	call	a054 <__mulsi3>
    a0fc:	800b883a 	mov	r5,r16
    a100:	a009883a 	mov	r4,r20
    a104:	1023883a 	mov	r17,r2
    a108:	000a0540 	call	a054 <__mulsi3>
    a10c:	a009883a 	mov	r4,r20
    a110:	e00b883a 	mov	r5,fp
    a114:	1021883a 	mov	r16,r2
    a118:	000a0540 	call	a054 <__mulsi3>
    a11c:	a8ffffcc 	andi	r3,r21,65535
    a120:	a82ad43a 	srli	r21,r21,16
    a124:	8c23883a 	add	r17,r17,r16
    a128:	1011883a 	mov	r8,r2
    a12c:	ac6b883a 	add	r21,r21,r17
    a130:	a804943a 	slli	r2,r21,16
    a134:	b009883a 	mov	r4,r22
    a138:	980b883a 	mov	r5,r19
    a13c:	10c7883a 	add	r3,r2,r3
    a140:	a812d43a 	srli	r9,r21,16
    a144:	180d883a 	mov	r6,r3
    a148:	ac00022e 	bgeu	r21,r16,a154 <__muldi3+0xc8>
    a14c:	00800074 	movhi	r2,1
    a150:	4091883a 	add	r8,r8,r2
    a154:	4267883a 	add	r19,r8,r9
    a158:	302d883a 	mov	r22,r6
    a15c:	000a0540 	call	a054 <__mulsi3>
    a160:	d9400317 	ldw	r5,12(sp)
    a164:	d9000017 	ldw	r4,0(sp)
    a168:	1023883a 	mov	r17,r2
    a16c:	000a0540 	call	a054 <__mulsi3>
    a170:	14cb883a 	add	r5,r2,r19
    a174:	894b883a 	add	r5,r17,r5
    a178:	b005883a 	mov	r2,r22
    a17c:	2807883a 	mov	r3,r5
    a180:	dfc00d17 	ldw	ra,52(sp)
    a184:	df000c17 	ldw	fp,48(sp)
    a188:	ddc00b17 	ldw	r23,44(sp)
    a18c:	dd800a17 	ldw	r22,40(sp)
    a190:	dd400917 	ldw	r21,36(sp)
    a194:	dd000817 	ldw	r20,32(sp)
    a198:	dcc00717 	ldw	r19,28(sp)
    a19c:	dc800617 	ldw	r18,24(sp)
    a1a0:	dc400517 	ldw	r17,20(sp)
    a1a4:	dc000417 	ldw	r16,16(sp)
    a1a8:	dec00e04 	addi	sp,sp,56
    a1ac:	f800283a 	ret

0000a1b0 <__clzsi2>:
    a1b0:	00bfffd4 	movui	r2,65535
    a1b4:	11000e36 	bltu	r2,r4,a1f0 <__clzsi2+0x40>
    a1b8:	00803fc4 	movi	r2,255
    a1bc:	01400204 	movi	r5,8
    a1c0:	0007883a 	mov	r3,zero
    a1c4:	11001036 	bltu	r2,r4,a208 <__clzsi2+0x58>
    a1c8:	000b883a 	mov	r5,zero
    a1cc:	20c6d83a 	srl	r3,r4,r3
    a1d0:	008001f4 	movhi	r2,7
    a1d4:	10923604 	addi	r2,r2,18648
    a1d8:	1887883a 	add	r3,r3,r2
    a1dc:	18800003 	ldbu	r2,0(r3)
    a1e0:	00c00804 	movi	r3,32
    a1e4:	2885883a 	add	r2,r5,r2
    a1e8:	1885c83a 	sub	r2,r3,r2
    a1ec:	f800283a 	ret
    a1f0:	01400404 	movi	r5,16
    a1f4:	00804034 	movhi	r2,256
    a1f8:	10bfffc4 	addi	r2,r2,-1
    a1fc:	2807883a 	mov	r3,r5
    a200:	113ff22e 	bgeu	r2,r4,a1cc <__clzsi2+0x1c>
    a204:	01400604 	movi	r5,24
    a208:	2807883a 	mov	r3,r5
    a20c:	20c6d83a 	srl	r3,r4,r3
    a210:	008001f4 	movhi	r2,7
    a214:	10923604 	addi	r2,r2,18648
    a218:	1887883a 	add	r3,r3,r2
    a21c:	18800003 	ldbu	r2,0(r3)
    a220:	00c00804 	movi	r3,32
    a224:	2885883a 	add	r2,r5,r2
    a228:	1885c83a 	sub	r2,r3,r2
    a22c:	f800283a 	ret

0000a230 <__pack_d>:
    a230:	20c00017 	ldw	r3,0(r4)
    a234:	defffd04 	addi	sp,sp,-12
    a238:	dc000015 	stw	r16,0(sp)
    a23c:	dc800215 	stw	r18,8(sp)
    a240:	dc400115 	stw	r17,4(sp)
    a244:	00800044 	movi	r2,1
    a248:	22000317 	ldw	r8,12(r4)
    a24c:	001f883a 	mov	r15,zero
    a250:	22400417 	ldw	r9,16(r4)
    a254:	24000117 	ldw	r16,4(r4)
    a258:	10c0552e 	bgeu	r2,r3,a3b0 <__pack_d+0x180>
    a25c:	00800104 	movi	r2,4
    a260:	18804f26 	beq	r3,r2,a3a0 <__pack_d+0x170>
    a264:	00800084 	movi	r2,2
    a268:	18800226 	beq	r3,r2,a274 <__pack_d+0x44>
    a26c:	4244b03a 	or	r2,r8,r9
    a270:	10001a1e 	bne	r2,zero,a2dc <__pack_d+0xac>
    a274:	000d883a 	mov	r6,zero
    a278:	000f883a 	mov	r7,zero
    a27c:	0011883a 	mov	r8,zero
    a280:	00800434 	movhi	r2,16
    a284:	10bfffc4 	addi	r2,r2,-1
    a288:	301d883a 	mov	r14,r6
    a28c:	3884703a 	and	r2,r7,r2
    a290:	400a953a 	slli	r5,r8,20
    a294:	79bffc2c 	andhi	r6,r15,65520
    a298:	308cb03a 	or	r6,r6,r2
    a29c:	00e00434 	movhi	r3,32784
    a2a0:	18ffffc4 	addi	r3,r3,-1
    a2a4:	800497fa 	slli	r2,r16,31
    a2a8:	30c6703a 	and	r3,r6,r3
    a2ac:	1946b03a 	or	r3,r3,r5
    a2b0:	01600034 	movhi	r5,32768
    a2b4:	297fffc4 	addi	r5,r5,-1
    a2b8:	194a703a 	and	r5,r3,r5
    a2bc:	288ab03a 	or	r5,r5,r2
    a2c0:	2807883a 	mov	r3,r5
    a2c4:	7005883a 	mov	r2,r14
    a2c8:	dc800217 	ldw	r18,8(sp)
    a2cc:	dc400117 	ldw	r17,4(sp)
    a2d0:	dc000017 	ldw	r16,0(sp)
    a2d4:	dec00304 	addi	sp,sp,12
    a2d8:	f800283a 	ret
    a2dc:	21000217 	ldw	r4,8(r4)
    a2e0:	00bf0084 	movi	r2,-1022
    a2e4:	20803f16 	blt	r4,r2,a3e4 <__pack_d+0x1b4>
    a2e8:	0080ffc4 	movi	r2,1023
    a2ec:	11002c16 	blt	r2,r4,a3a0 <__pack_d+0x170>
    a2f0:	00803fc4 	movi	r2,255
    a2f4:	408c703a 	and	r6,r8,r2
    a2f8:	00802004 	movi	r2,128
    a2fc:	0007883a 	mov	r3,zero
    a300:	000f883a 	mov	r7,zero
    a304:	2280ffc4 	addi	r10,r4,1023
    a308:	30801e26 	beq	r6,r2,a384 <__pack_d+0x154>
    a30c:	00801fc4 	movi	r2,127
    a310:	4089883a 	add	r4,r8,r2
    a314:	220d803a 	cmpltu	r6,r4,r8
    a318:	324d883a 	add	r6,r6,r9
    a31c:	2011883a 	mov	r8,r4
    a320:	3013883a 	mov	r9,r6
    a324:	00880034 	movhi	r2,8192
    a328:	10bfffc4 	addi	r2,r2,-1
    a32c:	12400d36 	bltu	r2,r9,a364 <__pack_d+0x134>
    a330:	4804963a 	slli	r2,r9,24
    a334:	400cd23a 	srli	r6,r8,8
    a338:	480ed23a 	srli	r7,r9,8
    a33c:	013fffc4 	movi	r4,-1
    a340:	118cb03a 	or	r6,r2,r6
    a344:	01400434 	movhi	r5,16
    a348:	297fffc4 	addi	r5,r5,-1
    a34c:	3104703a 	and	r2,r6,r4
    a350:	3946703a 	and	r3,r7,r5
    a354:	5201ffcc 	andi	r8,r10,2047
    a358:	100d883a 	mov	r6,r2
    a35c:	180f883a 	mov	r7,r3
    a360:	003fc706 	br	a280 <__pack_d+0x50>
    a364:	480897fa 	slli	r4,r9,31
    a368:	4004d07a 	srli	r2,r8,1
    a36c:	4806d07a 	srli	r3,r9,1
    a370:	52800044 	addi	r10,r10,1
    a374:	2084b03a 	or	r2,r4,r2
    a378:	1011883a 	mov	r8,r2
    a37c:	1813883a 	mov	r9,r3
    a380:	003feb06 	br	a330 <__pack_d+0x100>
    a384:	383fe11e 	bne	r7,zero,a30c <__pack_d+0xdc>
    a388:	01004004 	movi	r4,256
    a38c:	4104703a 	and	r2,r8,r4
    a390:	10c4b03a 	or	r2,r2,r3
    a394:	103fe326 	beq	r2,zero,a324 <__pack_d+0xf4>
    a398:	3005883a 	mov	r2,r6
    a39c:	003fdc06 	br	a310 <__pack_d+0xe0>
    a3a0:	000d883a 	mov	r6,zero
    a3a4:	000f883a 	mov	r7,zero
    a3a8:	0201ffc4 	movi	r8,2047
    a3ac:	003fb406 	br	a280 <__pack_d+0x50>
    a3b0:	0005883a 	mov	r2,zero
    a3b4:	00c00234 	movhi	r3,8
    a3b8:	408cb03a 	or	r6,r8,r2
    a3bc:	48ceb03a 	or	r7,r9,r3
    a3c0:	013fffc4 	movi	r4,-1
    a3c4:	01400434 	movhi	r5,16
    a3c8:	297fffc4 	addi	r5,r5,-1
    a3cc:	3104703a 	and	r2,r6,r4
    a3d0:	3946703a 	and	r3,r7,r5
    a3d4:	100d883a 	mov	r6,r2
    a3d8:	180f883a 	mov	r7,r3
    a3dc:	0201ffc4 	movi	r8,2047
    a3e0:	003fa706 	br	a280 <__pack_d+0x50>
    a3e4:	1109c83a 	sub	r4,r2,r4
    a3e8:	00800e04 	movi	r2,56
    a3ec:	11004316 	blt	r2,r4,a4fc <__pack_d+0x2cc>
    a3f0:	21fff804 	addi	r7,r4,-32
    a3f4:	38004516 	blt	r7,zero,a50c <__pack_d+0x2dc>
    a3f8:	49d8d83a 	srl	r12,r9,r7
    a3fc:	001b883a 	mov	r13,zero
    a400:	0023883a 	mov	r17,zero
    a404:	01400044 	movi	r5,1
    a408:	0025883a 	mov	r18,zero
    a40c:	38004716 	blt	r7,zero,a52c <__pack_d+0x2fc>
    a410:	29d6983a 	sll	r11,r5,r7
    a414:	0015883a 	mov	r10,zero
    a418:	00bfffc4 	movi	r2,-1
    a41c:	5089883a 	add	r4,r10,r2
    a420:	588b883a 	add	r5,r11,r2
    a424:	228d803a 	cmpltu	r6,r4,r10
    a428:	314b883a 	add	r5,r6,r5
    a42c:	4104703a 	and	r2,r8,r4
    a430:	4946703a 	and	r3,r9,r5
    a434:	10c4b03a 	or	r2,r2,r3
    a438:	10000226 	beq	r2,zero,a444 <__pack_d+0x214>
    a43c:	04400044 	movi	r17,1
    a440:	0025883a 	mov	r18,zero
    a444:	00803fc4 	movi	r2,255
    a448:	644eb03a 	or	r7,r12,r17
    a44c:	3892703a 	and	r9,r7,r2
    a450:	00802004 	movi	r2,128
    a454:	6c90b03a 	or	r8,r13,r18
    a458:	0015883a 	mov	r10,zero
    a45c:	48801626 	beq	r9,r2,a4b8 <__pack_d+0x288>
    a460:	01001fc4 	movi	r4,127
    a464:	3905883a 	add	r2,r7,r4
    a468:	11cd803a 	cmpltu	r6,r2,r7
    a46c:	320d883a 	add	r6,r6,r8
    a470:	100f883a 	mov	r7,r2
    a474:	00840034 	movhi	r2,4096
    a478:	10bfffc4 	addi	r2,r2,-1
    a47c:	3011883a 	mov	r8,r6
    a480:	0007883a 	mov	r3,zero
    a484:	11801b36 	bltu	r2,r6,a4f4 <__pack_d+0x2c4>
    a488:	4004963a 	slli	r2,r8,24
    a48c:	3808d23a 	srli	r4,r7,8
    a490:	400ad23a 	srli	r5,r8,8
    a494:	1813883a 	mov	r9,r3
    a498:	1108b03a 	or	r4,r2,r4
    a49c:	00bfffc4 	movi	r2,-1
    a4a0:	00c00434 	movhi	r3,16
    a4a4:	18ffffc4 	addi	r3,r3,-1
    a4a8:	208c703a 	and	r6,r4,r2
    a4ac:	28ce703a 	and	r7,r5,r3
    a4b0:	4a01ffcc 	andi	r8,r9,2047
    a4b4:	003f7206 	br	a280 <__pack_d+0x50>
    a4b8:	503fe91e 	bne	r10,zero,a460 <__pack_d+0x230>
    a4bc:	01004004 	movi	r4,256
    a4c0:	3904703a 	and	r2,r7,r4
    a4c4:	0007883a 	mov	r3,zero
    a4c8:	10c4b03a 	or	r2,r2,r3
    a4cc:	10000626 	beq	r2,zero,a4e8 <__pack_d+0x2b8>
    a4d0:	3a45883a 	add	r2,r7,r9
    a4d4:	11cd803a 	cmpltu	r6,r2,r7
    a4d8:	320d883a 	add	r6,r6,r8
    a4dc:	100f883a 	mov	r7,r2
    a4e0:	3011883a 	mov	r8,r6
    a4e4:	0007883a 	mov	r3,zero
    a4e8:	00840034 	movhi	r2,4096
    a4ec:	10bfffc4 	addi	r2,r2,-1
    a4f0:	123fe52e 	bgeu	r2,r8,a488 <__pack_d+0x258>
    a4f4:	00c00044 	movi	r3,1
    a4f8:	003fe306 	br	a488 <__pack_d+0x258>
    a4fc:	0009883a 	mov	r4,zero
    a500:	0013883a 	mov	r9,zero
    a504:	000b883a 	mov	r5,zero
    a508:	003fe406 	br	a49c <__pack_d+0x26c>
    a50c:	4a47883a 	add	r3,r9,r9
    a510:	008007c4 	movi	r2,31
    a514:	1105c83a 	sub	r2,r2,r4
    a518:	1886983a 	sll	r3,r3,r2
    a51c:	4118d83a 	srl	r12,r8,r4
    a520:	491ad83a 	srl	r13,r9,r4
    a524:	1b18b03a 	or	r12,r3,r12
    a528:	003fb506 	br	a400 <__pack_d+0x1d0>
    a52c:	2806d07a 	srli	r3,r5,1
    a530:	008007c4 	movi	r2,31
    a534:	1105c83a 	sub	r2,r2,r4
    a538:	1896d83a 	srl	r11,r3,r2
    a53c:	2914983a 	sll	r10,r5,r4
    a540:	003fb506 	br	a418 <__pack_d+0x1e8>

0000a544 <__unpack_d>:
    a544:	20c00117 	ldw	r3,4(r4)
    a548:	22400017 	ldw	r9,0(r4)
    a54c:	00800434 	movhi	r2,16
    a550:	10bfffc4 	addi	r2,r2,-1
    a554:	1808d53a 	srli	r4,r3,20
    a558:	180cd7fa 	srli	r6,r3,31
    a55c:	1894703a 	and	r10,r3,r2
    a560:	2201ffcc 	andi	r8,r4,2047
    a564:	281b883a 	mov	r13,r5
    a568:	4817883a 	mov	r11,r9
    a56c:	29800115 	stw	r6,4(r5)
    a570:	5019883a 	mov	r12,r10
    a574:	40001e1e 	bne	r8,zero,a5f0 <__unpack_d+0xac>
    a578:	4a84b03a 	or	r2,r9,r10
    a57c:	10001926 	beq	r2,zero,a5e4 <__unpack_d+0xa0>
    a580:	4804d63a 	srli	r2,r9,24
    a584:	500c923a 	slli	r6,r10,8
    a588:	013f0084 	movi	r4,-1022
    a58c:	00c40034 	movhi	r3,4096
    a590:	18ffffc4 	addi	r3,r3,-1
    a594:	118cb03a 	or	r6,r2,r6
    a598:	008000c4 	movi	r2,3
    a59c:	480a923a 	slli	r5,r9,8
    a5a0:	68800015 	stw	r2,0(r13)
    a5a4:	69000215 	stw	r4,8(r13)
    a5a8:	19800b36 	bltu	r3,r6,a5d8 <__unpack_d+0x94>
    a5ac:	200f883a 	mov	r7,r4
    a5b0:	1811883a 	mov	r8,r3
    a5b4:	2945883a 	add	r2,r5,r5
    a5b8:	1149803a 	cmpltu	r4,r2,r5
    a5bc:	3187883a 	add	r3,r6,r6
    a5c0:	20c9883a 	add	r4,r4,r3
    a5c4:	100b883a 	mov	r5,r2
    a5c8:	200d883a 	mov	r6,r4
    a5cc:	39ffffc4 	addi	r7,r7,-1
    a5d0:	413ff82e 	bgeu	r8,r4,a5b4 <__unpack_d+0x70>
    a5d4:	69c00215 	stw	r7,8(r13)
    a5d8:	69800415 	stw	r6,16(r13)
    a5dc:	69400315 	stw	r5,12(r13)
    a5e0:	f800283a 	ret
    a5e4:	00800084 	movi	r2,2
    a5e8:	28800015 	stw	r2,0(r5)
    a5ec:	f800283a 	ret
    a5f0:	0081ffc4 	movi	r2,2047
    a5f4:	40800f26 	beq	r8,r2,a634 <__unpack_d+0xf0>
    a5f8:	480cd63a 	srli	r6,r9,24
    a5fc:	5006923a 	slli	r3,r10,8
    a600:	4804923a 	slli	r2,r9,8
    a604:	0009883a 	mov	r4,zero
    a608:	30c6b03a 	or	r3,r6,r3
    a60c:	01440034 	movhi	r5,4096
    a610:	110cb03a 	or	r6,r2,r4
    a614:	423f0044 	addi	r8,r8,-1023
    a618:	194eb03a 	or	r7,r3,r5
    a61c:	008000c4 	movi	r2,3
    a620:	69c00415 	stw	r7,16(r13)
    a624:	6a000215 	stw	r8,8(r13)
    a628:	68800015 	stw	r2,0(r13)
    a62c:	69800315 	stw	r6,12(r13)
    a630:	f800283a 	ret
    a634:	4a84b03a 	or	r2,r9,r10
    a638:	1000031e 	bne	r2,zero,a648 <__unpack_d+0x104>
    a63c:	00800104 	movi	r2,4
    a640:	28800015 	stw	r2,0(r5)
    a644:	f800283a 	ret
    a648:	0009883a 	mov	r4,zero
    a64c:	01400234 	movhi	r5,8
    a650:	4904703a 	and	r2,r9,r4
    a654:	5146703a 	and	r3,r10,r5
    a658:	10c4b03a 	or	r2,r2,r3
    a65c:	10000526 	beq	r2,zero,a674 <__unpack_d+0x130>
    a660:	00800044 	movi	r2,1
    a664:	68800015 	stw	r2,0(r13)
    a668:	6b000415 	stw	r12,16(r13)
    a66c:	6ac00315 	stw	r11,12(r13)
    a670:	f800283a 	ret
    a674:	68000015 	stw	zero,0(r13)
    a678:	003ffb06 	br	a668 <__unpack_d+0x124>

0000a67c <__fpcmp_parts_d>:
    a67c:	21800017 	ldw	r6,0(r4)
    a680:	00c00044 	movi	r3,1
    a684:	19800a2e 	bgeu	r3,r6,a6b0 <__fpcmp_parts_d+0x34>
    a688:	28800017 	ldw	r2,0(r5)
    a68c:	1880082e 	bgeu	r3,r2,a6b0 <__fpcmp_parts_d+0x34>
    a690:	00c00104 	movi	r3,4
    a694:	30c02626 	beq	r6,r3,a730 <__fpcmp_parts_d+0xb4>
    a698:	10c02226 	beq	r2,r3,a724 <__fpcmp_parts_d+0xa8>
    a69c:	00c00084 	movi	r3,2
    a6a0:	30c00526 	beq	r6,r3,a6b8 <__fpcmp_parts_d+0x3c>
    a6a4:	10c0071e 	bne	r2,r3,a6c4 <__fpcmp_parts_d+0x48>
    a6a8:	20800117 	ldw	r2,4(r4)
    a6ac:	1000091e 	bne	r2,zero,a6d4 <__fpcmp_parts_d+0x58>
    a6b0:	00800044 	movi	r2,1
    a6b4:	f800283a 	ret
    a6b8:	10c01a1e 	bne	r2,r3,a724 <__fpcmp_parts_d+0xa8>
    a6bc:	0005883a 	mov	r2,zero
    a6c0:	f800283a 	ret
    a6c4:	22000117 	ldw	r8,4(r4)
    a6c8:	28800117 	ldw	r2,4(r5)
    a6cc:	40800326 	beq	r8,r2,a6dc <__fpcmp_parts_d+0x60>
    a6d0:	403ff726 	beq	r8,zero,a6b0 <__fpcmp_parts_d+0x34>
    a6d4:	00bfffc4 	movi	r2,-1
    a6d8:	f800283a 	ret
    a6dc:	20c00217 	ldw	r3,8(r4)
    a6e0:	28800217 	ldw	r2,8(r5)
    a6e4:	10fffa16 	blt	r2,r3,a6d0 <__fpcmp_parts_d+0x54>
    a6e8:	18800916 	blt	r3,r2,a710 <__fpcmp_parts_d+0x94>
    a6ec:	21c00417 	ldw	r7,16(r4)
    a6f0:	28c00417 	ldw	r3,16(r5)
    a6f4:	21800317 	ldw	r6,12(r4)
    a6f8:	28800317 	ldw	r2,12(r5)
    a6fc:	19fff436 	bltu	r3,r7,a6d0 <__fpcmp_parts_d+0x54>
    a700:	38c00526 	beq	r7,r3,a718 <__fpcmp_parts_d+0x9c>
    a704:	38c00236 	bltu	r7,r3,a710 <__fpcmp_parts_d+0x94>
    a708:	19ffec1e 	bne	r3,r7,a6bc <__fpcmp_parts_d+0x40>
    a70c:	30bfeb2e 	bgeu	r6,r2,a6bc <__fpcmp_parts_d+0x40>
    a710:	403fe71e 	bne	r8,zero,a6b0 <__fpcmp_parts_d+0x34>
    a714:	003fef06 	br	a6d4 <__fpcmp_parts_d+0x58>
    a718:	11bffa2e 	bgeu	r2,r6,a704 <__fpcmp_parts_d+0x88>
    a71c:	403fe426 	beq	r8,zero,a6b0 <__fpcmp_parts_d+0x34>
    a720:	003fec06 	br	a6d4 <__fpcmp_parts_d+0x58>
    a724:	28800117 	ldw	r2,4(r5)
    a728:	103fe11e 	bne	r2,zero,a6b0 <__fpcmp_parts_d+0x34>
    a72c:	003fe906 	br	a6d4 <__fpcmp_parts_d+0x58>
    a730:	11bfdd1e 	bne	r2,r6,a6a8 <__fpcmp_parts_d+0x2c>
    a734:	28c00117 	ldw	r3,4(r5)
    a738:	20800117 	ldw	r2,4(r4)
    a73c:	1885c83a 	sub	r2,r3,r2
    a740:	f800283a 	ret

0000a744 <__errno>:
    a744:	00c00234 	movhi	r3,8
    a748:	18e07904 	addi	r3,r3,-32284
    a74c:	18800017 	ldw	r2,0(r3)
    a750:	f800283a 	ret

0000a754 <free>:
    a754:	00800234 	movhi	r2,8
    a758:	10a07904 	addi	r2,r2,-32284
    a75c:	200b883a 	mov	r5,r4
    a760:	11000017 	ldw	r4,0(r2)
    a764:	000f3401 	jmpi	f340 <_free_r>

0000a768 <malloc>:
    a768:	00800234 	movhi	r2,8
    a76c:	10a07904 	addi	r2,r2,-32284
    a770:	200b883a 	mov	r5,r4
    a774:	11000017 	ldw	r4,0(r2)
    a778:	000a77c1 	jmpi	a77c <_malloc_r>

0000a77c <_malloc_r>:
    a77c:	defff604 	addi	sp,sp,-40
    a780:	28c002c4 	addi	r3,r5,11
    a784:	00800584 	movi	r2,22
    a788:	dc800215 	stw	r18,8(sp)
    a78c:	dfc00915 	stw	ra,36(sp)
    a790:	df000815 	stw	fp,32(sp)
    a794:	ddc00715 	stw	r23,28(sp)
    a798:	dd800615 	stw	r22,24(sp)
    a79c:	dd400515 	stw	r21,20(sp)
    a7a0:	dd000415 	stw	r20,16(sp)
    a7a4:	dcc00315 	stw	r19,12(sp)
    a7a8:	dc400115 	stw	r17,4(sp)
    a7ac:	dc000015 	stw	r16,0(sp)
    a7b0:	2025883a 	mov	r18,r4
    a7b4:	10c01236 	bltu	r2,r3,a800 <_malloc_r+0x84>
    a7b8:	04400404 	movi	r17,16
    a7bc:	8940142e 	bgeu	r17,r5,a810 <_malloc_r+0x94>
    a7c0:	00800304 	movi	r2,12
    a7c4:	0007883a 	mov	r3,zero
    a7c8:	90800015 	stw	r2,0(r18)
    a7cc:	1805883a 	mov	r2,r3
    a7d0:	dfc00917 	ldw	ra,36(sp)
    a7d4:	df000817 	ldw	fp,32(sp)
    a7d8:	ddc00717 	ldw	r23,28(sp)
    a7dc:	dd800617 	ldw	r22,24(sp)
    a7e0:	dd400517 	ldw	r21,20(sp)
    a7e4:	dd000417 	ldw	r20,16(sp)
    a7e8:	dcc00317 	ldw	r19,12(sp)
    a7ec:	dc800217 	ldw	r18,8(sp)
    a7f0:	dc400117 	ldw	r17,4(sp)
    a7f4:	dc000017 	ldw	r16,0(sp)
    a7f8:	dec00a04 	addi	sp,sp,40
    a7fc:	f800283a 	ret
    a800:	00bffe04 	movi	r2,-8
    a804:	18a2703a 	and	r17,r3,r2
    a808:	883fed16 	blt	r17,zero,a7c0 <_malloc_r+0x44>
    a80c:	897fec36 	bltu	r17,r5,a7c0 <_malloc_r+0x44>
    a810:	9009883a 	mov	r4,r18
    a814:	0013b580 	call	13b58 <__malloc_lock>
    a818:	00807dc4 	movi	r2,503
    a81c:	14402b2e 	bgeu	r2,r17,a8cc <_malloc_r+0x150>
    a820:	8806d27a 	srli	r3,r17,9
    a824:	18003f1e 	bne	r3,zero,a924 <_malloc_r+0x1a8>
    a828:	880cd0fa 	srli	r6,r17,3
    a82c:	300490fa 	slli	r2,r6,3
    a830:	02c001f4 	movhi	r11,7
    a834:	5adaef04 	addi	r11,r11,27580
    a838:	12cb883a 	add	r5,r2,r11
    a83c:	2c000317 	ldw	r16,12(r5)
    a840:	580f883a 	mov	r7,r11
    a844:	2c00041e 	bne	r5,r16,a858 <_malloc_r+0xdc>
    a848:	00000a06 	br	a874 <_malloc_r+0xf8>
    a84c:	1800860e 	bge	r3,zero,aa68 <_malloc_r+0x2ec>
    a850:	84000317 	ldw	r16,12(r16)
    a854:	2c000726 	beq	r5,r16,a874 <_malloc_r+0xf8>
    a858:	80800117 	ldw	r2,4(r16)
    a85c:	00ffff04 	movi	r3,-4
    a860:	10c8703a 	and	r4,r2,r3
    a864:	2447c83a 	sub	r3,r4,r17
    a868:	008003c4 	movi	r2,15
    a86c:	10fff70e 	bge	r2,r3,a84c <_malloc_r+0xd0>
    a870:	31bfffc4 	addi	r6,r6,-1
    a874:	32400044 	addi	r9,r6,1
    a878:	028001f4 	movhi	r10,7
    a87c:	529af104 	addi	r10,r10,27588
    a880:	54000217 	ldw	r16,8(r10)
    a884:	8280a026 	beq	r16,r10,ab08 <_malloc_r+0x38c>
    a888:	80800117 	ldw	r2,4(r16)
    a88c:	00ffff04 	movi	r3,-4
    a890:	10ca703a 	and	r5,r2,r3
    a894:	2c4dc83a 	sub	r6,r5,r17
    a898:	008003c4 	movi	r2,15
    a89c:	11808316 	blt	r2,r6,aaac <_malloc_r+0x330>
    a8a0:	52800315 	stw	r10,12(r10)
    a8a4:	52800215 	stw	r10,8(r10)
    a8a8:	30002916 	blt	r6,zero,a950 <_malloc_r+0x1d4>
    a8ac:	8147883a 	add	r3,r16,r5
    a8b0:	18800117 	ldw	r2,4(r3)
    a8b4:	9009883a 	mov	r4,r18
    a8b8:	10800054 	ori	r2,r2,1
    a8bc:	18800115 	stw	r2,4(r3)
    a8c0:	0013b780 	call	13b78 <__malloc_unlock>
    a8c4:	80c00204 	addi	r3,r16,8
    a8c8:	003fc006 	br	a7cc <_malloc_r+0x50>
    a8cc:	02c001f4 	movhi	r11,7
    a8d0:	5adaef04 	addi	r11,r11,27580
    a8d4:	8ac5883a 	add	r2,r17,r11
    a8d8:	14000317 	ldw	r16,12(r2)
    a8dc:	580f883a 	mov	r7,r11
    a8e0:	8806d0fa 	srli	r3,r17,3
    a8e4:	14006c26 	beq	r2,r16,aa98 <_malloc_r+0x31c>
    a8e8:	80c00117 	ldw	r3,4(r16)
    a8ec:	00bfff04 	movi	r2,-4
    a8f0:	81800317 	ldw	r6,12(r16)
    a8f4:	1886703a 	and	r3,r3,r2
    a8f8:	80c7883a 	add	r3,r16,r3
    a8fc:	18800117 	ldw	r2,4(r3)
    a900:	81400217 	ldw	r5,8(r16)
    a904:	9009883a 	mov	r4,r18
    a908:	10800054 	ori	r2,r2,1
    a90c:	18800115 	stw	r2,4(r3)
    a910:	31400215 	stw	r5,8(r6)
    a914:	29800315 	stw	r6,12(r5)
    a918:	0013b780 	call	13b78 <__malloc_unlock>
    a91c:	80c00204 	addi	r3,r16,8
    a920:	003faa06 	br	a7cc <_malloc_r+0x50>
    a924:	00800104 	movi	r2,4
    a928:	10c0052e 	bgeu	r2,r3,a940 <_malloc_r+0x1c4>
    a92c:	00800504 	movi	r2,20
    a930:	10c07836 	bltu	r2,r3,ab14 <_malloc_r+0x398>
    a934:	198016c4 	addi	r6,r3,91
    a938:	300490fa 	slli	r2,r6,3
    a93c:	003fbc06 	br	a830 <_malloc_r+0xb4>
    a940:	8804d1ba 	srli	r2,r17,6
    a944:	11800e04 	addi	r6,r2,56
    a948:	300490fa 	slli	r2,r6,3
    a94c:	003fb806 	br	a830 <_malloc_r+0xb4>
    a950:	00807fc4 	movi	r2,511
    a954:	1140bb36 	bltu	r2,r5,ac44 <_malloc_r+0x4c8>
    a958:	2806d0fa 	srli	r3,r5,3
    a95c:	573ffe04 	addi	fp,r10,-8
    a960:	00800044 	movi	r2,1
    a964:	180890fa 	slli	r4,r3,3
    a968:	1807d0ba 	srai	r3,r3,2
    a96c:	e1c00117 	ldw	r7,4(fp)
    a970:	5909883a 	add	r4,r11,r4
    a974:	21400217 	ldw	r5,8(r4)
    a978:	10c4983a 	sll	r2,r2,r3
    a97c:	81000315 	stw	r4,12(r16)
    a980:	81400215 	stw	r5,8(r16)
    a984:	388eb03a 	or	r7,r7,r2
    a988:	2c000315 	stw	r16,12(r5)
    a98c:	24000215 	stw	r16,8(r4)
    a990:	e1c00115 	stw	r7,4(fp)
    a994:	4807883a 	mov	r3,r9
    a998:	4800cd16 	blt	r9,zero,acd0 <_malloc_r+0x554>
    a99c:	1807d0ba 	srai	r3,r3,2
    a9a0:	00800044 	movi	r2,1
    a9a4:	10c8983a 	sll	r4,r2,r3
    a9a8:	39004436 	bltu	r7,r4,aabc <_malloc_r+0x340>
    a9ac:	21c4703a 	and	r2,r4,r7
    a9b0:	10000a1e 	bne	r2,zero,a9dc <_malloc_r+0x260>
    a9b4:	2109883a 	add	r4,r4,r4
    a9b8:	00bfff04 	movi	r2,-4
    a9bc:	4884703a 	and	r2,r9,r2
    a9c0:	3906703a 	and	r3,r7,r4
    a9c4:	12400104 	addi	r9,r2,4
    a9c8:	1800041e 	bne	r3,zero,a9dc <_malloc_r+0x260>
    a9cc:	2109883a 	add	r4,r4,r4
    a9d0:	3904703a 	and	r2,r7,r4
    a9d4:	4a400104 	addi	r9,r9,4
    a9d8:	103ffc26 	beq	r2,zero,a9cc <_malloc_r+0x250>
    a9dc:	480490fa 	slli	r2,r9,3
    a9e0:	4819883a 	mov	r12,r9
    a9e4:	023fff04 	movi	r8,-4
    a9e8:	589b883a 	add	r13,r11,r2
    a9ec:	6807883a 	mov	r3,r13
    a9f0:	014003c4 	movi	r5,15
    a9f4:	1c000317 	ldw	r16,12(r3)
    a9f8:	1c00041e 	bne	r3,r16,aa0c <_malloc_r+0x290>
    a9fc:	0000a706 	br	ac9c <_malloc_r+0x520>
    aa00:	3000ab0e 	bge	r6,zero,acb0 <_malloc_r+0x534>
    aa04:	84000317 	ldw	r16,12(r16)
    aa08:	1c00a426 	beq	r3,r16,ac9c <_malloc_r+0x520>
    aa0c:	80800117 	ldw	r2,4(r16)
    aa10:	1204703a 	and	r2,r2,r8
    aa14:	144dc83a 	sub	r6,r2,r17
    aa18:	29bff90e 	bge	r5,r6,aa00 <_malloc_r+0x284>
    aa1c:	81000317 	ldw	r4,12(r16)
    aa20:	80c00217 	ldw	r3,8(r16)
    aa24:	89400054 	ori	r5,r17,1
    aa28:	8445883a 	add	r2,r16,r17
    aa2c:	20c00215 	stw	r3,8(r4)
    aa30:	19000315 	stw	r4,12(r3)
    aa34:	81400115 	stw	r5,4(r16)
    aa38:	1187883a 	add	r3,r2,r6
    aa3c:	31000054 	ori	r4,r6,1
    aa40:	50800315 	stw	r2,12(r10)
    aa44:	50800215 	stw	r2,8(r10)
    aa48:	19800015 	stw	r6,0(r3)
    aa4c:	11000115 	stw	r4,4(r2)
    aa50:	12800215 	stw	r10,8(r2)
    aa54:	12800315 	stw	r10,12(r2)
    aa58:	9009883a 	mov	r4,r18
    aa5c:	0013b780 	call	13b78 <__malloc_unlock>
    aa60:	80c00204 	addi	r3,r16,8
    aa64:	003f5906 	br	a7cc <_malloc_r+0x50>
    aa68:	8109883a 	add	r4,r16,r4
    aa6c:	20800117 	ldw	r2,4(r4)
    aa70:	80c00217 	ldw	r3,8(r16)
    aa74:	81400317 	ldw	r5,12(r16)
    aa78:	10800054 	ori	r2,r2,1
    aa7c:	20800115 	stw	r2,4(r4)
    aa80:	28c00215 	stw	r3,8(r5)
    aa84:	19400315 	stw	r5,12(r3)
    aa88:	9009883a 	mov	r4,r18
    aa8c:	0013b780 	call	13b78 <__malloc_unlock>
    aa90:	80c00204 	addi	r3,r16,8
    aa94:	003f4d06 	br	a7cc <_malloc_r+0x50>
    aa98:	80800204 	addi	r2,r16,8
    aa9c:	14000317 	ldw	r16,12(r2)
    aaa0:	143f911e 	bne	r2,r16,a8e8 <_malloc_r+0x16c>
    aaa4:	1a400084 	addi	r9,r3,2
    aaa8:	003f7306 	br	a878 <_malloc_r+0xfc>
    aaac:	88c00054 	ori	r3,r17,1
    aab0:	8445883a 	add	r2,r16,r17
    aab4:	80c00115 	stw	r3,4(r16)
    aab8:	003fdf06 	br	aa38 <_malloc_r+0x2bc>
    aabc:	e4000217 	ldw	r16,8(fp)
    aac0:	00bfff04 	movi	r2,-4
    aac4:	80c00117 	ldw	r3,4(r16)
    aac8:	802d883a 	mov	r22,r16
    aacc:	18aa703a 	and	r21,r3,r2
    aad0:	ac401636 	bltu	r21,r17,ab2c <_malloc_r+0x3b0>
    aad4:	ac49c83a 	sub	r4,r21,r17
    aad8:	008003c4 	movi	r2,15
    aadc:	1100130e 	bge	r2,r4,ab2c <_malloc_r+0x3b0>
    aae0:	88800054 	ori	r2,r17,1
    aae4:	8447883a 	add	r3,r16,r17
    aae8:	80800115 	stw	r2,4(r16)
    aaec:	20800054 	ori	r2,r4,1
    aaf0:	18800115 	stw	r2,4(r3)
    aaf4:	e0c00215 	stw	r3,8(fp)
    aaf8:	9009883a 	mov	r4,r18
    aafc:	0013b780 	call	13b78 <__malloc_unlock>
    ab00:	80c00204 	addi	r3,r16,8
    ab04:	003f3106 	br	a7cc <_malloc_r+0x50>
    ab08:	39c00117 	ldw	r7,4(r7)
    ab0c:	573ffe04 	addi	fp,r10,-8
    ab10:	003fa006 	br	a994 <_malloc_r+0x218>
    ab14:	00801504 	movi	r2,84
    ab18:	10c06736 	bltu	r2,r3,acb8 <_malloc_r+0x53c>
    ab1c:	8804d33a 	srli	r2,r17,12
    ab20:	11801b84 	addi	r6,r2,110
    ab24:	300490fa 	slli	r2,r6,3
    ab28:	003f4106 	br	a830 <_malloc_r+0xb4>
    ab2c:	d0ad9d17 	ldw	r2,-18828(gp)
    ab30:	d0e00617 	ldw	r3,-32744(gp)
    ab34:	053fffc4 	movi	r20,-1
    ab38:	10800404 	addi	r2,r2,16
    ab3c:	88a7883a 	add	r19,r17,r2
    ab40:	1d000326 	beq	r3,r20,ab50 <_malloc_r+0x3d4>
    ab44:	98c3ffc4 	addi	r3,r19,4095
    ab48:	00bc0004 	movi	r2,-4096
    ab4c:	18a6703a 	and	r19,r3,r2
    ab50:	9009883a 	mov	r4,r18
    ab54:	980b883a 	mov	r5,r19
    ab58:	000b1440 	call	b144 <_sbrk_r>
    ab5c:	1009883a 	mov	r4,r2
    ab60:	15000426 	beq	r2,r20,ab74 <_malloc_r+0x3f8>
    ab64:	854b883a 	add	r5,r16,r21
    ab68:	1029883a 	mov	r20,r2
    ab6c:	11405a2e 	bgeu	r2,r5,acd8 <_malloc_r+0x55c>
    ab70:	87000c26 	beq	r16,fp,aba4 <_malloc_r+0x428>
    ab74:	e4000217 	ldw	r16,8(fp)
    ab78:	80c00117 	ldw	r3,4(r16)
    ab7c:	00bfff04 	movi	r2,-4
    ab80:	1884703a 	and	r2,r3,r2
    ab84:	14400336 	bltu	r2,r17,ab94 <_malloc_r+0x418>
    ab88:	1449c83a 	sub	r4,r2,r17
    ab8c:	008003c4 	movi	r2,15
    ab90:	113fd316 	blt	r2,r4,aae0 <_malloc_r+0x364>
    ab94:	9009883a 	mov	r4,r18
    ab98:	0013b780 	call	13b78 <__malloc_unlock>
    ab9c:	0007883a 	mov	r3,zero
    aba0:	003f0a06 	br	a7cc <_malloc_r+0x50>
    aba4:	05c00234 	movhi	r23,8
    aba8:	bdee2004 	addi	r23,r23,-18304
    abac:	b8800017 	ldw	r2,0(r23)
    abb0:	988d883a 	add	r6,r19,r2
    abb4:	b9800015 	stw	r6,0(r23)
    abb8:	d0e00617 	ldw	r3,-32744(gp)
    abbc:	00bfffc4 	movi	r2,-1
    abc0:	18808e26 	beq	r3,r2,adfc <_malloc_r+0x680>
    abc4:	2145c83a 	sub	r2,r4,r5
    abc8:	3085883a 	add	r2,r6,r2
    abcc:	b8800015 	stw	r2,0(r23)
    abd0:	20c001cc 	andi	r3,r4,7
    abd4:	18005f1e 	bne	r3,zero,ad54 <_malloc_r+0x5d8>
    abd8:	000b883a 	mov	r5,zero
    abdc:	a4c5883a 	add	r2,r20,r19
    abe0:	1083ffcc 	andi	r2,r2,4095
    abe4:	00c40004 	movi	r3,4096
    abe8:	1887c83a 	sub	r3,r3,r2
    abec:	28e7883a 	add	r19,r5,r3
    abf0:	9009883a 	mov	r4,r18
    abf4:	980b883a 	mov	r5,r19
    abf8:	000b1440 	call	b144 <_sbrk_r>
    abfc:	1007883a 	mov	r3,r2
    ac00:	00bfffc4 	movi	r2,-1
    ac04:	18807a26 	beq	r3,r2,adf0 <_malloc_r+0x674>
    ac08:	1d05c83a 	sub	r2,r3,r20
    ac0c:	9885883a 	add	r2,r19,r2
    ac10:	10c00054 	ori	r3,r2,1
    ac14:	b8800017 	ldw	r2,0(r23)
    ac18:	a021883a 	mov	r16,r20
    ac1c:	a0c00115 	stw	r3,4(r20)
    ac20:	9885883a 	add	r2,r19,r2
    ac24:	b8800015 	stw	r2,0(r23)
    ac28:	e5000215 	stw	r20,8(fp)
    ac2c:	b7003626 	beq	r22,fp,ad08 <_malloc_r+0x58c>
    ac30:	018003c4 	movi	r6,15
    ac34:	35404b36 	bltu	r6,r21,ad64 <_malloc_r+0x5e8>
    ac38:	00800044 	movi	r2,1
    ac3c:	a0800115 	stw	r2,4(r20)
    ac40:	003fcd06 	br	ab78 <_malloc_r+0x3fc>
    ac44:	2808d27a 	srli	r4,r5,9
    ac48:	2000371e 	bne	r4,zero,ad28 <_malloc_r+0x5ac>
    ac4c:	2808d0fa 	srli	r4,r5,3
    ac50:	200690fa 	slli	r3,r4,3
    ac54:	1ad1883a 	add	r8,r3,r11
    ac58:	41800217 	ldw	r6,8(r8)
    ac5c:	41805b26 	beq	r8,r6,adcc <_malloc_r+0x650>
    ac60:	30800117 	ldw	r2,4(r6)
    ac64:	00ffff04 	movi	r3,-4
    ac68:	10c4703a 	and	r2,r2,r3
    ac6c:	2880022e 	bgeu	r5,r2,ac78 <_malloc_r+0x4fc>
    ac70:	31800217 	ldw	r6,8(r6)
    ac74:	41bffa1e 	bne	r8,r6,ac60 <_malloc_r+0x4e4>
    ac78:	32000317 	ldw	r8,12(r6)
    ac7c:	39c00117 	ldw	r7,4(r7)
    ac80:	82000315 	stw	r8,12(r16)
    ac84:	81800215 	stw	r6,8(r16)
    ac88:	070001f4 	movhi	fp,7
    ac8c:	e71aef04 	addi	fp,fp,27580
    ac90:	34000315 	stw	r16,12(r6)
    ac94:	44000215 	stw	r16,8(r8)
    ac98:	003f3e06 	br	a994 <_malloc_r+0x218>
    ac9c:	63000044 	addi	r12,r12,1
    aca0:	608000cc 	andi	r2,r12,3
    aca4:	10005d26 	beq	r2,zero,ae1c <_malloc_r+0x6a0>
    aca8:	18c00204 	addi	r3,r3,8
    acac:	003f5106 	br	a9f4 <_malloc_r+0x278>
    acb0:	8089883a 	add	r4,r16,r2
    acb4:	003f6d06 	br	aa6c <_malloc_r+0x2f0>
    acb8:	00805504 	movi	r2,340
    acbc:	10c02036 	bltu	r2,r3,ad40 <_malloc_r+0x5c4>
    acc0:	8804d3fa 	srli	r2,r17,15
    acc4:	11801dc4 	addi	r6,r2,119
    acc8:	300490fa 	slli	r2,r6,3
    accc:	003ed806 	br	a830 <_malloc_r+0xb4>
    acd0:	48c000c4 	addi	r3,r9,3
    acd4:	003f3106 	br	a99c <_malloc_r+0x220>
    acd8:	05c00234 	movhi	r23,8
    acdc:	bdee2004 	addi	r23,r23,-18304
    ace0:	b8800017 	ldw	r2,0(r23)
    ace4:	988d883a 	add	r6,r19,r2
    ace8:	b9800015 	stw	r6,0(r23)
    acec:	293fb21e 	bne	r5,r4,abb8 <_malloc_r+0x43c>
    acf0:	2083ffcc 	andi	r2,r4,4095
    acf4:	103fb01e 	bne	r2,zero,abb8 <_malloc_r+0x43c>
    acf8:	e4000217 	ldw	r16,8(fp)
    acfc:	9d45883a 	add	r2,r19,r21
    ad00:	10800054 	ori	r2,r2,1
    ad04:	80800115 	stw	r2,4(r16)
    ad08:	b8c00017 	ldw	r3,0(r23)
    ad0c:	d0ad9e17 	ldw	r2,-18824(gp)
    ad10:	10c0012e 	bgeu	r2,r3,ad18 <_malloc_r+0x59c>
    ad14:	d0ed9e15 	stw	r3,-18824(gp)
    ad18:	d0ad9f17 	ldw	r2,-18820(gp)
    ad1c:	10ff962e 	bgeu	r2,r3,ab78 <_malloc_r+0x3fc>
    ad20:	d0ed9f15 	stw	r3,-18820(gp)
    ad24:	003f9406 	br	ab78 <_malloc_r+0x3fc>
    ad28:	00800104 	movi	r2,4
    ad2c:	11001e36 	bltu	r2,r4,ada8 <_malloc_r+0x62c>
    ad30:	2804d1ba 	srli	r2,r5,6
    ad34:	11000e04 	addi	r4,r2,56
    ad38:	200690fa 	slli	r3,r4,3
    ad3c:	003fc506 	br	ac54 <_malloc_r+0x4d8>
    ad40:	00815504 	movi	r2,1364
    ad44:	10c01d2e 	bgeu	r2,r3,adbc <_malloc_r+0x640>
    ad48:	01801f84 	movi	r6,126
    ad4c:	0080fc04 	movi	r2,1008
    ad50:	003eb706 	br	a830 <_malloc_r+0xb4>
    ad54:	00800204 	movi	r2,8
    ad58:	10cbc83a 	sub	r5,r2,r3
    ad5c:	2169883a 	add	r20,r4,r5
    ad60:	003f9e06 	br	abdc <_malloc_r+0x460>
    ad64:	00bffe04 	movi	r2,-8
    ad68:	a93ffd04 	addi	r4,r21,-12
    ad6c:	2088703a 	and	r4,r4,r2
    ad70:	b10b883a 	add	r5,r22,r4
    ad74:	00c00144 	movi	r3,5
    ad78:	28c00215 	stw	r3,8(r5)
    ad7c:	28c00115 	stw	r3,4(r5)
    ad80:	b0800117 	ldw	r2,4(r22)
    ad84:	1080004c 	andi	r2,r2,1
    ad88:	2084b03a 	or	r2,r4,r2
    ad8c:	b0800115 	stw	r2,4(r22)
    ad90:	313fdd2e 	bgeu	r6,r4,ad08 <_malloc_r+0x58c>
    ad94:	b1400204 	addi	r5,r22,8
    ad98:	9009883a 	mov	r4,r18
    ad9c:	000f3400 	call	f340 <_free_r>
    ada0:	e4000217 	ldw	r16,8(fp)
    ada4:	003fd806 	br	ad08 <_malloc_r+0x58c>
    ada8:	00800504 	movi	r2,20
    adac:	11001536 	bltu	r2,r4,ae04 <_malloc_r+0x688>
    adb0:	210016c4 	addi	r4,r4,91
    adb4:	200690fa 	slli	r3,r4,3
    adb8:	003fa606 	br	ac54 <_malloc_r+0x4d8>
    adbc:	8804d4ba 	srli	r2,r17,18
    adc0:	11801f04 	addi	r6,r2,124
    adc4:	300490fa 	slli	r2,r6,3
    adc8:	003e9906 	br	a830 <_malloc_r+0xb4>
    adcc:	2009d0ba 	srai	r4,r4,2
    add0:	014001f4 	movhi	r5,7
    add4:	295aef04 	addi	r5,r5,27580
    add8:	00c00044 	movi	r3,1
    addc:	28800117 	ldw	r2,4(r5)
    ade0:	1906983a 	sll	r3,r3,r4
    ade4:	10c4b03a 	or	r2,r2,r3
    ade8:	28800115 	stw	r2,4(r5)
    adec:	003fa306 	br	ac7c <_malloc_r+0x500>
    adf0:	0027883a 	mov	r19,zero
    adf4:	00c00044 	movi	r3,1
    adf8:	003f8606 	br	ac14 <_malloc_r+0x498>
    adfc:	d1200615 	stw	r4,-32744(gp)
    ae00:	003f7306 	br	abd0 <_malloc_r+0x454>
    ae04:	00801504 	movi	r2,84
    ae08:	11001936 	bltu	r2,r4,ae70 <_malloc_r+0x6f4>
    ae0c:	2804d33a 	srli	r2,r5,12
    ae10:	11001b84 	addi	r4,r2,110
    ae14:	200690fa 	slli	r3,r4,3
    ae18:	003f8e06 	br	ac54 <_malloc_r+0x4d8>
    ae1c:	480b883a 	mov	r5,r9
    ae20:	6807883a 	mov	r3,r13
    ae24:	288000cc 	andi	r2,r5,3
    ae28:	18fffe04 	addi	r3,r3,-8
    ae2c:	297fffc4 	addi	r5,r5,-1
    ae30:	10001526 	beq	r2,zero,ae88 <_malloc_r+0x70c>
    ae34:	18800217 	ldw	r2,8(r3)
    ae38:	10fffa26 	beq	r2,r3,ae24 <_malloc_r+0x6a8>
    ae3c:	2109883a 	add	r4,r4,r4
    ae40:	393f1e36 	bltu	r7,r4,aabc <_malloc_r+0x340>
    ae44:	203f1d26 	beq	r4,zero,aabc <_malloc_r+0x340>
    ae48:	21c4703a 	and	r2,r4,r7
    ae4c:	10000226 	beq	r2,zero,ae58 <_malloc_r+0x6dc>
    ae50:	6013883a 	mov	r9,r12
    ae54:	003ee106 	br	a9dc <_malloc_r+0x260>
    ae58:	2109883a 	add	r4,r4,r4
    ae5c:	3904703a 	and	r2,r7,r4
    ae60:	63000104 	addi	r12,r12,4
    ae64:	103ffc26 	beq	r2,zero,ae58 <_malloc_r+0x6dc>
    ae68:	6013883a 	mov	r9,r12
    ae6c:	003edb06 	br	a9dc <_malloc_r+0x260>
    ae70:	00805504 	movi	r2,340
    ae74:	11000836 	bltu	r2,r4,ae98 <_malloc_r+0x71c>
    ae78:	2804d3fa 	srli	r2,r5,15
    ae7c:	11001dc4 	addi	r4,r2,119
    ae80:	200690fa 	slli	r3,r4,3
    ae84:	003f7306 	br	ac54 <_malloc_r+0x4d8>
    ae88:	0104303a 	nor	r2,zero,r4
    ae8c:	388e703a 	and	r7,r7,r2
    ae90:	e1c00115 	stw	r7,4(fp)
    ae94:	003fe906 	br	ae3c <_malloc_r+0x6c0>
    ae98:	00815504 	movi	r2,1364
    ae9c:	1100032e 	bgeu	r2,r4,aeac <_malloc_r+0x730>
    aea0:	01001f84 	movi	r4,126
    aea4:	00c0fc04 	movi	r3,1008
    aea8:	003f6a06 	br	ac54 <_malloc_r+0x4d8>
    aeac:	2804d4ba 	srli	r2,r5,18
    aeb0:	11001f04 	addi	r4,r2,124
    aeb4:	200690fa 	slli	r3,r4,3
    aeb8:	003f6606 	br	ac54 <_malloc_r+0x4d8>

0000aebc <memcpy>:
    aebc:	01c003c4 	movi	r7,15
    aec0:	2007883a 	mov	r3,r4
    aec4:	3980032e 	bgeu	r7,r6,aed4 <memcpy+0x18>
    aec8:	2904b03a 	or	r2,r5,r4
    aecc:	108000cc 	andi	r2,r2,3
    aed0:	10000926 	beq	r2,zero,aef8 <memcpy+0x3c>
    aed4:	30000626 	beq	r6,zero,aef0 <memcpy+0x34>
    aed8:	30cd883a 	add	r6,r6,r3
    aedc:	28800003 	ldbu	r2,0(r5)
    aee0:	29400044 	addi	r5,r5,1
    aee4:	18800005 	stb	r2,0(r3)
    aee8:	18c00044 	addi	r3,r3,1
    aeec:	30fffb1e 	bne	r6,r3,aedc <memcpy+0x20>
    aef0:	2005883a 	mov	r2,r4
    aef4:	f800283a 	ret
    aef8:	3811883a 	mov	r8,r7
    aefc:	200f883a 	mov	r7,r4
    af00:	28c00017 	ldw	r3,0(r5)
    af04:	31bffc04 	addi	r6,r6,-16
    af08:	38c00015 	stw	r3,0(r7)
    af0c:	28800117 	ldw	r2,4(r5)
    af10:	38800115 	stw	r2,4(r7)
    af14:	28c00217 	ldw	r3,8(r5)
    af18:	38c00215 	stw	r3,8(r7)
    af1c:	28800317 	ldw	r2,12(r5)
    af20:	29400404 	addi	r5,r5,16
    af24:	38800315 	stw	r2,12(r7)
    af28:	39c00404 	addi	r7,r7,16
    af2c:	41bff436 	bltu	r8,r6,af00 <memcpy+0x44>
    af30:	008000c4 	movi	r2,3
    af34:	1180072e 	bgeu	r2,r6,af54 <memcpy+0x98>
    af38:	1007883a 	mov	r3,r2
    af3c:	28800017 	ldw	r2,0(r5)
    af40:	31bfff04 	addi	r6,r6,-4
    af44:	29400104 	addi	r5,r5,4
    af48:	38800015 	stw	r2,0(r7)
    af4c:	39c00104 	addi	r7,r7,4
    af50:	19bffa36 	bltu	r3,r6,af3c <memcpy+0x80>
    af54:	3807883a 	mov	r3,r7
    af58:	003fde06 	br	aed4 <memcpy+0x18>

0000af5c <memset>:
    af5c:	008000c4 	movi	r2,3
    af60:	29403fcc 	andi	r5,r5,255
    af64:	2007883a 	mov	r3,r4
    af68:	1180022e 	bgeu	r2,r6,af74 <memset+0x18>
    af6c:	2084703a 	and	r2,r4,r2
    af70:	10000826 	beq	r2,zero,af94 <memset+0x38>
    af74:	30000526 	beq	r6,zero,af8c <memset+0x30>
    af78:	2805883a 	mov	r2,r5
    af7c:	30cd883a 	add	r6,r6,r3
    af80:	18800005 	stb	r2,0(r3)
    af84:	18c00044 	addi	r3,r3,1
    af88:	19bffd1e 	bne	r3,r6,af80 <memset+0x24>
    af8c:	2005883a 	mov	r2,r4
    af90:	f800283a 	ret
    af94:	2804923a 	slli	r2,r5,8
    af98:	020003c4 	movi	r8,15
    af9c:	200f883a 	mov	r7,r4
    afa0:	2884b03a 	or	r2,r5,r2
    afa4:	1006943a 	slli	r3,r2,16
    afa8:	10c6b03a 	or	r3,r2,r3
    afac:	41800a2e 	bgeu	r8,r6,afd8 <memset+0x7c>
    afb0:	4005883a 	mov	r2,r8
    afb4:	31bffc04 	addi	r6,r6,-16
    afb8:	38c00015 	stw	r3,0(r7)
    afbc:	38c00115 	stw	r3,4(r7)
    afc0:	38c00215 	stw	r3,8(r7)
    afc4:	38c00315 	stw	r3,12(r7)
    afc8:	39c00404 	addi	r7,r7,16
    afcc:	11bff936 	bltu	r2,r6,afb4 <memset+0x58>
    afd0:	008000c4 	movi	r2,3
    afd4:	1180052e 	bgeu	r2,r6,afec <memset+0x90>
    afd8:	31bfff04 	addi	r6,r6,-4
    afdc:	008000c4 	movi	r2,3
    afe0:	38c00015 	stw	r3,0(r7)
    afe4:	39c00104 	addi	r7,r7,4
    afe8:	11bffb36 	bltu	r2,r6,afd8 <memset+0x7c>
    afec:	3807883a 	mov	r3,r7
    aff0:	003fe006 	br	af74 <memset+0x18>

0000aff4 <printf>:
    aff4:	defffb04 	addi	sp,sp,-20
    aff8:	dfc00115 	stw	ra,4(sp)
    affc:	d9400215 	stw	r5,8(sp)
    b000:	d9800315 	stw	r6,12(sp)
    b004:	d9c00415 	stw	r7,16(sp)
    b008:	00800234 	movhi	r2,8
    b00c:	10a07904 	addi	r2,r2,-32284
    b010:	10c00017 	ldw	r3,0(r2)
    b014:	200b883a 	mov	r5,r4
    b018:	d8800204 	addi	r2,sp,8
    b01c:	19000217 	ldw	r4,8(r3)
    b020:	100d883a 	mov	r6,r2
    b024:	d8800015 	stw	r2,0(sp)
    b028:	000d2a40 	call	d2a4 <__vfprintf_internal>
    b02c:	dfc00117 	ldw	ra,4(sp)
    b030:	dec00504 	addi	sp,sp,20
    b034:	f800283a 	ret

0000b038 <_printf_r>:
    b038:	defffc04 	addi	sp,sp,-16
    b03c:	dfc00115 	stw	ra,4(sp)
    b040:	d9800215 	stw	r6,8(sp)
    b044:	d9c00315 	stw	r7,12(sp)
    b048:	280d883a 	mov	r6,r5
    b04c:	21400217 	ldw	r5,8(r4)
    b050:	d8c00204 	addi	r3,sp,8
    b054:	180f883a 	mov	r7,r3
    b058:	d8c00015 	stw	r3,0(sp)
    b05c:	000b3e00 	call	b3e0 <___vfprintf_internal_r>
    b060:	dfc00117 	ldw	ra,4(sp)
    b064:	dec00404 	addi	sp,sp,16
    b068:	f800283a 	ret

0000b06c <putchar>:
    b06c:	00800234 	movhi	r2,8
    b070:	10a07904 	addi	r2,r2,-32284
    b074:	11800017 	ldw	r6,0(r2)
    b078:	200b883a 	mov	r5,r4
    b07c:	3009883a 	mov	r4,r6
    b080:	31800217 	ldw	r6,8(r6)
    b084:	001121c1 	jmpi	1121c <_putc_r>

0000b088 <_putchar_r>:
    b088:	21800217 	ldw	r6,8(r4)
    b08c:	001121c1 	jmpi	1121c <_putc_r>

0000b090 <_puts_r>:
    b090:	defff604 	addi	sp,sp,-40
    b094:	dc400715 	stw	r17,28(sp)
    b098:	2023883a 	mov	r17,r4
    b09c:	2809883a 	mov	r4,r5
    b0a0:	dfc00915 	stw	ra,36(sp)
    b0a4:	dcc00815 	stw	r19,32(sp)
    b0a8:	2827883a 	mov	r19,r5
    b0ac:	000b3140 	call	b314 <strlen>
    b0b0:	89400217 	ldw	r5,8(r17)
    b0b4:	00c001f4 	movhi	r3,7
    b0b8:	18d27704 	addi	r3,r3,18908
    b0bc:	01c00044 	movi	r7,1
    b0c0:	12000044 	addi	r8,r2,1
    b0c4:	d8c00515 	stw	r3,20(sp)
    b0c8:	d9c00615 	stw	r7,24(sp)
    b0cc:	d8c00304 	addi	r3,sp,12
    b0d0:	01c00084 	movi	r7,2
    b0d4:	8809883a 	mov	r4,r17
    b0d8:	d80d883a 	mov	r6,sp
    b0dc:	d8c00015 	stw	r3,0(sp)
    b0e0:	dcc00315 	stw	r19,12(sp)
    b0e4:	da000215 	stw	r8,8(sp)
    b0e8:	d9c00115 	stw	r7,4(sp)
    b0ec:	d8800415 	stw	r2,16(sp)
    b0f0:	000f6540 	call	f654 <__sfvwrite_r>
    b0f4:	00ffffc4 	movi	r3,-1
    b0f8:	10000626 	beq	r2,zero,b114 <_puts_r+0x84>
    b0fc:	1805883a 	mov	r2,r3
    b100:	dfc00917 	ldw	ra,36(sp)
    b104:	dcc00817 	ldw	r19,32(sp)
    b108:	dc400717 	ldw	r17,28(sp)
    b10c:	dec00a04 	addi	sp,sp,40
    b110:	f800283a 	ret
    b114:	00c00284 	movi	r3,10
    b118:	1805883a 	mov	r2,r3
    b11c:	dfc00917 	ldw	ra,36(sp)
    b120:	dcc00817 	ldw	r19,32(sp)
    b124:	dc400717 	ldw	r17,28(sp)
    b128:	dec00a04 	addi	sp,sp,40
    b12c:	f800283a 	ret

0000b130 <puts>:
    b130:	00800234 	movhi	r2,8
    b134:	10a07904 	addi	r2,r2,-32284
    b138:	200b883a 	mov	r5,r4
    b13c:	11000017 	ldw	r4,0(r2)
    b140:	000b0901 	jmpi	b090 <_puts_r>

0000b144 <_sbrk_r>:
    b144:	defffd04 	addi	sp,sp,-12
    b148:	dc000015 	stw	r16,0(sp)
    b14c:	04000234 	movhi	r16,8
    b150:	842e1604 	addi	r16,r16,-18344
    b154:	dc400115 	stw	r17,4(sp)
    b158:	80000015 	stw	zero,0(r16)
    b15c:	2023883a 	mov	r17,r4
    b160:	2809883a 	mov	r4,r5
    b164:	dfc00215 	stw	ra,8(sp)
    b168:	0013d940 	call	13d94 <sbrk>
    b16c:	1007883a 	mov	r3,r2
    b170:	00bfffc4 	movi	r2,-1
    b174:	18800626 	beq	r3,r2,b190 <_sbrk_r+0x4c>
    b178:	1805883a 	mov	r2,r3
    b17c:	dfc00217 	ldw	ra,8(sp)
    b180:	dc400117 	ldw	r17,4(sp)
    b184:	dc000017 	ldw	r16,0(sp)
    b188:	dec00304 	addi	sp,sp,12
    b18c:	f800283a 	ret
    b190:	80800017 	ldw	r2,0(r16)
    b194:	103ff826 	beq	r2,zero,b178 <_sbrk_r+0x34>
    b198:	88800015 	stw	r2,0(r17)
    b19c:	1805883a 	mov	r2,r3
    b1a0:	dfc00217 	ldw	ra,8(sp)
    b1a4:	dc400117 	ldw	r17,4(sp)
    b1a8:	dc000017 	ldw	r16,0(sp)
    b1ac:	dec00304 	addi	sp,sp,12
    b1b0:	f800283a 	ret

0000b1b4 <sprintf>:
    b1b4:	deffe504 	addi	sp,sp,-108
    b1b8:	2013883a 	mov	r9,r4
    b1bc:	dfc01815 	stw	ra,96(sp)
    b1c0:	d9801915 	stw	r6,100(sp)
    b1c4:	d9c01a15 	stw	r7,104(sp)
    b1c8:	d8801904 	addi	r2,sp,100
    b1cc:	d8800015 	stw	r2,0(sp)
    b1d0:	00800234 	movhi	r2,8
    b1d4:	10a07904 	addi	r2,r2,-32284
    b1d8:	11000017 	ldw	r4,0(r2)
    b1dc:	d9c00017 	ldw	r7,0(sp)
    b1e0:	00808204 	movi	r2,520
    b1e4:	00e00034 	movhi	r3,32768
    b1e8:	18ffffc4 	addi	r3,r3,-1
    b1ec:	280d883a 	mov	r6,r5
    b1f0:	d880040d 	sth	r2,16(sp)
    b1f4:	d9400104 	addi	r5,sp,4
    b1f8:	00bfffc4 	movi	r2,-1
    b1fc:	d8c00615 	stw	r3,24(sp)
    b200:	d8c00315 	stw	r3,12(sp)
    b204:	da400515 	stw	r9,20(sp)
    b208:	d880048d 	sth	r2,18(sp)
    b20c:	da400115 	stw	r9,4(sp)
    b210:	000b3e00 	call	b3e0 <___vfprintf_internal_r>
    b214:	d8c00117 	ldw	r3,4(sp)
    b218:	18000005 	stb	zero,0(r3)
    b21c:	dfc01817 	ldw	ra,96(sp)
    b220:	dec01b04 	addi	sp,sp,108
    b224:	f800283a 	ret

0000b228 <_sprintf_r>:
    b228:	deffe604 	addi	sp,sp,-104
    b22c:	2813883a 	mov	r9,r5
    b230:	dfc01815 	stw	ra,96(sp)
    b234:	d9c01915 	stw	r7,100(sp)
    b238:	d8801904 	addi	r2,sp,100
    b23c:	d8800015 	stw	r2,0(sp)
    b240:	100f883a 	mov	r7,r2
    b244:	00808204 	movi	r2,520
    b248:	00e00034 	movhi	r3,32768
    b24c:	18ffffc4 	addi	r3,r3,-1
    b250:	d880040d 	sth	r2,16(sp)
    b254:	d9400104 	addi	r5,sp,4
    b258:	00bfffc4 	movi	r2,-1
    b25c:	d8c00615 	stw	r3,24(sp)
    b260:	d8c00315 	stw	r3,12(sp)
    b264:	da400515 	stw	r9,20(sp)
    b268:	d880048d 	sth	r2,18(sp)
    b26c:	da400115 	stw	r9,4(sp)
    b270:	000b3e00 	call	b3e0 <___vfprintf_internal_r>
    b274:	d8c00117 	ldw	r3,4(sp)
    b278:	18000005 	stb	zero,0(r3)
    b27c:	dfc01817 	ldw	ra,96(sp)
    b280:	dec01a04 	addi	sp,sp,104
    b284:	f800283a 	ret

0000b288 <strcpy>:
    b288:	2904b03a 	or	r2,r5,r4
    b28c:	108000cc 	andi	r2,r2,3
    b290:	10000826 	beq	r2,zero,b2b4 <strcpy+0x2c>
    b294:	2007883a 	mov	r3,r4
    b298:	28800003 	ldbu	r2,0(r5)
    b29c:	29400044 	addi	r5,r5,1
    b2a0:	18800005 	stb	r2,0(r3)
    b2a4:	18c00044 	addi	r3,r3,1
    b2a8:	103ffb1e 	bne	r2,zero,b298 <strcpy+0x10>
    b2ac:	2005883a 	mov	r2,r4
    b2b0:	f800283a 	ret
    b2b4:	29800017 	ldw	r6,0(r5)
    b2b8:	023fbff4 	movhi	r8,65279
    b2bc:	423fbfc4 	addi	r8,r8,-257
    b2c0:	02a02074 	movhi	r10,32897
    b2c4:	52a02004 	addi	r10,r10,-32640
    b2c8:	3205883a 	add	r2,r6,r8
    b2cc:	0186303a 	nor	r3,zero,r6
    b2d0:	10c4703a 	and	r2,r2,r3
    b2d4:	1284703a 	and	r2,r2,r10
    b2d8:	200f883a 	mov	r7,r4
    b2dc:	10000b1e 	bne	r2,zero,b30c <strcpy+0x84>
    b2e0:	4013883a 	mov	r9,r8
    b2e4:	5011883a 	mov	r8,r10
    b2e8:	39800015 	stw	r6,0(r7)
    b2ec:	29400104 	addi	r5,r5,4
    b2f0:	29800017 	ldw	r6,0(r5)
    b2f4:	39c00104 	addi	r7,r7,4
    b2f8:	3245883a 	add	r2,r6,r9
    b2fc:	0186303a 	nor	r3,zero,r6
    b300:	10c4703a 	and	r2,r2,r3
    b304:	1204703a 	and	r2,r2,r8
    b308:	103ff726 	beq	r2,zero,b2e8 <strcpy+0x60>
    b30c:	3807883a 	mov	r3,r7
    b310:	003fe106 	br	b298 <strcpy+0x10>

0000b314 <strlen>:
    b314:	208000cc 	andi	r2,r4,3
    b318:	2011883a 	mov	r8,r4
    b31c:	1000161e 	bne	r2,zero,b378 <strlen+0x64>
    b320:	20c00017 	ldw	r3,0(r4)
    b324:	017fbff4 	movhi	r5,65279
    b328:	297fbfc4 	addi	r5,r5,-257
    b32c:	01e02074 	movhi	r7,32897
    b330:	39e02004 	addi	r7,r7,-32640
    b334:	1945883a 	add	r2,r3,r5
    b338:	11c4703a 	and	r2,r2,r7
    b33c:	00c6303a 	nor	r3,zero,r3
    b340:	1886703a 	and	r3,r3,r2
    b344:	18000c1e 	bne	r3,zero,b378 <strlen+0x64>
    b348:	280d883a 	mov	r6,r5
    b34c:	380b883a 	mov	r5,r7
    b350:	21000104 	addi	r4,r4,4
    b354:	20800017 	ldw	r2,0(r4)
    b358:	1187883a 	add	r3,r2,r6
    b35c:	1946703a 	and	r3,r3,r5
    b360:	0084303a 	nor	r2,zero,r2
    b364:	10c4703a 	and	r2,r2,r3
    b368:	103ff926 	beq	r2,zero,b350 <strlen+0x3c>
    b36c:	20800007 	ldb	r2,0(r4)
    b370:	10000326 	beq	r2,zero,b380 <strlen+0x6c>
    b374:	21000044 	addi	r4,r4,1
    b378:	20800007 	ldb	r2,0(r4)
    b37c:	103ffd1e 	bne	r2,zero,b374 <strlen+0x60>
    b380:	2205c83a 	sub	r2,r4,r8
    b384:	f800283a 	ret

0000b388 <__sprint_r>:
    b388:	30800217 	ldw	r2,8(r6)
    b38c:	defffe04 	addi	sp,sp,-8
    b390:	dc000015 	stw	r16,0(sp)
    b394:	dfc00115 	stw	ra,4(sp)
    b398:	3021883a 	mov	r16,r6
    b39c:	0007883a 	mov	r3,zero
    b3a0:	1000061e 	bne	r2,zero,b3bc <__sprint_r+0x34>
    b3a4:	1805883a 	mov	r2,r3
    b3a8:	30000115 	stw	zero,4(r6)
    b3ac:	dfc00117 	ldw	ra,4(sp)
    b3b0:	dc000017 	ldw	r16,0(sp)
    b3b4:	dec00204 	addi	sp,sp,8
    b3b8:	f800283a 	ret
    b3bc:	000f6540 	call	f654 <__sfvwrite_r>
    b3c0:	1007883a 	mov	r3,r2
    b3c4:	1805883a 	mov	r2,r3
    b3c8:	80000115 	stw	zero,4(r16)
    b3cc:	80000215 	stw	zero,8(r16)
    b3d0:	dfc00117 	ldw	ra,4(sp)
    b3d4:	dc000017 	ldw	r16,0(sp)
    b3d8:	dec00204 	addi	sp,sp,8
    b3dc:	f800283a 	ret

0000b3e0 <___vfprintf_internal_r>:
    b3e0:	defea404 	addi	sp,sp,-1392
    b3e4:	dd815815 	stw	r22,1376(sp)
    b3e8:	dc015215 	stw	r16,1352(sp)
    b3ec:	d9c15115 	stw	r7,1348(sp)
    b3f0:	dfc15b15 	stw	ra,1388(sp)
    b3f4:	df015a15 	stw	fp,1384(sp)
    b3f8:	ddc15915 	stw	r23,1380(sp)
    b3fc:	dd415715 	stw	r21,1372(sp)
    b400:	dd015615 	stw	r20,1368(sp)
    b404:	dcc15515 	stw	r19,1364(sp)
    b408:	dc815415 	stw	r18,1360(sp)
    b40c:	dc415315 	stw	r17,1356(sp)
    b410:	282d883a 	mov	r22,r5
    b414:	3021883a 	mov	r16,r6
    b418:	d9014f15 	stw	r4,1340(sp)
    b41c:	000fc780 	call	fc78 <_localeconv_r>
    b420:	10800017 	ldw	r2,0(r2)
    b424:	d9c15117 	ldw	r7,1348(sp)
    b428:	d8814915 	stw	r2,1316(sp)
    b42c:	d8814f17 	ldw	r2,1340(sp)
    b430:	10000226 	beq	r2,zero,b43c <___vfprintf_internal_r+0x5c>
    b434:	10800e17 	ldw	r2,56(r2)
    b438:	10020d26 	beq	r2,zero,bc70 <___vfprintf_internal_r+0x890>
    b43c:	b080030b 	ldhu	r2,12(r22)
    b440:	1080020c 	andi	r2,r2,8
    b444:	10020e26 	beq	r2,zero,bc80 <___vfprintf_internal_r+0x8a0>
    b448:	b0800417 	ldw	r2,16(r22)
    b44c:	10020c26 	beq	r2,zero,bc80 <___vfprintf_internal_r+0x8a0>
    b450:	b200030b 	ldhu	r8,12(r22)
    b454:	00800284 	movi	r2,10
    b458:	40c0068c 	andi	r3,r8,26
    b45c:	18802f1e 	bne	r3,r2,b51c <___vfprintf_internal_r+0x13c>
    b460:	b080038f 	ldh	r2,14(r22)
    b464:	10002d16 	blt	r2,zero,b51c <___vfprintf_internal_r+0x13c>
    b468:	b240038b 	ldhu	r9,14(r22)
    b46c:	b2800717 	ldw	r10,28(r22)
    b470:	b2c00917 	ldw	r11,36(r22)
    b474:	d9014f17 	ldw	r4,1340(sp)
    b478:	dc402904 	addi	r17,sp,164
    b47c:	d8804004 	addi	r2,sp,256
    b480:	00c10004 	movi	r3,1024
    b484:	423fff4c 	andi	r8,r8,65533
    b488:	800d883a 	mov	r6,r16
    b48c:	880b883a 	mov	r5,r17
    b490:	da002c0d 	sth	r8,176(sp)
    b494:	da402c8d 	sth	r9,178(sp)
    b498:	da803015 	stw	r10,192(sp)
    b49c:	dac03215 	stw	r11,200(sp)
    b4a0:	d8802d15 	stw	r2,180(sp)
    b4a4:	d8c02e15 	stw	r3,184(sp)
    b4a8:	d8802915 	stw	r2,164(sp)
    b4ac:	d8c02b15 	stw	r3,172(sp)
    b4b0:	d8002f15 	stw	zero,188(sp)
    b4b4:	000b3e00 	call	b3e0 <___vfprintf_internal_r>
    b4b8:	d8814b15 	stw	r2,1324(sp)
    b4bc:	10000416 	blt	r2,zero,b4d0 <___vfprintf_internal_r+0xf0>
    b4c0:	d9014f17 	ldw	r4,1340(sp)
    b4c4:	880b883a 	mov	r5,r17
    b4c8:	000ecf00 	call	ecf0 <_fflush_r>
    b4cc:	1002321e 	bne	r2,zero,bd98 <___vfprintf_internal_r+0x9b8>
    b4d0:	d8802c0b 	ldhu	r2,176(sp)
    b4d4:	1080100c 	andi	r2,r2,64
    b4d8:	10000326 	beq	r2,zero,b4e8 <___vfprintf_internal_r+0x108>
    b4dc:	b080030b 	ldhu	r2,12(r22)
    b4e0:	10801014 	ori	r2,r2,64
    b4e4:	b080030d 	sth	r2,12(r22)
    b4e8:	d8814b17 	ldw	r2,1324(sp)
    b4ec:	dfc15b17 	ldw	ra,1388(sp)
    b4f0:	df015a17 	ldw	fp,1384(sp)
    b4f4:	ddc15917 	ldw	r23,1380(sp)
    b4f8:	dd815817 	ldw	r22,1376(sp)
    b4fc:	dd415717 	ldw	r21,1372(sp)
    b500:	dd015617 	ldw	r20,1368(sp)
    b504:	dcc15517 	ldw	r19,1364(sp)
    b508:	dc815417 	ldw	r18,1360(sp)
    b50c:	dc415317 	ldw	r17,1356(sp)
    b510:	dc015217 	ldw	r16,1352(sp)
    b514:	dec15c04 	addi	sp,sp,1392
    b518:	f800283a 	ret
    b51c:	0005883a 	mov	r2,zero
    b520:	0007883a 	mov	r3,zero
    b524:	dd401904 	addi	r21,sp,100
    b528:	d8814215 	stw	r2,1288(sp)
    b52c:	802f883a 	mov	r23,r16
    b530:	d8c14315 	stw	r3,1292(sp)
    b534:	d8014b15 	stw	zero,1324(sp)
    b538:	d8014815 	stw	zero,1312(sp)
    b53c:	d8014415 	stw	zero,1296(sp)
    b540:	d8014715 	stw	zero,1308(sp)
    b544:	dd400c15 	stw	r21,48(sp)
    b548:	d8000e15 	stw	zero,56(sp)
    b54c:	d8000d15 	stw	zero,52(sp)
    b550:	b8800007 	ldb	r2,0(r23)
    b554:	10001926 	beq	r2,zero,b5bc <___vfprintf_internal_r+0x1dc>
    b558:	00c00944 	movi	r3,37
    b55c:	10c01726 	beq	r2,r3,b5bc <___vfprintf_internal_r+0x1dc>
    b560:	b821883a 	mov	r16,r23
    b564:	00000106 	br	b56c <___vfprintf_internal_r+0x18c>
    b568:	10c00326 	beq	r2,r3,b578 <___vfprintf_internal_r+0x198>
    b56c:	84000044 	addi	r16,r16,1
    b570:	80800007 	ldb	r2,0(r16)
    b574:	103ffc1e 	bne	r2,zero,b568 <___vfprintf_internal_r+0x188>
    b578:	85e7c83a 	sub	r19,r16,r23
    b57c:	98000e26 	beq	r19,zero,b5b8 <___vfprintf_internal_r+0x1d8>
    b580:	dc800e17 	ldw	r18,56(sp)
    b584:	dc400d17 	ldw	r17,52(sp)
    b588:	008001c4 	movi	r2,7
    b58c:	94e5883a 	add	r18,r18,r19
    b590:	8c400044 	addi	r17,r17,1
    b594:	adc00015 	stw	r23,0(r21)
    b598:	dc800e15 	stw	r18,56(sp)
    b59c:	acc00115 	stw	r19,4(r21)
    b5a0:	dc400d15 	stw	r17,52(sp)
    b5a4:	14428b16 	blt	r2,r17,bfd4 <___vfprintf_internal_r+0xbf4>
    b5a8:	ad400204 	addi	r21,r21,8
    b5ac:	d9014b17 	ldw	r4,1324(sp)
    b5b0:	24c9883a 	add	r4,r4,r19
    b5b4:	d9014b15 	stw	r4,1324(sp)
    b5b8:	802f883a 	mov	r23,r16
    b5bc:	b8800007 	ldb	r2,0(r23)
    b5c0:	10013c26 	beq	r2,zero,bab4 <___vfprintf_internal_r+0x6d4>
    b5c4:	bdc00044 	addi	r23,r23,1
    b5c8:	d8000405 	stb	zero,16(sp)
    b5cc:	b8c00007 	ldb	r3,0(r23)
    b5d0:	04ffffc4 	movi	r19,-1
    b5d4:	d8014c15 	stw	zero,1328(sp)
    b5d8:	d8014a15 	stw	zero,1320(sp)
    b5dc:	d8c14d15 	stw	r3,1332(sp)
    b5e0:	bdc00044 	addi	r23,r23,1
    b5e4:	d9414d17 	ldw	r5,1332(sp)
    b5e8:	00801604 	movi	r2,88
    b5ec:	28fff804 	addi	r3,r5,-32
    b5f0:	10c06036 	bltu	r2,r3,b774 <___vfprintf_internal_r+0x394>
    b5f4:	18c5883a 	add	r2,r3,r3
    b5f8:	1085883a 	add	r2,r2,r2
    b5fc:	00c00074 	movhi	r3,1
    b600:	18ed8404 	addi	r3,r3,-18928
    b604:	10c5883a 	add	r2,r2,r3
    b608:	11000017 	ldw	r4,0(r2)
    b60c:	2000683a 	jmp	r4
    b610:	0000c584 	movi	zero,790
    b614:	0000b774 	movhi	zero,733
    b618:	0000b774 	movhi	zero,733
    b61c:	0000c570 	cmpltui	zero,zero,789
    b620:	0000b774 	movhi	zero,733
    b624:	0000b774 	movhi	zero,733
    b628:	0000b774 	movhi	zero,733
    b62c:	0000b774 	movhi	zero,733
    b630:	0000b774 	movhi	zero,733
    b634:	0000b774 	movhi	zero,733
    b638:	0000c350 	cmplti	zero,zero,781
    b63c:	0000c560 	cmpeqi	zero,zero,789
    b640:	0000b774 	movhi	zero,733
    b644:	0000c368 	cmpgeui	zero,zero,781
    b648:	0000c608 	cmpgei	zero,zero,792
    b64c:	0000b774 	movhi	zero,733
    b650:	0000c5f4 	movhi	zero,791
    b654:	0000c5b0 	cmpltui	zero,zero,790
    b658:	0000c5b0 	cmpltui	zero,zero,790
    b65c:	0000c5b0 	cmpltui	zero,zero,790
    b660:	0000c5b0 	cmpltui	zero,zero,790
    b664:	0000c5b0 	cmpltui	zero,zero,790
    b668:	0000c5b0 	cmpltui	zero,zero,790
    b66c:	0000c5b0 	cmpltui	zero,zero,790
    b670:	0000c5b0 	cmpltui	zero,zero,790
    b674:	0000c5b0 	cmpltui	zero,zero,790
    b678:	0000b774 	movhi	zero,733
    b67c:	0000b774 	movhi	zero,733
    b680:	0000b774 	movhi	zero,733
    b684:	0000b774 	movhi	zero,733
    b688:	0000b774 	movhi	zero,733
    b68c:	0000b774 	movhi	zero,733
    b690:	0000b774 	movhi	zero,733
    b694:	0000b774 	movhi	zero,733
    b698:	0000b774 	movhi	zero,733
    b69c:	0000b774 	movhi	zero,733
    b6a0:	0000bdcc 	andi	zero,zero,759
    b6a4:	0000c438 	rdprs	zero,zero,784
    b6a8:	0000b774 	movhi	zero,733
    b6ac:	0000c438 	rdprs	zero,zero,784
    b6b0:	0000b774 	movhi	zero,733
    b6b4:	0000b774 	movhi	zero,733
    b6b8:	0000b774 	movhi	zero,733
    b6bc:	0000b774 	movhi	zero,733
    b6c0:	0000c59c 	xori	zero,zero,790
    b6c4:	0000b774 	movhi	zero,733
    b6c8:	0000b774 	movhi	zero,733
    b6cc:	0000be80 	call	be8 <vid_scroll_string+0x34c>
    b6d0:	0000b774 	movhi	zero,733
    b6d4:	0000b774 	movhi	zero,733
    b6d8:	0000b774 	movhi	zero,733
    b6dc:	0000b774 	movhi	zero,733
    b6e0:	0000b774 	movhi	zero,733
    b6e4:	0000becc 	andi	zero,zero,763
    b6e8:	0000b774 	movhi	zero,733
    b6ec:	0000b774 	movhi	zero,733
    b6f0:	0000c4ec 	andhi	zero,zero,787
    b6f4:	0000b774 	movhi	zero,733
    b6f8:	0000b774 	movhi	zero,733
    b6fc:	0000b774 	movhi	zero,733
    b700:	0000b774 	movhi	zero,733
    b704:	0000b774 	movhi	zero,733
    b708:	0000b774 	movhi	zero,733
    b70c:	0000b774 	movhi	zero,733
    b710:	0000b774 	movhi	zero,733
    b714:	0000b774 	movhi	zero,733
    b718:	0000b774 	movhi	zero,733
    b71c:	0000c4c0 	call	c4c <vid_scroll_string+0x3b0>
    b720:	0000bdd8 	cmpnei	zero,zero,759
    b724:	0000c438 	rdprs	zero,zero,784
    b728:	0000c438 	rdprs	zero,zero,784
    b72c:	0000c438 	rdprs	zero,zero,784
    b730:	0000c424 	muli	zero,zero,784
    b734:	0000bdd8 	cmpnei	zero,zero,759
    b738:	0000b774 	movhi	zero,733
    b73c:	0000b774 	movhi	zero,733
    b740:	0000c3ac 	andhi	zero,zero,782
    b744:	0000b774 	movhi	zero,733
    b748:	0000c37c 	xorhi	zero,zero,781
    b74c:	0000be8c 	andi	zero,zero,762
    b750:	0000c3dc 	xori	zero,zero,783
    b754:	0000c3c8 	cmpgei	zero,zero,783
    b758:	0000b774 	movhi	zero,733
    b75c:	0000c670 	cmpltui	zero,zero,793
    b760:	0000b774 	movhi	zero,733
    b764:	0000bed8 	cmpnei	zero,zero,763
    b768:	0000b774 	movhi	zero,733
    b76c:	0000b774 	movhi	zero,733
    b770:	0000c550 	cmplti	zero,zero,789
    b774:	d9014d17 	ldw	r4,1332(sp)
    b778:	2000ce26 	beq	r4,zero,bab4 <___vfprintf_internal_r+0x6d4>
    b77c:	01400044 	movi	r5,1
    b780:	d9800f04 	addi	r6,sp,60
    b784:	d9c14015 	stw	r7,1280(sp)
    b788:	d9414515 	stw	r5,1300(sp)
    b78c:	d9814115 	stw	r6,1284(sp)
    b790:	280f883a 	mov	r7,r5
    b794:	d9000f05 	stb	r4,60(sp)
    b798:	d8000405 	stb	zero,16(sp)
    b79c:	d8014615 	stw	zero,1304(sp)
    b7a0:	d8c14c17 	ldw	r3,1328(sp)
    b7a4:	1880008c 	andi	r2,r3,2
    b7a8:	1005003a 	cmpeq	r2,r2,zero
    b7ac:	d8815015 	stw	r2,1344(sp)
    b7b0:	1000031e 	bne	r2,zero,b7c0 <___vfprintf_internal_r+0x3e0>
    b7b4:	d9014517 	ldw	r4,1300(sp)
    b7b8:	21000084 	addi	r4,r4,2
    b7bc:	d9014515 	stw	r4,1300(sp)
    b7c0:	d9414c17 	ldw	r5,1328(sp)
    b7c4:	2940210c 	andi	r5,r5,132
    b7c8:	d9414e15 	stw	r5,1336(sp)
    b7cc:	28002d1e 	bne	r5,zero,b884 <___vfprintf_internal_r+0x4a4>
    b7d0:	d9814a17 	ldw	r6,1320(sp)
    b7d4:	d8814517 	ldw	r2,1300(sp)
    b7d8:	30a1c83a 	sub	r16,r6,r2
    b7dc:	0400290e 	bge	zero,r16,b884 <___vfprintf_internal_r+0x4a4>
    b7e0:	00800404 	movi	r2,16
    b7e4:	14045e0e 	bge	r2,r16,c960 <___vfprintf_internal_r+0x1580>
    b7e8:	dc800e17 	ldw	r18,56(sp)
    b7ec:	dc400d17 	ldw	r17,52(sp)
    b7f0:	1027883a 	mov	r19,r2
    b7f4:	070001f4 	movhi	fp,7
    b7f8:	e7129384 	addi	fp,fp,19022
    b7fc:	050001c4 	movi	r20,7
    b800:	00000306 	br	b810 <___vfprintf_internal_r+0x430>
    b804:	843ffc04 	addi	r16,r16,-16
    b808:	ad400204 	addi	r21,r21,8
    b80c:	9c00130e 	bge	r19,r16,b85c <___vfprintf_internal_r+0x47c>
    b810:	94800404 	addi	r18,r18,16
    b814:	8c400044 	addi	r17,r17,1
    b818:	af000015 	stw	fp,0(r21)
    b81c:	acc00115 	stw	r19,4(r21)
    b820:	dc800e15 	stw	r18,56(sp)
    b824:	dc400d15 	stw	r17,52(sp)
    b828:	a47ff60e 	bge	r20,r17,b804 <___vfprintf_internal_r+0x424>
    b82c:	d9014f17 	ldw	r4,1340(sp)
    b830:	b00b883a 	mov	r5,r22
    b834:	d9800c04 	addi	r6,sp,48
    b838:	d9c15115 	stw	r7,1348(sp)
    b83c:	000b3880 	call	b388 <__sprint_r>
    b840:	d9c15117 	ldw	r7,1348(sp)
    b844:	10009e1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    b848:	843ffc04 	addi	r16,r16,-16
    b84c:	dc800e17 	ldw	r18,56(sp)
    b850:	dc400d17 	ldw	r17,52(sp)
    b854:	dd401904 	addi	r21,sp,100
    b858:	9c3fed16 	blt	r19,r16,b810 <___vfprintf_internal_r+0x430>
    b85c:	9425883a 	add	r18,r18,r16
    b860:	8c400044 	addi	r17,r17,1
    b864:	008001c4 	movi	r2,7
    b868:	af000015 	stw	fp,0(r21)
    b86c:	ac000115 	stw	r16,4(r21)
    b870:	dc800e15 	stw	r18,56(sp)
    b874:	dc400d15 	stw	r17,52(sp)
    b878:	1441f516 	blt	r2,r17,c050 <___vfprintf_internal_r+0xc70>
    b87c:	ad400204 	addi	r21,r21,8
    b880:	00000206 	br	b88c <___vfprintf_internal_r+0x4ac>
    b884:	dc800e17 	ldw	r18,56(sp)
    b888:	dc400d17 	ldw	r17,52(sp)
    b88c:	d8800407 	ldb	r2,16(sp)
    b890:	10000b26 	beq	r2,zero,b8c0 <___vfprintf_internal_r+0x4e0>
    b894:	00800044 	movi	r2,1
    b898:	94800044 	addi	r18,r18,1
    b89c:	8c400044 	addi	r17,r17,1
    b8a0:	a8800115 	stw	r2,4(r21)
    b8a4:	d8c00404 	addi	r3,sp,16
    b8a8:	008001c4 	movi	r2,7
    b8ac:	a8c00015 	stw	r3,0(r21)
    b8b0:	dc800e15 	stw	r18,56(sp)
    b8b4:	dc400d15 	stw	r17,52(sp)
    b8b8:	1441da16 	blt	r2,r17,c024 <___vfprintf_internal_r+0xc44>
    b8bc:	ad400204 	addi	r21,r21,8
    b8c0:	d9015017 	ldw	r4,1344(sp)
    b8c4:	20000b1e 	bne	r4,zero,b8f4 <___vfprintf_internal_r+0x514>
    b8c8:	d8800444 	addi	r2,sp,17
    b8cc:	94800084 	addi	r18,r18,2
    b8d0:	8c400044 	addi	r17,r17,1
    b8d4:	a8800015 	stw	r2,0(r21)
    b8d8:	00c00084 	movi	r3,2
    b8dc:	008001c4 	movi	r2,7
    b8e0:	a8c00115 	stw	r3,4(r21)
    b8e4:	dc800e15 	stw	r18,56(sp)
    b8e8:	dc400d15 	stw	r17,52(sp)
    b8ec:	1441c216 	blt	r2,r17,bff8 <___vfprintf_internal_r+0xc18>
    b8f0:	ad400204 	addi	r21,r21,8
    b8f4:	d9414e17 	ldw	r5,1336(sp)
    b8f8:	00802004 	movi	r2,128
    b8fc:	2880b126 	beq	r5,r2,bbc4 <___vfprintf_internal_r+0x7e4>
    b900:	d8c14617 	ldw	r3,1304(sp)
    b904:	19e1c83a 	sub	r16,r3,r7
    b908:	0400260e 	bge	zero,r16,b9a4 <___vfprintf_internal_r+0x5c4>
    b90c:	00800404 	movi	r2,16
    b910:	1403cf0e 	bge	r2,r16,c850 <___vfprintf_internal_r+0x1470>
    b914:	1027883a 	mov	r19,r2
    b918:	070001f4 	movhi	fp,7
    b91c:	e7128f84 	addi	fp,fp,19006
    b920:	050001c4 	movi	r20,7
    b924:	00000306 	br	b934 <___vfprintf_internal_r+0x554>
    b928:	843ffc04 	addi	r16,r16,-16
    b92c:	ad400204 	addi	r21,r21,8
    b930:	9c00130e 	bge	r19,r16,b980 <___vfprintf_internal_r+0x5a0>
    b934:	94800404 	addi	r18,r18,16
    b938:	8c400044 	addi	r17,r17,1
    b93c:	af000015 	stw	fp,0(r21)
    b940:	acc00115 	stw	r19,4(r21)
    b944:	dc800e15 	stw	r18,56(sp)
    b948:	dc400d15 	stw	r17,52(sp)
    b94c:	a47ff60e 	bge	r20,r17,b928 <___vfprintf_internal_r+0x548>
    b950:	d9014f17 	ldw	r4,1340(sp)
    b954:	b00b883a 	mov	r5,r22
    b958:	d9800c04 	addi	r6,sp,48
    b95c:	d9c15115 	stw	r7,1348(sp)
    b960:	000b3880 	call	b388 <__sprint_r>
    b964:	d9c15117 	ldw	r7,1348(sp)
    b968:	1000551e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    b96c:	843ffc04 	addi	r16,r16,-16
    b970:	dc800e17 	ldw	r18,56(sp)
    b974:	dc400d17 	ldw	r17,52(sp)
    b978:	dd401904 	addi	r21,sp,100
    b97c:	9c3fed16 	blt	r19,r16,b934 <___vfprintf_internal_r+0x554>
    b980:	9425883a 	add	r18,r18,r16
    b984:	8c400044 	addi	r17,r17,1
    b988:	008001c4 	movi	r2,7
    b98c:	af000015 	stw	fp,0(r21)
    b990:	ac000115 	stw	r16,4(r21)
    b994:	dc800e15 	stw	r18,56(sp)
    b998:	dc400d15 	stw	r17,52(sp)
    b99c:	14418216 	blt	r2,r17,bfa8 <___vfprintf_internal_r+0xbc8>
    b9a0:	ad400204 	addi	r21,r21,8
    b9a4:	d9014c17 	ldw	r4,1328(sp)
    b9a8:	2080400c 	andi	r2,r4,256
    b9ac:	10004a1e 	bne	r2,zero,bad8 <___vfprintf_internal_r+0x6f8>
    b9b0:	d9414117 	ldw	r5,1284(sp)
    b9b4:	91e5883a 	add	r18,r18,r7
    b9b8:	8c400044 	addi	r17,r17,1
    b9bc:	008001c4 	movi	r2,7
    b9c0:	a9400015 	stw	r5,0(r21)
    b9c4:	a9c00115 	stw	r7,4(r21)
    b9c8:	dc800e15 	stw	r18,56(sp)
    b9cc:	dc400d15 	stw	r17,52(sp)
    b9d0:	14416716 	blt	r2,r17,bf70 <___vfprintf_internal_r+0xb90>
    b9d4:	a8c00204 	addi	r3,r21,8
    b9d8:	d9814c17 	ldw	r6,1328(sp)
    b9dc:	3080010c 	andi	r2,r6,4
    b9e0:	10002826 	beq	r2,zero,ba84 <___vfprintf_internal_r+0x6a4>
    b9e4:	d8814a17 	ldw	r2,1320(sp)
    b9e8:	d9014517 	ldw	r4,1300(sp)
    b9ec:	1121c83a 	sub	r16,r2,r4
    b9f0:	0400240e 	bge	zero,r16,ba84 <___vfprintf_internal_r+0x6a4>
    b9f4:	00800404 	movi	r2,16
    b9f8:	1404550e 	bge	r2,r16,cb50 <___vfprintf_internal_r+0x1770>
    b9fc:	dc400d17 	ldw	r17,52(sp)
    ba00:	1027883a 	mov	r19,r2
    ba04:	070001f4 	movhi	fp,7
    ba08:	e7129384 	addi	fp,fp,19022
    ba0c:	050001c4 	movi	r20,7
    ba10:	00000306 	br	ba20 <___vfprintf_internal_r+0x640>
    ba14:	843ffc04 	addi	r16,r16,-16
    ba18:	18c00204 	addi	r3,r3,8
    ba1c:	9c00110e 	bge	r19,r16,ba64 <___vfprintf_internal_r+0x684>
    ba20:	94800404 	addi	r18,r18,16
    ba24:	8c400044 	addi	r17,r17,1
    ba28:	1f000015 	stw	fp,0(r3)
    ba2c:	1cc00115 	stw	r19,4(r3)
    ba30:	dc800e15 	stw	r18,56(sp)
    ba34:	dc400d15 	stw	r17,52(sp)
    ba38:	a47ff60e 	bge	r20,r17,ba14 <___vfprintf_internal_r+0x634>
    ba3c:	d9014f17 	ldw	r4,1340(sp)
    ba40:	b00b883a 	mov	r5,r22
    ba44:	d9800c04 	addi	r6,sp,48
    ba48:	000b3880 	call	b388 <__sprint_r>
    ba4c:	10001c1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    ba50:	843ffc04 	addi	r16,r16,-16
    ba54:	dc800e17 	ldw	r18,56(sp)
    ba58:	dc400d17 	ldw	r17,52(sp)
    ba5c:	d8c01904 	addi	r3,sp,100
    ba60:	9c3fef16 	blt	r19,r16,ba20 <___vfprintf_internal_r+0x640>
    ba64:	9425883a 	add	r18,r18,r16
    ba68:	8c400044 	addi	r17,r17,1
    ba6c:	008001c4 	movi	r2,7
    ba70:	1f000015 	stw	fp,0(r3)
    ba74:	1c000115 	stw	r16,4(r3)
    ba78:	dc800e15 	stw	r18,56(sp)
    ba7c:	dc400d15 	stw	r17,52(sp)
    ba80:	1440cb16 	blt	r2,r17,bdb0 <___vfprintf_internal_r+0x9d0>
    ba84:	d8814a17 	ldw	r2,1320(sp)
    ba88:	d9414517 	ldw	r5,1300(sp)
    ba8c:	1140010e 	bge	r2,r5,ba94 <___vfprintf_internal_r+0x6b4>
    ba90:	2805883a 	mov	r2,r5
    ba94:	d9814b17 	ldw	r6,1324(sp)
    ba98:	308d883a 	add	r6,r6,r2
    ba9c:	d9814b15 	stw	r6,1324(sp)
    baa0:	90013b1e 	bne	r18,zero,bf90 <___vfprintf_internal_r+0xbb0>
    baa4:	d9c14017 	ldw	r7,1280(sp)
    baa8:	dd401904 	addi	r21,sp,100
    baac:	d8000d15 	stw	zero,52(sp)
    bab0:	003ea706 	br	b550 <___vfprintf_internal_r+0x170>
    bab4:	d8800e17 	ldw	r2,56(sp)
    bab8:	1005451e 	bne	r2,zero,cfd0 <___vfprintf_internal_r+0x1bf0>
    babc:	d8000d15 	stw	zero,52(sp)
    bac0:	b080030b 	ldhu	r2,12(r22)
    bac4:	1080100c 	andi	r2,r2,64
    bac8:	103e8726 	beq	r2,zero,b4e8 <___vfprintf_internal_r+0x108>
    bacc:	00bfffc4 	movi	r2,-1
    bad0:	d8814b15 	stw	r2,1324(sp)
    bad4:	003e8406 	br	b4e8 <___vfprintf_internal_r+0x108>
    bad8:	d9814d17 	ldw	r6,1332(sp)
    badc:	00801944 	movi	r2,101
    bae0:	11806e16 	blt	r2,r6,bc9c <___vfprintf_internal_r+0x8bc>
    bae4:	d9414717 	ldw	r5,1308(sp)
    bae8:	00c00044 	movi	r3,1
    baec:	1943490e 	bge	r3,r5,c814 <___vfprintf_internal_r+0x1434>
    baf0:	d8814117 	ldw	r2,1284(sp)
    baf4:	94800044 	addi	r18,r18,1
    baf8:	8c400044 	addi	r17,r17,1
    bafc:	a8800015 	stw	r2,0(r21)
    bb00:	008001c4 	movi	r2,7
    bb04:	a8c00115 	stw	r3,4(r21)
    bb08:	dc800e15 	stw	r18,56(sp)
    bb0c:	dc400d15 	stw	r17,52(sp)
    bb10:	1441ca16 	blt	r2,r17,c23c <___vfprintf_internal_r+0xe5c>
    bb14:	a8c00204 	addi	r3,r21,8
    bb18:	d9014917 	ldw	r4,1316(sp)
    bb1c:	00800044 	movi	r2,1
    bb20:	94800044 	addi	r18,r18,1
    bb24:	8c400044 	addi	r17,r17,1
    bb28:	18800115 	stw	r2,4(r3)
    bb2c:	008001c4 	movi	r2,7
    bb30:	19000015 	stw	r4,0(r3)
    bb34:	dc800e15 	stw	r18,56(sp)
    bb38:	dc400d15 	stw	r17,52(sp)
    bb3c:	1441b616 	blt	r2,r17,c218 <___vfprintf_internal_r+0xe38>
    bb40:	1cc00204 	addi	r19,r3,8
    bb44:	d9014217 	ldw	r4,1288(sp)
    bb48:	d9414317 	ldw	r5,1292(sp)
    bb4c:	000d883a 	mov	r6,zero
    bb50:	000f883a 	mov	r7,zero
    bb54:	0012e880 	call	12e88 <__nedf2>
    bb58:	10017426 	beq	r2,zero,c12c <___vfprintf_internal_r+0xd4c>
    bb5c:	d9414717 	ldw	r5,1308(sp)
    bb60:	d9814117 	ldw	r6,1284(sp)
    bb64:	8c400044 	addi	r17,r17,1
    bb68:	2c85883a 	add	r2,r5,r18
    bb6c:	14bfffc4 	addi	r18,r2,-1
    bb70:	28bfffc4 	addi	r2,r5,-1
    bb74:	30c00044 	addi	r3,r6,1
    bb78:	98800115 	stw	r2,4(r19)
    bb7c:	008001c4 	movi	r2,7
    bb80:	98c00015 	stw	r3,0(r19)
    bb84:	dc800e15 	stw	r18,56(sp)
    bb88:	dc400d15 	stw	r17,52(sp)
    bb8c:	14418e16 	blt	r2,r17,c1c8 <___vfprintf_internal_r+0xde8>
    bb90:	9cc00204 	addi	r19,r19,8
    bb94:	d9414817 	ldw	r5,1312(sp)
    bb98:	d8800804 	addi	r2,sp,32
    bb9c:	8c400044 	addi	r17,r17,1
    bba0:	9165883a 	add	r18,r18,r5
    bba4:	98800015 	stw	r2,0(r19)
    bba8:	008001c4 	movi	r2,7
    bbac:	99400115 	stw	r5,4(r19)
    bbb0:	dc800e15 	stw	r18,56(sp)
    bbb4:	dc400d15 	stw	r17,52(sp)
    bbb8:	1440ed16 	blt	r2,r17,bf70 <___vfprintf_internal_r+0xb90>
    bbbc:	98c00204 	addi	r3,r19,8
    bbc0:	003f8506 	br	b9d8 <___vfprintf_internal_r+0x5f8>
    bbc4:	d9814a17 	ldw	r6,1320(sp)
    bbc8:	d8814517 	ldw	r2,1300(sp)
    bbcc:	30a1c83a 	sub	r16,r6,r2
    bbd0:	043f4b0e 	bge	zero,r16,b900 <___vfprintf_internal_r+0x520>
    bbd4:	00800404 	movi	r2,16
    bbd8:	14043a0e 	bge	r2,r16,ccc4 <___vfprintf_internal_r+0x18e4>
    bbdc:	1027883a 	mov	r19,r2
    bbe0:	070001f4 	movhi	fp,7
    bbe4:	e7128f84 	addi	fp,fp,19006
    bbe8:	050001c4 	movi	r20,7
    bbec:	00000306 	br	bbfc <___vfprintf_internal_r+0x81c>
    bbf0:	843ffc04 	addi	r16,r16,-16
    bbf4:	ad400204 	addi	r21,r21,8
    bbf8:	9c00130e 	bge	r19,r16,bc48 <___vfprintf_internal_r+0x868>
    bbfc:	94800404 	addi	r18,r18,16
    bc00:	8c400044 	addi	r17,r17,1
    bc04:	af000015 	stw	fp,0(r21)
    bc08:	acc00115 	stw	r19,4(r21)
    bc0c:	dc800e15 	stw	r18,56(sp)
    bc10:	dc400d15 	stw	r17,52(sp)
    bc14:	a47ff60e 	bge	r20,r17,bbf0 <___vfprintf_internal_r+0x810>
    bc18:	d9014f17 	ldw	r4,1340(sp)
    bc1c:	b00b883a 	mov	r5,r22
    bc20:	d9800c04 	addi	r6,sp,48
    bc24:	d9c15115 	stw	r7,1348(sp)
    bc28:	000b3880 	call	b388 <__sprint_r>
    bc2c:	d9c15117 	ldw	r7,1348(sp)
    bc30:	103fa31e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    bc34:	843ffc04 	addi	r16,r16,-16
    bc38:	dc800e17 	ldw	r18,56(sp)
    bc3c:	dc400d17 	ldw	r17,52(sp)
    bc40:	dd401904 	addi	r21,sp,100
    bc44:	9c3fed16 	blt	r19,r16,bbfc <___vfprintf_internal_r+0x81c>
    bc48:	9425883a 	add	r18,r18,r16
    bc4c:	8c400044 	addi	r17,r17,1
    bc50:	008001c4 	movi	r2,7
    bc54:	af000015 	stw	fp,0(r21)
    bc58:	ac000115 	stw	r16,4(r21)
    bc5c:	dc800e15 	stw	r18,56(sp)
    bc60:	dc400d15 	stw	r17,52(sp)
    bc64:	14416116 	blt	r2,r17,c1ec <___vfprintf_internal_r+0xe0c>
    bc68:	ad400204 	addi	r21,r21,8
    bc6c:	003f2406 	br	b900 <___vfprintf_internal_r+0x520>
    bc70:	d9014f17 	ldw	r4,1340(sp)
    bc74:	000ef880 	call	ef88 <__sinit>
    bc78:	d9c15117 	ldw	r7,1348(sp)
    bc7c:	003def06 	br	b43c <___vfprintf_internal_r+0x5c>
    bc80:	d9014f17 	ldw	r4,1340(sp)
    bc84:	b00b883a 	mov	r5,r22
    bc88:	d9c15115 	stw	r7,1348(sp)
    bc8c:	000d3bc0 	call	d3bc <__swsetup_r>
    bc90:	d9c15117 	ldw	r7,1348(sp)
    bc94:	103dee26 	beq	r2,zero,b450 <___vfprintf_internal_r+0x70>
    bc98:	003f8c06 	br	bacc <___vfprintf_internal_r+0x6ec>
    bc9c:	d9014217 	ldw	r4,1288(sp)
    bca0:	d9414317 	ldw	r5,1292(sp)
    bca4:	000d883a 	mov	r6,zero
    bca8:	000f883a 	mov	r7,zero
    bcac:	0012e000 	call	12e00 <__eqdf2>
    bcb0:	1000f21e 	bne	r2,zero,c07c <___vfprintf_internal_r+0xc9c>
    bcb4:	008001f4 	movhi	r2,7
    bcb8:	10928f04 	addi	r2,r2,19004
    bcbc:	94800044 	addi	r18,r18,1
    bcc0:	8c400044 	addi	r17,r17,1
    bcc4:	a8800015 	stw	r2,0(r21)
    bcc8:	00c00044 	movi	r3,1
    bccc:	008001c4 	movi	r2,7
    bcd0:	a8c00115 	stw	r3,4(r21)
    bcd4:	dc800e15 	stw	r18,56(sp)
    bcd8:	dc400d15 	stw	r17,52(sp)
    bcdc:	14430016 	blt	r2,r17,c8e0 <___vfprintf_internal_r+0x1500>
    bce0:	a8c00204 	addi	r3,r21,8
    bce4:	d8800517 	ldw	r2,20(sp)
    bce8:	d9014717 	ldw	r4,1308(sp)
    bcec:	11015c0e 	bge	r2,r4,c260 <___vfprintf_internal_r+0xe80>
    bcf0:	dc400d17 	ldw	r17,52(sp)
    bcf4:	d9814917 	ldw	r6,1316(sp)
    bcf8:	00800044 	movi	r2,1
    bcfc:	94800044 	addi	r18,r18,1
    bd00:	8c400044 	addi	r17,r17,1
    bd04:	18800115 	stw	r2,4(r3)
    bd08:	008001c4 	movi	r2,7
    bd0c:	19800015 	stw	r6,0(r3)
    bd10:	dc800e15 	stw	r18,56(sp)
    bd14:	dc400d15 	stw	r17,52(sp)
    bd18:	14431616 	blt	r2,r17,c974 <___vfprintf_internal_r+0x1594>
    bd1c:	18c00204 	addi	r3,r3,8
    bd20:	d8814717 	ldw	r2,1308(sp)
    bd24:	143fffc4 	addi	r16,r2,-1
    bd28:	043f2b0e 	bge	zero,r16,b9d8 <___vfprintf_internal_r+0x5f8>
    bd2c:	00800404 	movi	r2,16
    bd30:	1402a80e 	bge	r2,r16,c7d4 <___vfprintf_internal_r+0x13f4>
    bd34:	dc400d17 	ldw	r17,52(sp)
    bd38:	1027883a 	mov	r19,r2
    bd3c:	070001f4 	movhi	fp,7
    bd40:	e7128f84 	addi	fp,fp,19006
    bd44:	050001c4 	movi	r20,7
    bd48:	00000306 	br	bd58 <___vfprintf_internal_r+0x978>
    bd4c:	18c00204 	addi	r3,r3,8
    bd50:	843ffc04 	addi	r16,r16,-16
    bd54:	9c02a20e 	bge	r19,r16,c7e0 <___vfprintf_internal_r+0x1400>
    bd58:	94800404 	addi	r18,r18,16
    bd5c:	8c400044 	addi	r17,r17,1
    bd60:	1f000015 	stw	fp,0(r3)
    bd64:	1cc00115 	stw	r19,4(r3)
    bd68:	dc800e15 	stw	r18,56(sp)
    bd6c:	dc400d15 	stw	r17,52(sp)
    bd70:	a47ff60e 	bge	r20,r17,bd4c <___vfprintf_internal_r+0x96c>
    bd74:	d9014f17 	ldw	r4,1340(sp)
    bd78:	b00b883a 	mov	r5,r22
    bd7c:	d9800c04 	addi	r6,sp,48
    bd80:	000b3880 	call	b388 <__sprint_r>
    bd84:	103f4e1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    bd88:	dc800e17 	ldw	r18,56(sp)
    bd8c:	dc400d17 	ldw	r17,52(sp)
    bd90:	d8c01904 	addi	r3,sp,100
    bd94:	003fee06 	br	bd50 <___vfprintf_internal_r+0x970>
    bd98:	d8802c0b 	ldhu	r2,176(sp)
    bd9c:	00ffffc4 	movi	r3,-1
    bda0:	d8c14b15 	stw	r3,1324(sp)
    bda4:	1080100c 	andi	r2,r2,64
    bda8:	103dcc1e 	bne	r2,zero,b4dc <___vfprintf_internal_r+0xfc>
    bdac:	003dce06 	br	b4e8 <___vfprintf_internal_r+0x108>
    bdb0:	d9014f17 	ldw	r4,1340(sp)
    bdb4:	b00b883a 	mov	r5,r22
    bdb8:	d9800c04 	addi	r6,sp,48
    bdbc:	000b3880 	call	b388 <__sprint_r>
    bdc0:	103f3f1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    bdc4:	dc800e17 	ldw	r18,56(sp)
    bdc8:	003f2e06 	br	ba84 <___vfprintf_internal_r+0x6a4>
    bdcc:	d9414c17 	ldw	r5,1328(sp)
    bdd0:	29400414 	ori	r5,r5,16
    bdd4:	d9414c15 	stw	r5,1328(sp)
    bdd8:	d9814c17 	ldw	r6,1328(sp)
    bddc:	3080080c 	andi	r2,r6,32
    bde0:	10014f1e 	bne	r2,zero,c320 <___vfprintf_internal_r+0xf40>
    bde4:	d8c14c17 	ldw	r3,1328(sp)
    bde8:	1880040c 	andi	r2,r3,16
    bdec:	1002f01e 	bne	r2,zero,c9b0 <___vfprintf_internal_r+0x15d0>
    bdf0:	d9014c17 	ldw	r4,1328(sp)
    bdf4:	2080100c 	andi	r2,r4,64
    bdf8:	1002ed26 	beq	r2,zero,c9b0 <___vfprintf_internal_r+0x15d0>
    bdfc:	3880000f 	ldh	r2,0(r7)
    be00:	39c00104 	addi	r7,r7,4
    be04:	d9c14015 	stw	r7,1280(sp)
    be08:	1023d7fa 	srai	r17,r2,31
    be0c:	1021883a 	mov	r16,r2
    be10:	88037816 	blt	r17,zero,cbf4 <___vfprintf_internal_r+0x1814>
    be14:	01000044 	movi	r4,1
    be18:	98000416 	blt	r19,zero,be2c <___vfprintf_internal_r+0xa4c>
    be1c:	d8c14c17 	ldw	r3,1328(sp)
    be20:	00bfdfc4 	movi	r2,-129
    be24:	1886703a 	and	r3,r3,r2
    be28:	d8c14c15 	stw	r3,1328(sp)
    be2c:	8444b03a 	or	r2,r16,r17
    be30:	10022c1e 	bne	r2,zero,c6e4 <___vfprintf_internal_r+0x1304>
    be34:	98022b1e 	bne	r19,zero,c6e4 <___vfprintf_internal_r+0x1304>
    be38:	20803fcc 	andi	r2,r4,255
    be3c:	1002a126 	beq	r2,zero,c8c4 <___vfprintf_internal_r+0x14e4>
    be40:	d8c01904 	addi	r3,sp,100
    be44:	dd000f04 	addi	r20,sp,60
    be48:	d8c14115 	stw	r3,1284(sp)
    be4c:	d8c14117 	ldw	r3,1284(sp)
    be50:	dcc14515 	stw	r19,1300(sp)
    be54:	a0c5c83a 	sub	r2,r20,r3
    be58:	11c00a04 	addi	r7,r2,40
    be5c:	99c0010e 	bge	r19,r7,be64 <___vfprintf_internal_r+0xa84>
    be60:	d9c14515 	stw	r7,1300(sp)
    be64:	dcc14615 	stw	r19,1304(sp)
    be68:	d8800407 	ldb	r2,16(sp)
    be6c:	103e4c26 	beq	r2,zero,b7a0 <___vfprintf_internal_r+0x3c0>
    be70:	d8814517 	ldw	r2,1300(sp)
    be74:	10800044 	addi	r2,r2,1
    be78:	d8814515 	stw	r2,1300(sp)
    be7c:	003e4806 	br	b7a0 <___vfprintf_internal_r+0x3c0>
    be80:	d9814c17 	ldw	r6,1328(sp)
    be84:	31800414 	ori	r6,r6,16
    be88:	d9814c15 	stw	r6,1328(sp)
    be8c:	d8c14c17 	ldw	r3,1328(sp)
    be90:	1880080c 	andi	r2,r3,32
    be94:	1001271e 	bne	r2,zero,c334 <___vfprintf_internal_r+0xf54>
    be98:	d9414c17 	ldw	r5,1328(sp)
    be9c:	2880040c 	andi	r2,r5,16
    bea0:	1002bc1e 	bne	r2,zero,c994 <___vfprintf_internal_r+0x15b4>
    bea4:	d9814c17 	ldw	r6,1328(sp)
    bea8:	3080100c 	andi	r2,r6,64
    beac:	1002b926 	beq	r2,zero,c994 <___vfprintf_internal_r+0x15b4>
    beb0:	3c00000b 	ldhu	r16,0(r7)
    beb4:	0009883a 	mov	r4,zero
    beb8:	39c00104 	addi	r7,r7,4
    bebc:	0023883a 	mov	r17,zero
    bec0:	d9c14015 	stw	r7,1280(sp)
    bec4:	d8000405 	stb	zero,16(sp)
    bec8:	003fd306 	br	be18 <___vfprintf_internal_r+0xa38>
    becc:	d9014c17 	ldw	r4,1328(sp)
    bed0:	21000414 	ori	r4,r4,16
    bed4:	d9014c15 	stw	r4,1328(sp)
    bed8:	d9414c17 	ldw	r5,1328(sp)
    bedc:	2880080c 	andi	r2,r5,32
    bee0:	1001081e 	bne	r2,zero,c304 <___vfprintf_internal_r+0xf24>
    bee4:	d8c14c17 	ldw	r3,1328(sp)
    bee8:	1880040c 	andi	r2,r3,16
    beec:	1002b61e 	bne	r2,zero,c9c8 <___vfprintf_internal_r+0x15e8>
    bef0:	d9014c17 	ldw	r4,1328(sp)
    bef4:	2080100c 	andi	r2,r4,64
    bef8:	1002b326 	beq	r2,zero,c9c8 <___vfprintf_internal_r+0x15e8>
    befc:	3c00000b 	ldhu	r16,0(r7)
    bf00:	01000044 	movi	r4,1
    bf04:	39c00104 	addi	r7,r7,4
    bf08:	0023883a 	mov	r17,zero
    bf0c:	d9c14015 	stw	r7,1280(sp)
    bf10:	d8000405 	stb	zero,16(sp)
    bf14:	003fc006 	br	be18 <___vfprintf_internal_r+0xa38>
    bf18:	d9014f17 	ldw	r4,1340(sp)
    bf1c:	b00b883a 	mov	r5,r22
    bf20:	d9800c04 	addi	r6,sp,48
    bf24:	000b3880 	call	b388 <__sprint_r>
    bf28:	103ee51e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    bf2c:	dc800e17 	ldw	r18,56(sp)
    bf30:	d8c01904 	addi	r3,sp,100
    bf34:	d9814c17 	ldw	r6,1328(sp)
    bf38:	3080004c 	andi	r2,r6,1
    bf3c:	1005003a 	cmpeq	r2,r2,zero
    bf40:	103ea51e 	bne	r2,zero,b9d8 <___vfprintf_internal_r+0x5f8>
    bf44:	00800044 	movi	r2,1
    bf48:	dc400d17 	ldw	r17,52(sp)
    bf4c:	18800115 	stw	r2,4(r3)
    bf50:	d8814917 	ldw	r2,1316(sp)
    bf54:	94800044 	addi	r18,r18,1
    bf58:	8c400044 	addi	r17,r17,1
    bf5c:	18800015 	stw	r2,0(r3)
    bf60:	008001c4 	movi	r2,7
    bf64:	dc800e15 	stw	r18,56(sp)
    bf68:	dc400d15 	stw	r17,52(sp)
    bf6c:	1442240e 	bge	r2,r17,c800 <___vfprintf_internal_r+0x1420>
    bf70:	d9014f17 	ldw	r4,1340(sp)
    bf74:	b00b883a 	mov	r5,r22
    bf78:	d9800c04 	addi	r6,sp,48
    bf7c:	000b3880 	call	b388 <__sprint_r>
    bf80:	103ecf1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    bf84:	dc800e17 	ldw	r18,56(sp)
    bf88:	d8c01904 	addi	r3,sp,100
    bf8c:	003e9206 	br	b9d8 <___vfprintf_internal_r+0x5f8>
    bf90:	d9014f17 	ldw	r4,1340(sp)
    bf94:	b00b883a 	mov	r5,r22
    bf98:	d9800c04 	addi	r6,sp,48
    bf9c:	000b3880 	call	b388 <__sprint_r>
    bfa0:	103ec026 	beq	r2,zero,baa4 <___vfprintf_internal_r+0x6c4>
    bfa4:	003ec606 	br	bac0 <___vfprintf_internal_r+0x6e0>
    bfa8:	d9014f17 	ldw	r4,1340(sp)
    bfac:	b00b883a 	mov	r5,r22
    bfb0:	d9800c04 	addi	r6,sp,48
    bfb4:	d9c15115 	stw	r7,1348(sp)
    bfb8:	000b3880 	call	b388 <__sprint_r>
    bfbc:	d9c15117 	ldw	r7,1348(sp)
    bfc0:	103ebf1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    bfc4:	dc800e17 	ldw	r18,56(sp)
    bfc8:	dc400d17 	ldw	r17,52(sp)
    bfcc:	dd401904 	addi	r21,sp,100
    bfd0:	003e7406 	br	b9a4 <___vfprintf_internal_r+0x5c4>
    bfd4:	d9014f17 	ldw	r4,1340(sp)
    bfd8:	b00b883a 	mov	r5,r22
    bfdc:	d9800c04 	addi	r6,sp,48
    bfe0:	d9c15115 	stw	r7,1348(sp)
    bfe4:	000b3880 	call	b388 <__sprint_r>
    bfe8:	d9c15117 	ldw	r7,1348(sp)
    bfec:	103eb41e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    bff0:	dd401904 	addi	r21,sp,100
    bff4:	003d6d06 	br	b5ac <___vfprintf_internal_r+0x1cc>
    bff8:	d9014f17 	ldw	r4,1340(sp)
    bffc:	b00b883a 	mov	r5,r22
    c000:	d9800c04 	addi	r6,sp,48
    c004:	d9c15115 	stw	r7,1348(sp)
    c008:	000b3880 	call	b388 <__sprint_r>
    c00c:	d9c15117 	ldw	r7,1348(sp)
    c010:	103eab1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c014:	dc800e17 	ldw	r18,56(sp)
    c018:	dc400d17 	ldw	r17,52(sp)
    c01c:	dd401904 	addi	r21,sp,100
    c020:	003e3406 	br	b8f4 <___vfprintf_internal_r+0x514>
    c024:	d9014f17 	ldw	r4,1340(sp)
    c028:	b00b883a 	mov	r5,r22
    c02c:	d9800c04 	addi	r6,sp,48
    c030:	d9c15115 	stw	r7,1348(sp)
    c034:	000b3880 	call	b388 <__sprint_r>
    c038:	d9c15117 	ldw	r7,1348(sp)
    c03c:	103ea01e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c040:	dc800e17 	ldw	r18,56(sp)
    c044:	dc400d17 	ldw	r17,52(sp)
    c048:	dd401904 	addi	r21,sp,100
    c04c:	003e1c06 	br	b8c0 <___vfprintf_internal_r+0x4e0>
    c050:	d9014f17 	ldw	r4,1340(sp)
    c054:	b00b883a 	mov	r5,r22
    c058:	d9800c04 	addi	r6,sp,48
    c05c:	d9c15115 	stw	r7,1348(sp)
    c060:	000b3880 	call	b388 <__sprint_r>
    c064:	d9c15117 	ldw	r7,1348(sp)
    c068:	103e951e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c06c:	dc800e17 	ldw	r18,56(sp)
    c070:	dc400d17 	ldw	r17,52(sp)
    c074:	dd401904 	addi	r21,sp,100
    c078:	003e0406 	br	b88c <___vfprintf_internal_r+0x4ac>
    c07c:	d9000517 	ldw	r4,20(sp)
    c080:	0102580e 	bge	zero,r4,c9e4 <___vfprintf_internal_r+0x1604>
    c084:	d9814717 	ldw	r6,1308(sp)
    c088:	21807a16 	blt	r4,r6,c274 <___vfprintf_internal_r+0xe94>
    c08c:	d8814117 	ldw	r2,1284(sp)
    c090:	91a5883a 	add	r18,r18,r6
    c094:	8c400044 	addi	r17,r17,1
    c098:	a8800015 	stw	r2,0(r21)
    c09c:	008001c4 	movi	r2,7
    c0a0:	a9800115 	stw	r6,4(r21)
    c0a4:	dc800e15 	stw	r18,56(sp)
    c0a8:	dc400d15 	stw	r17,52(sp)
    c0ac:	1442fc16 	blt	r2,r17,cca0 <___vfprintf_internal_r+0x18c0>
    c0b0:	a8c00204 	addi	r3,r21,8
    c0b4:	d9414717 	ldw	r5,1308(sp)
    c0b8:	2161c83a 	sub	r16,r4,r5
    c0bc:	043f9d0e 	bge	zero,r16,bf34 <___vfprintf_internal_r+0xb54>
    c0c0:	00800404 	movi	r2,16
    c0c4:	1402190e 	bge	r2,r16,c92c <___vfprintf_internal_r+0x154c>
    c0c8:	dc400d17 	ldw	r17,52(sp)
    c0cc:	1027883a 	mov	r19,r2
    c0d0:	070001f4 	movhi	fp,7
    c0d4:	e7128f84 	addi	fp,fp,19006
    c0d8:	050001c4 	movi	r20,7
    c0dc:	00000306 	br	c0ec <___vfprintf_internal_r+0xd0c>
    c0e0:	18c00204 	addi	r3,r3,8
    c0e4:	843ffc04 	addi	r16,r16,-16
    c0e8:	9c02130e 	bge	r19,r16,c938 <___vfprintf_internal_r+0x1558>
    c0ec:	94800404 	addi	r18,r18,16
    c0f0:	8c400044 	addi	r17,r17,1
    c0f4:	1f000015 	stw	fp,0(r3)
    c0f8:	1cc00115 	stw	r19,4(r3)
    c0fc:	dc800e15 	stw	r18,56(sp)
    c100:	dc400d15 	stw	r17,52(sp)
    c104:	a47ff60e 	bge	r20,r17,c0e0 <___vfprintf_internal_r+0xd00>
    c108:	d9014f17 	ldw	r4,1340(sp)
    c10c:	b00b883a 	mov	r5,r22
    c110:	d9800c04 	addi	r6,sp,48
    c114:	000b3880 	call	b388 <__sprint_r>
    c118:	103e691e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c11c:	dc800e17 	ldw	r18,56(sp)
    c120:	dc400d17 	ldw	r17,52(sp)
    c124:	d8c01904 	addi	r3,sp,100
    c128:	003fee06 	br	c0e4 <___vfprintf_internal_r+0xd04>
    c12c:	d8814717 	ldw	r2,1308(sp)
    c130:	143fffc4 	addi	r16,r2,-1
    c134:	043e970e 	bge	zero,r16,bb94 <___vfprintf_internal_r+0x7b4>
    c138:	00800404 	movi	r2,16
    c13c:	1400180e 	bge	r2,r16,c1a0 <___vfprintf_internal_r+0xdc0>
    c140:	1029883a 	mov	r20,r2
    c144:	070001f4 	movhi	fp,7
    c148:	e7128f84 	addi	fp,fp,19006
    c14c:	054001c4 	movi	r21,7
    c150:	00000306 	br	c160 <___vfprintf_internal_r+0xd80>
    c154:	9cc00204 	addi	r19,r19,8
    c158:	843ffc04 	addi	r16,r16,-16
    c15c:	a400120e 	bge	r20,r16,c1a8 <___vfprintf_internal_r+0xdc8>
    c160:	94800404 	addi	r18,r18,16
    c164:	8c400044 	addi	r17,r17,1
    c168:	9f000015 	stw	fp,0(r19)
    c16c:	9d000115 	stw	r20,4(r19)
    c170:	dc800e15 	stw	r18,56(sp)
    c174:	dc400d15 	stw	r17,52(sp)
    c178:	ac7ff60e 	bge	r21,r17,c154 <___vfprintf_internal_r+0xd74>
    c17c:	d9014f17 	ldw	r4,1340(sp)
    c180:	b00b883a 	mov	r5,r22
    c184:	d9800c04 	addi	r6,sp,48
    c188:	000b3880 	call	b388 <__sprint_r>
    c18c:	103e4c1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c190:	dc800e17 	ldw	r18,56(sp)
    c194:	dc400d17 	ldw	r17,52(sp)
    c198:	dcc01904 	addi	r19,sp,100
    c19c:	003fee06 	br	c158 <___vfprintf_internal_r+0xd78>
    c1a0:	070001f4 	movhi	fp,7
    c1a4:	e7128f84 	addi	fp,fp,19006
    c1a8:	9425883a 	add	r18,r18,r16
    c1ac:	8c400044 	addi	r17,r17,1
    c1b0:	008001c4 	movi	r2,7
    c1b4:	9f000015 	stw	fp,0(r19)
    c1b8:	9c000115 	stw	r16,4(r19)
    c1bc:	dc800e15 	stw	r18,56(sp)
    c1c0:	dc400d15 	stw	r17,52(sp)
    c1c4:	147e720e 	bge	r2,r17,bb90 <___vfprintf_internal_r+0x7b0>
    c1c8:	d9014f17 	ldw	r4,1340(sp)
    c1cc:	b00b883a 	mov	r5,r22
    c1d0:	d9800c04 	addi	r6,sp,48
    c1d4:	000b3880 	call	b388 <__sprint_r>
    c1d8:	103e391e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c1dc:	dc800e17 	ldw	r18,56(sp)
    c1e0:	dc400d17 	ldw	r17,52(sp)
    c1e4:	dcc01904 	addi	r19,sp,100
    c1e8:	003e6a06 	br	bb94 <___vfprintf_internal_r+0x7b4>
    c1ec:	d9014f17 	ldw	r4,1340(sp)
    c1f0:	b00b883a 	mov	r5,r22
    c1f4:	d9800c04 	addi	r6,sp,48
    c1f8:	d9c15115 	stw	r7,1348(sp)
    c1fc:	000b3880 	call	b388 <__sprint_r>
    c200:	d9c15117 	ldw	r7,1348(sp)
    c204:	103e2e1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c208:	dc800e17 	ldw	r18,56(sp)
    c20c:	dc400d17 	ldw	r17,52(sp)
    c210:	dd401904 	addi	r21,sp,100
    c214:	003dba06 	br	b900 <___vfprintf_internal_r+0x520>
    c218:	d9014f17 	ldw	r4,1340(sp)
    c21c:	b00b883a 	mov	r5,r22
    c220:	d9800c04 	addi	r6,sp,48
    c224:	000b3880 	call	b388 <__sprint_r>
    c228:	103e251e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c22c:	dc800e17 	ldw	r18,56(sp)
    c230:	dc400d17 	ldw	r17,52(sp)
    c234:	dcc01904 	addi	r19,sp,100
    c238:	003e4206 	br	bb44 <___vfprintf_internal_r+0x764>
    c23c:	d9014f17 	ldw	r4,1340(sp)
    c240:	b00b883a 	mov	r5,r22
    c244:	d9800c04 	addi	r6,sp,48
    c248:	000b3880 	call	b388 <__sprint_r>
    c24c:	103e1c1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c250:	dc800e17 	ldw	r18,56(sp)
    c254:	dc400d17 	ldw	r17,52(sp)
    c258:	d8c01904 	addi	r3,sp,100
    c25c:	003e2e06 	br	bb18 <___vfprintf_internal_r+0x738>
    c260:	d9414c17 	ldw	r5,1328(sp)
    c264:	2880004c 	andi	r2,r5,1
    c268:	1005003a 	cmpeq	r2,r2,zero
    c26c:	103dda1e 	bne	r2,zero,b9d8 <___vfprintf_internal_r+0x5f8>
    c270:	003e9f06 	br	bcf0 <___vfprintf_internal_r+0x910>
    c274:	d8c14117 	ldw	r3,1284(sp)
    c278:	9125883a 	add	r18,r18,r4
    c27c:	8c400044 	addi	r17,r17,1
    c280:	008001c4 	movi	r2,7
    c284:	a8c00015 	stw	r3,0(r21)
    c288:	a9000115 	stw	r4,4(r21)
    c28c:	dc800e15 	stw	r18,56(sp)
    c290:	dc400d15 	stw	r17,52(sp)
    c294:	14426c16 	blt	r2,r17,cc48 <___vfprintf_internal_r+0x1868>
    c298:	a8c00204 	addi	r3,r21,8
    c29c:	d9414917 	ldw	r5,1316(sp)
    c2a0:	00800044 	movi	r2,1
    c2a4:	94800044 	addi	r18,r18,1
    c2a8:	8c400044 	addi	r17,r17,1
    c2ac:	18800115 	stw	r2,4(r3)
    c2b0:	008001c4 	movi	r2,7
    c2b4:	19400015 	stw	r5,0(r3)
    c2b8:	dc800e15 	stw	r18,56(sp)
    c2bc:	dc400d15 	stw	r17,52(sp)
    c2c0:	2021883a 	mov	r16,r4
    c2c4:	14425616 	blt	r2,r17,cc20 <___vfprintf_internal_r+0x1840>
    c2c8:	19400204 	addi	r5,r3,8
    c2cc:	d9814717 	ldw	r6,1308(sp)
    c2d0:	8c400044 	addi	r17,r17,1
    c2d4:	dc400d15 	stw	r17,52(sp)
    c2d8:	3107c83a 	sub	r3,r6,r4
    c2dc:	d9014117 	ldw	r4,1284(sp)
    c2e0:	90e5883a 	add	r18,r18,r3
    c2e4:	28c00115 	stw	r3,4(r5)
    c2e8:	8105883a 	add	r2,r16,r4
    c2ec:	28800015 	stw	r2,0(r5)
    c2f0:	008001c4 	movi	r2,7
    c2f4:	dc800e15 	stw	r18,56(sp)
    c2f8:	147f1d16 	blt	r2,r17,bf70 <___vfprintf_internal_r+0xb90>
    c2fc:	28c00204 	addi	r3,r5,8
    c300:	003db506 	br	b9d8 <___vfprintf_internal_r+0x5f8>
    c304:	3c000017 	ldw	r16,0(r7)
    c308:	3c400117 	ldw	r17,4(r7)
    c30c:	39800204 	addi	r6,r7,8
    c310:	01000044 	movi	r4,1
    c314:	d9814015 	stw	r6,1280(sp)
    c318:	d8000405 	stb	zero,16(sp)
    c31c:	003ebe06 	br	be18 <___vfprintf_internal_r+0xa38>
    c320:	3c000017 	ldw	r16,0(r7)
    c324:	3c400117 	ldw	r17,4(r7)
    c328:	38800204 	addi	r2,r7,8
    c32c:	d8814015 	stw	r2,1280(sp)
    c330:	003eb706 	br	be10 <___vfprintf_internal_r+0xa30>
    c334:	3c000017 	ldw	r16,0(r7)
    c338:	3c400117 	ldw	r17,4(r7)
    c33c:	39000204 	addi	r4,r7,8
    c340:	d9014015 	stw	r4,1280(sp)
    c344:	0009883a 	mov	r4,zero
    c348:	d8000405 	stb	zero,16(sp)
    c34c:	003eb206 	br	be18 <___vfprintf_internal_r+0xa38>
    c350:	38c00017 	ldw	r3,0(r7)
    c354:	39c00104 	addi	r7,r7,4
    c358:	d8c14a15 	stw	r3,1320(sp)
    c35c:	1800d70e 	bge	r3,zero,c6bc <___vfprintf_internal_r+0x12dc>
    c360:	00c7c83a 	sub	r3,zero,r3
    c364:	d8c14a15 	stw	r3,1320(sp)
    c368:	d9014c17 	ldw	r4,1328(sp)
    c36c:	b8c00007 	ldb	r3,0(r23)
    c370:	21000114 	ori	r4,r4,4
    c374:	d9014c15 	stw	r4,1328(sp)
    c378:	003c9806 	br	b5dc <___vfprintf_internal_r+0x1fc>
    c37c:	d9814c17 	ldw	r6,1328(sp)
    c380:	3080080c 	andi	r2,r6,32
    c384:	1001f626 	beq	r2,zero,cb60 <___vfprintf_internal_r+0x1780>
    c388:	d9014b17 	ldw	r4,1324(sp)
    c38c:	38800017 	ldw	r2,0(r7)
    c390:	39c00104 	addi	r7,r7,4
    c394:	d9c14015 	stw	r7,1280(sp)
    c398:	2007d7fa 	srai	r3,r4,31
    c39c:	d9c14017 	ldw	r7,1280(sp)
    c3a0:	11000015 	stw	r4,0(r2)
    c3a4:	10c00115 	stw	r3,4(r2)
    c3a8:	003c6906 	br	b550 <___vfprintf_internal_r+0x170>
    c3ac:	b8c00007 	ldb	r3,0(r23)
    c3b0:	00801b04 	movi	r2,108
    c3b4:	18825526 	beq	r3,r2,cd0c <___vfprintf_internal_r+0x192c>
    c3b8:	d9414c17 	ldw	r5,1328(sp)
    c3bc:	29400414 	ori	r5,r5,16
    c3c0:	d9414c15 	stw	r5,1328(sp)
    c3c4:	003c8506 	br	b5dc <___vfprintf_internal_r+0x1fc>
    c3c8:	d9814c17 	ldw	r6,1328(sp)
    c3cc:	b8c00007 	ldb	r3,0(r23)
    c3d0:	31800814 	ori	r6,r6,32
    c3d4:	d9814c15 	stw	r6,1328(sp)
    c3d8:	003c8006 	br	b5dc <___vfprintf_internal_r+0x1fc>
    c3dc:	d8814c17 	ldw	r2,1328(sp)
    c3e0:	3c000017 	ldw	r16,0(r7)
    c3e4:	00c01e04 	movi	r3,120
    c3e8:	10800094 	ori	r2,r2,2
    c3ec:	d8814c15 	stw	r2,1328(sp)
    c3f0:	39c00104 	addi	r7,r7,4
    c3f4:	014001f4 	movhi	r5,7
    c3f8:	29527804 	addi	r5,r5,18912
    c3fc:	00800c04 	movi	r2,48
    c400:	0023883a 	mov	r17,zero
    c404:	01000084 	movi	r4,2
    c408:	d9c14015 	stw	r7,1280(sp)
    c40c:	d8c14d15 	stw	r3,1332(sp)
    c410:	d9414415 	stw	r5,1296(sp)
    c414:	d8800445 	stb	r2,17(sp)
    c418:	d8c00485 	stb	r3,18(sp)
    c41c:	d8000405 	stb	zero,16(sp)
    c420:	003e7d06 	br	be18 <___vfprintf_internal_r+0xa38>
    c424:	d8814c17 	ldw	r2,1328(sp)
    c428:	b8c00007 	ldb	r3,0(r23)
    c42c:	10801014 	ori	r2,r2,64
    c430:	d8814c15 	stw	r2,1328(sp)
    c434:	003c6906 	br	b5dc <___vfprintf_internal_r+0x1fc>
    c438:	d9414c17 	ldw	r5,1328(sp)
    c43c:	2880020c 	andi	r2,r5,8
    c440:	1001e526 	beq	r2,zero,cbd8 <___vfprintf_internal_r+0x17f8>
    c444:	39800017 	ldw	r6,0(r7)
    c448:	38800204 	addi	r2,r7,8
    c44c:	d8814015 	stw	r2,1280(sp)
    c450:	d9814215 	stw	r6,1288(sp)
    c454:	39c00117 	ldw	r7,4(r7)
    c458:	d9c14315 	stw	r7,1292(sp)
    c45c:	d9014217 	ldw	r4,1288(sp)
    c460:	d9414317 	ldw	r5,1292(sp)
    c464:	00118f80 	call	118f8 <__isinfd>
    c468:	10021d26 	beq	r2,zero,cce0 <___vfprintf_internal_r+0x1900>
    c46c:	d9014217 	ldw	r4,1288(sp)
    c470:	d9414317 	ldw	r5,1292(sp)
    c474:	000d883a 	mov	r6,zero
    c478:	000f883a 	mov	r7,zero
    c47c:	0009cb00 	call	9cb0 <__ltdf2>
    c480:	1002d016 	blt	r2,zero,cfc4 <___vfprintf_internal_r+0x1be4>
    c484:	d9414d17 	ldw	r5,1332(sp)
    c488:	008011c4 	movi	r2,71
    c48c:	11421016 	blt	r2,r5,ccd0 <___vfprintf_internal_r+0x18f0>
    c490:	018001f4 	movhi	r6,7
    c494:	31927d04 	addi	r6,r6,18932
    c498:	d9814115 	stw	r6,1284(sp)
    c49c:	d9014c17 	ldw	r4,1328(sp)
    c4a0:	00c000c4 	movi	r3,3
    c4a4:	00bfdfc4 	movi	r2,-129
    c4a8:	2088703a 	and	r4,r4,r2
    c4ac:	180f883a 	mov	r7,r3
    c4b0:	d8c14515 	stw	r3,1300(sp)
    c4b4:	d9014c15 	stw	r4,1328(sp)
    c4b8:	d8014615 	stw	zero,1304(sp)
    c4bc:	003e6a06 	br	be68 <___vfprintf_internal_r+0xa88>
    c4c0:	38800017 	ldw	r2,0(r7)
    c4c4:	00c00044 	movi	r3,1
    c4c8:	39c00104 	addi	r7,r7,4
    c4cc:	d9c14015 	stw	r7,1280(sp)
    c4d0:	d9000f04 	addi	r4,sp,60
    c4d4:	180f883a 	mov	r7,r3
    c4d8:	d8c14515 	stw	r3,1300(sp)
    c4dc:	d9014115 	stw	r4,1284(sp)
    c4e0:	d8800f05 	stb	r2,60(sp)
    c4e4:	d8000405 	stb	zero,16(sp)
    c4e8:	003cac06 	br	b79c <___vfprintf_internal_r+0x3bc>
    c4ec:	014001f4 	movhi	r5,7
    c4f0:	29528304 	addi	r5,r5,18956
    c4f4:	d9414415 	stw	r5,1296(sp)
    c4f8:	d9814c17 	ldw	r6,1328(sp)
    c4fc:	3080080c 	andi	r2,r6,32
    c500:	1000ff26 	beq	r2,zero,c900 <___vfprintf_internal_r+0x1520>
    c504:	3c000017 	ldw	r16,0(r7)
    c508:	3c400117 	ldw	r17,4(r7)
    c50c:	38800204 	addi	r2,r7,8
    c510:	d8814015 	stw	r2,1280(sp)
    c514:	d9414c17 	ldw	r5,1328(sp)
    c518:	2880004c 	andi	r2,r5,1
    c51c:	1005003a 	cmpeq	r2,r2,zero
    c520:	1000b91e 	bne	r2,zero,c808 <___vfprintf_internal_r+0x1428>
    c524:	8444b03a 	or	r2,r16,r17
    c528:	1000b726 	beq	r2,zero,c808 <___vfprintf_internal_r+0x1428>
    c52c:	d9814d17 	ldw	r6,1332(sp)
    c530:	29400094 	ori	r5,r5,2
    c534:	00800c04 	movi	r2,48
    c538:	01000084 	movi	r4,2
    c53c:	d9414c15 	stw	r5,1328(sp)
    c540:	d8800445 	stb	r2,17(sp)
    c544:	d9800485 	stb	r6,18(sp)
    c548:	d8000405 	stb	zero,16(sp)
    c54c:	003e3206 	br	be18 <___vfprintf_internal_r+0xa38>
    c550:	018001f4 	movhi	r6,7
    c554:	31927804 	addi	r6,r6,18912
    c558:	d9814415 	stw	r6,1296(sp)
    c55c:	003fe606 	br	c4f8 <___vfprintf_internal_r+0x1118>
    c560:	00800ac4 	movi	r2,43
    c564:	d8800405 	stb	r2,16(sp)
    c568:	b8c00007 	ldb	r3,0(r23)
    c56c:	003c1b06 	br	b5dc <___vfprintf_internal_r+0x1fc>
    c570:	d8814c17 	ldw	r2,1328(sp)
    c574:	b8c00007 	ldb	r3,0(r23)
    c578:	10800054 	ori	r2,r2,1
    c57c:	d8814c15 	stw	r2,1328(sp)
    c580:	003c1606 	br	b5dc <___vfprintf_internal_r+0x1fc>
    c584:	d8800407 	ldb	r2,16(sp)
    c588:	10004c1e 	bne	r2,zero,c6bc <___vfprintf_internal_r+0x12dc>
    c58c:	00800804 	movi	r2,32
    c590:	d8800405 	stb	r2,16(sp)
    c594:	b8c00007 	ldb	r3,0(r23)
    c598:	003c1006 	br	b5dc <___vfprintf_internal_r+0x1fc>
    c59c:	d9814c17 	ldw	r6,1328(sp)
    c5a0:	b8c00007 	ldb	r3,0(r23)
    c5a4:	31800214 	ori	r6,r6,8
    c5a8:	d9814c15 	stw	r6,1328(sp)
    c5ac:	003c0b06 	br	b5dc <___vfprintf_internal_r+0x1fc>
    c5b0:	0009883a 	mov	r4,zero
    c5b4:	04000244 	movi	r16,9
    c5b8:	01400284 	movi	r5,10
    c5bc:	d9c15115 	stw	r7,1348(sp)
    c5c0:	000a0540 	call	a054 <__mulsi3>
    c5c4:	b9000007 	ldb	r4,0(r23)
    c5c8:	d8c14d17 	ldw	r3,1332(sp)
    c5cc:	bdc00044 	addi	r23,r23,1
    c5d0:	d9014d15 	stw	r4,1332(sp)
    c5d4:	d9414d17 	ldw	r5,1332(sp)
    c5d8:	1885883a 	add	r2,r3,r2
    c5dc:	113ff404 	addi	r4,r2,-48
    c5e0:	28bff404 	addi	r2,r5,-48
    c5e4:	d9c15117 	ldw	r7,1348(sp)
    c5e8:	80bff32e 	bgeu	r16,r2,c5b8 <___vfprintf_internal_r+0x11d8>
    c5ec:	d9014a15 	stw	r4,1320(sp)
    c5f0:	003bfc06 	br	b5e4 <___vfprintf_internal_r+0x204>
    c5f4:	d8814c17 	ldw	r2,1328(sp)
    c5f8:	b8c00007 	ldb	r3,0(r23)
    c5fc:	10802014 	ori	r2,r2,128
    c600:	d8814c15 	stw	r2,1328(sp)
    c604:	003bf506 	br	b5dc <___vfprintf_internal_r+0x1fc>
    c608:	b8c00007 	ldb	r3,0(r23)
    c60c:	00800a84 	movi	r2,42
    c610:	bdc00044 	addi	r23,r23,1
    c614:	18831826 	beq	r3,r2,d278 <___vfprintf_internal_r+0x1e98>
    c618:	d8c14d15 	stw	r3,1332(sp)
    c61c:	18bff404 	addi	r2,r3,-48
    c620:	00c00244 	movi	r3,9
    c624:	18827b36 	bltu	r3,r2,d014 <___vfprintf_internal_r+0x1c34>
    c628:	1821883a 	mov	r16,r3
    c62c:	0009883a 	mov	r4,zero
    c630:	01400284 	movi	r5,10
    c634:	d9c15115 	stw	r7,1348(sp)
    c638:	000a0540 	call	a054 <__mulsi3>
    c63c:	d9414d17 	ldw	r5,1332(sp)
    c640:	b9800007 	ldb	r6,0(r23)
    c644:	d9c15117 	ldw	r7,1348(sp)
    c648:	1145883a 	add	r2,r2,r5
    c64c:	113ff404 	addi	r4,r2,-48
    c650:	30bff404 	addi	r2,r6,-48
    c654:	d9814d15 	stw	r6,1332(sp)
    c658:	bdc00044 	addi	r23,r23,1
    c65c:	80bff42e 	bgeu	r16,r2,c630 <___vfprintf_internal_r+0x1250>
    c660:	2027883a 	mov	r19,r4
    c664:	203bdf0e 	bge	r4,zero,b5e4 <___vfprintf_internal_r+0x204>
    c668:	04ffffc4 	movi	r19,-1
    c66c:	003bdd06 	br	b5e4 <___vfprintf_internal_r+0x204>
    c670:	d8000405 	stb	zero,16(sp)
    c674:	39800017 	ldw	r6,0(r7)
    c678:	39c00104 	addi	r7,r7,4
    c67c:	d9c14015 	stw	r7,1280(sp)
    c680:	d9814115 	stw	r6,1284(sp)
    c684:	3001c926 	beq	r6,zero,cdac <___vfprintf_internal_r+0x19cc>
    c688:	98000e16 	blt	r19,zero,c6c4 <___vfprintf_internal_r+0x12e4>
    c68c:	d9014117 	ldw	r4,1284(sp)
    c690:	000b883a 	mov	r5,zero
    c694:	980d883a 	mov	r6,r19
    c698:	000fec80 	call	fec8 <memchr>
    c69c:	10025926 	beq	r2,zero,d004 <___vfprintf_internal_r+0x1c24>
    c6a0:	d8c14117 	ldw	r3,1284(sp)
    c6a4:	10cfc83a 	sub	r7,r2,r3
    c6a8:	99c19e16 	blt	r19,r7,cd24 <___vfprintf_internal_r+0x1944>
    c6ac:	d9c14515 	stw	r7,1300(sp)
    c6b0:	38000916 	blt	r7,zero,c6d8 <___vfprintf_internal_r+0x12f8>
    c6b4:	d8014615 	stw	zero,1304(sp)
    c6b8:	003deb06 	br	be68 <___vfprintf_internal_r+0xa88>
    c6bc:	b8c00007 	ldb	r3,0(r23)
    c6c0:	003bc606 	br	b5dc <___vfprintf_internal_r+0x1fc>
    c6c4:	d9014117 	ldw	r4,1284(sp)
    c6c8:	000b3140 	call	b314 <strlen>
    c6cc:	d8814515 	stw	r2,1300(sp)
    c6d0:	100f883a 	mov	r7,r2
    c6d4:	103ff70e 	bge	r2,zero,c6b4 <___vfprintf_internal_r+0x12d4>
    c6d8:	d8014515 	stw	zero,1300(sp)
    c6dc:	d8014615 	stw	zero,1304(sp)
    c6e0:	003de106 	br	be68 <___vfprintf_internal_r+0xa88>
    c6e4:	20c03fcc 	andi	r3,r4,255
    c6e8:	00800044 	movi	r2,1
    c6ec:	18802d26 	beq	r3,r2,c7a4 <___vfprintf_internal_r+0x13c4>
    c6f0:	18800e36 	bltu	r3,r2,c72c <___vfprintf_internal_r+0x134c>
    c6f4:	00800084 	movi	r2,2
    c6f8:	1880fa26 	beq	r3,r2,cae4 <___vfprintf_internal_r+0x1704>
    c6fc:	010001f4 	movhi	r4,7
    c700:	21128804 	addi	r4,r4,18976
    c704:	000b3140 	call	b314 <strlen>
    c708:	100f883a 	mov	r7,r2
    c70c:	dcc14515 	stw	r19,1300(sp)
    c710:	9880010e 	bge	r19,r2,c718 <___vfprintf_internal_r+0x1338>
    c714:	d8814515 	stw	r2,1300(sp)
    c718:	008001f4 	movhi	r2,7
    c71c:	10928804 	addi	r2,r2,18976
    c720:	dcc14615 	stw	r19,1304(sp)
    c724:	d8814115 	stw	r2,1284(sp)
    c728:	003dcf06 	br	be68 <___vfprintf_internal_r+0xa88>
    c72c:	d9401904 	addi	r5,sp,100
    c730:	dd000f04 	addi	r20,sp,60
    c734:	d9414115 	stw	r5,1284(sp)
    c738:	880a977a 	slli	r5,r17,29
    c73c:	d9814117 	ldw	r6,1284(sp)
    c740:	8004d0fa 	srli	r2,r16,3
    c744:	8806d0fa 	srli	r3,r17,3
    c748:	810001cc 	andi	r4,r16,7
    c74c:	2884b03a 	or	r2,r5,r2
    c750:	31bfffc4 	addi	r6,r6,-1
    c754:	21000c04 	addi	r4,r4,48
    c758:	d9814115 	stw	r6,1284(sp)
    c75c:	10cab03a 	or	r5,r2,r3
    c760:	31000005 	stb	r4,0(r6)
    c764:	1021883a 	mov	r16,r2
    c768:	1823883a 	mov	r17,r3
    c76c:	283ff21e 	bne	r5,zero,c738 <___vfprintf_internal_r+0x1358>
    c770:	d8c14c17 	ldw	r3,1328(sp)
    c774:	1880004c 	andi	r2,r3,1
    c778:	1005003a 	cmpeq	r2,r2,zero
    c77c:	103db31e 	bne	r2,zero,be4c <___vfprintf_internal_r+0xa6c>
    c780:	20803fcc 	andi	r2,r4,255
    c784:	1080201c 	xori	r2,r2,128
    c788:	10bfe004 	addi	r2,r2,-128
    c78c:	00c00c04 	movi	r3,48
    c790:	10fdae26 	beq	r2,r3,be4c <___vfprintf_internal_r+0xa6c>
    c794:	31bfffc4 	addi	r6,r6,-1
    c798:	d9814115 	stw	r6,1284(sp)
    c79c:	30c00005 	stb	r3,0(r6)
    c7a0:	003daa06 	br	be4c <___vfprintf_internal_r+0xa6c>
    c7a4:	88800068 	cmpgeui	r2,r17,1
    c7a8:	10002c1e 	bne	r2,zero,c85c <___vfprintf_internal_r+0x147c>
    c7ac:	8800021e 	bne	r17,zero,c7b8 <___vfprintf_internal_r+0x13d8>
    c7b0:	00800244 	movi	r2,9
    c7b4:	14002936 	bltu	r2,r16,c85c <___vfprintf_internal_r+0x147c>
    c7b8:	d90018c4 	addi	r4,sp,99
    c7bc:	dd000f04 	addi	r20,sp,60
    c7c0:	d9014115 	stw	r4,1284(sp)
    c7c4:	d9014117 	ldw	r4,1284(sp)
    c7c8:	80800c04 	addi	r2,r16,48
    c7cc:	20800005 	stb	r2,0(r4)
    c7d0:	003d9e06 	br	be4c <___vfprintf_internal_r+0xa6c>
    c7d4:	dc400d17 	ldw	r17,52(sp)
    c7d8:	070001f4 	movhi	fp,7
    c7dc:	e7128f84 	addi	fp,fp,19006
    c7e0:	9425883a 	add	r18,r18,r16
    c7e4:	8c400044 	addi	r17,r17,1
    c7e8:	008001c4 	movi	r2,7
    c7ec:	1f000015 	stw	fp,0(r3)
    c7f0:	1c000115 	stw	r16,4(r3)
    c7f4:	dc800e15 	stw	r18,56(sp)
    c7f8:	dc400d15 	stw	r17,52(sp)
    c7fc:	147ddc16 	blt	r2,r17,bf70 <___vfprintf_internal_r+0xb90>
    c800:	18c00204 	addi	r3,r3,8
    c804:	003c7406 	br	b9d8 <___vfprintf_internal_r+0x5f8>
    c808:	01000084 	movi	r4,2
    c80c:	d8000405 	stb	zero,16(sp)
    c810:	003d8106 	br	be18 <___vfprintf_internal_r+0xa38>
    c814:	d9814c17 	ldw	r6,1328(sp)
    c818:	30c4703a 	and	r2,r6,r3
    c81c:	1005003a 	cmpeq	r2,r2,zero
    c820:	103cb326 	beq	r2,zero,baf0 <___vfprintf_internal_r+0x710>
    c824:	d9014117 	ldw	r4,1284(sp)
    c828:	94800044 	addi	r18,r18,1
    c82c:	8c400044 	addi	r17,r17,1
    c830:	008001c4 	movi	r2,7
    c834:	a9000015 	stw	r4,0(r21)
    c838:	a8c00115 	stw	r3,4(r21)
    c83c:	dc800e15 	stw	r18,56(sp)
    c840:	dc400d15 	stw	r17,52(sp)
    c844:	147e6016 	blt	r2,r17,c1c8 <___vfprintf_internal_r+0xde8>
    c848:	acc00204 	addi	r19,r21,8
    c84c:	003cd106 	br	bb94 <___vfprintf_internal_r+0x7b4>
    c850:	070001f4 	movhi	fp,7
    c854:	e7128f84 	addi	fp,fp,19006
    c858:	003c4906 	br	b980 <___vfprintf_internal_r+0x5a0>
    c85c:	dd000f04 	addi	r20,sp,60
    c860:	dc801904 	addi	r18,sp,100
    c864:	8009883a 	mov	r4,r16
    c868:	880b883a 	mov	r5,r17
    c86c:	01800284 	movi	r6,10
    c870:	000f883a 	mov	r7,zero
    c874:	00127a00 	call	127a0 <__umoddi3>
    c878:	12000c04 	addi	r8,r2,48
    c87c:	94bfffc4 	addi	r18,r18,-1
    c880:	8009883a 	mov	r4,r16
    c884:	880b883a 	mov	r5,r17
    c888:	01800284 	movi	r6,10
    c88c:	000f883a 	mov	r7,zero
    c890:	92000005 	stb	r8,0(r18)
    c894:	00121340 	call	12134 <__udivdi3>
    c898:	1009883a 	mov	r4,r2
    c89c:	1021883a 	mov	r16,r2
    c8a0:	18800068 	cmpgeui	r2,r3,1
    c8a4:	1823883a 	mov	r17,r3
    c8a8:	103fee1e 	bne	r2,zero,c864 <___vfprintf_internal_r+0x1484>
    c8ac:	1800021e 	bne	r3,zero,c8b8 <___vfprintf_internal_r+0x14d8>
    c8b0:	00800244 	movi	r2,9
    c8b4:	113feb36 	bltu	r2,r4,c864 <___vfprintf_internal_r+0x1484>
    c8b8:	94bfffc4 	addi	r18,r18,-1
    c8bc:	dc814115 	stw	r18,1284(sp)
    c8c0:	003fc006 	br	c7c4 <___vfprintf_internal_r+0x13e4>
    c8c4:	d9014c17 	ldw	r4,1328(sp)
    c8c8:	2080004c 	andi	r2,r4,1
    c8cc:	10009a1e 	bne	r2,zero,cb38 <___vfprintf_internal_r+0x1758>
    c8d0:	d9401904 	addi	r5,sp,100
    c8d4:	dd000f04 	addi	r20,sp,60
    c8d8:	d9414115 	stw	r5,1284(sp)
    c8dc:	003d5b06 	br	be4c <___vfprintf_internal_r+0xa6c>
    c8e0:	d9014f17 	ldw	r4,1340(sp)
    c8e4:	b00b883a 	mov	r5,r22
    c8e8:	d9800c04 	addi	r6,sp,48
    c8ec:	000b3880 	call	b388 <__sprint_r>
    c8f0:	103c731e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c8f4:	dc800e17 	ldw	r18,56(sp)
    c8f8:	d8c01904 	addi	r3,sp,100
    c8fc:	003cf906 	br	bce4 <___vfprintf_internal_r+0x904>
    c900:	d8c14c17 	ldw	r3,1328(sp)
    c904:	1880040c 	andi	r2,r3,16
    c908:	1000711e 	bne	r2,zero,cad0 <___vfprintf_internal_r+0x16f0>
    c90c:	d9014c17 	ldw	r4,1328(sp)
    c910:	2080100c 	andi	r2,r4,64
    c914:	10006e26 	beq	r2,zero,cad0 <___vfprintf_internal_r+0x16f0>
    c918:	3c00000b 	ldhu	r16,0(r7)
    c91c:	0023883a 	mov	r17,zero
    c920:	39c00104 	addi	r7,r7,4
    c924:	d9c14015 	stw	r7,1280(sp)
    c928:	003efa06 	br	c514 <___vfprintf_internal_r+0x1134>
    c92c:	dc400d17 	ldw	r17,52(sp)
    c930:	070001f4 	movhi	fp,7
    c934:	e7128f84 	addi	fp,fp,19006
    c938:	9425883a 	add	r18,r18,r16
    c93c:	8c400044 	addi	r17,r17,1
    c940:	008001c4 	movi	r2,7
    c944:	1f000015 	stw	fp,0(r3)
    c948:	1c000115 	stw	r16,4(r3)
    c94c:	dc800e15 	stw	r18,56(sp)
    c950:	dc400d15 	stw	r17,52(sp)
    c954:	147d7016 	blt	r2,r17,bf18 <___vfprintf_internal_r+0xb38>
    c958:	18c00204 	addi	r3,r3,8
    c95c:	003d7506 	br	bf34 <___vfprintf_internal_r+0xb54>
    c960:	dc800e17 	ldw	r18,56(sp)
    c964:	dc400d17 	ldw	r17,52(sp)
    c968:	070001f4 	movhi	fp,7
    c96c:	e7129384 	addi	fp,fp,19022
    c970:	003bba06 	br	b85c <___vfprintf_internal_r+0x47c>
    c974:	d9014f17 	ldw	r4,1340(sp)
    c978:	b00b883a 	mov	r5,r22
    c97c:	d9800c04 	addi	r6,sp,48
    c980:	000b3880 	call	b388 <__sprint_r>
    c984:	103c4e1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    c988:	dc800e17 	ldw	r18,56(sp)
    c98c:	d8c01904 	addi	r3,sp,100
    c990:	003ce306 	br	bd20 <___vfprintf_internal_r+0x940>
    c994:	3c000017 	ldw	r16,0(r7)
    c998:	0009883a 	mov	r4,zero
    c99c:	39c00104 	addi	r7,r7,4
    c9a0:	0023883a 	mov	r17,zero
    c9a4:	d9c14015 	stw	r7,1280(sp)
    c9a8:	d8000405 	stb	zero,16(sp)
    c9ac:	003d1a06 	br	be18 <___vfprintf_internal_r+0xa38>
    c9b0:	38800017 	ldw	r2,0(r7)
    c9b4:	39c00104 	addi	r7,r7,4
    c9b8:	d9c14015 	stw	r7,1280(sp)
    c9bc:	1023d7fa 	srai	r17,r2,31
    c9c0:	1021883a 	mov	r16,r2
    c9c4:	003d1206 	br	be10 <___vfprintf_internal_r+0xa30>
    c9c8:	3c000017 	ldw	r16,0(r7)
    c9cc:	01000044 	movi	r4,1
    c9d0:	39c00104 	addi	r7,r7,4
    c9d4:	0023883a 	mov	r17,zero
    c9d8:	d9c14015 	stw	r7,1280(sp)
    c9dc:	d8000405 	stb	zero,16(sp)
    c9e0:	003d0d06 	br	be18 <___vfprintf_internal_r+0xa38>
    c9e4:	008001f4 	movhi	r2,7
    c9e8:	10928f04 	addi	r2,r2,19004
    c9ec:	94800044 	addi	r18,r18,1
    c9f0:	8c400044 	addi	r17,r17,1
    c9f4:	a8800015 	stw	r2,0(r21)
    c9f8:	00c00044 	movi	r3,1
    c9fc:	008001c4 	movi	r2,7
    ca00:	a8c00115 	stw	r3,4(r21)
    ca04:	dc800e15 	stw	r18,56(sp)
    ca08:	dc400d15 	stw	r17,52(sp)
    ca0c:	1440ca16 	blt	r2,r17,cd38 <___vfprintf_internal_r+0x1958>
    ca10:	a8c00204 	addi	r3,r21,8
    ca14:	2000061e 	bne	r4,zero,ca30 <___vfprintf_internal_r+0x1650>
    ca18:	d9414717 	ldw	r5,1308(sp)
    ca1c:	2800041e 	bne	r5,zero,ca30 <___vfprintf_internal_r+0x1650>
    ca20:	d9814c17 	ldw	r6,1328(sp)
    ca24:	3080004c 	andi	r2,r6,1
    ca28:	1005003a 	cmpeq	r2,r2,zero
    ca2c:	103bea1e 	bne	r2,zero,b9d8 <___vfprintf_internal_r+0x5f8>
    ca30:	00800044 	movi	r2,1
    ca34:	dc400d17 	ldw	r17,52(sp)
    ca38:	18800115 	stw	r2,4(r3)
    ca3c:	d8814917 	ldw	r2,1316(sp)
    ca40:	94800044 	addi	r18,r18,1
    ca44:	8c400044 	addi	r17,r17,1
    ca48:	18800015 	stw	r2,0(r3)
    ca4c:	008001c4 	movi	r2,7
    ca50:	dc800e15 	stw	r18,56(sp)
    ca54:	dc400d15 	stw	r17,52(sp)
    ca58:	1440ca16 	blt	r2,r17,cd84 <___vfprintf_internal_r+0x19a4>
    ca5c:	18c00204 	addi	r3,r3,8
    ca60:	0121c83a 	sub	r16,zero,r4
    ca64:	0400500e 	bge	zero,r16,cba8 <___vfprintf_internal_r+0x17c8>
    ca68:	00800404 	movi	r2,16
    ca6c:	1400800e 	bge	r2,r16,cc70 <___vfprintf_internal_r+0x1890>
    ca70:	1027883a 	mov	r19,r2
    ca74:	070001f4 	movhi	fp,7
    ca78:	e7128f84 	addi	fp,fp,19006
    ca7c:	050001c4 	movi	r20,7
    ca80:	00000306 	br	ca90 <___vfprintf_internal_r+0x16b0>
    ca84:	18c00204 	addi	r3,r3,8
    ca88:	843ffc04 	addi	r16,r16,-16
    ca8c:	9c007a0e 	bge	r19,r16,cc78 <___vfprintf_internal_r+0x1898>
    ca90:	94800404 	addi	r18,r18,16
    ca94:	8c400044 	addi	r17,r17,1
    ca98:	1f000015 	stw	fp,0(r3)
    ca9c:	1cc00115 	stw	r19,4(r3)
    caa0:	dc800e15 	stw	r18,56(sp)
    caa4:	dc400d15 	stw	r17,52(sp)
    caa8:	a47ff60e 	bge	r20,r17,ca84 <___vfprintf_internal_r+0x16a4>
    caac:	d9014f17 	ldw	r4,1340(sp)
    cab0:	b00b883a 	mov	r5,r22
    cab4:	d9800c04 	addi	r6,sp,48
    cab8:	000b3880 	call	b388 <__sprint_r>
    cabc:	103c001e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    cac0:	dc800e17 	ldw	r18,56(sp)
    cac4:	dc400d17 	ldw	r17,52(sp)
    cac8:	d8c01904 	addi	r3,sp,100
    cacc:	003fee06 	br	ca88 <___vfprintf_internal_r+0x16a8>
    cad0:	3c000017 	ldw	r16,0(r7)
    cad4:	0023883a 	mov	r17,zero
    cad8:	39c00104 	addi	r7,r7,4
    cadc:	d9c14015 	stw	r7,1280(sp)
    cae0:	003e8c06 	br	c514 <___vfprintf_internal_r+0x1134>
    cae4:	d9401904 	addi	r5,sp,100
    cae8:	dd000f04 	addi	r20,sp,60
    caec:	d9414115 	stw	r5,1284(sp)
    caf0:	d9814417 	ldw	r6,1296(sp)
    caf4:	880a973a 	slli	r5,r17,28
    caf8:	8004d13a 	srli	r2,r16,4
    cafc:	810003cc 	andi	r4,r16,15
    cb00:	3109883a 	add	r4,r6,r4
    cb04:	2884b03a 	or	r2,r5,r2
    cb08:	21400003 	ldbu	r5,0(r4)
    cb0c:	d9014117 	ldw	r4,1284(sp)
    cb10:	8806d13a 	srli	r3,r17,4
    cb14:	1021883a 	mov	r16,r2
    cb18:	213fffc4 	addi	r4,r4,-1
    cb1c:	d9014115 	stw	r4,1284(sp)
    cb20:	d9814117 	ldw	r6,1284(sp)
    cb24:	10c8b03a 	or	r4,r2,r3
    cb28:	1823883a 	mov	r17,r3
    cb2c:	31400005 	stb	r5,0(r6)
    cb30:	203fef1e 	bne	r4,zero,caf0 <___vfprintf_internal_r+0x1710>
    cb34:	003cc506 	br	be4c <___vfprintf_internal_r+0xa6c>
    cb38:	00800c04 	movi	r2,48
    cb3c:	d98018c4 	addi	r6,sp,99
    cb40:	dd000f04 	addi	r20,sp,60
    cb44:	d88018c5 	stb	r2,99(sp)
    cb48:	d9814115 	stw	r6,1284(sp)
    cb4c:	003cbf06 	br	be4c <___vfprintf_internal_r+0xa6c>
    cb50:	dc400d17 	ldw	r17,52(sp)
    cb54:	070001f4 	movhi	fp,7
    cb58:	e7129384 	addi	fp,fp,19022
    cb5c:	003bc106 	br	ba64 <___vfprintf_internal_r+0x684>
    cb60:	d9414c17 	ldw	r5,1328(sp)
    cb64:	2880040c 	andi	r2,r5,16
    cb68:	10007c26 	beq	r2,zero,cd5c <___vfprintf_internal_r+0x197c>
    cb6c:	38800017 	ldw	r2,0(r7)
    cb70:	39c00104 	addi	r7,r7,4
    cb74:	d9c14015 	stw	r7,1280(sp)
    cb78:	d9814b17 	ldw	r6,1324(sp)
    cb7c:	d9c14017 	ldw	r7,1280(sp)
    cb80:	11800015 	stw	r6,0(r2)
    cb84:	003a7206 	br	b550 <___vfprintf_internal_r+0x170>
    cb88:	d9014f17 	ldw	r4,1340(sp)
    cb8c:	b00b883a 	mov	r5,r22
    cb90:	d9800c04 	addi	r6,sp,48
    cb94:	000b3880 	call	b388 <__sprint_r>
    cb98:	103bc91e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    cb9c:	dc800e17 	ldw	r18,56(sp)
    cba0:	dc400d17 	ldw	r17,52(sp)
    cba4:	d8c01904 	addi	r3,sp,100
    cba8:	d9014717 	ldw	r4,1308(sp)
    cbac:	d9414117 	ldw	r5,1284(sp)
    cbb0:	8c400044 	addi	r17,r17,1
    cbb4:	9125883a 	add	r18,r18,r4
    cbb8:	008001c4 	movi	r2,7
    cbbc:	19400015 	stw	r5,0(r3)
    cbc0:	19000115 	stw	r4,4(r3)
    cbc4:	dc800e15 	stw	r18,56(sp)
    cbc8:	dc400d15 	stw	r17,52(sp)
    cbcc:	147ce816 	blt	r2,r17,bf70 <___vfprintf_internal_r+0xb90>
    cbd0:	18c00204 	addi	r3,r3,8
    cbd4:	003b8006 	br	b9d8 <___vfprintf_internal_r+0x5f8>
    cbd8:	38c00017 	ldw	r3,0(r7)
    cbdc:	39000204 	addi	r4,r7,8
    cbe0:	d9014015 	stw	r4,1280(sp)
    cbe4:	d8c14215 	stw	r3,1288(sp)
    cbe8:	39c00117 	ldw	r7,4(r7)
    cbec:	d9c14315 	stw	r7,1292(sp)
    cbf0:	003e1a06 	br	c45c <___vfprintf_internal_r+0x107c>
    cbf4:	0005883a 	mov	r2,zero
    cbf8:	1409c83a 	sub	r4,r2,r16
    cbfc:	1105803a 	cmpltu	r2,r2,r4
    cc00:	044bc83a 	sub	r5,zero,r17
    cc04:	2885c83a 	sub	r2,r5,r2
    cc08:	2021883a 	mov	r16,r4
    cc0c:	1023883a 	mov	r17,r2
    cc10:	01000044 	movi	r4,1
    cc14:	00800b44 	movi	r2,45
    cc18:	d8800405 	stb	r2,16(sp)
    cc1c:	003c7e06 	br	be18 <___vfprintf_internal_r+0xa38>
    cc20:	d9014f17 	ldw	r4,1340(sp)
    cc24:	b00b883a 	mov	r5,r22
    cc28:	d9800c04 	addi	r6,sp,48
    cc2c:	000b3880 	call	b388 <__sprint_r>
    cc30:	103ba31e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    cc34:	dc800e17 	ldw	r18,56(sp)
    cc38:	dc400d17 	ldw	r17,52(sp)
    cc3c:	d9000517 	ldw	r4,20(sp)
    cc40:	d9401904 	addi	r5,sp,100
    cc44:	003da106 	br	c2cc <___vfprintf_internal_r+0xeec>
    cc48:	d9014f17 	ldw	r4,1340(sp)
    cc4c:	b00b883a 	mov	r5,r22
    cc50:	d9800c04 	addi	r6,sp,48
    cc54:	000b3880 	call	b388 <__sprint_r>
    cc58:	103b991e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    cc5c:	dc800e17 	ldw	r18,56(sp)
    cc60:	dc400d17 	ldw	r17,52(sp)
    cc64:	d9000517 	ldw	r4,20(sp)
    cc68:	d8c01904 	addi	r3,sp,100
    cc6c:	003d8b06 	br	c29c <___vfprintf_internal_r+0xebc>
    cc70:	070001f4 	movhi	fp,7
    cc74:	e7128f84 	addi	fp,fp,19006
    cc78:	9425883a 	add	r18,r18,r16
    cc7c:	8c400044 	addi	r17,r17,1
    cc80:	008001c4 	movi	r2,7
    cc84:	1f000015 	stw	fp,0(r3)
    cc88:	1c000115 	stw	r16,4(r3)
    cc8c:	dc800e15 	stw	r18,56(sp)
    cc90:	dc400d15 	stw	r17,52(sp)
    cc94:	147fbc16 	blt	r2,r17,cb88 <___vfprintf_internal_r+0x17a8>
    cc98:	18c00204 	addi	r3,r3,8
    cc9c:	003fc206 	br	cba8 <___vfprintf_internal_r+0x17c8>
    cca0:	d9014f17 	ldw	r4,1340(sp)
    cca4:	b00b883a 	mov	r5,r22
    cca8:	d9800c04 	addi	r6,sp,48
    ccac:	000b3880 	call	b388 <__sprint_r>
    ccb0:	103b831e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    ccb4:	dc800e17 	ldw	r18,56(sp)
    ccb8:	d9000517 	ldw	r4,20(sp)
    ccbc:	d8c01904 	addi	r3,sp,100
    ccc0:	003cfc06 	br	c0b4 <___vfprintf_internal_r+0xcd4>
    ccc4:	070001f4 	movhi	fp,7
    ccc8:	e7128f84 	addi	fp,fp,19006
    cccc:	003bde06 	br	bc48 <___vfprintf_internal_r+0x868>
    ccd0:	008001f4 	movhi	r2,7
    ccd4:	10927e04 	addi	r2,r2,18936
    ccd8:	d8814115 	stw	r2,1284(sp)
    ccdc:	003def06 	br	c49c <___vfprintf_internal_r+0x10bc>
    cce0:	d9014217 	ldw	r4,1288(sp)
    cce4:	d9414317 	ldw	r5,1292(sp)
    cce8:	00091580 	call	9158 <__isnand>
    ccec:	10003926 	beq	r2,zero,cdd4 <___vfprintf_internal_r+0x19f4>
    ccf0:	d9414d17 	ldw	r5,1332(sp)
    ccf4:	008011c4 	movi	r2,71
    ccf8:	1140ce16 	blt	r2,r5,d034 <___vfprintf_internal_r+0x1c54>
    ccfc:	018001f4 	movhi	r6,7
    cd00:	31927f04 	addi	r6,r6,18940
    cd04:	d9814115 	stw	r6,1284(sp)
    cd08:	003de406 	br	c49c <___vfprintf_internal_r+0x10bc>
    cd0c:	d9014c17 	ldw	r4,1328(sp)
    cd10:	bdc00044 	addi	r23,r23,1
    cd14:	b8c00007 	ldb	r3,0(r23)
    cd18:	21000814 	ori	r4,r4,32
    cd1c:	d9014c15 	stw	r4,1328(sp)
    cd20:	003a2e06 	br	b5dc <___vfprintf_internal_r+0x1fc>
    cd24:	dcc14515 	stw	r19,1300(sp)
    cd28:	98011016 	blt	r19,zero,d16c <___vfprintf_internal_r+0x1d8c>
    cd2c:	980f883a 	mov	r7,r19
    cd30:	d8014615 	stw	zero,1304(sp)
    cd34:	003c4c06 	br	be68 <___vfprintf_internal_r+0xa88>
    cd38:	d9014f17 	ldw	r4,1340(sp)
    cd3c:	b00b883a 	mov	r5,r22
    cd40:	d9800c04 	addi	r6,sp,48
    cd44:	000b3880 	call	b388 <__sprint_r>
    cd48:	103b5d1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    cd4c:	dc800e17 	ldw	r18,56(sp)
    cd50:	d9000517 	ldw	r4,20(sp)
    cd54:	d8c01904 	addi	r3,sp,100
    cd58:	003f2e06 	br	ca14 <___vfprintf_internal_r+0x1634>
    cd5c:	d8c14c17 	ldw	r3,1328(sp)
    cd60:	1880100c 	andi	r2,r3,64
    cd64:	1000a026 	beq	r2,zero,cfe8 <___vfprintf_internal_r+0x1c08>
    cd68:	38800017 	ldw	r2,0(r7)
    cd6c:	39c00104 	addi	r7,r7,4
    cd70:	d9c14015 	stw	r7,1280(sp)
    cd74:	d9014b17 	ldw	r4,1324(sp)
    cd78:	d9c14017 	ldw	r7,1280(sp)
    cd7c:	1100000d 	sth	r4,0(r2)
    cd80:	0039f306 	br	b550 <___vfprintf_internal_r+0x170>
    cd84:	d9014f17 	ldw	r4,1340(sp)
    cd88:	b00b883a 	mov	r5,r22
    cd8c:	d9800c04 	addi	r6,sp,48
    cd90:	000b3880 	call	b388 <__sprint_r>
    cd94:	103b4a1e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    cd98:	dc800e17 	ldw	r18,56(sp)
    cd9c:	dc400d17 	ldw	r17,52(sp)
    cda0:	d9000517 	ldw	r4,20(sp)
    cda4:	d8c01904 	addi	r3,sp,100
    cda8:	003f2d06 	br	ca60 <___vfprintf_internal_r+0x1680>
    cdac:	00800184 	movi	r2,6
    cdb0:	14c09a36 	bltu	r2,r19,d01c <___vfprintf_internal_r+0x1c3c>
    cdb4:	dcc14515 	stw	r19,1300(sp)
    cdb8:	9800010e 	bge	r19,zero,cdc0 <___vfprintf_internal_r+0x19e0>
    cdbc:	d8014515 	stw	zero,1300(sp)
    cdc0:	008001f4 	movhi	r2,7
    cdc4:	10928104 	addi	r2,r2,18948
    cdc8:	980f883a 	mov	r7,r19
    cdcc:	d8814115 	stw	r2,1284(sp)
    cdd0:	003a7206 	br	b79c <___vfprintf_internal_r+0x3bc>
    cdd4:	00bfffc4 	movi	r2,-1
    cdd8:	9880e226 	beq	r19,r2,d164 <___vfprintf_internal_r+0x1d84>
    cddc:	d9414d17 	ldw	r5,1332(sp)
    cde0:	008019c4 	movi	r2,103
    cde4:	2880dc26 	beq	r5,r2,d158 <___vfprintf_internal_r+0x1d78>
    cde8:	008011c4 	movi	r2,71
    cdec:	2880da26 	beq	r5,r2,d158 <___vfprintf_internal_r+0x1d78>
    cdf0:	d9414c17 	ldw	r5,1328(sp)
    cdf4:	d9014317 	ldw	r4,1292(sp)
    cdf8:	d9814217 	ldw	r6,1288(sp)
    cdfc:	29404014 	ori	r5,r5,256
    ce00:	d9414c15 	stw	r5,1328(sp)
    ce04:	2000cc16 	blt	r4,zero,d138 <___vfprintf_internal_r+0x1d58>
    ce08:	3021883a 	mov	r16,r6
    ce0c:	2023883a 	mov	r17,r4
    ce10:	0039883a 	mov	fp,zero
    ce14:	d9414d17 	ldw	r5,1332(sp)
    ce18:	00801984 	movi	r2,102
    ce1c:	2880b726 	beq	r5,r2,d0fc <___vfprintf_internal_r+0x1d1c>
    ce20:	00801184 	movi	r2,70
    ce24:	2880b526 	beq	r5,r2,d0fc <___vfprintf_internal_r+0x1d1c>
    ce28:	00801944 	movi	r2,101
    ce2c:	2880c826 	beq	r5,r2,d150 <___vfprintf_internal_r+0x1d70>
    ce30:	00801144 	movi	r2,69
    ce34:	2880c626 	beq	r5,r2,d150 <___vfprintf_internal_r+0x1d70>
    ce38:	9829883a 	mov	r20,r19
    ce3c:	d9014f17 	ldw	r4,1340(sp)
    ce40:	d8800504 	addi	r2,sp,20
    ce44:	880d883a 	mov	r6,r17
    ce48:	d8800115 	stw	r2,4(sp)
    ce4c:	d8c00604 	addi	r3,sp,24
    ce50:	d8800704 	addi	r2,sp,28
    ce54:	800b883a 	mov	r5,r16
    ce58:	01c00084 	movi	r7,2
    ce5c:	d8c00215 	stw	r3,8(sp)
    ce60:	d8800315 	stw	r2,12(sp)
    ce64:	dd000015 	stw	r20,0(sp)
    ce68:	000d73c0 	call	d73c <_dtoa_r>
    ce6c:	d9814d17 	ldw	r6,1332(sp)
    ce70:	d8814115 	stw	r2,1284(sp)
    ce74:	008019c4 	movi	r2,103
    ce78:	30809526 	beq	r6,r2,d0d0 <___vfprintf_internal_r+0x1cf0>
    ce7c:	d8c14d17 	ldw	r3,1332(sp)
    ce80:	008011c4 	movi	r2,71
    ce84:	18809226 	beq	r3,r2,d0d0 <___vfprintf_internal_r+0x1cf0>
    ce88:	d9414117 	ldw	r5,1284(sp)
    ce8c:	d9814d17 	ldw	r6,1332(sp)
    ce90:	00801984 	movi	r2,102
    ce94:	2d25883a 	add	r18,r5,r20
    ce98:	30808626 	beq	r6,r2,d0b4 <___vfprintf_internal_r+0x1cd4>
    ce9c:	00801184 	movi	r2,70
    cea0:	30808426 	beq	r6,r2,d0b4 <___vfprintf_internal_r+0x1cd4>
    cea4:	000d883a 	mov	r6,zero
    cea8:	000f883a 	mov	r7,zero
    ceac:	880b883a 	mov	r5,r17
    ceb0:	8009883a 	mov	r4,r16
    ceb4:	0012e000 	call	12e00 <__eqdf2>
    ceb8:	1000751e 	bne	r2,zero,d090 <___vfprintf_internal_r+0x1cb0>
    cebc:	9005883a 	mov	r2,r18
    cec0:	dc800715 	stw	r18,28(sp)
    cec4:	d9014117 	ldw	r4,1284(sp)
    cec8:	d9414d17 	ldw	r5,1332(sp)
    cecc:	00c019c4 	movi	r3,103
    ced0:	1125c83a 	sub	r18,r2,r4
    ced4:	28c06826 	beq	r5,r3,d078 <___vfprintf_internal_r+0x1c98>
    ced8:	008011c4 	movi	r2,71
    cedc:	28806626 	beq	r5,r2,d078 <___vfprintf_internal_r+0x1c98>
    cee0:	d9000517 	ldw	r4,20(sp)
    cee4:	d8c14d17 	ldw	r3,1332(sp)
    cee8:	00801944 	movi	r2,101
    ceec:	10c05516 	blt	r2,r3,d044 <___vfprintf_internal_r+0x1c64>
    cef0:	213fffc4 	addi	r4,r4,-1
    cef4:	d9000515 	stw	r4,20(sp)
    cef8:	d8c00805 	stb	r3,32(sp)
    cefc:	2021883a 	mov	r16,r4
    cf00:	2000c116 	blt	r4,zero,d208 <___vfprintf_internal_r+0x1e28>
    cf04:	00800ac4 	movi	r2,43
    cf08:	d8800845 	stb	r2,33(sp)
    cf0c:	00800244 	movi	r2,9
    cf10:	1400af0e 	bge	r2,r16,d1d0 <___vfprintf_internal_r+0x1df0>
    cf14:	1027883a 	mov	r19,r2
    cf18:	dc400b84 	addi	r17,sp,46
    cf1c:	8009883a 	mov	r4,r16
    cf20:	01400284 	movi	r5,10
    cf24:	0009fe40 	call	9fe4 <__modsi3>
    cf28:	10800c04 	addi	r2,r2,48
    cf2c:	8c7fffc4 	addi	r17,r17,-1
    cf30:	8009883a 	mov	r4,r16
    cf34:	01400284 	movi	r5,10
    cf38:	88800005 	stb	r2,0(r17)
    cf3c:	0009f840 	call	9f84 <__divsi3>
    cf40:	1021883a 	mov	r16,r2
    cf44:	98bff516 	blt	r19,r2,cf1c <___vfprintf_internal_r+0x1b3c>
    cf48:	10c00c04 	addi	r3,r2,48
    cf4c:	d88009c4 	addi	r2,sp,39
    cf50:	108001c4 	addi	r2,r2,7
    cf54:	897fffc4 	addi	r5,r17,-1
    cf58:	88ffffc5 	stb	r3,-1(r17)
    cf5c:	2880a72e 	bgeu	r5,r2,d1fc <___vfprintf_internal_r+0x1e1c>
    cf60:	1009883a 	mov	r4,r2
    cf64:	d9800804 	addi	r6,sp,32
    cf68:	d8c00884 	addi	r3,sp,34
    cf6c:	28800003 	ldbu	r2,0(r5)
    cf70:	29400044 	addi	r5,r5,1
    cf74:	18800005 	stb	r2,0(r3)
    cf78:	18c00044 	addi	r3,r3,1
    cf7c:	293ffb36 	bltu	r5,r4,cf6c <___vfprintf_internal_r+0x1b8c>
    cf80:	1987c83a 	sub	r3,r3,r6
    cf84:	00800044 	movi	r2,1
    cf88:	d8c14815 	stw	r3,1312(sp)
    cf8c:	90cf883a 	add	r7,r18,r3
    cf90:	1480960e 	bge	r2,r18,d1ec <___vfprintf_internal_r+0x1e0c>
    cf94:	39c00044 	addi	r7,r7,1
    cf98:	d9c14515 	stw	r7,1300(sp)
    cf9c:	38003416 	blt	r7,zero,d070 <___vfprintf_internal_r+0x1c90>
    cfa0:	e0803fcc 	andi	r2,fp,255
    cfa4:	1080201c 	xori	r2,r2,128
    cfa8:	10bfe004 	addi	r2,r2,-128
    cfac:	10004e26 	beq	r2,zero,d0e8 <___vfprintf_internal_r+0x1d08>
    cfb0:	00800b44 	movi	r2,45
    cfb4:	dc814715 	stw	r18,1308(sp)
    cfb8:	d8014615 	stw	zero,1304(sp)
    cfbc:	d8800405 	stb	r2,16(sp)
    cfc0:	003bab06 	br	be70 <___vfprintf_internal_r+0xa90>
    cfc4:	00800b44 	movi	r2,45
    cfc8:	d8800405 	stb	r2,16(sp)
    cfcc:	003d2d06 	br	c484 <___vfprintf_internal_r+0x10a4>
    cfd0:	d9014f17 	ldw	r4,1340(sp)
    cfd4:	b00b883a 	mov	r5,r22
    cfd8:	d9800c04 	addi	r6,sp,48
    cfdc:	000b3880 	call	b388 <__sprint_r>
    cfe0:	103ab71e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x6e0>
    cfe4:	003ab506 	br	babc <___vfprintf_internal_r+0x6dc>
    cfe8:	38800017 	ldw	r2,0(r7)
    cfec:	39c00104 	addi	r7,r7,4
    cff0:	d9c14015 	stw	r7,1280(sp)
    cff4:	d9414b17 	ldw	r5,1324(sp)
    cff8:	d9c14017 	ldw	r7,1280(sp)
    cffc:	11400015 	stw	r5,0(r2)
    d000:	00395306 	br	b550 <___vfprintf_internal_r+0x170>
    d004:	980f883a 	mov	r7,r19
    d008:	dcc14515 	stw	r19,1300(sp)
    d00c:	d8014615 	stw	zero,1304(sp)
    d010:	003b9506 	br	be68 <___vfprintf_internal_r+0xa88>
    d014:	0027883a 	mov	r19,zero
    d018:	00397206 	br	b5e4 <___vfprintf_internal_r+0x204>
    d01c:	00c001f4 	movhi	r3,7
    d020:	18d28104 	addi	r3,r3,18948
    d024:	100f883a 	mov	r7,r2
    d028:	d8814515 	stw	r2,1300(sp)
    d02c:	d8c14115 	stw	r3,1284(sp)
    d030:	0039da06 	br	b79c <___vfprintf_internal_r+0x3bc>
    d034:	008001f4 	movhi	r2,7
    d038:	10928004 	addi	r2,r2,18944
    d03c:	d8814115 	stw	r2,1284(sp)
    d040:	003d1606 	br	c49c <___vfprintf_internal_r+0x10bc>
    d044:	d9414d17 	ldw	r5,1332(sp)
    d048:	00801984 	movi	r2,102
    d04c:	28804926 	beq	r5,r2,d174 <___vfprintf_internal_r+0x1d94>
    d050:	200f883a 	mov	r7,r4
    d054:	24805716 	blt	r4,r18,d1b4 <___vfprintf_internal_r+0x1dd4>
    d058:	d9414c17 	ldw	r5,1328(sp)
    d05c:	2880004c 	andi	r2,r5,1
    d060:	10000126 	beq	r2,zero,d068 <___vfprintf_internal_r+0x1c88>
    d064:	21c00044 	addi	r7,r4,1
    d068:	d9c14515 	stw	r7,1300(sp)
    d06c:	383fcc0e 	bge	r7,zero,cfa0 <___vfprintf_internal_r+0x1bc0>
    d070:	d8014515 	stw	zero,1300(sp)
    d074:	003fca06 	br	cfa0 <___vfprintf_internal_r+0x1bc0>
    d078:	d9000517 	ldw	r4,20(sp)
    d07c:	00bfff04 	movi	r2,-4
    d080:	1100480e 	bge	r2,r4,d1a4 <___vfprintf_internal_r+0x1dc4>
    d084:	99004716 	blt	r19,r4,d1a4 <___vfprintf_internal_r+0x1dc4>
    d088:	d8c14d15 	stw	r3,1332(sp)
    d08c:	003ff006 	br	d050 <___vfprintf_internal_r+0x1c70>
    d090:	d8800717 	ldw	r2,28(sp)
    d094:	14bf8b2e 	bgeu	r2,r18,cec4 <___vfprintf_internal_r+0x1ae4>
    d098:	9007883a 	mov	r3,r18
    d09c:	01000c04 	movi	r4,48
    d0a0:	11000005 	stb	r4,0(r2)
    d0a4:	10800044 	addi	r2,r2,1
    d0a8:	d8800715 	stw	r2,28(sp)
    d0ac:	18bffc1e 	bne	r3,r2,d0a0 <___vfprintf_internal_r+0x1cc0>
    d0b0:	003f8406 	br	cec4 <___vfprintf_internal_r+0x1ae4>
    d0b4:	d8814117 	ldw	r2,1284(sp)
    d0b8:	10c00007 	ldb	r3,0(r2)
    d0bc:	00800c04 	movi	r2,48
    d0c0:	18805b26 	beq	r3,r2,d230 <___vfprintf_internal_r+0x1e50>
    d0c4:	d9000517 	ldw	r4,20(sp)
    d0c8:	9125883a 	add	r18,r18,r4
    d0cc:	003f7506 	br	cea4 <___vfprintf_internal_r+0x1ac4>
    d0d0:	d9014c17 	ldw	r4,1328(sp)
    d0d4:	2080004c 	andi	r2,r4,1
    d0d8:	1005003a 	cmpeq	r2,r2,zero
    d0dc:	103f6a26 	beq	r2,zero,ce88 <___vfprintf_internal_r+0x1aa8>
    d0e0:	d8800717 	ldw	r2,28(sp)
    d0e4:	003f7706 	br	cec4 <___vfprintf_internal_r+0x1ae4>
    d0e8:	d9c14515 	stw	r7,1300(sp)
    d0ec:	38004d16 	blt	r7,zero,d224 <___vfprintf_internal_r+0x1e44>
    d0f0:	dc814715 	stw	r18,1308(sp)
    d0f4:	d8014615 	stw	zero,1304(sp)
    d0f8:	003b5b06 	br	be68 <___vfprintf_internal_r+0xa88>
    d0fc:	d9014f17 	ldw	r4,1340(sp)
    d100:	d8800504 	addi	r2,sp,20
    d104:	d8800115 	stw	r2,4(sp)
    d108:	d8c00604 	addi	r3,sp,24
    d10c:	d8800704 	addi	r2,sp,28
    d110:	800b883a 	mov	r5,r16
    d114:	880d883a 	mov	r6,r17
    d118:	01c000c4 	movi	r7,3
    d11c:	d8c00215 	stw	r3,8(sp)
    d120:	d8800315 	stw	r2,12(sp)
    d124:	dcc00015 	stw	r19,0(sp)
    d128:	9829883a 	mov	r20,r19
    d12c:	000d73c0 	call	d73c <_dtoa_r>
    d130:	d8814115 	stw	r2,1284(sp)
    d134:	003f5106 	br	ce7c <___vfprintf_internal_r+0x1a9c>
    d138:	d8c14217 	ldw	r3,1288(sp)
    d13c:	d9014317 	ldw	r4,1292(sp)
    d140:	07000b44 	movi	fp,45
    d144:	1821883a 	mov	r16,r3
    d148:	2460003c 	xorhi	r17,r4,32768
    d14c:	003f3106 	br	ce14 <___vfprintf_internal_r+0x1a34>
    d150:	9d000044 	addi	r20,r19,1
    d154:	003f3906 	br	ce3c <___vfprintf_internal_r+0x1a5c>
    d158:	983f251e 	bne	r19,zero,cdf0 <___vfprintf_internal_r+0x1a10>
    d15c:	04c00044 	movi	r19,1
    d160:	003f2306 	br	cdf0 <___vfprintf_internal_r+0x1a10>
    d164:	04c00184 	movi	r19,6
    d168:	003f2106 	br	cdf0 <___vfprintf_internal_r+0x1a10>
    d16c:	d8014515 	stw	zero,1300(sp)
    d170:	003eee06 	br	cd2c <___vfprintf_internal_r+0x194c>
    d174:	200f883a 	mov	r7,r4
    d178:	0100370e 	bge	zero,r4,d258 <___vfprintf_internal_r+0x1e78>
    d17c:	9800031e 	bne	r19,zero,d18c <___vfprintf_internal_r+0x1dac>
    d180:	d9814c17 	ldw	r6,1328(sp)
    d184:	3080004c 	andi	r2,r6,1
    d188:	103fb726 	beq	r2,zero,d068 <___vfprintf_internal_r+0x1c88>
    d18c:	20800044 	addi	r2,r4,1
    d190:	98a7883a 	add	r19,r19,r2
    d194:	dcc14515 	stw	r19,1300(sp)
    d198:	980f883a 	mov	r7,r19
    d19c:	983f800e 	bge	r19,zero,cfa0 <___vfprintf_internal_r+0x1bc0>
    d1a0:	003fb306 	br	d070 <___vfprintf_internal_r+0x1c90>
    d1a4:	d9814d17 	ldw	r6,1332(sp)
    d1a8:	31bfff84 	addi	r6,r6,-2
    d1ac:	d9814d15 	stw	r6,1332(sp)
    d1b0:	003f4c06 	br	cee4 <___vfprintf_internal_r+0x1b04>
    d1b4:	0100180e 	bge	zero,r4,d218 <___vfprintf_internal_r+0x1e38>
    d1b8:	00800044 	movi	r2,1
    d1bc:	1485883a 	add	r2,r2,r18
    d1c0:	d8814515 	stw	r2,1300(sp)
    d1c4:	100f883a 	mov	r7,r2
    d1c8:	103f750e 	bge	r2,zero,cfa0 <___vfprintf_internal_r+0x1bc0>
    d1cc:	003fa806 	br	d070 <___vfprintf_internal_r+0x1c90>
    d1d0:	80c00c04 	addi	r3,r16,48
    d1d4:	00800c04 	movi	r2,48
    d1d8:	d8c008c5 	stb	r3,35(sp)
    d1dc:	d9800804 	addi	r6,sp,32
    d1e0:	d8c00904 	addi	r3,sp,36
    d1e4:	d8800885 	stb	r2,34(sp)
    d1e8:	003f6506 	br	cf80 <___vfprintf_internal_r+0x1ba0>
    d1ec:	d9014c17 	ldw	r4,1328(sp)
    d1f0:	2084703a 	and	r2,r4,r2
    d1f4:	103f9c26 	beq	r2,zero,d068 <___vfprintf_internal_r+0x1c88>
    d1f8:	003f6606 	br	cf94 <___vfprintf_internal_r+0x1bb4>
    d1fc:	d9800804 	addi	r6,sp,32
    d200:	d8c00884 	addi	r3,sp,34
    d204:	003f5e06 	br	cf80 <___vfprintf_internal_r+0x1ba0>
    d208:	00800b44 	movi	r2,45
    d20c:	0121c83a 	sub	r16,zero,r4
    d210:	d8800845 	stb	r2,33(sp)
    d214:	003f3d06 	br	cf0c <___vfprintf_internal_r+0x1b2c>
    d218:	00800084 	movi	r2,2
    d21c:	1105c83a 	sub	r2,r2,r4
    d220:	003fe606 	br	d1bc <___vfprintf_internal_r+0x1ddc>
    d224:	d8014515 	stw	zero,1300(sp)
    d228:	dc814715 	stw	r18,1308(sp)
    d22c:	003fb106 	br	d0f4 <___vfprintf_internal_r+0x1d14>
    d230:	000d883a 	mov	r6,zero
    d234:	000f883a 	mov	r7,zero
    d238:	8009883a 	mov	r4,r16
    d23c:	880b883a 	mov	r5,r17
    d240:	0012e880 	call	12e88 <__nedf2>
    d244:	103f9f26 	beq	r2,zero,d0c4 <___vfprintf_internal_r+0x1ce4>
    d248:	00800044 	movi	r2,1
    d24c:	1509c83a 	sub	r4,r2,r20
    d250:	d9000515 	stw	r4,20(sp)
    d254:	003f9b06 	br	d0c4 <___vfprintf_internal_r+0x1ce4>
    d258:	98000d1e 	bne	r19,zero,d290 <___vfprintf_internal_r+0x1eb0>
    d25c:	d8c14c17 	ldw	r3,1328(sp)
    d260:	1880004c 	andi	r2,r3,1
    d264:	10000a1e 	bne	r2,zero,d290 <___vfprintf_internal_r+0x1eb0>
    d268:	01000044 	movi	r4,1
    d26c:	200f883a 	mov	r7,r4
    d270:	d9014515 	stw	r4,1300(sp)
    d274:	003f4a06 	br	cfa0 <___vfprintf_internal_r+0x1bc0>
    d278:	3cc00017 	ldw	r19,0(r7)
    d27c:	39c00104 	addi	r7,r7,4
    d280:	983d0e0e 	bge	r19,zero,c6bc <___vfprintf_internal_r+0x12dc>
    d284:	b8c00007 	ldb	r3,0(r23)
    d288:	04ffffc4 	movi	r19,-1
    d28c:	0038d306 	br	b5dc <___vfprintf_internal_r+0x1fc>
    d290:	9cc00084 	addi	r19,r19,2
    d294:	dcc14515 	stw	r19,1300(sp)
    d298:	980f883a 	mov	r7,r19
    d29c:	983f400e 	bge	r19,zero,cfa0 <___vfprintf_internal_r+0x1bc0>
    d2a0:	003f7306 	br	d070 <___vfprintf_internal_r+0x1c90>

0000d2a4 <__vfprintf_internal>:
    d2a4:	00800234 	movhi	r2,8
    d2a8:	10a07904 	addi	r2,r2,-32284
    d2ac:	2013883a 	mov	r9,r4
    d2b0:	11000017 	ldw	r4,0(r2)
    d2b4:	2805883a 	mov	r2,r5
    d2b8:	300f883a 	mov	r7,r6
    d2bc:	480b883a 	mov	r5,r9
    d2c0:	100d883a 	mov	r6,r2
    d2c4:	000b3e01 	jmpi	b3e0 <___vfprintf_internal_r>

0000d2c8 <_vsnprintf_r>:
    d2c8:	deffe604 	addi	sp,sp,-104
    d2cc:	dc401815 	stw	r17,96(sp)
    d2d0:	dc001715 	stw	r16,92(sp)
    d2d4:	dfc01915 	stw	ra,100(sp)
    d2d8:	3021883a 	mov	r16,r6
    d2dc:	00ffffc4 	movi	r3,-1
    d2e0:	2023883a 	mov	r17,r4
    d2e4:	2811883a 	mov	r8,r5
    d2e8:	30002116 	blt	r6,zero,d370 <_vsnprintf_r+0xa8>
    d2ec:	0007883a 	mov	r3,zero
    d2f0:	30000126 	beq	r6,zero,d2f8 <_vsnprintf_r+0x30>
    d2f4:	30ffffc4 	addi	r3,r6,-1
    d2f8:	00800234 	movhi	r2,8
    d2fc:	10a07904 	addi	r2,r2,-32284
    d300:	380d883a 	mov	r6,r7
    d304:	11000017 	ldw	r4,0(r2)
    d308:	d9c01a17 	ldw	r7,104(sp)
    d30c:	00808204 	movi	r2,520
    d310:	d880030d 	sth	r2,12(sp)
    d314:	d80b883a 	mov	r5,sp
    d318:	00bfffc4 	movi	r2,-1
    d31c:	d8c00515 	stw	r3,20(sp)
    d320:	d8c00215 	stw	r3,8(sp)
    d324:	da000415 	stw	r8,16(sp)
    d328:	d880038d 	sth	r2,14(sp)
    d32c:	da000015 	stw	r8,0(sp)
    d330:	000b3e00 	call	b3e0 <___vfprintf_internal_r>
    d334:	1007883a 	mov	r3,r2
    d338:	00bfffc4 	movi	r2,-1
    d33c:	18800916 	blt	r3,r2,d364 <_vsnprintf_r+0x9c>
    d340:	80000226 	beq	r16,zero,d34c <_vsnprintf_r+0x84>
    d344:	d8800017 	ldw	r2,0(sp)
    d348:	10000005 	stb	zero,0(r2)
    d34c:	1805883a 	mov	r2,r3
    d350:	dfc01917 	ldw	ra,100(sp)
    d354:	dc401817 	ldw	r17,96(sp)
    d358:	dc001717 	ldw	r16,92(sp)
    d35c:	dec01a04 	addi	sp,sp,104
    d360:	f800283a 	ret
    d364:	008022c4 	movi	r2,139
    d368:	88800015 	stw	r2,0(r17)
    d36c:	003ff406 	br	d340 <_vsnprintf_r+0x78>
    d370:	008022c4 	movi	r2,139
    d374:	20800015 	stw	r2,0(r4)
    d378:	003ff406 	br	d34c <_vsnprintf_r+0x84>

0000d37c <vsnprintf>:
    d37c:	00800234 	movhi	r2,8
    d380:	10a07904 	addi	r2,r2,-32284
    d384:	2017883a 	mov	r11,r4
    d388:	11000017 	ldw	r4,0(r2)
    d38c:	defffe04 	addi	sp,sp,-8
    d390:	3013883a 	mov	r9,r6
    d394:	2805883a 	mov	r2,r5
    d398:	d9c00015 	stw	r7,0(sp)
    d39c:	580b883a 	mov	r5,r11
    d3a0:	100d883a 	mov	r6,r2
    d3a4:	480f883a 	mov	r7,r9
    d3a8:	dfc00115 	stw	ra,4(sp)
    d3ac:	000d2c80 	call	d2c8 <_vsnprintf_r>
    d3b0:	dfc00117 	ldw	ra,4(sp)
    d3b4:	dec00204 	addi	sp,sp,8
    d3b8:	f800283a 	ret

0000d3bc <__swsetup_r>:
    d3bc:	00800234 	movhi	r2,8
    d3c0:	10a07904 	addi	r2,r2,-32284
    d3c4:	10c00017 	ldw	r3,0(r2)
    d3c8:	defffd04 	addi	sp,sp,-12
    d3cc:	dc400115 	stw	r17,4(sp)
    d3d0:	dc000015 	stw	r16,0(sp)
    d3d4:	dfc00215 	stw	ra,8(sp)
    d3d8:	2023883a 	mov	r17,r4
    d3dc:	2821883a 	mov	r16,r5
    d3e0:	18000226 	beq	r3,zero,d3ec <__swsetup_r+0x30>
    d3e4:	18800e17 	ldw	r2,56(r3)
    d3e8:	10001f26 	beq	r2,zero,d468 <__swsetup_r+0xac>
    d3ec:	8100030b 	ldhu	r4,12(r16)
    d3f0:	2080020c 	andi	r2,r4,8
    d3f4:	10002826 	beq	r2,zero,d498 <__swsetup_r+0xdc>
    d3f8:	81400417 	ldw	r5,16(r16)
    d3fc:	28001d26 	beq	r5,zero,d474 <__swsetup_r+0xb8>
    d400:	2080004c 	andi	r2,r4,1
    d404:	1005003a 	cmpeq	r2,r2,zero
    d408:	10000b26 	beq	r2,zero,d438 <__swsetup_r+0x7c>
    d40c:	2080008c 	andi	r2,r4,2
    d410:	10001226 	beq	r2,zero,d45c <__swsetup_r+0xa0>
    d414:	0005883a 	mov	r2,zero
    d418:	80800215 	stw	r2,8(r16)
    d41c:	28000b26 	beq	r5,zero,d44c <__swsetup_r+0x90>
    d420:	0005883a 	mov	r2,zero
    d424:	dfc00217 	ldw	ra,8(sp)
    d428:	dc400117 	ldw	r17,4(sp)
    d42c:	dc000017 	ldw	r16,0(sp)
    d430:	dec00304 	addi	sp,sp,12
    d434:	f800283a 	ret
    d438:	80800517 	ldw	r2,20(r16)
    d43c:	80000215 	stw	zero,8(r16)
    d440:	0085c83a 	sub	r2,zero,r2
    d444:	80800615 	stw	r2,24(r16)
    d448:	283ff51e 	bne	r5,zero,d420 <__swsetup_r+0x64>
    d44c:	2080200c 	andi	r2,r4,128
    d450:	103ff326 	beq	r2,zero,d420 <__swsetup_r+0x64>
    d454:	00bfffc4 	movi	r2,-1
    d458:	003ff206 	br	d424 <__swsetup_r+0x68>
    d45c:	80800517 	ldw	r2,20(r16)
    d460:	80800215 	stw	r2,8(r16)
    d464:	003fed06 	br	d41c <__swsetup_r+0x60>
    d468:	1809883a 	mov	r4,r3
    d46c:	000ef880 	call	ef88 <__sinit>
    d470:	003fde06 	br	d3ec <__swsetup_r+0x30>
    d474:	20c0a00c 	andi	r3,r4,640
    d478:	00808004 	movi	r2,512
    d47c:	18bfe026 	beq	r3,r2,d400 <__swsetup_r+0x44>
    d480:	8809883a 	mov	r4,r17
    d484:	800b883a 	mov	r5,r16
    d488:	000fd340 	call	fd34 <__smakebuf_r>
    d48c:	8100030b 	ldhu	r4,12(r16)
    d490:	81400417 	ldw	r5,16(r16)
    d494:	003fda06 	br	d400 <__swsetup_r+0x44>
    d498:	2080040c 	andi	r2,r4,16
    d49c:	103fed26 	beq	r2,zero,d454 <__swsetup_r+0x98>
    d4a0:	2080010c 	andi	r2,r4,4
    d4a4:	10001226 	beq	r2,zero,d4f0 <__swsetup_r+0x134>
    d4a8:	81400c17 	ldw	r5,48(r16)
    d4ac:	28000526 	beq	r5,zero,d4c4 <__swsetup_r+0x108>
    d4b0:	80801004 	addi	r2,r16,64
    d4b4:	28800226 	beq	r5,r2,d4c0 <__swsetup_r+0x104>
    d4b8:	8809883a 	mov	r4,r17
    d4bc:	000f3400 	call	f340 <_free_r>
    d4c0:	80000c15 	stw	zero,48(r16)
    d4c4:	8080030b 	ldhu	r2,12(r16)
    d4c8:	81400417 	ldw	r5,16(r16)
    d4cc:	80000115 	stw	zero,4(r16)
    d4d0:	10bff6cc 	andi	r2,r2,65499
    d4d4:	8080030d 	sth	r2,12(r16)
    d4d8:	81400015 	stw	r5,0(r16)
    d4dc:	8080030b 	ldhu	r2,12(r16)
    d4e0:	10800214 	ori	r2,r2,8
    d4e4:	113fffcc 	andi	r4,r2,65535
    d4e8:	8080030d 	sth	r2,12(r16)
    d4ec:	003fc306 	br	d3fc <__swsetup_r+0x40>
    d4f0:	81400417 	ldw	r5,16(r16)
    d4f4:	003ff906 	br	d4dc <__swsetup_r+0x120>

0000d4f8 <quorem>:
    d4f8:	28c00417 	ldw	r3,16(r5)
    d4fc:	20800417 	ldw	r2,16(r4)
    d500:	defff104 	addi	sp,sp,-60
    d504:	dfc00e15 	stw	ra,56(sp)
    d508:	df000d15 	stw	fp,52(sp)
    d50c:	ddc00c15 	stw	r23,48(sp)
    d510:	dd800b15 	stw	r22,44(sp)
    d514:	dd400a15 	stw	r21,40(sp)
    d518:	dd000915 	stw	r20,36(sp)
    d51c:	dcc00815 	stw	r19,32(sp)
    d520:	dc800715 	stw	r18,28(sp)
    d524:	dc400615 	stw	r17,24(sp)
    d528:	dc000515 	stw	r16,20(sp)
    d52c:	d9000315 	stw	r4,12(sp)
    d530:	d9400415 	stw	r5,16(sp)
    d534:	10c07f16 	blt	r2,r3,d734 <quorem+0x23c>
    d538:	1d3fffc4 	addi	r20,r3,-1
    d53c:	d8c00417 	ldw	r3,16(sp)
    d540:	d9000317 	ldw	r4,12(sp)
    d544:	a505883a 	add	r2,r20,r20
    d548:	1085883a 	add	r2,r2,r2
    d54c:	1cc00504 	addi	r19,r3,20
    d550:	25c00504 	addi	r23,r4,20
    d554:	98ad883a 	add	r22,r19,r2
    d558:	15c7883a 	add	r3,r2,r23
    d55c:	b1400017 	ldw	r5,0(r22)
    d560:	19000017 	ldw	r4,0(r3)
    d564:	d8c00015 	stw	r3,0(sp)
    d568:	29400044 	addi	r5,r5,1
    d56c:	d9000215 	stw	r4,8(sp)
    d570:	000a0440 	call	a044 <__udivsi3>
    d574:	1039883a 	mov	fp,r2
    d578:	10003d1e 	bne	r2,zero,d670 <quorem+0x178>
    d57c:	d9400417 	ldw	r5,16(sp)
    d580:	d9000317 	ldw	r4,12(sp)
    d584:	00101e80 	call	101e8 <__mcmp>
    d588:	10002c16 	blt	r2,zero,d63c <quorem+0x144>
    d58c:	e7000044 	addi	fp,fp,1
    d590:	b80f883a 	mov	r7,r23
    d594:	0011883a 	mov	r8,zero
    d598:	0009883a 	mov	r4,zero
    d59c:	99400017 	ldw	r5,0(r19)
    d5a0:	38c00017 	ldw	r3,0(r7)
    d5a4:	9cc00104 	addi	r19,r19,4
    d5a8:	28bfffcc 	andi	r2,r5,65535
    d5ac:	2085883a 	add	r2,r4,r2
    d5b0:	11bfffcc 	andi	r6,r2,65535
    d5b4:	193fffcc 	andi	r4,r3,65535
    d5b8:	1004d43a 	srli	r2,r2,16
    d5bc:	280ad43a 	srli	r5,r5,16
    d5c0:	2189c83a 	sub	r4,r4,r6
    d5c4:	2209883a 	add	r4,r4,r8
    d5c8:	1806d43a 	srli	r3,r3,16
    d5cc:	288b883a 	add	r5,r5,r2
    d5d0:	200dd43a 	srai	r6,r4,16
    d5d4:	28bfffcc 	andi	r2,r5,65535
    d5d8:	1887c83a 	sub	r3,r3,r2
    d5dc:	1987883a 	add	r3,r3,r6
    d5e0:	3900000d 	sth	r4,0(r7)
    d5e4:	38c0008d 	sth	r3,2(r7)
    d5e8:	2808d43a 	srli	r4,r5,16
    d5ec:	39c00104 	addi	r7,r7,4
    d5f0:	1811d43a 	srai	r8,r3,16
    d5f4:	b4ffe92e 	bgeu	r22,r19,d59c <quorem+0xa4>
    d5f8:	a505883a 	add	r2,r20,r20
    d5fc:	1085883a 	add	r2,r2,r2
    d600:	b885883a 	add	r2,r23,r2
    d604:	10c00017 	ldw	r3,0(r2)
    d608:	18000c1e 	bne	r3,zero,d63c <quorem+0x144>
    d60c:	113fff04 	addi	r4,r2,-4
    d610:	b900082e 	bgeu	r23,r4,d634 <quorem+0x13c>
    d614:	10bfff17 	ldw	r2,-4(r2)
    d618:	10000326 	beq	r2,zero,d628 <quorem+0x130>
    d61c:	00000506 	br	d634 <quorem+0x13c>
    d620:	20800017 	ldw	r2,0(r4)
    d624:	1000031e 	bne	r2,zero,d634 <quorem+0x13c>
    d628:	213fff04 	addi	r4,r4,-4
    d62c:	a53fffc4 	addi	r20,r20,-1
    d630:	b93ffb36 	bltu	r23,r4,d620 <quorem+0x128>
    d634:	d9000317 	ldw	r4,12(sp)
    d638:	25000415 	stw	r20,16(r4)
    d63c:	e005883a 	mov	r2,fp
    d640:	dfc00e17 	ldw	ra,56(sp)
    d644:	df000d17 	ldw	fp,52(sp)
    d648:	ddc00c17 	ldw	r23,48(sp)
    d64c:	dd800b17 	ldw	r22,44(sp)
    d650:	dd400a17 	ldw	r21,40(sp)
    d654:	dd000917 	ldw	r20,36(sp)
    d658:	dcc00817 	ldw	r19,32(sp)
    d65c:	dc800717 	ldw	r18,28(sp)
    d660:	dc400617 	ldw	r17,24(sp)
    d664:	dc000517 	ldw	r16,20(sp)
    d668:	dec00f04 	addi	sp,sp,60
    d66c:	f800283a 	ret
    d670:	b823883a 	mov	r17,r23
    d674:	9825883a 	mov	r18,r19
    d678:	d8000115 	stw	zero,4(sp)
    d67c:	002b883a 	mov	r21,zero
    d680:	94000017 	ldw	r16,0(r18)
    d684:	e009883a 	mov	r4,fp
    d688:	94800104 	addi	r18,r18,4
    d68c:	817fffcc 	andi	r5,r16,65535
    d690:	000a0540 	call	a054 <__mulsi3>
    d694:	800ad43a 	srli	r5,r16,16
    d698:	e009883a 	mov	r4,fp
    d69c:	a8a1883a 	add	r16,r21,r2
    d6a0:	000a0540 	call	a054 <__mulsi3>
    d6a4:	89000017 	ldw	r4,0(r17)
    d6a8:	80ffffcc 	andi	r3,r16,65535
    d6ac:	8020d43a 	srli	r16,r16,16
    d6b0:	217fffcc 	andi	r5,r4,65535
    d6b4:	28cbc83a 	sub	r5,r5,r3
    d6b8:	d8c00117 	ldw	r3,4(sp)
    d6bc:	2008d43a 	srli	r4,r4,16
    d6c0:	1405883a 	add	r2,r2,r16
    d6c4:	28cb883a 	add	r5,r5,r3
    d6c8:	280dd43a 	srai	r6,r5,16
    d6cc:	10ffffcc 	andi	r3,r2,65535
    d6d0:	20c9c83a 	sub	r4,r4,r3
    d6d4:	2189883a 	add	r4,r4,r6
    d6d8:	8900008d 	sth	r4,2(r17)
    d6dc:	2009d43a 	srai	r4,r4,16
    d6e0:	8940000d 	sth	r5,0(r17)
    d6e4:	102ad43a 	srli	r21,r2,16
    d6e8:	8c400104 	addi	r17,r17,4
    d6ec:	d9000115 	stw	r4,4(sp)
    d6f0:	b4bfe32e 	bgeu	r22,r18,d680 <quorem+0x188>
    d6f4:	d9000217 	ldw	r4,8(sp)
    d6f8:	203fa01e 	bne	r4,zero,d57c <quorem+0x84>
    d6fc:	d8800017 	ldw	r2,0(sp)
    d700:	10ffff04 	addi	r3,r2,-4
    d704:	b8c0082e 	bgeu	r23,r3,d728 <quorem+0x230>
    d708:	10bfff17 	ldw	r2,-4(r2)
    d70c:	10000326 	beq	r2,zero,d71c <quorem+0x224>
    d710:	00000506 	br	d728 <quorem+0x230>
    d714:	18800017 	ldw	r2,0(r3)
    d718:	1000031e 	bne	r2,zero,d728 <quorem+0x230>
    d71c:	18ffff04 	addi	r3,r3,-4
    d720:	a53fffc4 	addi	r20,r20,-1
    d724:	b8fffb36 	bltu	r23,r3,d714 <quorem+0x21c>
    d728:	d8c00317 	ldw	r3,12(sp)
    d72c:	1d000415 	stw	r20,16(r3)
    d730:	003f9206 	br	d57c <quorem+0x84>
    d734:	0005883a 	mov	r2,zero
    d738:	003fc106 	br	d640 <quorem+0x148>

0000d73c <_dtoa_r>:
    d73c:	22001017 	ldw	r8,64(r4)
    d740:	deffda04 	addi	sp,sp,-152
    d744:	dd402115 	stw	r21,132(sp)
    d748:	dd002015 	stw	r20,128(sp)
    d74c:	dc801e15 	stw	r18,120(sp)
    d750:	dc401d15 	stw	r17,116(sp)
    d754:	dfc02515 	stw	ra,148(sp)
    d758:	df002415 	stw	fp,144(sp)
    d75c:	ddc02315 	stw	r23,140(sp)
    d760:	dd802215 	stw	r22,136(sp)
    d764:	dcc01f15 	stw	r19,124(sp)
    d768:	dc001c15 	stw	r16,112(sp)
    d76c:	d9001615 	stw	r4,88(sp)
    d770:	3023883a 	mov	r17,r6
    d774:	2829883a 	mov	r20,r5
    d778:	d9c01715 	stw	r7,92(sp)
    d77c:	dc802817 	ldw	r18,160(sp)
    d780:	302b883a 	mov	r21,r6
    d784:	40000a26 	beq	r8,zero,d7b0 <_dtoa_r+0x74>
    d788:	20801117 	ldw	r2,68(r4)
    d78c:	400b883a 	mov	r5,r8
    d790:	40800115 	stw	r2,4(r8)
    d794:	20c01117 	ldw	r3,68(r4)
    d798:	00800044 	movi	r2,1
    d79c:	10c4983a 	sll	r2,r2,r3
    d7a0:	40800215 	stw	r2,8(r8)
    d7a4:	001008c0 	call	1008c <_Bfree>
    d7a8:	d8c01617 	ldw	r3,88(sp)
    d7ac:	18001015 	stw	zero,64(r3)
    d7b0:	8800a316 	blt	r17,zero,da40 <_dtoa_r+0x304>
    d7b4:	90000015 	stw	zero,0(r18)
    d7b8:	a8dffc2c 	andhi	r3,r21,32752
    d7bc:	009ffc34 	movhi	r2,32752
    d7c0:	18809126 	beq	r3,r2,da08 <_dtoa_r+0x2cc>
    d7c4:	000d883a 	mov	r6,zero
    d7c8:	000f883a 	mov	r7,zero
    d7cc:	a009883a 	mov	r4,r20
    d7d0:	a80b883a 	mov	r5,r21
    d7d4:	dd001215 	stw	r20,72(sp)
    d7d8:	dd401315 	stw	r21,76(sp)
    d7dc:	0012e880 	call	12e88 <__nedf2>
    d7e0:	1000171e 	bne	r2,zero,d840 <_dtoa_r+0x104>
    d7e4:	d9802717 	ldw	r6,156(sp)
    d7e8:	00800044 	movi	r2,1
    d7ec:	30800015 	stw	r2,0(r6)
    d7f0:	d8802917 	ldw	r2,164(sp)
    d7f4:	10029b26 	beq	r2,zero,e264 <_dtoa_r+0xb28>
    d7f8:	d9002917 	ldw	r4,164(sp)
    d7fc:	008001f4 	movhi	r2,7
    d800:	10928f44 	addi	r2,r2,19005
    d804:	10ffffc4 	addi	r3,r2,-1
    d808:	20800015 	stw	r2,0(r4)
    d80c:	1805883a 	mov	r2,r3
    d810:	dfc02517 	ldw	ra,148(sp)
    d814:	df002417 	ldw	fp,144(sp)
    d818:	ddc02317 	ldw	r23,140(sp)
    d81c:	dd802217 	ldw	r22,136(sp)
    d820:	dd402117 	ldw	r21,132(sp)
    d824:	dd002017 	ldw	r20,128(sp)
    d828:	dcc01f17 	ldw	r19,124(sp)
    d82c:	dc801e17 	ldw	r18,120(sp)
    d830:	dc401d17 	ldw	r17,116(sp)
    d834:	dc001c17 	ldw	r16,112(sp)
    d838:	dec02604 	addi	sp,sp,152
    d83c:	f800283a 	ret
    d840:	d9001617 	ldw	r4,88(sp)
    d844:	d9401217 	ldw	r5,72(sp)
    d848:	d8800104 	addi	r2,sp,4
    d84c:	a80d883a 	mov	r6,r21
    d850:	d9c00204 	addi	r7,sp,8
    d854:	d8800015 	stw	r2,0(sp)
    d858:	00106c80 	call	106c8 <__d2b>
    d85c:	d8800715 	stw	r2,28(sp)
    d860:	a804d53a 	srli	r2,r21,20
    d864:	1101ffcc 	andi	r4,r2,2047
    d868:	20008626 	beq	r4,zero,da84 <_dtoa_r+0x348>
    d86c:	d8c01217 	ldw	r3,72(sp)
    d870:	00800434 	movhi	r2,16
    d874:	10bfffc4 	addi	r2,r2,-1
    d878:	ddc00117 	ldw	r23,4(sp)
    d87c:	a884703a 	and	r2,r21,r2
    d880:	1811883a 	mov	r8,r3
    d884:	124ffc34 	orhi	r9,r2,16368
    d888:	25bf0044 	addi	r22,r4,-1023
    d88c:	d8000815 	stw	zero,32(sp)
    d890:	0005883a 	mov	r2,zero
    d894:	00cffe34 	movhi	r3,16376
    d898:	480b883a 	mov	r5,r9
    d89c:	4009883a 	mov	r4,r8
    d8a0:	180f883a 	mov	r7,r3
    d8a4:	100d883a 	mov	r6,r2
    d8a8:	00095a00 	call	95a0 <__subdf3>
    d8ac:	0218dbf4 	movhi	r8,25455
    d8b0:	4210d844 	addi	r8,r8,17249
    d8b4:	024ff4f4 	movhi	r9,16339
    d8b8:	4a61e9c4 	addi	r9,r9,-30809
    d8bc:	480f883a 	mov	r7,r9
    d8c0:	400d883a 	mov	r6,r8
    d8c4:	180b883a 	mov	r5,r3
    d8c8:	1009883a 	mov	r4,r2
    d8cc:	00096940 	call	9694 <__muldf3>
    d8d0:	0222d874 	movhi	r8,35681
    d8d4:	42322cc4 	addi	r8,r8,-14157
    d8d8:	024ff1f4 	movhi	r9,16327
    d8dc:	4a628a04 	addi	r9,r9,-30168
    d8e0:	480f883a 	mov	r7,r9
    d8e4:	400d883a 	mov	r6,r8
    d8e8:	180b883a 	mov	r5,r3
    d8ec:	1009883a 	mov	r4,r2
    d8f0:	00096200 	call	9620 <__adddf3>
    d8f4:	b009883a 	mov	r4,r22
    d8f8:	1021883a 	mov	r16,r2
    d8fc:	1823883a 	mov	r17,r3
    d900:	0009d380 	call	9d38 <__floatsidf>
    d904:	021427f4 	movhi	r8,20639
    d908:	421e7ec4 	addi	r8,r8,31227
    d90c:	024ff4f4 	movhi	r9,16339
    d910:	4a5104c4 	addi	r9,r9,17427
    d914:	480f883a 	mov	r7,r9
    d918:	400d883a 	mov	r6,r8
    d91c:	180b883a 	mov	r5,r3
    d920:	1009883a 	mov	r4,r2
    d924:	00096940 	call	9694 <__muldf3>
    d928:	180f883a 	mov	r7,r3
    d92c:	880b883a 	mov	r5,r17
    d930:	100d883a 	mov	r6,r2
    d934:	8009883a 	mov	r4,r16
    d938:	00096200 	call	9620 <__adddf3>
    d93c:	1009883a 	mov	r4,r2
    d940:	180b883a 	mov	r5,r3
    d944:	1021883a 	mov	r16,r2
    d948:	1823883a 	mov	r17,r3
    d94c:	0009e300 	call	9e30 <__fixdfsi>
    d950:	000d883a 	mov	r6,zero
    d954:	000f883a 	mov	r7,zero
    d958:	8009883a 	mov	r4,r16
    d95c:	880b883a 	mov	r5,r17
    d960:	d8800d15 	stw	r2,52(sp)
    d964:	0009cb00 	call	9cb0 <__ltdf2>
    d968:	10031716 	blt	r2,zero,e5c8 <_dtoa_r+0xe8c>
    d96c:	d8c00d17 	ldw	r3,52(sp)
    d970:	00800584 	movi	r2,22
    d974:	10c1482e 	bgeu	r2,r3,de98 <_dtoa_r+0x75c>
    d978:	01000044 	movi	r4,1
    d97c:	d9000c15 	stw	r4,48(sp)
    d980:	bd85c83a 	sub	r2,r23,r22
    d984:	11bfffc4 	addi	r6,r2,-1
    d988:	30030b16 	blt	r6,zero,e5b8 <_dtoa_r+0xe7c>
    d98c:	d9800a15 	stw	r6,40(sp)
    d990:	d8001115 	stw	zero,68(sp)
    d994:	d8c00d17 	ldw	r3,52(sp)
    d998:	1802ff16 	blt	r3,zero,e598 <_dtoa_r+0xe5c>
    d99c:	d9000a17 	ldw	r4,40(sp)
    d9a0:	d8c00915 	stw	r3,36(sp)
    d9a4:	d8001015 	stw	zero,64(sp)
    d9a8:	20c9883a 	add	r4,r4,r3
    d9ac:	d9000a15 	stw	r4,40(sp)
    d9b0:	d9001717 	ldw	r4,92(sp)
    d9b4:	00800244 	movi	r2,9
    d9b8:	11004636 	bltu	r2,r4,dad4 <_dtoa_r+0x398>
    d9bc:	00800144 	movi	r2,5
    d9c0:	11020416 	blt	r2,r4,e1d4 <_dtoa_r+0xa98>
    d9c4:	04400044 	movi	r17,1
    d9c8:	d8c01717 	ldw	r3,92(sp)
    d9cc:	00800144 	movi	r2,5
    d9d0:	10c1ed36 	bltu	r2,r3,e188 <_dtoa_r+0xa4c>
    d9d4:	18c5883a 	add	r2,r3,r3
    d9d8:	1085883a 	add	r2,r2,r2
    d9dc:	00c00074 	movhi	r3,1
    d9e0:	18f67c04 	addi	r3,r3,-9744
    d9e4:	10c5883a 	add	r2,r2,r3
    d9e8:	11000017 	ldw	r4,0(r2)
    d9ec:	2000683a 	jmp	r4
    d9f0:	0000dadc 	xori	zero,zero,875
    d9f4:	0000dadc 	xori	zero,zero,875
    d9f8:	0000e4dc 	xori	zero,zero,915
    d9fc:	0000e4b4 	movhi	zero,914
    da00:	0000e4f8 	rdprs	zero,zero,915
    da04:	0000e504 	movi	zero,916
    da08:	d9002717 	ldw	r4,156(sp)
    da0c:	0089c3c4 	movi	r2,9999
    da10:	20800015 	stw	r2,0(r4)
    da14:	a0001026 	beq	r20,zero,da58 <_dtoa_r+0x31c>
    da18:	00c001f4 	movhi	r3,7
    da1c:	18d29b04 	addi	r3,r3,19052
    da20:	d9802917 	ldw	r6,164(sp)
    da24:	303f7926 	beq	r6,zero,d80c <_dtoa_r+0xd0>
    da28:	188000c7 	ldb	r2,3(r3)
    da2c:	190000c4 	addi	r4,r3,3
    da30:	1000101e 	bne	r2,zero,da74 <_dtoa_r+0x338>
    da34:	d8802917 	ldw	r2,164(sp)
    da38:	11000015 	stw	r4,0(r2)
    da3c:	003f7306 	br	d80c <_dtoa_r+0xd0>
    da40:	00a00034 	movhi	r2,32768
    da44:	10bfffc4 	addi	r2,r2,-1
    da48:	00c00044 	movi	r3,1
    da4c:	88aa703a 	and	r21,r17,r2
    da50:	90c00015 	stw	r3,0(r18)
    da54:	003f5806 	br	d7b8 <_dtoa_r+0x7c>
    da58:	00800434 	movhi	r2,16
    da5c:	10bfffc4 	addi	r2,r2,-1
    da60:	a884703a 	and	r2,r21,r2
    da64:	103fec1e 	bne	r2,zero,da18 <_dtoa_r+0x2dc>
    da68:	00c001f4 	movhi	r3,7
    da6c:	18d29804 	addi	r3,r3,19040
    da70:	003feb06 	br	da20 <_dtoa_r+0x2e4>
    da74:	d8802917 	ldw	r2,164(sp)
    da78:	19000204 	addi	r4,r3,8
    da7c:	11000015 	stw	r4,0(r2)
    da80:	003f6206 	br	d80c <_dtoa_r+0xd0>
    da84:	ddc00117 	ldw	r23,4(sp)
    da88:	d8800217 	ldw	r2,8(sp)
    da8c:	01000804 	movi	r4,32
    da90:	b8c10c84 	addi	r3,r23,1074
    da94:	18a3883a 	add	r17,r3,r2
    da98:	2441b80e 	bge	r4,r17,e17c <_dtoa_r+0xa40>
    da9c:	00c01004 	movi	r3,64
    daa0:	1c47c83a 	sub	r3,r3,r17
    daa4:	88bff804 	addi	r2,r17,-32
    daa8:	a8c6983a 	sll	r3,r21,r3
    daac:	a084d83a 	srl	r2,r20,r2
    dab0:	1888b03a 	or	r4,r3,r2
    dab4:	00130200 	call	13020 <__floatunsidf>
    dab8:	1011883a 	mov	r8,r2
    dabc:	00bf8434 	movhi	r2,65040
    dac0:	01000044 	movi	r4,1
    dac4:	10d3883a 	add	r9,r2,r3
    dac8:	8dbef344 	addi	r22,r17,-1075
    dacc:	d9000815 	stw	r4,32(sp)
    dad0:	003f6f06 	br	d890 <_dtoa_r+0x154>
    dad4:	d8001715 	stw	zero,92(sp)
    dad8:	04400044 	movi	r17,1
    dadc:	00bfffc4 	movi	r2,-1
    dae0:	00c00044 	movi	r3,1
    dae4:	d8800e15 	stw	r2,56(sp)
    dae8:	d8002615 	stw	zero,152(sp)
    daec:	d8800f15 	stw	r2,60(sp)
    daf0:	d8c00b15 	stw	r3,44(sp)
    daf4:	1021883a 	mov	r16,r2
    daf8:	d8801617 	ldw	r2,88(sp)
    dafc:	10001115 	stw	zero,68(r2)
    db00:	d8801617 	ldw	r2,88(sp)
    db04:	11401117 	ldw	r5,68(r2)
    db08:	1009883a 	mov	r4,r2
    db0c:	001060c0 	call	1060c <_Balloc>
    db10:	d8c01617 	ldw	r3,88(sp)
    db14:	d8800515 	stw	r2,20(sp)
    db18:	18801015 	stw	r2,64(r3)
    db1c:	00800384 	movi	r2,14
    db20:	14006836 	bltu	r2,r16,dcc4 <_dtoa_r+0x588>
    db24:	8805003a 	cmpeq	r2,r17,zero
    db28:	1000661e 	bne	r2,zero,dcc4 <_dtoa_r+0x588>
    db2c:	d9000d17 	ldw	r4,52(sp)
    db30:	0102300e 	bge	zero,r4,e3f4 <_dtoa_r+0xcb8>
    db34:	208003cc 	andi	r2,r4,15
    db38:	100490fa 	slli	r2,r2,3
    db3c:	2025d13a 	srai	r18,r4,4
    db40:	00c001f4 	movhi	r3,7
    db44:	18d2ac04 	addi	r3,r3,19120
    db48:	10c5883a 	add	r2,r2,r3
    db4c:	90c0040c 	andi	r3,r18,16
    db50:	14000017 	ldw	r16,0(r2)
    db54:	14400117 	ldw	r17,4(r2)
    db58:	18036a1e 	bne	r3,zero,e904 <_dtoa_r+0x11c8>
    db5c:	05800084 	movi	r22,2
    db60:	90001026 	beq	r18,zero,dba4 <_dtoa_r+0x468>
    db64:	04c001f4 	movhi	r19,7
    db68:	9cd2de04 	addi	r19,r19,19320
    db6c:	9080004c 	andi	r2,r18,1
    db70:	1005003a 	cmpeq	r2,r2,zero
    db74:	1000081e 	bne	r2,zero,db98 <_dtoa_r+0x45c>
    db78:	99800017 	ldw	r6,0(r19)
    db7c:	99c00117 	ldw	r7,4(r19)
    db80:	880b883a 	mov	r5,r17
    db84:	8009883a 	mov	r4,r16
    db88:	00096940 	call	9694 <__muldf3>
    db8c:	1021883a 	mov	r16,r2
    db90:	b5800044 	addi	r22,r22,1
    db94:	1823883a 	mov	r17,r3
    db98:	9025d07a 	srai	r18,r18,1
    db9c:	9cc00204 	addi	r19,r19,8
    dba0:	903ff21e 	bne	r18,zero,db6c <_dtoa_r+0x430>
    dba4:	a80b883a 	mov	r5,r21
    dba8:	a009883a 	mov	r4,r20
    dbac:	880f883a 	mov	r7,r17
    dbb0:	800d883a 	mov	r6,r16
    dbb4:	0009a580 	call	9a58 <__divdf3>
    dbb8:	1029883a 	mov	r20,r2
    dbbc:	182b883a 	mov	r21,r3
    dbc0:	d8c00c17 	ldw	r3,48(sp)
    dbc4:	1805003a 	cmpeq	r2,r3,zero
    dbc8:	1000081e 	bne	r2,zero,dbec <_dtoa_r+0x4b0>
    dbcc:	0005883a 	mov	r2,zero
    dbd0:	00cffc34 	movhi	r3,16368
    dbd4:	180f883a 	mov	r7,r3
    dbd8:	a009883a 	mov	r4,r20
    dbdc:	a80b883a 	mov	r5,r21
    dbe0:	100d883a 	mov	r6,r2
    dbe4:	0009cb00 	call	9cb0 <__ltdf2>
    dbe8:	1003fe16 	blt	r2,zero,ebe4 <_dtoa_r+0x14a8>
    dbec:	b009883a 	mov	r4,r22
    dbf0:	0009d380 	call	9d38 <__floatsidf>
    dbf4:	180b883a 	mov	r5,r3
    dbf8:	1009883a 	mov	r4,r2
    dbfc:	a00d883a 	mov	r6,r20
    dc00:	a80f883a 	mov	r7,r21
    dc04:	00096940 	call	9694 <__muldf3>
    dc08:	0011883a 	mov	r8,zero
    dc0c:	02500734 	movhi	r9,16412
    dc10:	1009883a 	mov	r4,r2
    dc14:	180b883a 	mov	r5,r3
    dc18:	480f883a 	mov	r7,r9
    dc1c:	400d883a 	mov	r6,r8
    dc20:	00096200 	call	9620 <__adddf3>
    dc24:	d9000f17 	ldw	r4,60(sp)
    dc28:	102d883a 	mov	r22,r2
    dc2c:	00bf3034 	movhi	r2,64704
    dc30:	18b9883a 	add	fp,r3,r2
    dc34:	e02f883a 	mov	r23,fp
    dc38:	20028f1e 	bne	r4,zero,e678 <_dtoa_r+0xf3c>
    dc3c:	0005883a 	mov	r2,zero
    dc40:	00d00534 	movhi	r3,16404
    dc44:	a009883a 	mov	r4,r20
    dc48:	a80b883a 	mov	r5,r21
    dc4c:	180f883a 	mov	r7,r3
    dc50:	100d883a 	mov	r6,r2
    dc54:	00095a00 	call	95a0 <__subdf3>
    dc58:	1009883a 	mov	r4,r2
    dc5c:	e00f883a 	mov	r7,fp
    dc60:	180b883a 	mov	r5,r3
    dc64:	b00d883a 	mov	r6,r22
    dc68:	1025883a 	mov	r18,r2
    dc6c:	1827883a 	mov	r19,r3
    dc70:	0012f100 	call	12f10 <__gtdf2>
    dc74:	00834f16 	blt	zero,r2,e9b4 <_dtoa_r+0x1278>
    dc78:	e0e0003c 	xorhi	r3,fp,32768
    dc7c:	9009883a 	mov	r4,r18
    dc80:	980b883a 	mov	r5,r19
    dc84:	180f883a 	mov	r7,r3
    dc88:	b00d883a 	mov	r6,r22
    dc8c:	0009cb00 	call	9cb0 <__ltdf2>
    dc90:	1000080e 	bge	r2,zero,dcb4 <_dtoa_r+0x578>
    dc94:	0027883a 	mov	r19,zero
    dc98:	0025883a 	mov	r18,zero
    dc9c:	d8802617 	ldw	r2,152(sp)
    dca0:	df000517 	ldw	fp,20(sp)
    dca4:	d8000615 	stw	zero,24(sp)
    dca8:	0084303a 	nor	r2,zero,r2
    dcac:	d8800d15 	stw	r2,52(sp)
    dcb0:	00019b06 	br	e320 <_dtoa_r+0xbe4>
    dcb4:	d9801217 	ldw	r6,72(sp)
    dcb8:	d8801317 	ldw	r2,76(sp)
    dcbc:	3029883a 	mov	r20,r6
    dcc0:	102b883a 	mov	r21,r2
    dcc4:	d8c00217 	ldw	r3,8(sp)
    dcc8:	18008516 	blt	r3,zero,dee0 <_dtoa_r+0x7a4>
    dccc:	d9000d17 	ldw	r4,52(sp)
    dcd0:	00800384 	movi	r2,14
    dcd4:	11008216 	blt	r2,r4,dee0 <_dtoa_r+0x7a4>
    dcd8:	200490fa 	slli	r2,r4,3
    dcdc:	d9802617 	ldw	r6,152(sp)
    dce0:	00c001f4 	movhi	r3,7
    dce4:	18d2ac04 	addi	r3,r3,19120
    dce8:	10c5883a 	add	r2,r2,r3
    dcec:	14800017 	ldw	r18,0(r2)
    dcf0:	14c00117 	ldw	r19,4(r2)
    dcf4:	30031e16 	blt	r6,zero,e970 <_dtoa_r+0x1234>
    dcf8:	d9000517 	ldw	r4,20(sp)
    dcfc:	d8c00f17 	ldw	r3,60(sp)
    dd00:	a823883a 	mov	r17,r21
    dd04:	a021883a 	mov	r16,r20
    dd08:	192b883a 	add	r21,r3,r4
    dd0c:	2039883a 	mov	fp,r4
    dd10:	00000f06 	br	dd50 <_dtoa_r+0x614>
    dd14:	0005883a 	mov	r2,zero
    dd18:	00d00934 	movhi	r3,16420
    dd1c:	5009883a 	mov	r4,r10
    dd20:	580b883a 	mov	r5,r11
    dd24:	180f883a 	mov	r7,r3
    dd28:	100d883a 	mov	r6,r2
    dd2c:	00096940 	call	9694 <__muldf3>
    dd30:	180b883a 	mov	r5,r3
    dd34:	000d883a 	mov	r6,zero
    dd38:	000f883a 	mov	r7,zero
    dd3c:	1009883a 	mov	r4,r2
    dd40:	1021883a 	mov	r16,r2
    dd44:	1823883a 	mov	r17,r3
    dd48:	0012e880 	call	12e88 <__nedf2>
    dd4c:	10004526 	beq	r2,zero,de64 <_dtoa_r+0x728>
    dd50:	900d883a 	mov	r6,r18
    dd54:	980f883a 	mov	r7,r19
    dd58:	8009883a 	mov	r4,r16
    dd5c:	880b883a 	mov	r5,r17
    dd60:	0009a580 	call	9a58 <__divdf3>
    dd64:	180b883a 	mov	r5,r3
    dd68:	1009883a 	mov	r4,r2
    dd6c:	0009e300 	call	9e30 <__fixdfsi>
    dd70:	1009883a 	mov	r4,r2
    dd74:	1029883a 	mov	r20,r2
    dd78:	0009d380 	call	9d38 <__floatsidf>
    dd7c:	180f883a 	mov	r7,r3
    dd80:	9009883a 	mov	r4,r18
    dd84:	980b883a 	mov	r5,r19
    dd88:	100d883a 	mov	r6,r2
    dd8c:	00096940 	call	9694 <__muldf3>
    dd90:	180f883a 	mov	r7,r3
    dd94:	880b883a 	mov	r5,r17
    dd98:	8009883a 	mov	r4,r16
    dd9c:	100d883a 	mov	r6,r2
    dda0:	00095a00 	call	95a0 <__subdf3>
    dda4:	1015883a 	mov	r10,r2
    dda8:	a0800c04 	addi	r2,r20,48
    ddac:	e0800005 	stb	r2,0(fp)
    ddb0:	e7000044 	addi	fp,fp,1
    ddb4:	1817883a 	mov	r11,r3
    ddb8:	e57fd61e 	bne	fp,r21,dd14 <_dtoa_r+0x5d8>
    ddbc:	500d883a 	mov	r6,r10
    ddc0:	180f883a 	mov	r7,r3
    ddc4:	5009883a 	mov	r4,r10
    ddc8:	180b883a 	mov	r5,r3
    ddcc:	00096200 	call	9620 <__adddf3>
    ddd0:	100d883a 	mov	r6,r2
    ddd4:	9009883a 	mov	r4,r18
    ddd8:	980b883a 	mov	r5,r19
    dddc:	180f883a 	mov	r7,r3
    dde0:	1021883a 	mov	r16,r2
    dde4:	1823883a 	mov	r17,r3
    dde8:	0009cb00 	call	9cb0 <__ltdf2>
    ddec:	10000816 	blt	r2,zero,de10 <_dtoa_r+0x6d4>
    ddf0:	980b883a 	mov	r5,r19
    ddf4:	800d883a 	mov	r6,r16
    ddf8:	880f883a 	mov	r7,r17
    ddfc:	9009883a 	mov	r4,r18
    de00:	0012e000 	call	12e00 <__eqdf2>
    de04:	1000171e 	bne	r2,zero,de64 <_dtoa_r+0x728>
    de08:	a080004c 	andi	r2,r20,1
    de0c:	10001526 	beq	r2,zero,de64 <_dtoa_r+0x728>
    de10:	d8800d17 	ldw	r2,52(sp)
    de14:	d8800415 	stw	r2,16(sp)
    de18:	e009883a 	mov	r4,fp
    de1c:	213fffc4 	addi	r4,r4,-1
    de20:	20c00007 	ldb	r3,0(r4)
    de24:	00800e44 	movi	r2,57
    de28:	1880081e 	bne	r3,r2,de4c <_dtoa_r+0x710>
    de2c:	d8800517 	ldw	r2,20(sp)
    de30:	113ffa1e 	bne	r2,r4,de1c <_dtoa_r+0x6e0>
    de34:	d8c00417 	ldw	r3,16(sp)
    de38:	d9800517 	ldw	r6,20(sp)
    de3c:	00800c04 	movi	r2,48
    de40:	18c00044 	addi	r3,r3,1
    de44:	d8c00415 	stw	r3,16(sp)
    de48:	30800005 	stb	r2,0(r6)
    de4c:	20800003 	ldbu	r2,0(r4)
    de50:	d8c00417 	ldw	r3,16(sp)
    de54:	27000044 	addi	fp,r4,1
    de58:	10800044 	addi	r2,r2,1
    de5c:	d8c00d15 	stw	r3,52(sp)
    de60:	20800005 	stb	r2,0(r4)
    de64:	d9001617 	ldw	r4,88(sp)
    de68:	d9400717 	ldw	r5,28(sp)
    de6c:	001008c0 	call	1008c <_Bfree>
    de70:	e0000005 	stb	zero,0(fp)
    de74:	d9800d17 	ldw	r6,52(sp)
    de78:	d8c02717 	ldw	r3,156(sp)
    de7c:	d9002917 	ldw	r4,164(sp)
    de80:	30800044 	addi	r2,r6,1
    de84:	18800015 	stw	r2,0(r3)
    de88:	20029c26 	beq	r4,zero,e8fc <_dtoa_r+0x11c0>
    de8c:	d8c00517 	ldw	r3,20(sp)
    de90:	27000015 	stw	fp,0(r4)
    de94:	003e5d06 	br	d80c <_dtoa_r+0xd0>
    de98:	d9800d17 	ldw	r6,52(sp)
    de9c:	00c001f4 	movhi	r3,7
    dea0:	18d2ac04 	addi	r3,r3,19120
    dea4:	d9001217 	ldw	r4,72(sp)
    dea8:	300490fa 	slli	r2,r6,3
    deac:	d9401317 	ldw	r5,76(sp)
    deb0:	10c5883a 	add	r2,r2,r3
    deb4:	12000017 	ldw	r8,0(r2)
    deb8:	12400117 	ldw	r9,4(r2)
    debc:	400d883a 	mov	r6,r8
    dec0:	480f883a 	mov	r7,r9
    dec4:	0009cb00 	call	9cb0 <__ltdf2>
    dec8:	1000030e 	bge	r2,zero,ded8 <_dtoa_r+0x79c>
    decc:	d8800d17 	ldw	r2,52(sp)
    ded0:	10bfffc4 	addi	r2,r2,-1
    ded4:	d8800d15 	stw	r2,52(sp)
    ded8:	d8000c15 	stw	zero,48(sp)
    dedc:	003ea806 	br	d980 <_dtoa_r+0x244>
    dee0:	d9000b17 	ldw	r4,44(sp)
    dee4:	202cc03a 	cmpne	r22,r4,zero
    dee8:	b000c71e 	bne	r22,zero,e208 <_dtoa_r+0xacc>
    deec:	dc001117 	ldw	r16,68(sp)
    def0:	dc801017 	ldw	r18,64(sp)
    def4:	0027883a 	mov	r19,zero
    def8:	04000b0e 	bge	zero,r16,df28 <_dtoa_r+0x7ec>
    defc:	d8c00a17 	ldw	r3,40(sp)
    df00:	00c0090e 	bge	zero,r3,df28 <_dtoa_r+0x7ec>
    df04:	8005883a 	mov	r2,r16
    df08:	1c011316 	blt	r3,r16,e358 <_dtoa_r+0xc1c>
    df0c:	d9000a17 	ldw	r4,40(sp)
    df10:	d9801117 	ldw	r6,68(sp)
    df14:	80a1c83a 	sub	r16,r16,r2
    df18:	2089c83a 	sub	r4,r4,r2
    df1c:	308dc83a 	sub	r6,r6,r2
    df20:	d9000a15 	stw	r4,40(sp)
    df24:	d9801115 	stw	r6,68(sp)
    df28:	d8801017 	ldw	r2,64(sp)
    df2c:	0080150e 	bge	zero,r2,df84 <_dtoa_r+0x848>
    df30:	d8c00b17 	ldw	r3,44(sp)
    df34:	1805003a 	cmpeq	r2,r3,zero
    df38:	1001c91e 	bne	r2,zero,e660 <_dtoa_r+0xf24>
    df3c:	04800e0e 	bge	zero,r18,df78 <_dtoa_r+0x83c>
    df40:	d9001617 	ldw	r4,88(sp)
    df44:	980b883a 	mov	r5,r19
    df48:	900d883a 	mov	r6,r18
    df4c:	0010ed80 	call	10ed8 <__pow5mult>
    df50:	d9001617 	ldw	r4,88(sp)
    df54:	d9800717 	ldw	r6,28(sp)
    df58:	100b883a 	mov	r5,r2
    df5c:	1027883a 	mov	r19,r2
    df60:	0010b1c0 	call	10b1c <__multiply>
    df64:	d9001617 	ldw	r4,88(sp)
    df68:	d9400717 	ldw	r5,28(sp)
    df6c:	1023883a 	mov	r17,r2
    df70:	001008c0 	call	1008c <_Bfree>
    df74:	dc400715 	stw	r17,28(sp)
    df78:	d9001017 	ldw	r4,64(sp)
    df7c:	248dc83a 	sub	r6,r4,r18
    df80:	30010e1e 	bne	r6,zero,e3bc <_dtoa_r+0xc80>
    df84:	d9001617 	ldw	r4,88(sp)
    df88:	04400044 	movi	r17,1
    df8c:	880b883a 	mov	r5,r17
    df90:	0010d700 	call	10d70 <__i2b>
    df94:	d9800917 	ldw	r6,36(sp)
    df98:	1025883a 	mov	r18,r2
    df9c:	0180040e 	bge	zero,r6,dfb0 <_dtoa_r+0x874>
    dfa0:	d9001617 	ldw	r4,88(sp)
    dfa4:	100b883a 	mov	r5,r2
    dfa8:	0010ed80 	call	10ed8 <__pow5mult>
    dfac:	1025883a 	mov	r18,r2
    dfb0:	d8801717 	ldw	r2,92(sp)
    dfb4:	8880f30e 	bge	r17,r2,e384 <_dtoa_r+0xc48>
    dfb8:	0023883a 	mov	r17,zero
    dfbc:	d9800917 	ldw	r6,36(sp)
    dfc0:	30019e1e 	bne	r6,zero,e63c <_dtoa_r+0xf00>
    dfc4:	00c00044 	movi	r3,1
    dfc8:	d9000a17 	ldw	r4,40(sp)
    dfcc:	20c5883a 	add	r2,r4,r3
    dfd0:	10c007cc 	andi	r3,r2,31
    dfd4:	1800841e 	bne	r3,zero,e1e8 <_dtoa_r+0xaac>
    dfd8:	00800704 	movi	r2,28
    dfdc:	d9000a17 	ldw	r4,40(sp)
    dfe0:	d9801117 	ldw	r6,68(sp)
    dfe4:	80a1883a 	add	r16,r16,r2
    dfe8:	2089883a 	add	r4,r4,r2
    dfec:	308d883a 	add	r6,r6,r2
    dff0:	d9000a15 	stw	r4,40(sp)
    dff4:	d9801115 	stw	r6,68(sp)
    dff8:	d8801117 	ldw	r2,68(sp)
    dffc:	0080050e 	bge	zero,r2,e014 <_dtoa_r+0x8d8>
    e000:	d9400717 	ldw	r5,28(sp)
    e004:	d9001617 	ldw	r4,88(sp)
    e008:	100d883a 	mov	r6,r2
    e00c:	00109d00 	call	109d0 <__lshift>
    e010:	d8800715 	stw	r2,28(sp)
    e014:	d8c00a17 	ldw	r3,40(sp)
    e018:	00c0050e 	bge	zero,r3,e030 <_dtoa_r+0x8f4>
    e01c:	d9001617 	ldw	r4,88(sp)
    e020:	900b883a 	mov	r5,r18
    e024:	180d883a 	mov	r6,r3
    e028:	00109d00 	call	109d0 <__lshift>
    e02c:	1025883a 	mov	r18,r2
    e030:	d9000c17 	ldw	r4,48(sp)
    e034:	2005003a 	cmpeq	r2,r4,zero
    e038:	10016f26 	beq	r2,zero,e5f8 <_dtoa_r+0xebc>
    e03c:	d9000f17 	ldw	r4,60(sp)
    e040:	0102170e 	bge	zero,r4,e8a0 <_dtoa_r+0x1164>
    e044:	d9800b17 	ldw	r6,44(sp)
    e048:	3005003a 	cmpeq	r2,r6,zero
    e04c:	1000881e 	bne	r2,zero,e270 <_dtoa_r+0xb34>
    e050:	0400050e 	bge	zero,r16,e068 <_dtoa_r+0x92c>
    e054:	d9001617 	ldw	r4,88(sp)
    e058:	980b883a 	mov	r5,r19
    e05c:	800d883a 	mov	r6,r16
    e060:	00109d00 	call	109d0 <__lshift>
    e064:	1027883a 	mov	r19,r2
    e068:	8804c03a 	cmpne	r2,r17,zero
    e06c:	1002541e 	bne	r2,zero,e9c0 <_dtoa_r+0x1284>
    e070:	980b883a 	mov	r5,r19
    e074:	dd800517 	ldw	r22,20(sp)
    e078:	dcc00615 	stw	r19,24(sp)
    e07c:	a700004c 	andi	fp,r20,1
    e080:	2827883a 	mov	r19,r5
    e084:	d9000717 	ldw	r4,28(sp)
    e088:	900b883a 	mov	r5,r18
    e08c:	000d4f80 	call	d4f8 <quorem>
    e090:	d9000717 	ldw	r4,28(sp)
    e094:	d9400617 	ldw	r5,24(sp)
    e098:	1023883a 	mov	r17,r2
    e09c:	8dc00c04 	addi	r23,r17,48
    e0a0:	00101e80 	call	101e8 <__mcmp>
    e0a4:	d9001617 	ldw	r4,88(sp)
    e0a8:	900b883a 	mov	r5,r18
    e0ac:	980d883a 	mov	r6,r19
    e0b0:	1029883a 	mov	r20,r2
    e0b4:	00108440 	call	10844 <__mdiff>
    e0b8:	102b883a 	mov	r21,r2
    e0bc:	10800317 	ldw	r2,12(r2)
    e0c0:	1001281e 	bne	r2,zero,e564 <_dtoa_r+0xe28>
    e0c4:	d9000717 	ldw	r4,28(sp)
    e0c8:	a80b883a 	mov	r5,r21
    e0cc:	00101e80 	call	101e8 <__mcmp>
    e0d0:	d9001617 	ldw	r4,88(sp)
    e0d4:	1021883a 	mov	r16,r2
    e0d8:	a80b883a 	mov	r5,r21
    e0dc:	001008c0 	call	1008c <_Bfree>
    e0e0:	8000041e 	bne	r16,zero,e0f4 <_dtoa_r+0x9b8>
    e0e4:	d8801717 	ldw	r2,92(sp)
    e0e8:	1000021e 	bne	r2,zero,e0f4 <_dtoa_r+0x9b8>
    e0ec:	e004c03a 	cmpne	r2,fp,zero
    e0f0:	10011726 	beq	r2,zero,e550 <_dtoa_r+0xe14>
    e0f4:	a0010616 	blt	r20,zero,e510 <_dtoa_r+0xdd4>
    e0f8:	a000041e 	bne	r20,zero,e10c <_dtoa_r+0x9d0>
    e0fc:	d8c01717 	ldw	r3,92(sp)
    e100:	1800021e 	bne	r3,zero,e10c <_dtoa_r+0x9d0>
    e104:	e004c03a 	cmpne	r2,fp,zero
    e108:	10010126 	beq	r2,zero,e510 <_dtoa_r+0xdd4>
    e10c:	04023d16 	blt	zero,r16,ea04 <_dtoa_r+0x12c8>
    e110:	b5c00005 	stb	r23,0(r22)
    e114:	d9800517 	ldw	r6,20(sp)
    e118:	d9000f17 	ldw	r4,60(sp)
    e11c:	b5800044 	addi	r22,r22,1
    e120:	3105883a 	add	r2,r6,r4
    e124:	b0806526 	beq	r22,r2,e2bc <_dtoa_r+0xb80>
    e128:	d9400717 	ldw	r5,28(sp)
    e12c:	d9001617 	ldw	r4,88(sp)
    e130:	01800284 	movi	r6,10
    e134:	000f883a 	mov	r7,zero
    e138:	0010dac0 	call	10dac <__multadd>
    e13c:	d8800715 	stw	r2,28(sp)
    e140:	d8800617 	ldw	r2,24(sp)
    e144:	14c10c26 	beq	r2,r19,e578 <_dtoa_r+0xe3c>
    e148:	d9400617 	ldw	r5,24(sp)
    e14c:	d9001617 	ldw	r4,88(sp)
    e150:	01800284 	movi	r6,10
    e154:	000f883a 	mov	r7,zero
    e158:	0010dac0 	call	10dac <__multadd>
    e15c:	d9001617 	ldw	r4,88(sp)
    e160:	980b883a 	mov	r5,r19
    e164:	01800284 	movi	r6,10
    e168:	000f883a 	mov	r7,zero
    e16c:	d8800615 	stw	r2,24(sp)
    e170:	0010dac0 	call	10dac <__multadd>
    e174:	1027883a 	mov	r19,r2
    e178:	003fc206 	br	e084 <_dtoa_r+0x948>
    e17c:	2445c83a 	sub	r2,r4,r17
    e180:	a088983a 	sll	r4,r20,r2
    e184:	003e4b06 	br	dab4 <_dtoa_r+0x378>
    e188:	01bfffc4 	movi	r6,-1
    e18c:	00800044 	movi	r2,1
    e190:	d9800e15 	stw	r6,56(sp)
    e194:	d9800f15 	stw	r6,60(sp)
    e198:	d8800b15 	stw	r2,44(sp)
    e19c:	d8c01617 	ldw	r3,88(sp)
    e1a0:	008005c4 	movi	r2,23
    e1a4:	18001115 	stw	zero,68(r3)
    e1a8:	1580082e 	bgeu	r2,r22,e1cc <_dtoa_r+0xa90>
    e1ac:	00c00104 	movi	r3,4
    e1b0:	0009883a 	mov	r4,zero
    e1b4:	18c7883a 	add	r3,r3,r3
    e1b8:	18800504 	addi	r2,r3,20
    e1bc:	21000044 	addi	r4,r4,1
    e1c0:	b0bffc2e 	bgeu	r22,r2,e1b4 <_dtoa_r+0xa78>
    e1c4:	d9801617 	ldw	r6,88(sp)
    e1c8:	31001115 	stw	r4,68(r6)
    e1cc:	dc000f17 	ldw	r16,60(sp)
    e1d0:	003e4b06 	br	db00 <_dtoa_r+0x3c4>
    e1d4:	d9801717 	ldw	r6,92(sp)
    e1d8:	0023883a 	mov	r17,zero
    e1dc:	31bfff04 	addi	r6,r6,-4
    e1e0:	d9801715 	stw	r6,92(sp)
    e1e4:	003df806 	br	d9c8 <_dtoa_r+0x28c>
    e1e8:	00800804 	movi	r2,32
    e1ec:	10c9c83a 	sub	r4,r2,r3
    e1f0:	00c00104 	movi	r3,4
    e1f4:	19005a16 	blt	r3,r4,e360 <_dtoa_r+0xc24>
    e1f8:	008000c4 	movi	r2,3
    e1fc:	113f7e16 	blt	r2,r4,dff8 <_dtoa_r+0x8bc>
    e200:	20800704 	addi	r2,r4,28
    e204:	003f7506 	br	dfdc <_dtoa_r+0x8a0>
    e208:	d9801717 	ldw	r6,92(sp)
    e20c:	00800044 	movi	r2,1
    e210:	1180a10e 	bge	r2,r6,e498 <_dtoa_r+0xd5c>
    e214:	d9800f17 	ldw	r6,60(sp)
    e218:	d8c01017 	ldw	r3,64(sp)
    e21c:	30bfffc4 	addi	r2,r6,-1
    e220:	1881c616 	blt	r3,r2,e93c <_dtoa_r+0x1200>
    e224:	18a5c83a 	sub	r18,r3,r2
    e228:	d8800f17 	ldw	r2,60(sp)
    e22c:	10026216 	blt	r2,zero,ebb8 <_dtoa_r+0x147c>
    e230:	dc001117 	ldw	r16,68(sp)
    e234:	1007883a 	mov	r3,r2
    e238:	d9800a17 	ldw	r6,40(sp)
    e23c:	d8801117 	ldw	r2,68(sp)
    e240:	d9001617 	ldw	r4,88(sp)
    e244:	30cd883a 	add	r6,r6,r3
    e248:	10c5883a 	add	r2,r2,r3
    e24c:	01400044 	movi	r5,1
    e250:	d9800a15 	stw	r6,40(sp)
    e254:	d8801115 	stw	r2,68(sp)
    e258:	0010d700 	call	10d70 <__i2b>
    e25c:	1027883a 	mov	r19,r2
    e260:	003f2506 	br	def8 <_dtoa_r+0x7bc>
    e264:	00c001f4 	movhi	r3,7
    e268:	18d28f04 	addi	r3,r3,19004
    e26c:	003d6706 	br	d80c <_dtoa_r+0xd0>
    e270:	dd800517 	ldw	r22,20(sp)
    e274:	04000044 	movi	r16,1
    e278:	00000706 	br	e298 <_dtoa_r+0xb5c>
    e27c:	d9400717 	ldw	r5,28(sp)
    e280:	d9001617 	ldw	r4,88(sp)
    e284:	01800284 	movi	r6,10
    e288:	000f883a 	mov	r7,zero
    e28c:	0010dac0 	call	10dac <__multadd>
    e290:	d8800715 	stw	r2,28(sp)
    e294:	84000044 	addi	r16,r16,1
    e298:	d9000717 	ldw	r4,28(sp)
    e29c:	900b883a 	mov	r5,r18
    e2a0:	000d4f80 	call	d4f8 <quorem>
    e2a4:	15c00c04 	addi	r23,r2,48
    e2a8:	b5c00005 	stb	r23,0(r22)
    e2ac:	d8c00f17 	ldw	r3,60(sp)
    e2b0:	b5800044 	addi	r22,r22,1
    e2b4:	80fff116 	blt	r16,r3,e27c <_dtoa_r+0xb40>
    e2b8:	d8000615 	stw	zero,24(sp)
    e2bc:	d9400717 	ldw	r5,28(sp)
    e2c0:	d9001617 	ldw	r4,88(sp)
    e2c4:	01800044 	movi	r6,1
    e2c8:	00109d00 	call	109d0 <__lshift>
    e2cc:	1009883a 	mov	r4,r2
    e2d0:	900b883a 	mov	r5,r18
    e2d4:	d8800715 	stw	r2,28(sp)
    e2d8:	00101e80 	call	101e8 <__mcmp>
    e2dc:	00803c0e 	bge	zero,r2,e3d0 <_dtoa_r+0xc94>
    e2e0:	b009883a 	mov	r4,r22
    e2e4:	213fffc4 	addi	r4,r4,-1
    e2e8:	21400003 	ldbu	r5,0(r4)
    e2ec:	00800e44 	movi	r2,57
    e2f0:	28c03fcc 	andi	r3,r5,255
    e2f4:	18c0201c 	xori	r3,r3,128
    e2f8:	18ffe004 	addi	r3,r3,-128
    e2fc:	1881981e 	bne	r3,r2,e960 <_dtoa_r+0x1224>
    e300:	d9800517 	ldw	r6,20(sp)
    e304:	21bff71e 	bne	r4,r6,e2e4 <_dtoa_r+0xba8>
    e308:	d8800d17 	ldw	r2,52(sp)
    e30c:	37000044 	addi	fp,r6,1
    e310:	10800044 	addi	r2,r2,1
    e314:	d8800d15 	stw	r2,52(sp)
    e318:	00800c44 	movi	r2,49
    e31c:	30800005 	stb	r2,0(r6)
    e320:	d9001617 	ldw	r4,88(sp)
    e324:	900b883a 	mov	r5,r18
    e328:	001008c0 	call	1008c <_Bfree>
    e32c:	983ecd26 	beq	r19,zero,de64 <_dtoa_r+0x728>
    e330:	d8c00617 	ldw	r3,24(sp)
    e334:	18000426 	beq	r3,zero,e348 <_dtoa_r+0xc0c>
    e338:	1cc00326 	beq	r3,r19,e348 <_dtoa_r+0xc0c>
    e33c:	d9001617 	ldw	r4,88(sp)
    e340:	180b883a 	mov	r5,r3
    e344:	001008c0 	call	1008c <_Bfree>
    e348:	d9001617 	ldw	r4,88(sp)
    e34c:	980b883a 	mov	r5,r19
    e350:	001008c0 	call	1008c <_Bfree>
    e354:	003ec306 	br	de64 <_dtoa_r+0x728>
    e358:	1805883a 	mov	r2,r3
    e35c:	003eeb06 	br	df0c <_dtoa_r+0x7d0>
    e360:	d9800a17 	ldw	r6,40(sp)
    e364:	d8c01117 	ldw	r3,68(sp)
    e368:	20bfff04 	addi	r2,r4,-4
    e36c:	308d883a 	add	r6,r6,r2
    e370:	1887883a 	add	r3,r3,r2
    e374:	80a1883a 	add	r16,r16,r2
    e378:	d9800a15 	stw	r6,40(sp)
    e37c:	d8c01115 	stw	r3,68(sp)
    e380:	003f1d06 	br	dff8 <_dtoa_r+0x8bc>
    e384:	a03f0c1e 	bne	r20,zero,dfb8 <_dtoa_r+0x87c>
    e388:	00800434 	movhi	r2,16
    e38c:	10bfffc4 	addi	r2,r2,-1
    e390:	a884703a 	and	r2,r21,r2
    e394:	103f081e 	bne	r2,zero,dfb8 <_dtoa_r+0x87c>
    e398:	a89ffc2c 	andhi	r2,r21,32752
    e39c:	103f0626 	beq	r2,zero,dfb8 <_dtoa_r+0x87c>
    e3a0:	d8c01117 	ldw	r3,68(sp)
    e3a4:	d9000a17 	ldw	r4,40(sp)
    e3a8:	18c00044 	addi	r3,r3,1
    e3ac:	21000044 	addi	r4,r4,1
    e3b0:	d8c01115 	stw	r3,68(sp)
    e3b4:	d9000a15 	stw	r4,40(sp)
    e3b8:	003f0006 	br	dfbc <_dtoa_r+0x880>
    e3bc:	d9400717 	ldw	r5,28(sp)
    e3c0:	d9001617 	ldw	r4,88(sp)
    e3c4:	0010ed80 	call	10ed8 <__pow5mult>
    e3c8:	d8800715 	stw	r2,28(sp)
    e3cc:	003eed06 	br	df84 <_dtoa_r+0x848>
    e3d0:	1000021e 	bne	r2,zero,e3dc <_dtoa_r+0xca0>
    e3d4:	b880004c 	andi	r2,r23,1
    e3d8:	103fc11e 	bne	r2,zero,e2e0 <_dtoa_r+0xba4>
    e3dc:	b5bfffc4 	addi	r22,r22,-1
    e3e0:	b0c00007 	ldb	r3,0(r22)
    e3e4:	00800c04 	movi	r2,48
    e3e8:	18bffc26 	beq	r3,r2,e3dc <_dtoa_r+0xca0>
    e3ec:	b7000044 	addi	fp,r22,1
    e3f0:	003fcb06 	br	e320 <_dtoa_r+0xbe4>
    e3f4:	d9800d17 	ldw	r6,52(sp)
    e3f8:	018fc83a 	sub	r7,zero,r6
    e3fc:	3801f726 	beq	r7,zero,ebdc <_dtoa_r+0x14a0>
    e400:	398003cc 	andi	r6,r7,15
    e404:	300c90fa 	slli	r6,r6,3
    e408:	014001f4 	movhi	r5,7
    e40c:	2952ac04 	addi	r5,r5,19120
    e410:	d9001217 	ldw	r4,72(sp)
    e414:	314d883a 	add	r6,r6,r5
    e418:	30c00117 	ldw	r3,4(r6)
    e41c:	30800017 	ldw	r2,0(r6)
    e420:	d9401317 	ldw	r5,76(sp)
    e424:	3821d13a 	srai	r16,r7,4
    e428:	100d883a 	mov	r6,r2
    e42c:	180f883a 	mov	r7,r3
    e430:	00096940 	call	9694 <__muldf3>
    e434:	1011883a 	mov	r8,r2
    e438:	1813883a 	mov	r9,r3
    e43c:	1029883a 	mov	r20,r2
    e440:	182b883a 	mov	r21,r3
    e444:	8001e526 	beq	r16,zero,ebdc <_dtoa_r+0x14a0>
    e448:	05800084 	movi	r22,2
    e44c:	044001f4 	movhi	r17,7
    e450:	8c52de04 	addi	r17,r17,19320
    e454:	8080004c 	andi	r2,r16,1
    e458:	1005003a 	cmpeq	r2,r2,zero
    e45c:	1000081e 	bne	r2,zero,e480 <_dtoa_r+0xd44>
    e460:	89800017 	ldw	r6,0(r17)
    e464:	89c00117 	ldw	r7,4(r17)
    e468:	480b883a 	mov	r5,r9
    e46c:	4009883a 	mov	r4,r8
    e470:	00096940 	call	9694 <__muldf3>
    e474:	1011883a 	mov	r8,r2
    e478:	b5800044 	addi	r22,r22,1
    e47c:	1813883a 	mov	r9,r3
    e480:	8021d07a 	srai	r16,r16,1
    e484:	8c400204 	addi	r17,r17,8
    e488:	803ff21e 	bne	r16,zero,e454 <_dtoa_r+0xd18>
    e48c:	4029883a 	mov	r20,r8
    e490:	482b883a 	mov	r21,r9
    e494:	003dca06 	br	dbc0 <_dtoa_r+0x484>
    e498:	d9000817 	ldw	r4,32(sp)
    e49c:	2005003a 	cmpeq	r2,r4,zero
    e4a0:	1001f61e 	bne	r2,zero,ec7c <_dtoa_r+0x1540>
    e4a4:	dc001117 	ldw	r16,68(sp)
    e4a8:	dc801017 	ldw	r18,64(sp)
    e4ac:	18c10cc4 	addi	r3,r3,1075
    e4b0:	003f6106 	br	e238 <_dtoa_r+0xafc>
    e4b4:	d8000b15 	stw	zero,44(sp)
    e4b8:	d9802617 	ldw	r6,152(sp)
    e4bc:	d8c00d17 	ldw	r3,52(sp)
    e4c0:	30800044 	addi	r2,r6,1
    e4c4:	18ad883a 	add	r22,r3,r2
    e4c8:	b13fffc4 	addi	r4,r22,-1
    e4cc:	d9000e15 	stw	r4,56(sp)
    e4d0:	0581f60e 	bge	zero,r22,ecac <_dtoa_r+0x1570>
    e4d4:	dd800f15 	stw	r22,60(sp)
    e4d8:	003f3006 	br	e19c <_dtoa_r+0xa60>
    e4dc:	d8000b15 	stw	zero,44(sp)
    e4e0:	d9002617 	ldw	r4,152(sp)
    e4e4:	0101eb0e 	bge	zero,r4,ec94 <_dtoa_r+0x1558>
    e4e8:	202d883a 	mov	r22,r4
    e4ec:	d9000e15 	stw	r4,56(sp)
    e4f0:	d9000f15 	stw	r4,60(sp)
    e4f4:	003f2906 	br	e19c <_dtoa_r+0xa60>
    e4f8:	01800044 	movi	r6,1
    e4fc:	d9800b15 	stw	r6,44(sp)
    e500:	003ff706 	br	e4e0 <_dtoa_r+0xda4>
    e504:	01000044 	movi	r4,1
    e508:	d9000b15 	stw	r4,44(sp)
    e50c:	003fea06 	br	e4b8 <_dtoa_r+0xd7c>
    e510:	04000c0e 	bge	zero,r16,e544 <_dtoa_r+0xe08>
    e514:	d9400717 	ldw	r5,28(sp)
    e518:	d9001617 	ldw	r4,88(sp)
    e51c:	01800044 	movi	r6,1
    e520:	00109d00 	call	109d0 <__lshift>
    e524:	1009883a 	mov	r4,r2
    e528:	900b883a 	mov	r5,r18
    e52c:	d8800715 	stw	r2,28(sp)
    e530:	00101e80 	call	101e8 <__mcmp>
    e534:	0081e00e 	bge	zero,r2,ecb8 <_dtoa_r+0x157c>
    e538:	bdc00044 	addi	r23,r23,1
    e53c:	00800e84 	movi	r2,58
    e540:	b881a226 	beq	r23,r2,ebcc <_dtoa_r+0x1490>
    e544:	b7000044 	addi	fp,r22,1
    e548:	b5c00005 	stb	r23,0(r22)
    e54c:	003f7406 	br	e320 <_dtoa_r+0xbe4>
    e550:	00800e44 	movi	r2,57
    e554:	b8819d26 	beq	r23,r2,ebcc <_dtoa_r+0x1490>
    e558:	053ffa0e 	bge	zero,r20,e544 <_dtoa_r+0xe08>
    e55c:	8dc00c44 	addi	r23,r17,49
    e560:	003ff806 	br	e544 <_dtoa_r+0xe08>
    e564:	d9001617 	ldw	r4,88(sp)
    e568:	a80b883a 	mov	r5,r21
    e56c:	04000044 	movi	r16,1
    e570:	001008c0 	call	1008c <_Bfree>
    e574:	003edf06 	br	e0f4 <_dtoa_r+0x9b8>
    e578:	d9001617 	ldw	r4,88(sp)
    e57c:	980b883a 	mov	r5,r19
    e580:	01800284 	movi	r6,10
    e584:	000f883a 	mov	r7,zero
    e588:	0010dac0 	call	10dac <__multadd>
    e58c:	1027883a 	mov	r19,r2
    e590:	d8800615 	stw	r2,24(sp)
    e594:	003ebb06 	br	e084 <_dtoa_r+0x948>
    e598:	d9801117 	ldw	r6,68(sp)
    e59c:	d8800d17 	ldw	r2,52(sp)
    e5a0:	d8000915 	stw	zero,36(sp)
    e5a4:	308dc83a 	sub	r6,r6,r2
    e5a8:	0087c83a 	sub	r3,zero,r2
    e5ac:	d9801115 	stw	r6,68(sp)
    e5b0:	d8c01015 	stw	r3,64(sp)
    e5b4:	003cfe06 	br	d9b0 <_dtoa_r+0x274>
    e5b8:	018dc83a 	sub	r6,zero,r6
    e5bc:	d9801115 	stw	r6,68(sp)
    e5c0:	d8000a15 	stw	zero,40(sp)
    e5c4:	003cf306 	br	d994 <_dtoa_r+0x258>
    e5c8:	d9000d17 	ldw	r4,52(sp)
    e5cc:	0009d380 	call	9d38 <__floatsidf>
    e5d0:	880b883a 	mov	r5,r17
    e5d4:	8009883a 	mov	r4,r16
    e5d8:	180f883a 	mov	r7,r3
    e5dc:	100d883a 	mov	r6,r2
    e5e0:	0012e880 	call	12e88 <__nedf2>
    e5e4:	103ce126 	beq	r2,zero,d96c <_dtoa_r+0x230>
    e5e8:	d9800d17 	ldw	r6,52(sp)
    e5ec:	31bfffc4 	addi	r6,r6,-1
    e5f0:	d9800d15 	stw	r6,52(sp)
    e5f4:	003cdd06 	br	d96c <_dtoa_r+0x230>
    e5f8:	d9000717 	ldw	r4,28(sp)
    e5fc:	900b883a 	mov	r5,r18
    e600:	00101e80 	call	101e8 <__mcmp>
    e604:	103e8d0e 	bge	r2,zero,e03c <_dtoa_r+0x900>
    e608:	d9400717 	ldw	r5,28(sp)
    e60c:	d9001617 	ldw	r4,88(sp)
    e610:	01800284 	movi	r6,10
    e614:	000f883a 	mov	r7,zero
    e618:	0010dac0 	call	10dac <__multadd>
    e61c:	d9800d17 	ldw	r6,52(sp)
    e620:	d8800715 	stw	r2,28(sp)
    e624:	31bfffc4 	addi	r6,r6,-1
    e628:	d9800d15 	stw	r6,52(sp)
    e62c:	b001a71e 	bne	r22,zero,eccc <_dtoa_r+0x1590>
    e630:	d8800e17 	ldw	r2,56(sp)
    e634:	d8800f15 	stw	r2,60(sp)
    e638:	003e8006 	br	e03c <_dtoa_r+0x900>
    e63c:	90800417 	ldw	r2,16(r18)
    e640:	1085883a 	add	r2,r2,r2
    e644:	1085883a 	add	r2,r2,r2
    e648:	1485883a 	add	r2,r2,r18
    e64c:	11000417 	ldw	r4,16(r2)
    e650:	00100b40 	call	100b4 <__hi0bits>
    e654:	00c00804 	movi	r3,32
    e658:	1887c83a 	sub	r3,r3,r2
    e65c:	003e5a06 	br	dfc8 <_dtoa_r+0x88c>
    e660:	d9400717 	ldw	r5,28(sp)
    e664:	d9801017 	ldw	r6,64(sp)
    e668:	d9001617 	ldw	r4,88(sp)
    e66c:	0010ed80 	call	10ed8 <__pow5mult>
    e670:	d8800715 	stw	r2,28(sp)
    e674:	003e4306 	br	df84 <_dtoa_r+0x848>
    e678:	d9800f17 	ldw	r6,60(sp)
    e67c:	d8800d17 	ldw	r2,52(sp)
    e680:	d9800315 	stw	r6,12(sp)
    e684:	d8800415 	stw	r2,16(sp)
    e688:	d8c00b17 	ldw	r3,44(sp)
    e68c:	1805003a 	cmpeq	r2,r3,zero
    e690:	1000e21e 	bne	r2,zero,ea1c <_dtoa_r+0x12e0>
    e694:	d9000317 	ldw	r4,12(sp)
    e698:	0005883a 	mov	r2,zero
    e69c:	00cff834 	movhi	r3,16352
    e6a0:	200c90fa 	slli	r6,r4,3
    e6a4:	010001f4 	movhi	r4,7
    e6a8:	2112ac04 	addi	r4,r4,19120
    e6ac:	180b883a 	mov	r5,r3
    e6b0:	310d883a 	add	r6,r6,r4
    e6b4:	327fff17 	ldw	r9,-4(r6)
    e6b8:	323ffe17 	ldw	r8,-8(r6)
    e6bc:	1009883a 	mov	r4,r2
    e6c0:	480f883a 	mov	r7,r9
    e6c4:	400d883a 	mov	r6,r8
    e6c8:	0009a580 	call	9a58 <__divdf3>
    e6cc:	180b883a 	mov	r5,r3
    e6d0:	b00d883a 	mov	r6,r22
    e6d4:	b80f883a 	mov	r7,r23
    e6d8:	1009883a 	mov	r4,r2
    e6dc:	00095a00 	call	95a0 <__subdf3>
    e6e0:	a80b883a 	mov	r5,r21
    e6e4:	a009883a 	mov	r4,r20
    e6e8:	d8c01915 	stw	r3,100(sp)
    e6ec:	d8801815 	stw	r2,96(sp)
    e6f0:	0009e300 	call	9e30 <__fixdfsi>
    e6f4:	1009883a 	mov	r4,r2
    e6f8:	1027883a 	mov	r19,r2
    e6fc:	0009d380 	call	9d38 <__floatsidf>
    e700:	a80b883a 	mov	r5,r21
    e704:	a009883a 	mov	r4,r20
    e708:	180f883a 	mov	r7,r3
    e70c:	100d883a 	mov	r6,r2
    e710:	00095a00 	call	95a0 <__subdf3>
    e714:	d9801817 	ldw	r6,96(sp)
    e718:	1823883a 	mov	r17,r3
    e71c:	d8801415 	stw	r2,80(sp)
    e720:	302d883a 	mov	r22,r6
    e724:	d9800517 	ldw	r6,20(sp)
    e728:	9cc00c04 	addi	r19,r19,48
    e72c:	dc401515 	stw	r17,84(sp)
    e730:	d8c01917 	ldw	r3,100(sp)
    e734:	34c00005 	stb	r19,0(r6)
    e738:	d8800517 	ldw	r2,20(sp)
    e73c:	d9401917 	ldw	r5,100(sp)
    e740:	d9801417 	ldw	r6,80(sp)
    e744:	b009883a 	mov	r4,r22
    e748:	880f883a 	mov	r7,r17
    e74c:	182f883a 	mov	r23,r3
    e750:	17000044 	addi	fp,r2,1
    e754:	0012f100 	call	12f10 <__gtdf2>
    e758:	00804e16 	blt	zero,r2,e894 <_dtoa_r+0x1158>
    e75c:	d9801417 	ldw	r6,80(sp)
    e760:	0005883a 	mov	r2,zero
    e764:	00cffc34 	movhi	r3,16368
    e768:	180b883a 	mov	r5,r3
    e76c:	880f883a 	mov	r7,r17
    e770:	1009883a 	mov	r4,r2
    e774:	00095a00 	call	95a0 <__subdf3>
    e778:	d9401917 	ldw	r5,100(sp)
    e77c:	180f883a 	mov	r7,r3
    e780:	b009883a 	mov	r4,r22
    e784:	100d883a 	mov	r6,r2
    e788:	0012f100 	call	12f10 <__gtdf2>
    e78c:	00bda216 	blt	zero,r2,de18 <_dtoa_r+0x6dc>
    e790:	d8c00317 	ldw	r3,12(sp)
    e794:	00800044 	movi	r2,1
    e798:	10c01216 	blt	r2,r3,e7e4 <_dtoa_r+0x10a8>
    e79c:	003d4506 	br	dcb4 <_dtoa_r+0x578>
    e7a0:	d9801417 	ldw	r6,80(sp)
    e7a4:	0005883a 	mov	r2,zero
    e7a8:	00cffc34 	movhi	r3,16368
    e7ac:	180b883a 	mov	r5,r3
    e7b0:	880f883a 	mov	r7,r17
    e7b4:	1009883a 	mov	r4,r2
    e7b8:	00095a00 	call	95a0 <__subdf3>
    e7bc:	d9c01b17 	ldw	r7,108(sp)
    e7c0:	180b883a 	mov	r5,r3
    e7c4:	1009883a 	mov	r4,r2
    e7c8:	b00d883a 	mov	r6,r22
    e7cc:	0009cb00 	call	9cb0 <__ltdf2>
    e7d0:	103d9116 	blt	r2,zero,de18 <_dtoa_r+0x6dc>
    e7d4:	d9800517 	ldw	r6,20(sp)
    e7d8:	d9000317 	ldw	r4,12(sp)
    e7dc:	3105883a 	add	r2,r6,r4
    e7e0:	e0bd3426 	beq	fp,r2,dcb4 <_dtoa_r+0x578>
    e7e4:	04500934 	movhi	r17,16420
    e7e8:	0021883a 	mov	r16,zero
    e7ec:	b80b883a 	mov	r5,r23
    e7f0:	b009883a 	mov	r4,r22
    e7f4:	800d883a 	mov	r6,r16
    e7f8:	880f883a 	mov	r7,r17
    e7fc:	00096940 	call	9694 <__muldf3>
    e800:	d9401517 	ldw	r5,84(sp)
    e804:	d9001417 	ldw	r4,80(sp)
    e808:	880f883a 	mov	r7,r17
    e80c:	000d883a 	mov	r6,zero
    e810:	d8801a15 	stw	r2,104(sp)
    e814:	d8c01b15 	stw	r3,108(sp)
    e818:	00096940 	call	9694 <__muldf3>
    e81c:	180b883a 	mov	r5,r3
    e820:	1009883a 	mov	r4,r2
    e824:	1823883a 	mov	r17,r3
    e828:	1021883a 	mov	r16,r2
    e82c:	0009e300 	call	9e30 <__fixdfsi>
    e830:	1009883a 	mov	r4,r2
    e834:	102b883a 	mov	r21,r2
    e838:	0009d380 	call	9d38 <__floatsidf>
    e83c:	880b883a 	mov	r5,r17
    e840:	8009883a 	mov	r4,r16
    e844:	180f883a 	mov	r7,r3
    e848:	100d883a 	mov	r6,r2
    e84c:	00095a00 	call	95a0 <__subdf3>
    e850:	1021883a 	mov	r16,r2
    e854:	d9001b17 	ldw	r4,108(sp)
    e858:	1823883a 	mov	r17,r3
    e85c:	dc001415 	stw	r16,80(sp)
    e860:	ad400c04 	addi	r21,r21,48
    e864:	dc401515 	stw	r17,84(sp)
    e868:	d8801a17 	ldw	r2,104(sp)
    e86c:	e5400005 	stb	r21,0(fp)
    e870:	202f883a 	mov	r23,r4
    e874:	d9c01b17 	ldw	r7,108(sp)
    e878:	d9001417 	ldw	r4,80(sp)
    e87c:	880b883a 	mov	r5,r17
    e880:	100d883a 	mov	r6,r2
    e884:	102d883a 	mov	r22,r2
    e888:	e7000044 	addi	fp,fp,1
    e88c:	0009cb00 	call	9cb0 <__ltdf2>
    e890:	103fc30e 	bge	r2,zero,e7a0 <_dtoa_r+0x1064>
    e894:	d9000417 	ldw	r4,16(sp)
    e898:	d9000d15 	stw	r4,52(sp)
    e89c:	003d7106 	br	de64 <_dtoa_r+0x728>
    e8a0:	d9801717 	ldw	r6,92(sp)
    e8a4:	00800084 	movi	r2,2
    e8a8:	11bde60e 	bge	r2,r6,e044 <_dtoa_r+0x908>
    e8ac:	203cfb1e 	bne	r4,zero,dc9c <_dtoa_r+0x560>
    e8b0:	d9001617 	ldw	r4,88(sp)
    e8b4:	900b883a 	mov	r5,r18
    e8b8:	01800144 	movi	r6,5
    e8bc:	000f883a 	mov	r7,zero
    e8c0:	0010dac0 	call	10dac <__multadd>
    e8c4:	d9000717 	ldw	r4,28(sp)
    e8c8:	100b883a 	mov	r5,r2
    e8cc:	1025883a 	mov	r18,r2
    e8d0:	00101e80 	call	101e8 <__mcmp>
    e8d4:	00bcf10e 	bge	zero,r2,dc9c <_dtoa_r+0x560>
    e8d8:	d8c00d17 	ldw	r3,52(sp)
    e8dc:	d9000517 	ldw	r4,20(sp)
    e8e0:	d8000615 	stw	zero,24(sp)
    e8e4:	18c00044 	addi	r3,r3,1
    e8e8:	d8c00d15 	stw	r3,52(sp)
    e8ec:	00800c44 	movi	r2,49
    e8f0:	27000044 	addi	fp,r4,1
    e8f4:	20800005 	stb	r2,0(r4)
    e8f8:	003e8906 	br	e320 <_dtoa_r+0xbe4>
    e8fc:	d8c00517 	ldw	r3,20(sp)
    e900:	003bc206 	br	d80c <_dtoa_r+0xd0>
    e904:	018001f4 	movhi	r6,7
    e908:	3192de04 	addi	r6,r6,19320
    e90c:	30c00917 	ldw	r3,36(r6)
    e910:	30800817 	ldw	r2,32(r6)
    e914:	d9001217 	ldw	r4,72(sp)
    e918:	d9401317 	ldw	r5,76(sp)
    e91c:	180f883a 	mov	r7,r3
    e920:	100d883a 	mov	r6,r2
    e924:	0009a580 	call	9a58 <__divdf3>
    e928:	948003cc 	andi	r18,r18,15
    e92c:	058000c4 	movi	r22,3
    e930:	1029883a 	mov	r20,r2
    e934:	182b883a 	mov	r21,r3
    e938:	003c8906 	br	db60 <_dtoa_r+0x424>
    e93c:	d9001017 	ldw	r4,64(sp)
    e940:	d9800917 	ldw	r6,36(sp)
    e944:	0025883a 	mov	r18,zero
    e948:	1105c83a 	sub	r2,r2,r4
    e94c:	2089883a 	add	r4,r4,r2
    e950:	308d883a 	add	r6,r6,r2
    e954:	d9001015 	stw	r4,64(sp)
    e958:	d9800915 	stw	r6,36(sp)
    e95c:	003e3206 	br	e228 <_dtoa_r+0xaec>
    e960:	28800044 	addi	r2,r5,1
    e964:	27000044 	addi	fp,r4,1
    e968:	20800005 	stb	r2,0(r4)
    e96c:	003e6c06 	br	e320 <_dtoa_r+0xbe4>
    e970:	d8800f17 	ldw	r2,60(sp)
    e974:	00bce016 	blt	zero,r2,dcf8 <_dtoa_r+0x5bc>
    e978:	d9800f17 	ldw	r6,60(sp)
    e97c:	303cc51e 	bne	r6,zero,dc94 <_dtoa_r+0x558>
    e980:	0005883a 	mov	r2,zero
    e984:	00d00534 	movhi	r3,16404
    e988:	980b883a 	mov	r5,r19
    e98c:	180f883a 	mov	r7,r3
    e990:	9009883a 	mov	r4,r18
    e994:	100d883a 	mov	r6,r2
    e998:	00096940 	call	9694 <__muldf3>
    e99c:	180b883a 	mov	r5,r3
    e9a0:	a80f883a 	mov	r7,r21
    e9a4:	1009883a 	mov	r4,r2
    e9a8:	a00d883a 	mov	r6,r20
    e9ac:	0012f980 	call	12f98 <__gedf2>
    e9b0:	103cb80e 	bge	r2,zero,dc94 <_dtoa_r+0x558>
    e9b4:	0027883a 	mov	r19,zero
    e9b8:	0025883a 	mov	r18,zero
    e9bc:	003fc606 	br	e8d8 <_dtoa_r+0x119c>
    e9c0:	99400117 	ldw	r5,4(r19)
    e9c4:	d9001617 	ldw	r4,88(sp)
    e9c8:	001060c0 	call	1060c <_Balloc>
    e9cc:	99800417 	ldw	r6,16(r19)
    e9d0:	11000304 	addi	r4,r2,12
    e9d4:	99400304 	addi	r5,r19,12
    e9d8:	318d883a 	add	r6,r6,r6
    e9dc:	318d883a 	add	r6,r6,r6
    e9e0:	31800204 	addi	r6,r6,8
    e9e4:	1023883a 	mov	r17,r2
    e9e8:	000aebc0 	call	aebc <memcpy>
    e9ec:	d9001617 	ldw	r4,88(sp)
    e9f0:	880b883a 	mov	r5,r17
    e9f4:	01800044 	movi	r6,1
    e9f8:	00109d00 	call	109d0 <__lshift>
    e9fc:	100b883a 	mov	r5,r2
    ea00:	003d9c06 	br	e074 <_dtoa_r+0x938>
    ea04:	00800e44 	movi	r2,57
    ea08:	b8807026 	beq	r23,r2,ebcc <_dtoa_r+0x1490>
    ea0c:	b8800044 	addi	r2,r23,1
    ea10:	b7000044 	addi	fp,r22,1
    ea14:	b0800005 	stb	r2,0(r22)
    ea18:	003e4106 	br	e320 <_dtoa_r+0xbe4>
    ea1c:	d8800317 	ldw	r2,12(sp)
    ea20:	018001f4 	movhi	r6,7
    ea24:	3192ac04 	addi	r6,r6,19120
    ea28:	b009883a 	mov	r4,r22
    ea2c:	100e90fa 	slli	r7,r2,3
    ea30:	b80b883a 	mov	r5,r23
    ea34:	398f883a 	add	r7,r7,r6
    ea38:	38bffe17 	ldw	r2,-8(r7)
    ea3c:	d9800517 	ldw	r6,20(sp)
    ea40:	38ffff17 	ldw	r3,-4(r7)
    ea44:	37000044 	addi	fp,r6,1
    ea48:	180f883a 	mov	r7,r3
    ea4c:	100d883a 	mov	r6,r2
    ea50:	00096940 	call	9694 <__muldf3>
    ea54:	a80b883a 	mov	r5,r21
    ea58:	a009883a 	mov	r4,r20
    ea5c:	182f883a 	mov	r23,r3
    ea60:	102d883a 	mov	r22,r2
    ea64:	0009e300 	call	9e30 <__fixdfsi>
    ea68:	1009883a 	mov	r4,r2
    ea6c:	1027883a 	mov	r19,r2
    ea70:	0009d380 	call	9d38 <__floatsidf>
    ea74:	a80b883a 	mov	r5,r21
    ea78:	a009883a 	mov	r4,r20
    ea7c:	180f883a 	mov	r7,r3
    ea80:	100d883a 	mov	r6,r2
    ea84:	00095a00 	call	95a0 <__subdf3>
    ea88:	180b883a 	mov	r5,r3
    ea8c:	d8c00517 	ldw	r3,20(sp)
    ea90:	9cc00c04 	addi	r19,r19,48
    ea94:	1009883a 	mov	r4,r2
    ea98:	1cc00005 	stb	r19,0(r3)
    ea9c:	2021883a 	mov	r16,r4
    eaa0:	d9000317 	ldw	r4,12(sp)
    eaa4:	00800044 	movi	r2,1
    eaa8:	2823883a 	mov	r17,r5
    eaac:	20802226 	beq	r4,r2,eb38 <_dtoa_r+0x13fc>
    eab0:	1029883a 	mov	r20,r2
    eab4:	0005883a 	mov	r2,zero
    eab8:	00d00934 	movhi	r3,16420
    eabc:	180f883a 	mov	r7,r3
    eac0:	100d883a 	mov	r6,r2
    eac4:	880b883a 	mov	r5,r17
    eac8:	8009883a 	mov	r4,r16
    eacc:	00096940 	call	9694 <__muldf3>
    ead0:	180b883a 	mov	r5,r3
    ead4:	1009883a 	mov	r4,r2
    ead8:	1823883a 	mov	r17,r3
    eadc:	1021883a 	mov	r16,r2
    eae0:	0009e300 	call	9e30 <__fixdfsi>
    eae4:	1009883a 	mov	r4,r2
    eae8:	102b883a 	mov	r21,r2
    eaec:	0009d380 	call	9d38 <__floatsidf>
    eaf0:	880b883a 	mov	r5,r17
    eaf4:	8009883a 	mov	r4,r16
    eaf8:	180f883a 	mov	r7,r3
    eafc:	100d883a 	mov	r6,r2
    eb00:	00095a00 	call	95a0 <__subdf3>
    eb04:	180b883a 	mov	r5,r3
    eb08:	d8c00517 	ldw	r3,20(sp)
    eb0c:	1009883a 	mov	r4,r2
    eb10:	ad400c04 	addi	r21,r21,48
    eb14:	1d05883a 	add	r2,r3,r20
    eb18:	15400005 	stb	r21,0(r2)
    eb1c:	2021883a 	mov	r16,r4
    eb20:	d9000317 	ldw	r4,12(sp)
    eb24:	a5000044 	addi	r20,r20,1
    eb28:	2823883a 	mov	r17,r5
    eb2c:	a13fe11e 	bne	r20,r4,eab4 <_dtoa_r+0x1378>
    eb30:	e505883a 	add	r2,fp,r20
    eb34:	173fffc4 	addi	fp,r2,-1
    eb38:	0025883a 	mov	r18,zero
    eb3c:	04cff834 	movhi	r19,16352
    eb40:	b009883a 	mov	r4,r22
    eb44:	b80b883a 	mov	r5,r23
    eb48:	900d883a 	mov	r6,r18
    eb4c:	980f883a 	mov	r7,r19
    eb50:	00096200 	call	9620 <__adddf3>
    eb54:	180b883a 	mov	r5,r3
    eb58:	1009883a 	mov	r4,r2
    eb5c:	800d883a 	mov	r6,r16
    eb60:	880f883a 	mov	r7,r17
    eb64:	0009cb00 	call	9cb0 <__ltdf2>
    eb68:	103cab16 	blt	r2,zero,de18 <_dtoa_r+0x6dc>
    eb6c:	0009883a 	mov	r4,zero
    eb70:	980b883a 	mov	r5,r19
    eb74:	b80f883a 	mov	r7,r23
    eb78:	b00d883a 	mov	r6,r22
    eb7c:	00095a00 	call	95a0 <__subdf3>
    eb80:	180b883a 	mov	r5,r3
    eb84:	880f883a 	mov	r7,r17
    eb88:	1009883a 	mov	r4,r2
    eb8c:	800d883a 	mov	r6,r16
    eb90:	0012f100 	call	12f10 <__gtdf2>
    eb94:	00bc470e 	bge	zero,r2,dcb4 <_dtoa_r+0x578>
    eb98:	00c00c04 	movi	r3,48
    eb9c:	e73fffc4 	addi	fp,fp,-1
    eba0:	e0800007 	ldb	r2,0(fp)
    eba4:	10fffd26 	beq	r2,r3,eb9c <_dtoa_r+0x1460>
    eba8:	d9800417 	ldw	r6,16(sp)
    ebac:	e7000044 	addi	fp,fp,1
    ebb0:	d9800d15 	stw	r6,52(sp)
    ebb4:	003cab06 	br	de64 <_dtoa_r+0x728>
    ebb8:	d8c00f17 	ldw	r3,60(sp)
    ebbc:	d9001117 	ldw	r4,68(sp)
    ebc0:	20e1c83a 	sub	r16,r4,r3
    ebc4:	0007883a 	mov	r3,zero
    ebc8:	003d9b06 	br	e238 <_dtoa_r+0xafc>
    ebcc:	00800e44 	movi	r2,57
    ebd0:	b0800005 	stb	r2,0(r22)
    ebd4:	b5800044 	addi	r22,r22,1
    ebd8:	003dc106 	br	e2e0 <_dtoa_r+0xba4>
    ebdc:	05800084 	movi	r22,2
    ebe0:	003bf706 	br	dbc0 <_dtoa_r+0x484>
    ebe4:	d9000f17 	ldw	r4,60(sp)
    ebe8:	013c000e 	bge	zero,r4,dbec <_dtoa_r+0x4b0>
    ebec:	d9800e17 	ldw	r6,56(sp)
    ebf0:	01bc300e 	bge	zero,r6,dcb4 <_dtoa_r+0x578>
    ebf4:	0005883a 	mov	r2,zero
    ebf8:	00d00934 	movhi	r3,16420
    ebfc:	a80b883a 	mov	r5,r21
    ec00:	180f883a 	mov	r7,r3
    ec04:	a009883a 	mov	r4,r20
    ec08:	100d883a 	mov	r6,r2
    ec0c:	00096940 	call	9694 <__muldf3>
    ec10:	b1000044 	addi	r4,r22,1
    ec14:	1021883a 	mov	r16,r2
    ec18:	1823883a 	mov	r17,r3
    ec1c:	0009d380 	call	9d38 <__floatsidf>
    ec20:	880b883a 	mov	r5,r17
    ec24:	8009883a 	mov	r4,r16
    ec28:	180f883a 	mov	r7,r3
    ec2c:	100d883a 	mov	r6,r2
    ec30:	00096940 	call	9694 <__muldf3>
    ec34:	0011883a 	mov	r8,zero
    ec38:	02500734 	movhi	r9,16412
    ec3c:	180b883a 	mov	r5,r3
    ec40:	480f883a 	mov	r7,r9
    ec44:	1009883a 	mov	r4,r2
    ec48:	400d883a 	mov	r6,r8
    ec4c:	00096200 	call	9620 <__adddf3>
    ec50:	102d883a 	mov	r22,r2
    ec54:	00bf3034 	movhi	r2,64704
    ec58:	10ef883a 	add	r23,r2,r3
    ec5c:	d8800d17 	ldw	r2,52(sp)
    ec60:	d8c00e17 	ldw	r3,56(sp)
    ec64:	8029883a 	mov	r20,r16
    ec68:	10bfffc4 	addi	r2,r2,-1
    ec6c:	882b883a 	mov	r21,r17
    ec70:	d8800415 	stw	r2,16(sp)
    ec74:	d8c00315 	stw	r3,12(sp)
    ec78:	003e8306 	br	e688 <_dtoa_r+0xf4c>
    ec7c:	d8800117 	ldw	r2,4(sp)
    ec80:	dc001117 	ldw	r16,68(sp)
    ec84:	dc801017 	ldw	r18,64(sp)
    ec88:	00c00d84 	movi	r3,54
    ec8c:	1887c83a 	sub	r3,r3,r2
    ec90:	003d6906 	br	e238 <_dtoa_r+0xafc>
    ec94:	01800044 	movi	r6,1
    ec98:	3021883a 	mov	r16,r6
    ec9c:	d9800f15 	stw	r6,60(sp)
    eca0:	d9802615 	stw	r6,152(sp)
    eca4:	d9800e15 	stw	r6,56(sp)
    eca8:	003b9306 	br	daf8 <_dtoa_r+0x3bc>
    ecac:	b021883a 	mov	r16,r22
    ecb0:	dd800f15 	stw	r22,60(sp)
    ecb4:	003b9006 	br	daf8 <_dtoa_r+0x3bc>
    ecb8:	103e221e 	bne	r2,zero,e544 <_dtoa_r+0xe08>
    ecbc:	b880004c 	andi	r2,r23,1
    ecc0:	1005003a 	cmpeq	r2,r2,zero
    ecc4:	103e1f1e 	bne	r2,zero,e544 <_dtoa_r+0xe08>
    ecc8:	003e1b06 	br	e538 <_dtoa_r+0xdfc>
    eccc:	d9001617 	ldw	r4,88(sp)
    ecd0:	980b883a 	mov	r5,r19
    ecd4:	01800284 	movi	r6,10
    ecd8:	000f883a 	mov	r7,zero
    ecdc:	0010dac0 	call	10dac <__multadd>
    ece0:	d8c00e17 	ldw	r3,56(sp)
    ece4:	1027883a 	mov	r19,r2
    ece8:	d8c00f15 	stw	r3,60(sp)
    ecec:	003cd306 	br	e03c <_dtoa_r+0x900>

0000ecf0 <_fflush_r>:
    ecf0:	defffb04 	addi	sp,sp,-20
    ecf4:	dcc00315 	stw	r19,12(sp)
    ecf8:	dc800215 	stw	r18,8(sp)
    ecfc:	dfc00415 	stw	ra,16(sp)
    ed00:	dc400115 	stw	r17,4(sp)
    ed04:	dc000015 	stw	r16,0(sp)
    ed08:	2027883a 	mov	r19,r4
    ed0c:	2825883a 	mov	r18,r5
    ed10:	20000226 	beq	r4,zero,ed1c <_fflush_r+0x2c>
    ed14:	20800e17 	ldw	r2,56(r4)
    ed18:	10005626 	beq	r2,zero,ee74 <_fflush_r+0x184>
    ed1c:	9100030b 	ldhu	r4,12(r18)
    ed20:	20ffffcc 	andi	r3,r4,65535
    ed24:	18e0001c 	xori	r3,r3,32768
    ed28:	18e00004 	addi	r3,r3,-32768
    ed2c:	1880020c 	andi	r2,r3,8
    ed30:	1000261e 	bne	r2,zero,edcc <_fflush_r+0xdc>
    ed34:	90c00117 	ldw	r3,4(r18)
    ed38:	20820014 	ori	r2,r4,2048
    ed3c:	9080030d 	sth	r2,12(r18)
    ed40:	1009883a 	mov	r4,r2
    ed44:	00c0400e 	bge	zero,r3,ee48 <_fflush_r+0x158>
    ed48:	92000a17 	ldw	r8,40(r18)
    ed4c:	40004026 	beq	r8,zero,ee50 <_fflush_r+0x160>
    ed50:	2084000c 	andi	r2,r4,4096
    ed54:	10005326 	beq	r2,zero,eea4 <_fflush_r+0x1b4>
    ed58:	94001417 	ldw	r16,80(r18)
    ed5c:	9080030b 	ldhu	r2,12(r18)
    ed60:	1080010c 	andi	r2,r2,4
    ed64:	1000481e 	bne	r2,zero,ee88 <_fflush_r+0x198>
    ed68:	91400717 	ldw	r5,28(r18)
    ed6c:	9809883a 	mov	r4,r19
    ed70:	800d883a 	mov	r6,r16
    ed74:	000f883a 	mov	r7,zero
    ed78:	403ee83a 	callr	r8
    ed7c:	8080261e 	bne	r16,r2,ee18 <_fflush_r+0x128>
    ed80:	9080030b 	ldhu	r2,12(r18)
    ed84:	91000417 	ldw	r4,16(r18)
    ed88:	90000115 	stw	zero,4(r18)
    ed8c:	10bdffcc 	andi	r2,r2,63487
    ed90:	10ffffcc 	andi	r3,r2,65535
    ed94:	18c4000c 	andi	r3,r3,4096
    ed98:	9080030d 	sth	r2,12(r18)
    ed9c:	91000015 	stw	r4,0(r18)
    eda0:	18002b26 	beq	r3,zero,ee50 <_fflush_r+0x160>
    eda4:	0007883a 	mov	r3,zero
    eda8:	1805883a 	mov	r2,r3
    edac:	94001415 	stw	r16,80(r18)
    edb0:	dfc00417 	ldw	ra,16(sp)
    edb4:	dcc00317 	ldw	r19,12(sp)
    edb8:	dc800217 	ldw	r18,8(sp)
    edbc:	dc400117 	ldw	r17,4(sp)
    edc0:	dc000017 	ldw	r16,0(sp)
    edc4:	dec00504 	addi	sp,sp,20
    edc8:	f800283a 	ret
    edcc:	94400417 	ldw	r17,16(r18)
    edd0:	88001f26 	beq	r17,zero,ee50 <_fflush_r+0x160>
    edd4:	90800017 	ldw	r2,0(r18)
    edd8:	18c000cc 	andi	r3,r3,3
    eddc:	94400015 	stw	r17,0(r18)
    ede0:	1461c83a 	sub	r16,r2,r17
    ede4:	18002526 	beq	r3,zero,ee7c <_fflush_r+0x18c>
    ede8:	0005883a 	mov	r2,zero
    edec:	90800215 	stw	r2,8(r18)
    edf0:	0400170e 	bge	zero,r16,ee50 <_fflush_r+0x160>
    edf4:	90c00917 	ldw	r3,36(r18)
    edf8:	91400717 	ldw	r5,28(r18)
    edfc:	880d883a 	mov	r6,r17
    ee00:	800f883a 	mov	r7,r16
    ee04:	9809883a 	mov	r4,r19
    ee08:	183ee83a 	callr	r3
    ee0c:	88a3883a 	add	r17,r17,r2
    ee10:	80a1c83a 	sub	r16,r16,r2
    ee14:	00bff616 	blt	zero,r2,edf0 <_fflush_r+0x100>
    ee18:	9080030b 	ldhu	r2,12(r18)
    ee1c:	00ffffc4 	movi	r3,-1
    ee20:	10801014 	ori	r2,r2,64
    ee24:	9080030d 	sth	r2,12(r18)
    ee28:	1805883a 	mov	r2,r3
    ee2c:	dfc00417 	ldw	ra,16(sp)
    ee30:	dcc00317 	ldw	r19,12(sp)
    ee34:	dc800217 	ldw	r18,8(sp)
    ee38:	dc400117 	ldw	r17,4(sp)
    ee3c:	dc000017 	ldw	r16,0(sp)
    ee40:	dec00504 	addi	sp,sp,20
    ee44:	f800283a 	ret
    ee48:	90800f17 	ldw	r2,60(r18)
    ee4c:	00bfbe16 	blt	zero,r2,ed48 <_fflush_r+0x58>
    ee50:	0007883a 	mov	r3,zero
    ee54:	1805883a 	mov	r2,r3
    ee58:	dfc00417 	ldw	ra,16(sp)
    ee5c:	dcc00317 	ldw	r19,12(sp)
    ee60:	dc800217 	ldw	r18,8(sp)
    ee64:	dc400117 	ldw	r17,4(sp)
    ee68:	dc000017 	ldw	r16,0(sp)
    ee6c:	dec00504 	addi	sp,sp,20
    ee70:	f800283a 	ret
    ee74:	000ef880 	call	ef88 <__sinit>
    ee78:	003fa806 	br	ed1c <_fflush_r+0x2c>
    ee7c:	90800517 	ldw	r2,20(r18)
    ee80:	90800215 	stw	r2,8(r18)
    ee84:	003fda06 	br	edf0 <_fflush_r+0x100>
    ee88:	90800117 	ldw	r2,4(r18)
    ee8c:	90c00c17 	ldw	r3,48(r18)
    ee90:	80a1c83a 	sub	r16,r16,r2
    ee94:	183fb426 	beq	r3,zero,ed68 <_fflush_r+0x78>
    ee98:	90800f17 	ldw	r2,60(r18)
    ee9c:	80a1c83a 	sub	r16,r16,r2
    eea0:	003fb106 	br	ed68 <_fflush_r+0x78>
    eea4:	91400717 	ldw	r5,28(r18)
    eea8:	9809883a 	mov	r4,r19
    eeac:	000d883a 	mov	r6,zero
    eeb0:	01c00044 	movi	r7,1
    eeb4:	403ee83a 	callr	r8
    eeb8:	1021883a 	mov	r16,r2
    eebc:	00bfffc4 	movi	r2,-1
    eec0:	80800226 	beq	r16,r2,eecc <_fflush_r+0x1dc>
    eec4:	92000a17 	ldw	r8,40(r18)
    eec8:	003fa406 	br	ed5c <_fflush_r+0x6c>
    eecc:	98c00017 	ldw	r3,0(r19)
    eed0:	00800744 	movi	r2,29
    eed4:	18bfde26 	beq	r3,r2,ee50 <_fflush_r+0x160>
    eed8:	9080030b 	ldhu	r2,12(r18)
    eedc:	8007883a 	mov	r3,r16
    eee0:	10801014 	ori	r2,r2,64
    eee4:	9080030d 	sth	r2,12(r18)
    eee8:	003fcf06 	br	ee28 <_fflush_r+0x138>

0000eeec <fflush>:
    eeec:	01400074 	movhi	r5,1
    eef0:	297b3c04 	addi	r5,r5,-4880
    eef4:	2007883a 	mov	r3,r4
    eef8:	20000526 	beq	r4,zero,ef10 <fflush+0x24>
    eefc:	00800234 	movhi	r2,8
    ef00:	10a07904 	addi	r2,r2,-32284
    ef04:	11000017 	ldw	r4,0(r2)
    ef08:	180b883a 	mov	r5,r3
    ef0c:	000ecf01 	jmpi	ecf0 <_fflush_r>
    ef10:	00800234 	movhi	r2,8
    ef14:	10a07a04 	addi	r2,r2,-32280
    ef18:	11000017 	ldw	r4,0(r2)
    ef1c:	000faf01 	jmpi	faf0 <_fwalk_reent>

0000ef20 <std>:
    ef20:	00800074 	movhi	r2,1
    ef24:	10864e04 	addi	r2,r2,6456
    ef28:	20800b15 	stw	r2,44(r4)
    ef2c:	00800074 	movhi	r2,1
    ef30:	10868904 	addi	r2,r2,6692
    ef34:	20800815 	stw	r2,32(r4)
    ef38:	00c00074 	movhi	r3,1
    ef3c:	18c66a04 	addi	r3,r3,6568
    ef40:	00800074 	movhi	r2,1
    ef44:	10865004 	addi	r2,r2,6464
    ef48:	2140030d 	sth	r5,12(r4)
    ef4c:	2180038d 	sth	r6,14(r4)
    ef50:	20c00915 	stw	r3,36(r4)
    ef54:	20800a15 	stw	r2,40(r4)
    ef58:	20000015 	stw	zero,0(r4)
    ef5c:	20000115 	stw	zero,4(r4)
    ef60:	20000215 	stw	zero,8(r4)
    ef64:	20000415 	stw	zero,16(r4)
    ef68:	20000515 	stw	zero,20(r4)
    ef6c:	20000615 	stw	zero,24(r4)
    ef70:	21000715 	stw	r4,28(r4)
    ef74:	f800283a 	ret

0000ef78 <__sfp_lock_acquire>:
    ef78:	f800283a 	ret

0000ef7c <__sfp_lock_release>:
    ef7c:	f800283a 	ret

0000ef80 <__sinit_lock_acquire>:
    ef80:	f800283a 	ret

0000ef84 <__sinit_lock_release>:
    ef84:	f800283a 	ret

0000ef88 <__sinit>:
    ef88:	20800e17 	ldw	r2,56(r4)
    ef8c:	defffd04 	addi	sp,sp,-12
    ef90:	dc400115 	stw	r17,4(sp)
    ef94:	dc000015 	stw	r16,0(sp)
    ef98:	dfc00215 	stw	ra,8(sp)
    ef9c:	04400044 	movi	r17,1
    efa0:	01400104 	movi	r5,4
    efa4:	000d883a 	mov	r6,zero
    efa8:	2021883a 	mov	r16,r4
    efac:	2200bb04 	addi	r8,r4,748
    efb0:	200f883a 	mov	r7,r4
    efb4:	10000526 	beq	r2,zero,efcc <__sinit+0x44>
    efb8:	dfc00217 	ldw	ra,8(sp)
    efbc:	dc400117 	ldw	r17,4(sp)
    efc0:	dc000017 	ldw	r16,0(sp)
    efc4:	dec00304 	addi	sp,sp,12
    efc8:	f800283a 	ret
    efcc:	21000117 	ldw	r4,4(r4)
    efd0:	00800074 	movhi	r2,1
    efd4:	10bc1b04 	addi	r2,r2,-3988
    efd8:	00c000c4 	movi	r3,3
    efdc:	80800f15 	stw	r2,60(r16)
    efe0:	80c0b915 	stw	r3,740(r16)
    efe4:	8200ba15 	stw	r8,744(r16)
    efe8:	84400e15 	stw	r17,56(r16)
    efec:	8000b815 	stw	zero,736(r16)
    eff0:	000ef200 	call	ef20 <std>
    eff4:	81000217 	ldw	r4,8(r16)
    eff8:	880d883a 	mov	r6,r17
    effc:	800f883a 	mov	r7,r16
    f000:	01400284 	movi	r5,10
    f004:	000ef200 	call	ef20 <std>
    f008:	81000317 	ldw	r4,12(r16)
    f00c:	800f883a 	mov	r7,r16
    f010:	01400484 	movi	r5,18
    f014:	01800084 	movi	r6,2
    f018:	dfc00217 	ldw	ra,8(sp)
    f01c:	dc400117 	ldw	r17,4(sp)
    f020:	dc000017 	ldw	r16,0(sp)
    f024:	dec00304 	addi	sp,sp,12
    f028:	000ef201 	jmpi	ef20 <std>

0000f02c <__fp_lock>:
    f02c:	0005883a 	mov	r2,zero
    f030:	f800283a 	ret

0000f034 <__fp_unlock>:
    f034:	0005883a 	mov	r2,zero
    f038:	f800283a 	ret

0000f03c <__fp_unlock_all>:
    f03c:	00800234 	movhi	r2,8
    f040:	10a07904 	addi	r2,r2,-32284
    f044:	11000017 	ldw	r4,0(r2)
    f048:	01400074 	movhi	r5,1
    f04c:	297c0d04 	addi	r5,r5,-4044
    f050:	000fbb81 	jmpi	fbb8 <_fwalk>

0000f054 <__fp_lock_all>:
    f054:	00800234 	movhi	r2,8
    f058:	10a07904 	addi	r2,r2,-32284
    f05c:	11000017 	ldw	r4,0(r2)
    f060:	01400074 	movhi	r5,1
    f064:	297c0b04 	addi	r5,r5,-4052
    f068:	000fbb81 	jmpi	fbb8 <_fwalk>

0000f06c <_cleanup_r>:
    f06c:	01400074 	movhi	r5,1
    f070:	2947d304 	addi	r5,r5,8012
    f074:	000fbb81 	jmpi	fbb8 <_fwalk>

0000f078 <_cleanup>:
    f078:	00800234 	movhi	r2,8
    f07c:	10a07a04 	addi	r2,r2,-32280
    f080:	11000017 	ldw	r4,0(r2)
    f084:	000f06c1 	jmpi	f06c <_cleanup_r>

0000f088 <__sfmoreglue>:
    f088:	defffc04 	addi	sp,sp,-16
    f08c:	dc000015 	stw	r16,0(sp)
    f090:	2821883a 	mov	r16,r5
    f094:	dc400115 	stw	r17,4(sp)
    f098:	01401704 	movi	r5,92
    f09c:	2023883a 	mov	r17,r4
    f0a0:	8009883a 	mov	r4,r16
    f0a4:	dfc00315 	stw	ra,12(sp)
    f0a8:	dcc00215 	stw	r19,8(sp)
    f0ac:	000a0540 	call	a054 <__mulsi3>
    f0b0:	11400304 	addi	r5,r2,12
    f0b4:	8809883a 	mov	r4,r17
    f0b8:	1027883a 	mov	r19,r2
    f0bc:	000a77c0 	call	a77c <_malloc_r>
    f0c0:	10c00304 	addi	r3,r2,12
    f0c4:	1023883a 	mov	r17,r2
    f0c8:	1809883a 	mov	r4,r3
    f0cc:	980d883a 	mov	r6,r19
    f0d0:	000b883a 	mov	r5,zero
    f0d4:	10000b26 	beq	r2,zero,f104 <__sfmoreglue+0x7c>
    f0d8:	14000115 	stw	r16,4(r2)
    f0dc:	10c00215 	stw	r3,8(r2)
    f0e0:	10000015 	stw	zero,0(r2)
    f0e4:	000af5c0 	call	af5c <memset>
    f0e8:	8805883a 	mov	r2,r17
    f0ec:	dfc00317 	ldw	ra,12(sp)
    f0f0:	dcc00217 	ldw	r19,8(sp)
    f0f4:	dc400117 	ldw	r17,4(sp)
    f0f8:	dc000017 	ldw	r16,0(sp)
    f0fc:	dec00404 	addi	sp,sp,16
    f100:	f800283a 	ret
    f104:	0023883a 	mov	r17,zero
    f108:	8805883a 	mov	r2,r17
    f10c:	dfc00317 	ldw	ra,12(sp)
    f110:	dcc00217 	ldw	r19,8(sp)
    f114:	dc400117 	ldw	r17,4(sp)
    f118:	dc000017 	ldw	r16,0(sp)
    f11c:	dec00404 	addi	sp,sp,16
    f120:	f800283a 	ret

0000f124 <__sfp>:
    f124:	defffd04 	addi	sp,sp,-12
    f128:	00800234 	movhi	r2,8
    f12c:	10a07a04 	addi	r2,r2,-32280
    f130:	dc000015 	stw	r16,0(sp)
    f134:	14000017 	ldw	r16,0(r2)
    f138:	dc400115 	stw	r17,4(sp)
    f13c:	dfc00215 	stw	ra,8(sp)
    f140:	80800e17 	ldw	r2,56(r16)
    f144:	2023883a 	mov	r17,r4
    f148:	10002626 	beq	r2,zero,f1e4 <__sfp+0xc0>
    f14c:	8400b804 	addi	r16,r16,736
    f150:	80800117 	ldw	r2,4(r16)
    f154:	81000217 	ldw	r4,8(r16)
    f158:	10ffffc4 	addi	r3,r2,-1
    f15c:	18000916 	blt	r3,zero,f184 <__sfp+0x60>
    f160:	2080030f 	ldh	r2,12(r4)
    f164:	10000b26 	beq	r2,zero,f194 <__sfp+0x70>
    f168:	017fffc4 	movi	r5,-1
    f16c:	00000206 	br	f178 <__sfp+0x54>
    f170:	2080030f 	ldh	r2,12(r4)
    f174:	10000726 	beq	r2,zero,f194 <__sfp+0x70>
    f178:	18ffffc4 	addi	r3,r3,-1
    f17c:	21001704 	addi	r4,r4,92
    f180:	197ffb1e 	bne	r3,r5,f170 <__sfp+0x4c>
    f184:	80800017 	ldw	r2,0(r16)
    f188:	10001926 	beq	r2,zero,f1f0 <__sfp+0xcc>
    f18c:	1021883a 	mov	r16,r2
    f190:	003fef06 	br	f150 <__sfp+0x2c>
    f194:	00bfffc4 	movi	r2,-1
    f198:	00c00044 	movi	r3,1
    f19c:	2080038d 	sth	r2,14(r4)
    f1a0:	20c0030d 	sth	r3,12(r4)
    f1a4:	20000015 	stw	zero,0(r4)
    f1a8:	20000215 	stw	zero,8(r4)
    f1ac:	20000115 	stw	zero,4(r4)
    f1b0:	20000415 	stw	zero,16(r4)
    f1b4:	20000515 	stw	zero,20(r4)
    f1b8:	20000615 	stw	zero,24(r4)
    f1bc:	20000c15 	stw	zero,48(r4)
    f1c0:	20000d15 	stw	zero,52(r4)
    f1c4:	20001115 	stw	zero,68(r4)
    f1c8:	20001215 	stw	zero,72(r4)
    f1cc:	2005883a 	mov	r2,r4
    f1d0:	dfc00217 	ldw	ra,8(sp)
    f1d4:	dc400117 	ldw	r17,4(sp)
    f1d8:	dc000017 	ldw	r16,0(sp)
    f1dc:	dec00304 	addi	sp,sp,12
    f1e0:	f800283a 	ret
    f1e4:	8009883a 	mov	r4,r16
    f1e8:	000ef880 	call	ef88 <__sinit>
    f1ec:	003fd706 	br	f14c <__sfp+0x28>
    f1f0:	8809883a 	mov	r4,r17
    f1f4:	01400104 	movi	r5,4
    f1f8:	000f0880 	call	f088 <__sfmoreglue>
    f1fc:	80800015 	stw	r2,0(r16)
    f200:	103fe21e 	bne	r2,zero,f18c <__sfp+0x68>
    f204:	00800304 	movi	r2,12
    f208:	0009883a 	mov	r4,zero
    f20c:	88800015 	stw	r2,0(r17)
    f210:	003fee06 	br	f1cc <__sfp+0xa8>

0000f214 <_malloc_trim_r>:
    f214:	defffb04 	addi	sp,sp,-20
    f218:	dcc00315 	stw	r19,12(sp)
    f21c:	04c001f4 	movhi	r19,7
    f220:	9cdaef04 	addi	r19,r19,27580
    f224:	dc800215 	stw	r18,8(sp)
    f228:	dc400115 	stw	r17,4(sp)
    f22c:	dc000015 	stw	r16,0(sp)
    f230:	2823883a 	mov	r17,r5
    f234:	2025883a 	mov	r18,r4
    f238:	dfc00415 	stw	ra,16(sp)
    f23c:	0013b580 	call	13b58 <__malloc_lock>
    f240:	98800217 	ldw	r2,8(r19)
    f244:	9009883a 	mov	r4,r18
    f248:	000b883a 	mov	r5,zero
    f24c:	10c00117 	ldw	r3,4(r2)
    f250:	00bfff04 	movi	r2,-4
    f254:	18a0703a 	and	r16,r3,r2
    f258:	8463c83a 	sub	r17,r16,r17
    f25c:	8c43fbc4 	addi	r17,r17,4079
    f260:	8822d33a 	srli	r17,r17,12
    f264:	0083ffc4 	movi	r2,4095
    f268:	8c7fffc4 	addi	r17,r17,-1
    f26c:	8822933a 	slli	r17,r17,12
    f270:	1440060e 	bge	r2,r17,f28c <_malloc_trim_r+0x78>
    f274:	000b1440 	call	b144 <_sbrk_r>
    f278:	98c00217 	ldw	r3,8(r19)
    f27c:	9009883a 	mov	r4,r18
    f280:	044bc83a 	sub	r5,zero,r17
    f284:	80c7883a 	add	r3,r16,r3
    f288:	10c00926 	beq	r2,r3,f2b0 <_malloc_trim_r+0x9c>
    f28c:	0013b780 	call	13b78 <__malloc_unlock>
    f290:	0005883a 	mov	r2,zero
    f294:	dfc00417 	ldw	ra,16(sp)
    f298:	dcc00317 	ldw	r19,12(sp)
    f29c:	dc800217 	ldw	r18,8(sp)
    f2a0:	dc400117 	ldw	r17,4(sp)
    f2a4:	dc000017 	ldw	r16,0(sp)
    f2a8:	dec00504 	addi	sp,sp,20
    f2ac:	f800283a 	ret
    f2b0:	9009883a 	mov	r4,r18
    f2b4:	000b1440 	call	b144 <_sbrk_r>
    f2b8:	844dc83a 	sub	r6,r16,r17
    f2bc:	00ffffc4 	movi	r3,-1
    f2c0:	9009883a 	mov	r4,r18
    f2c4:	000b883a 	mov	r5,zero
    f2c8:	01c00234 	movhi	r7,8
    f2cc:	39ee2004 	addi	r7,r7,-18304
    f2d0:	31800054 	ori	r6,r6,1
    f2d4:	10c00926 	beq	r2,r3,f2fc <_malloc_trim_r+0xe8>
    f2d8:	38800017 	ldw	r2,0(r7)
    f2dc:	98c00217 	ldw	r3,8(r19)
    f2e0:	9009883a 	mov	r4,r18
    f2e4:	1445c83a 	sub	r2,r2,r17
    f2e8:	38800015 	stw	r2,0(r7)
    f2ec:	19800115 	stw	r6,4(r3)
    f2f0:	0013b780 	call	13b78 <__malloc_unlock>
    f2f4:	00800044 	movi	r2,1
    f2f8:	003fe606 	br	f294 <_malloc_trim_r+0x80>
    f2fc:	000b1440 	call	b144 <_sbrk_r>
    f300:	99800217 	ldw	r6,8(r19)
    f304:	100f883a 	mov	r7,r2
    f308:	9009883a 	mov	r4,r18
    f30c:	1187c83a 	sub	r3,r2,r6
    f310:	008003c4 	movi	r2,15
    f314:	19400054 	ori	r5,r3,1
    f318:	10ffdc0e 	bge	r2,r3,f28c <_malloc_trim_r+0x78>
    f31c:	00800234 	movhi	r2,8
    f320:	10a07c04 	addi	r2,r2,-32272
    f324:	10c00017 	ldw	r3,0(r2)
    f328:	00800234 	movhi	r2,8
    f32c:	10ae2004 	addi	r2,r2,-18304
    f330:	31400115 	stw	r5,4(r6)
    f334:	38c7c83a 	sub	r3,r7,r3
    f338:	10c00015 	stw	r3,0(r2)
    f33c:	003fd306 	br	f28c <_malloc_trim_r+0x78>

0000f340 <_free_r>:
    f340:	defffd04 	addi	sp,sp,-12
    f344:	dc400115 	stw	r17,4(sp)
    f348:	dc000015 	stw	r16,0(sp)
    f34c:	dfc00215 	stw	ra,8(sp)
    f350:	2821883a 	mov	r16,r5
    f354:	2023883a 	mov	r17,r4
    f358:	28005a26 	beq	r5,zero,f4c4 <_free_r+0x184>
    f35c:	0013b580 	call	13b58 <__malloc_lock>
    f360:	823ffe04 	addi	r8,r16,-8
    f364:	41400117 	ldw	r5,4(r8)
    f368:	00bfff84 	movi	r2,-2
    f36c:	028001f4 	movhi	r10,7
    f370:	529aef04 	addi	r10,r10,27580
    f374:	288e703a 	and	r7,r5,r2
    f378:	41cd883a 	add	r6,r8,r7
    f37c:	30c00117 	ldw	r3,4(r6)
    f380:	51000217 	ldw	r4,8(r10)
    f384:	00bfff04 	movi	r2,-4
    f388:	1892703a 	and	r9,r3,r2
    f38c:	5017883a 	mov	r11,r10
    f390:	31006726 	beq	r6,r4,f530 <_free_r+0x1f0>
    f394:	2880004c 	andi	r2,r5,1
    f398:	1005003a 	cmpeq	r2,r2,zero
    f39c:	32400115 	stw	r9,4(r6)
    f3a0:	10001a1e 	bne	r2,zero,f40c <_free_r+0xcc>
    f3a4:	000b883a 	mov	r5,zero
    f3a8:	3247883a 	add	r3,r6,r9
    f3ac:	18800117 	ldw	r2,4(r3)
    f3b0:	1080004c 	andi	r2,r2,1
    f3b4:	1000231e 	bne	r2,zero,f444 <_free_r+0x104>
    f3b8:	280ac03a 	cmpne	r5,r5,zero
    f3bc:	3a4f883a 	add	r7,r7,r9
    f3c0:	2800451e 	bne	r5,zero,f4d8 <_free_r+0x198>
    f3c4:	31000217 	ldw	r4,8(r6)
    f3c8:	008001f4 	movhi	r2,7
    f3cc:	109af104 	addi	r2,r2,27588
    f3d0:	20807b26 	beq	r4,r2,f5c0 <_free_r+0x280>
    f3d4:	30800317 	ldw	r2,12(r6)
    f3d8:	3a07883a 	add	r3,r7,r8
    f3dc:	19c00015 	stw	r7,0(r3)
    f3e0:	11000215 	stw	r4,8(r2)
    f3e4:	20800315 	stw	r2,12(r4)
    f3e8:	38800054 	ori	r2,r7,1
    f3ec:	40800115 	stw	r2,4(r8)
    f3f0:	28001a26 	beq	r5,zero,f45c <_free_r+0x11c>
    f3f4:	8809883a 	mov	r4,r17
    f3f8:	dfc00217 	ldw	ra,8(sp)
    f3fc:	dc400117 	ldw	r17,4(sp)
    f400:	dc000017 	ldw	r16,0(sp)
    f404:	dec00304 	addi	sp,sp,12
    f408:	0013b781 	jmpi	13b78 <__malloc_unlock>
    f40c:	80bffe17 	ldw	r2,-8(r16)
    f410:	50c00204 	addi	r3,r10,8
    f414:	4091c83a 	sub	r8,r8,r2
    f418:	41000217 	ldw	r4,8(r8)
    f41c:	388f883a 	add	r7,r7,r2
    f420:	20c06126 	beq	r4,r3,f5a8 <_free_r+0x268>
    f424:	40800317 	ldw	r2,12(r8)
    f428:	3247883a 	add	r3,r6,r9
    f42c:	000b883a 	mov	r5,zero
    f430:	11000215 	stw	r4,8(r2)
    f434:	20800315 	stw	r2,12(r4)
    f438:	18800117 	ldw	r2,4(r3)
    f43c:	1080004c 	andi	r2,r2,1
    f440:	103fdd26 	beq	r2,zero,f3b8 <_free_r+0x78>
    f444:	38800054 	ori	r2,r7,1
    f448:	3a07883a 	add	r3,r7,r8
    f44c:	280ac03a 	cmpne	r5,r5,zero
    f450:	40800115 	stw	r2,4(r8)
    f454:	19c00015 	stw	r7,0(r3)
    f458:	283fe61e 	bne	r5,zero,f3f4 <_free_r+0xb4>
    f45c:	00807fc4 	movi	r2,511
    f460:	11c01f2e 	bgeu	r2,r7,f4e0 <_free_r+0x1a0>
    f464:	3806d27a 	srli	r3,r7,9
    f468:	1800481e 	bne	r3,zero,f58c <_free_r+0x24c>
    f46c:	3804d0fa 	srli	r2,r7,3
    f470:	100690fa 	slli	r3,r2,3
    f474:	1acd883a 	add	r6,r3,r11
    f478:	31400217 	ldw	r5,8(r6)
    f47c:	31405926 	beq	r6,r5,f5e4 <_free_r+0x2a4>
    f480:	28800117 	ldw	r2,4(r5)
    f484:	00ffff04 	movi	r3,-4
    f488:	10c4703a 	and	r2,r2,r3
    f48c:	3880022e 	bgeu	r7,r2,f498 <_free_r+0x158>
    f490:	29400217 	ldw	r5,8(r5)
    f494:	317ffa1e 	bne	r6,r5,f480 <_free_r+0x140>
    f498:	29800317 	ldw	r6,12(r5)
    f49c:	41800315 	stw	r6,12(r8)
    f4a0:	41400215 	stw	r5,8(r8)
    f4a4:	8809883a 	mov	r4,r17
    f4a8:	2a000315 	stw	r8,12(r5)
    f4ac:	32000215 	stw	r8,8(r6)
    f4b0:	dfc00217 	ldw	ra,8(sp)
    f4b4:	dc400117 	ldw	r17,4(sp)
    f4b8:	dc000017 	ldw	r16,0(sp)
    f4bc:	dec00304 	addi	sp,sp,12
    f4c0:	0013b781 	jmpi	13b78 <__malloc_unlock>
    f4c4:	dfc00217 	ldw	ra,8(sp)
    f4c8:	dc400117 	ldw	r17,4(sp)
    f4cc:	dc000017 	ldw	r16,0(sp)
    f4d0:	dec00304 	addi	sp,sp,12
    f4d4:	f800283a 	ret
    f4d8:	31000217 	ldw	r4,8(r6)
    f4dc:	003fbd06 	br	f3d4 <_free_r+0x94>
    f4e0:	3806d0fa 	srli	r3,r7,3
    f4e4:	00800044 	movi	r2,1
    f4e8:	51400117 	ldw	r5,4(r10)
    f4ec:	180890fa 	slli	r4,r3,3
    f4f0:	1807d0ba 	srai	r3,r3,2
    f4f4:	22c9883a 	add	r4,r4,r11
    f4f8:	21800217 	ldw	r6,8(r4)
    f4fc:	10c4983a 	sll	r2,r2,r3
    f500:	41000315 	stw	r4,12(r8)
    f504:	41800215 	stw	r6,8(r8)
    f508:	288ab03a 	or	r5,r5,r2
    f50c:	22000215 	stw	r8,8(r4)
    f510:	8809883a 	mov	r4,r17
    f514:	51400115 	stw	r5,4(r10)
    f518:	32000315 	stw	r8,12(r6)
    f51c:	dfc00217 	ldw	ra,8(sp)
    f520:	dc400117 	ldw	r17,4(sp)
    f524:	dc000017 	ldw	r16,0(sp)
    f528:	dec00304 	addi	sp,sp,12
    f52c:	0013b781 	jmpi	13b78 <__malloc_unlock>
    f530:	2880004c 	andi	r2,r5,1
    f534:	3a4d883a 	add	r6,r7,r9
    f538:	1000071e 	bne	r2,zero,f558 <_free_r+0x218>
    f53c:	80bffe17 	ldw	r2,-8(r16)
    f540:	4091c83a 	sub	r8,r8,r2
    f544:	41000317 	ldw	r4,12(r8)
    f548:	40c00217 	ldw	r3,8(r8)
    f54c:	308d883a 	add	r6,r6,r2
    f550:	20c00215 	stw	r3,8(r4)
    f554:	19000315 	stw	r4,12(r3)
    f558:	00800234 	movhi	r2,8
    f55c:	10a07b04 	addi	r2,r2,-32276
    f560:	11000017 	ldw	r4,0(r2)
    f564:	30c00054 	ori	r3,r6,1
    f568:	52000215 	stw	r8,8(r10)
    f56c:	40c00115 	stw	r3,4(r8)
    f570:	313fa036 	bltu	r6,r4,f3f4 <_free_r+0xb4>
    f574:	00800234 	movhi	r2,8
    f578:	10ae1304 	addi	r2,r2,-18356
    f57c:	11400017 	ldw	r5,0(r2)
    f580:	8809883a 	mov	r4,r17
    f584:	000f2140 	call	f214 <_malloc_trim_r>
    f588:	003f9a06 	br	f3f4 <_free_r+0xb4>
    f58c:	00800104 	movi	r2,4
    f590:	10c0072e 	bgeu	r2,r3,f5b0 <_free_r+0x270>
    f594:	00800504 	movi	r2,20
    f598:	10c01936 	bltu	r2,r3,f600 <_free_r+0x2c0>
    f59c:	188016c4 	addi	r2,r3,91
    f5a0:	100690fa 	slli	r3,r2,3
    f5a4:	003fb306 	br	f474 <_free_r+0x134>
    f5a8:	01400044 	movi	r5,1
    f5ac:	003f7e06 	br	f3a8 <_free_r+0x68>
    f5b0:	3804d1ba 	srli	r2,r7,6
    f5b4:	10800e04 	addi	r2,r2,56
    f5b8:	100690fa 	slli	r3,r2,3
    f5bc:	003fad06 	br	f474 <_free_r+0x134>
    f5c0:	22000315 	stw	r8,12(r4)
    f5c4:	22000215 	stw	r8,8(r4)
    f5c8:	3a05883a 	add	r2,r7,r8
    f5cc:	38c00054 	ori	r3,r7,1
    f5d0:	11c00015 	stw	r7,0(r2)
    f5d4:	41000215 	stw	r4,8(r8)
    f5d8:	40c00115 	stw	r3,4(r8)
    f5dc:	41000315 	stw	r4,12(r8)
    f5e0:	003f8406 	br	f3f4 <_free_r+0xb4>
    f5e4:	1005d0ba 	srai	r2,r2,2
    f5e8:	00c00044 	movi	r3,1
    f5ec:	51000117 	ldw	r4,4(r10)
    f5f0:	1886983a 	sll	r3,r3,r2
    f5f4:	20c8b03a 	or	r4,r4,r3
    f5f8:	51000115 	stw	r4,4(r10)
    f5fc:	003fa706 	br	f49c <_free_r+0x15c>
    f600:	00801504 	movi	r2,84
    f604:	10c00436 	bltu	r2,r3,f618 <_free_r+0x2d8>
    f608:	3804d33a 	srli	r2,r7,12
    f60c:	10801b84 	addi	r2,r2,110
    f610:	100690fa 	slli	r3,r2,3
    f614:	003f9706 	br	f474 <_free_r+0x134>
    f618:	00805504 	movi	r2,340
    f61c:	10c00436 	bltu	r2,r3,f630 <_free_r+0x2f0>
    f620:	3804d3fa 	srli	r2,r7,15
    f624:	10801dc4 	addi	r2,r2,119
    f628:	100690fa 	slli	r3,r2,3
    f62c:	003f9106 	br	f474 <_free_r+0x134>
    f630:	00815504 	movi	r2,1364
    f634:	10c0032e 	bgeu	r2,r3,f644 <_free_r+0x304>
    f638:	00801f84 	movi	r2,126
    f63c:	00c0fc04 	movi	r3,1008
    f640:	003f8c06 	br	f474 <_free_r+0x134>
    f644:	3804d4ba 	srli	r2,r7,18
    f648:	10801f04 	addi	r2,r2,124
    f64c:	100690fa 	slli	r3,r2,3
    f650:	003f8806 	br	f474 <_free_r+0x134>

0000f654 <__sfvwrite_r>:
    f654:	30800217 	ldw	r2,8(r6)
    f658:	defff504 	addi	sp,sp,-44
    f65c:	df000915 	stw	fp,36(sp)
    f660:	dd800715 	stw	r22,28(sp)
    f664:	dc800315 	stw	r18,12(sp)
    f668:	dfc00a15 	stw	ra,40(sp)
    f66c:	ddc00815 	stw	r23,32(sp)
    f670:	dd400615 	stw	r21,24(sp)
    f674:	dd000515 	stw	r20,20(sp)
    f678:	dcc00415 	stw	r19,16(sp)
    f67c:	dc400215 	stw	r17,8(sp)
    f680:	dc000115 	stw	r16,4(sp)
    f684:	302d883a 	mov	r22,r6
    f688:	2039883a 	mov	fp,r4
    f68c:	2825883a 	mov	r18,r5
    f690:	10001c26 	beq	r2,zero,f704 <__sfvwrite_r+0xb0>
    f694:	29c0030b 	ldhu	r7,12(r5)
    f698:	3880020c 	andi	r2,r7,8
    f69c:	10002726 	beq	r2,zero,f73c <__sfvwrite_r+0xe8>
    f6a0:	28800417 	ldw	r2,16(r5)
    f6a4:	10002526 	beq	r2,zero,f73c <__sfvwrite_r+0xe8>
    f6a8:	3880008c 	andi	r2,r7,2
    f6ac:	b5400017 	ldw	r21,0(r22)
    f6b0:	10002826 	beq	r2,zero,f754 <__sfvwrite_r+0x100>
    f6b4:	0021883a 	mov	r16,zero
    f6b8:	0023883a 	mov	r17,zero
    f6bc:	880d883a 	mov	r6,r17
    f6c0:	e009883a 	mov	r4,fp
    f6c4:	00810004 	movi	r2,1024
    f6c8:	80006e26 	beq	r16,zero,f884 <__sfvwrite_r+0x230>
    f6cc:	800f883a 	mov	r7,r16
    f6d0:	91400717 	ldw	r5,28(r18)
    f6d4:	1400012e 	bgeu	r2,r16,f6dc <__sfvwrite_r+0x88>
    f6d8:	100f883a 	mov	r7,r2
    f6dc:	90c00917 	ldw	r3,36(r18)
    f6e0:	183ee83a 	callr	r3
    f6e4:	1007883a 	mov	r3,r2
    f6e8:	80a1c83a 	sub	r16,r16,r2
    f6ec:	88a3883a 	add	r17,r17,r2
    f6f0:	00806d0e 	bge	zero,r2,f8a8 <__sfvwrite_r+0x254>
    f6f4:	b0800217 	ldw	r2,8(r22)
    f6f8:	10c5c83a 	sub	r2,r2,r3
    f6fc:	b0800215 	stw	r2,8(r22)
    f700:	103fee1e 	bne	r2,zero,f6bc <__sfvwrite_r+0x68>
    f704:	0009883a 	mov	r4,zero
    f708:	2005883a 	mov	r2,r4
    f70c:	dfc00a17 	ldw	ra,40(sp)
    f710:	df000917 	ldw	fp,36(sp)
    f714:	ddc00817 	ldw	r23,32(sp)
    f718:	dd800717 	ldw	r22,28(sp)
    f71c:	dd400617 	ldw	r21,24(sp)
    f720:	dd000517 	ldw	r20,20(sp)
    f724:	dcc00417 	ldw	r19,16(sp)
    f728:	dc800317 	ldw	r18,12(sp)
    f72c:	dc400217 	ldw	r17,8(sp)
    f730:	dc000117 	ldw	r16,4(sp)
    f734:	dec00b04 	addi	sp,sp,44
    f738:	f800283a 	ret
    f73c:	000d3bc0 	call	d3bc <__swsetup_r>
    f740:	1000e41e 	bne	r2,zero,fad4 <__sfvwrite_r+0x480>
    f744:	91c0030b 	ldhu	r7,12(r18)
    f748:	b5400017 	ldw	r21,0(r22)
    f74c:	3880008c 	andi	r2,r7,2
    f750:	103fd81e 	bne	r2,zero,f6b4 <__sfvwrite_r+0x60>
    f754:	3880004c 	andi	r2,r7,1
    f758:	1005003a 	cmpeq	r2,r2,zero
    f75c:	10005726 	beq	r2,zero,f8bc <__sfvwrite_r+0x268>
    f760:	0029883a 	mov	r20,zero
    f764:	002f883a 	mov	r23,zero
    f768:	a0004226 	beq	r20,zero,f874 <__sfvwrite_r+0x220>
    f76c:	3880800c 	andi	r2,r7,512
    f770:	94000217 	ldw	r16,8(r18)
    f774:	10008b26 	beq	r2,zero,f9a4 <__sfvwrite_r+0x350>
    f778:	800d883a 	mov	r6,r16
    f77c:	a400a536 	bltu	r20,r16,fa14 <__sfvwrite_r+0x3c0>
    f780:	3881200c 	andi	r2,r7,1152
    f784:	10002726 	beq	r2,zero,f824 <__sfvwrite_r+0x1d0>
    f788:	90800517 	ldw	r2,20(r18)
    f78c:	92000417 	ldw	r8,16(r18)
    f790:	91400017 	ldw	r5,0(r18)
    f794:	1087883a 	add	r3,r2,r2
    f798:	1887883a 	add	r3,r3,r2
    f79c:	1808d7fa 	srli	r4,r3,31
    f7a0:	2a21c83a 	sub	r16,r5,r8
    f7a4:	80800044 	addi	r2,r16,1
    f7a8:	20c9883a 	add	r4,r4,r3
    f7ac:	2027d07a 	srai	r19,r4,1
    f7b0:	a085883a 	add	r2,r20,r2
    f7b4:	980d883a 	mov	r6,r19
    f7b8:	9880022e 	bgeu	r19,r2,f7c4 <__sfvwrite_r+0x170>
    f7bc:	1027883a 	mov	r19,r2
    f7c0:	100d883a 	mov	r6,r2
    f7c4:	3881000c 	andi	r2,r7,1024
    f7c8:	1000b826 	beq	r2,zero,faac <__sfvwrite_r+0x458>
    f7cc:	300b883a 	mov	r5,r6
    f7d0:	e009883a 	mov	r4,fp
    f7d4:	000a77c0 	call	a77c <_malloc_r>
    f7d8:	10003126 	beq	r2,zero,f8a0 <__sfvwrite_r+0x24c>
    f7dc:	91400417 	ldw	r5,16(r18)
    f7e0:	1009883a 	mov	r4,r2
    f7e4:	800d883a 	mov	r6,r16
    f7e8:	1023883a 	mov	r17,r2
    f7ec:	000aebc0 	call	aebc <memcpy>
    f7f0:	90c0030b 	ldhu	r3,12(r18)
    f7f4:	00beffc4 	movi	r2,-1025
    f7f8:	1886703a 	and	r3,r3,r2
    f7fc:	18c02014 	ori	r3,r3,128
    f800:	90c0030d 	sth	r3,12(r18)
    f804:	9c07c83a 	sub	r3,r19,r16
    f808:	8c05883a 	add	r2,r17,r16
    f80c:	a00d883a 	mov	r6,r20
    f810:	a021883a 	mov	r16,r20
    f814:	90800015 	stw	r2,0(r18)
    f818:	90c00215 	stw	r3,8(r18)
    f81c:	94400415 	stw	r17,16(r18)
    f820:	94c00515 	stw	r19,20(r18)
    f824:	91000017 	ldw	r4,0(r18)
    f828:	b80b883a 	mov	r5,r23
    f82c:	a023883a 	mov	r17,r20
    f830:	000ffac0 	call	ffac <memmove>
    f834:	90c00217 	ldw	r3,8(r18)
    f838:	90800017 	ldw	r2,0(r18)
    f83c:	a027883a 	mov	r19,r20
    f840:	1c07c83a 	sub	r3,r3,r16
    f844:	1405883a 	add	r2,r2,r16
    f848:	90c00215 	stw	r3,8(r18)
    f84c:	a021883a 	mov	r16,r20
    f850:	90800015 	stw	r2,0(r18)
    f854:	b0800217 	ldw	r2,8(r22)
    f858:	1405c83a 	sub	r2,r2,r16
    f85c:	b0800215 	stw	r2,8(r22)
    f860:	103fa826 	beq	r2,zero,f704 <__sfvwrite_r+0xb0>
    f864:	a469c83a 	sub	r20,r20,r17
    f868:	91c0030b 	ldhu	r7,12(r18)
    f86c:	bcef883a 	add	r23,r23,r19
    f870:	a03fbe1e 	bne	r20,zero,f76c <__sfvwrite_r+0x118>
    f874:	adc00017 	ldw	r23,0(r21)
    f878:	ad000117 	ldw	r20,4(r21)
    f87c:	ad400204 	addi	r21,r21,8
    f880:	003fb906 	br	f768 <__sfvwrite_r+0x114>
    f884:	ac400017 	ldw	r17,0(r21)
    f888:	ac000117 	ldw	r16,4(r21)
    f88c:	ad400204 	addi	r21,r21,8
    f890:	003f8a06 	br	f6bc <__sfvwrite_r+0x68>
    f894:	91400417 	ldw	r5,16(r18)
    f898:	e009883a 	mov	r4,fp
    f89c:	000f3400 	call	f340 <_free_r>
    f8a0:	00800304 	movi	r2,12
    f8a4:	e0800015 	stw	r2,0(fp)
    f8a8:	9080030b 	ldhu	r2,12(r18)
    f8ac:	013fffc4 	movi	r4,-1
    f8b0:	10801014 	ori	r2,r2,64
    f8b4:	9080030d 	sth	r2,12(r18)
    f8b8:	003f9306 	br	f708 <__sfvwrite_r+0xb4>
    f8bc:	0027883a 	mov	r19,zero
    f8c0:	002f883a 	mov	r23,zero
    f8c4:	d8000015 	stw	zero,0(sp)
    f8c8:	0029883a 	mov	r20,zero
    f8cc:	98001e26 	beq	r19,zero,f948 <__sfvwrite_r+0x2f4>
    f8d0:	d8c00017 	ldw	r3,0(sp)
    f8d4:	1804c03a 	cmpne	r2,r3,zero
    f8d8:	10005e26 	beq	r2,zero,fa54 <__sfvwrite_r+0x400>
    f8dc:	9821883a 	mov	r16,r19
    f8e0:	a4c0012e 	bgeu	r20,r19,f8e8 <__sfvwrite_r+0x294>
    f8e4:	a021883a 	mov	r16,r20
    f8e8:	91000017 	ldw	r4,0(r18)
    f8ec:	90800417 	ldw	r2,16(r18)
    f8f0:	91800217 	ldw	r6,8(r18)
    f8f4:	91c00517 	ldw	r7,20(r18)
    f8f8:	1100022e 	bgeu	r2,r4,f904 <__sfvwrite_r+0x2b0>
    f8fc:	31e3883a 	add	r17,r6,r7
    f900:	8c001616 	blt	r17,r16,f95c <__sfvwrite_r+0x308>
    f904:	81c03816 	blt	r16,r7,f9e8 <__sfvwrite_r+0x394>
    f908:	90c00917 	ldw	r3,36(r18)
    f90c:	91400717 	ldw	r5,28(r18)
    f910:	e009883a 	mov	r4,fp
    f914:	b80d883a 	mov	r6,r23
    f918:	183ee83a 	callr	r3
    f91c:	1023883a 	mov	r17,r2
    f920:	00bfe10e 	bge	zero,r2,f8a8 <__sfvwrite_r+0x254>
    f924:	a469c83a 	sub	r20,r20,r17
    f928:	a0001826 	beq	r20,zero,f98c <__sfvwrite_r+0x338>
    f92c:	b0800217 	ldw	r2,8(r22)
    f930:	1445c83a 	sub	r2,r2,r17
    f934:	b0800215 	stw	r2,8(r22)
    f938:	103f7226 	beq	r2,zero,f704 <__sfvwrite_r+0xb0>
    f93c:	9c67c83a 	sub	r19,r19,r17
    f940:	bc6f883a 	add	r23,r23,r17
    f944:	983fe21e 	bne	r19,zero,f8d0 <__sfvwrite_r+0x27c>
    f948:	adc00017 	ldw	r23,0(r21)
    f94c:	acc00117 	ldw	r19,4(r21)
    f950:	ad400204 	addi	r21,r21,8
    f954:	d8000015 	stw	zero,0(sp)
    f958:	003fdc06 	br	f8cc <__sfvwrite_r+0x278>
    f95c:	b80b883a 	mov	r5,r23
    f960:	880d883a 	mov	r6,r17
    f964:	000ffac0 	call	ffac <memmove>
    f968:	90c00017 	ldw	r3,0(r18)
    f96c:	e009883a 	mov	r4,fp
    f970:	900b883a 	mov	r5,r18
    f974:	1c47883a 	add	r3,r3,r17
    f978:	90c00015 	stw	r3,0(r18)
    f97c:	000ecf00 	call	ecf0 <_fflush_r>
    f980:	103fc91e 	bne	r2,zero,f8a8 <__sfvwrite_r+0x254>
    f984:	a469c83a 	sub	r20,r20,r17
    f988:	a03fe81e 	bne	r20,zero,f92c <__sfvwrite_r+0x2d8>
    f98c:	e009883a 	mov	r4,fp
    f990:	900b883a 	mov	r5,r18
    f994:	000ecf00 	call	ecf0 <_fflush_r>
    f998:	103fc31e 	bne	r2,zero,f8a8 <__sfvwrite_r+0x254>
    f99c:	d8000015 	stw	zero,0(sp)
    f9a0:	003fe206 	br	f92c <__sfvwrite_r+0x2d8>
    f9a4:	91000017 	ldw	r4,0(r18)
    f9a8:	90800417 	ldw	r2,16(r18)
    f9ac:	1100022e 	bgeu	r2,r4,f9b8 <__sfvwrite_r+0x364>
    f9b0:	8023883a 	mov	r17,r16
    f9b4:	85003136 	bltu	r16,r20,fa7c <__sfvwrite_r+0x428>
    f9b8:	91c00517 	ldw	r7,20(r18)
    f9bc:	a1c01836 	bltu	r20,r7,fa20 <__sfvwrite_r+0x3cc>
    f9c0:	90c00917 	ldw	r3,36(r18)
    f9c4:	91400717 	ldw	r5,28(r18)
    f9c8:	e009883a 	mov	r4,fp
    f9cc:	b80d883a 	mov	r6,r23
    f9d0:	183ee83a 	callr	r3
    f9d4:	1021883a 	mov	r16,r2
    f9d8:	00bfb30e 	bge	zero,r2,f8a8 <__sfvwrite_r+0x254>
    f9dc:	1023883a 	mov	r17,r2
    f9e0:	1027883a 	mov	r19,r2
    f9e4:	003f9b06 	br	f854 <__sfvwrite_r+0x200>
    f9e8:	b80b883a 	mov	r5,r23
    f9ec:	800d883a 	mov	r6,r16
    f9f0:	000ffac0 	call	ffac <memmove>
    f9f4:	90c00217 	ldw	r3,8(r18)
    f9f8:	90800017 	ldw	r2,0(r18)
    f9fc:	8023883a 	mov	r17,r16
    fa00:	1c07c83a 	sub	r3,r3,r16
    fa04:	1405883a 	add	r2,r2,r16
    fa08:	90c00215 	stw	r3,8(r18)
    fa0c:	90800015 	stw	r2,0(r18)
    fa10:	003fc406 	br	f924 <__sfvwrite_r+0x2d0>
    fa14:	a00d883a 	mov	r6,r20
    fa18:	a021883a 	mov	r16,r20
    fa1c:	003f8106 	br	f824 <__sfvwrite_r+0x1d0>
    fa20:	b80b883a 	mov	r5,r23
    fa24:	a00d883a 	mov	r6,r20
    fa28:	000ffac0 	call	ffac <memmove>
    fa2c:	90c00217 	ldw	r3,8(r18)
    fa30:	90800017 	ldw	r2,0(r18)
    fa34:	a021883a 	mov	r16,r20
    fa38:	1d07c83a 	sub	r3,r3,r20
    fa3c:	1505883a 	add	r2,r2,r20
    fa40:	a023883a 	mov	r17,r20
    fa44:	a027883a 	mov	r19,r20
    fa48:	90c00215 	stw	r3,8(r18)
    fa4c:	90800015 	stw	r2,0(r18)
    fa50:	003f8006 	br	f854 <__sfvwrite_r+0x200>
    fa54:	b809883a 	mov	r4,r23
    fa58:	01400284 	movi	r5,10
    fa5c:	980d883a 	mov	r6,r19
    fa60:	000fec80 	call	fec8 <memchr>
    fa64:	10001726 	beq	r2,zero,fac4 <__sfvwrite_r+0x470>
    fa68:	15c5c83a 	sub	r2,r2,r23
    fa6c:	15000044 	addi	r20,r2,1
    fa70:	00800044 	movi	r2,1
    fa74:	d8800015 	stw	r2,0(sp)
    fa78:	003f9806 	br	f8dc <__sfvwrite_r+0x288>
    fa7c:	b80b883a 	mov	r5,r23
    fa80:	800d883a 	mov	r6,r16
    fa84:	000ffac0 	call	ffac <memmove>
    fa88:	90c00017 	ldw	r3,0(r18)
    fa8c:	e009883a 	mov	r4,fp
    fa90:	900b883a 	mov	r5,r18
    fa94:	1c07883a 	add	r3,r3,r16
    fa98:	90c00015 	stw	r3,0(r18)
    fa9c:	8027883a 	mov	r19,r16
    faa0:	000ecf00 	call	ecf0 <_fflush_r>
    faa4:	103f6b26 	beq	r2,zero,f854 <__sfvwrite_r+0x200>
    faa8:	003f7f06 	br	f8a8 <__sfvwrite_r+0x254>
    faac:	400b883a 	mov	r5,r8
    fab0:	e009883a 	mov	r4,fp
    fab4:	00113040 	call	11304 <_realloc_r>
    fab8:	103f7626 	beq	r2,zero,f894 <__sfvwrite_r+0x240>
    fabc:	1023883a 	mov	r17,r2
    fac0:	003f5006 	br	f804 <__sfvwrite_r+0x1b0>
    fac4:	00c00044 	movi	r3,1
    fac8:	9d000044 	addi	r20,r19,1
    facc:	d8c00015 	stw	r3,0(sp)
    fad0:	003f8206 	br	f8dc <__sfvwrite_r+0x288>
    fad4:	9080030b 	ldhu	r2,12(r18)
    fad8:	00c00244 	movi	r3,9
    fadc:	013fffc4 	movi	r4,-1
    fae0:	10801014 	ori	r2,r2,64
    fae4:	9080030d 	sth	r2,12(r18)
    fae8:	e0c00015 	stw	r3,0(fp)
    faec:	003f0606 	br	f708 <__sfvwrite_r+0xb4>

0000faf0 <_fwalk_reent>:
    faf0:	defff704 	addi	sp,sp,-36
    faf4:	dcc00315 	stw	r19,12(sp)
    faf8:	24c0b804 	addi	r19,r4,736
    fafc:	dd800615 	stw	r22,24(sp)
    fb00:	dd400515 	stw	r21,20(sp)
    fb04:	dfc00815 	stw	ra,32(sp)
    fb08:	ddc00715 	stw	r23,28(sp)
    fb0c:	dd000415 	stw	r20,16(sp)
    fb10:	dc800215 	stw	r18,8(sp)
    fb14:	dc400115 	stw	r17,4(sp)
    fb18:	dc000015 	stw	r16,0(sp)
    fb1c:	202b883a 	mov	r21,r4
    fb20:	282d883a 	mov	r22,r5
    fb24:	000ef780 	call	ef78 <__sfp_lock_acquire>
    fb28:	98002126 	beq	r19,zero,fbb0 <_fwalk_reent+0xc0>
    fb2c:	002f883a 	mov	r23,zero
    fb30:	9c800117 	ldw	r18,4(r19)
    fb34:	9c000217 	ldw	r16,8(r19)
    fb38:	90bfffc4 	addi	r2,r18,-1
    fb3c:	10000d16 	blt	r2,zero,fb74 <_fwalk_reent+0x84>
    fb40:	0023883a 	mov	r17,zero
    fb44:	053fffc4 	movi	r20,-1
    fb48:	8080030f 	ldh	r2,12(r16)
    fb4c:	8c400044 	addi	r17,r17,1
    fb50:	10000626 	beq	r2,zero,fb6c <_fwalk_reent+0x7c>
    fb54:	8080038f 	ldh	r2,14(r16)
    fb58:	800b883a 	mov	r5,r16
    fb5c:	a809883a 	mov	r4,r21
    fb60:	15000226 	beq	r2,r20,fb6c <_fwalk_reent+0x7c>
    fb64:	b03ee83a 	callr	r22
    fb68:	b8aeb03a 	or	r23,r23,r2
    fb6c:	84001704 	addi	r16,r16,92
    fb70:	947ff51e 	bne	r18,r17,fb48 <_fwalk_reent+0x58>
    fb74:	9cc00017 	ldw	r19,0(r19)
    fb78:	983fed1e 	bne	r19,zero,fb30 <_fwalk_reent+0x40>
    fb7c:	000ef7c0 	call	ef7c <__sfp_lock_release>
    fb80:	b805883a 	mov	r2,r23
    fb84:	dfc00817 	ldw	ra,32(sp)
    fb88:	ddc00717 	ldw	r23,28(sp)
    fb8c:	dd800617 	ldw	r22,24(sp)
    fb90:	dd400517 	ldw	r21,20(sp)
    fb94:	dd000417 	ldw	r20,16(sp)
    fb98:	dcc00317 	ldw	r19,12(sp)
    fb9c:	dc800217 	ldw	r18,8(sp)
    fba0:	dc400117 	ldw	r17,4(sp)
    fba4:	dc000017 	ldw	r16,0(sp)
    fba8:	dec00904 	addi	sp,sp,36
    fbac:	f800283a 	ret
    fbb0:	002f883a 	mov	r23,zero
    fbb4:	003ff106 	br	fb7c <_fwalk_reent+0x8c>

0000fbb8 <_fwalk>:
    fbb8:	defff804 	addi	sp,sp,-32
    fbbc:	dcc00315 	stw	r19,12(sp)
    fbc0:	24c0b804 	addi	r19,r4,736
    fbc4:	dd400515 	stw	r21,20(sp)
    fbc8:	dfc00715 	stw	ra,28(sp)
    fbcc:	dd800615 	stw	r22,24(sp)
    fbd0:	dd000415 	stw	r20,16(sp)
    fbd4:	dc800215 	stw	r18,8(sp)
    fbd8:	dc400115 	stw	r17,4(sp)
    fbdc:	dc000015 	stw	r16,0(sp)
    fbe0:	282b883a 	mov	r21,r5
    fbe4:	000ef780 	call	ef78 <__sfp_lock_acquire>
    fbe8:	98001f26 	beq	r19,zero,fc68 <_fwalk+0xb0>
    fbec:	002d883a 	mov	r22,zero
    fbf0:	9c800117 	ldw	r18,4(r19)
    fbf4:	9c000217 	ldw	r16,8(r19)
    fbf8:	90bfffc4 	addi	r2,r18,-1
    fbfc:	10000c16 	blt	r2,zero,fc30 <_fwalk+0x78>
    fc00:	0023883a 	mov	r17,zero
    fc04:	053fffc4 	movi	r20,-1
    fc08:	8080030f 	ldh	r2,12(r16)
    fc0c:	8c400044 	addi	r17,r17,1
    fc10:	10000526 	beq	r2,zero,fc28 <_fwalk+0x70>
    fc14:	8080038f 	ldh	r2,14(r16)
    fc18:	8009883a 	mov	r4,r16
    fc1c:	15000226 	beq	r2,r20,fc28 <_fwalk+0x70>
    fc20:	a83ee83a 	callr	r21
    fc24:	b0acb03a 	or	r22,r22,r2
    fc28:	84001704 	addi	r16,r16,92
    fc2c:	947ff61e 	bne	r18,r17,fc08 <_fwalk+0x50>
    fc30:	9cc00017 	ldw	r19,0(r19)
    fc34:	983fee1e 	bne	r19,zero,fbf0 <_fwalk+0x38>
    fc38:	000ef7c0 	call	ef7c <__sfp_lock_release>
    fc3c:	b005883a 	mov	r2,r22
    fc40:	dfc00717 	ldw	ra,28(sp)
    fc44:	dd800617 	ldw	r22,24(sp)
    fc48:	dd400517 	ldw	r21,20(sp)
    fc4c:	dd000417 	ldw	r20,16(sp)
    fc50:	dcc00317 	ldw	r19,12(sp)
    fc54:	dc800217 	ldw	r18,8(sp)
    fc58:	dc400117 	ldw	r17,4(sp)
    fc5c:	dc000017 	ldw	r16,0(sp)
    fc60:	dec00804 	addi	sp,sp,32
    fc64:	f800283a 	ret
    fc68:	002d883a 	mov	r22,zero
    fc6c:	003ff206 	br	fc38 <_fwalk+0x80>

0000fc70 <__locale_charset>:
    fc70:	d0a00817 	ldw	r2,-32736(gp)
    fc74:	f800283a 	ret

0000fc78 <_localeconv_r>:
    fc78:	008001f4 	movhi	r2,7
    fc7c:	1092a004 	addi	r2,r2,19072
    fc80:	f800283a 	ret

0000fc84 <localeconv>:
    fc84:	00800234 	movhi	r2,8
    fc88:	10a07904 	addi	r2,r2,-32284
    fc8c:	11000017 	ldw	r4,0(r2)
    fc90:	000fc781 	jmpi	fc78 <_localeconv_r>

0000fc94 <_setlocale_r>:
    fc94:	defffc04 	addi	sp,sp,-16
    fc98:	00c001f4 	movhi	r3,7
    fc9c:	18d27604 	addi	r3,r3,18904
    fca0:	dc800215 	stw	r18,8(sp)
    fca4:	dc400115 	stw	r17,4(sp)
    fca8:	dc000015 	stw	r16,0(sp)
    fcac:	2023883a 	mov	r17,r4
    fcb0:	2825883a 	mov	r18,r5
    fcb4:	dfc00315 	stw	ra,12(sp)
    fcb8:	3021883a 	mov	r16,r6
    fcbc:	3009883a 	mov	r4,r6
    fcc0:	180b883a 	mov	r5,r3
    fcc4:	30000926 	beq	r6,zero,fcec <_setlocale_r+0x58>
    fcc8:	0011a840 	call	11a84 <strcmp>
    fccc:	8009883a 	mov	r4,r16
    fcd0:	014001f4 	movhi	r5,7
    fcd4:	29528704 	addi	r5,r5,18972
    fcd8:	10000b1e 	bne	r2,zero,fd08 <_setlocale_r+0x74>
    fcdc:	8c000d15 	stw	r16,52(r17)
    fce0:	8c800c15 	stw	r18,48(r17)
    fce4:	00c001f4 	movhi	r3,7
    fce8:	18d27604 	addi	r3,r3,18904
    fcec:	1805883a 	mov	r2,r3
    fcf0:	dfc00317 	ldw	ra,12(sp)
    fcf4:	dc800217 	ldw	r18,8(sp)
    fcf8:	dc400117 	ldw	r17,4(sp)
    fcfc:	dc000017 	ldw	r16,0(sp)
    fd00:	dec00404 	addi	sp,sp,16
    fd04:	f800283a 	ret
    fd08:	0011a840 	call	11a84 <strcmp>
    fd0c:	0007883a 	mov	r3,zero
    fd10:	103ff226 	beq	r2,zero,fcdc <_setlocale_r+0x48>
    fd14:	003ff506 	br	fcec <_setlocale_r+0x58>

0000fd18 <setlocale>:
    fd18:	01800234 	movhi	r6,8
    fd1c:	31a07904 	addi	r6,r6,-32284
    fd20:	2007883a 	mov	r3,r4
    fd24:	31000017 	ldw	r4,0(r6)
    fd28:	280d883a 	mov	r6,r5
    fd2c:	180b883a 	mov	r5,r3
    fd30:	000fc941 	jmpi	fc94 <_setlocale_r>

0000fd34 <__smakebuf_r>:
    fd34:	2880030b 	ldhu	r2,12(r5)
    fd38:	deffed04 	addi	sp,sp,-76
    fd3c:	dc401015 	stw	r17,64(sp)
    fd40:	1080008c 	andi	r2,r2,2
    fd44:	dc000f15 	stw	r16,60(sp)
    fd48:	dfc01215 	stw	ra,72(sp)
    fd4c:	dc801115 	stw	r18,68(sp)
    fd50:	2821883a 	mov	r16,r5
    fd54:	2023883a 	mov	r17,r4
    fd58:	10000b26 	beq	r2,zero,fd88 <__smakebuf_r+0x54>
    fd5c:	28c010c4 	addi	r3,r5,67
    fd60:	00800044 	movi	r2,1
    fd64:	28800515 	stw	r2,20(r5)
    fd68:	28c00415 	stw	r3,16(r5)
    fd6c:	28c00015 	stw	r3,0(r5)
    fd70:	dfc01217 	ldw	ra,72(sp)
    fd74:	dc801117 	ldw	r18,68(sp)
    fd78:	dc401017 	ldw	r17,64(sp)
    fd7c:	dc000f17 	ldw	r16,60(sp)
    fd80:	dec01304 	addi	sp,sp,76
    fd84:	f800283a 	ret
    fd88:	2940038f 	ldh	r5,14(r5)
    fd8c:	28002116 	blt	r5,zero,fe14 <__smakebuf_r+0xe0>
    fd90:	d80d883a 	mov	r6,sp
    fd94:	0011f600 	call	11f60 <_fstat_r>
    fd98:	10001e16 	blt	r2,zero,fe14 <__smakebuf_r+0xe0>
    fd9c:	d8800117 	ldw	r2,4(sp)
    fda0:	00e00014 	movui	r3,32768
    fda4:	113c000c 	andi	r4,r2,61440
    fda8:	20c03126 	beq	r4,r3,fe70 <__smakebuf_r+0x13c>
    fdac:	8080030b 	ldhu	r2,12(r16)
    fdb0:	00c80004 	movi	r3,8192
    fdb4:	10820014 	ori	r2,r2,2048
    fdb8:	8080030d 	sth	r2,12(r16)
    fdbc:	20c01e26 	beq	r4,r3,fe38 <__smakebuf_r+0x104>
    fdc0:	04810004 	movi	r18,1024
    fdc4:	8809883a 	mov	r4,r17
    fdc8:	900b883a 	mov	r5,r18
    fdcc:	000a77c0 	call	a77c <_malloc_r>
    fdd0:	1009883a 	mov	r4,r2
    fdd4:	10003126 	beq	r2,zero,fe9c <__smakebuf_r+0x168>
    fdd8:	80c0030b 	ldhu	r3,12(r16)
    fddc:	00800074 	movhi	r2,1
    fde0:	10bc1b04 	addi	r2,r2,-3988
    fde4:	88800f15 	stw	r2,60(r17)
    fde8:	18c02014 	ori	r3,r3,128
    fdec:	84800515 	stw	r18,20(r16)
    fdf0:	80c0030d 	sth	r3,12(r16)
    fdf4:	81000415 	stw	r4,16(r16)
    fdf8:	81000015 	stw	r4,0(r16)
    fdfc:	dfc01217 	ldw	ra,72(sp)
    fe00:	dc801117 	ldw	r18,68(sp)
    fe04:	dc401017 	ldw	r17,64(sp)
    fe08:	dc000f17 	ldw	r16,60(sp)
    fe0c:	dec01304 	addi	sp,sp,76
    fe10:	f800283a 	ret
    fe14:	80c0030b 	ldhu	r3,12(r16)
    fe18:	1880200c 	andi	r2,r3,128
    fe1c:	10000426 	beq	r2,zero,fe30 <__smakebuf_r+0xfc>
    fe20:	04801004 	movi	r18,64
    fe24:	18820014 	ori	r2,r3,2048
    fe28:	8080030d 	sth	r2,12(r16)
    fe2c:	003fe506 	br	fdc4 <__smakebuf_r+0x90>
    fe30:	04810004 	movi	r18,1024
    fe34:	003ffb06 	br	fe24 <__smakebuf_r+0xf0>
    fe38:	8140038f 	ldh	r5,14(r16)
    fe3c:	8809883a 	mov	r4,r17
    fe40:	0011fd40 	call	11fd4 <_isatty_r>
    fe44:	103fde26 	beq	r2,zero,fdc0 <__smakebuf_r+0x8c>
    fe48:	8080030b 	ldhu	r2,12(r16)
    fe4c:	80c010c4 	addi	r3,r16,67
    fe50:	04810004 	movi	r18,1024
    fe54:	10800054 	ori	r2,r2,1
    fe58:	8080030d 	sth	r2,12(r16)
    fe5c:	00800044 	movi	r2,1
    fe60:	80c00415 	stw	r3,16(r16)
    fe64:	80800515 	stw	r2,20(r16)
    fe68:	80c00015 	stw	r3,0(r16)
    fe6c:	003fd506 	br	fdc4 <__smakebuf_r+0x90>
    fe70:	80c00a17 	ldw	r3,40(r16)
    fe74:	00800074 	movhi	r2,1
    fe78:	10865004 	addi	r2,r2,6464
    fe7c:	18bfcb1e 	bne	r3,r2,fdac <__smakebuf_r+0x78>
    fe80:	8080030b 	ldhu	r2,12(r16)
    fe84:	00c10004 	movi	r3,1024
    fe88:	1825883a 	mov	r18,r3
    fe8c:	10c4b03a 	or	r2,r2,r3
    fe90:	8080030d 	sth	r2,12(r16)
    fe94:	80c01315 	stw	r3,76(r16)
    fe98:	003fca06 	br	fdc4 <__smakebuf_r+0x90>
    fe9c:	8100030b 	ldhu	r4,12(r16)
    fea0:	2080800c 	andi	r2,r4,512
    fea4:	103fb21e 	bne	r2,zero,fd70 <__smakebuf_r+0x3c>
    fea8:	80c010c4 	addi	r3,r16,67
    feac:	21000094 	ori	r4,r4,2
    feb0:	00800044 	movi	r2,1
    feb4:	80800515 	stw	r2,20(r16)
    feb8:	8100030d 	sth	r4,12(r16)
    febc:	80c00415 	stw	r3,16(r16)
    fec0:	80c00015 	stw	r3,0(r16)
    fec4:	003faa06 	br	fd70 <__smakebuf_r+0x3c>

0000fec8 <memchr>:
    fec8:	008000c4 	movi	r2,3
    fecc:	29403fcc 	andi	r5,r5,255
    fed0:	2007883a 	mov	r3,r4
    fed4:	1180022e 	bgeu	r2,r6,fee0 <memchr+0x18>
    fed8:	2084703a 	and	r2,r4,r2
    fedc:	10000b26 	beq	r2,zero,ff0c <memchr+0x44>
    fee0:	313fffc4 	addi	r4,r6,-1
    fee4:	3000051e 	bne	r6,zero,fefc <memchr+0x34>
    fee8:	00002c06 	br	ff9c <memchr+0xd4>
    feec:	213fffc4 	addi	r4,r4,-1
    fef0:	00bfffc4 	movi	r2,-1
    fef4:	18c00044 	addi	r3,r3,1
    fef8:	20802826 	beq	r4,r2,ff9c <memchr+0xd4>
    fefc:	18800003 	ldbu	r2,0(r3)
    ff00:	28bffa1e 	bne	r5,r2,feec <memchr+0x24>
    ff04:	1805883a 	mov	r2,r3
    ff08:	f800283a 	ret
    ff0c:	0011883a 	mov	r8,zero
    ff10:	0007883a 	mov	r3,zero
    ff14:	01c00104 	movi	r7,4
    ff18:	4004923a 	slli	r2,r8,8
    ff1c:	18c00044 	addi	r3,r3,1
    ff20:	1151883a 	add	r8,r2,r5
    ff24:	19fffc1e 	bne	r3,r7,ff18 <memchr+0x50>
    ff28:	02bfbff4 	movhi	r10,65279
    ff2c:	52bfbfc4 	addi	r10,r10,-257
    ff30:	02602074 	movhi	r9,32897
    ff34:	4a602004 	addi	r9,r9,-32640
    ff38:	02c000c4 	movi	r11,3
    ff3c:	20800017 	ldw	r2,0(r4)
    ff40:	31bfff04 	addi	r6,r6,-4
    ff44:	200f883a 	mov	r7,r4
    ff48:	1204f03a 	xor	r2,r2,r8
    ff4c:	1287883a 	add	r3,r2,r10
    ff50:	1a46703a 	and	r3,r3,r9
    ff54:	0084303a 	nor	r2,zero,r2
    ff58:	10c4703a 	and	r2,r2,r3
    ff5c:	10000b26 	beq	r2,zero,ff8c <memchr+0xc4>
    ff60:	20800003 	ldbu	r2,0(r4)
    ff64:	28800f26 	beq	r5,r2,ffa4 <memchr+0xdc>
    ff68:	20800043 	ldbu	r2,1(r4)
    ff6c:	21c00044 	addi	r7,r4,1
    ff70:	28800c26 	beq	r5,r2,ffa4 <memchr+0xdc>
    ff74:	20800083 	ldbu	r2,2(r4)
    ff78:	21c00084 	addi	r7,r4,2
    ff7c:	28800926 	beq	r5,r2,ffa4 <memchr+0xdc>
    ff80:	208000c3 	ldbu	r2,3(r4)
    ff84:	21c000c4 	addi	r7,r4,3
    ff88:	28800626 	beq	r5,r2,ffa4 <memchr+0xdc>
    ff8c:	21000104 	addi	r4,r4,4
    ff90:	59bfea36 	bltu	r11,r6,ff3c <memchr+0x74>
    ff94:	2007883a 	mov	r3,r4
    ff98:	003fd106 	br	fee0 <memchr+0x18>
    ff9c:	0005883a 	mov	r2,zero
    ffa0:	f800283a 	ret
    ffa4:	3805883a 	mov	r2,r7
    ffa8:	f800283a 	ret

0000ffac <memmove>:
    ffac:	2807883a 	mov	r3,r5
    ffb0:	2011883a 	mov	r8,r4
    ffb4:	29000c2e 	bgeu	r5,r4,ffe8 <memmove+0x3c>
    ffb8:	298f883a 	add	r7,r5,r6
    ffbc:	21c00a2e 	bgeu	r4,r7,ffe8 <memmove+0x3c>
    ffc0:	30000726 	beq	r6,zero,ffe0 <memmove+0x34>
    ffc4:	2187883a 	add	r3,r4,r6
    ffc8:	198dc83a 	sub	r6,r3,r6
    ffcc:	39ffffc4 	addi	r7,r7,-1
    ffd0:	38800003 	ldbu	r2,0(r7)
    ffd4:	18ffffc4 	addi	r3,r3,-1
    ffd8:	18800005 	stb	r2,0(r3)
    ffdc:	19bffb1e 	bne	r3,r6,ffcc <memmove+0x20>
    ffe0:	2005883a 	mov	r2,r4
    ffe4:	f800283a 	ret
    ffe8:	01c003c4 	movi	r7,15
    ffec:	39800a36 	bltu	r7,r6,10018 <memmove+0x6c>
    fff0:	303ffb26 	beq	r6,zero,ffe0 <memmove+0x34>
    fff4:	400f883a 	mov	r7,r8
    fff8:	320d883a 	add	r6,r6,r8
    fffc:	28800003 	ldbu	r2,0(r5)
   10000:	29400044 	addi	r5,r5,1
   10004:	38800005 	stb	r2,0(r7)
   10008:	39c00044 	addi	r7,r7,1
   1000c:	39bffb1e 	bne	r7,r6,fffc <memmove+0x50>
   10010:	2005883a 	mov	r2,r4
   10014:	f800283a 	ret
   10018:	1904b03a 	or	r2,r3,r4
   1001c:	108000cc 	andi	r2,r2,3
   10020:	103ff31e 	bne	r2,zero,fff0 <memmove+0x44>
   10024:	3811883a 	mov	r8,r7
   10028:	180b883a 	mov	r5,r3
   1002c:	200f883a 	mov	r7,r4
   10030:	28c00017 	ldw	r3,0(r5)
   10034:	31bffc04 	addi	r6,r6,-16
   10038:	38c00015 	stw	r3,0(r7)
   1003c:	28800117 	ldw	r2,4(r5)
   10040:	38800115 	stw	r2,4(r7)
   10044:	28c00217 	ldw	r3,8(r5)
   10048:	38c00215 	stw	r3,8(r7)
   1004c:	28800317 	ldw	r2,12(r5)
   10050:	29400404 	addi	r5,r5,16
   10054:	38800315 	stw	r2,12(r7)
   10058:	39c00404 	addi	r7,r7,16
   1005c:	41bff436 	bltu	r8,r6,10030 <memmove+0x84>
   10060:	008000c4 	movi	r2,3
   10064:	1180072e 	bgeu	r2,r6,10084 <memmove+0xd8>
   10068:	1007883a 	mov	r3,r2
   1006c:	28800017 	ldw	r2,0(r5)
   10070:	31bfff04 	addi	r6,r6,-4
   10074:	29400104 	addi	r5,r5,4
   10078:	38800015 	stw	r2,0(r7)
   1007c:	39c00104 	addi	r7,r7,4
   10080:	19bffa36 	bltu	r3,r6,1006c <memmove+0xc0>
   10084:	3811883a 	mov	r8,r7
   10088:	003fd906 	br	fff0 <memmove+0x44>

0001008c <_Bfree>:
   1008c:	28000826 	beq	r5,zero,100b0 <_Bfree+0x24>
   10090:	28800117 	ldw	r2,4(r5)
   10094:	21001317 	ldw	r4,76(r4)
   10098:	1085883a 	add	r2,r2,r2
   1009c:	1085883a 	add	r2,r2,r2
   100a0:	1105883a 	add	r2,r2,r4
   100a4:	10c00017 	ldw	r3,0(r2)
   100a8:	28c00015 	stw	r3,0(r5)
   100ac:	11400015 	stw	r5,0(r2)
   100b0:	f800283a 	ret

000100b4 <__hi0bits>:
   100b4:	20bfffec 	andhi	r2,r4,65535
   100b8:	10001426 	beq	r2,zero,1010c <__hi0bits+0x58>
   100bc:	0007883a 	mov	r3,zero
   100c0:	20bfc02c 	andhi	r2,r4,65280
   100c4:	1000021e 	bne	r2,zero,100d0 <__hi0bits+0x1c>
   100c8:	2008923a 	slli	r4,r4,8
   100cc:	18c00204 	addi	r3,r3,8
   100d0:	20bc002c 	andhi	r2,r4,61440
   100d4:	1000021e 	bne	r2,zero,100e0 <__hi0bits+0x2c>
   100d8:	2008913a 	slli	r4,r4,4
   100dc:	18c00104 	addi	r3,r3,4
   100e0:	20b0002c 	andhi	r2,r4,49152
   100e4:	1000031e 	bne	r2,zero,100f4 <__hi0bits+0x40>
   100e8:	2105883a 	add	r2,r4,r4
   100ec:	18c00084 	addi	r3,r3,2
   100f0:	1089883a 	add	r4,r2,r2
   100f4:	20000316 	blt	r4,zero,10104 <__hi0bits+0x50>
   100f8:	2090002c 	andhi	r2,r4,16384
   100fc:	10000626 	beq	r2,zero,10118 <__hi0bits+0x64>
   10100:	18c00044 	addi	r3,r3,1
   10104:	1805883a 	mov	r2,r3
   10108:	f800283a 	ret
   1010c:	2008943a 	slli	r4,r4,16
   10110:	00c00404 	movi	r3,16
   10114:	003fea06 	br	100c0 <__hi0bits+0xc>
   10118:	00c00804 	movi	r3,32
   1011c:	1805883a 	mov	r2,r3
   10120:	f800283a 	ret

00010124 <__lo0bits>:
   10124:	20c00017 	ldw	r3,0(r4)
   10128:	188001cc 	andi	r2,r3,7
   1012c:	10000a26 	beq	r2,zero,10158 <__lo0bits+0x34>
   10130:	1880004c 	andi	r2,r3,1
   10134:	1005003a 	cmpeq	r2,r2,zero
   10138:	10002126 	beq	r2,zero,101c0 <__lo0bits+0x9c>
   1013c:	1880008c 	andi	r2,r3,2
   10140:	1000251e 	bne	r2,zero,101d8 <__lo0bits+0xb4>
   10144:	1804d0ba 	srli	r2,r3,2
   10148:	01400084 	movi	r5,2
   1014c:	20800015 	stw	r2,0(r4)
   10150:	2805883a 	mov	r2,r5
   10154:	f800283a 	ret
   10158:	18bfffcc 	andi	r2,r3,65535
   1015c:	10001526 	beq	r2,zero,101b4 <__lo0bits+0x90>
   10160:	000b883a 	mov	r5,zero
   10164:	18803fcc 	andi	r2,r3,255
   10168:	1000021e 	bne	r2,zero,10174 <__lo0bits+0x50>
   1016c:	1806d23a 	srli	r3,r3,8
   10170:	29400204 	addi	r5,r5,8
   10174:	188003cc 	andi	r2,r3,15
   10178:	1000021e 	bne	r2,zero,10184 <__lo0bits+0x60>
   1017c:	1806d13a 	srli	r3,r3,4
   10180:	29400104 	addi	r5,r5,4
   10184:	188000cc 	andi	r2,r3,3
   10188:	1000021e 	bne	r2,zero,10194 <__lo0bits+0x70>
   1018c:	1806d0ba 	srli	r3,r3,2
   10190:	29400084 	addi	r5,r5,2
   10194:	1880004c 	andi	r2,r3,1
   10198:	1000031e 	bne	r2,zero,101a8 <__lo0bits+0x84>
   1019c:	1806d07a 	srli	r3,r3,1
   101a0:	18000a26 	beq	r3,zero,101cc <__lo0bits+0xa8>
   101a4:	29400044 	addi	r5,r5,1
   101a8:	2805883a 	mov	r2,r5
   101ac:	20c00015 	stw	r3,0(r4)
   101b0:	f800283a 	ret
   101b4:	1806d43a 	srli	r3,r3,16
   101b8:	01400404 	movi	r5,16
   101bc:	003fe906 	br	10164 <__lo0bits+0x40>
   101c0:	000b883a 	mov	r5,zero
   101c4:	2805883a 	mov	r2,r5
   101c8:	f800283a 	ret
   101cc:	01400804 	movi	r5,32
   101d0:	2805883a 	mov	r2,r5
   101d4:	f800283a 	ret
   101d8:	1804d07a 	srli	r2,r3,1
   101dc:	01400044 	movi	r5,1
   101e0:	20800015 	stw	r2,0(r4)
   101e4:	003fda06 	br	10150 <__lo0bits+0x2c>

000101e8 <__mcmp>:
   101e8:	20800417 	ldw	r2,16(r4)
   101ec:	28c00417 	ldw	r3,16(r5)
   101f0:	10cfc83a 	sub	r7,r2,r3
   101f4:	38000c1e 	bne	r7,zero,10228 <__mcmp+0x40>
   101f8:	18c5883a 	add	r2,r3,r3
   101fc:	1085883a 	add	r2,r2,r2
   10200:	10c00504 	addi	r3,r2,20
   10204:	21000504 	addi	r4,r4,20
   10208:	28cb883a 	add	r5,r5,r3
   1020c:	2085883a 	add	r2,r4,r2
   10210:	10bfff04 	addi	r2,r2,-4
   10214:	297fff04 	addi	r5,r5,-4
   10218:	11800017 	ldw	r6,0(r2)
   1021c:	28c00017 	ldw	r3,0(r5)
   10220:	30c0031e 	bne	r6,r3,10230 <__mcmp+0x48>
   10224:	20bffa36 	bltu	r4,r2,10210 <__mcmp+0x28>
   10228:	3805883a 	mov	r2,r7
   1022c:	f800283a 	ret
   10230:	30c00336 	bltu	r6,r3,10240 <__mcmp+0x58>
   10234:	01c00044 	movi	r7,1
   10238:	3805883a 	mov	r2,r7
   1023c:	f800283a 	ret
   10240:	01ffffc4 	movi	r7,-1
   10244:	003ff806 	br	10228 <__mcmp+0x40>

00010248 <__ulp>:
   10248:	295ffc2c 	andhi	r5,r5,32752
   1024c:	013f3034 	movhi	r4,64704
   10250:	290b883a 	add	r5,r5,r4
   10254:	0145c83a 	sub	r2,zero,r5
   10258:	1007d53a 	srai	r3,r2,20
   1025c:	000d883a 	mov	r6,zero
   10260:	0140040e 	bge	zero,r5,10274 <__ulp+0x2c>
   10264:	280f883a 	mov	r7,r5
   10268:	3807883a 	mov	r3,r7
   1026c:	3005883a 	mov	r2,r6
   10270:	f800283a 	ret
   10274:	008004c4 	movi	r2,19
   10278:	193ffb04 	addi	r4,r3,-20
   1027c:	10c00c0e 	bge	r2,r3,102b0 <__ulp+0x68>
   10280:	008007c4 	movi	r2,31
   10284:	1107c83a 	sub	r3,r2,r4
   10288:	00800784 	movi	r2,30
   1028c:	01400044 	movi	r5,1
   10290:	11000216 	blt	r2,r4,1029c <__ulp+0x54>
   10294:	00800044 	movi	r2,1
   10298:	10ca983a 	sll	r5,r2,r3
   1029c:	000f883a 	mov	r7,zero
   102a0:	280d883a 	mov	r6,r5
   102a4:	3807883a 	mov	r3,r7
   102a8:	3005883a 	mov	r2,r6
   102ac:	f800283a 	ret
   102b0:	00800234 	movhi	r2,8
   102b4:	10cfd83a 	sra	r7,r2,r3
   102b8:	000d883a 	mov	r6,zero
   102bc:	3005883a 	mov	r2,r6
   102c0:	3807883a 	mov	r3,r7
   102c4:	f800283a 	ret

000102c8 <__b2d>:
   102c8:	20800417 	ldw	r2,16(r4)
   102cc:	defff904 	addi	sp,sp,-28
   102d0:	dd000415 	stw	r20,16(sp)
   102d4:	1085883a 	add	r2,r2,r2
   102d8:	25000504 	addi	r20,r4,20
   102dc:	1085883a 	add	r2,r2,r2
   102e0:	dc000015 	stw	r16,0(sp)
   102e4:	a0a1883a 	add	r16,r20,r2
   102e8:	dd400515 	stw	r21,20(sp)
   102ec:	857fff17 	ldw	r21,-4(r16)
   102f0:	dc400115 	stw	r17,4(sp)
   102f4:	dfc00615 	stw	ra,24(sp)
   102f8:	a809883a 	mov	r4,r21
   102fc:	2823883a 	mov	r17,r5
   10300:	dcc00315 	stw	r19,12(sp)
   10304:	dc800215 	stw	r18,8(sp)
   10308:	00100b40 	call	100b4 <__hi0bits>
   1030c:	100b883a 	mov	r5,r2
   10310:	00800804 	movi	r2,32
   10314:	1145c83a 	sub	r2,r2,r5
   10318:	88800015 	stw	r2,0(r17)
   1031c:	00800284 	movi	r2,10
   10320:	80ffff04 	addi	r3,r16,-4
   10324:	11401416 	blt	r2,r5,10378 <__b2d+0xb0>
   10328:	008002c4 	movi	r2,11
   1032c:	1149c83a 	sub	r4,r2,r5
   10330:	a0c02736 	bltu	r20,r3,103d0 <__b2d+0x108>
   10334:	000d883a 	mov	r6,zero
   10338:	28800544 	addi	r2,r5,21
   1033c:	a906d83a 	srl	r3,r21,r4
   10340:	a884983a 	sll	r2,r21,r2
   10344:	1ccffc34 	orhi	r19,r3,16368
   10348:	11a4b03a 	or	r18,r2,r6
   1034c:	9005883a 	mov	r2,r18
   10350:	9807883a 	mov	r3,r19
   10354:	dfc00617 	ldw	ra,24(sp)
   10358:	dd400517 	ldw	r21,20(sp)
   1035c:	dd000417 	ldw	r20,16(sp)
   10360:	dcc00317 	ldw	r19,12(sp)
   10364:	dc800217 	ldw	r18,8(sp)
   10368:	dc400117 	ldw	r17,4(sp)
   1036c:	dc000017 	ldw	r16,0(sp)
   10370:	dec00704 	addi	sp,sp,28
   10374:	f800283a 	ret
   10378:	a0c00e36 	bltu	r20,r3,103b4 <__b2d+0xec>
   1037c:	293ffd44 	addi	r4,r5,-11
   10380:	000d883a 	mov	r6,zero
   10384:	20000f26 	beq	r4,zero,103c4 <__b2d+0xfc>
   10388:	00800804 	movi	r2,32
   1038c:	110bc83a 	sub	r5,r2,r4
   10390:	a0c01236 	bltu	r20,r3,103dc <__b2d+0x114>
   10394:	000f883a 	mov	r7,zero
   10398:	a904983a 	sll	r2,r21,r4
   1039c:	3146d83a 	srl	r3,r6,r5
   103a0:	3108983a 	sll	r4,r6,r4
   103a4:	108ffc34 	orhi	r2,r2,16368
   103a8:	18a6b03a 	or	r19,r3,r2
   103ac:	3924b03a 	or	r18,r7,r4
   103b0:	003fe606 	br	1034c <__b2d+0x84>
   103b4:	293ffd44 	addi	r4,r5,-11
   103b8:	81bffe17 	ldw	r6,-8(r16)
   103bc:	80fffe04 	addi	r3,r16,-8
   103c0:	203ff11e 	bne	r4,zero,10388 <__b2d+0xc0>
   103c4:	accffc34 	orhi	r19,r21,16368
   103c8:	3025883a 	mov	r18,r6
   103cc:	003fdf06 	br	1034c <__b2d+0x84>
   103d0:	18bfff17 	ldw	r2,-4(r3)
   103d4:	110cd83a 	srl	r6,r2,r4
   103d8:	003fd706 	br	10338 <__b2d+0x70>
   103dc:	18bfff17 	ldw	r2,-4(r3)
   103e0:	114ed83a 	srl	r7,r2,r5
   103e4:	003fec06 	br	10398 <__b2d+0xd0>

000103e8 <__ratio>:
   103e8:	defff904 	addi	sp,sp,-28
   103ec:	dc400215 	stw	r17,8(sp)
   103f0:	2823883a 	mov	r17,r5
   103f4:	d80b883a 	mov	r5,sp
   103f8:	dfc00615 	stw	ra,24(sp)
   103fc:	dd000515 	stw	r20,20(sp)
   10400:	dcc00415 	stw	r19,16(sp)
   10404:	dc800315 	stw	r18,12(sp)
   10408:	2025883a 	mov	r18,r4
   1040c:	00102c80 	call	102c8 <__b2d>
   10410:	8809883a 	mov	r4,r17
   10414:	d9400104 	addi	r5,sp,4
   10418:	1027883a 	mov	r19,r2
   1041c:	1829883a 	mov	r20,r3
   10420:	00102c80 	call	102c8 <__b2d>
   10424:	89000417 	ldw	r4,16(r17)
   10428:	91c00417 	ldw	r7,16(r18)
   1042c:	d9800117 	ldw	r6,4(sp)
   10430:	180b883a 	mov	r5,r3
   10434:	390fc83a 	sub	r7,r7,r4
   10438:	1009883a 	mov	r4,r2
   1043c:	d8800017 	ldw	r2,0(sp)
   10440:	380e917a 	slli	r7,r7,5
   10444:	2011883a 	mov	r8,r4
   10448:	1185c83a 	sub	r2,r2,r6
   1044c:	11c5883a 	add	r2,r2,r7
   10450:	1006953a 	slli	r3,r2,20
   10454:	2813883a 	mov	r9,r5
   10458:	00800d0e 	bge	zero,r2,10490 <__ratio+0xa8>
   1045c:	1d29883a 	add	r20,r3,r20
   10460:	a00b883a 	mov	r5,r20
   10464:	480f883a 	mov	r7,r9
   10468:	9809883a 	mov	r4,r19
   1046c:	400d883a 	mov	r6,r8
   10470:	0009a580 	call	9a58 <__divdf3>
   10474:	dfc00617 	ldw	ra,24(sp)
   10478:	dd000517 	ldw	r20,20(sp)
   1047c:	dcc00417 	ldw	r19,16(sp)
   10480:	dc800317 	ldw	r18,12(sp)
   10484:	dc400217 	ldw	r17,8(sp)
   10488:	dec00704 	addi	sp,sp,28
   1048c:	f800283a 	ret
   10490:	28d3c83a 	sub	r9,r5,r3
   10494:	003ff206 	br	10460 <__ratio+0x78>

00010498 <_mprec_log10>:
   10498:	defffe04 	addi	sp,sp,-8
   1049c:	008005c4 	movi	r2,23
   104a0:	dc000015 	stw	r16,0(sp)
   104a4:	dfc00115 	stw	ra,4(sp)
   104a8:	2021883a 	mov	r16,r4
   104ac:	11000c16 	blt	r2,r4,104e0 <_mprec_log10+0x48>
   104b0:	200490fa 	slli	r2,r4,3
   104b4:	00c001f4 	movhi	r3,7
   104b8:	18d2ac04 	addi	r3,r3,19120
   104bc:	10c5883a 	add	r2,r2,r3
   104c0:	12400117 	ldw	r9,4(r2)
   104c4:	12000017 	ldw	r8,0(r2)
   104c8:	4807883a 	mov	r3,r9
   104cc:	4005883a 	mov	r2,r8
   104d0:	dfc00117 	ldw	ra,4(sp)
   104d4:	dc000017 	ldw	r16,0(sp)
   104d8:	dec00204 	addi	sp,sp,8
   104dc:	f800283a 	ret
   104e0:	0011883a 	mov	r8,zero
   104e4:	024ffc34 	movhi	r9,16368
   104e8:	0005883a 	mov	r2,zero
   104ec:	00d00934 	movhi	r3,16420
   104f0:	480b883a 	mov	r5,r9
   104f4:	4009883a 	mov	r4,r8
   104f8:	180f883a 	mov	r7,r3
   104fc:	100d883a 	mov	r6,r2
   10500:	00096940 	call	9694 <__muldf3>
   10504:	843fffc4 	addi	r16,r16,-1
   10508:	1011883a 	mov	r8,r2
   1050c:	1813883a 	mov	r9,r3
   10510:	803ff51e 	bne	r16,zero,104e8 <_mprec_log10+0x50>
   10514:	4005883a 	mov	r2,r8
   10518:	4807883a 	mov	r3,r9
   1051c:	dfc00117 	ldw	ra,4(sp)
   10520:	dc000017 	ldw	r16,0(sp)
   10524:	dec00204 	addi	sp,sp,8
   10528:	f800283a 	ret

0001052c <__copybits>:
   1052c:	297fffc4 	addi	r5,r5,-1
   10530:	30800417 	ldw	r2,16(r6)
   10534:	280bd17a 	srai	r5,r5,5
   10538:	31800504 	addi	r6,r6,20
   1053c:	1085883a 	add	r2,r2,r2
   10540:	294b883a 	add	r5,r5,r5
   10544:	294b883a 	add	r5,r5,r5
   10548:	1085883a 	add	r2,r2,r2
   1054c:	290b883a 	add	r5,r5,r4
   10550:	3087883a 	add	r3,r6,r2
   10554:	29400104 	addi	r5,r5,4
   10558:	30c0052e 	bgeu	r6,r3,10570 <__copybits+0x44>
   1055c:	30800017 	ldw	r2,0(r6)
   10560:	31800104 	addi	r6,r6,4
   10564:	20800015 	stw	r2,0(r4)
   10568:	21000104 	addi	r4,r4,4
   1056c:	30fffb36 	bltu	r6,r3,1055c <__copybits+0x30>
   10570:	2140032e 	bgeu	r4,r5,10580 <__copybits+0x54>
   10574:	20000015 	stw	zero,0(r4)
   10578:	21000104 	addi	r4,r4,4
   1057c:	217ffd36 	bltu	r4,r5,10574 <__copybits+0x48>
   10580:	f800283a 	ret

00010584 <__any_on>:
   10584:	20800417 	ldw	r2,16(r4)
   10588:	2807d17a 	srai	r3,r5,5
   1058c:	21000504 	addi	r4,r4,20
   10590:	10c00d0e 	bge	r2,r3,105c8 <__any_on+0x44>
   10594:	1085883a 	add	r2,r2,r2
   10598:	1085883a 	add	r2,r2,r2
   1059c:	208d883a 	add	r6,r4,r2
   105a0:	2180182e 	bgeu	r4,r6,10604 <__any_on+0x80>
   105a4:	30bfff17 	ldw	r2,-4(r6)
   105a8:	30ffff04 	addi	r3,r6,-4
   105ac:	1000041e 	bne	r2,zero,105c0 <__any_on+0x3c>
   105b0:	20c0142e 	bgeu	r4,r3,10604 <__any_on+0x80>
   105b4:	18ffff04 	addi	r3,r3,-4
   105b8:	18800017 	ldw	r2,0(r3)
   105bc:	103ffc26 	beq	r2,zero,105b0 <__any_on+0x2c>
   105c0:	00800044 	movi	r2,1
   105c4:	f800283a 	ret
   105c8:	18800a0e 	bge	r3,r2,105f4 <__any_on+0x70>
   105cc:	294007cc 	andi	r5,r5,31
   105d0:	28000826 	beq	r5,zero,105f4 <__any_on+0x70>
   105d4:	18c5883a 	add	r2,r3,r3
   105d8:	1085883a 	add	r2,r2,r2
   105dc:	208d883a 	add	r6,r4,r2
   105e0:	30c00017 	ldw	r3,0(r6)
   105e4:	1944d83a 	srl	r2,r3,r5
   105e8:	1144983a 	sll	r2,r2,r5
   105ec:	18bff41e 	bne	r3,r2,105c0 <__any_on+0x3c>
   105f0:	003feb06 	br	105a0 <__any_on+0x1c>
   105f4:	18c5883a 	add	r2,r3,r3
   105f8:	1085883a 	add	r2,r2,r2
   105fc:	208d883a 	add	r6,r4,r2
   10600:	003fe706 	br	105a0 <__any_on+0x1c>
   10604:	0005883a 	mov	r2,zero
   10608:	f800283a 	ret

0001060c <_Balloc>:
   1060c:	20c01317 	ldw	r3,76(r4)
   10610:	defffb04 	addi	sp,sp,-20
   10614:	dcc00315 	stw	r19,12(sp)
   10618:	dc800215 	stw	r18,8(sp)
   1061c:	dfc00415 	stw	ra,16(sp)
   10620:	2825883a 	mov	r18,r5
   10624:	dc400115 	stw	r17,4(sp)
   10628:	dc000015 	stw	r16,0(sp)
   1062c:	2027883a 	mov	r19,r4
   10630:	01800404 	movi	r6,16
   10634:	01400104 	movi	r5,4
   10638:	18001726 	beq	r3,zero,10698 <_Balloc+0x8c>
   1063c:	01400044 	movi	r5,1
   10640:	9485883a 	add	r2,r18,r18
   10644:	2ca2983a 	sll	r17,r5,r18
   10648:	1085883a 	add	r2,r2,r2
   1064c:	10c7883a 	add	r3,r2,r3
   10650:	1c000017 	ldw	r16,0(r3)
   10654:	8c4d883a 	add	r6,r17,r17
   10658:	318d883a 	add	r6,r6,r6
   1065c:	9809883a 	mov	r4,r19
   10660:	31800504 	addi	r6,r6,20
   10664:	80001226 	beq	r16,zero,106b0 <_Balloc+0xa4>
   10668:	80800017 	ldw	r2,0(r16)
   1066c:	18800015 	stw	r2,0(r3)
   10670:	80000415 	stw	zero,16(r16)
   10674:	80000315 	stw	zero,12(r16)
   10678:	8005883a 	mov	r2,r16
   1067c:	dfc00417 	ldw	ra,16(sp)
   10680:	dcc00317 	ldw	r19,12(sp)
   10684:	dc800217 	ldw	r18,8(sp)
   10688:	dc400117 	ldw	r17,4(sp)
   1068c:	dc000017 	ldw	r16,0(sp)
   10690:	dec00504 	addi	sp,sp,20
   10694:	f800283a 	ret
   10698:	0011d040 	call	11d04 <_calloc_r>
   1069c:	1007883a 	mov	r3,r2
   106a0:	0021883a 	mov	r16,zero
   106a4:	98801315 	stw	r2,76(r19)
   106a8:	103fe41e 	bne	r2,zero,1063c <_Balloc+0x30>
   106ac:	003ff206 	br	10678 <_Balloc+0x6c>
   106b0:	0011d040 	call	11d04 <_calloc_r>
   106b4:	103ff026 	beq	r2,zero,10678 <_Balloc+0x6c>
   106b8:	1021883a 	mov	r16,r2
   106bc:	14800115 	stw	r18,4(r2)
   106c0:	14400215 	stw	r17,8(r2)
   106c4:	003fea06 	br	10670 <_Balloc+0x64>

000106c8 <__d2b>:
   106c8:	defff504 	addi	sp,sp,-44
   106cc:	dcc00515 	stw	r19,20(sp)
   106d0:	04c00044 	movi	r19,1
   106d4:	dc000215 	stw	r16,8(sp)
   106d8:	2821883a 	mov	r16,r5
   106dc:	980b883a 	mov	r5,r19
   106e0:	ddc00915 	stw	r23,36(sp)
   106e4:	dd800815 	stw	r22,32(sp)
   106e8:	dd400715 	stw	r21,28(sp)
   106ec:	dd000615 	stw	r20,24(sp)
   106f0:	dc800415 	stw	r18,16(sp)
   106f4:	dc400315 	stw	r17,12(sp)
   106f8:	dfc00a15 	stw	ra,40(sp)
   106fc:	3023883a 	mov	r17,r6
   10700:	382d883a 	mov	r22,r7
   10704:	ddc00b17 	ldw	r23,44(sp)
   10708:	001060c0 	call	1060c <_Balloc>
   1070c:	1025883a 	mov	r18,r2
   10710:	00a00034 	movhi	r2,32768
   10714:	10bfffc4 	addi	r2,r2,-1
   10718:	8888703a 	and	r4,r17,r2
   1071c:	202ad53a 	srli	r21,r4,20
   10720:	00800434 	movhi	r2,16
   10724:	10bfffc4 	addi	r2,r2,-1
   10728:	8886703a 	and	r3,r17,r2
   1072c:	a829003a 	cmpeq	r20,r21,zero
   10730:	800b883a 	mov	r5,r16
   10734:	d8c00115 	stw	r3,4(sp)
   10738:	94000504 	addi	r16,r18,20
   1073c:	a000021e 	bne	r20,zero,10748 <__d2b+0x80>
   10740:	18c00434 	orhi	r3,r3,16
   10744:	d8c00115 	stw	r3,4(sp)
   10748:	28002726 	beq	r5,zero,107e8 <__d2b+0x120>
   1074c:	d809883a 	mov	r4,sp
   10750:	d9400015 	stw	r5,0(sp)
   10754:	00101240 	call	10124 <__lo0bits>
   10758:	100d883a 	mov	r6,r2
   1075c:	10003526 	beq	r2,zero,10834 <__d2b+0x16c>
   10760:	d8c00117 	ldw	r3,4(sp)
   10764:	00800804 	movi	r2,32
   10768:	1185c83a 	sub	r2,r2,r6
   1076c:	d9000017 	ldw	r4,0(sp)
   10770:	1886983a 	sll	r3,r3,r2
   10774:	1906b03a 	or	r3,r3,r4
   10778:	90c00515 	stw	r3,20(r18)
   1077c:	d8c00117 	ldw	r3,4(sp)
   10780:	1986d83a 	srl	r3,r3,r6
   10784:	d8c00115 	stw	r3,4(sp)
   10788:	180b003a 	cmpeq	r5,r3,zero
   1078c:	00800084 	movi	r2,2
   10790:	114bc83a 	sub	r5,r2,r5
   10794:	80c00115 	stw	r3,4(r16)
   10798:	91400415 	stw	r5,16(r18)
   1079c:	a0001a1e 	bne	r20,zero,10808 <__d2b+0x140>
   107a0:	3545883a 	add	r2,r6,r21
   107a4:	10bef344 	addi	r2,r2,-1075
   107a8:	00c00d44 	movi	r3,53
   107ac:	b0800015 	stw	r2,0(r22)
   107b0:	1987c83a 	sub	r3,r3,r6
   107b4:	b8c00015 	stw	r3,0(r23)
   107b8:	9005883a 	mov	r2,r18
   107bc:	dfc00a17 	ldw	ra,40(sp)
   107c0:	ddc00917 	ldw	r23,36(sp)
   107c4:	dd800817 	ldw	r22,32(sp)
   107c8:	dd400717 	ldw	r21,28(sp)
   107cc:	dd000617 	ldw	r20,24(sp)
   107d0:	dcc00517 	ldw	r19,20(sp)
   107d4:	dc800417 	ldw	r18,16(sp)
   107d8:	dc400317 	ldw	r17,12(sp)
   107dc:	dc000217 	ldw	r16,8(sp)
   107e0:	dec00b04 	addi	sp,sp,44
   107e4:	f800283a 	ret
   107e8:	d9000104 	addi	r4,sp,4
   107ec:	00101240 	call	10124 <__lo0bits>
   107f0:	11800804 	addi	r6,r2,32
   107f4:	d8800117 	ldw	r2,4(sp)
   107f8:	94c00415 	stw	r19,16(r18)
   107fc:	980b883a 	mov	r5,r19
   10800:	90800515 	stw	r2,20(r18)
   10804:	a03fe626 	beq	r20,zero,107a0 <__d2b+0xd8>
   10808:	2945883a 	add	r2,r5,r5
   1080c:	1085883a 	add	r2,r2,r2
   10810:	1405883a 	add	r2,r2,r16
   10814:	113fff17 	ldw	r4,-4(r2)
   10818:	30fef384 	addi	r3,r6,-1074
   1081c:	2820917a 	slli	r16,r5,5
   10820:	b0c00015 	stw	r3,0(r22)
   10824:	00100b40 	call	100b4 <__hi0bits>
   10828:	80a1c83a 	sub	r16,r16,r2
   1082c:	bc000015 	stw	r16,0(r23)
   10830:	003fe106 	br	107b8 <__d2b+0xf0>
   10834:	d8800017 	ldw	r2,0(sp)
   10838:	90800515 	stw	r2,20(r18)
   1083c:	d8c00117 	ldw	r3,4(sp)
   10840:	003fd106 	br	10788 <__d2b+0xc0>

00010844 <__mdiff>:
   10844:	defffb04 	addi	sp,sp,-20
   10848:	dc000015 	stw	r16,0(sp)
   1084c:	2821883a 	mov	r16,r5
   10850:	dc800215 	stw	r18,8(sp)
   10854:	300b883a 	mov	r5,r6
   10858:	2025883a 	mov	r18,r4
   1085c:	8009883a 	mov	r4,r16
   10860:	dc400115 	stw	r17,4(sp)
   10864:	dfc00415 	stw	ra,16(sp)
   10868:	dcc00315 	stw	r19,12(sp)
   1086c:	3023883a 	mov	r17,r6
   10870:	00101e80 	call	101e8 <__mcmp>
   10874:	10004226 	beq	r2,zero,10980 <__mdiff+0x13c>
   10878:	10005016 	blt	r2,zero,109bc <__mdiff+0x178>
   1087c:	0027883a 	mov	r19,zero
   10880:	81400117 	ldw	r5,4(r16)
   10884:	9009883a 	mov	r4,r18
   10888:	001060c0 	call	1060c <_Balloc>
   1088c:	1019883a 	mov	r12,r2
   10890:	82800417 	ldw	r10,16(r16)
   10894:	88800417 	ldw	r2,16(r17)
   10898:	81800504 	addi	r6,r16,20
   1089c:	5287883a 	add	r3,r10,r10
   108a0:	1085883a 	add	r2,r2,r2
   108a4:	18c7883a 	add	r3,r3,r3
   108a8:	1085883a 	add	r2,r2,r2
   108ac:	8a000504 	addi	r8,r17,20
   108b0:	64c00315 	stw	r19,12(r12)
   108b4:	30db883a 	add	r13,r6,r3
   108b8:	4097883a 	add	r11,r8,r2
   108bc:	61c00504 	addi	r7,r12,20
   108c0:	0013883a 	mov	r9,zero
   108c4:	31000017 	ldw	r4,0(r6)
   108c8:	41400017 	ldw	r5,0(r8)
   108cc:	42000104 	addi	r8,r8,4
   108d0:	20bfffcc 	andi	r2,r4,65535
   108d4:	28ffffcc 	andi	r3,r5,65535
   108d8:	10c5c83a 	sub	r2,r2,r3
   108dc:	1245883a 	add	r2,r2,r9
   108e0:	2008d43a 	srli	r4,r4,16
   108e4:	280ad43a 	srli	r5,r5,16
   108e8:	1007d43a 	srai	r3,r2,16
   108ec:	3880000d 	sth	r2,0(r7)
   108f0:	2149c83a 	sub	r4,r4,r5
   108f4:	20c9883a 	add	r4,r4,r3
   108f8:	3900008d 	sth	r4,2(r7)
   108fc:	31800104 	addi	r6,r6,4
   10900:	39c00104 	addi	r7,r7,4
   10904:	2013d43a 	srai	r9,r4,16
   10908:	42ffee36 	bltu	r8,r11,108c4 <__mdiff+0x80>
   1090c:	33400c2e 	bgeu	r6,r13,10940 <__mdiff+0xfc>
   10910:	30800017 	ldw	r2,0(r6)
   10914:	31800104 	addi	r6,r6,4
   10918:	10ffffcc 	andi	r3,r2,65535
   1091c:	1a47883a 	add	r3,r3,r9
   10920:	1004d43a 	srli	r2,r2,16
   10924:	1809d43a 	srai	r4,r3,16
   10928:	38c0000d 	sth	r3,0(r7)
   1092c:	1105883a 	add	r2,r2,r4
   10930:	3880008d 	sth	r2,2(r7)
   10934:	1013d43a 	srai	r9,r2,16
   10938:	39c00104 	addi	r7,r7,4
   1093c:	337ff436 	bltu	r6,r13,10910 <__mdiff+0xcc>
   10940:	38bfff17 	ldw	r2,-4(r7)
   10944:	38ffff04 	addi	r3,r7,-4
   10948:	1000041e 	bne	r2,zero,1095c <__mdiff+0x118>
   1094c:	18ffff04 	addi	r3,r3,-4
   10950:	18800017 	ldw	r2,0(r3)
   10954:	52bfffc4 	addi	r10,r10,-1
   10958:	103ffc26 	beq	r2,zero,1094c <__mdiff+0x108>
   1095c:	6005883a 	mov	r2,r12
   10960:	62800415 	stw	r10,16(r12)
   10964:	dfc00417 	ldw	ra,16(sp)
   10968:	dcc00317 	ldw	r19,12(sp)
   1096c:	dc800217 	ldw	r18,8(sp)
   10970:	dc400117 	ldw	r17,4(sp)
   10974:	dc000017 	ldw	r16,0(sp)
   10978:	dec00504 	addi	sp,sp,20
   1097c:	f800283a 	ret
   10980:	9009883a 	mov	r4,r18
   10984:	000b883a 	mov	r5,zero
   10988:	001060c0 	call	1060c <_Balloc>
   1098c:	1019883a 	mov	r12,r2
   10990:	00800044 	movi	r2,1
   10994:	60800415 	stw	r2,16(r12)
   10998:	6005883a 	mov	r2,r12
   1099c:	60000515 	stw	zero,20(r12)
   109a0:	dfc00417 	ldw	ra,16(sp)
   109a4:	dcc00317 	ldw	r19,12(sp)
   109a8:	dc800217 	ldw	r18,8(sp)
   109ac:	dc400117 	ldw	r17,4(sp)
   109b0:	dc000017 	ldw	r16,0(sp)
   109b4:	dec00504 	addi	sp,sp,20
   109b8:	f800283a 	ret
   109bc:	880d883a 	mov	r6,r17
   109c0:	04c00044 	movi	r19,1
   109c4:	8023883a 	mov	r17,r16
   109c8:	3021883a 	mov	r16,r6
   109cc:	003fac06 	br	10880 <__mdiff+0x3c>

000109d0 <__lshift>:
   109d0:	defff904 	addi	sp,sp,-28
   109d4:	28800417 	ldw	r2,16(r5)
   109d8:	dc000015 	stw	r16,0(sp)
   109dc:	3021d17a 	srai	r16,r6,5
   109e0:	28c00217 	ldw	r3,8(r5)
   109e4:	10800044 	addi	r2,r2,1
   109e8:	dc400115 	stw	r17,4(sp)
   109ec:	80a3883a 	add	r17,r16,r2
   109f0:	dd400515 	stw	r21,20(sp)
   109f4:	dd000415 	stw	r20,16(sp)
   109f8:	dc800215 	stw	r18,8(sp)
   109fc:	dfc00615 	stw	ra,24(sp)
   10a00:	2825883a 	mov	r18,r5
   10a04:	dcc00315 	stw	r19,12(sp)
   10a08:	3029883a 	mov	r20,r6
   10a0c:	202b883a 	mov	r21,r4
   10a10:	29400117 	ldw	r5,4(r5)
   10a14:	1c40030e 	bge	r3,r17,10a24 <__lshift+0x54>
   10a18:	18c7883a 	add	r3,r3,r3
   10a1c:	29400044 	addi	r5,r5,1
   10a20:	1c7ffd16 	blt	r3,r17,10a18 <__lshift+0x48>
   10a24:	a809883a 	mov	r4,r21
   10a28:	001060c0 	call	1060c <_Balloc>
   10a2c:	1027883a 	mov	r19,r2
   10a30:	11400504 	addi	r5,r2,20
   10a34:	0400090e 	bge	zero,r16,10a5c <__lshift+0x8c>
   10a38:	2805883a 	mov	r2,r5
   10a3c:	0007883a 	mov	r3,zero
   10a40:	18c00044 	addi	r3,r3,1
   10a44:	10000015 	stw	zero,0(r2)
   10a48:	10800104 	addi	r2,r2,4
   10a4c:	80fffc1e 	bne	r16,r3,10a40 <__lshift+0x70>
   10a50:	8405883a 	add	r2,r16,r16
   10a54:	1085883a 	add	r2,r2,r2
   10a58:	288b883a 	add	r5,r5,r2
   10a5c:	90800417 	ldw	r2,16(r18)
   10a60:	91000504 	addi	r4,r18,20
   10a64:	a18007cc 	andi	r6,r20,31
   10a68:	1085883a 	add	r2,r2,r2
   10a6c:	1085883a 	add	r2,r2,r2
   10a70:	208f883a 	add	r7,r4,r2
   10a74:	30001e26 	beq	r6,zero,10af0 <__lshift+0x120>
   10a78:	00800804 	movi	r2,32
   10a7c:	1191c83a 	sub	r8,r2,r6
   10a80:	0007883a 	mov	r3,zero
   10a84:	20800017 	ldw	r2,0(r4)
   10a88:	1184983a 	sll	r2,r2,r6
   10a8c:	1884b03a 	or	r2,r3,r2
   10a90:	28800015 	stw	r2,0(r5)
   10a94:	20c00017 	ldw	r3,0(r4)
   10a98:	21000104 	addi	r4,r4,4
   10a9c:	29400104 	addi	r5,r5,4
   10aa0:	1a06d83a 	srl	r3,r3,r8
   10aa4:	21fff736 	bltu	r4,r7,10a84 <__lshift+0xb4>
   10aa8:	28c00015 	stw	r3,0(r5)
   10aac:	18000126 	beq	r3,zero,10ab4 <__lshift+0xe4>
   10ab0:	8c400044 	addi	r17,r17,1
   10ab4:	88bfffc4 	addi	r2,r17,-1
   10ab8:	98800415 	stw	r2,16(r19)
   10abc:	a809883a 	mov	r4,r21
   10ac0:	900b883a 	mov	r5,r18
   10ac4:	001008c0 	call	1008c <_Bfree>
   10ac8:	9805883a 	mov	r2,r19
   10acc:	dfc00617 	ldw	ra,24(sp)
   10ad0:	dd400517 	ldw	r21,20(sp)
   10ad4:	dd000417 	ldw	r20,16(sp)
   10ad8:	dcc00317 	ldw	r19,12(sp)
   10adc:	dc800217 	ldw	r18,8(sp)
   10ae0:	dc400117 	ldw	r17,4(sp)
   10ae4:	dc000017 	ldw	r16,0(sp)
   10ae8:	dec00704 	addi	sp,sp,28
   10aec:	f800283a 	ret
   10af0:	20800017 	ldw	r2,0(r4)
   10af4:	21000104 	addi	r4,r4,4
   10af8:	28800015 	stw	r2,0(r5)
   10afc:	29400104 	addi	r5,r5,4
   10b00:	21ffec2e 	bgeu	r4,r7,10ab4 <__lshift+0xe4>
   10b04:	20800017 	ldw	r2,0(r4)
   10b08:	21000104 	addi	r4,r4,4
   10b0c:	28800015 	stw	r2,0(r5)
   10b10:	29400104 	addi	r5,r5,4
   10b14:	21fff636 	bltu	r4,r7,10af0 <__lshift+0x120>
   10b18:	003fe606 	br	10ab4 <__lshift+0xe4>

00010b1c <__multiply>:
   10b1c:	defff004 	addi	sp,sp,-64
   10b20:	dc800815 	stw	r18,32(sp)
   10b24:	dc400715 	stw	r17,28(sp)
   10b28:	2c800417 	ldw	r18,16(r5)
   10b2c:	34400417 	ldw	r17,16(r6)
   10b30:	dcc00915 	stw	r19,36(sp)
   10b34:	dc000615 	stw	r16,24(sp)
   10b38:	dfc00f15 	stw	ra,60(sp)
   10b3c:	df000e15 	stw	fp,56(sp)
   10b40:	ddc00d15 	stw	r23,52(sp)
   10b44:	dd800c15 	stw	r22,48(sp)
   10b48:	dd400b15 	stw	r21,44(sp)
   10b4c:	dd000a15 	stw	r20,40(sp)
   10b50:	2821883a 	mov	r16,r5
   10b54:	3027883a 	mov	r19,r6
   10b58:	9440040e 	bge	r18,r17,10b6c <__multiply+0x50>
   10b5c:	8825883a 	mov	r18,r17
   10b60:	2c400417 	ldw	r17,16(r5)
   10b64:	2827883a 	mov	r19,r5
   10b68:	3021883a 	mov	r16,r6
   10b6c:	80800217 	ldw	r2,8(r16)
   10b70:	9447883a 	add	r3,r18,r17
   10b74:	d8c00415 	stw	r3,16(sp)
   10b78:	81400117 	ldw	r5,4(r16)
   10b7c:	10c0010e 	bge	r2,r3,10b84 <__multiply+0x68>
   10b80:	29400044 	addi	r5,r5,1
   10b84:	001060c0 	call	1060c <_Balloc>
   10b88:	d8800515 	stw	r2,20(sp)
   10b8c:	d9000417 	ldw	r4,16(sp)
   10b90:	d8c00517 	ldw	r3,20(sp)
   10b94:	2105883a 	add	r2,r4,r4
   10b98:	1085883a 	add	r2,r2,r2
   10b9c:	19000504 	addi	r4,r3,20
   10ba0:	2085883a 	add	r2,r4,r2
   10ba4:	d8800315 	stw	r2,12(sp)
   10ba8:	2080052e 	bgeu	r4,r2,10bc0 <__multiply+0xa4>
   10bac:	2005883a 	mov	r2,r4
   10bb0:	d8c00317 	ldw	r3,12(sp)
   10bb4:	10000015 	stw	zero,0(r2)
   10bb8:	10800104 	addi	r2,r2,4
   10bbc:	10fffc36 	bltu	r2,r3,10bb0 <__multiply+0x94>
   10bc0:	8c45883a 	add	r2,r17,r17
   10bc4:	9487883a 	add	r3,r18,r18
   10bc8:	9dc00504 	addi	r23,r19,20
   10bcc:	1085883a 	add	r2,r2,r2
   10bd0:	84000504 	addi	r16,r16,20
   10bd4:	18c7883a 	add	r3,r3,r3
   10bd8:	b885883a 	add	r2,r23,r2
   10bdc:	dc000015 	stw	r16,0(sp)
   10be0:	d8800215 	stw	r2,8(sp)
   10be4:	80f9883a 	add	fp,r16,r3
   10be8:	b880432e 	bgeu	r23,r2,10cf8 <__multiply+0x1dc>
   10bec:	d9000115 	stw	r4,4(sp)
   10bf0:	b9000017 	ldw	r4,0(r23)
   10bf4:	253fffcc 	andi	r20,r4,65535
   10bf8:	a0001a26 	beq	r20,zero,10c64 <__multiply+0x148>
   10bfc:	dcc00017 	ldw	r19,0(sp)
   10c00:	dc800117 	ldw	r18,4(sp)
   10c04:	002b883a 	mov	r21,zero
   10c08:	9c400017 	ldw	r17,0(r19)
   10c0c:	94000017 	ldw	r16,0(r18)
   10c10:	a009883a 	mov	r4,r20
   10c14:	897fffcc 	andi	r5,r17,65535
   10c18:	000a0540 	call	a054 <__mulsi3>
   10c1c:	880ad43a 	srli	r5,r17,16
   10c20:	80ffffcc 	andi	r3,r16,65535
   10c24:	a8c7883a 	add	r3,r21,r3
   10c28:	a009883a 	mov	r4,r20
   10c2c:	10e3883a 	add	r17,r2,r3
   10c30:	8020d43a 	srli	r16,r16,16
   10c34:	000a0540 	call	a054 <__mulsi3>
   10c38:	8806d43a 	srli	r3,r17,16
   10c3c:	1405883a 	add	r2,r2,r16
   10c40:	9cc00104 	addi	r19,r19,4
   10c44:	1887883a 	add	r3,r3,r2
   10c48:	90c0008d 	sth	r3,2(r18)
   10c4c:	9440000d 	sth	r17,0(r18)
   10c50:	182ad43a 	srli	r21,r3,16
   10c54:	94800104 	addi	r18,r18,4
   10c58:	9f3feb36 	bltu	r19,fp,10c08 <__multiply+0xec>
   10c5c:	95400015 	stw	r21,0(r18)
   10c60:	b9000017 	ldw	r4,0(r23)
   10c64:	202ad43a 	srli	r21,r4,16
   10c68:	a8001c26 	beq	r21,zero,10cdc <__multiply+0x1c0>
   10c6c:	d9000117 	ldw	r4,4(sp)
   10c70:	dd000017 	ldw	r20,0(sp)
   10c74:	002d883a 	mov	r22,zero
   10c78:	24c00017 	ldw	r19,0(r4)
   10c7c:	2025883a 	mov	r18,r4
   10c80:	9823883a 	mov	r17,r19
   10c84:	a4000017 	ldw	r16,0(r20)
   10c88:	a809883a 	mov	r4,r21
   10c8c:	a5000104 	addi	r20,r20,4
   10c90:	817fffcc 	andi	r5,r16,65535
   10c94:	000a0540 	call	a054 <__mulsi3>
   10c98:	8806d43a 	srli	r3,r17,16
   10c9c:	800ad43a 	srli	r5,r16,16
   10ca0:	94c0000d 	sth	r19,0(r18)
   10ca4:	b0c7883a 	add	r3,r22,r3
   10ca8:	10e1883a 	add	r16,r2,r3
   10cac:	9400008d 	sth	r16,2(r18)
   10cb0:	a809883a 	mov	r4,r21
   10cb4:	94800104 	addi	r18,r18,4
   10cb8:	000a0540 	call	a054 <__mulsi3>
   10cbc:	94400017 	ldw	r17,0(r18)
   10cc0:	8020d43a 	srli	r16,r16,16
   10cc4:	88ffffcc 	andi	r3,r17,65535
   10cc8:	10c5883a 	add	r2,r2,r3
   10ccc:	80a7883a 	add	r19,r16,r2
   10cd0:	982cd43a 	srli	r22,r19,16
   10cd4:	a73feb36 	bltu	r20,fp,10c84 <__multiply+0x168>
   10cd8:	94c00015 	stw	r19,0(r18)
   10cdc:	d8800217 	ldw	r2,8(sp)
   10ce0:	bdc00104 	addi	r23,r23,4
   10ce4:	b880042e 	bgeu	r23,r2,10cf8 <__multiply+0x1dc>
   10ce8:	d8c00117 	ldw	r3,4(sp)
   10cec:	18c00104 	addi	r3,r3,4
   10cf0:	d8c00115 	stw	r3,4(sp)
   10cf4:	003fbe06 	br	10bf0 <__multiply+0xd4>
   10cf8:	d9000417 	ldw	r4,16(sp)
   10cfc:	01000c0e 	bge	zero,r4,10d30 <__multiply+0x214>
   10d00:	d8c00317 	ldw	r3,12(sp)
   10d04:	18bfff17 	ldw	r2,-4(r3)
   10d08:	18ffff04 	addi	r3,r3,-4
   10d0c:	10000326 	beq	r2,zero,10d1c <__multiply+0x200>
   10d10:	00000706 	br	10d30 <__multiply+0x214>
   10d14:	18800017 	ldw	r2,0(r3)
   10d18:	1000051e 	bne	r2,zero,10d30 <__multiply+0x214>
   10d1c:	d9000417 	ldw	r4,16(sp)
   10d20:	18ffff04 	addi	r3,r3,-4
   10d24:	213fffc4 	addi	r4,r4,-1
   10d28:	d9000415 	stw	r4,16(sp)
   10d2c:	203ff91e 	bne	r4,zero,10d14 <__multiply+0x1f8>
   10d30:	d8800417 	ldw	r2,16(sp)
   10d34:	d8c00517 	ldw	r3,20(sp)
   10d38:	18800415 	stw	r2,16(r3)
   10d3c:	1805883a 	mov	r2,r3
   10d40:	dfc00f17 	ldw	ra,60(sp)
   10d44:	df000e17 	ldw	fp,56(sp)
   10d48:	ddc00d17 	ldw	r23,52(sp)
   10d4c:	dd800c17 	ldw	r22,48(sp)
   10d50:	dd400b17 	ldw	r21,44(sp)
   10d54:	dd000a17 	ldw	r20,40(sp)
   10d58:	dcc00917 	ldw	r19,36(sp)
   10d5c:	dc800817 	ldw	r18,32(sp)
   10d60:	dc400717 	ldw	r17,28(sp)
   10d64:	dc000617 	ldw	r16,24(sp)
   10d68:	dec01004 	addi	sp,sp,64
   10d6c:	f800283a 	ret

00010d70 <__i2b>:
   10d70:	defffd04 	addi	sp,sp,-12
   10d74:	dc000015 	stw	r16,0(sp)
   10d78:	04000044 	movi	r16,1
   10d7c:	dc800115 	stw	r18,4(sp)
   10d80:	2825883a 	mov	r18,r5
   10d84:	800b883a 	mov	r5,r16
   10d88:	dfc00215 	stw	ra,8(sp)
   10d8c:	001060c0 	call	1060c <_Balloc>
   10d90:	14000415 	stw	r16,16(r2)
   10d94:	14800515 	stw	r18,20(r2)
   10d98:	dfc00217 	ldw	ra,8(sp)
   10d9c:	dc800117 	ldw	r18,4(sp)
   10da0:	dc000017 	ldw	r16,0(sp)
   10da4:	dec00304 	addi	sp,sp,12
   10da8:	f800283a 	ret

00010dac <__multadd>:
   10dac:	defff604 	addi	sp,sp,-40
   10db0:	dd800615 	stw	r22,24(sp)
   10db4:	2d800417 	ldw	r22,16(r5)
   10db8:	df000815 	stw	fp,32(sp)
   10dbc:	ddc00715 	stw	r23,28(sp)
   10dc0:	dd400515 	stw	r21,20(sp)
   10dc4:	dd000415 	stw	r20,16(sp)
   10dc8:	dcc00315 	stw	r19,12(sp)
   10dcc:	dc800215 	stw	r18,8(sp)
   10dd0:	dfc00915 	stw	ra,36(sp)
   10dd4:	dc400115 	stw	r17,4(sp)
   10dd8:	dc000015 	stw	r16,0(sp)
   10ddc:	282f883a 	mov	r23,r5
   10de0:	2039883a 	mov	fp,r4
   10de4:	302b883a 	mov	r21,r6
   10de8:	3829883a 	mov	r20,r7
   10dec:	2c800504 	addi	r18,r5,20
   10df0:	0027883a 	mov	r19,zero
   10df4:	94400017 	ldw	r17,0(r18)
   10df8:	a80b883a 	mov	r5,r21
   10dfc:	9cc00044 	addi	r19,r19,1
   10e00:	893fffcc 	andi	r4,r17,65535
   10e04:	000a0540 	call	a054 <__mulsi3>
   10e08:	8808d43a 	srli	r4,r17,16
   10e0c:	1521883a 	add	r16,r2,r20
   10e10:	a80b883a 	mov	r5,r21
   10e14:	000a0540 	call	a054 <__mulsi3>
   10e18:	8008d43a 	srli	r4,r16,16
   10e1c:	843fffcc 	andi	r16,r16,65535
   10e20:	1105883a 	add	r2,r2,r4
   10e24:	1006943a 	slli	r3,r2,16
   10e28:	1028d43a 	srli	r20,r2,16
   10e2c:	1c07883a 	add	r3,r3,r16
   10e30:	90c00015 	stw	r3,0(r18)
   10e34:	94800104 	addi	r18,r18,4
   10e38:	9dbfee16 	blt	r19,r22,10df4 <__multadd+0x48>
   10e3c:	a0000826 	beq	r20,zero,10e60 <__multadd+0xb4>
   10e40:	b8800217 	ldw	r2,8(r23)
   10e44:	b080130e 	bge	r22,r2,10e94 <__multadd+0xe8>
   10e48:	b585883a 	add	r2,r22,r22
   10e4c:	1085883a 	add	r2,r2,r2
   10e50:	15c5883a 	add	r2,r2,r23
   10e54:	b0c00044 	addi	r3,r22,1
   10e58:	15000515 	stw	r20,20(r2)
   10e5c:	b8c00415 	stw	r3,16(r23)
   10e60:	b805883a 	mov	r2,r23
   10e64:	dfc00917 	ldw	ra,36(sp)
   10e68:	df000817 	ldw	fp,32(sp)
   10e6c:	ddc00717 	ldw	r23,28(sp)
   10e70:	dd800617 	ldw	r22,24(sp)
   10e74:	dd400517 	ldw	r21,20(sp)
   10e78:	dd000417 	ldw	r20,16(sp)
   10e7c:	dcc00317 	ldw	r19,12(sp)
   10e80:	dc800217 	ldw	r18,8(sp)
   10e84:	dc400117 	ldw	r17,4(sp)
   10e88:	dc000017 	ldw	r16,0(sp)
   10e8c:	dec00a04 	addi	sp,sp,40
   10e90:	f800283a 	ret
   10e94:	b9400117 	ldw	r5,4(r23)
   10e98:	e009883a 	mov	r4,fp
   10e9c:	29400044 	addi	r5,r5,1
   10ea0:	001060c0 	call	1060c <_Balloc>
   10ea4:	b9800417 	ldw	r6,16(r23)
   10ea8:	b9400304 	addi	r5,r23,12
   10eac:	11000304 	addi	r4,r2,12
   10eb0:	318d883a 	add	r6,r6,r6
   10eb4:	318d883a 	add	r6,r6,r6
   10eb8:	31800204 	addi	r6,r6,8
   10ebc:	1023883a 	mov	r17,r2
   10ec0:	000aebc0 	call	aebc <memcpy>
   10ec4:	b80b883a 	mov	r5,r23
   10ec8:	e009883a 	mov	r4,fp
   10ecc:	001008c0 	call	1008c <_Bfree>
   10ed0:	882f883a 	mov	r23,r17
   10ed4:	003fdc06 	br	10e48 <__multadd+0x9c>

00010ed8 <__pow5mult>:
   10ed8:	defffa04 	addi	sp,sp,-24
   10edc:	308000cc 	andi	r2,r6,3
   10ee0:	dd000415 	stw	r20,16(sp)
   10ee4:	dcc00315 	stw	r19,12(sp)
   10ee8:	dc000015 	stw	r16,0(sp)
   10eec:	dfc00515 	stw	ra,20(sp)
   10ef0:	dc800215 	stw	r18,8(sp)
   10ef4:	dc400115 	stw	r17,4(sp)
   10ef8:	3021883a 	mov	r16,r6
   10efc:	2027883a 	mov	r19,r4
   10f00:	2829883a 	mov	r20,r5
   10f04:	10002b1e 	bne	r2,zero,10fb4 <__pow5mult+0xdc>
   10f08:	8025d0ba 	srai	r18,r16,2
   10f0c:	90001b26 	beq	r18,zero,10f7c <__pow5mult+0xa4>
   10f10:	9c001217 	ldw	r16,72(r19)
   10f14:	8000081e 	bne	r16,zero,10f38 <__pow5mult+0x60>
   10f18:	00003006 	br	10fdc <__pow5mult+0x104>
   10f1c:	800b883a 	mov	r5,r16
   10f20:	800d883a 	mov	r6,r16
   10f24:	9809883a 	mov	r4,r19
   10f28:	90001426 	beq	r18,zero,10f7c <__pow5mult+0xa4>
   10f2c:	80800017 	ldw	r2,0(r16)
   10f30:	10001b26 	beq	r2,zero,10fa0 <__pow5mult+0xc8>
   10f34:	1021883a 	mov	r16,r2
   10f38:	9080004c 	andi	r2,r18,1
   10f3c:	1005003a 	cmpeq	r2,r2,zero
   10f40:	9025d07a 	srai	r18,r18,1
   10f44:	800d883a 	mov	r6,r16
   10f48:	9809883a 	mov	r4,r19
   10f4c:	a00b883a 	mov	r5,r20
   10f50:	103ff21e 	bne	r2,zero,10f1c <__pow5mult+0x44>
   10f54:	0010b1c0 	call	10b1c <__multiply>
   10f58:	a00b883a 	mov	r5,r20
   10f5c:	9809883a 	mov	r4,r19
   10f60:	1023883a 	mov	r17,r2
   10f64:	001008c0 	call	1008c <_Bfree>
   10f68:	8829883a 	mov	r20,r17
   10f6c:	800b883a 	mov	r5,r16
   10f70:	800d883a 	mov	r6,r16
   10f74:	9809883a 	mov	r4,r19
   10f78:	903fec1e 	bne	r18,zero,10f2c <__pow5mult+0x54>
   10f7c:	a005883a 	mov	r2,r20
   10f80:	dfc00517 	ldw	ra,20(sp)
   10f84:	dd000417 	ldw	r20,16(sp)
   10f88:	dcc00317 	ldw	r19,12(sp)
   10f8c:	dc800217 	ldw	r18,8(sp)
   10f90:	dc400117 	ldw	r17,4(sp)
   10f94:	dc000017 	ldw	r16,0(sp)
   10f98:	dec00604 	addi	sp,sp,24
   10f9c:	f800283a 	ret
   10fa0:	0010b1c0 	call	10b1c <__multiply>
   10fa4:	80800015 	stw	r2,0(r16)
   10fa8:	1021883a 	mov	r16,r2
   10fac:	10000015 	stw	zero,0(r2)
   10fb0:	003fe106 	br	10f38 <__pow5mult+0x60>
   10fb4:	1085883a 	add	r2,r2,r2
   10fb8:	00c001f4 	movhi	r3,7
   10fbc:	18d2f204 	addi	r3,r3,19400
   10fc0:	1085883a 	add	r2,r2,r2
   10fc4:	10c5883a 	add	r2,r2,r3
   10fc8:	11bfff17 	ldw	r6,-4(r2)
   10fcc:	000f883a 	mov	r7,zero
   10fd0:	0010dac0 	call	10dac <__multadd>
   10fd4:	1029883a 	mov	r20,r2
   10fd8:	003fcb06 	br	10f08 <__pow5mult+0x30>
   10fdc:	9809883a 	mov	r4,r19
   10fe0:	01409c44 	movi	r5,625
   10fe4:	0010d700 	call	10d70 <__i2b>
   10fe8:	98801215 	stw	r2,72(r19)
   10fec:	1021883a 	mov	r16,r2
   10ff0:	10000015 	stw	zero,0(r2)
   10ff4:	003fd006 	br	10f38 <__pow5mult+0x60>

00010ff8 <__s2b>:
   10ff8:	defff904 	addi	sp,sp,-28
   10ffc:	dcc00315 	stw	r19,12(sp)
   11000:	dc800215 	stw	r18,8(sp)
   11004:	2827883a 	mov	r19,r5
   11008:	2025883a 	mov	r18,r4
   1100c:	01400244 	movi	r5,9
   11010:	39000204 	addi	r4,r7,8
   11014:	dd000415 	stw	r20,16(sp)
   11018:	dc400115 	stw	r17,4(sp)
   1101c:	dfc00615 	stw	ra,24(sp)
   11020:	dd400515 	stw	r21,20(sp)
   11024:	dc000015 	stw	r16,0(sp)
   11028:	3829883a 	mov	r20,r7
   1102c:	3023883a 	mov	r17,r6
   11030:	0009f840 	call	9f84 <__divsi3>
   11034:	00c00044 	movi	r3,1
   11038:	1880350e 	bge	r3,r2,11110 <__s2b+0x118>
   1103c:	000b883a 	mov	r5,zero
   11040:	18c7883a 	add	r3,r3,r3
   11044:	29400044 	addi	r5,r5,1
   11048:	18bffd16 	blt	r3,r2,11040 <__s2b+0x48>
   1104c:	9009883a 	mov	r4,r18
   11050:	001060c0 	call	1060c <_Balloc>
   11054:	1011883a 	mov	r8,r2
   11058:	d8800717 	ldw	r2,28(sp)
   1105c:	00c00044 	movi	r3,1
   11060:	01800244 	movi	r6,9
   11064:	40800515 	stw	r2,20(r8)
   11068:	40c00415 	stw	r3,16(r8)
   1106c:	3440260e 	bge	r6,r17,11108 <__s2b+0x110>
   11070:	3021883a 	mov	r16,r6
   11074:	99ab883a 	add	r21,r19,r6
   11078:	9c05883a 	add	r2,r19,r16
   1107c:	11c00007 	ldb	r7,0(r2)
   11080:	400b883a 	mov	r5,r8
   11084:	9009883a 	mov	r4,r18
   11088:	39fff404 	addi	r7,r7,-48
   1108c:	01800284 	movi	r6,10
   11090:	0010dac0 	call	10dac <__multadd>
   11094:	84000044 	addi	r16,r16,1
   11098:	1011883a 	mov	r8,r2
   1109c:	8c3ff61e 	bne	r17,r16,11078 <__s2b+0x80>
   110a0:	ac45883a 	add	r2,r21,r17
   110a4:	117ffe04 	addi	r5,r2,-8
   110a8:	880d883a 	mov	r6,r17
   110ac:	35000c0e 	bge	r6,r20,110e0 <__s2b+0xe8>
   110b0:	a185c83a 	sub	r2,r20,r6
   110b4:	2821883a 	mov	r16,r5
   110b8:	28a3883a 	add	r17,r5,r2
   110bc:	81c00007 	ldb	r7,0(r16)
   110c0:	400b883a 	mov	r5,r8
   110c4:	9009883a 	mov	r4,r18
   110c8:	39fff404 	addi	r7,r7,-48
   110cc:	01800284 	movi	r6,10
   110d0:	0010dac0 	call	10dac <__multadd>
   110d4:	84000044 	addi	r16,r16,1
   110d8:	1011883a 	mov	r8,r2
   110dc:	847ff71e 	bne	r16,r17,110bc <__s2b+0xc4>
   110e0:	4005883a 	mov	r2,r8
   110e4:	dfc00617 	ldw	ra,24(sp)
   110e8:	dd400517 	ldw	r21,20(sp)
   110ec:	dd000417 	ldw	r20,16(sp)
   110f0:	dcc00317 	ldw	r19,12(sp)
   110f4:	dc800217 	ldw	r18,8(sp)
   110f8:	dc400117 	ldw	r17,4(sp)
   110fc:	dc000017 	ldw	r16,0(sp)
   11100:	dec00704 	addi	sp,sp,28
   11104:	f800283a 	ret
   11108:	99400284 	addi	r5,r19,10
   1110c:	003fe706 	br	110ac <__s2b+0xb4>
   11110:	000b883a 	mov	r5,zero
   11114:	003fcd06 	br	1104c <__s2b+0x54>

00011118 <putc>:
   11118:	defffc04 	addi	sp,sp,-16
   1111c:	dc800215 	stw	r18,8(sp)
   11120:	04800234 	movhi	r18,8
   11124:	94a07904 	addi	r18,r18,-32284
   11128:	90c00017 	ldw	r3,0(r18)
   1112c:	dc400115 	stw	r17,4(sp)
   11130:	dc000015 	stw	r16,0(sp)
   11134:	dfc00315 	stw	ra,12(sp)
   11138:	2023883a 	mov	r17,r4
   1113c:	2821883a 	mov	r16,r5
   11140:	18000226 	beq	r3,zero,1114c <putc+0x34>
   11144:	18800e17 	ldw	r2,56(r3)
   11148:	10001126 	beq	r2,zero,11190 <putc+0x78>
   1114c:	80800217 	ldw	r2,8(r16)
   11150:	10ffffc4 	addi	r3,r2,-1
   11154:	80c00215 	stw	r3,8(r16)
   11158:	18001316 	blt	r3,zero,111a8 <putc+0x90>
   1115c:	80800017 	ldw	r2,0(r16)
   11160:	14400005 	stb	r17,0(r2)
   11164:	80c00017 	ldw	r3,0(r16)
   11168:	18800044 	addi	r2,r3,1
   1116c:	18c00003 	ldbu	r3,0(r3)
   11170:	80800015 	stw	r2,0(r16)
   11174:	1805883a 	mov	r2,r3
   11178:	dfc00317 	ldw	ra,12(sp)
   1117c:	dc800217 	ldw	r18,8(sp)
   11180:	dc400117 	ldw	r17,4(sp)
   11184:	dc000017 	ldw	r16,0(sp)
   11188:	dec00404 	addi	sp,sp,16
   1118c:	f800283a 	ret
   11190:	1809883a 	mov	r4,r3
   11194:	000ef880 	call	ef88 <__sinit>
   11198:	80800217 	ldw	r2,8(r16)
   1119c:	10ffffc4 	addi	r3,r2,-1
   111a0:	80c00215 	stw	r3,8(r16)
   111a4:	183fed0e 	bge	r3,zero,1115c <putc+0x44>
   111a8:	80800617 	ldw	r2,24(r16)
   111ac:	18800f16 	blt	r3,r2,111ec <putc+0xd4>
   111b0:	80800017 	ldw	r2,0(r16)
   111b4:	14400005 	stb	r17,0(r2)
   111b8:	81000017 	ldw	r4,0(r16)
   111bc:	00800284 	movi	r2,10
   111c0:	20c00003 	ldbu	r3,0(r4)
   111c4:	18801226 	beq	r3,r2,11210 <putc+0xf8>
   111c8:	20800044 	addi	r2,r4,1
   111cc:	80800015 	stw	r2,0(r16)
   111d0:	1805883a 	mov	r2,r3
   111d4:	dfc00317 	ldw	ra,12(sp)
   111d8:	dc800217 	ldw	r18,8(sp)
   111dc:	dc400117 	ldw	r17,4(sp)
   111e0:	dc000017 	ldw	r16,0(sp)
   111e4:	dec00404 	addi	sp,sp,16
   111e8:	f800283a 	ret
   111ec:	91000017 	ldw	r4,0(r18)
   111f0:	880b883a 	mov	r5,r17
   111f4:	800d883a 	mov	r6,r16
   111f8:	dfc00317 	ldw	ra,12(sp)
   111fc:	dc800217 	ldw	r18,8(sp)
   11200:	dc400117 	ldw	r17,4(sp)
   11204:	dc000017 	ldw	r16,0(sp)
   11208:	dec00404 	addi	sp,sp,16
   1120c:	0011b401 	jmpi	11b40 <__swbuf_r>
   11210:	91000017 	ldw	r4,0(r18)
   11214:	180b883a 	mov	r5,r3
   11218:	003ff606 	br	111f4 <putc+0xdc>

0001121c <_putc_r>:
   1121c:	defffc04 	addi	sp,sp,-16
   11220:	dc400215 	stw	r17,8(sp)
   11224:	dc000115 	stw	r16,4(sp)
   11228:	dfc00315 	stw	ra,12(sp)
   1122c:	2021883a 	mov	r16,r4
   11230:	2823883a 	mov	r17,r5
   11234:	20000226 	beq	r4,zero,11240 <_putc_r+0x24>
   11238:	20800e17 	ldw	r2,56(r4)
   1123c:	10001026 	beq	r2,zero,11280 <_putc_r+0x64>
   11240:	30800217 	ldw	r2,8(r6)
   11244:	10ffffc4 	addi	r3,r2,-1
   11248:	30c00215 	stw	r3,8(r6)
   1124c:	18001316 	blt	r3,zero,1129c <_putc_r+0x80>
   11250:	30800017 	ldw	r2,0(r6)
   11254:	14400005 	stb	r17,0(r2)
   11258:	30c00017 	ldw	r3,0(r6)
   1125c:	18800044 	addi	r2,r3,1
   11260:	18c00003 	ldbu	r3,0(r3)
   11264:	30800015 	stw	r2,0(r6)
   11268:	1805883a 	mov	r2,r3
   1126c:	dfc00317 	ldw	ra,12(sp)
   11270:	dc400217 	ldw	r17,8(sp)
   11274:	dc000117 	ldw	r16,4(sp)
   11278:	dec00404 	addi	sp,sp,16
   1127c:	f800283a 	ret
   11280:	d9800015 	stw	r6,0(sp)
   11284:	000ef880 	call	ef88 <__sinit>
   11288:	d9800017 	ldw	r6,0(sp)
   1128c:	30800217 	ldw	r2,8(r6)
   11290:	10ffffc4 	addi	r3,r2,-1
   11294:	30c00215 	stw	r3,8(r6)
   11298:	183fed0e 	bge	r3,zero,11250 <_putc_r+0x34>
   1129c:	30800617 	ldw	r2,24(r6)
   112a0:	18800e16 	blt	r3,r2,112dc <_putc_r+0xc0>
   112a4:	30800017 	ldw	r2,0(r6)
   112a8:	14400005 	stb	r17,0(r2)
   112ac:	31000017 	ldw	r4,0(r6)
   112b0:	00800284 	movi	r2,10
   112b4:	20c00003 	ldbu	r3,0(r4)
   112b8:	18800f26 	beq	r3,r2,112f8 <_putc_r+0xdc>
   112bc:	20800044 	addi	r2,r4,1
   112c0:	30800015 	stw	r2,0(r6)
   112c4:	1805883a 	mov	r2,r3
   112c8:	dfc00317 	ldw	ra,12(sp)
   112cc:	dc400217 	ldw	r17,8(sp)
   112d0:	dc000117 	ldw	r16,4(sp)
   112d4:	dec00404 	addi	sp,sp,16
   112d8:	f800283a 	ret
   112dc:	8009883a 	mov	r4,r16
   112e0:	880b883a 	mov	r5,r17
   112e4:	dfc00317 	ldw	ra,12(sp)
   112e8:	dc400217 	ldw	r17,8(sp)
   112ec:	dc000117 	ldw	r16,4(sp)
   112f0:	dec00404 	addi	sp,sp,16
   112f4:	0011b401 	jmpi	11b40 <__swbuf_r>
   112f8:	8009883a 	mov	r4,r16
   112fc:	180b883a 	mov	r5,r3
   11300:	003ff806 	br	112e4 <_putc_r+0xc8>

00011304 <_realloc_r>:
   11304:	defff404 	addi	sp,sp,-48
   11308:	dd800815 	stw	r22,32(sp)
   1130c:	dc800415 	stw	r18,16(sp)
   11310:	dc400315 	stw	r17,12(sp)
   11314:	dfc00b15 	stw	ra,44(sp)
   11318:	df000a15 	stw	fp,40(sp)
   1131c:	ddc00915 	stw	r23,36(sp)
   11320:	dd400715 	stw	r21,28(sp)
   11324:	dd000615 	stw	r20,24(sp)
   11328:	dcc00515 	stw	r19,20(sp)
   1132c:	dc000215 	stw	r16,8(sp)
   11330:	2825883a 	mov	r18,r5
   11334:	3023883a 	mov	r17,r6
   11338:	202d883a 	mov	r22,r4
   1133c:	2800c926 	beq	r5,zero,11664 <_realloc_r+0x360>
   11340:	0013b580 	call	13b58 <__malloc_lock>
   11344:	943ffe04 	addi	r16,r18,-8
   11348:	88c002c4 	addi	r3,r17,11
   1134c:	00800584 	movi	r2,22
   11350:	82000117 	ldw	r8,4(r16)
   11354:	10c01b2e 	bgeu	r2,r3,113c4 <_realloc_r+0xc0>
   11358:	00bffe04 	movi	r2,-8
   1135c:	188e703a 	and	r7,r3,r2
   11360:	3839883a 	mov	fp,r7
   11364:	38001a16 	blt	r7,zero,113d0 <_realloc_r+0xcc>
   11368:	e4401936 	bltu	fp,r17,113d0 <_realloc_r+0xcc>
   1136c:	013fff04 	movi	r4,-4
   11370:	4126703a 	and	r19,r8,r4
   11374:	99c02616 	blt	r19,r7,11410 <_realloc_r+0x10c>
   11378:	802b883a 	mov	r21,r16
   1137c:	9829883a 	mov	r20,r19
   11380:	84000204 	addi	r16,r16,8
   11384:	a80f883a 	mov	r7,r21
   11388:	a70dc83a 	sub	r6,r20,fp
   1138c:	008003c4 	movi	r2,15
   11390:	1180c136 	bltu	r2,r6,11698 <_realloc_r+0x394>
   11394:	38800117 	ldw	r2,4(r7)
   11398:	a549883a 	add	r4,r20,r21
   1139c:	1080004c 	andi	r2,r2,1
   113a0:	a084b03a 	or	r2,r20,r2
   113a4:	38800115 	stw	r2,4(r7)
   113a8:	20c00117 	ldw	r3,4(r4)
   113ac:	18c00054 	ori	r3,r3,1
   113b0:	20c00115 	stw	r3,4(r4)
   113b4:	b009883a 	mov	r4,r22
   113b8:	0013b780 	call	13b78 <__malloc_unlock>
   113bc:	8023883a 	mov	r17,r16
   113c0:	00000606 	br	113dc <_realloc_r+0xd8>
   113c4:	01c00404 	movi	r7,16
   113c8:	3839883a 	mov	fp,r7
   113cc:	e47fe72e 	bgeu	fp,r17,1136c <_realloc_r+0x68>
   113d0:	00800304 	movi	r2,12
   113d4:	0023883a 	mov	r17,zero
   113d8:	b0800015 	stw	r2,0(r22)
   113dc:	8805883a 	mov	r2,r17
   113e0:	dfc00b17 	ldw	ra,44(sp)
   113e4:	df000a17 	ldw	fp,40(sp)
   113e8:	ddc00917 	ldw	r23,36(sp)
   113ec:	dd800817 	ldw	r22,32(sp)
   113f0:	dd400717 	ldw	r21,28(sp)
   113f4:	dd000617 	ldw	r20,24(sp)
   113f8:	dcc00517 	ldw	r19,20(sp)
   113fc:	dc800417 	ldw	r18,16(sp)
   11400:	dc400317 	ldw	r17,12(sp)
   11404:	dc000217 	ldw	r16,8(sp)
   11408:	dec00c04 	addi	sp,sp,48
   1140c:	f800283a 	ret
   11410:	008001f4 	movhi	r2,7
   11414:	109aef04 	addi	r2,r2,27580
   11418:	12400217 	ldw	r9,8(r2)
   1141c:	84cd883a 	add	r6,r16,r19
   11420:	802b883a 	mov	r21,r16
   11424:	3240b926 	beq	r6,r9,1170c <_realloc_r+0x408>
   11428:	31400117 	ldw	r5,4(r6)
   1142c:	00bfff84 	movi	r2,-2
   11430:	2884703a 	and	r2,r5,r2
   11434:	1185883a 	add	r2,r2,r6
   11438:	10c00117 	ldw	r3,4(r2)
   1143c:	18c0004c 	andi	r3,r3,1
   11440:	1807003a 	cmpeq	r3,r3,zero
   11444:	1800a326 	beq	r3,zero,116d4 <_realloc_r+0x3d0>
   11448:	2908703a 	and	r4,r5,r4
   1144c:	9929883a 	add	r20,r19,r4
   11450:	a1c0a30e 	bge	r20,r7,116e0 <_realloc_r+0x3dc>
   11454:	4080004c 	andi	r2,r8,1
   11458:	1000551e 	bne	r2,zero,115b0 <_realloc_r+0x2ac>
   1145c:	80800017 	ldw	r2,0(r16)
   11460:	80afc83a 	sub	r23,r16,r2
   11464:	b8c00117 	ldw	r3,4(r23)
   11468:	00bfff04 	movi	r2,-4
   1146c:	1884703a 	and	r2,r3,r2
   11470:	30002e26 	beq	r6,zero,1152c <_realloc_r+0x228>
   11474:	3240b926 	beq	r6,r9,1175c <_realloc_r+0x458>
   11478:	98a9883a 	add	r20,r19,r2
   1147c:	2509883a 	add	r4,r4,r20
   11480:	d9000015 	stw	r4,0(sp)
   11484:	21c02a16 	blt	r4,r7,11530 <_realloc_r+0x22c>
   11488:	30800317 	ldw	r2,12(r6)
   1148c:	30c00217 	ldw	r3,8(r6)
   11490:	01400904 	movi	r5,36
   11494:	99bfff04 	addi	r6,r19,-4
   11498:	18800315 	stw	r2,12(r3)
   1149c:	10c00215 	stw	r3,8(r2)
   114a0:	b9000317 	ldw	r4,12(r23)
   114a4:	b8800217 	ldw	r2,8(r23)
   114a8:	b82b883a 	mov	r21,r23
   114ac:	bc000204 	addi	r16,r23,8
   114b0:	20800215 	stw	r2,8(r4)
   114b4:	11000315 	stw	r4,12(r2)
   114b8:	2980e436 	bltu	r5,r6,1184c <_realloc_r+0x548>
   114bc:	008004c4 	movi	r2,19
   114c0:	9009883a 	mov	r4,r18
   114c4:	8011883a 	mov	r8,r16
   114c8:	11800f2e 	bgeu	r2,r6,11508 <_realloc_r+0x204>
   114cc:	90800017 	ldw	r2,0(r18)
   114d0:	ba000404 	addi	r8,r23,16
   114d4:	91000204 	addi	r4,r18,8
   114d8:	b8800215 	stw	r2,8(r23)
   114dc:	90c00117 	ldw	r3,4(r18)
   114e0:	008006c4 	movi	r2,27
   114e4:	b8c00315 	stw	r3,12(r23)
   114e8:	1180072e 	bgeu	r2,r6,11508 <_realloc_r+0x204>
   114ec:	90c00217 	ldw	r3,8(r18)
   114f0:	ba000604 	addi	r8,r23,24
   114f4:	91000404 	addi	r4,r18,16
   114f8:	b8c00415 	stw	r3,16(r23)
   114fc:	90800317 	ldw	r2,12(r18)
   11500:	b8800515 	stw	r2,20(r23)
   11504:	3140e726 	beq	r6,r5,118a4 <_realloc_r+0x5a0>
   11508:	20800017 	ldw	r2,0(r4)
   1150c:	dd000017 	ldw	r20,0(sp)
   11510:	b80f883a 	mov	r7,r23
   11514:	40800015 	stw	r2,0(r8)
   11518:	20c00117 	ldw	r3,4(r4)
   1151c:	40c00115 	stw	r3,4(r8)
   11520:	20800217 	ldw	r2,8(r4)
   11524:	40800215 	stw	r2,8(r8)
   11528:	003f9706 	br	11388 <_realloc_r+0x84>
   1152c:	98a9883a 	add	r20,r19,r2
   11530:	a1c01f16 	blt	r20,r7,115b0 <_realloc_r+0x2ac>
   11534:	b8c00317 	ldw	r3,12(r23)
   11538:	b8800217 	ldw	r2,8(r23)
   1153c:	99bfff04 	addi	r6,r19,-4
   11540:	01400904 	movi	r5,36
   11544:	b82b883a 	mov	r21,r23
   11548:	18800215 	stw	r2,8(r3)
   1154c:	10c00315 	stw	r3,12(r2)
   11550:	bc000204 	addi	r16,r23,8
   11554:	2980c336 	bltu	r5,r6,11864 <_realloc_r+0x560>
   11558:	008004c4 	movi	r2,19
   1155c:	9009883a 	mov	r4,r18
   11560:	8011883a 	mov	r8,r16
   11564:	11800f2e 	bgeu	r2,r6,115a4 <_realloc_r+0x2a0>
   11568:	90800017 	ldw	r2,0(r18)
   1156c:	ba000404 	addi	r8,r23,16
   11570:	91000204 	addi	r4,r18,8
   11574:	b8800215 	stw	r2,8(r23)
   11578:	90c00117 	ldw	r3,4(r18)
   1157c:	008006c4 	movi	r2,27
   11580:	b8c00315 	stw	r3,12(r23)
   11584:	1180072e 	bgeu	r2,r6,115a4 <_realloc_r+0x2a0>
   11588:	90c00217 	ldw	r3,8(r18)
   1158c:	ba000604 	addi	r8,r23,24
   11590:	91000404 	addi	r4,r18,16
   11594:	b8c00415 	stw	r3,16(r23)
   11598:	90800317 	ldw	r2,12(r18)
   1159c:	b8800515 	stw	r2,20(r23)
   115a0:	3140c726 	beq	r6,r5,118c0 <_realloc_r+0x5bc>
   115a4:	20800017 	ldw	r2,0(r4)
   115a8:	b80f883a 	mov	r7,r23
   115ac:	003fd906 	br	11514 <_realloc_r+0x210>
   115b0:	880b883a 	mov	r5,r17
   115b4:	b009883a 	mov	r4,r22
   115b8:	000a77c0 	call	a77c <_malloc_r>
   115bc:	1023883a 	mov	r17,r2
   115c0:	10002526 	beq	r2,zero,11658 <_realloc_r+0x354>
   115c4:	80800117 	ldw	r2,4(r16)
   115c8:	00ffff84 	movi	r3,-2
   115cc:	893ffe04 	addi	r4,r17,-8
   115d0:	10c4703a 	and	r2,r2,r3
   115d4:	8085883a 	add	r2,r16,r2
   115d8:	20809526 	beq	r4,r2,11830 <_realloc_r+0x52c>
   115dc:	99bfff04 	addi	r6,r19,-4
   115e0:	01c00904 	movi	r7,36
   115e4:	39804536 	bltu	r7,r6,116fc <_realloc_r+0x3f8>
   115e8:	008004c4 	movi	r2,19
   115ec:	9009883a 	mov	r4,r18
   115f0:	880b883a 	mov	r5,r17
   115f4:	11800f2e 	bgeu	r2,r6,11634 <_realloc_r+0x330>
   115f8:	90800017 	ldw	r2,0(r18)
   115fc:	89400204 	addi	r5,r17,8
   11600:	91000204 	addi	r4,r18,8
   11604:	88800015 	stw	r2,0(r17)
   11608:	90c00117 	ldw	r3,4(r18)
   1160c:	008006c4 	movi	r2,27
   11610:	88c00115 	stw	r3,4(r17)
   11614:	1180072e 	bgeu	r2,r6,11634 <_realloc_r+0x330>
   11618:	90c00217 	ldw	r3,8(r18)
   1161c:	89400404 	addi	r5,r17,16
   11620:	91000404 	addi	r4,r18,16
   11624:	88c00215 	stw	r3,8(r17)
   11628:	90800317 	ldw	r2,12(r18)
   1162c:	88800315 	stw	r2,12(r17)
   11630:	31c09126 	beq	r6,r7,11878 <_realloc_r+0x574>
   11634:	20800017 	ldw	r2,0(r4)
   11638:	28800015 	stw	r2,0(r5)
   1163c:	20c00117 	ldw	r3,4(r4)
   11640:	28c00115 	stw	r3,4(r5)
   11644:	20800217 	ldw	r2,8(r4)
   11648:	28800215 	stw	r2,8(r5)
   1164c:	900b883a 	mov	r5,r18
   11650:	b009883a 	mov	r4,r22
   11654:	000f3400 	call	f340 <_free_r>
   11658:	b009883a 	mov	r4,r22
   1165c:	0013b780 	call	13b78 <__malloc_unlock>
   11660:	003f5e06 	br	113dc <_realloc_r+0xd8>
   11664:	300b883a 	mov	r5,r6
   11668:	dfc00b17 	ldw	ra,44(sp)
   1166c:	df000a17 	ldw	fp,40(sp)
   11670:	ddc00917 	ldw	r23,36(sp)
   11674:	dd800817 	ldw	r22,32(sp)
   11678:	dd400717 	ldw	r21,28(sp)
   1167c:	dd000617 	ldw	r20,24(sp)
   11680:	dcc00517 	ldw	r19,20(sp)
   11684:	dc800417 	ldw	r18,16(sp)
   11688:	dc400317 	ldw	r17,12(sp)
   1168c:	dc000217 	ldw	r16,8(sp)
   11690:	dec00c04 	addi	sp,sp,48
   11694:	000a77c1 	jmpi	a77c <_malloc_r>
   11698:	38800117 	ldw	r2,4(r7)
   1169c:	e54b883a 	add	r5,fp,r21
   116a0:	31000054 	ori	r4,r6,1
   116a4:	1080004c 	andi	r2,r2,1
   116a8:	1704b03a 	or	r2,r2,fp
   116ac:	38800115 	stw	r2,4(r7)
   116b0:	29000115 	stw	r4,4(r5)
   116b4:	2987883a 	add	r3,r5,r6
   116b8:	18800117 	ldw	r2,4(r3)
   116bc:	29400204 	addi	r5,r5,8
   116c0:	b009883a 	mov	r4,r22
   116c4:	10800054 	ori	r2,r2,1
   116c8:	18800115 	stw	r2,4(r3)
   116cc:	000f3400 	call	f340 <_free_r>
   116d0:	003f3806 	br	113b4 <_realloc_r+0xb0>
   116d4:	000d883a 	mov	r6,zero
   116d8:	0009883a 	mov	r4,zero
   116dc:	003f5d06 	br	11454 <_realloc_r+0x150>
   116e0:	30c00217 	ldw	r3,8(r6)
   116e4:	30800317 	ldw	r2,12(r6)
   116e8:	800f883a 	mov	r7,r16
   116ec:	84000204 	addi	r16,r16,8
   116f0:	10c00215 	stw	r3,8(r2)
   116f4:	18800315 	stw	r2,12(r3)
   116f8:	003f2306 	br	11388 <_realloc_r+0x84>
   116fc:	8809883a 	mov	r4,r17
   11700:	900b883a 	mov	r5,r18
   11704:	000ffac0 	call	ffac <memmove>
   11708:	003fd006 	br	1164c <_realloc_r+0x348>
   1170c:	30800117 	ldw	r2,4(r6)
   11710:	e0c00404 	addi	r3,fp,16
   11714:	1108703a 	and	r4,r2,r4
   11718:	9905883a 	add	r2,r19,r4
   1171c:	10ff4d16 	blt	r2,r3,11454 <_realloc_r+0x150>
   11720:	1705c83a 	sub	r2,r2,fp
   11724:	870b883a 	add	r5,r16,fp
   11728:	10800054 	ori	r2,r2,1
   1172c:	28800115 	stw	r2,4(r5)
   11730:	80c00117 	ldw	r3,4(r16)
   11734:	008001f4 	movhi	r2,7
   11738:	109aef04 	addi	r2,r2,27580
   1173c:	b009883a 	mov	r4,r22
   11740:	18c0004c 	andi	r3,r3,1
   11744:	e0c6b03a 	or	r3,fp,r3
   11748:	11400215 	stw	r5,8(r2)
   1174c:	80c00115 	stw	r3,4(r16)
   11750:	0013b780 	call	13b78 <__malloc_unlock>
   11754:	84400204 	addi	r17,r16,8
   11758:	003f2006 	br	113dc <_realloc_r+0xd8>
   1175c:	98a9883a 	add	r20,r19,r2
   11760:	2509883a 	add	r4,r4,r20
   11764:	e0800404 	addi	r2,fp,16
   11768:	d9000115 	stw	r4,4(sp)
   1176c:	20bf7016 	blt	r4,r2,11530 <_realloc_r+0x22c>
   11770:	b8c00317 	ldw	r3,12(r23)
   11774:	b8800217 	ldw	r2,8(r23)
   11778:	99bfff04 	addi	r6,r19,-4
   1177c:	01400904 	movi	r5,36
   11780:	18800215 	stw	r2,8(r3)
   11784:	10c00315 	stw	r3,12(r2)
   11788:	bc400204 	addi	r17,r23,8
   1178c:	29804136 	bltu	r5,r6,11894 <_realloc_r+0x590>
   11790:	008004c4 	movi	r2,19
   11794:	9009883a 	mov	r4,r18
   11798:	880f883a 	mov	r7,r17
   1179c:	11800f2e 	bgeu	r2,r6,117dc <_realloc_r+0x4d8>
   117a0:	90800017 	ldw	r2,0(r18)
   117a4:	b9c00404 	addi	r7,r23,16
   117a8:	91000204 	addi	r4,r18,8
   117ac:	b8800215 	stw	r2,8(r23)
   117b0:	90c00117 	ldw	r3,4(r18)
   117b4:	008006c4 	movi	r2,27
   117b8:	b8c00315 	stw	r3,12(r23)
   117bc:	1180072e 	bgeu	r2,r6,117dc <_realloc_r+0x4d8>
   117c0:	90c00217 	ldw	r3,8(r18)
   117c4:	b9c00604 	addi	r7,r23,24
   117c8:	91000404 	addi	r4,r18,16
   117cc:	b8c00415 	stw	r3,16(r23)
   117d0:	90800317 	ldw	r2,12(r18)
   117d4:	b8800515 	stw	r2,20(r23)
   117d8:	31404026 	beq	r6,r5,118dc <_realloc_r+0x5d8>
   117dc:	20800017 	ldw	r2,0(r4)
   117e0:	38800015 	stw	r2,0(r7)
   117e4:	20c00117 	ldw	r3,4(r4)
   117e8:	38c00115 	stw	r3,4(r7)
   117ec:	20800217 	ldw	r2,8(r4)
   117f0:	38800215 	stw	r2,8(r7)
   117f4:	d8c00117 	ldw	r3,4(sp)
   117f8:	bf0b883a 	add	r5,r23,fp
   117fc:	b009883a 	mov	r4,r22
   11800:	1f05c83a 	sub	r2,r3,fp
   11804:	10800054 	ori	r2,r2,1
   11808:	28800115 	stw	r2,4(r5)
   1180c:	b8c00117 	ldw	r3,4(r23)
   11810:	008001f4 	movhi	r2,7
   11814:	109aef04 	addi	r2,r2,27580
   11818:	11400215 	stw	r5,8(r2)
   1181c:	18c0004c 	andi	r3,r3,1
   11820:	e0c6b03a 	or	r3,fp,r3
   11824:	b8c00115 	stw	r3,4(r23)
   11828:	0013b780 	call	13b78 <__malloc_unlock>
   1182c:	003eeb06 	br	113dc <_realloc_r+0xd8>
   11830:	20800117 	ldw	r2,4(r4)
   11834:	00ffff04 	movi	r3,-4
   11838:	800f883a 	mov	r7,r16
   1183c:	10c4703a 	and	r2,r2,r3
   11840:	98a9883a 	add	r20,r19,r2
   11844:	84000204 	addi	r16,r16,8
   11848:	003ecf06 	br	11388 <_realloc_r+0x84>
   1184c:	900b883a 	mov	r5,r18
   11850:	8009883a 	mov	r4,r16
   11854:	000ffac0 	call	ffac <memmove>
   11858:	dd000017 	ldw	r20,0(sp)
   1185c:	b80f883a 	mov	r7,r23
   11860:	003ec906 	br	11388 <_realloc_r+0x84>
   11864:	900b883a 	mov	r5,r18
   11868:	8009883a 	mov	r4,r16
   1186c:	000ffac0 	call	ffac <memmove>
   11870:	b80f883a 	mov	r7,r23
   11874:	003ec406 	br	11388 <_realloc_r+0x84>
   11878:	90c00417 	ldw	r3,16(r18)
   1187c:	89400604 	addi	r5,r17,24
   11880:	91000604 	addi	r4,r18,24
   11884:	88c00415 	stw	r3,16(r17)
   11888:	90800517 	ldw	r2,20(r18)
   1188c:	88800515 	stw	r2,20(r17)
   11890:	003f6806 	br	11634 <_realloc_r+0x330>
   11894:	900b883a 	mov	r5,r18
   11898:	8809883a 	mov	r4,r17
   1189c:	000ffac0 	call	ffac <memmove>
   118a0:	003fd406 	br	117f4 <_realloc_r+0x4f0>
   118a4:	90c00417 	ldw	r3,16(r18)
   118a8:	91000604 	addi	r4,r18,24
   118ac:	ba000804 	addi	r8,r23,32
   118b0:	b8c00615 	stw	r3,24(r23)
   118b4:	90800517 	ldw	r2,20(r18)
   118b8:	b8800715 	stw	r2,28(r23)
   118bc:	003f1206 	br	11508 <_realloc_r+0x204>
   118c0:	90c00417 	ldw	r3,16(r18)
   118c4:	91000604 	addi	r4,r18,24
   118c8:	ba000804 	addi	r8,r23,32
   118cc:	b8c00615 	stw	r3,24(r23)
   118d0:	90800517 	ldw	r2,20(r18)
   118d4:	b8800715 	stw	r2,28(r23)
   118d8:	003f3206 	br	115a4 <_realloc_r+0x2a0>
   118dc:	90c00417 	ldw	r3,16(r18)
   118e0:	91000604 	addi	r4,r18,24
   118e4:	b9c00804 	addi	r7,r23,32
   118e8:	b8c00615 	stw	r3,24(r23)
   118ec:	90800517 	ldw	r2,20(r18)
   118f0:	b8800715 	stw	r2,28(r23)
   118f4:	003fb906 	br	117dc <_realloc_r+0x4d8>

000118f8 <__isinfd>:
   118f8:	200d883a 	mov	r6,r4
   118fc:	0109c83a 	sub	r4,zero,r4
   11900:	2188b03a 	or	r4,r4,r6
   11904:	2008d7fa 	srli	r4,r4,31
   11908:	00a00034 	movhi	r2,32768
   1190c:	10bfffc4 	addi	r2,r2,-1
   11910:	1144703a 	and	r2,r2,r5
   11914:	2088b03a 	or	r4,r4,r2
   11918:	009ffc34 	movhi	r2,32752
   1191c:	1105c83a 	sub	r2,r2,r4
   11920:	0087c83a 	sub	r3,zero,r2
   11924:	10c4b03a 	or	r2,r2,r3
   11928:	1004d7fa 	srli	r2,r2,31
   1192c:	00c00044 	movi	r3,1
   11930:	1885c83a 	sub	r2,r3,r2
   11934:	f800283a 	ret

00011938 <__sclose>:
   11938:	2940038f 	ldh	r5,14(r5)
   1193c:	0011dcc1 	jmpi	11dcc <_close_r>

00011940 <__sseek>:
   11940:	defffe04 	addi	sp,sp,-8
   11944:	dc000015 	stw	r16,0(sp)
   11948:	2821883a 	mov	r16,r5
   1194c:	2940038f 	ldh	r5,14(r5)
   11950:	dfc00115 	stw	ra,4(sp)
   11954:	00120440 	call	12044 <_lseek_r>
   11958:	1007883a 	mov	r3,r2
   1195c:	00bfffc4 	movi	r2,-1
   11960:	18800926 	beq	r3,r2,11988 <__sseek+0x48>
   11964:	8080030b 	ldhu	r2,12(r16)
   11968:	80c01415 	stw	r3,80(r16)
   1196c:	10840014 	ori	r2,r2,4096
   11970:	8080030d 	sth	r2,12(r16)
   11974:	1805883a 	mov	r2,r3
   11978:	dfc00117 	ldw	ra,4(sp)
   1197c:	dc000017 	ldw	r16,0(sp)
   11980:	dec00204 	addi	sp,sp,8
   11984:	f800283a 	ret
   11988:	8080030b 	ldhu	r2,12(r16)
   1198c:	10bbffcc 	andi	r2,r2,61439
   11990:	8080030d 	sth	r2,12(r16)
   11994:	1805883a 	mov	r2,r3
   11998:	dfc00117 	ldw	ra,4(sp)
   1199c:	dc000017 	ldw	r16,0(sp)
   119a0:	dec00204 	addi	sp,sp,8
   119a4:	f800283a 	ret

000119a8 <__swrite>:
   119a8:	2880030b 	ldhu	r2,12(r5)
   119ac:	defffb04 	addi	sp,sp,-20
   119b0:	dcc00315 	stw	r19,12(sp)
   119b4:	1080400c 	andi	r2,r2,256
   119b8:	dc800215 	stw	r18,8(sp)
   119bc:	dc400115 	stw	r17,4(sp)
   119c0:	dc000015 	stw	r16,0(sp)
   119c4:	3027883a 	mov	r19,r6
   119c8:	3825883a 	mov	r18,r7
   119cc:	dfc00415 	stw	ra,16(sp)
   119d0:	2821883a 	mov	r16,r5
   119d4:	000d883a 	mov	r6,zero
   119d8:	01c00084 	movi	r7,2
   119dc:	2023883a 	mov	r17,r4
   119e0:	10000226 	beq	r2,zero,119ec <__swrite+0x44>
   119e4:	2940038f 	ldh	r5,14(r5)
   119e8:	00120440 	call	12044 <_lseek_r>
   119ec:	8080030b 	ldhu	r2,12(r16)
   119f0:	8140038f 	ldh	r5,14(r16)
   119f4:	8809883a 	mov	r4,r17
   119f8:	10bbffcc 	andi	r2,r2,61439
   119fc:	980d883a 	mov	r6,r19
   11a00:	900f883a 	mov	r7,r18
   11a04:	8080030d 	sth	r2,12(r16)
   11a08:	dfc00417 	ldw	ra,16(sp)
   11a0c:	dcc00317 	ldw	r19,12(sp)
   11a10:	dc800217 	ldw	r18,8(sp)
   11a14:	dc400117 	ldw	r17,4(sp)
   11a18:	dc000017 	ldw	r16,0(sp)
   11a1c:	dec00504 	addi	sp,sp,20
   11a20:	0011c8c1 	jmpi	11c8c <_write_r>

00011a24 <__sread>:
   11a24:	defffe04 	addi	sp,sp,-8
   11a28:	dc000015 	stw	r16,0(sp)
   11a2c:	2821883a 	mov	r16,r5
   11a30:	2940038f 	ldh	r5,14(r5)
   11a34:	dfc00115 	stw	ra,4(sp)
   11a38:	00120bc0 	call	120bc <_read_r>
   11a3c:	1007883a 	mov	r3,r2
   11a40:	10000816 	blt	r2,zero,11a64 <__sread+0x40>
   11a44:	80801417 	ldw	r2,80(r16)
   11a48:	10c5883a 	add	r2,r2,r3
   11a4c:	80801415 	stw	r2,80(r16)
   11a50:	1805883a 	mov	r2,r3
   11a54:	dfc00117 	ldw	ra,4(sp)
   11a58:	dc000017 	ldw	r16,0(sp)
   11a5c:	dec00204 	addi	sp,sp,8
   11a60:	f800283a 	ret
   11a64:	8080030b 	ldhu	r2,12(r16)
   11a68:	10bbffcc 	andi	r2,r2,61439
   11a6c:	8080030d 	sth	r2,12(r16)
   11a70:	1805883a 	mov	r2,r3
   11a74:	dfc00117 	ldw	ra,4(sp)
   11a78:	dc000017 	ldw	r16,0(sp)
   11a7c:	dec00204 	addi	sp,sp,8
   11a80:	f800283a 	ret

00011a84 <strcmp>:
   11a84:	2144b03a 	or	r2,r4,r5
   11a88:	108000cc 	andi	r2,r2,3
   11a8c:	10001d1e 	bne	r2,zero,11b04 <strcmp+0x80>
   11a90:	200f883a 	mov	r7,r4
   11a94:	28800017 	ldw	r2,0(r5)
   11a98:	21000017 	ldw	r4,0(r4)
   11a9c:	280d883a 	mov	r6,r5
   11aa0:	2080161e 	bne	r4,r2,11afc <strcmp+0x78>
   11aa4:	023fbff4 	movhi	r8,65279
   11aa8:	423fbfc4 	addi	r8,r8,-257
   11aac:	2207883a 	add	r3,r4,r8
   11ab0:	01602074 	movhi	r5,32897
   11ab4:	29602004 	addi	r5,r5,-32640
   11ab8:	1946703a 	and	r3,r3,r5
   11abc:	0104303a 	nor	r2,zero,r4
   11ac0:	10c4703a 	and	r2,r2,r3
   11ac4:	10001c1e 	bne	r2,zero,11b38 <strcmp+0xb4>
   11ac8:	4013883a 	mov	r9,r8
   11acc:	2811883a 	mov	r8,r5
   11ad0:	00000106 	br	11ad8 <strcmp+0x54>
   11ad4:	1800181e 	bne	r3,zero,11b38 <strcmp+0xb4>
   11ad8:	39c00104 	addi	r7,r7,4
   11adc:	39000017 	ldw	r4,0(r7)
   11ae0:	31800104 	addi	r6,r6,4
   11ae4:	31400017 	ldw	r5,0(r6)
   11ae8:	2245883a 	add	r2,r4,r9
   11aec:	1204703a 	and	r2,r2,r8
   11af0:	0106303a 	nor	r3,zero,r4
   11af4:	1886703a 	and	r3,r3,r2
   11af8:	217ff626 	beq	r4,r5,11ad4 <strcmp+0x50>
   11afc:	3809883a 	mov	r4,r7
   11b00:	300b883a 	mov	r5,r6
   11b04:	20c00007 	ldb	r3,0(r4)
   11b08:	1800051e 	bne	r3,zero,11b20 <strcmp+0x9c>
   11b0c:	00000606 	br	11b28 <strcmp+0xa4>
   11b10:	21000044 	addi	r4,r4,1
   11b14:	20c00007 	ldb	r3,0(r4)
   11b18:	29400044 	addi	r5,r5,1
   11b1c:	18000226 	beq	r3,zero,11b28 <strcmp+0xa4>
   11b20:	28800007 	ldb	r2,0(r5)
   11b24:	18bffa26 	beq	r3,r2,11b10 <strcmp+0x8c>
   11b28:	20c00003 	ldbu	r3,0(r4)
   11b2c:	28800003 	ldbu	r2,0(r5)
   11b30:	1885c83a 	sub	r2,r3,r2
   11b34:	f800283a 	ret
   11b38:	0005883a 	mov	r2,zero
   11b3c:	f800283a 	ret

00011b40 <__swbuf_r>:
   11b40:	defffc04 	addi	sp,sp,-16
   11b44:	dc400215 	stw	r17,8(sp)
   11b48:	dc000115 	stw	r16,4(sp)
   11b4c:	dfc00315 	stw	ra,12(sp)
   11b50:	2023883a 	mov	r17,r4
   11b54:	2821883a 	mov	r16,r5
   11b58:	20000226 	beq	r4,zero,11b64 <__swbuf_r+0x24>
   11b5c:	20800e17 	ldw	r2,56(r4)
   11b60:	10002f26 	beq	r2,zero,11c20 <__swbuf_r+0xe0>
   11b64:	3080030b 	ldhu	r2,12(r6)
   11b68:	30c00617 	ldw	r3,24(r6)
   11b6c:	1080020c 	andi	r2,r2,8
   11b70:	30c00215 	stw	r3,8(r6)
   11b74:	10002226 	beq	r2,zero,11c00 <__swbuf_r+0xc0>
   11b78:	30c00417 	ldw	r3,16(r6)
   11b7c:	18002026 	beq	r3,zero,11c00 <__swbuf_r+0xc0>
   11b80:	31000017 	ldw	r4,0(r6)
   11b84:	30800517 	ldw	r2,20(r6)
   11b88:	20c7c83a 	sub	r3,r4,r3
   11b8c:	18802f0e 	bge	r3,r2,11c4c <__swbuf_r+0x10c>
   11b90:	19400044 	addi	r5,r3,1
   11b94:	30800217 	ldw	r2,8(r6)
   11b98:	84003fcc 	andi	r16,r16,255
   11b9c:	20c00044 	addi	r3,r4,1
   11ba0:	10bfffc4 	addi	r2,r2,-1
   11ba4:	30800215 	stw	r2,8(r6)
   11ba8:	24000005 	stb	r16,0(r4)
   11bac:	30800517 	ldw	r2,20(r6)
   11bb0:	30c00015 	stw	r3,0(r6)
   11bb4:	11400c26 	beq	r2,r5,11be8 <__swbuf_r+0xa8>
   11bb8:	3080030b 	ldhu	r2,12(r6)
   11bbc:	1080004c 	andi	r2,r2,1
   11bc0:	1005003a 	cmpeq	r2,r2,zero
   11bc4:	10000626 	beq	r2,zero,11be0 <__swbuf_r+0xa0>
   11bc8:	8005883a 	mov	r2,r16
   11bcc:	dfc00317 	ldw	ra,12(sp)
   11bd0:	dc400217 	ldw	r17,8(sp)
   11bd4:	dc000117 	ldw	r16,4(sp)
   11bd8:	dec00404 	addi	sp,sp,16
   11bdc:	f800283a 	ret
   11be0:	00800284 	movi	r2,10
   11be4:	80bff81e 	bne	r16,r2,11bc8 <__swbuf_r+0x88>
   11be8:	8809883a 	mov	r4,r17
   11bec:	300b883a 	mov	r5,r6
   11bf0:	000ecf00 	call	ecf0 <_fflush_r>
   11bf4:	103ff426 	beq	r2,zero,11bc8 <__swbuf_r+0x88>
   11bf8:	043fffc4 	movi	r16,-1
   11bfc:	003ff206 	br	11bc8 <__swbuf_r+0x88>
   11c00:	300b883a 	mov	r5,r6
   11c04:	8809883a 	mov	r4,r17
   11c08:	d9800015 	stw	r6,0(sp)
   11c0c:	000d3bc0 	call	d3bc <__swsetup_r>
   11c10:	d9800017 	ldw	r6,0(sp)
   11c14:	1000061e 	bne	r2,zero,11c30 <__swbuf_r+0xf0>
   11c18:	30c00417 	ldw	r3,16(r6)
   11c1c:	003fd806 	br	11b80 <__swbuf_r+0x40>
   11c20:	d9800015 	stw	r6,0(sp)
   11c24:	000ef880 	call	ef88 <__sinit>
   11c28:	d9800017 	ldw	r6,0(sp)
   11c2c:	003fcd06 	br	11b64 <__swbuf_r+0x24>
   11c30:	3080030b 	ldhu	r2,12(r6)
   11c34:	00c00244 	movi	r3,9
   11c38:	043fffc4 	movi	r16,-1
   11c3c:	10801014 	ori	r2,r2,64
   11c40:	3080030d 	sth	r2,12(r6)
   11c44:	88c00015 	stw	r3,0(r17)
   11c48:	003fdf06 	br	11bc8 <__swbuf_r+0x88>
   11c4c:	300b883a 	mov	r5,r6
   11c50:	8809883a 	mov	r4,r17
   11c54:	d9800015 	stw	r6,0(sp)
   11c58:	000ecf00 	call	ecf0 <_fflush_r>
   11c5c:	d9800017 	ldw	r6,0(sp)
   11c60:	103fe51e 	bne	r2,zero,11bf8 <__swbuf_r+0xb8>
   11c64:	31000017 	ldw	r4,0(r6)
   11c68:	01400044 	movi	r5,1
   11c6c:	003fc906 	br	11b94 <__swbuf_r+0x54>

00011c70 <__swbuf>:
   11c70:	01800234 	movhi	r6,8
   11c74:	31a07904 	addi	r6,r6,-32284
   11c78:	2007883a 	mov	r3,r4
   11c7c:	31000017 	ldw	r4,0(r6)
   11c80:	280d883a 	mov	r6,r5
   11c84:	180b883a 	mov	r5,r3
   11c88:	0011b401 	jmpi	11b40 <__swbuf_r>

00011c8c <_write_r>:
   11c8c:	defffd04 	addi	sp,sp,-12
   11c90:	dc000015 	stw	r16,0(sp)
   11c94:	04000234 	movhi	r16,8
   11c98:	842e1604 	addi	r16,r16,-18344
   11c9c:	dc400115 	stw	r17,4(sp)
   11ca0:	80000015 	stw	zero,0(r16)
   11ca4:	2023883a 	mov	r17,r4
   11ca8:	2809883a 	mov	r4,r5
   11cac:	300b883a 	mov	r5,r6
   11cb0:	380d883a 	mov	r6,r7
   11cb4:	dfc00215 	stw	ra,8(sp)
   11cb8:	00140240 	call	14024 <write>
   11cbc:	1007883a 	mov	r3,r2
   11cc0:	00bfffc4 	movi	r2,-1
   11cc4:	18800626 	beq	r3,r2,11ce0 <_write_r+0x54>
   11cc8:	1805883a 	mov	r2,r3
   11ccc:	dfc00217 	ldw	ra,8(sp)
   11cd0:	dc400117 	ldw	r17,4(sp)
   11cd4:	dc000017 	ldw	r16,0(sp)
   11cd8:	dec00304 	addi	sp,sp,12
   11cdc:	f800283a 	ret
   11ce0:	80800017 	ldw	r2,0(r16)
   11ce4:	103ff826 	beq	r2,zero,11cc8 <_write_r+0x3c>
   11ce8:	88800015 	stw	r2,0(r17)
   11cec:	1805883a 	mov	r2,r3
   11cf0:	dfc00217 	ldw	ra,8(sp)
   11cf4:	dc400117 	ldw	r17,4(sp)
   11cf8:	dc000017 	ldw	r16,0(sp)
   11cfc:	dec00304 	addi	sp,sp,12
   11d00:	f800283a 	ret

00011d04 <_calloc_r>:
   11d04:	defffe04 	addi	sp,sp,-8
   11d08:	dc400015 	stw	r17,0(sp)
   11d0c:	2023883a 	mov	r17,r4
   11d10:	2809883a 	mov	r4,r5
   11d14:	300b883a 	mov	r5,r6
   11d18:	dfc00115 	stw	ra,4(sp)
   11d1c:	000a0540 	call	a054 <__mulsi3>
   11d20:	100b883a 	mov	r5,r2
   11d24:	8809883a 	mov	r4,r17
   11d28:	000a77c0 	call	a77c <_malloc_r>
   11d2c:	1023883a 	mov	r17,r2
   11d30:	01c00904 	movi	r7,36
   11d34:	10000d26 	beq	r2,zero,11d6c <_calloc_r+0x68>
   11d38:	10ffff17 	ldw	r3,-4(r2)
   11d3c:	1009883a 	mov	r4,r2
   11d40:	00bfff04 	movi	r2,-4
   11d44:	1886703a 	and	r3,r3,r2
   11d48:	1887883a 	add	r3,r3,r2
   11d4c:	180d883a 	mov	r6,r3
   11d50:	000b883a 	mov	r5,zero
   11d54:	38c01736 	bltu	r7,r3,11db4 <_calloc_r+0xb0>
   11d58:	008004c4 	movi	r2,19
   11d5c:	10c00836 	bltu	r2,r3,11d80 <_calloc_r+0x7c>
   11d60:	20000215 	stw	zero,8(r4)
   11d64:	20000015 	stw	zero,0(r4)
   11d68:	20000115 	stw	zero,4(r4)
   11d6c:	8805883a 	mov	r2,r17
   11d70:	dfc00117 	ldw	ra,4(sp)
   11d74:	dc400017 	ldw	r17,0(sp)
   11d78:	dec00204 	addi	sp,sp,8
   11d7c:	f800283a 	ret
   11d80:	008006c4 	movi	r2,27
   11d84:	88000015 	stw	zero,0(r17)
   11d88:	88000115 	stw	zero,4(r17)
   11d8c:	89000204 	addi	r4,r17,8
   11d90:	10fff32e 	bgeu	r2,r3,11d60 <_calloc_r+0x5c>
   11d94:	88000215 	stw	zero,8(r17)
   11d98:	88000315 	stw	zero,12(r17)
   11d9c:	89000404 	addi	r4,r17,16
   11da0:	19ffef1e 	bne	r3,r7,11d60 <_calloc_r+0x5c>
   11da4:	89000604 	addi	r4,r17,24
   11da8:	88000415 	stw	zero,16(r17)
   11dac:	88000515 	stw	zero,20(r17)
   11db0:	003feb06 	br	11d60 <_calloc_r+0x5c>
   11db4:	000af5c0 	call	af5c <memset>
   11db8:	8805883a 	mov	r2,r17
   11dbc:	dfc00117 	ldw	ra,4(sp)
   11dc0:	dc400017 	ldw	r17,0(sp)
   11dc4:	dec00204 	addi	sp,sp,8
   11dc8:	f800283a 	ret

00011dcc <_close_r>:
   11dcc:	defffd04 	addi	sp,sp,-12
   11dd0:	dc000015 	stw	r16,0(sp)
   11dd4:	04000234 	movhi	r16,8
   11dd8:	842e1604 	addi	r16,r16,-18344
   11ddc:	dc400115 	stw	r17,4(sp)
   11de0:	80000015 	stw	zero,0(r16)
   11de4:	2023883a 	mov	r17,r4
   11de8:	2809883a 	mov	r4,r5
   11dec:	dfc00215 	stw	ra,8(sp)
   11df0:	00131b40 	call	131b4 <close>
   11df4:	1007883a 	mov	r3,r2
   11df8:	00bfffc4 	movi	r2,-1
   11dfc:	18800626 	beq	r3,r2,11e18 <_close_r+0x4c>
   11e00:	1805883a 	mov	r2,r3
   11e04:	dfc00217 	ldw	ra,8(sp)
   11e08:	dc400117 	ldw	r17,4(sp)
   11e0c:	dc000017 	ldw	r16,0(sp)
   11e10:	dec00304 	addi	sp,sp,12
   11e14:	f800283a 	ret
   11e18:	80800017 	ldw	r2,0(r16)
   11e1c:	103ff826 	beq	r2,zero,11e00 <_close_r+0x34>
   11e20:	88800015 	stw	r2,0(r17)
   11e24:	1805883a 	mov	r2,r3
   11e28:	dfc00217 	ldw	ra,8(sp)
   11e2c:	dc400117 	ldw	r17,4(sp)
   11e30:	dc000017 	ldw	r16,0(sp)
   11e34:	dec00304 	addi	sp,sp,12
   11e38:	f800283a 	ret

00011e3c <_fclose_r>:
   11e3c:	defffc04 	addi	sp,sp,-16
   11e40:	dc400115 	stw	r17,4(sp)
   11e44:	dc000015 	stw	r16,0(sp)
   11e48:	dfc00315 	stw	ra,12(sp)
   11e4c:	dc800215 	stw	r18,8(sp)
   11e50:	2821883a 	mov	r16,r5
   11e54:	2023883a 	mov	r17,r4
   11e58:	28002926 	beq	r5,zero,11f00 <_fclose_r+0xc4>
   11e5c:	000ef780 	call	ef78 <__sfp_lock_acquire>
   11e60:	88000226 	beq	r17,zero,11e6c <_fclose_r+0x30>
   11e64:	88800e17 	ldw	r2,56(r17)
   11e68:	10002d26 	beq	r2,zero,11f20 <_fclose_r+0xe4>
   11e6c:	8080030f 	ldh	r2,12(r16)
   11e70:	10002226 	beq	r2,zero,11efc <_fclose_r+0xc0>
   11e74:	8809883a 	mov	r4,r17
   11e78:	800b883a 	mov	r5,r16
   11e7c:	000ecf00 	call	ecf0 <_fflush_r>
   11e80:	1025883a 	mov	r18,r2
   11e84:	80800b17 	ldw	r2,44(r16)
   11e88:	10000426 	beq	r2,zero,11e9c <_fclose_r+0x60>
   11e8c:	81400717 	ldw	r5,28(r16)
   11e90:	8809883a 	mov	r4,r17
   11e94:	103ee83a 	callr	r2
   11e98:	10002a16 	blt	r2,zero,11f44 <_fclose_r+0x108>
   11e9c:	8080030b 	ldhu	r2,12(r16)
   11ea0:	1080200c 	andi	r2,r2,128
   11ea4:	1000231e 	bne	r2,zero,11f34 <_fclose_r+0xf8>
   11ea8:	81400c17 	ldw	r5,48(r16)
   11eac:	28000526 	beq	r5,zero,11ec4 <_fclose_r+0x88>
   11eb0:	80801004 	addi	r2,r16,64
   11eb4:	28800226 	beq	r5,r2,11ec0 <_fclose_r+0x84>
   11eb8:	8809883a 	mov	r4,r17
   11ebc:	000f3400 	call	f340 <_free_r>
   11ec0:	80000c15 	stw	zero,48(r16)
   11ec4:	81401117 	ldw	r5,68(r16)
   11ec8:	28000326 	beq	r5,zero,11ed8 <_fclose_r+0x9c>
   11ecc:	8809883a 	mov	r4,r17
   11ed0:	000f3400 	call	f340 <_free_r>
   11ed4:	80001115 	stw	zero,68(r16)
   11ed8:	8000030d 	sth	zero,12(r16)
   11edc:	000ef7c0 	call	ef7c <__sfp_lock_release>
   11ee0:	9005883a 	mov	r2,r18
   11ee4:	dfc00317 	ldw	ra,12(sp)
   11ee8:	dc800217 	ldw	r18,8(sp)
   11eec:	dc400117 	ldw	r17,4(sp)
   11ef0:	dc000017 	ldw	r16,0(sp)
   11ef4:	dec00404 	addi	sp,sp,16
   11ef8:	f800283a 	ret
   11efc:	000ef7c0 	call	ef7c <__sfp_lock_release>
   11f00:	0025883a 	mov	r18,zero
   11f04:	9005883a 	mov	r2,r18
   11f08:	dfc00317 	ldw	ra,12(sp)
   11f0c:	dc800217 	ldw	r18,8(sp)
   11f10:	dc400117 	ldw	r17,4(sp)
   11f14:	dc000017 	ldw	r16,0(sp)
   11f18:	dec00404 	addi	sp,sp,16
   11f1c:	f800283a 	ret
   11f20:	8809883a 	mov	r4,r17
   11f24:	000ef880 	call	ef88 <__sinit>
   11f28:	8080030f 	ldh	r2,12(r16)
   11f2c:	103fd11e 	bne	r2,zero,11e74 <_fclose_r+0x38>
   11f30:	003ff206 	br	11efc <_fclose_r+0xc0>
   11f34:	81400417 	ldw	r5,16(r16)
   11f38:	8809883a 	mov	r4,r17
   11f3c:	000f3400 	call	f340 <_free_r>
   11f40:	003fd906 	br	11ea8 <_fclose_r+0x6c>
   11f44:	04bfffc4 	movi	r18,-1
   11f48:	003fd406 	br	11e9c <_fclose_r+0x60>

00011f4c <fclose>:
   11f4c:	00800234 	movhi	r2,8
   11f50:	10a07904 	addi	r2,r2,-32284
   11f54:	200b883a 	mov	r5,r4
   11f58:	11000017 	ldw	r4,0(r2)
   11f5c:	0011e3c1 	jmpi	11e3c <_fclose_r>

00011f60 <_fstat_r>:
   11f60:	defffd04 	addi	sp,sp,-12
   11f64:	dc000015 	stw	r16,0(sp)
   11f68:	04000234 	movhi	r16,8
   11f6c:	842e1604 	addi	r16,r16,-18344
   11f70:	dc400115 	stw	r17,4(sp)
   11f74:	80000015 	stw	zero,0(r16)
   11f78:	2023883a 	mov	r17,r4
   11f7c:	2809883a 	mov	r4,r5
   11f80:	300b883a 	mov	r5,r6
   11f84:	dfc00215 	stw	ra,8(sp)
   11f88:	00133840 	call	13384 <fstat>
   11f8c:	1007883a 	mov	r3,r2
   11f90:	00bfffc4 	movi	r2,-1
   11f94:	18800626 	beq	r3,r2,11fb0 <_fstat_r+0x50>
   11f98:	1805883a 	mov	r2,r3
   11f9c:	dfc00217 	ldw	ra,8(sp)
   11fa0:	dc400117 	ldw	r17,4(sp)
   11fa4:	dc000017 	ldw	r16,0(sp)
   11fa8:	dec00304 	addi	sp,sp,12
   11fac:	f800283a 	ret
   11fb0:	80800017 	ldw	r2,0(r16)
   11fb4:	103ff826 	beq	r2,zero,11f98 <_fstat_r+0x38>
   11fb8:	88800015 	stw	r2,0(r17)
   11fbc:	1805883a 	mov	r2,r3
   11fc0:	dfc00217 	ldw	ra,8(sp)
   11fc4:	dc400117 	ldw	r17,4(sp)
   11fc8:	dc000017 	ldw	r16,0(sp)
   11fcc:	dec00304 	addi	sp,sp,12
   11fd0:	f800283a 	ret

00011fd4 <_isatty_r>:
   11fd4:	defffd04 	addi	sp,sp,-12
   11fd8:	dc000015 	stw	r16,0(sp)
   11fdc:	04000234 	movhi	r16,8
   11fe0:	842e1604 	addi	r16,r16,-18344
   11fe4:	dc400115 	stw	r17,4(sp)
   11fe8:	80000015 	stw	zero,0(r16)
   11fec:	2023883a 	mov	r17,r4
   11ff0:	2809883a 	mov	r4,r5
   11ff4:	dfc00215 	stw	ra,8(sp)
   11ff8:	00137880 	call	13788 <isatty>
   11ffc:	1007883a 	mov	r3,r2
   12000:	00bfffc4 	movi	r2,-1
   12004:	18800626 	beq	r3,r2,12020 <_isatty_r+0x4c>
   12008:	1805883a 	mov	r2,r3
   1200c:	dfc00217 	ldw	ra,8(sp)
   12010:	dc400117 	ldw	r17,4(sp)
   12014:	dc000017 	ldw	r16,0(sp)
   12018:	dec00304 	addi	sp,sp,12
   1201c:	f800283a 	ret
   12020:	80800017 	ldw	r2,0(r16)
   12024:	103ff826 	beq	r2,zero,12008 <_isatty_r+0x34>
   12028:	88800015 	stw	r2,0(r17)
   1202c:	1805883a 	mov	r2,r3
   12030:	dfc00217 	ldw	ra,8(sp)
   12034:	dc400117 	ldw	r17,4(sp)
   12038:	dc000017 	ldw	r16,0(sp)
   1203c:	dec00304 	addi	sp,sp,12
   12040:	f800283a 	ret

00012044 <_lseek_r>:
   12044:	defffd04 	addi	sp,sp,-12
   12048:	dc000015 	stw	r16,0(sp)
   1204c:	04000234 	movhi	r16,8
   12050:	842e1604 	addi	r16,r16,-18344
   12054:	dc400115 	stw	r17,4(sp)
   12058:	80000015 	stw	zero,0(r16)
   1205c:	2023883a 	mov	r17,r4
   12060:	2809883a 	mov	r4,r5
   12064:	300b883a 	mov	r5,r6
   12068:	380d883a 	mov	r6,r7
   1206c:	dfc00215 	stw	ra,8(sp)
   12070:	00139980 	call	13998 <lseek>
   12074:	1007883a 	mov	r3,r2
   12078:	00bfffc4 	movi	r2,-1
   1207c:	18800626 	beq	r3,r2,12098 <_lseek_r+0x54>
   12080:	1805883a 	mov	r2,r3
   12084:	dfc00217 	ldw	ra,8(sp)
   12088:	dc400117 	ldw	r17,4(sp)
   1208c:	dc000017 	ldw	r16,0(sp)
   12090:	dec00304 	addi	sp,sp,12
   12094:	f800283a 	ret
   12098:	80800017 	ldw	r2,0(r16)
   1209c:	103ff826 	beq	r2,zero,12080 <_lseek_r+0x3c>
   120a0:	88800015 	stw	r2,0(r17)
   120a4:	1805883a 	mov	r2,r3
   120a8:	dfc00217 	ldw	ra,8(sp)
   120ac:	dc400117 	ldw	r17,4(sp)
   120b0:	dc000017 	ldw	r16,0(sp)
   120b4:	dec00304 	addi	sp,sp,12
   120b8:	f800283a 	ret

000120bc <_read_r>:
   120bc:	defffd04 	addi	sp,sp,-12
   120c0:	dc000015 	stw	r16,0(sp)
   120c4:	04000234 	movhi	r16,8
   120c8:	842e1604 	addi	r16,r16,-18344
   120cc:	dc400115 	stw	r17,4(sp)
   120d0:	80000015 	stw	zero,0(r16)
   120d4:	2023883a 	mov	r17,r4
   120d8:	2809883a 	mov	r4,r5
   120dc:	300b883a 	mov	r5,r6
   120e0:	380d883a 	mov	r6,r7
   120e4:	dfc00215 	stw	ra,8(sp)
   120e8:	0013b980 	call	13b98 <read>
   120ec:	1007883a 	mov	r3,r2
   120f0:	00bfffc4 	movi	r2,-1
   120f4:	18800626 	beq	r3,r2,12110 <_read_r+0x54>
   120f8:	1805883a 	mov	r2,r3
   120fc:	dfc00217 	ldw	ra,8(sp)
   12100:	dc400117 	ldw	r17,4(sp)
   12104:	dc000017 	ldw	r16,0(sp)
   12108:	dec00304 	addi	sp,sp,12
   1210c:	f800283a 	ret
   12110:	80800017 	ldw	r2,0(r16)
   12114:	103ff826 	beq	r2,zero,120f8 <_read_r+0x3c>
   12118:	88800015 	stw	r2,0(r17)
   1211c:	1805883a 	mov	r2,r3
   12120:	dfc00217 	ldw	ra,8(sp)
   12124:	dc400117 	ldw	r17,4(sp)
   12128:	dc000017 	ldw	r16,0(sp)
   1212c:	dec00304 	addi	sp,sp,12
   12130:	f800283a 	ret

00012134 <__udivdi3>:
   12134:	defff104 	addi	sp,sp,-60
   12138:	0015883a 	mov	r10,zero
   1213c:	2005883a 	mov	r2,r4
   12140:	3011883a 	mov	r8,r6
   12144:	df000d15 	stw	fp,52(sp)
   12148:	dd400a15 	stw	r21,40(sp)
   1214c:	dcc00815 	stw	r19,32(sp)
   12150:	dfc00e15 	stw	ra,56(sp)
   12154:	ddc00c15 	stw	r23,48(sp)
   12158:	dd800b15 	stw	r22,44(sp)
   1215c:	dd000915 	stw	r20,36(sp)
   12160:	dc800715 	stw	r18,28(sp)
   12164:	dc400615 	stw	r17,24(sp)
   12168:	dc000515 	stw	r16,20(sp)
   1216c:	da800315 	stw	r10,12(sp)
   12170:	4027883a 	mov	r19,r8
   12174:	1039883a 	mov	fp,r2
   12178:	282b883a 	mov	r21,r5
   1217c:	da800415 	stw	r10,16(sp)
   12180:	3800401e 	bne	r7,zero,12284 <__udivdi3+0x150>
   12184:	2a006536 	bltu	r5,r8,1231c <__udivdi3+0x1e8>
   12188:	4000b526 	beq	r8,zero,12460 <__udivdi3+0x32c>
   1218c:	00bfffd4 	movui	r2,65535
   12190:	14c0ad36 	bltu	r2,r19,12448 <__udivdi3+0x314>
   12194:	00803fc4 	movi	r2,255
   12198:	14c15e36 	bltu	r2,r19,12714 <__udivdi3+0x5e0>
   1219c:	000b883a 	mov	r5,zero
   121a0:	0005883a 	mov	r2,zero
   121a4:	9884d83a 	srl	r2,r19,r2
   121a8:	010001f4 	movhi	r4,7
   121ac:	21123604 	addi	r4,r4,18648
   121b0:	01800804 	movi	r6,32
   121b4:	1105883a 	add	r2,r2,r4
   121b8:	10c00003 	ldbu	r3,0(r2)
   121bc:	28c7883a 	add	r3,r5,r3
   121c0:	30e9c83a 	sub	r20,r6,r3
   121c4:	a0010a1e 	bne	r20,zero,125f0 <__udivdi3+0x4bc>
   121c8:	982ed43a 	srli	r23,r19,16
   121cc:	acebc83a 	sub	r21,r21,r19
   121d0:	9dbfffcc 	andi	r22,r19,65535
   121d4:	05000044 	movi	r20,1
   121d8:	a809883a 	mov	r4,r21
   121dc:	b80b883a 	mov	r5,r23
   121e0:	000a0440 	call	a044 <__udivsi3>
   121e4:	100b883a 	mov	r5,r2
   121e8:	b009883a 	mov	r4,r22
   121ec:	1021883a 	mov	r16,r2
   121f0:	000a0540 	call	a054 <__mulsi3>
   121f4:	a809883a 	mov	r4,r21
   121f8:	b80b883a 	mov	r5,r23
   121fc:	1023883a 	mov	r17,r2
   12200:	000a04c0 	call	a04c <__umodsi3>
   12204:	1004943a 	slli	r2,r2,16
   12208:	e006d43a 	srli	r3,fp,16
   1220c:	10c4b03a 	or	r2,r2,r3
   12210:	1440042e 	bgeu	r2,r17,12224 <__udivdi3+0xf0>
   12214:	14c5883a 	add	r2,r2,r19
   12218:	843fffc4 	addi	r16,r16,-1
   1221c:	14c00136 	bltu	r2,r19,12224 <__udivdi3+0xf0>
   12220:	14415c36 	bltu	r2,r17,12794 <__udivdi3+0x660>
   12224:	1463c83a 	sub	r17,r2,r17
   12228:	8809883a 	mov	r4,r17
   1222c:	b80b883a 	mov	r5,r23
   12230:	000a0440 	call	a044 <__udivsi3>
   12234:	100b883a 	mov	r5,r2
   12238:	b009883a 	mov	r4,r22
   1223c:	102b883a 	mov	r21,r2
   12240:	000a0540 	call	a054 <__mulsi3>
   12244:	8809883a 	mov	r4,r17
   12248:	b80b883a 	mov	r5,r23
   1224c:	1025883a 	mov	r18,r2
   12250:	000a04c0 	call	a04c <__umodsi3>
   12254:	1004943a 	slli	r2,r2,16
   12258:	e0ffffcc 	andi	r3,fp,65535
   1225c:	10c4b03a 	or	r2,r2,r3
   12260:	1480042e 	bgeu	r2,r18,12274 <__udivdi3+0x140>
   12264:	9885883a 	add	r2,r19,r2
   12268:	ad7fffc4 	addi	r21,r21,-1
   1226c:	14c00136 	bltu	r2,r19,12274 <__udivdi3+0x140>
   12270:	14813c36 	bltu	r2,r18,12764 <__udivdi3+0x630>
   12274:	8004943a 	slli	r2,r16,16
   12278:	a009883a 	mov	r4,r20
   1227c:	a884b03a 	or	r2,r21,r2
   12280:	00001506 	br	122d8 <__udivdi3+0x1a4>
   12284:	380d883a 	mov	r6,r7
   12288:	29c06c36 	bltu	r5,r7,1243c <__udivdi3+0x308>
   1228c:	00bfffd4 	movui	r2,65535
   12290:	11c06436 	bltu	r2,r7,12424 <__udivdi3+0x2f0>
   12294:	00803fc4 	movi	r2,255
   12298:	11c11836 	bltu	r2,r7,126fc <__udivdi3+0x5c8>
   1229c:	000b883a 	mov	r5,zero
   122a0:	0005883a 	mov	r2,zero
   122a4:	3084d83a 	srl	r2,r6,r2
   122a8:	010001f4 	movhi	r4,7
   122ac:	21123604 	addi	r4,r4,18648
   122b0:	01c00804 	movi	r7,32
   122b4:	1105883a 	add	r2,r2,r4
   122b8:	10c00003 	ldbu	r3,0(r2)
   122bc:	28c7883a 	add	r3,r5,r3
   122c0:	38edc83a 	sub	r22,r7,r3
   122c4:	b000731e 	bne	r22,zero,12494 <__udivdi3+0x360>
   122c8:	35400136 	bltu	r6,r21,122d0 <__udivdi3+0x19c>
   122cc:	e4c05b36 	bltu	fp,r19,1243c <__udivdi3+0x308>
   122d0:	00800044 	movi	r2,1
   122d4:	0009883a 	mov	r4,zero
   122d8:	d8800315 	stw	r2,12(sp)
   122dc:	d9400317 	ldw	r5,12(sp)
   122e0:	2007883a 	mov	r3,r4
   122e4:	d9000415 	stw	r4,16(sp)
   122e8:	2805883a 	mov	r2,r5
   122ec:	dfc00e17 	ldw	ra,56(sp)
   122f0:	df000d17 	ldw	fp,52(sp)
   122f4:	ddc00c17 	ldw	r23,48(sp)
   122f8:	dd800b17 	ldw	r22,44(sp)
   122fc:	dd400a17 	ldw	r21,40(sp)
   12300:	dd000917 	ldw	r20,36(sp)
   12304:	dcc00817 	ldw	r19,32(sp)
   12308:	dc800717 	ldw	r18,28(sp)
   1230c:	dc400617 	ldw	r17,24(sp)
   12310:	dc000517 	ldw	r16,20(sp)
   12314:	dec00f04 	addi	sp,sp,60
   12318:	f800283a 	ret
   1231c:	00bfffd4 	movui	r2,65535
   12320:	12005636 	bltu	r2,r8,1247c <__udivdi3+0x348>
   12324:	00803fc4 	movi	r2,255
   12328:	12010036 	bltu	r2,r8,1272c <__udivdi3+0x5f8>
   1232c:	000b883a 	mov	r5,zero
   12330:	0005883a 	mov	r2,zero
   12334:	9884d83a 	srl	r2,r19,r2
   12338:	010001f4 	movhi	r4,7
   1233c:	21123604 	addi	r4,r4,18648
   12340:	01800804 	movi	r6,32
   12344:	1105883a 	add	r2,r2,r4
   12348:	10c00003 	ldbu	r3,0(r2)
   1234c:	28c7883a 	add	r3,r5,r3
   12350:	30cbc83a 	sub	r5,r6,r3
   12354:	28000626 	beq	r5,zero,12370 <__udivdi3+0x23c>
   12358:	3145c83a 	sub	r2,r6,r5
   1235c:	e084d83a 	srl	r2,fp,r2
   12360:	a946983a 	sll	r3,r21,r5
   12364:	e178983a 	sll	fp,fp,r5
   12368:	9966983a 	sll	r19,r19,r5
   1236c:	18aab03a 	or	r21,r3,r2
   12370:	982ed43a 	srli	r23,r19,16
   12374:	a809883a 	mov	r4,r21
   12378:	9cbfffcc 	andi	r18,r19,65535
   1237c:	b80b883a 	mov	r5,r23
   12380:	000a0440 	call	a044 <__udivsi3>
   12384:	100b883a 	mov	r5,r2
   12388:	9009883a 	mov	r4,r18
   1238c:	1021883a 	mov	r16,r2
   12390:	000a0540 	call	a054 <__mulsi3>
   12394:	a809883a 	mov	r4,r21
   12398:	b80b883a 	mov	r5,r23
   1239c:	1023883a 	mov	r17,r2
   123a0:	000a04c0 	call	a04c <__umodsi3>
   123a4:	1004943a 	slli	r2,r2,16
   123a8:	e006d43a 	srli	r3,fp,16
   123ac:	10c4b03a 	or	r2,r2,r3
   123b0:	1440042e 	bgeu	r2,r17,123c4 <__udivdi3+0x290>
   123b4:	14c5883a 	add	r2,r2,r19
   123b8:	843fffc4 	addi	r16,r16,-1
   123bc:	14c00136 	bltu	r2,r19,123c4 <__udivdi3+0x290>
   123c0:	1440ea36 	bltu	r2,r17,1276c <__udivdi3+0x638>
   123c4:	1463c83a 	sub	r17,r2,r17
   123c8:	8809883a 	mov	r4,r17
   123cc:	b80b883a 	mov	r5,r23
   123d0:	000a0440 	call	a044 <__udivsi3>
   123d4:	100b883a 	mov	r5,r2
   123d8:	9009883a 	mov	r4,r18
   123dc:	102b883a 	mov	r21,r2
   123e0:	000a0540 	call	a054 <__mulsi3>
   123e4:	8809883a 	mov	r4,r17
   123e8:	b80b883a 	mov	r5,r23
   123ec:	1025883a 	mov	r18,r2
   123f0:	000a04c0 	call	a04c <__umodsi3>
   123f4:	1004943a 	slli	r2,r2,16
   123f8:	e0ffffcc 	andi	r3,fp,65535
   123fc:	10c4b03a 	or	r2,r2,r3
   12400:	1480042e 	bgeu	r2,r18,12414 <__udivdi3+0x2e0>
   12404:	9885883a 	add	r2,r19,r2
   12408:	ad7fffc4 	addi	r21,r21,-1
   1240c:	14c00136 	bltu	r2,r19,12414 <__udivdi3+0x2e0>
   12410:	1480d936 	bltu	r2,r18,12778 <__udivdi3+0x644>
   12414:	8004943a 	slli	r2,r16,16
   12418:	0009883a 	mov	r4,zero
   1241c:	a884b03a 	or	r2,r21,r2
   12420:	003fad06 	br	122d8 <__udivdi3+0x1a4>
   12424:	00804034 	movhi	r2,256
   12428:	10bfffc4 	addi	r2,r2,-1
   1242c:	11c0b636 	bltu	r2,r7,12708 <__udivdi3+0x5d4>
   12430:	01400404 	movi	r5,16
   12434:	2805883a 	mov	r2,r5
   12438:	003f9a06 	br	122a4 <__udivdi3+0x170>
   1243c:	0005883a 	mov	r2,zero
   12440:	0009883a 	mov	r4,zero
   12444:	003fa406 	br	122d8 <__udivdi3+0x1a4>
   12448:	00804034 	movhi	r2,256
   1244c:	10bfffc4 	addi	r2,r2,-1
   12450:	14c0b336 	bltu	r2,r19,12720 <__udivdi3+0x5ec>
   12454:	01400404 	movi	r5,16
   12458:	2805883a 	mov	r2,r5
   1245c:	003f5106 	br	121a4 <__udivdi3+0x70>
   12460:	01000044 	movi	r4,1
   12464:	000b883a 	mov	r5,zero
   12468:	000a0440 	call	a044 <__udivsi3>
   1246c:	1027883a 	mov	r19,r2
   12470:	00bfffd4 	movui	r2,65535
   12474:	14fff436 	bltu	r2,r19,12448 <__udivdi3+0x314>
   12478:	003f4606 	br	12194 <__udivdi3+0x60>
   1247c:	00804034 	movhi	r2,256
   12480:	10bfffc4 	addi	r2,r2,-1
   12484:	1200ac36 	bltu	r2,r8,12738 <__udivdi3+0x604>
   12488:	01400404 	movi	r5,16
   1248c:	2805883a 	mov	r2,r5
   12490:	003fa806 	br	12334 <__udivdi3+0x200>
   12494:	3d85c83a 	sub	r2,r7,r22
   12498:	3588983a 	sll	r4,r6,r22
   1249c:	9886d83a 	srl	r3,r19,r2
   124a0:	a8a2d83a 	srl	r17,r21,r2
   124a4:	e084d83a 	srl	r2,fp,r2
   124a8:	20eeb03a 	or	r23,r4,r3
   124ac:	b824d43a 	srli	r18,r23,16
   124b0:	ad86983a 	sll	r3,r21,r22
   124b4:	8809883a 	mov	r4,r17
   124b8:	900b883a 	mov	r5,r18
   124bc:	1886b03a 	or	r3,r3,r2
   124c0:	d8c00115 	stw	r3,4(sp)
   124c4:	bc3fffcc 	andi	r16,r23,65535
   124c8:	000a0440 	call	a044 <__udivsi3>
   124cc:	100b883a 	mov	r5,r2
   124d0:	8009883a 	mov	r4,r16
   124d4:	1029883a 	mov	r20,r2
   124d8:	000a0540 	call	a054 <__mulsi3>
   124dc:	900b883a 	mov	r5,r18
   124e0:	8809883a 	mov	r4,r17
   124e4:	102b883a 	mov	r21,r2
   124e8:	000a04c0 	call	a04c <__umodsi3>
   124ec:	d9400117 	ldw	r5,4(sp)
   124f0:	1004943a 	slli	r2,r2,16
   124f4:	9da6983a 	sll	r19,r19,r22
   124f8:	2806d43a 	srli	r3,r5,16
   124fc:	10c4b03a 	or	r2,r2,r3
   12500:	1540032e 	bgeu	r2,r21,12510 <__udivdi3+0x3dc>
   12504:	15c5883a 	add	r2,r2,r23
   12508:	a53fffc4 	addi	r20,r20,-1
   1250c:	15c0912e 	bgeu	r2,r23,12754 <__udivdi3+0x620>
   12510:	1563c83a 	sub	r17,r2,r21
   12514:	8809883a 	mov	r4,r17
   12518:	900b883a 	mov	r5,r18
   1251c:	000a0440 	call	a044 <__udivsi3>
   12520:	100b883a 	mov	r5,r2
   12524:	8009883a 	mov	r4,r16
   12528:	102b883a 	mov	r21,r2
   1252c:	000a0540 	call	a054 <__mulsi3>
   12530:	8809883a 	mov	r4,r17
   12534:	900b883a 	mov	r5,r18
   12538:	1021883a 	mov	r16,r2
   1253c:	000a04c0 	call	a04c <__umodsi3>
   12540:	da800117 	ldw	r10,4(sp)
   12544:	1004943a 	slli	r2,r2,16
   12548:	50ffffcc 	andi	r3,r10,65535
   1254c:	10c6b03a 	or	r3,r2,r3
   12550:	1c00032e 	bgeu	r3,r16,12560 <__udivdi3+0x42c>
   12554:	1dc7883a 	add	r3,r3,r23
   12558:	ad7fffc4 	addi	r21,r21,-1
   1255c:	1dc0792e 	bgeu	r3,r23,12744 <__udivdi3+0x610>
   12560:	a004943a 	slli	r2,r20,16
   12564:	982ed43a 	srli	r23,r19,16
   12568:	9cffffcc 	andi	r19,r19,65535
   1256c:	a8a4b03a 	or	r18,r21,r2
   12570:	947fffcc 	andi	r17,r18,65535
   12574:	902ad43a 	srli	r21,r18,16
   12578:	8809883a 	mov	r4,r17
   1257c:	980b883a 	mov	r5,r19
   12580:	1c21c83a 	sub	r16,r3,r16
   12584:	000a0540 	call	a054 <__mulsi3>
   12588:	8809883a 	mov	r4,r17
   1258c:	b80b883a 	mov	r5,r23
   12590:	1029883a 	mov	r20,r2
   12594:	000a0540 	call	a054 <__mulsi3>
   12598:	980b883a 	mov	r5,r19
   1259c:	a809883a 	mov	r4,r21
   125a0:	1023883a 	mov	r17,r2
   125a4:	000a0540 	call	a054 <__mulsi3>
   125a8:	a809883a 	mov	r4,r21
   125ac:	b80b883a 	mov	r5,r23
   125b0:	1027883a 	mov	r19,r2
   125b4:	000a0540 	call	a054 <__mulsi3>
   125b8:	1009883a 	mov	r4,r2
   125bc:	a004d43a 	srli	r2,r20,16
   125c0:	8ce3883a 	add	r17,r17,r19
   125c4:	1447883a 	add	r3,r2,r17
   125c8:	1cc0022e 	bgeu	r3,r19,125d4 <__udivdi3+0x4a0>
   125cc:	00800074 	movhi	r2,1
   125d0:	2089883a 	add	r4,r4,r2
   125d4:	1804d43a 	srli	r2,r3,16
   125d8:	2085883a 	add	r2,r4,r2
   125dc:	80804436 	bltu	r16,r2,126f0 <__udivdi3+0x5bc>
   125e0:	80803e26 	beq	r16,r2,126dc <__udivdi3+0x5a8>
   125e4:	9005883a 	mov	r2,r18
   125e8:	0009883a 	mov	r4,zero
   125ec:	003f3a06 	br	122d8 <__udivdi3+0x1a4>
   125f0:	9d26983a 	sll	r19,r19,r20
   125f4:	3505c83a 	sub	r2,r6,r20
   125f8:	a8a2d83a 	srl	r17,r21,r2
   125fc:	982ed43a 	srli	r23,r19,16
   12600:	e084d83a 	srl	r2,fp,r2
   12604:	ad06983a 	sll	r3,r21,r20
   12608:	8809883a 	mov	r4,r17
   1260c:	b80b883a 	mov	r5,r23
   12610:	1886b03a 	or	r3,r3,r2
   12614:	d8c00015 	stw	r3,0(sp)
   12618:	9dbfffcc 	andi	r22,r19,65535
   1261c:	000a0440 	call	a044 <__udivsi3>
   12620:	100b883a 	mov	r5,r2
   12624:	b009883a 	mov	r4,r22
   12628:	d8800215 	stw	r2,8(sp)
   1262c:	000a0540 	call	a054 <__mulsi3>
   12630:	8809883a 	mov	r4,r17
   12634:	b80b883a 	mov	r5,r23
   12638:	102b883a 	mov	r21,r2
   1263c:	000a04c0 	call	a04c <__umodsi3>
   12640:	d9000017 	ldw	r4,0(sp)
   12644:	1004943a 	slli	r2,r2,16
   12648:	2006d43a 	srli	r3,r4,16
   1264c:	10c4b03a 	or	r2,r2,r3
   12650:	1540052e 	bgeu	r2,r21,12668 <__udivdi3+0x534>
   12654:	d9400217 	ldw	r5,8(sp)
   12658:	14c5883a 	add	r2,r2,r19
   1265c:	297fffc4 	addi	r5,r5,-1
   12660:	d9400215 	stw	r5,8(sp)
   12664:	14c0462e 	bgeu	r2,r19,12780 <__udivdi3+0x64c>
   12668:	1563c83a 	sub	r17,r2,r21
   1266c:	8809883a 	mov	r4,r17
   12670:	b80b883a 	mov	r5,r23
   12674:	000a0440 	call	a044 <__udivsi3>
   12678:	100b883a 	mov	r5,r2
   1267c:	b009883a 	mov	r4,r22
   12680:	1025883a 	mov	r18,r2
   12684:	000a0540 	call	a054 <__mulsi3>
   12688:	8809883a 	mov	r4,r17
   1268c:	b80b883a 	mov	r5,r23
   12690:	1021883a 	mov	r16,r2
   12694:	000a04c0 	call	a04c <__umodsi3>
   12698:	da800017 	ldw	r10,0(sp)
   1269c:	1004943a 	slli	r2,r2,16
   126a0:	50ffffcc 	andi	r3,r10,65535
   126a4:	10c6b03a 	or	r3,r2,r3
   126a8:	1c00062e 	bgeu	r3,r16,126c4 <__udivdi3+0x590>
   126ac:	1cc7883a 	add	r3,r3,r19
   126b0:	94bfffc4 	addi	r18,r18,-1
   126b4:	1cc00336 	bltu	r3,r19,126c4 <__udivdi3+0x590>
   126b8:	1c00022e 	bgeu	r3,r16,126c4 <__udivdi3+0x590>
   126bc:	94bfffc4 	addi	r18,r18,-1
   126c0:	1cc7883a 	add	r3,r3,r19
   126c4:	d9000217 	ldw	r4,8(sp)
   126c8:	e538983a 	sll	fp,fp,r20
   126cc:	1c2bc83a 	sub	r21,r3,r16
   126d0:	2004943a 	slli	r2,r4,16
   126d4:	90a8b03a 	or	r20,r18,r2
   126d8:	003ebf06 	br	121d8 <__udivdi3+0xa4>
   126dc:	1804943a 	slli	r2,r3,16
   126e0:	e588983a 	sll	r4,fp,r22
   126e4:	a0ffffcc 	andi	r3,r20,65535
   126e8:	10c5883a 	add	r2,r2,r3
   126ec:	20bfbd2e 	bgeu	r4,r2,125e4 <__udivdi3+0x4b0>
   126f0:	90bfffc4 	addi	r2,r18,-1
   126f4:	0009883a 	mov	r4,zero
   126f8:	003ef706 	br	122d8 <__udivdi3+0x1a4>
   126fc:	01400204 	movi	r5,8
   12700:	2805883a 	mov	r2,r5
   12704:	003ee706 	br	122a4 <__udivdi3+0x170>
   12708:	01400604 	movi	r5,24
   1270c:	2805883a 	mov	r2,r5
   12710:	003ee406 	br	122a4 <__udivdi3+0x170>
   12714:	01400204 	movi	r5,8
   12718:	2805883a 	mov	r2,r5
   1271c:	003ea106 	br	121a4 <__udivdi3+0x70>
   12720:	01400604 	movi	r5,24
   12724:	2805883a 	mov	r2,r5
   12728:	003e9e06 	br	121a4 <__udivdi3+0x70>
   1272c:	01400204 	movi	r5,8
   12730:	2805883a 	mov	r2,r5
   12734:	003eff06 	br	12334 <__udivdi3+0x200>
   12738:	01400604 	movi	r5,24
   1273c:	2805883a 	mov	r2,r5
   12740:	003efc06 	br	12334 <__udivdi3+0x200>
   12744:	1c3f862e 	bgeu	r3,r16,12560 <__udivdi3+0x42c>
   12748:	1dc7883a 	add	r3,r3,r23
   1274c:	ad7fffc4 	addi	r21,r21,-1
   12750:	003f8306 	br	12560 <__udivdi3+0x42c>
   12754:	157f6e2e 	bgeu	r2,r21,12510 <__udivdi3+0x3dc>
   12758:	a53fffc4 	addi	r20,r20,-1
   1275c:	15c5883a 	add	r2,r2,r23
   12760:	003f6b06 	br	12510 <__udivdi3+0x3dc>
   12764:	ad7fffc4 	addi	r21,r21,-1
   12768:	003ec206 	br	12274 <__udivdi3+0x140>
   1276c:	843fffc4 	addi	r16,r16,-1
   12770:	14c5883a 	add	r2,r2,r19
   12774:	003f1306 	br	123c4 <__udivdi3+0x290>
   12778:	ad7fffc4 	addi	r21,r21,-1
   1277c:	003f2506 	br	12414 <__udivdi3+0x2e0>
   12780:	157fb92e 	bgeu	r2,r21,12668 <__udivdi3+0x534>
   12784:	297fffc4 	addi	r5,r5,-1
   12788:	14c5883a 	add	r2,r2,r19
   1278c:	d9400215 	stw	r5,8(sp)
   12790:	003fb506 	br	12668 <__udivdi3+0x534>
   12794:	843fffc4 	addi	r16,r16,-1
   12798:	14c5883a 	add	r2,r2,r19
   1279c:	003ea106 	br	12224 <__udivdi3+0xf0>

000127a0 <__umoddi3>:
   127a0:	defff004 	addi	sp,sp,-64
   127a4:	3011883a 	mov	r8,r6
   127a8:	000d883a 	mov	r6,zero
   127ac:	dd400b15 	stw	r21,44(sp)
   127b0:	dcc00915 	stw	r19,36(sp)
   127b4:	dc000615 	stw	r16,24(sp)
   127b8:	dfc00f15 	stw	ra,60(sp)
   127bc:	df000e15 	stw	fp,56(sp)
   127c0:	ddc00d15 	stw	r23,52(sp)
   127c4:	dd800c15 	stw	r22,48(sp)
   127c8:	dd000a15 	stw	r20,40(sp)
   127cc:	dc800815 	stw	r18,32(sp)
   127d0:	dc400715 	stw	r17,28(sp)
   127d4:	2817883a 	mov	r11,r5
   127d8:	d9800415 	stw	r6,16(sp)
   127dc:	4027883a 	mov	r19,r8
   127e0:	d9800515 	stw	r6,20(sp)
   127e4:	2021883a 	mov	r16,r4
   127e8:	282b883a 	mov	r21,r5
   127ec:	38002c1e 	bne	r7,zero,128a0 <__umoddi3+0x100>
   127f0:	2a005636 	bltu	r5,r8,1294c <__umoddi3+0x1ac>
   127f4:	40009a26 	beq	r8,zero,12a60 <__umoddi3+0x2c0>
   127f8:	00bfffd4 	movui	r2,65535
   127fc:	14c09236 	bltu	r2,r19,12a48 <__umoddi3+0x2a8>
   12800:	00803fc4 	movi	r2,255
   12804:	14c15c36 	bltu	r2,r19,12d78 <__umoddi3+0x5d8>
   12808:	000b883a 	mov	r5,zero
   1280c:	0005883a 	mov	r2,zero
   12810:	9884d83a 	srl	r2,r19,r2
   12814:	010001f4 	movhi	r4,7
   12818:	21123604 	addi	r4,r4,18648
   1281c:	01800804 	movi	r6,32
   12820:	1105883a 	add	r2,r2,r4
   12824:	10c00003 	ldbu	r3,0(r2)
   12828:	28c7883a 	add	r3,r5,r3
   1282c:	30e5c83a 	sub	r18,r6,r3
   12830:	9000a41e 	bne	r18,zero,12ac4 <__umoddi3+0x324>
   12834:	982ed43a 	srli	r23,r19,16
   12838:	acebc83a 	sub	r21,r21,r19
   1283c:	9d3fffcc 	andi	r20,r19,65535
   12840:	002d883a 	mov	r22,zero
   12844:	a809883a 	mov	r4,r21
   12848:	b80b883a 	mov	r5,r23
   1284c:	000a0440 	call	a044 <__udivsi3>
   12850:	100b883a 	mov	r5,r2
   12854:	a009883a 	mov	r4,r20
   12858:	000a0540 	call	a054 <__mulsi3>
   1285c:	a809883a 	mov	r4,r21
   12860:	b80b883a 	mov	r5,r23
   12864:	1023883a 	mov	r17,r2
   12868:	000a04c0 	call	a04c <__umodsi3>
   1286c:	1004943a 	slli	r2,r2,16
   12870:	8006d43a 	srli	r3,r16,16
   12874:	10c4b03a 	or	r2,r2,r3
   12878:	1440032e 	bgeu	r2,r17,12888 <__umoddi3+0xe8>
   1287c:	14c5883a 	add	r2,r2,r19
   12880:	14c00136 	bltu	r2,r19,12888 <__umoddi3+0xe8>
   12884:	14415836 	bltu	r2,r17,12de8 <__umoddi3+0x648>
   12888:	1463c83a 	sub	r17,r2,r17
   1288c:	8809883a 	mov	r4,r17
   12890:	b80b883a 	mov	r5,r23
   12894:	000a0440 	call	a044 <__udivsi3>
   12898:	a009883a 	mov	r4,r20
   1289c:	00005306 	br	129ec <__umoddi3+0x24c>
   128a0:	380d883a 	mov	r6,r7
   128a4:	29c0132e 	bgeu	r5,r7,128f4 <__umoddi3+0x154>
   128a8:	d9000415 	stw	r4,16(sp)
   128ac:	d9400515 	stw	r5,20(sp)
   128b0:	d9400417 	ldw	r5,16(sp)
   128b4:	5813883a 	mov	r9,r11
   128b8:	2811883a 	mov	r8,r5
   128bc:	4005883a 	mov	r2,r8
   128c0:	4807883a 	mov	r3,r9
   128c4:	dfc00f17 	ldw	ra,60(sp)
   128c8:	df000e17 	ldw	fp,56(sp)
   128cc:	ddc00d17 	ldw	r23,52(sp)
   128d0:	dd800c17 	ldw	r22,48(sp)
   128d4:	dd400b17 	ldw	r21,44(sp)
   128d8:	dd000a17 	ldw	r20,40(sp)
   128dc:	dcc00917 	ldw	r19,36(sp)
   128e0:	dc800817 	ldw	r18,32(sp)
   128e4:	dc400717 	ldw	r17,28(sp)
   128e8:	dc000617 	ldw	r16,24(sp)
   128ec:	dec01004 	addi	sp,sp,64
   128f0:	f800283a 	ret
   128f4:	00bfffd4 	movui	r2,65535
   128f8:	11c06636 	bltu	r2,r7,12a94 <__umoddi3+0x2f4>
   128fc:	00803fc4 	movi	r2,255
   12900:	11c12036 	bltu	r2,r7,12d84 <__umoddi3+0x5e4>
   12904:	000b883a 	mov	r5,zero
   12908:	0005883a 	mov	r2,zero
   1290c:	3084d83a 	srl	r2,r6,r2
   12910:	010001f4 	movhi	r4,7
   12914:	21123604 	addi	r4,r4,18648
   12918:	01c00804 	movi	r7,32
   1291c:	1105883a 	add	r2,r2,r4
   12920:	10c00003 	ldbu	r3,0(r2)
   12924:	28c7883a 	add	r3,r5,r3
   12928:	38e5c83a 	sub	r18,r7,r3
   1292c:	9000941e 	bne	r18,zero,12b80 <__umoddi3+0x3e0>
   12930:	35405e36 	bltu	r6,r21,12aac <__umoddi3+0x30c>
   12934:	84c05d2e 	bgeu	r16,r19,12aac <__umoddi3+0x30c>
   12938:	8011883a 	mov	r8,r16
   1293c:	a813883a 	mov	r9,r21
   12940:	dc000415 	stw	r16,16(sp)
   12944:	dd400515 	stw	r21,20(sp)
   12948:	003fdc06 	br	128bc <__umoddi3+0x11c>
   1294c:	00bfffd4 	movui	r2,65535
   12950:	12004a36 	bltu	r2,r8,12a7c <__umoddi3+0x2dc>
   12954:	00803fc4 	movi	r2,255
   12958:	12010d36 	bltu	r2,r8,12d90 <__umoddi3+0x5f0>
   1295c:	000b883a 	mov	r5,zero
   12960:	0005883a 	mov	r2,zero
   12964:	9884d83a 	srl	r2,r19,r2
   12968:	010001f4 	movhi	r4,7
   1296c:	21123604 	addi	r4,r4,18648
   12970:	01800804 	movi	r6,32
   12974:	1105883a 	add	r2,r2,r4
   12978:	10c00003 	ldbu	r3,0(r2)
   1297c:	28c7883a 	add	r3,r5,r3
   12980:	30c7c83a 	sub	r3,r6,r3
   12984:	1800dc1e 	bne	r3,zero,12cf8 <__umoddi3+0x558>
   12988:	002d883a 	mov	r22,zero
   1298c:	982ed43a 	srli	r23,r19,16
   12990:	a809883a 	mov	r4,r21
   12994:	9cbfffcc 	andi	r18,r19,65535
   12998:	b80b883a 	mov	r5,r23
   1299c:	000a0440 	call	a044 <__udivsi3>
   129a0:	100b883a 	mov	r5,r2
   129a4:	9009883a 	mov	r4,r18
   129a8:	000a0540 	call	a054 <__mulsi3>
   129ac:	a809883a 	mov	r4,r21
   129b0:	b80b883a 	mov	r5,r23
   129b4:	1023883a 	mov	r17,r2
   129b8:	000a04c0 	call	a04c <__umodsi3>
   129bc:	1004943a 	slli	r2,r2,16
   129c0:	8006d43a 	srli	r3,r16,16
   129c4:	10c4b03a 	or	r2,r2,r3
   129c8:	1440032e 	bgeu	r2,r17,129d8 <__umoddi3+0x238>
   129cc:	14c5883a 	add	r2,r2,r19
   129d0:	14c00136 	bltu	r2,r19,129d8 <__umoddi3+0x238>
   129d4:	14410236 	bltu	r2,r17,12de0 <__umoddi3+0x640>
   129d8:	1463c83a 	sub	r17,r2,r17
   129dc:	8809883a 	mov	r4,r17
   129e0:	b80b883a 	mov	r5,r23
   129e4:	000a0440 	call	a044 <__udivsi3>
   129e8:	9009883a 	mov	r4,r18
   129ec:	100b883a 	mov	r5,r2
   129f0:	000a0540 	call	a054 <__mulsi3>
   129f4:	8809883a 	mov	r4,r17
   129f8:	b80b883a 	mov	r5,r23
   129fc:	102b883a 	mov	r21,r2
   12a00:	000a04c0 	call	a04c <__umodsi3>
   12a04:	1004943a 	slli	r2,r2,16
   12a08:	80ffffcc 	andi	r3,r16,65535
   12a0c:	10c4b03a 	or	r2,r2,r3
   12a10:	1540042e 	bgeu	r2,r21,12a24 <__umoddi3+0x284>
   12a14:	14c5883a 	add	r2,r2,r19
   12a18:	14c00236 	bltu	r2,r19,12a24 <__umoddi3+0x284>
   12a1c:	1540012e 	bgeu	r2,r21,12a24 <__umoddi3+0x284>
   12a20:	14c5883a 	add	r2,r2,r19
   12a24:	1545c83a 	sub	r2,r2,r21
   12a28:	1584d83a 	srl	r2,r2,r22
   12a2c:	0013883a 	mov	r9,zero
   12a30:	d8800415 	stw	r2,16(sp)
   12a34:	d8c00417 	ldw	r3,16(sp)
   12a38:	0005883a 	mov	r2,zero
   12a3c:	d8800515 	stw	r2,20(sp)
   12a40:	1811883a 	mov	r8,r3
   12a44:	003f9d06 	br	128bc <__umoddi3+0x11c>
   12a48:	00804034 	movhi	r2,256
   12a4c:	10bfffc4 	addi	r2,r2,-1
   12a50:	14c0c636 	bltu	r2,r19,12d6c <__umoddi3+0x5cc>
   12a54:	01400404 	movi	r5,16
   12a58:	2805883a 	mov	r2,r5
   12a5c:	003f6c06 	br	12810 <__umoddi3+0x70>
   12a60:	01000044 	movi	r4,1
   12a64:	000b883a 	mov	r5,zero
   12a68:	000a0440 	call	a044 <__udivsi3>
   12a6c:	1027883a 	mov	r19,r2
   12a70:	00bfffd4 	movui	r2,65535
   12a74:	14fff436 	bltu	r2,r19,12a48 <__umoddi3+0x2a8>
   12a78:	003f6106 	br	12800 <__umoddi3+0x60>
   12a7c:	00804034 	movhi	r2,256
   12a80:	10bfffc4 	addi	r2,r2,-1
   12a84:	1200c536 	bltu	r2,r8,12d9c <__umoddi3+0x5fc>
   12a88:	01400404 	movi	r5,16
   12a8c:	2805883a 	mov	r2,r5
   12a90:	003fb406 	br	12964 <__umoddi3+0x1c4>
   12a94:	00804034 	movhi	r2,256
   12a98:	10bfffc4 	addi	r2,r2,-1
   12a9c:	11c0c236 	bltu	r2,r7,12da8 <__umoddi3+0x608>
   12aa0:	01400404 	movi	r5,16
   12aa4:	2805883a 	mov	r2,r5
   12aa8:	003f9806 	br	1290c <__umoddi3+0x16c>
   12aac:	84c9c83a 	sub	r4,r16,r19
   12ab0:	8105803a 	cmpltu	r2,r16,r4
   12ab4:	a987c83a 	sub	r3,r21,r6
   12ab8:	18abc83a 	sub	r21,r3,r2
   12abc:	2021883a 	mov	r16,r4
   12ac0:	003f9d06 	br	12938 <__umoddi3+0x198>
   12ac4:	9ca6983a 	sll	r19,r19,r18
   12ac8:	3485c83a 	sub	r2,r6,r18
   12acc:	a8a2d83a 	srl	r17,r21,r2
   12ad0:	982ed43a 	srli	r23,r19,16
   12ad4:	ac86983a 	sll	r3,r21,r18
   12ad8:	8084d83a 	srl	r2,r16,r2
   12adc:	8809883a 	mov	r4,r17
   12ae0:	b80b883a 	mov	r5,r23
   12ae4:	18b8b03a 	or	fp,r3,r2
   12ae8:	9d3fffcc 	andi	r20,r19,65535
   12aec:	000a0440 	call	a044 <__udivsi3>
   12af0:	100b883a 	mov	r5,r2
   12af4:	a009883a 	mov	r4,r20
   12af8:	000a0540 	call	a054 <__mulsi3>
   12afc:	8809883a 	mov	r4,r17
   12b00:	b80b883a 	mov	r5,r23
   12b04:	102b883a 	mov	r21,r2
   12b08:	000a04c0 	call	a04c <__umodsi3>
   12b0c:	1004943a 	slli	r2,r2,16
   12b10:	e006d43a 	srli	r3,fp,16
   12b14:	902d883a 	mov	r22,r18
   12b18:	10c4b03a 	or	r2,r2,r3
   12b1c:	1540022e 	bgeu	r2,r21,12b28 <__umoddi3+0x388>
   12b20:	14c5883a 	add	r2,r2,r19
   12b24:	14c0ab2e 	bgeu	r2,r19,12dd4 <__umoddi3+0x634>
   12b28:	1563c83a 	sub	r17,r2,r21
   12b2c:	8809883a 	mov	r4,r17
   12b30:	b80b883a 	mov	r5,r23
   12b34:	000a0440 	call	a044 <__udivsi3>
   12b38:	100b883a 	mov	r5,r2
   12b3c:	a009883a 	mov	r4,r20
   12b40:	000a0540 	call	a054 <__mulsi3>
   12b44:	8809883a 	mov	r4,r17
   12b48:	b80b883a 	mov	r5,r23
   12b4c:	102b883a 	mov	r21,r2
   12b50:	000a04c0 	call	a04c <__umodsi3>
   12b54:	1004943a 	slli	r2,r2,16
   12b58:	e0ffffcc 	andi	r3,fp,65535
   12b5c:	10c4b03a 	or	r2,r2,r3
   12b60:	1540042e 	bgeu	r2,r21,12b74 <__umoddi3+0x3d4>
   12b64:	14c5883a 	add	r2,r2,r19
   12b68:	14c00236 	bltu	r2,r19,12b74 <__umoddi3+0x3d4>
   12b6c:	1540012e 	bgeu	r2,r21,12b74 <__umoddi3+0x3d4>
   12b70:	14c5883a 	add	r2,r2,r19
   12b74:	84a0983a 	sll	r16,r16,r18
   12b78:	156bc83a 	sub	r21,r2,r21
   12b7c:	003f3106 	br	12844 <__umoddi3+0xa4>
   12b80:	3c8fc83a 	sub	r7,r7,r18
   12b84:	3486983a 	sll	r3,r6,r18
   12b88:	99c4d83a 	srl	r2,r19,r7
   12b8c:	a9e2d83a 	srl	r17,r21,r7
   12b90:	ac8c983a 	sll	r6,r21,r18
   12b94:	18acb03a 	or	r22,r3,r2
   12b98:	b02ed43a 	srli	r23,r22,16
   12b9c:	81c4d83a 	srl	r2,r16,r7
   12ba0:	8809883a 	mov	r4,r17
   12ba4:	b80b883a 	mov	r5,r23
   12ba8:	308cb03a 	or	r6,r6,r2
   12bac:	d9c00315 	stw	r7,12(sp)
   12bb0:	d9800215 	stw	r6,8(sp)
   12bb4:	b53fffcc 	andi	r20,r22,65535
   12bb8:	000a0440 	call	a044 <__udivsi3>
   12bbc:	100b883a 	mov	r5,r2
   12bc0:	a009883a 	mov	r4,r20
   12bc4:	1039883a 	mov	fp,r2
   12bc8:	000a0540 	call	a054 <__mulsi3>
   12bcc:	8809883a 	mov	r4,r17
   12bd0:	b80b883a 	mov	r5,r23
   12bd4:	102b883a 	mov	r21,r2
   12bd8:	000a04c0 	call	a04c <__umodsi3>
   12bdc:	d9000217 	ldw	r4,8(sp)
   12be0:	1004943a 	slli	r2,r2,16
   12be4:	9ca6983a 	sll	r19,r19,r18
   12be8:	2006d43a 	srli	r3,r4,16
   12bec:	84a0983a 	sll	r16,r16,r18
   12bf0:	dcc00015 	stw	r19,0(sp)
   12bf4:	10c4b03a 	or	r2,r2,r3
   12bf8:	dc000115 	stw	r16,4(sp)
   12bfc:	1540032e 	bgeu	r2,r21,12c0c <__umoddi3+0x46c>
   12c00:	1585883a 	add	r2,r2,r22
   12c04:	e73fffc4 	addi	fp,fp,-1
   12c08:	15806e2e 	bgeu	r2,r22,12dc4 <__umoddi3+0x624>
   12c0c:	1563c83a 	sub	r17,r2,r21
   12c10:	8809883a 	mov	r4,r17
   12c14:	b80b883a 	mov	r5,r23
   12c18:	000a0440 	call	a044 <__udivsi3>
   12c1c:	100b883a 	mov	r5,r2
   12c20:	a009883a 	mov	r4,r20
   12c24:	1021883a 	mov	r16,r2
   12c28:	000a0540 	call	a054 <__mulsi3>
   12c2c:	b80b883a 	mov	r5,r23
   12c30:	8809883a 	mov	r4,r17
   12c34:	1029883a 	mov	r20,r2
   12c38:	000a04c0 	call	a04c <__umodsi3>
   12c3c:	d9400217 	ldw	r5,8(sp)
   12c40:	1004943a 	slli	r2,r2,16
   12c44:	28ffffcc 	andi	r3,r5,65535
   12c48:	10c4b03a 	or	r2,r2,r3
   12c4c:	1500032e 	bgeu	r2,r20,12c5c <__umoddi3+0x4bc>
   12c50:	1585883a 	add	r2,r2,r22
   12c54:	843fffc4 	addi	r16,r16,-1
   12c58:	1580562e 	bgeu	r2,r22,12db4 <__umoddi3+0x614>
   12c5c:	d9800017 	ldw	r6,0(sp)
   12c60:	e022943a 	slli	r17,fp,16
   12c64:	302ed43a 	srli	r23,r6,16
   12c68:	8462b03a 	or	r17,r16,r17
   12c6c:	34ffffcc 	andi	r19,r6,65535
   12c70:	882ad43a 	srli	r21,r17,16
   12c74:	8c7fffcc 	andi	r17,r17,65535
   12c78:	8809883a 	mov	r4,r17
   12c7c:	980b883a 	mov	r5,r19
   12c80:	1521c83a 	sub	r16,r2,r20
   12c84:	000a0540 	call	a054 <__mulsi3>
   12c88:	8809883a 	mov	r4,r17
   12c8c:	b80b883a 	mov	r5,r23
   12c90:	1029883a 	mov	r20,r2
   12c94:	000a0540 	call	a054 <__mulsi3>
   12c98:	980b883a 	mov	r5,r19
   12c9c:	a809883a 	mov	r4,r21
   12ca0:	1023883a 	mov	r17,r2
   12ca4:	000a0540 	call	a054 <__mulsi3>
   12ca8:	a809883a 	mov	r4,r21
   12cac:	b80b883a 	mov	r5,r23
   12cb0:	1027883a 	mov	r19,r2
   12cb4:	000a0540 	call	a054 <__mulsi3>
   12cb8:	100b883a 	mov	r5,r2
   12cbc:	a004d43a 	srli	r2,r20,16
   12cc0:	8ce3883a 	add	r17,r17,r19
   12cc4:	1449883a 	add	r4,r2,r17
   12cc8:	24c0022e 	bgeu	r4,r19,12cd4 <__umoddi3+0x534>
   12ccc:	00800074 	movhi	r2,1
   12cd0:	288b883a 	add	r5,r5,r2
   12cd4:	2004d43a 	srli	r2,r4,16
   12cd8:	2008943a 	slli	r4,r4,16
   12cdc:	a0ffffcc 	andi	r3,r20,65535
   12ce0:	288d883a 	add	r6,r5,r2
   12ce4:	20c9883a 	add	r4,r4,r3
   12ce8:	81800b36 	bltu	r16,r6,12d18 <__umoddi3+0x578>
   12cec:	81804026 	beq	r16,r6,12df0 <__umoddi3+0x650>
   12cf0:	818dc83a 	sub	r6,r16,r6
   12cf4:	00000f06 	br	12d34 <__umoddi3+0x594>
   12cf8:	30c5c83a 	sub	r2,r6,r3
   12cfc:	182d883a 	mov	r22,r3
   12d00:	8084d83a 	srl	r2,r16,r2
   12d04:	a8c6983a 	sll	r3,r21,r3
   12d08:	9da6983a 	sll	r19,r19,r22
   12d0c:	85a0983a 	sll	r16,r16,r22
   12d10:	18aab03a 	or	r21,r3,r2
   12d14:	003f1d06 	br	1298c <__umoddi3+0x1ec>
   12d18:	d8c00017 	ldw	r3,0(sp)
   12d1c:	20c5c83a 	sub	r2,r4,r3
   12d20:	2089803a 	cmpltu	r4,r4,r2
   12d24:	3587c83a 	sub	r3,r6,r22
   12d28:	1907c83a 	sub	r3,r3,r4
   12d2c:	80cdc83a 	sub	r6,r16,r3
   12d30:	1009883a 	mov	r4,r2
   12d34:	d9400117 	ldw	r5,4(sp)
   12d38:	2905c83a 	sub	r2,r5,r4
   12d3c:	2887803a 	cmpltu	r3,r5,r2
   12d40:	30c7c83a 	sub	r3,r6,r3
   12d44:	d9800317 	ldw	r6,12(sp)
   12d48:	1484d83a 	srl	r2,r2,r18
   12d4c:	1988983a 	sll	r4,r3,r6
   12d50:	1c86d83a 	srl	r3,r3,r18
   12d54:	2088b03a 	or	r4,r4,r2
   12d58:	2011883a 	mov	r8,r4
   12d5c:	1813883a 	mov	r9,r3
   12d60:	d9000415 	stw	r4,16(sp)
   12d64:	d8c00515 	stw	r3,20(sp)
   12d68:	003ed406 	br	128bc <__umoddi3+0x11c>
   12d6c:	01400604 	movi	r5,24
   12d70:	2805883a 	mov	r2,r5
   12d74:	003ea606 	br	12810 <__umoddi3+0x70>
   12d78:	01400204 	movi	r5,8
   12d7c:	2805883a 	mov	r2,r5
   12d80:	003ea306 	br	12810 <__umoddi3+0x70>
   12d84:	01400204 	movi	r5,8
   12d88:	2805883a 	mov	r2,r5
   12d8c:	003edf06 	br	1290c <__umoddi3+0x16c>
   12d90:	01400204 	movi	r5,8
   12d94:	2805883a 	mov	r2,r5
   12d98:	003ef206 	br	12964 <__umoddi3+0x1c4>
   12d9c:	01400604 	movi	r5,24
   12da0:	2805883a 	mov	r2,r5
   12da4:	003eef06 	br	12964 <__umoddi3+0x1c4>
   12da8:	01400604 	movi	r5,24
   12dac:	2805883a 	mov	r2,r5
   12db0:	003ed606 	br	1290c <__umoddi3+0x16c>
   12db4:	153fa92e 	bgeu	r2,r20,12c5c <__umoddi3+0x4bc>
   12db8:	843fffc4 	addi	r16,r16,-1
   12dbc:	1585883a 	add	r2,r2,r22
   12dc0:	003fa606 	br	12c5c <__umoddi3+0x4bc>
   12dc4:	157f912e 	bgeu	r2,r21,12c0c <__umoddi3+0x46c>
   12dc8:	e73fffc4 	addi	fp,fp,-1
   12dcc:	1585883a 	add	r2,r2,r22
   12dd0:	003f8e06 	br	12c0c <__umoddi3+0x46c>
   12dd4:	157f542e 	bgeu	r2,r21,12b28 <__umoddi3+0x388>
   12dd8:	14c5883a 	add	r2,r2,r19
   12ddc:	003f5206 	br	12b28 <__umoddi3+0x388>
   12de0:	14c5883a 	add	r2,r2,r19
   12de4:	003efc06 	br	129d8 <__umoddi3+0x238>
   12de8:	14c5883a 	add	r2,r2,r19
   12dec:	003ea606 	br	12888 <__umoddi3+0xe8>
   12df0:	d8800117 	ldw	r2,4(sp)
   12df4:	113fc836 	bltu	r2,r4,12d18 <__umoddi3+0x578>
   12df8:	000d883a 	mov	r6,zero
   12dfc:	003fcd06 	br	12d34 <__umoddi3+0x594>

00012e00 <__eqdf2>:
   12e00:	deffef04 	addi	sp,sp,-68
   12e04:	dc400f15 	stw	r17,60(sp)
   12e08:	dc400404 	addi	r17,sp,16
   12e0c:	2005883a 	mov	r2,r4
   12e10:	2807883a 	mov	r3,r5
   12e14:	dc000e15 	stw	r16,56(sp)
   12e18:	d809883a 	mov	r4,sp
   12e1c:	880b883a 	mov	r5,r17
   12e20:	dc000904 	addi	r16,sp,36
   12e24:	d8c00115 	stw	r3,4(sp)
   12e28:	d8800015 	stw	r2,0(sp)
   12e2c:	d9800215 	stw	r6,8(sp)
   12e30:	dfc01015 	stw	ra,64(sp)
   12e34:	d9c00315 	stw	r7,12(sp)
   12e38:	000a5440 	call	a544 <__unpack_d>
   12e3c:	d9000204 	addi	r4,sp,8
   12e40:	800b883a 	mov	r5,r16
   12e44:	000a5440 	call	a544 <__unpack_d>
   12e48:	d8800417 	ldw	r2,16(sp)
   12e4c:	00c00044 	movi	r3,1
   12e50:	180d883a 	mov	r6,r3
   12e54:	1880062e 	bgeu	r3,r2,12e70 <__eqdf2+0x70>
   12e58:	d8800917 	ldw	r2,36(sp)
   12e5c:	8809883a 	mov	r4,r17
   12e60:	800b883a 	mov	r5,r16
   12e64:	1880022e 	bgeu	r3,r2,12e70 <__eqdf2+0x70>
   12e68:	000a67c0 	call	a67c <__fpcmp_parts_d>
   12e6c:	100d883a 	mov	r6,r2
   12e70:	3005883a 	mov	r2,r6
   12e74:	dfc01017 	ldw	ra,64(sp)
   12e78:	dc400f17 	ldw	r17,60(sp)
   12e7c:	dc000e17 	ldw	r16,56(sp)
   12e80:	dec01104 	addi	sp,sp,68
   12e84:	f800283a 	ret

00012e88 <__nedf2>:
   12e88:	deffef04 	addi	sp,sp,-68
   12e8c:	dc400f15 	stw	r17,60(sp)
   12e90:	dc400404 	addi	r17,sp,16
   12e94:	2005883a 	mov	r2,r4
   12e98:	2807883a 	mov	r3,r5
   12e9c:	dc000e15 	stw	r16,56(sp)
   12ea0:	d809883a 	mov	r4,sp
   12ea4:	880b883a 	mov	r5,r17
   12ea8:	dc000904 	addi	r16,sp,36
   12eac:	d8c00115 	stw	r3,4(sp)
   12eb0:	d8800015 	stw	r2,0(sp)
   12eb4:	d9800215 	stw	r6,8(sp)
   12eb8:	dfc01015 	stw	ra,64(sp)
   12ebc:	d9c00315 	stw	r7,12(sp)
   12ec0:	000a5440 	call	a544 <__unpack_d>
   12ec4:	d9000204 	addi	r4,sp,8
   12ec8:	800b883a 	mov	r5,r16
   12ecc:	000a5440 	call	a544 <__unpack_d>
   12ed0:	d8800417 	ldw	r2,16(sp)
   12ed4:	00c00044 	movi	r3,1
   12ed8:	180d883a 	mov	r6,r3
   12edc:	1880062e 	bgeu	r3,r2,12ef8 <__nedf2+0x70>
   12ee0:	d8800917 	ldw	r2,36(sp)
   12ee4:	8809883a 	mov	r4,r17
   12ee8:	800b883a 	mov	r5,r16
   12eec:	1880022e 	bgeu	r3,r2,12ef8 <__nedf2+0x70>
   12ef0:	000a67c0 	call	a67c <__fpcmp_parts_d>
   12ef4:	100d883a 	mov	r6,r2
   12ef8:	3005883a 	mov	r2,r6
   12efc:	dfc01017 	ldw	ra,64(sp)
   12f00:	dc400f17 	ldw	r17,60(sp)
   12f04:	dc000e17 	ldw	r16,56(sp)
   12f08:	dec01104 	addi	sp,sp,68
   12f0c:	f800283a 	ret

00012f10 <__gtdf2>:
   12f10:	deffef04 	addi	sp,sp,-68
   12f14:	dc400f15 	stw	r17,60(sp)
   12f18:	dc400404 	addi	r17,sp,16
   12f1c:	2005883a 	mov	r2,r4
   12f20:	2807883a 	mov	r3,r5
   12f24:	dc000e15 	stw	r16,56(sp)
   12f28:	d809883a 	mov	r4,sp
   12f2c:	880b883a 	mov	r5,r17
   12f30:	dc000904 	addi	r16,sp,36
   12f34:	d8c00115 	stw	r3,4(sp)
   12f38:	d8800015 	stw	r2,0(sp)
   12f3c:	d9800215 	stw	r6,8(sp)
   12f40:	dfc01015 	stw	ra,64(sp)
   12f44:	d9c00315 	stw	r7,12(sp)
   12f48:	000a5440 	call	a544 <__unpack_d>
   12f4c:	d9000204 	addi	r4,sp,8
   12f50:	800b883a 	mov	r5,r16
   12f54:	000a5440 	call	a544 <__unpack_d>
   12f58:	d8800417 	ldw	r2,16(sp)
   12f5c:	00c00044 	movi	r3,1
   12f60:	01bfffc4 	movi	r6,-1
   12f64:	1880062e 	bgeu	r3,r2,12f80 <__gtdf2+0x70>
   12f68:	d8800917 	ldw	r2,36(sp)
   12f6c:	8809883a 	mov	r4,r17
   12f70:	800b883a 	mov	r5,r16
   12f74:	1880022e 	bgeu	r3,r2,12f80 <__gtdf2+0x70>
   12f78:	000a67c0 	call	a67c <__fpcmp_parts_d>
   12f7c:	100d883a 	mov	r6,r2
   12f80:	3005883a 	mov	r2,r6
   12f84:	dfc01017 	ldw	ra,64(sp)
   12f88:	dc400f17 	ldw	r17,60(sp)
   12f8c:	dc000e17 	ldw	r16,56(sp)
   12f90:	dec01104 	addi	sp,sp,68
   12f94:	f800283a 	ret

00012f98 <__gedf2>:
   12f98:	deffef04 	addi	sp,sp,-68
   12f9c:	dc400f15 	stw	r17,60(sp)
   12fa0:	dc400404 	addi	r17,sp,16
   12fa4:	2005883a 	mov	r2,r4
   12fa8:	2807883a 	mov	r3,r5
   12fac:	dc000e15 	stw	r16,56(sp)
   12fb0:	d809883a 	mov	r4,sp
   12fb4:	880b883a 	mov	r5,r17
   12fb8:	dc000904 	addi	r16,sp,36
   12fbc:	d8c00115 	stw	r3,4(sp)
   12fc0:	d8800015 	stw	r2,0(sp)
   12fc4:	d9800215 	stw	r6,8(sp)
   12fc8:	dfc01015 	stw	ra,64(sp)
   12fcc:	d9c00315 	stw	r7,12(sp)
   12fd0:	000a5440 	call	a544 <__unpack_d>
   12fd4:	d9000204 	addi	r4,sp,8
   12fd8:	800b883a 	mov	r5,r16
   12fdc:	000a5440 	call	a544 <__unpack_d>
   12fe0:	d8800417 	ldw	r2,16(sp)
   12fe4:	00c00044 	movi	r3,1
   12fe8:	01bfffc4 	movi	r6,-1
   12fec:	1880062e 	bgeu	r3,r2,13008 <__gedf2+0x70>
   12ff0:	d8800917 	ldw	r2,36(sp)
   12ff4:	8809883a 	mov	r4,r17
   12ff8:	800b883a 	mov	r5,r16
   12ffc:	1880022e 	bgeu	r3,r2,13008 <__gedf2+0x70>
   13000:	000a67c0 	call	a67c <__fpcmp_parts_d>
   13004:	100d883a 	mov	r6,r2
   13008:	3005883a 	mov	r2,r6
   1300c:	dfc01017 	ldw	ra,64(sp)
   13010:	dc400f17 	ldw	r17,60(sp)
   13014:	dc000e17 	ldw	r16,56(sp)
   13018:	dec01104 	addi	sp,sp,68
   1301c:	f800283a 	ret

00013020 <__floatunsidf>:
   13020:	defff204 	addi	sp,sp,-56
   13024:	dfc00d15 	stw	ra,52(sp)
   13028:	ddc00c15 	stw	r23,48(sp)
   1302c:	dd800b15 	stw	r22,44(sp)
   13030:	dd400a15 	stw	r21,40(sp)
   13034:	dd000915 	stw	r20,36(sp)
   13038:	dcc00815 	stw	r19,32(sp)
   1303c:	dc800715 	stw	r18,28(sp)
   13040:	dc400615 	stw	r17,24(sp)
   13044:	dc000515 	stw	r16,20(sp)
   13048:	d8000115 	stw	zero,4(sp)
   1304c:	20000f1e 	bne	r4,zero,1308c <__floatunsidf+0x6c>
   13050:	00800084 	movi	r2,2
   13054:	d8800015 	stw	r2,0(sp)
   13058:	d809883a 	mov	r4,sp
   1305c:	000a2300 	call	a230 <__pack_d>
   13060:	dfc00d17 	ldw	ra,52(sp)
   13064:	ddc00c17 	ldw	r23,48(sp)
   13068:	dd800b17 	ldw	r22,44(sp)
   1306c:	dd400a17 	ldw	r21,40(sp)
   13070:	dd000917 	ldw	r20,36(sp)
   13074:	dcc00817 	ldw	r19,32(sp)
   13078:	dc800717 	ldw	r18,28(sp)
   1307c:	dc400617 	ldw	r17,24(sp)
   13080:	dc000517 	ldw	r16,20(sp)
   13084:	dec00e04 	addi	sp,sp,56
   13088:	f800283a 	ret
   1308c:	008000c4 	movi	r2,3
   13090:	00c00f04 	movi	r3,60
   13094:	002f883a 	mov	r23,zero
   13098:	202d883a 	mov	r22,r4
   1309c:	d8800015 	stw	r2,0(sp)
   130a0:	d8c00215 	stw	r3,8(sp)
   130a4:	d9000315 	stw	r4,12(sp)
   130a8:	ddc00415 	stw	r23,16(sp)
   130ac:	000a1b00 	call	a1b0 <__clzsi2>
   130b0:	12400744 	addi	r9,r2,29
   130b4:	48000b16 	blt	r9,zero,130e4 <__floatunsidf+0xc4>
   130b8:	483fe726 	beq	r9,zero,13058 <__floatunsidf+0x38>
   130bc:	10bfff44 	addi	r2,r2,-3
   130c0:	10002e16 	blt	r2,zero,1317c <__floatunsidf+0x15c>
   130c4:	b0a2983a 	sll	r17,r22,r2
   130c8:	0021883a 	mov	r16,zero
   130cc:	d8800217 	ldw	r2,8(sp)
   130d0:	dc400415 	stw	r17,16(sp)
   130d4:	dc000315 	stw	r16,12(sp)
   130d8:	1245c83a 	sub	r2,r2,r9
   130dc:	d8800215 	stw	r2,8(sp)
   130e0:	003fdd06 	br	13058 <__floatunsidf+0x38>
   130e4:	0255c83a 	sub	r10,zero,r9
   130e8:	51bff804 	addi	r6,r10,-32
   130ec:	30001b16 	blt	r6,zero,1315c <__floatunsidf+0x13c>
   130f0:	b9a8d83a 	srl	r20,r23,r6
   130f4:	002b883a 	mov	r21,zero
   130f8:	000f883a 	mov	r7,zero
   130fc:	01000044 	movi	r4,1
   13100:	0011883a 	mov	r8,zero
   13104:	30002516 	blt	r6,zero,1319c <__floatunsidf+0x17c>
   13108:	21a6983a 	sll	r19,r4,r6
   1310c:	0025883a 	mov	r18,zero
   13110:	00bfffc4 	movi	r2,-1
   13114:	9089883a 	add	r4,r18,r2
   13118:	988b883a 	add	r5,r19,r2
   1311c:	248d803a 	cmpltu	r6,r4,r18
   13120:	314b883a 	add	r5,r6,r5
   13124:	b104703a 	and	r2,r22,r4
   13128:	b946703a 	and	r3,r23,r5
   1312c:	10c4b03a 	or	r2,r2,r3
   13130:	10000226 	beq	r2,zero,1313c <__floatunsidf+0x11c>
   13134:	01c00044 	movi	r7,1
   13138:	0011883a 	mov	r8,zero
   1313c:	d9000217 	ldw	r4,8(sp)
   13140:	a1c4b03a 	or	r2,r20,r7
   13144:	aa06b03a 	or	r3,r21,r8
   13148:	2249c83a 	sub	r4,r4,r9
   1314c:	d8c00415 	stw	r3,16(sp)
   13150:	d9000215 	stw	r4,8(sp)
   13154:	d8800315 	stw	r2,12(sp)
   13158:	003fbf06 	br	13058 <__floatunsidf+0x38>
   1315c:	bdc7883a 	add	r3,r23,r23
   13160:	008007c4 	movi	r2,31
   13164:	1285c83a 	sub	r2,r2,r10
   13168:	1886983a 	sll	r3,r3,r2
   1316c:	b2a8d83a 	srl	r20,r22,r10
   13170:	baaad83a 	srl	r21,r23,r10
   13174:	1d28b03a 	or	r20,r3,r20
   13178:	003fdf06 	br	130f8 <__floatunsidf+0xd8>
   1317c:	b006d07a 	srli	r3,r22,1
   13180:	008007c4 	movi	r2,31
   13184:	1245c83a 	sub	r2,r2,r9
   13188:	1886d83a 	srl	r3,r3,r2
   1318c:	ba62983a 	sll	r17,r23,r9
   13190:	b260983a 	sll	r16,r22,r9
   13194:	1c62b03a 	or	r17,r3,r17
   13198:	003fcc06 	br	130cc <__floatunsidf+0xac>
   1319c:	2006d07a 	srli	r3,r4,1
   131a0:	008007c4 	movi	r2,31
   131a4:	1285c83a 	sub	r2,r2,r10
   131a8:	18a6d83a 	srl	r19,r3,r2
   131ac:	22a4983a 	sll	r18,r4,r10
   131b0:	003fd706 	br	13110 <__floatunsidf+0xf0>

000131b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   131b4:	defff804 	addi	sp,sp,-32
   131b8:	dfc00715 	stw	ra,28(sp)
   131bc:	df000615 	stw	fp,24(sp)
   131c0:	df000604 	addi	fp,sp,24
   131c4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   131c8:	e0bffc17 	ldw	r2,-16(fp)
   131cc:	1004803a 	cmplt	r2,r2,zero
   131d0:	1000091e 	bne	r2,zero,131f8 <close+0x44>
   131d4:	e13ffc17 	ldw	r4,-16(fp)
   131d8:	01400304 	movi	r5,12
   131dc:	000a0540 	call	a054 <__mulsi3>
   131e0:	1007883a 	mov	r3,r2
   131e4:	008001f4 	movhi	r2,7
   131e8:	109bfe04 	addi	r2,r2,28664
   131ec:	1887883a 	add	r3,r3,r2
   131f0:	e0ffff15 	stw	r3,-4(fp)
   131f4:	00000106 	br	131fc <close+0x48>
   131f8:	e03fff15 	stw	zero,-4(fp)
   131fc:	e0bfff17 	ldw	r2,-4(fp)
   13200:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   13204:	e0bffb17 	ldw	r2,-20(fp)
   13208:	1005003a 	cmpeq	r2,r2,zero
   1320c:	10001d1e 	bne	r2,zero,13284 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13210:	e0bffb17 	ldw	r2,-20(fp)
   13214:	10800017 	ldw	r2,0(r2)
   13218:	10800417 	ldw	r2,16(r2)
   1321c:	1005003a 	cmpeq	r2,r2,zero
   13220:	1000071e 	bne	r2,zero,13240 <close+0x8c>
   13224:	e0bffb17 	ldw	r2,-20(fp)
   13228:	10800017 	ldw	r2,0(r2)
   1322c:	10800417 	ldw	r2,16(r2)
   13230:	e13ffb17 	ldw	r4,-20(fp)
   13234:	103ee83a 	callr	r2
   13238:	e0bffe15 	stw	r2,-8(fp)
   1323c:	00000106 	br	13244 <close+0x90>
   13240:	e03ffe15 	stw	zero,-8(fp)
   13244:	e0bffe17 	ldw	r2,-8(fp)
   13248:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1324c:	e13ffc17 	ldw	r4,-16(fp)
   13250:	0013d1c0 	call	13d1c <alt_release_fd>
    if (rval < 0)
   13254:	e0bffa17 	ldw	r2,-24(fp)
   13258:	1004403a 	cmpge	r2,r2,zero
   1325c:	1000071e 	bne	r2,zero,1327c <close+0xc8>
    {
      ALT_ERRNO = -rval;
   13260:	00132b40 	call	132b4 <alt_get_errno>
   13264:	e0fffa17 	ldw	r3,-24(fp)
   13268:	00c7c83a 	sub	r3,zero,r3
   1326c:	10c00015 	stw	r3,0(r2)
      return -1;
   13270:	00bfffc4 	movi	r2,-1
   13274:	e0bffd15 	stw	r2,-12(fp)
   13278:	00000806 	br	1329c <close+0xe8>
    }
    return 0;
   1327c:	e03ffd15 	stw	zero,-12(fp)
   13280:	00000606 	br	1329c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13284:	00132b40 	call	132b4 <alt_get_errno>
   13288:	1007883a 	mov	r3,r2
   1328c:	00801444 	movi	r2,81
   13290:	18800015 	stw	r2,0(r3)
    return -1;
   13294:	00bfffc4 	movi	r2,-1
   13298:	e0bffd15 	stw	r2,-12(fp)
   1329c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   132a0:	e037883a 	mov	sp,fp
   132a4:	dfc00117 	ldw	ra,4(sp)
   132a8:	df000017 	ldw	fp,0(sp)
   132ac:	dec00204 	addi	sp,sp,8
   132b0:	f800283a 	ret

000132b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   132b4:	defffd04 	addi	sp,sp,-12
   132b8:	dfc00215 	stw	ra,8(sp)
   132bc:	df000115 	stw	fp,4(sp)
   132c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   132c4:	00800234 	movhi	r2,8
   132c8:	10a08404 	addi	r2,r2,-32240
   132cc:	10800017 	ldw	r2,0(r2)
   132d0:	1005003a 	cmpeq	r2,r2,zero
   132d4:	1000061e 	bne	r2,zero,132f0 <alt_get_errno+0x3c>
   132d8:	00800234 	movhi	r2,8
   132dc:	10a08404 	addi	r2,r2,-32240
   132e0:	10800017 	ldw	r2,0(r2)
   132e4:	103ee83a 	callr	r2
   132e8:	e0bfff15 	stw	r2,-4(fp)
   132ec:	00000306 	br	132fc <alt_get_errno+0x48>
   132f0:	00800234 	movhi	r2,8
   132f4:	10ae1604 	addi	r2,r2,-18344
   132f8:	e0bfff15 	stw	r2,-4(fp)
   132fc:	e0bfff17 	ldw	r2,-4(fp)
}
   13300:	e037883a 	mov	sp,fp
   13304:	dfc00117 	ldw	ra,4(sp)
   13308:	df000017 	ldw	fp,0(sp)
   1330c:	dec00204 	addi	sp,sp,8
   13310:	f800283a 	ret

00013314 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13314:	defffe04 	addi	sp,sp,-8
   13318:	df000115 	stw	fp,4(sp)
   1331c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   13320:	e03fff15 	stw	zero,-4(fp)
   13324:	00000506 	br	1333c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   13328:	e0bfff17 	ldw	r2,-4(fp)
   1332c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   13330:	e0bfff17 	ldw	r2,-4(fp)
   13334:	10800804 	addi	r2,r2,32
   13338:	e0bfff15 	stw	r2,-4(fp)
   1333c:	e0bfff17 	ldw	r2,-4(fp)
   13340:	10820030 	cmpltui	r2,r2,2048
   13344:	103ff81e 	bne	r2,zero,13328 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13348:	e037883a 	mov	sp,fp
   1334c:	df000017 	ldw	fp,0(sp)
   13350:	dec00104 	addi	sp,sp,4
   13354:	f800283a 	ret

00013358 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13358:	defffc04 	addi	sp,sp,-16
   1335c:	df000315 	stw	fp,12(sp)
   13360:	df000304 	addi	fp,sp,12
   13364:	e13ffd15 	stw	r4,-12(fp)
   13368:	e17ffe15 	stw	r5,-8(fp)
   1336c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13370:	e0bfff17 	ldw	r2,-4(fp)
}
   13374:	e037883a 	mov	sp,fp
   13378:	df000017 	ldw	fp,0(sp)
   1337c:	dec00104 	addi	sp,sp,4
   13380:	f800283a 	ret

00013384 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13384:	defff904 	addi	sp,sp,-28
   13388:	dfc00615 	stw	ra,24(sp)
   1338c:	df000515 	stw	fp,20(sp)
   13390:	df000504 	addi	fp,sp,20
   13394:	e13ffc15 	stw	r4,-16(fp)
   13398:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1339c:	e0bffc17 	ldw	r2,-16(fp)
   133a0:	1004803a 	cmplt	r2,r2,zero
   133a4:	1000091e 	bne	r2,zero,133cc <fstat+0x48>
   133a8:	e13ffc17 	ldw	r4,-16(fp)
   133ac:	01400304 	movi	r5,12
   133b0:	000a0540 	call	a054 <__mulsi3>
   133b4:	1007883a 	mov	r3,r2
   133b8:	008001f4 	movhi	r2,7
   133bc:	109bfe04 	addi	r2,r2,28664
   133c0:	1887883a 	add	r3,r3,r2
   133c4:	e0ffff15 	stw	r3,-4(fp)
   133c8:	00000106 	br	133d0 <fstat+0x4c>
   133cc:	e03fff15 	stw	zero,-4(fp)
   133d0:	e0bfff17 	ldw	r2,-4(fp)
   133d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   133d8:	e0bffb17 	ldw	r2,-20(fp)
   133dc:	1005003a 	cmpeq	r2,r2,zero
   133e0:	1000121e 	bne	r2,zero,1342c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   133e4:	e0bffb17 	ldw	r2,-20(fp)
   133e8:	10800017 	ldw	r2,0(r2)
   133ec:	10800817 	ldw	r2,32(r2)
   133f0:	1005003a 	cmpeq	r2,r2,zero
   133f4:	1000081e 	bne	r2,zero,13418 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   133f8:	e0bffb17 	ldw	r2,-20(fp)
   133fc:	10800017 	ldw	r2,0(r2)
   13400:	10800817 	ldw	r2,32(r2)
   13404:	e13ffb17 	ldw	r4,-20(fp)
   13408:	e17ffd17 	ldw	r5,-12(fp)
   1340c:	103ee83a 	callr	r2
   13410:	e0bffe15 	stw	r2,-8(fp)
   13414:	00000b06 	br	13444 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13418:	e0fffd17 	ldw	r3,-12(fp)
   1341c:	00880004 	movi	r2,8192
   13420:	18800115 	stw	r2,4(r3)
      return 0;
   13424:	e03ffe15 	stw	zero,-8(fp)
   13428:	00000606 	br	13444 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1342c:	001345c0 	call	1345c <alt_get_errno>
   13430:	1007883a 	mov	r3,r2
   13434:	00801444 	movi	r2,81
   13438:	18800015 	stw	r2,0(r3)
    return -1;
   1343c:	00bfffc4 	movi	r2,-1
   13440:	e0bffe15 	stw	r2,-8(fp)
   13444:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   13448:	e037883a 	mov	sp,fp
   1344c:	dfc00117 	ldw	ra,4(sp)
   13450:	df000017 	ldw	fp,0(sp)
   13454:	dec00204 	addi	sp,sp,8
   13458:	f800283a 	ret

0001345c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1345c:	defffd04 	addi	sp,sp,-12
   13460:	dfc00215 	stw	ra,8(sp)
   13464:	df000115 	stw	fp,4(sp)
   13468:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1346c:	00800234 	movhi	r2,8
   13470:	10a08404 	addi	r2,r2,-32240
   13474:	10800017 	ldw	r2,0(r2)
   13478:	1005003a 	cmpeq	r2,r2,zero
   1347c:	1000061e 	bne	r2,zero,13498 <alt_get_errno+0x3c>
   13480:	00800234 	movhi	r2,8
   13484:	10a08404 	addi	r2,r2,-32240
   13488:	10800017 	ldw	r2,0(r2)
   1348c:	103ee83a 	callr	r2
   13490:	e0bfff15 	stw	r2,-4(fp)
   13494:	00000306 	br	134a4 <alt_get_errno+0x48>
   13498:	00800234 	movhi	r2,8
   1349c:	10ae1604 	addi	r2,r2,-18344
   134a0:	e0bfff15 	stw	r2,-4(fp)
   134a4:	e0bfff17 	ldw	r2,-4(fp)
}
   134a8:	e037883a 	mov	sp,fp
   134ac:	dfc00117 	ldw	ra,4(sp)
   134b0:	df000017 	ldw	fp,0(sp)
   134b4:	dec00204 	addi	sp,sp,8
   134b8:	f800283a 	ret

000134bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   134bc:	defff904 	addi	sp,sp,-28
   134c0:	dfc00615 	stw	ra,24(sp)
   134c4:	df000515 	stw	fp,20(sp)
   134c8:	df000504 	addi	fp,sp,20
   134cc:	e13ffc15 	stw	r4,-16(fp)
   134d0:	e17ffd15 	stw	r5,-12(fp)
   134d4:	e1bffe15 	stw	r6,-8(fp)
   134d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   134dc:	e0800217 	ldw	r2,8(fp)
   134e0:	d8800015 	stw	r2,0(sp)
   134e4:	e13ffc17 	ldw	r4,-16(fp)
   134e8:	e17ffd17 	ldw	r5,-12(fp)
   134ec:	e1bffe17 	ldw	r6,-8(fp)
   134f0:	e1ffff17 	ldw	r7,-4(fp)
   134f4:	00136900 	call	13690 <alt_iic_isr_register>
}  
   134f8:	e037883a 	mov	sp,fp
   134fc:	dfc00117 	ldw	ra,4(sp)
   13500:	df000017 	ldw	fp,0(sp)
   13504:	dec00204 	addi	sp,sp,8
   13508:	f800283a 	ret

0001350c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1350c:	defff904 	addi	sp,sp,-28
   13510:	df000615 	stw	fp,24(sp)
   13514:	df000604 	addi	fp,sp,24
   13518:	e13ffe15 	stw	r4,-8(fp)
   1351c:	e17fff15 	stw	r5,-4(fp)
   13520:	e0bfff17 	ldw	r2,-4(fp)
   13524:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13528:	0005303a 	rdctl	r2,status
   1352c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13530:	e0fffb17 	ldw	r3,-20(fp)
   13534:	00bfff84 	movi	r2,-2
   13538:	1884703a 	and	r2,r3,r2
   1353c:	1001703a 	wrctl	status,r2
  
  return context;
   13540:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13544:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   13548:	e0fffc17 	ldw	r3,-16(fp)
   1354c:	00800044 	movi	r2,1
   13550:	10c4983a 	sll	r2,r2,r3
   13554:	1007883a 	mov	r3,r2
   13558:	00800234 	movhi	r2,8
   1355c:	10ae1a04 	addi	r2,r2,-18328
   13560:	10800017 	ldw	r2,0(r2)
   13564:	1886b03a 	or	r3,r3,r2
   13568:	00800234 	movhi	r2,8
   1356c:	10ae1a04 	addi	r2,r2,-18328
   13570:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13574:	00800234 	movhi	r2,8
   13578:	10ae1a04 	addi	r2,r2,-18328
   1357c:	10800017 	ldw	r2,0(r2)
   13580:	100170fa 	wrctl	ienable,r2
   13584:	e0bffd17 	ldw	r2,-12(fp)
   13588:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1358c:	e0bffa17 	ldw	r2,-24(fp)
   13590:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13594:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   13598:	e037883a 	mov	sp,fp
   1359c:	df000017 	ldw	fp,0(sp)
   135a0:	dec00104 	addi	sp,sp,4
   135a4:	f800283a 	ret

000135a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   135a8:	defff904 	addi	sp,sp,-28
   135ac:	df000615 	stw	fp,24(sp)
   135b0:	df000604 	addi	fp,sp,24
   135b4:	e13ffe15 	stw	r4,-8(fp)
   135b8:	e17fff15 	stw	r5,-4(fp)
   135bc:	e0bfff17 	ldw	r2,-4(fp)
   135c0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   135c4:	0005303a 	rdctl	r2,status
   135c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   135cc:	e0fffb17 	ldw	r3,-20(fp)
   135d0:	00bfff84 	movi	r2,-2
   135d4:	1884703a 	and	r2,r3,r2
   135d8:	1001703a 	wrctl	status,r2
  
  return context;
   135dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   135e0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   135e4:	e0fffc17 	ldw	r3,-16(fp)
   135e8:	00800044 	movi	r2,1
   135ec:	10c4983a 	sll	r2,r2,r3
   135f0:	0084303a 	nor	r2,zero,r2
   135f4:	1007883a 	mov	r3,r2
   135f8:	00800234 	movhi	r2,8
   135fc:	10ae1a04 	addi	r2,r2,-18328
   13600:	10800017 	ldw	r2,0(r2)
   13604:	1886703a 	and	r3,r3,r2
   13608:	00800234 	movhi	r2,8
   1360c:	10ae1a04 	addi	r2,r2,-18328
   13610:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13614:	00800234 	movhi	r2,8
   13618:	10ae1a04 	addi	r2,r2,-18328
   1361c:	10800017 	ldw	r2,0(r2)
   13620:	100170fa 	wrctl	ienable,r2
   13624:	e0bffd17 	ldw	r2,-12(fp)
   13628:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1362c:	e0bffa17 	ldw	r2,-24(fp)
   13630:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13634:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   13638:	e037883a 	mov	sp,fp
   1363c:	df000017 	ldw	fp,0(sp)
   13640:	dec00104 	addi	sp,sp,4
   13644:	f800283a 	ret

00013648 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13648:	defffc04 	addi	sp,sp,-16
   1364c:	df000315 	stw	fp,12(sp)
   13650:	df000304 	addi	fp,sp,12
   13654:	e13ffe15 	stw	r4,-8(fp)
   13658:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1365c:	000530fa 	rdctl	r2,ienable
   13660:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   13664:	e0ffff17 	ldw	r3,-4(fp)
   13668:	00800044 	movi	r2,1
   1366c:	10c4983a 	sll	r2,r2,r3
   13670:	1007883a 	mov	r3,r2
   13674:	e0bffd17 	ldw	r2,-12(fp)
   13678:	1884703a 	and	r2,r3,r2
   1367c:	1004c03a 	cmpne	r2,r2,zero
}
   13680:	e037883a 	mov	sp,fp
   13684:	df000017 	ldw	fp,0(sp)
   13688:	dec00104 	addi	sp,sp,4
   1368c:	f800283a 	ret

00013690 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13690:	defff404 	addi	sp,sp,-48
   13694:	dfc00b15 	stw	ra,44(sp)
   13698:	df000a15 	stw	fp,40(sp)
   1369c:	df000a04 	addi	fp,sp,40
   136a0:	e13ffb15 	stw	r4,-20(fp)
   136a4:	e17ffc15 	stw	r5,-16(fp)
   136a8:	e1bffd15 	stw	r6,-12(fp)
   136ac:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   136b0:	00bffa84 	movi	r2,-22
   136b4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   136b8:	e0bffc17 	ldw	r2,-16(fp)
   136bc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   136c0:	e0bff917 	ldw	r2,-28(fp)
   136c4:	10800808 	cmpgei	r2,r2,32
   136c8:	1000291e 	bne	r2,zero,13770 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136cc:	0005303a 	rdctl	r2,status
   136d0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136d4:	e0fff717 	ldw	r3,-36(fp)
   136d8:	00bfff84 	movi	r2,-2
   136dc:	1884703a 	and	r2,r3,r2
   136e0:	1001703a 	wrctl	status,r2
  
  return context;
   136e4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   136e8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   136ec:	e0bff917 	ldw	r2,-28(fp)
   136f0:	00c00234 	movhi	r3,8
   136f4:	18ee2a04 	addi	r3,r3,-18264
   136f8:	100490fa 	slli	r2,r2,3
   136fc:	10c7883a 	add	r3,r2,r3
   13700:	e0bffd17 	ldw	r2,-12(fp)
   13704:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   13708:	e0bff917 	ldw	r2,-28(fp)
   1370c:	00c00234 	movhi	r3,8
   13710:	18ee2a04 	addi	r3,r3,-18264
   13714:	100490fa 	slli	r2,r2,3
   13718:	10c5883a 	add	r2,r2,r3
   1371c:	10c00104 	addi	r3,r2,4
   13720:	e0bffe17 	ldw	r2,-8(fp)
   13724:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   13728:	e0bffd17 	ldw	r2,-12(fp)
   1372c:	1005003a 	cmpeq	r2,r2,zero
   13730:	1000051e 	bne	r2,zero,13748 <alt_iic_isr_register+0xb8>
   13734:	e17ff917 	ldw	r5,-28(fp)
   13738:	e13ffb17 	ldw	r4,-20(fp)
   1373c:	001350c0 	call	1350c <alt_ic_irq_enable>
   13740:	e0bfff15 	stw	r2,-4(fp)
   13744:	00000406 	br	13758 <alt_iic_isr_register+0xc8>
   13748:	e17ff917 	ldw	r5,-28(fp)
   1374c:	e13ffb17 	ldw	r4,-20(fp)
   13750:	00135a80 	call	135a8 <alt_ic_irq_disable>
   13754:	e0bfff15 	stw	r2,-4(fp)
   13758:	e0bfff17 	ldw	r2,-4(fp)
   1375c:	e0bffa15 	stw	r2,-24(fp)
   13760:	e0bff817 	ldw	r2,-32(fp)
   13764:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13768:	e0bff617 	ldw	r2,-40(fp)
   1376c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13770:	e0bffa17 	ldw	r2,-24(fp)
}
   13774:	e037883a 	mov	sp,fp
   13778:	dfc00117 	ldw	ra,4(sp)
   1377c:	df000017 	ldw	fp,0(sp)
   13780:	dec00204 	addi	sp,sp,8
   13784:	f800283a 	ret

00013788 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13788:	deffeb04 	addi	sp,sp,-84
   1378c:	dfc01415 	stw	ra,80(sp)
   13790:	df001315 	stw	fp,76(sp)
   13794:	df001304 	addi	fp,sp,76
   13798:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1379c:	e0bffd17 	ldw	r2,-12(fp)
   137a0:	1004803a 	cmplt	r2,r2,zero
   137a4:	1000091e 	bne	r2,zero,137cc <isatty+0x44>
   137a8:	e13ffd17 	ldw	r4,-12(fp)
   137ac:	01400304 	movi	r5,12
   137b0:	000a0540 	call	a054 <__mulsi3>
   137b4:	1007883a 	mov	r3,r2
   137b8:	008001f4 	movhi	r2,7
   137bc:	109bfe04 	addi	r2,r2,28664
   137c0:	1887883a 	add	r3,r3,r2
   137c4:	e0ffff15 	stw	r3,-4(fp)
   137c8:	00000106 	br	137d0 <isatty+0x48>
   137cc:	e03fff15 	stw	zero,-4(fp)
   137d0:	e0bfff17 	ldw	r2,-4(fp)
   137d4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   137d8:	e0bfed17 	ldw	r2,-76(fp)
   137dc:	1005003a 	cmpeq	r2,r2,zero
   137e0:	10000f1e 	bne	r2,zero,13820 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   137e4:	e0bfed17 	ldw	r2,-76(fp)
   137e8:	10800017 	ldw	r2,0(r2)
   137ec:	10800817 	ldw	r2,32(r2)
   137f0:	1004c03a 	cmpne	r2,r2,zero
   137f4:	1000031e 	bne	r2,zero,13804 <isatty+0x7c>
    {
      return 1;
   137f8:	00800044 	movi	r2,1
   137fc:	e0bffe15 	stw	r2,-8(fp)
   13800:	00000c06 	br	13834 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13804:	e17fee04 	addi	r5,fp,-72
   13808:	e13ffd17 	ldw	r4,-12(fp)
   1380c:	00133840 	call	13384 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13810:	e0bfef17 	ldw	r2,-68(fp)
   13814:	10880020 	cmpeqi	r2,r2,8192
   13818:	e0bffe15 	stw	r2,-8(fp)
   1381c:	00000506 	br	13834 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13820:	001384c0 	call	1384c <alt_get_errno>
   13824:	1007883a 	mov	r3,r2
   13828:	00801444 	movi	r2,81
   1382c:	18800015 	stw	r2,0(r3)
    return 0;
   13830:	e03ffe15 	stw	zero,-8(fp)
   13834:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   13838:	e037883a 	mov	sp,fp
   1383c:	dfc00117 	ldw	ra,4(sp)
   13840:	df000017 	ldw	fp,0(sp)
   13844:	dec00204 	addi	sp,sp,8
   13848:	f800283a 	ret

0001384c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1384c:	defffd04 	addi	sp,sp,-12
   13850:	dfc00215 	stw	ra,8(sp)
   13854:	df000115 	stw	fp,4(sp)
   13858:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1385c:	00800234 	movhi	r2,8
   13860:	10a08404 	addi	r2,r2,-32240
   13864:	10800017 	ldw	r2,0(r2)
   13868:	1005003a 	cmpeq	r2,r2,zero
   1386c:	1000061e 	bne	r2,zero,13888 <alt_get_errno+0x3c>
   13870:	00800234 	movhi	r2,8
   13874:	10a08404 	addi	r2,r2,-32240
   13878:	10800017 	ldw	r2,0(r2)
   1387c:	103ee83a 	callr	r2
   13880:	e0bfff15 	stw	r2,-4(fp)
   13884:	00000306 	br	13894 <alt_get_errno+0x48>
   13888:	00800234 	movhi	r2,8
   1388c:	10ae1604 	addi	r2,r2,-18344
   13890:	e0bfff15 	stw	r2,-4(fp)
   13894:	e0bfff17 	ldw	r2,-4(fp)
}
   13898:	e037883a 	mov	sp,fp
   1389c:	dfc00117 	ldw	ra,4(sp)
   138a0:	df000017 	ldw	fp,0(sp)
   138a4:	dec00204 	addi	sp,sp,8
   138a8:	f800283a 	ret

000138ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   138ac:	defffe04 	addi	sp,sp,-8
   138b0:	dfc00115 	stw	ra,4(sp)
   138b4:	df000015 	stw	fp,0(sp)
   138b8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   138bc:	01000234 	movhi	r4,8
   138c0:	21208904 	addi	r4,r4,-32220
   138c4:	014001f4 	movhi	r5,7
   138c8:	29530004 	addi	r5,r5,19456
   138cc:	01800234 	movhi	r6,8
   138d0:	31a08904 	addi	r6,r6,-32220
   138d4:	001392c0 	call	1392c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   138d8:	01000034 	movhi	r4,0
   138dc:	21000804 	addi	r4,r4,32
   138e0:	01400034 	movhi	r5,0
   138e4:	29400804 	addi	r5,r5,32
   138e8:	01800034 	movhi	r6,0
   138ec:	31806d04 	addi	r6,r6,436
   138f0:	001392c0 	call	1392c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   138f4:	01000074 	movhi	r4,1
   138f8:	21179204 	addi	r4,r4,24136
   138fc:	01400074 	movhi	r5,1
   13900:	29579204 	addi	r5,r5,24136
   13904:	018001f4 	movhi	r6,7
   13908:	31930004 	addi	r6,r6,19456
   1390c:	001392c0 	call	1392c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13910:	00133140 	call	13314 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13914:	00152a40 	call	152a4 <alt_icache_flush_all>
}
   13918:	e037883a 	mov	sp,fp
   1391c:	dfc00117 	ldw	ra,4(sp)
   13920:	df000017 	ldw	fp,0(sp)
   13924:	dec00204 	addi	sp,sp,8
   13928:	f800283a 	ret

0001392c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1392c:	defffc04 	addi	sp,sp,-16
   13930:	df000315 	stw	fp,12(sp)
   13934:	df000304 	addi	fp,sp,12
   13938:	e13ffd15 	stw	r4,-12(fp)
   1393c:	e17ffe15 	stw	r5,-8(fp)
   13940:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13944:	e0fffe17 	ldw	r3,-8(fp)
   13948:	e0bffd17 	ldw	r2,-12(fp)
   1394c:	18800e26 	beq	r3,r2,13988 <alt_load_section+0x5c>
  {
    while( to != end )
   13950:	00000a06 	br	1397c <alt_load_section+0x50>
    {
      *to++ = *from++;
   13954:	e0bffd17 	ldw	r2,-12(fp)
   13958:	10c00017 	ldw	r3,0(r2)
   1395c:	e0bffe17 	ldw	r2,-8(fp)
   13960:	10c00015 	stw	r3,0(r2)
   13964:	e0bffe17 	ldw	r2,-8(fp)
   13968:	10800104 	addi	r2,r2,4
   1396c:	e0bffe15 	stw	r2,-8(fp)
   13970:	e0bffd17 	ldw	r2,-12(fp)
   13974:	10800104 	addi	r2,r2,4
   13978:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1397c:	e0fffe17 	ldw	r3,-8(fp)
   13980:	e0bfff17 	ldw	r2,-4(fp)
   13984:	18bff31e 	bne	r3,r2,13954 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   13988:	e037883a 	mov	sp,fp
   1398c:	df000017 	ldw	fp,0(sp)
   13990:	dec00104 	addi	sp,sp,4
   13994:	f800283a 	ret

00013998 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13998:	defff804 	addi	sp,sp,-32
   1399c:	dfc00715 	stw	ra,28(sp)
   139a0:	df000615 	stw	fp,24(sp)
   139a4:	df000604 	addi	fp,sp,24
   139a8:	e13ffc15 	stw	r4,-16(fp)
   139ac:	e17ffd15 	stw	r5,-12(fp)
   139b0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   139b4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   139b8:	e0bffc17 	ldw	r2,-16(fp)
   139bc:	1004803a 	cmplt	r2,r2,zero
   139c0:	1000091e 	bne	r2,zero,139e8 <lseek+0x50>
   139c4:	e13ffc17 	ldw	r4,-16(fp)
   139c8:	01400304 	movi	r5,12
   139cc:	000a0540 	call	a054 <__mulsi3>
   139d0:	1007883a 	mov	r3,r2
   139d4:	008001f4 	movhi	r2,7
   139d8:	109bfe04 	addi	r2,r2,28664
   139dc:	1887883a 	add	r3,r3,r2
   139e0:	e0ffff15 	stw	r3,-4(fp)
   139e4:	00000106 	br	139ec <lseek+0x54>
   139e8:	e03fff15 	stw	zero,-4(fp)
   139ec:	e0bfff17 	ldw	r2,-4(fp)
   139f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   139f4:	e0bffb17 	ldw	r2,-20(fp)
   139f8:	1005003a 	cmpeq	r2,r2,zero
   139fc:	1000111e 	bne	r2,zero,13a44 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13a00:	e0bffb17 	ldw	r2,-20(fp)
   13a04:	10800017 	ldw	r2,0(r2)
   13a08:	10800717 	ldw	r2,28(r2)
   13a0c:	1005003a 	cmpeq	r2,r2,zero
   13a10:	1000091e 	bne	r2,zero,13a38 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13a14:	e0bffb17 	ldw	r2,-20(fp)
   13a18:	10800017 	ldw	r2,0(r2)
   13a1c:	10800717 	ldw	r2,28(r2)
   13a20:	e13ffb17 	ldw	r4,-20(fp)
   13a24:	e17ffd17 	ldw	r5,-12(fp)
   13a28:	e1bffe17 	ldw	r6,-8(fp)
   13a2c:	103ee83a 	callr	r2
   13a30:	e0bffa15 	stw	r2,-24(fp)
   13a34:	00000506 	br	13a4c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13a38:	00bfde84 	movi	r2,-134
   13a3c:	e0bffa15 	stw	r2,-24(fp)
   13a40:	00000206 	br	13a4c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   13a44:	00bfebc4 	movi	r2,-81
   13a48:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   13a4c:	e0bffa17 	ldw	r2,-24(fp)
   13a50:	1004403a 	cmpge	r2,r2,zero
   13a54:	1000071e 	bne	r2,zero,13a74 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   13a58:	0013a8c0 	call	13a8c <alt_get_errno>
   13a5c:	1007883a 	mov	r3,r2
   13a60:	e0bffa17 	ldw	r2,-24(fp)
   13a64:	0085c83a 	sub	r2,zero,r2
   13a68:	18800015 	stw	r2,0(r3)
    rc = -1;
   13a6c:	00bfffc4 	movi	r2,-1
   13a70:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   13a74:	e0bffa17 	ldw	r2,-24(fp)
}
   13a78:	e037883a 	mov	sp,fp
   13a7c:	dfc00117 	ldw	ra,4(sp)
   13a80:	df000017 	ldw	fp,0(sp)
   13a84:	dec00204 	addi	sp,sp,8
   13a88:	f800283a 	ret

00013a8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13a8c:	defffd04 	addi	sp,sp,-12
   13a90:	dfc00215 	stw	ra,8(sp)
   13a94:	df000115 	stw	fp,4(sp)
   13a98:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13a9c:	00800234 	movhi	r2,8
   13aa0:	10a08404 	addi	r2,r2,-32240
   13aa4:	10800017 	ldw	r2,0(r2)
   13aa8:	1005003a 	cmpeq	r2,r2,zero
   13aac:	1000061e 	bne	r2,zero,13ac8 <alt_get_errno+0x3c>
   13ab0:	00800234 	movhi	r2,8
   13ab4:	10a08404 	addi	r2,r2,-32240
   13ab8:	10800017 	ldw	r2,0(r2)
   13abc:	103ee83a 	callr	r2
   13ac0:	e0bfff15 	stw	r2,-4(fp)
   13ac4:	00000306 	br	13ad4 <alt_get_errno+0x48>
   13ac8:	00800234 	movhi	r2,8
   13acc:	10ae1604 	addi	r2,r2,-18344
   13ad0:	e0bfff15 	stw	r2,-4(fp)
   13ad4:	e0bfff17 	ldw	r2,-4(fp)
}
   13ad8:	e037883a 	mov	sp,fp
   13adc:	dfc00117 	ldw	ra,4(sp)
   13ae0:	df000017 	ldw	fp,0(sp)
   13ae4:	dec00204 	addi	sp,sp,8
   13ae8:	f800283a 	ret

00013aec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13aec:	defffd04 	addi	sp,sp,-12
   13af0:	dfc00215 	stw	ra,8(sp)
   13af4:	df000115 	stw	fp,4(sp)
   13af8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13afc:	0009883a 	mov	r4,zero
   13b00:	00141a80 	call	141a8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13b04:	00141dc0 	call	141dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13b08:	010001f4 	movhi	r4,7
   13b0c:	2112f804 	addi	r4,r4,19424
   13b10:	014001f4 	movhi	r5,7
   13b14:	2952f804 	addi	r5,r5,19424
   13b18:	018001f4 	movhi	r6,7
   13b1c:	3192f804 	addi	r6,r6,19424
   13b20:	00153ac0 	call	153ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13b24:	00151dc0 	call	151dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13b28:	01000074 	movhi	r4,1
   13b2c:	21149004 	addi	r4,r4,21056
   13b30:	0015a3c0 	call	15a3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13b34:	d12da517 	ldw	r4,-18796(gp)
   13b38:	d16da617 	ldw	r5,-18792(gp)
   13b3c:	d1ada717 	ldw	r6,-18788(gp)
   13b40:	0005e4c0 	call	5e4c <main>
   13b44:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13b48:	01000044 	movi	r4,1
   13b4c:	00131b40 	call	131b4 <close>
  exit (result);
   13b50:	e13fff17 	ldw	r4,-4(fp)
   13b54:	0015a500 	call	15a50 <exit>

00013b58 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13b58:	defffe04 	addi	sp,sp,-8
   13b5c:	df000115 	stw	fp,4(sp)
   13b60:	df000104 	addi	fp,sp,4
   13b64:	e13fff15 	stw	r4,-4(fp)
}
   13b68:	e037883a 	mov	sp,fp
   13b6c:	df000017 	ldw	fp,0(sp)
   13b70:	dec00104 	addi	sp,sp,4
   13b74:	f800283a 	ret

00013b78 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13b78:	defffe04 	addi	sp,sp,-8
   13b7c:	df000115 	stw	fp,4(sp)
   13b80:	df000104 	addi	fp,sp,4
   13b84:	e13fff15 	stw	r4,-4(fp)
}
   13b88:	e037883a 	mov	sp,fp
   13b8c:	df000017 	ldw	fp,0(sp)
   13b90:	dec00104 	addi	sp,sp,4
   13b94:	f800283a 	ret

00013b98 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13b98:	defff704 	addi	sp,sp,-36
   13b9c:	dfc00815 	stw	ra,32(sp)
   13ba0:	df000715 	stw	fp,28(sp)
   13ba4:	df000704 	addi	fp,sp,28
   13ba8:	e13ffb15 	stw	r4,-20(fp)
   13bac:	e17ffc15 	stw	r5,-16(fp)
   13bb0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13bb4:	e0bffb17 	ldw	r2,-20(fp)
   13bb8:	1004803a 	cmplt	r2,r2,zero
   13bbc:	1000091e 	bne	r2,zero,13be4 <read+0x4c>
   13bc0:	e13ffb17 	ldw	r4,-20(fp)
   13bc4:	01400304 	movi	r5,12
   13bc8:	000a0540 	call	a054 <__mulsi3>
   13bcc:	1007883a 	mov	r3,r2
   13bd0:	008001f4 	movhi	r2,7
   13bd4:	109bfe04 	addi	r2,r2,28664
   13bd8:	1887883a 	add	r3,r3,r2
   13bdc:	e0ffff15 	stw	r3,-4(fp)
   13be0:	00000106 	br	13be8 <read+0x50>
   13be4:	e03fff15 	stw	zero,-4(fp)
   13be8:	e0bfff17 	ldw	r2,-4(fp)
   13bec:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   13bf0:	e0bffa17 	ldw	r2,-24(fp)
   13bf4:	1005003a 	cmpeq	r2,r2,zero
   13bf8:	1000241e 	bne	r2,zero,13c8c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13bfc:	e0bffa17 	ldw	r2,-24(fp)
   13c00:	10800217 	ldw	r2,8(r2)
   13c04:	108000cc 	andi	r2,r2,3
   13c08:	10800060 	cmpeqi	r2,r2,1
   13c0c:	10001a1e 	bne	r2,zero,13c78 <read+0xe0>
   13c10:	e0bffa17 	ldw	r2,-24(fp)
   13c14:	10800017 	ldw	r2,0(r2)
   13c18:	10800517 	ldw	r2,20(r2)
   13c1c:	1005003a 	cmpeq	r2,r2,zero
   13c20:	1000151e 	bne	r2,zero,13c78 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13c24:	e0bffa17 	ldw	r2,-24(fp)
   13c28:	10800017 	ldw	r2,0(r2)
   13c2c:	10800517 	ldw	r2,20(r2)
   13c30:	e17ffc17 	ldw	r5,-16(fp)
   13c34:	e1bffd17 	ldw	r6,-12(fp)
   13c38:	e13ffa17 	ldw	r4,-24(fp)
   13c3c:	103ee83a 	callr	r2
   13c40:	e0bff915 	stw	r2,-28(fp)
   13c44:	e0bff917 	ldw	r2,-28(fp)
   13c48:	1004403a 	cmpge	r2,r2,zero
   13c4c:	1000071e 	bne	r2,zero,13c6c <read+0xd4>
        {
          ALT_ERRNO = -rval;
   13c50:	0013cbc0 	call	13cbc <alt_get_errno>
   13c54:	e0fff917 	ldw	r3,-28(fp)
   13c58:	00c7c83a 	sub	r3,zero,r3
   13c5c:	10c00015 	stw	r3,0(r2)
          return -1;
   13c60:	00bfffc4 	movi	r2,-1
   13c64:	e0bffe15 	stw	r2,-8(fp)
   13c68:	00000e06 	br	13ca4 <read+0x10c>
        }
        return rval;
   13c6c:	e0bff917 	ldw	r2,-28(fp)
   13c70:	e0bffe15 	stw	r2,-8(fp)
   13c74:	00000b06 	br	13ca4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13c78:	0013cbc0 	call	13cbc <alt_get_errno>
   13c7c:	1007883a 	mov	r3,r2
   13c80:	00800344 	movi	r2,13
   13c84:	18800015 	stw	r2,0(r3)
   13c88:	00000406 	br	13c9c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13c8c:	0013cbc0 	call	13cbc <alt_get_errno>
   13c90:	1007883a 	mov	r3,r2
   13c94:	00801444 	movi	r2,81
   13c98:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13c9c:	00bfffc4 	movi	r2,-1
   13ca0:	e0bffe15 	stw	r2,-8(fp)
   13ca4:	e0bffe17 	ldw	r2,-8(fp)
}
   13ca8:	e037883a 	mov	sp,fp
   13cac:	dfc00117 	ldw	ra,4(sp)
   13cb0:	df000017 	ldw	fp,0(sp)
   13cb4:	dec00204 	addi	sp,sp,8
   13cb8:	f800283a 	ret

00013cbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13cbc:	defffd04 	addi	sp,sp,-12
   13cc0:	dfc00215 	stw	ra,8(sp)
   13cc4:	df000115 	stw	fp,4(sp)
   13cc8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13ccc:	00800234 	movhi	r2,8
   13cd0:	10a08404 	addi	r2,r2,-32240
   13cd4:	10800017 	ldw	r2,0(r2)
   13cd8:	1005003a 	cmpeq	r2,r2,zero
   13cdc:	1000061e 	bne	r2,zero,13cf8 <alt_get_errno+0x3c>
   13ce0:	00800234 	movhi	r2,8
   13ce4:	10a08404 	addi	r2,r2,-32240
   13ce8:	10800017 	ldw	r2,0(r2)
   13cec:	103ee83a 	callr	r2
   13cf0:	e0bfff15 	stw	r2,-4(fp)
   13cf4:	00000306 	br	13d04 <alt_get_errno+0x48>
   13cf8:	00800234 	movhi	r2,8
   13cfc:	10ae1604 	addi	r2,r2,-18344
   13d00:	e0bfff15 	stw	r2,-4(fp)
   13d04:	e0bfff17 	ldw	r2,-4(fp)
}
   13d08:	e037883a 	mov	sp,fp
   13d0c:	dfc00117 	ldw	ra,4(sp)
   13d10:	df000017 	ldw	fp,0(sp)
   13d14:	dec00204 	addi	sp,sp,8
   13d18:	f800283a 	ret

00013d1c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13d1c:	defffc04 	addi	sp,sp,-16
   13d20:	dfc00315 	stw	ra,12(sp)
   13d24:	df000215 	stw	fp,8(sp)
   13d28:	dc000115 	stw	r16,4(sp)
   13d2c:	df000104 	addi	fp,sp,4
   13d30:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13d34:	e0bfff17 	ldw	r2,-4(fp)
   13d38:	108000d0 	cmplti	r2,r2,3
   13d3c:	10000f1e 	bne	r2,zero,13d7c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   13d40:	e13fff17 	ldw	r4,-4(fp)
   13d44:	040001f4 	movhi	r16,7
   13d48:	841bfe04 	addi	r16,r16,28664
   13d4c:	01400304 	movi	r5,12
   13d50:	000a0540 	call	a054 <__mulsi3>
   13d54:	1405883a 	add	r2,r2,r16
   13d58:	10800204 	addi	r2,r2,8
   13d5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13d60:	e13fff17 	ldw	r4,-4(fp)
   13d64:	040001f4 	movhi	r16,7
   13d68:	841bfe04 	addi	r16,r16,28664
   13d6c:	01400304 	movi	r5,12
   13d70:	000a0540 	call	a054 <__mulsi3>
   13d74:	1405883a 	add	r2,r2,r16
   13d78:	10000015 	stw	zero,0(r2)
  }
}
   13d7c:	e037883a 	mov	sp,fp
   13d80:	dfc00217 	ldw	ra,8(sp)
   13d84:	df000117 	ldw	fp,4(sp)
   13d88:	dc000017 	ldw	r16,0(sp)
   13d8c:	dec00304 	addi	sp,sp,12
   13d90:	f800283a 	ret

00013d94 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13d94:	defff804 	addi	sp,sp,-32
   13d98:	df000715 	stw	fp,28(sp)
   13d9c:	df000704 	addi	fp,sp,28
   13da0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13da4:	0005303a 	rdctl	r2,status
   13da8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13dac:	e0fffb17 	ldw	r3,-20(fp)
   13db0:	00bfff84 	movi	r2,-2
   13db4:	1884703a 	and	r2,r3,r2
   13db8:	1001703a 	wrctl	status,r2
  
  return context;
   13dbc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13dc0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13dc4:	d0a01017 	ldw	r2,-32704(gp)
   13dc8:	10c000c4 	addi	r3,r2,3
   13dcc:	00bfff04 	movi	r2,-4
   13dd0:	1884703a 	and	r2,r3,r2
   13dd4:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13dd8:	d0e01017 	ldw	r3,-32704(gp)
   13ddc:	e0bffe17 	ldw	r2,-8(fp)
   13de0:	1887883a 	add	r3,r3,r2
   13de4:	00802034 	movhi	r2,128
   13de8:	10800004 	addi	r2,r2,0
   13dec:	10c0072e 	bgeu	r2,r3,13e0c <sbrk+0x78>
   13df0:	e0bffd17 	ldw	r2,-12(fp)
   13df4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13df8:	e0bffa17 	ldw	r2,-24(fp)
   13dfc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13e00:	00bfffc4 	movi	r2,-1
   13e04:	e0bfff15 	stw	r2,-4(fp)
   13e08:	00000c06 	br	13e3c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   13e0c:	d0a01017 	ldw	r2,-32704(gp)
   13e10:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   13e14:	d0e01017 	ldw	r3,-32704(gp)
   13e18:	e0bffe17 	ldw	r2,-8(fp)
   13e1c:	1885883a 	add	r2,r3,r2
   13e20:	d0a01015 	stw	r2,-32704(gp)
   13e24:	e0bffd17 	ldw	r2,-12(fp)
   13e28:	e0bff915 	stw	r2,-28(fp)
   13e2c:	e0bff917 	ldw	r2,-28(fp)
   13e30:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13e34:	e0bffc17 	ldw	r2,-16(fp)
   13e38:	e0bfff15 	stw	r2,-4(fp)
   13e3c:	e0bfff17 	ldw	r2,-4(fp)
} 
   13e40:	e037883a 	mov	sp,fp
   13e44:	df000017 	ldw	fp,0(sp)
   13e48:	dec00104 	addi	sp,sp,4
   13e4c:	f800283a 	ret

00013e50 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13e50:	defffa04 	addi	sp,sp,-24
   13e54:	df000515 	stw	fp,20(sp)
   13e58:	df000504 	addi	fp,sp,20
   13e5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e60:	0005303a 	rdctl	r2,status
   13e64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e68:	e0fffd17 	ldw	r3,-12(fp)
   13e6c:	00bfff84 	movi	r2,-2
   13e70:	1884703a 	and	r2,r3,r2
   13e74:	1001703a 	wrctl	status,r2
  
  return context;
   13e78:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13e7c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   13e80:	e0bfff17 	ldw	r2,-4(fp)
   13e84:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   13e88:	e0bffc17 	ldw	r2,-16(fp)
   13e8c:	10c00017 	ldw	r3,0(r2)
   13e90:	e0bffc17 	ldw	r2,-16(fp)
   13e94:	10800117 	ldw	r2,4(r2)
   13e98:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   13e9c:	e0bffc17 	ldw	r2,-16(fp)
   13ea0:	10c00117 	ldw	r3,4(r2)
   13ea4:	e0bffc17 	ldw	r2,-16(fp)
   13ea8:	10800017 	ldw	r2,0(r2)
   13eac:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13eb0:	e0fffc17 	ldw	r3,-16(fp)
   13eb4:	e0bffc17 	ldw	r2,-16(fp)
   13eb8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   13ebc:	e0fffc17 	ldw	r3,-16(fp)
   13ec0:	e0bffc17 	ldw	r2,-16(fp)
   13ec4:	18800015 	stw	r2,0(r3)
   13ec8:	e0bffe17 	ldw	r2,-8(fp)
   13ecc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ed0:	e0bffb17 	ldw	r2,-20(fp)
   13ed4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   13ed8:	e037883a 	mov	sp,fp
   13edc:	df000017 	ldw	fp,0(sp)
   13ee0:	dec00104 	addi	sp,sp,4
   13ee4:	f800283a 	ret

00013ee8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   13ee8:	defffb04 	addi	sp,sp,-20
   13eec:	dfc00415 	stw	ra,16(sp)
   13ef0:	df000315 	stw	fp,12(sp)
   13ef4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   13ef8:	d0a01117 	ldw	r2,-32700(gp)
   13efc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   13f00:	d0ada917 	ldw	r2,-18780(gp)
   13f04:	10800044 	addi	r2,r2,1
   13f08:	d0ada915 	stw	r2,-18780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13f0c:	00003106 	br	13fd4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   13f10:	e0bffe17 	ldw	r2,-8(fp)
   13f14:	10800017 	ldw	r2,0(r2)
   13f18:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   13f1c:	e0bffe17 	ldw	r2,-8(fp)
   13f20:	10800403 	ldbu	r2,16(r2)
   13f24:	10803fcc 	andi	r2,r2,255
   13f28:	1005003a 	cmpeq	r2,r2,zero
   13f2c:	1000051e 	bne	r2,zero,13f44 <alt_tick+0x5c>
   13f30:	d0ada917 	ldw	r2,-18780(gp)
   13f34:	1004c03a 	cmpne	r2,r2,zero
   13f38:	1000021e 	bne	r2,zero,13f44 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   13f3c:	e0bffe17 	ldw	r2,-8(fp)
   13f40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   13f44:	e0bffe17 	ldw	r2,-8(fp)
   13f48:	10c00217 	ldw	r3,8(r2)
   13f4c:	d0ada917 	ldw	r2,-18780(gp)
   13f50:	10c01e36 	bltu	r2,r3,13fcc <alt_tick+0xe4>
   13f54:	e0bffe17 	ldw	r2,-8(fp)
   13f58:	10800403 	ldbu	r2,16(r2)
   13f5c:	10803fcc 	andi	r2,r2,255
   13f60:	1004c03a 	cmpne	r2,r2,zero
   13f64:	1000191e 	bne	r2,zero,13fcc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   13f68:	e0bffe17 	ldw	r2,-8(fp)
   13f6c:	10c00317 	ldw	r3,12(r2)
   13f70:	e0bffe17 	ldw	r2,-8(fp)
   13f74:	11000517 	ldw	r4,20(r2)
   13f78:	183ee83a 	callr	r3
   13f7c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   13f80:	e0bffd17 	ldw	r2,-12(fp)
   13f84:	1004c03a 	cmpne	r2,r2,zero
   13f88:	1000031e 	bne	r2,zero,13f98 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   13f8c:	e13ffe17 	ldw	r4,-8(fp)
   13f90:	0013e500 	call	13e50 <alt_alarm_stop>
   13f94:	00000d06 	br	13fcc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   13f98:	e0bffe17 	ldw	r2,-8(fp)
   13f9c:	10c00217 	ldw	r3,8(r2)
   13fa0:	e0bffd17 	ldw	r2,-12(fp)
   13fa4:	1887883a 	add	r3,r3,r2
   13fa8:	e0bffe17 	ldw	r2,-8(fp)
   13fac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   13fb0:	e0bffe17 	ldw	r2,-8(fp)
   13fb4:	10c00217 	ldw	r3,8(r2)
   13fb8:	d0ada917 	ldw	r2,-18780(gp)
   13fbc:	1880032e 	bgeu	r3,r2,13fcc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   13fc0:	e0fffe17 	ldw	r3,-8(fp)
   13fc4:	00800044 	movi	r2,1
   13fc8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   13fcc:	e0bfff17 	ldw	r2,-4(fp)
   13fd0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13fd4:	d0e01104 	addi	r3,gp,-32700
   13fd8:	e0bffe17 	ldw	r2,-8(fp)
   13fdc:	10ffcc1e 	bne	r2,r3,13f10 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   13fe0:	e037883a 	mov	sp,fp
   13fe4:	dfc00117 	ldw	ra,4(sp)
   13fe8:	df000017 	ldw	fp,0(sp)
   13fec:	dec00204 	addi	sp,sp,8
   13ff0:	f800283a 	ret

00013ff4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   13ff4:	defffd04 	addi	sp,sp,-12
   13ff8:	dfc00215 	stw	ra,8(sp)
   13ffc:	df000115 	stw	fp,4(sp)
   14000:	df000104 	addi	fp,sp,4
   14004:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   14008:	e13fff17 	ldw	r4,-4(fp)
   1400c:	0014f6c0 	call	14f6c <alt_busy_sleep>
}
   14010:	e037883a 	mov	sp,fp
   14014:	dfc00117 	ldw	ra,4(sp)
   14018:	df000017 	ldw	fp,0(sp)
   1401c:	dec00204 	addi	sp,sp,8
   14020:	f800283a 	ret

00014024 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14024:	defff704 	addi	sp,sp,-36
   14028:	dfc00815 	stw	ra,32(sp)
   1402c:	df000715 	stw	fp,28(sp)
   14030:	df000704 	addi	fp,sp,28
   14034:	e13ffb15 	stw	r4,-20(fp)
   14038:	e17ffc15 	stw	r5,-16(fp)
   1403c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14040:	e0bffb17 	ldw	r2,-20(fp)
   14044:	1004803a 	cmplt	r2,r2,zero
   14048:	1000091e 	bne	r2,zero,14070 <write+0x4c>
   1404c:	e13ffb17 	ldw	r4,-20(fp)
   14050:	01400304 	movi	r5,12
   14054:	000a0540 	call	a054 <__mulsi3>
   14058:	1007883a 	mov	r3,r2
   1405c:	008001f4 	movhi	r2,7
   14060:	109bfe04 	addi	r2,r2,28664
   14064:	1887883a 	add	r3,r3,r2
   14068:	e0ffff15 	stw	r3,-4(fp)
   1406c:	00000106 	br	14074 <write+0x50>
   14070:	e03fff15 	stw	zero,-4(fp)
   14074:	e0bfff17 	ldw	r2,-4(fp)
   14078:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1407c:	e0bffa17 	ldw	r2,-24(fp)
   14080:	1005003a 	cmpeq	r2,r2,zero
   14084:	1000241e 	bne	r2,zero,14118 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14088:	e0bffa17 	ldw	r2,-24(fp)
   1408c:	10800217 	ldw	r2,8(r2)
   14090:	108000cc 	andi	r2,r2,3
   14094:	1005003a 	cmpeq	r2,r2,zero
   14098:	10001a1e 	bne	r2,zero,14104 <write+0xe0>
   1409c:	e0bffa17 	ldw	r2,-24(fp)
   140a0:	10800017 	ldw	r2,0(r2)
   140a4:	10800617 	ldw	r2,24(r2)
   140a8:	1005003a 	cmpeq	r2,r2,zero
   140ac:	1000151e 	bne	r2,zero,14104 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   140b0:	e0bffa17 	ldw	r2,-24(fp)
   140b4:	10800017 	ldw	r2,0(r2)
   140b8:	10800617 	ldw	r2,24(r2)
   140bc:	e17ffc17 	ldw	r5,-16(fp)
   140c0:	e1bffd17 	ldw	r6,-12(fp)
   140c4:	e13ffa17 	ldw	r4,-24(fp)
   140c8:	103ee83a 	callr	r2
   140cc:	e0bff915 	stw	r2,-28(fp)
   140d0:	e0bff917 	ldw	r2,-28(fp)
   140d4:	1004403a 	cmpge	r2,r2,zero
   140d8:	1000071e 	bne	r2,zero,140f8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   140dc:	00141480 	call	14148 <alt_get_errno>
   140e0:	e0fff917 	ldw	r3,-28(fp)
   140e4:	00c7c83a 	sub	r3,zero,r3
   140e8:	10c00015 	stw	r3,0(r2)
        return -1;
   140ec:	00bfffc4 	movi	r2,-1
   140f0:	e0bffe15 	stw	r2,-8(fp)
   140f4:	00000e06 	br	14130 <write+0x10c>
      }
      return rval;
   140f8:	e0bff917 	ldw	r2,-28(fp)
   140fc:	e0bffe15 	stw	r2,-8(fp)
   14100:	00000b06 	br	14130 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14104:	00141480 	call	14148 <alt_get_errno>
   14108:	1007883a 	mov	r3,r2
   1410c:	00800344 	movi	r2,13
   14110:	18800015 	stw	r2,0(r3)
   14114:	00000406 	br	14128 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14118:	00141480 	call	14148 <alt_get_errno>
   1411c:	1007883a 	mov	r3,r2
   14120:	00801444 	movi	r2,81
   14124:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14128:	00bfffc4 	movi	r2,-1
   1412c:	e0bffe15 	stw	r2,-8(fp)
   14130:	e0bffe17 	ldw	r2,-8(fp)
}
   14134:	e037883a 	mov	sp,fp
   14138:	dfc00117 	ldw	ra,4(sp)
   1413c:	df000017 	ldw	fp,0(sp)
   14140:	dec00204 	addi	sp,sp,8
   14144:	f800283a 	ret

00014148 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14148:	defffd04 	addi	sp,sp,-12
   1414c:	dfc00215 	stw	ra,8(sp)
   14150:	df000115 	stw	fp,4(sp)
   14154:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   14158:	00800234 	movhi	r2,8
   1415c:	10a08404 	addi	r2,r2,-32240
   14160:	10800017 	ldw	r2,0(r2)
   14164:	1005003a 	cmpeq	r2,r2,zero
   14168:	1000061e 	bne	r2,zero,14184 <alt_get_errno+0x3c>
   1416c:	00800234 	movhi	r2,8
   14170:	10a08404 	addi	r2,r2,-32240
   14174:	10800017 	ldw	r2,0(r2)
   14178:	103ee83a 	callr	r2
   1417c:	e0bfff15 	stw	r2,-4(fp)
   14180:	00000306 	br	14190 <alt_get_errno+0x48>
   14184:	00800234 	movhi	r2,8
   14188:	10ae1604 	addi	r2,r2,-18344
   1418c:	e0bfff15 	stw	r2,-4(fp)
   14190:	e0bfff17 	ldw	r2,-4(fp)
}
   14194:	e037883a 	mov	sp,fp
   14198:	dfc00117 	ldw	ra,4(sp)
   1419c:	df000017 	ldw	fp,0(sp)
   141a0:	dec00204 	addi	sp,sp,8
   141a4:	f800283a 	ret

000141a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   141a8:	defffd04 	addi	sp,sp,-12
   141ac:	dfc00215 	stw	ra,8(sp)
   141b0:	df000115 	stw	fp,4(sp)
   141b4:	df000104 	addi	fp,sp,4
   141b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   141bc:	00157080 	call	15708 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   141c0:	00800044 	movi	r2,1
   141c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   141c8:	e037883a 	mov	sp,fp
   141cc:	dfc00117 	ldw	ra,4(sp)
   141d0:	df000017 	ldw	fp,0(sp)
   141d4:	dec00204 	addi	sp,sp,8
   141d8:	f800283a 	ret

000141dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   141dc:	defffe04 	addi	sp,sp,-8
   141e0:	dfc00115 	stw	ra,4(sp)
   141e4:	df000015 	stw	fp,0(sp)
   141e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   141ec:	01020034 	movhi	r4,2048
   141f0:	000b883a 	mov	r5,zero
   141f4:	01800044 	movi	r6,1
   141f8:	01c0fa04 	movi	r7,1000
   141fc:	0014d880 	call	14d88 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   14200:	010001f4 	movhi	r4,7
   14204:	211c6804 	addi	r4,r4,29088
   14208:	000b883a 	mov	r5,zero
   1420c:	000d883a 	mov	r6,zero
   14210:	00143b40 	call	143b4 <altera_avalon_jtag_uart_init>
   14214:	010001f4 	movhi	r4,7
   14218:	211c5e04 	addi	r4,r4,29048
   1421c:	00142340 	call	14234 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   14220:	e037883a 	mov	sp,fp
   14224:	dfc00117 	ldw	ra,4(sp)
   14228:	df000017 	ldw	fp,0(sp)
   1422c:	dec00204 	addi	sp,sp,8
   14230:	f800283a 	ret

00014234 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14234:	defffd04 	addi	sp,sp,-12
   14238:	dfc00215 	stw	ra,8(sp)
   1423c:	df000115 	stw	fp,4(sp)
   14240:	df000104 	addi	fp,sp,4
   14244:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14248:	e13fff17 	ldw	r4,-4(fp)
   1424c:	01400234 	movhi	r5,8
   14250:	29608104 	addi	r5,r5,-32252
   14254:	00150c80 	call	150c8 <alt_dev_llist_insert>
}
   14258:	e037883a 	mov	sp,fp
   1425c:	dfc00117 	ldw	ra,4(sp)
   14260:	df000017 	ldw	fp,0(sp)
   14264:	dec00204 	addi	sp,sp,8
   14268:	f800283a 	ret

0001426c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1426c:	defffa04 	addi	sp,sp,-24
   14270:	dfc00515 	stw	ra,20(sp)
   14274:	df000415 	stw	fp,16(sp)
   14278:	df000404 	addi	fp,sp,16
   1427c:	e13ffd15 	stw	r4,-12(fp)
   14280:	e17ffe15 	stw	r5,-8(fp)
   14284:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14288:	e0bffd17 	ldw	r2,-12(fp)
   1428c:	10800017 	ldw	r2,0(r2)
   14290:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14294:	e0bffc17 	ldw	r2,-16(fp)
   14298:	11000a04 	addi	r4,r2,40
   1429c:	e0bffd17 	ldw	r2,-12(fp)
   142a0:	11c00217 	ldw	r7,8(r2)
   142a4:	e17ffe17 	ldw	r5,-8(fp)
   142a8:	e1bfff17 	ldw	r6,-4(fp)
   142ac:	00148b40 	call	148b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   142b0:	e037883a 	mov	sp,fp
   142b4:	dfc00117 	ldw	ra,4(sp)
   142b8:	df000017 	ldw	fp,0(sp)
   142bc:	dec00204 	addi	sp,sp,8
   142c0:	f800283a 	ret

000142c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   142c4:	defffa04 	addi	sp,sp,-24
   142c8:	dfc00515 	stw	ra,20(sp)
   142cc:	df000415 	stw	fp,16(sp)
   142d0:	df000404 	addi	fp,sp,16
   142d4:	e13ffd15 	stw	r4,-12(fp)
   142d8:	e17ffe15 	stw	r5,-8(fp)
   142dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   142e0:	e0bffd17 	ldw	r2,-12(fp)
   142e4:	10800017 	ldw	r2,0(r2)
   142e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   142ec:	e0bffc17 	ldw	r2,-16(fp)
   142f0:	11000a04 	addi	r4,r2,40
   142f4:	e0bffd17 	ldw	r2,-12(fp)
   142f8:	11c00217 	ldw	r7,8(r2)
   142fc:	e17ffe17 	ldw	r5,-8(fp)
   14300:	e1bfff17 	ldw	r6,-4(fp)
   14304:	0014ad80 	call	14ad8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14308:	e037883a 	mov	sp,fp
   1430c:	dfc00117 	ldw	ra,4(sp)
   14310:	df000017 	ldw	fp,0(sp)
   14314:	dec00204 	addi	sp,sp,8
   14318:	f800283a 	ret

0001431c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1431c:	defffc04 	addi	sp,sp,-16
   14320:	dfc00315 	stw	ra,12(sp)
   14324:	df000215 	stw	fp,8(sp)
   14328:	df000204 	addi	fp,sp,8
   1432c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14330:	e0bfff17 	ldw	r2,-4(fp)
   14334:	10800017 	ldw	r2,0(r2)
   14338:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1433c:	e0bffe17 	ldw	r2,-8(fp)
   14340:	11000a04 	addi	r4,r2,40
   14344:	e0bfff17 	ldw	r2,-4(fp)
   14348:	11400217 	ldw	r5,8(r2)
   1434c:	001474c0 	call	1474c <altera_avalon_jtag_uart_close>
}
   14350:	e037883a 	mov	sp,fp
   14354:	dfc00117 	ldw	ra,4(sp)
   14358:	df000017 	ldw	fp,0(sp)
   1435c:	dec00204 	addi	sp,sp,8
   14360:	f800283a 	ret

00014364 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14364:	defffa04 	addi	sp,sp,-24
   14368:	dfc00515 	stw	ra,20(sp)
   1436c:	df000415 	stw	fp,16(sp)
   14370:	df000404 	addi	fp,sp,16
   14374:	e13ffd15 	stw	r4,-12(fp)
   14378:	e17ffe15 	stw	r5,-8(fp)
   1437c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14380:	e0bffd17 	ldw	r2,-12(fp)
   14384:	10800017 	ldw	r2,0(r2)
   14388:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1438c:	e0bffc17 	ldw	r2,-16(fp)
   14390:	11000a04 	addi	r4,r2,40
   14394:	e17ffe17 	ldw	r5,-8(fp)
   14398:	e1bfff17 	ldw	r6,-4(fp)
   1439c:	00147c00 	call	147c0 <altera_avalon_jtag_uart_ioctl>
}
   143a0:	e037883a 	mov	sp,fp
   143a4:	dfc00117 	ldw	ra,4(sp)
   143a8:	df000017 	ldw	fp,0(sp)
   143ac:	dec00204 	addi	sp,sp,8
   143b0:	f800283a 	ret

000143b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   143b4:	defffa04 	addi	sp,sp,-24
   143b8:	dfc00515 	stw	ra,20(sp)
   143bc:	df000415 	stw	fp,16(sp)
   143c0:	df000404 	addi	fp,sp,16
   143c4:	e13ffd15 	stw	r4,-12(fp)
   143c8:	e17ffe15 	stw	r5,-8(fp)
   143cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   143d0:	e0fffd17 	ldw	r3,-12(fp)
   143d4:	00800044 	movi	r2,1
   143d8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   143dc:	e0bffd17 	ldw	r2,-12(fp)
   143e0:	10800017 	ldw	r2,0(r2)
   143e4:	11000104 	addi	r4,r2,4
   143e8:	e0bffd17 	ldw	r2,-12(fp)
   143ec:	10800817 	ldw	r2,32(r2)
   143f0:	1007883a 	mov	r3,r2
   143f4:	2005883a 	mov	r2,r4
   143f8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   143fc:	e13ffe17 	ldw	r4,-8(fp)
   14400:	e17fff17 	ldw	r5,-4(fp)
   14404:	d8000015 	stw	zero,0(sp)
   14408:	01800074 	movhi	r6,1
   1440c:	31911d04 	addi	r6,r6,17524
   14410:	e1fffd17 	ldw	r7,-12(fp)
   14414:	00134bc0 	call	134bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14418:	e0bffd17 	ldw	r2,-12(fp)
   1441c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14420:	e0bffd17 	ldw	r2,-12(fp)
   14424:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14428:	00800234 	movhi	r2,8
   1442c:	10ae1e04 	addi	r2,r2,-18312
   14430:	10800017 	ldw	r2,0(r2)
   14434:	100b883a 	mov	r5,r2
   14438:	01800074 	movhi	r6,1
   1443c:	3191a704 	addi	r6,r6,18076
   14440:	e1fffd17 	ldw	r7,-12(fp)
   14444:	0014e180 	call	14e18 <alt_alarm_start>
   14448:	1004403a 	cmpge	r2,r2,zero
   1444c:	1000041e 	bne	r2,zero,14460 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14450:	e0fffd17 	ldw	r3,-12(fp)
   14454:	00a00034 	movhi	r2,32768
   14458:	10bfffc4 	addi	r2,r2,-1
   1445c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14460:	e037883a 	mov	sp,fp
   14464:	dfc00117 	ldw	ra,4(sp)
   14468:	df000017 	ldw	fp,0(sp)
   1446c:	dec00204 	addi	sp,sp,8
   14470:	f800283a 	ret

00014474 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14474:	defff804 	addi	sp,sp,-32
   14478:	df000715 	stw	fp,28(sp)
   1447c:	df000704 	addi	fp,sp,28
   14480:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14484:	e0bfff17 	ldw	r2,-4(fp)
   14488:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   1448c:	e0bffe17 	ldw	r2,-8(fp)
   14490:	10800017 	ldw	r2,0(r2)
   14494:	e0bffd15 	stw	r2,-12(fp)
   14498:	00000006 	br	1449c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1449c:	e0bffd17 	ldw	r2,-12(fp)
   144a0:	10800104 	addi	r2,r2,4
   144a4:	10800037 	ldwio	r2,0(r2)
   144a8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   144ac:	e0bffc17 	ldw	r2,-16(fp)
   144b0:	1080c00c 	andi	r2,r2,768
   144b4:	1005003a 	cmpeq	r2,r2,zero
   144b8:	1000741e 	bne	r2,zero,1468c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   144bc:	e0bffc17 	ldw	r2,-16(fp)
   144c0:	1080400c 	andi	r2,r2,256
   144c4:	1005003a 	cmpeq	r2,r2,zero
   144c8:	1000351e 	bne	r2,zero,145a0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   144cc:	00800074 	movhi	r2,1
   144d0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   144d4:	e0bffe17 	ldw	r2,-8(fp)
   144d8:	10800a17 	ldw	r2,40(r2)
   144dc:	10800044 	addi	r2,r2,1
   144e0:	1081ffcc 	andi	r2,r2,2047
   144e4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   144e8:	e0bffe17 	ldw	r2,-8(fp)
   144ec:	10c00b17 	ldw	r3,44(r2)
   144f0:	e0bffa17 	ldw	r2,-24(fp)
   144f4:	18801626 	beq	r3,r2,14550 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   144f8:	e0bffd17 	ldw	r2,-12(fp)
   144fc:	10800037 	ldwio	r2,0(r2)
   14500:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14504:	e0bffb17 	ldw	r2,-20(fp)
   14508:	10a0000c 	andi	r2,r2,32768
   1450c:	1005003a 	cmpeq	r2,r2,zero
   14510:	10000f1e 	bne	r2,zero,14550 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14514:	e0bffe17 	ldw	r2,-8(fp)
   14518:	10c00a17 	ldw	r3,40(r2)
   1451c:	e0bffb17 	ldw	r2,-20(fp)
   14520:	1009883a 	mov	r4,r2
   14524:	e0bffe17 	ldw	r2,-8(fp)
   14528:	1885883a 	add	r2,r3,r2
   1452c:	10800e04 	addi	r2,r2,56
   14530:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14534:	e0bffe17 	ldw	r2,-8(fp)
   14538:	10800a17 	ldw	r2,40(r2)
   1453c:	10800044 	addi	r2,r2,1
   14540:	10c1ffcc 	andi	r3,r2,2047
   14544:	e0bffe17 	ldw	r2,-8(fp)
   14548:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1454c:	003fe106 	br	144d4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14550:	e0bffb17 	ldw	r2,-20(fp)
   14554:	10bfffec 	andhi	r2,r2,65535
   14558:	1005003a 	cmpeq	r2,r2,zero
   1455c:	1000101e 	bne	r2,zero,145a0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14560:	e0bffe17 	ldw	r2,-8(fp)
   14564:	10c00817 	ldw	r3,32(r2)
   14568:	00bfff84 	movi	r2,-2
   1456c:	1886703a 	and	r3,r3,r2
   14570:	e0bffe17 	ldw	r2,-8(fp)
   14574:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14578:	e0bffd17 	ldw	r2,-12(fp)
   1457c:	11000104 	addi	r4,r2,4
   14580:	e0bffe17 	ldw	r2,-8(fp)
   14584:	10800817 	ldw	r2,32(r2)
   14588:	1007883a 	mov	r3,r2
   1458c:	2005883a 	mov	r2,r4
   14590:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14594:	e0bffd17 	ldw	r2,-12(fp)
   14598:	10800104 	addi	r2,r2,4
   1459c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   145a0:	e0bffc17 	ldw	r2,-16(fp)
   145a4:	1080800c 	andi	r2,r2,512
   145a8:	1005003a 	cmpeq	r2,r2,zero
   145ac:	103fbb1e 	bne	r2,zero,1449c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   145b0:	e0bffc17 	ldw	r2,-16(fp)
   145b4:	10bfffec 	andhi	r2,r2,65535
   145b8:	1004d43a 	srli	r2,r2,16
   145bc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   145c0:	00001506 	br	14618 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   145c4:	e13ffd17 	ldw	r4,-12(fp)
   145c8:	e0bffe17 	ldw	r2,-8(fp)
   145cc:	10c00d17 	ldw	r3,52(r2)
   145d0:	e0bffe17 	ldw	r2,-8(fp)
   145d4:	1885883a 	add	r2,r3,r2
   145d8:	10820e04 	addi	r2,r2,2104
   145dc:	10800003 	ldbu	r2,0(r2)
   145e0:	10c03fcc 	andi	r3,r2,255
   145e4:	18c0201c 	xori	r3,r3,128
   145e8:	18ffe004 	addi	r3,r3,-128
   145ec:	2005883a 	mov	r2,r4
   145f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   145f4:	e0bffe17 	ldw	r2,-8(fp)
   145f8:	10800d17 	ldw	r2,52(r2)
   145fc:	10800044 	addi	r2,r2,1
   14600:	10c1ffcc 	andi	r3,r2,2047
   14604:	e0bffe17 	ldw	r2,-8(fp)
   14608:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1460c:	e0bff917 	ldw	r2,-28(fp)
   14610:	10bfffc4 	addi	r2,r2,-1
   14614:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14618:	e0bff917 	ldw	r2,-28(fp)
   1461c:	1005003a 	cmpeq	r2,r2,zero
   14620:	1000051e 	bne	r2,zero,14638 <altera_avalon_jtag_uart_irq+0x1c4>
   14624:	e0bffe17 	ldw	r2,-8(fp)
   14628:	10c00d17 	ldw	r3,52(r2)
   1462c:	e0bffe17 	ldw	r2,-8(fp)
   14630:	10800c17 	ldw	r2,48(r2)
   14634:	18bfe31e 	bne	r3,r2,145c4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14638:	e0bff917 	ldw	r2,-28(fp)
   1463c:	1005003a 	cmpeq	r2,r2,zero
   14640:	103f961e 	bne	r2,zero,1449c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14644:	e0bffe17 	ldw	r2,-8(fp)
   14648:	10c00817 	ldw	r3,32(r2)
   1464c:	00bfff44 	movi	r2,-3
   14650:	1886703a 	and	r3,r3,r2
   14654:	e0bffe17 	ldw	r2,-8(fp)
   14658:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1465c:	e0bffe17 	ldw	r2,-8(fp)
   14660:	10800017 	ldw	r2,0(r2)
   14664:	11000104 	addi	r4,r2,4
   14668:	e0bffe17 	ldw	r2,-8(fp)
   1466c:	10800817 	ldw	r2,32(r2)
   14670:	1007883a 	mov	r3,r2
   14674:	2005883a 	mov	r2,r4
   14678:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1467c:	e0bffd17 	ldw	r2,-12(fp)
   14680:	10800104 	addi	r2,r2,4
   14684:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14688:	003f8406 	br	1449c <altera_avalon_jtag_uart_irq+0x28>
}
   1468c:	e037883a 	mov	sp,fp
   14690:	df000017 	ldw	fp,0(sp)
   14694:	dec00104 	addi	sp,sp,4
   14698:	f800283a 	ret

0001469c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1469c:	defffc04 	addi	sp,sp,-16
   146a0:	df000315 	stw	fp,12(sp)
   146a4:	df000304 	addi	fp,sp,12
   146a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   146ac:	e0bfff17 	ldw	r2,-4(fp)
   146b0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   146b4:	e0bffe17 	ldw	r2,-8(fp)
   146b8:	10800017 	ldw	r2,0(r2)
   146bc:	10800104 	addi	r2,r2,4
   146c0:	10800037 	ldwio	r2,0(r2)
   146c4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   146c8:	e0bffd17 	ldw	r2,-12(fp)
   146cc:	1081000c 	andi	r2,r2,1024
   146d0:	1005003a 	cmpeq	r2,r2,zero
   146d4:	10000c1e 	bne	r2,zero,14708 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   146d8:	e0bffe17 	ldw	r2,-8(fp)
   146dc:	10800017 	ldw	r2,0(r2)
   146e0:	11000104 	addi	r4,r2,4
   146e4:	e0bffe17 	ldw	r2,-8(fp)
   146e8:	10800817 	ldw	r2,32(r2)
   146ec:	10810014 	ori	r2,r2,1024
   146f0:	1007883a 	mov	r3,r2
   146f4:	2005883a 	mov	r2,r4
   146f8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   146fc:	e0bffe17 	ldw	r2,-8(fp)
   14700:	10000915 	stw	zero,36(r2)
   14704:	00000a06 	br	14730 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14708:	e0bffe17 	ldw	r2,-8(fp)
   1470c:	10c00917 	ldw	r3,36(r2)
   14710:	00a00034 	movhi	r2,32768
   14714:	10bfff04 	addi	r2,r2,-4
   14718:	10c00536 	bltu	r2,r3,14730 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   1471c:	e0bffe17 	ldw	r2,-8(fp)
   14720:	10800917 	ldw	r2,36(r2)
   14724:	10c00044 	addi	r3,r2,1
   14728:	e0bffe17 	ldw	r2,-8(fp)
   1472c:	10c00915 	stw	r3,36(r2)
   14730:	00800234 	movhi	r2,8
   14734:	10ae1e04 	addi	r2,r2,-18312
   14738:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1473c:	e037883a 	mov	sp,fp
   14740:	df000017 	ldw	fp,0(sp)
   14744:	dec00104 	addi	sp,sp,4
   14748:	f800283a 	ret

0001474c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1474c:	defffc04 	addi	sp,sp,-16
   14750:	df000315 	stw	fp,12(sp)
   14754:	df000304 	addi	fp,sp,12
   14758:	e13ffd15 	stw	r4,-12(fp)
   1475c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14760:	00000706 	br	14780 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   14764:	e0bffe17 	ldw	r2,-8(fp)
   14768:	1090000c 	andi	r2,r2,16384
   1476c:	1005003a 	cmpeq	r2,r2,zero
   14770:	1000031e 	bne	r2,zero,14780 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   14774:	00bffd44 	movi	r2,-11
   14778:	e0bfff15 	stw	r2,-4(fp)
   1477c:	00000b06 	br	147ac <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14780:	e0bffd17 	ldw	r2,-12(fp)
   14784:	10c00d17 	ldw	r3,52(r2)
   14788:	e0bffd17 	ldw	r2,-12(fp)
   1478c:	10800c17 	ldw	r2,48(r2)
   14790:	18800526 	beq	r3,r2,147a8 <altera_avalon_jtag_uart_close+0x5c>
   14794:	e0bffd17 	ldw	r2,-12(fp)
   14798:	10c00917 	ldw	r3,36(r2)
   1479c:	e0bffd17 	ldw	r2,-12(fp)
   147a0:	10800117 	ldw	r2,4(r2)
   147a4:	18bfef36 	bltu	r3,r2,14764 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   147a8:	e03fff15 	stw	zero,-4(fp)
   147ac:	e0bfff17 	ldw	r2,-4(fp)
}
   147b0:	e037883a 	mov	sp,fp
   147b4:	df000017 	ldw	fp,0(sp)
   147b8:	dec00104 	addi	sp,sp,4
   147bc:	f800283a 	ret

000147c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   147c0:	defff804 	addi	sp,sp,-32
   147c4:	df000715 	stw	fp,28(sp)
   147c8:	df000704 	addi	fp,sp,28
   147cc:	e13ffb15 	stw	r4,-20(fp)
   147d0:	e17ffc15 	stw	r5,-16(fp)
   147d4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   147d8:	00bff9c4 	movi	r2,-25
   147dc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   147e0:	e0bffc17 	ldw	r2,-16(fp)
   147e4:	e0bfff15 	stw	r2,-4(fp)
   147e8:	e0ffff17 	ldw	r3,-4(fp)
   147ec:	189a8060 	cmpeqi	r2,r3,27137
   147f0:	1000041e 	bne	r2,zero,14804 <altera_avalon_jtag_uart_ioctl+0x44>
   147f4:	e0ffff17 	ldw	r3,-4(fp)
   147f8:	189a80a0 	cmpeqi	r2,r3,27138
   147fc:	10001b1e 	bne	r2,zero,1486c <altera_avalon_jtag_uart_ioctl+0xac>
   14800:	00002706 	br	148a0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14804:	e0bffb17 	ldw	r2,-20(fp)
   14808:	10c00117 	ldw	r3,4(r2)
   1480c:	00a00034 	movhi	r2,32768
   14810:	10bfffc4 	addi	r2,r2,-1
   14814:	18802226 	beq	r3,r2,148a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   14818:	e0bffd17 	ldw	r2,-12(fp)
   1481c:	10800017 	ldw	r2,0(r2)
   14820:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14824:	e0bff917 	ldw	r2,-28(fp)
   14828:	10800090 	cmplti	r2,r2,2
   1482c:	1000071e 	bne	r2,zero,1484c <altera_avalon_jtag_uart_ioctl+0x8c>
   14830:	e0fff917 	ldw	r3,-28(fp)
   14834:	00a00034 	movhi	r2,32768
   14838:	10bfffc4 	addi	r2,r2,-1
   1483c:	18800326 	beq	r3,r2,1484c <altera_avalon_jtag_uart_ioctl+0x8c>
   14840:	e0bff917 	ldw	r2,-28(fp)
   14844:	e0bffe15 	stw	r2,-8(fp)
   14848:	00000306 	br	14858 <altera_avalon_jtag_uart_ioctl+0x98>
   1484c:	00e00034 	movhi	r3,32768
   14850:	18ffff84 	addi	r3,r3,-2
   14854:	e0fffe15 	stw	r3,-8(fp)
   14858:	e0bffb17 	ldw	r2,-20(fp)
   1485c:	e0fffe17 	ldw	r3,-8(fp)
   14860:	10c00115 	stw	r3,4(r2)
      rc = 0;
   14864:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   14868:	00000d06 	br	148a0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1486c:	e0bffb17 	ldw	r2,-20(fp)
   14870:	10c00117 	ldw	r3,4(r2)
   14874:	00a00034 	movhi	r2,32768
   14878:	10bfffc4 	addi	r2,r2,-1
   1487c:	18800826 	beq	r3,r2,148a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14880:	e13ffd17 	ldw	r4,-12(fp)
   14884:	e0bffb17 	ldw	r2,-20(fp)
   14888:	10c00917 	ldw	r3,36(r2)
   1488c:	e0bffb17 	ldw	r2,-20(fp)
   14890:	10800117 	ldw	r2,4(r2)
   14894:	1885803a 	cmpltu	r2,r3,r2
   14898:	20800015 	stw	r2,0(r4)
      rc = 0;
   1489c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   148a0:	e0bffa17 	ldw	r2,-24(fp)
}
   148a4:	e037883a 	mov	sp,fp
   148a8:	df000017 	ldw	fp,0(sp)
   148ac:	dec00104 	addi	sp,sp,4
   148b0:	f800283a 	ret

000148b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   148b4:	defff204 	addi	sp,sp,-56
   148b8:	dfc00d15 	stw	ra,52(sp)
   148bc:	df000c15 	stw	fp,48(sp)
   148c0:	df000c04 	addi	fp,sp,48
   148c4:	e13ffb15 	stw	r4,-20(fp)
   148c8:	e17ffc15 	stw	r5,-16(fp)
   148cc:	e1bffd15 	stw	r6,-12(fp)
   148d0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   148d4:	e0bffc17 	ldw	r2,-16(fp)
   148d8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   148dc:	00004806 	br	14a00 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   148e0:	e0bffb17 	ldw	r2,-20(fp)
   148e4:	10800a17 	ldw	r2,40(r2)
   148e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   148ec:	e0bffb17 	ldw	r2,-20(fp)
   148f0:	10800b17 	ldw	r2,44(r2)
   148f4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   148f8:	e0fff717 	ldw	r3,-36(fp)
   148fc:	e0bff617 	ldw	r2,-40(fp)
   14900:	18800536 	bltu	r3,r2,14918 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14904:	e0bff717 	ldw	r2,-36(fp)
   14908:	e0fff617 	ldw	r3,-40(fp)
   1490c:	10c5c83a 	sub	r2,r2,r3
   14910:	e0bff815 	stw	r2,-32(fp)
   14914:	00000406 	br	14928 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14918:	00820004 	movi	r2,2048
   1491c:	e0fff617 	ldw	r3,-40(fp)
   14920:	10c5c83a 	sub	r2,r2,r3
   14924:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   14928:	e0bff817 	ldw	r2,-32(fp)
   1492c:	1005003a 	cmpeq	r2,r2,zero
   14930:	10001f1e 	bne	r2,zero,149b0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   14934:	e0fffd17 	ldw	r3,-12(fp)
   14938:	e0bff817 	ldw	r2,-32(fp)
   1493c:	1880022e 	bgeu	r3,r2,14948 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   14940:	e0bffd17 	ldw	r2,-12(fp)
   14944:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14948:	e0bffb17 	ldw	r2,-20(fp)
   1494c:	10c00e04 	addi	r3,r2,56
   14950:	e0bff617 	ldw	r2,-40(fp)
   14954:	1887883a 	add	r3,r3,r2
   14958:	e0bffa17 	ldw	r2,-24(fp)
   1495c:	1009883a 	mov	r4,r2
   14960:	180b883a 	mov	r5,r3
   14964:	e1bff817 	ldw	r6,-32(fp)
   14968:	000aebc0 	call	aebc <memcpy>
      ptr   += n;
   1496c:	e0fff817 	ldw	r3,-32(fp)
   14970:	e0bffa17 	ldw	r2,-24(fp)
   14974:	10c5883a 	add	r2,r2,r3
   14978:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   1497c:	e0fffd17 	ldw	r3,-12(fp)
   14980:	e0bff817 	ldw	r2,-32(fp)
   14984:	1885c83a 	sub	r2,r3,r2
   14988:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1498c:	e0fff617 	ldw	r3,-40(fp)
   14990:	e0bff817 	ldw	r2,-32(fp)
   14994:	1885883a 	add	r2,r3,r2
   14998:	10c1ffcc 	andi	r3,r2,2047
   1499c:	e0bffb17 	ldw	r2,-20(fp)
   149a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   149a4:	e0bffd17 	ldw	r2,-12(fp)
   149a8:	10800048 	cmpgei	r2,r2,1
   149ac:	103fcc1e 	bne	r2,zero,148e0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   149b0:	e0fffa17 	ldw	r3,-24(fp)
   149b4:	e0bffc17 	ldw	r2,-16(fp)
   149b8:	1880141e 	bne	r3,r2,14a0c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   149bc:	e0bffe17 	ldw	r2,-8(fp)
   149c0:	1090000c 	andi	r2,r2,16384
   149c4:	1004c03a 	cmpne	r2,r2,zero
   149c8:	1000101e 	bne	r2,zero,14a0c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   149cc:	e0bffb17 	ldw	r2,-20(fp)
   149d0:	10c00a17 	ldw	r3,40(r2)
   149d4:	e0bff717 	ldw	r2,-36(fp)
   149d8:	1880051e 	bne	r3,r2,149f0 <altera_avalon_jtag_uart_read+0x13c>
   149dc:	e0bffb17 	ldw	r2,-20(fp)
   149e0:	10c00917 	ldw	r3,36(r2)
   149e4:	e0bffb17 	ldw	r2,-20(fp)
   149e8:	10800117 	ldw	r2,4(r2)
   149ec:	18bff736 	bltu	r3,r2,149cc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   149f0:	e0bffb17 	ldw	r2,-20(fp)
   149f4:	10c00a17 	ldw	r3,40(r2)
   149f8:	e0bff717 	ldw	r2,-36(fp)
   149fc:	18800326 	beq	r3,r2,14a0c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14a00:	e0bffd17 	ldw	r2,-12(fp)
   14a04:	10800048 	cmpgei	r2,r2,1
   14a08:	103fb51e 	bne	r2,zero,148e0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14a0c:	e0fffa17 	ldw	r3,-24(fp)
   14a10:	e0bffc17 	ldw	r2,-16(fp)
   14a14:	18801926 	beq	r3,r2,14a7c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a18:	0005303a 	rdctl	r2,status
   14a1c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a20:	e0fff517 	ldw	r3,-44(fp)
   14a24:	00bfff84 	movi	r2,-2
   14a28:	1884703a 	and	r2,r3,r2
   14a2c:	1001703a 	wrctl	status,r2
  
  return context;
   14a30:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14a34:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14a38:	e0bffb17 	ldw	r2,-20(fp)
   14a3c:	10800817 	ldw	r2,32(r2)
   14a40:	10c00054 	ori	r3,r2,1
   14a44:	e0bffb17 	ldw	r2,-20(fp)
   14a48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14a4c:	e0bffb17 	ldw	r2,-20(fp)
   14a50:	10800017 	ldw	r2,0(r2)
   14a54:	11000104 	addi	r4,r2,4
   14a58:	e0bffb17 	ldw	r2,-20(fp)
   14a5c:	10800817 	ldw	r2,32(r2)
   14a60:	1007883a 	mov	r3,r2
   14a64:	2005883a 	mov	r2,r4
   14a68:	10c00035 	stwio	r3,0(r2)
   14a6c:	e0bff917 	ldw	r2,-28(fp)
   14a70:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a74:	e0bff417 	ldw	r2,-48(fp)
   14a78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14a7c:	e0fffa17 	ldw	r3,-24(fp)
   14a80:	e0bffc17 	ldw	r2,-16(fp)
   14a84:	18800526 	beq	r3,r2,14a9c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   14a88:	e0fffa17 	ldw	r3,-24(fp)
   14a8c:	e0bffc17 	ldw	r2,-16(fp)
   14a90:	1887c83a 	sub	r3,r3,r2
   14a94:	e0ffff15 	stw	r3,-4(fp)
   14a98:	00000906 	br	14ac0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   14a9c:	e0bffe17 	ldw	r2,-8(fp)
   14aa0:	1090000c 	andi	r2,r2,16384
   14aa4:	1005003a 	cmpeq	r2,r2,zero
   14aa8:	1000031e 	bne	r2,zero,14ab8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14aac:	00bffd44 	movi	r2,-11
   14ab0:	e0bfff15 	stw	r2,-4(fp)
   14ab4:	00000206 	br	14ac0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   14ab8:	00bffec4 	movi	r2,-5
   14abc:	e0bfff15 	stw	r2,-4(fp)
   14ac0:	e0bfff17 	ldw	r2,-4(fp)
}
   14ac4:	e037883a 	mov	sp,fp
   14ac8:	dfc00117 	ldw	ra,4(sp)
   14acc:	df000017 	ldw	fp,0(sp)
   14ad0:	dec00204 	addi	sp,sp,8
   14ad4:	f800283a 	ret

00014ad8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14ad8:	defff204 	addi	sp,sp,-56
   14adc:	dfc00d15 	stw	ra,52(sp)
   14ae0:	df000c15 	stw	fp,48(sp)
   14ae4:	df000c04 	addi	fp,sp,48
   14ae8:	e13ffb15 	stw	r4,-20(fp)
   14aec:	e17ffc15 	stw	r5,-16(fp)
   14af0:	e1bffd15 	stw	r6,-12(fp)
   14af4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14af8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14afc:	e0bffc17 	ldw	r2,-16(fp)
   14b00:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14b04:	00003a06 	br	14bf0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14b08:	e0bffb17 	ldw	r2,-20(fp)
   14b0c:	10800c17 	ldw	r2,48(r2)
   14b10:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   14b14:	e0bffb17 	ldw	r2,-20(fp)
   14b18:	10800d17 	ldw	r2,52(r2)
   14b1c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   14b20:	e0fffa17 	ldw	r3,-24(fp)
   14b24:	e0bff917 	ldw	r2,-28(fp)
   14b28:	1880062e 	bgeu	r3,r2,14b44 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14b2c:	e0fff917 	ldw	r3,-28(fp)
   14b30:	e0bffa17 	ldw	r2,-24(fp)
   14b34:	1885c83a 	sub	r2,r3,r2
   14b38:	10bfffc4 	addi	r2,r2,-1
   14b3c:	e0bff815 	stw	r2,-32(fp)
   14b40:	00000c06 	br	14b74 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   14b44:	e0bff917 	ldw	r2,-28(fp)
   14b48:	1005003a 	cmpeq	r2,r2,zero
   14b4c:	1000051e 	bne	r2,zero,14b64 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14b50:	00820004 	movi	r2,2048
   14b54:	e0fffa17 	ldw	r3,-24(fp)
   14b58:	10c5c83a 	sub	r2,r2,r3
   14b5c:	e0bff815 	stw	r2,-32(fp)
   14b60:	00000406 	br	14b74 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14b64:	0081ffc4 	movi	r2,2047
   14b68:	e0fffa17 	ldw	r3,-24(fp)
   14b6c:	10c5c83a 	sub	r2,r2,r3
   14b70:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   14b74:	e0bff817 	ldw	r2,-32(fp)
   14b78:	1005003a 	cmpeq	r2,r2,zero
   14b7c:	10001f1e 	bne	r2,zero,14bfc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   14b80:	e0fffd17 	ldw	r3,-12(fp)
   14b84:	e0bff817 	ldw	r2,-32(fp)
   14b88:	1880022e 	bgeu	r3,r2,14b94 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   14b8c:	e0bffd17 	ldw	r2,-12(fp)
   14b90:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14b94:	e0bffb17 	ldw	r2,-20(fp)
   14b98:	10c20e04 	addi	r3,r2,2104
   14b9c:	e0bffa17 	ldw	r2,-24(fp)
   14ba0:	1885883a 	add	r2,r3,r2
   14ba4:	e0fffc17 	ldw	r3,-16(fp)
   14ba8:	1009883a 	mov	r4,r2
   14bac:	180b883a 	mov	r5,r3
   14bb0:	e1bff817 	ldw	r6,-32(fp)
   14bb4:	000aebc0 	call	aebc <memcpy>
      ptr   += n;
   14bb8:	e0fff817 	ldw	r3,-32(fp)
   14bbc:	e0bffc17 	ldw	r2,-16(fp)
   14bc0:	10c5883a 	add	r2,r2,r3
   14bc4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   14bc8:	e0fffd17 	ldw	r3,-12(fp)
   14bcc:	e0bff817 	ldw	r2,-32(fp)
   14bd0:	1885c83a 	sub	r2,r3,r2
   14bd4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14bd8:	e0fffa17 	ldw	r3,-24(fp)
   14bdc:	e0bff817 	ldw	r2,-32(fp)
   14be0:	1885883a 	add	r2,r3,r2
   14be4:	10c1ffcc 	andi	r3,r2,2047
   14be8:	e0bffb17 	ldw	r2,-20(fp)
   14bec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14bf0:	e0bffd17 	ldw	r2,-12(fp)
   14bf4:	10800048 	cmpgei	r2,r2,1
   14bf8:	103fc31e 	bne	r2,zero,14b08 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14bfc:	0005303a 	rdctl	r2,status
   14c00:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c04:	e0fff517 	ldw	r3,-44(fp)
   14c08:	00bfff84 	movi	r2,-2
   14c0c:	1884703a 	and	r2,r3,r2
   14c10:	1001703a 	wrctl	status,r2
  
  return context;
   14c14:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14c18:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14c1c:	e0bffb17 	ldw	r2,-20(fp)
   14c20:	10800817 	ldw	r2,32(r2)
   14c24:	10c00094 	ori	r3,r2,2
   14c28:	e0bffb17 	ldw	r2,-20(fp)
   14c2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14c30:	e0bffb17 	ldw	r2,-20(fp)
   14c34:	10800017 	ldw	r2,0(r2)
   14c38:	11000104 	addi	r4,r2,4
   14c3c:	e0bffb17 	ldw	r2,-20(fp)
   14c40:	10800817 	ldw	r2,32(r2)
   14c44:	1007883a 	mov	r3,r2
   14c48:	2005883a 	mov	r2,r4
   14c4c:	10c00035 	stwio	r3,0(r2)
   14c50:	e0bff717 	ldw	r2,-36(fp)
   14c54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c58:	e0bff417 	ldw	r2,-48(fp)
   14c5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14c60:	e0bffd17 	ldw	r2,-12(fp)
   14c64:	10800050 	cmplti	r2,r2,1
   14c68:	1000111e 	bne	r2,zero,14cb0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   14c6c:	e0bffe17 	ldw	r2,-8(fp)
   14c70:	1090000c 	andi	r2,r2,16384
   14c74:	1004c03a 	cmpne	r2,r2,zero
   14c78:	1000101e 	bne	r2,zero,14cbc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14c7c:	e0bffb17 	ldw	r2,-20(fp)
   14c80:	10c00d17 	ldw	r3,52(r2)
   14c84:	e0bff917 	ldw	r2,-28(fp)
   14c88:	1880051e 	bne	r3,r2,14ca0 <altera_avalon_jtag_uart_write+0x1c8>
   14c8c:	e0bffb17 	ldw	r2,-20(fp)
   14c90:	10c00917 	ldw	r3,36(r2)
   14c94:	e0bffb17 	ldw	r2,-20(fp)
   14c98:	10800117 	ldw	r2,4(r2)
   14c9c:	18bff736 	bltu	r3,r2,14c7c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   14ca0:	e0bffb17 	ldw	r2,-20(fp)
   14ca4:	10c00d17 	ldw	r3,52(r2)
   14ca8:	e0bff917 	ldw	r2,-28(fp)
   14cac:	18800326 	beq	r3,r2,14cbc <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   14cb0:	e0bffd17 	ldw	r2,-12(fp)
   14cb4:	10800048 	cmpgei	r2,r2,1
   14cb8:	103fcd1e 	bne	r2,zero,14bf0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14cbc:	e0fffc17 	ldw	r3,-16(fp)
   14cc0:	e0bff617 	ldw	r2,-40(fp)
   14cc4:	18800526 	beq	r3,r2,14cdc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   14cc8:	e0fffc17 	ldw	r3,-16(fp)
   14ccc:	e0bff617 	ldw	r2,-40(fp)
   14cd0:	1887c83a 	sub	r3,r3,r2
   14cd4:	e0ffff15 	stw	r3,-4(fp)
   14cd8:	00000906 	br	14d00 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   14cdc:	e0bffe17 	ldw	r2,-8(fp)
   14ce0:	1090000c 	andi	r2,r2,16384
   14ce4:	1005003a 	cmpeq	r2,r2,zero
   14ce8:	1000031e 	bne	r2,zero,14cf8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   14cec:	00bffd44 	movi	r2,-11
   14cf0:	e0bfff15 	stw	r2,-4(fp)
   14cf4:	00000206 	br	14d00 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   14cf8:	00bffec4 	movi	r2,-5
   14cfc:	e0bfff15 	stw	r2,-4(fp)
   14d00:	e0bfff17 	ldw	r2,-4(fp)
}
   14d04:	e037883a 	mov	sp,fp
   14d08:	dfc00117 	ldw	ra,4(sp)
   14d0c:	df000017 	ldw	fp,0(sp)
   14d10:	dec00204 	addi	sp,sp,8
   14d14:	f800283a 	ret

00014d18 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14d18:	defffa04 	addi	sp,sp,-24
   14d1c:	dfc00515 	stw	ra,20(sp)
   14d20:	df000415 	stw	fp,16(sp)
   14d24:	df000404 	addi	fp,sp,16
   14d28:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   14d2c:	e0bfff17 	ldw	r2,-4(fp)
   14d30:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   14d34:	e0bfff17 	ldw	r2,-4(fp)
   14d38:	10800104 	addi	r2,r2,4
   14d3c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d40:	0005303a 	rdctl	r2,status
   14d44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d48:	e0fffd17 	ldw	r3,-12(fp)
   14d4c:	00bfff84 	movi	r2,-2
   14d50:	1884703a 	and	r2,r3,r2
   14d54:	1001703a 	wrctl	status,r2
  
  return context;
   14d58:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   14d5c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   14d60:	0013ee80 	call	13ee8 <alt_tick>
   14d64:	e0bffe17 	ldw	r2,-8(fp)
   14d68:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d6c:	e0bffc17 	ldw	r2,-16(fp)
   14d70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   14d74:	e037883a 	mov	sp,fp
   14d78:	dfc00117 	ldw	ra,4(sp)
   14d7c:	df000017 	ldw	fp,0(sp)
   14d80:	dec00204 	addi	sp,sp,8
   14d84:	f800283a 	ret

00014d88 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   14d88:	defff804 	addi	sp,sp,-32
   14d8c:	dfc00715 	stw	ra,28(sp)
   14d90:	df000615 	stw	fp,24(sp)
   14d94:	df000604 	addi	fp,sp,24
   14d98:	e13ffc15 	stw	r4,-16(fp)
   14d9c:	e17ffd15 	stw	r5,-12(fp)
   14da0:	e1bffe15 	stw	r6,-8(fp)
   14da4:	e1ffff15 	stw	r7,-4(fp)
   14da8:	e0bfff17 	ldw	r2,-4(fp)
   14dac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14db0:	00800234 	movhi	r2,8
   14db4:	10ae1e04 	addi	r2,r2,-18312
   14db8:	10800017 	ldw	r2,0(r2)
   14dbc:	1004c03a 	cmpne	r2,r2,zero
   14dc0:	1000041e 	bne	r2,zero,14dd4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   14dc4:	00c00234 	movhi	r3,8
   14dc8:	18ee1e04 	addi	r3,r3,-18312
   14dcc:	e0bffb17 	ldw	r2,-20(fp)
   14dd0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14dd4:	e0bffc17 	ldw	r2,-16(fp)
   14dd8:	10800104 	addi	r2,r2,4
   14ddc:	1007883a 	mov	r3,r2
   14de0:	008001c4 	movi	r2,7
   14de4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14de8:	d8000015 	stw	zero,0(sp)
   14dec:	e13ffd17 	ldw	r4,-12(fp)
   14df0:	e17ffe17 	ldw	r5,-8(fp)
   14df4:	01800074 	movhi	r6,1
   14df8:	31934604 	addi	r6,r6,19736
   14dfc:	e1fffc17 	ldw	r7,-16(fp)
   14e00:	00134bc0 	call	134bc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   14e04:	e037883a 	mov	sp,fp
   14e08:	dfc00117 	ldw	ra,4(sp)
   14e0c:	df000017 	ldw	fp,0(sp)
   14e10:	dec00204 	addi	sp,sp,8
   14e14:	f800283a 	ret

00014e18 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14e18:	defff404 	addi	sp,sp,-48
   14e1c:	df000b15 	stw	fp,44(sp)
   14e20:	df000b04 	addi	fp,sp,44
   14e24:	e13ffb15 	stw	r4,-20(fp)
   14e28:	e17ffc15 	stw	r5,-16(fp)
   14e2c:	e1bffd15 	stw	r6,-12(fp)
   14e30:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14e34:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14e38:	00800234 	movhi	r2,8
   14e3c:	10ae1e04 	addi	r2,r2,-18312
   14e40:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   14e44:	1005003a 	cmpeq	r2,r2,zero
   14e48:	1000411e 	bne	r2,zero,14f50 <alt_alarm_start+0x138>
  {
    if (alarm)
   14e4c:	e0bffb17 	ldw	r2,-20(fp)
   14e50:	1005003a 	cmpeq	r2,r2,zero
   14e54:	10003b1e 	bne	r2,zero,14f44 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   14e58:	e0fffb17 	ldw	r3,-20(fp)
   14e5c:	e0bffd17 	ldw	r2,-12(fp)
   14e60:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   14e64:	e0fffb17 	ldw	r3,-20(fp)
   14e68:	e0bffe17 	ldw	r2,-8(fp)
   14e6c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e70:	0005303a 	rdctl	r2,status
   14e74:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e78:	e0fff817 	ldw	r3,-32(fp)
   14e7c:	00bfff84 	movi	r2,-2
   14e80:	1884703a 	and	r2,r3,r2
   14e84:	1001703a 	wrctl	status,r2
  
  return context;
   14e88:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   14e8c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14e90:	00800234 	movhi	r2,8
   14e94:	10ae1f04 	addi	r2,r2,-18308
   14e98:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   14e9c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14ea0:	e0fffc17 	ldw	r3,-16(fp)
   14ea4:	e0bff917 	ldw	r2,-28(fp)
   14ea8:	1885883a 	add	r2,r3,r2
   14eac:	10c00044 	addi	r3,r2,1
   14eb0:	e0bffb17 	ldw	r2,-20(fp)
   14eb4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14eb8:	e0bffb17 	ldw	r2,-20(fp)
   14ebc:	10c00217 	ldw	r3,8(r2)
   14ec0:	e0bff917 	ldw	r2,-28(fp)
   14ec4:	1880042e 	bgeu	r3,r2,14ed8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   14ec8:	e0fffb17 	ldw	r3,-20(fp)
   14ecc:	00800044 	movi	r2,1
   14ed0:	18800405 	stb	r2,16(r3)
   14ed4:	00000206 	br	14ee0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   14ed8:	e0bffb17 	ldw	r2,-20(fp)
   14edc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14ee0:	e0fffb17 	ldw	r3,-20(fp)
   14ee4:	00800234 	movhi	r2,8
   14ee8:	10a08704 	addi	r2,r2,-32228
   14eec:	e0bff615 	stw	r2,-40(fp)
   14ef0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14ef4:	e0fff717 	ldw	r3,-36(fp)
   14ef8:	e0bff617 	ldw	r2,-40(fp)
   14efc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   14f00:	e0bff617 	ldw	r2,-40(fp)
   14f04:	10c00017 	ldw	r3,0(r2)
   14f08:	e0bff717 	ldw	r2,-36(fp)
   14f0c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14f10:	e0bff617 	ldw	r2,-40(fp)
   14f14:	10c00017 	ldw	r3,0(r2)
   14f18:	e0bff717 	ldw	r2,-36(fp)
   14f1c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   14f20:	e0fff617 	ldw	r3,-40(fp)
   14f24:	e0bff717 	ldw	r2,-36(fp)
   14f28:	18800015 	stw	r2,0(r3)
   14f2c:	e0bffa17 	ldw	r2,-24(fp)
   14f30:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f34:	e0bff517 	ldw	r2,-44(fp)
   14f38:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14f3c:	e03fff15 	stw	zero,-4(fp)
   14f40:	00000506 	br	14f58 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   14f44:	00bffa84 	movi	r2,-22
   14f48:	e0bfff15 	stw	r2,-4(fp)
   14f4c:	00000206 	br	14f58 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   14f50:	00bfde84 	movi	r2,-134
   14f54:	e0bfff15 	stw	r2,-4(fp)
   14f58:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   14f5c:	e037883a 	mov	sp,fp
   14f60:	df000017 	ldw	fp,0(sp)
   14f64:	dec00104 	addi	sp,sp,4
   14f68:	f800283a 	ret

00014f6c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   14f6c:	defffa04 	addi	sp,sp,-24
   14f70:	dfc00515 	stw	ra,20(sp)
   14f74:	df000415 	stw	fp,16(sp)
   14f78:	df000404 	addi	fp,sp,16
   14f7c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   14f80:	008000c4 	movi	r2,3
   14f84:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   14f88:	e13ffc17 	ldw	r4,-16(fp)
   14f8c:	014003f4 	movhi	r5,15
   14f90:	29509004 	addi	r5,r5,16960
   14f94:	000a0540 	call	a054 <__mulsi3>
   14f98:	100b883a 	mov	r5,r2
   14f9c:	01017db4 	movhi	r4,1526
   14fa0:	21384004 	addi	r4,r4,-7936
   14fa4:	000a0440 	call	a044 <__udivsi3>
   14fa8:	100b883a 	mov	r5,r2
   14fac:	01200034 	movhi	r4,32768
   14fb0:	213fffc4 	addi	r4,r4,-1
   14fb4:	000a0440 	call	a044 <__udivsi3>
   14fb8:	100b883a 	mov	r5,r2
   14fbc:	e13fff17 	ldw	r4,-4(fp)
   14fc0:	000a0440 	call	a044 <__udivsi3>
   14fc4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   14fc8:	e0bffd17 	ldw	r2,-12(fp)
   14fcc:	1005003a 	cmpeq	r2,r2,zero
   14fd0:	10002a1e 	bne	r2,zero,1507c <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   14fd4:	e03ffe15 	stw	zero,-8(fp)
   14fd8:	00001706 	br	15038 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   14fdc:	00a00034 	movhi	r2,32768
   14fe0:	10bfffc4 	addi	r2,r2,-1
   14fe4:	10bfffc4 	addi	r2,r2,-1
   14fe8:	103ffe1e 	bne	r2,zero,14fe4 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   14fec:	e13ffc17 	ldw	r4,-16(fp)
   14ff0:	014003f4 	movhi	r5,15
   14ff4:	29509004 	addi	r5,r5,16960
   14ff8:	000a0540 	call	a054 <__mulsi3>
   14ffc:	100b883a 	mov	r5,r2
   15000:	01017db4 	movhi	r4,1526
   15004:	21384004 	addi	r4,r4,-7936
   15008:	000a0440 	call	a044 <__udivsi3>
   1500c:	100b883a 	mov	r5,r2
   15010:	01200034 	movhi	r4,32768
   15014:	213fffc4 	addi	r4,r4,-1
   15018:	000a0440 	call	a044 <__udivsi3>
   1501c:	1007883a 	mov	r3,r2
   15020:	e0bfff17 	ldw	r2,-4(fp)
   15024:	10c5c83a 	sub	r2,r2,r3
   15028:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1502c:	e0bffe17 	ldw	r2,-8(fp)
   15030:	10800044 	addi	r2,r2,1
   15034:	e0bffe15 	stw	r2,-8(fp)
   15038:	e0fffe17 	ldw	r3,-8(fp)
   1503c:	e0bffd17 	ldw	r2,-12(fp)
   15040:	18bfe616 	blt	r3,r2,14fdc <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   15044:	e13ffc17 	ldw	r4,-16(fp)
   15048:	014003f4 	movhi	r5,15
   1504c:	29509004 	addi	r5,r5,16960
   15050:	000a0540 	call	a054 <__mulsi3>
   15054:	100b883a 	mov	r5,r2
   15058:	01017db4 	movhi	r4,1526
   1505c:	21384004 	addi	r4,r4,-7936
   15060:	000a0440 	call	a044 <__udivsi3>
   15064:	1009883a 	mov	r4,r2
   15068:	e17fff17 	ldw	r5,-4(fp)
   1506c:	000a0540 	call	a054 <__mulsi3>
   15070:	10bfffc4 	addi	r2,r2,-1
   15074:	103ffe1e 	bne	r2,zero,15070 <alt_busy_sleep+0x104>
   15078:	00000d06 	br	150b0 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1507c:	e13ffc17 	ldw	r4,-16(fp)
   15080:	014003f4 	movhi	r5,15
   15084:	29509004 	addi	r5,r5,16960
   15088:	000a0540 	call	a054 <__mulsi3>
   1508c:	100b883a 	mov	r5,r2
   15090:	01017db4 	movhi	r4,1526
   15094:	21384004 	addi	r4,r4,-7936
   15098:	000a0440 	call	a044 <__udivsi3>
   1509c:	1009883a 	mov	r4,r2
   150a0:	e17fff17 	ldw	r5,-4(fp)
   150a4:	000a0540 	call	a054 <__mulsi3>
   150a8:	10bfffc4 	addi	r2,r2,-1
   150ac:	00bffe16 	blt	zero,r2,150a8 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   150b0:	0005883a 	mov	r2,zero
}
   150b4:	e037883a 	mov	sp,fp
   150b8:	dfc00117 	ldw	ra,4(sp)
   150bc:	df000017 	ldw	fp,0(sp)
   150c0:	dec00204 	addi	sp,sp,8
   150c4:	f800283a 	ret

000150c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   150c8:	defff904 	addi	sp,sp,-28
   150cc:	dfc00615 	stw	ra,24(sp)
   150d0:	df000515 	stw	fp,20(sp)
   150d4:	df000504 	addi	fp,sp,20
   150d8:	e13ffd15 	stw	r4,-12(fp)
   150dc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   150e0:	e0bffd17 	ldw	r2,-12(fp)
   150e4:	1005003a 	cmpeq	r2,r2,zero
   150e8:	1000041e 	bne	r2,zero,150fc <alt_dev_llist_insert+0x34>
   150ec:	e0bffd17 	ldw	r2,-12(fp)
   150f0:	10800217 	ldw	r2,8(r2)
   150f4:	1004c03a 	cmpne	r2,r2,zero
   150f8:	1000071e 	bne	r2,zero,15118 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   150fc:	001517c0 	call	1517c <alt_get_errno>
   15100:	1007883a 	mov	r3,r2
   15104:	00800584 	movi	r2,22
   15108:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1510c:	00bffa84 	movi	r2,-22
   15110:	e0bfff15 	stw	r2,-4(fp)
   15114:	00001306 	br	15164 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   15118:	e0fffd17 	ldw	r3,-12(fp)
   1511c:	e0bffe17 	ldw	r2,-8(fp)
   15120:	e0bffb15 	stw	r2,-20(fp)
   15124:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15128:	e0fffc17 	ldw	r3,-16(fp)
   1512c:	e0bffb17 	ldw	r2,-20(fp)
   15130:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   15134:	e0bffb17 	ldw	r2,-20(fp)
   15138:	10c00017 	ldw	r3,0(r2)
   1513c:	e0bffc17 	ldw	r2,-16(fp)
   15140:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15144:	e0bffb17 	ldw	r2,-20(fp)
   15148:	10c00017 	ldw	r3,0(r2)
   1514c:	e0bffc17 	ldw	r2,-16(fp)
   15150:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   15154:	e0fffb17 	ldw	r3,-20(fp)
   15158:	e0bffc17 	ldw	r2,-16(fp)
   1515c:	18800015 	stw	r2,0(r3)

  return 0;  
   15160:	e03fff15 	stw	zero,-4(fp)
   15164:	e0bfff17 	ldw	r2,-4(fp)
}
   15168:	e037883a 	mov	sp,fp
   1516c:	dfc00117 	ldw	ra,4(sp)
   15170:	df000017 	ldw	fp,0(sp)
   15174:	dec00204 	addi	sp,sp,8
   15178:	f800283a 	ret

0001517c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1517c:	defffd04 	addi	sp,sp,-12
   15180:	dfc00215 	stw	ra,8(sp)
   15184:	df000115 	stw	fp,4(sp)
   15188:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1518c:	00800234 	movhi	r2,8
   15190:	10a08404 	addi	r2,r2,-32240
   15194:	10800017 	ldw	r2,0(r2)
   15198:	1005003a 	cmpeq	r2,r2,zero
   1519c:	1000061e 	bne	r2,zero,151b8 <alt_get_errno+0x3c>
   151a0:	00800234 	movhi	r2,8
   151a4:	10a08404 	addi	r2,r2,-32240
   151a8:	10800017 	ldw	r2,0(r2)
   151ac:	103ee83a 	callr	r2
   151b0:	e0bfff15 	stw	r2,-4(fp)
   151b4:	00000306 	br	151c4 <alt_get_errno+0x48>
   151b8:	00800234 	movhi	r2,8
   151bc:	10ae1604 	addi	r2,r2,-18344
   151c0:	e0bfff15 	stw	r2,-4(fp)
   151c4:	e0bfff17 	ldw	r2,-4(fp)
}
   151c8:	e037883a 	mov	sp,fp
   151cc:	dfc00117 	ldw	ra,4(sp)
   151d0:	df000017 	ldw	fp,0(sp)
   151d4:	dec00204 	addi	sp,sp,8
   151d8:	f800283a 	ret

000151dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   151dc:	defffd04 	addi	sp,sp,-12
   151e0:	dfc00215 	stw	ra,8(sp)
   151e4:	df000115 	stw	fp,4(sp)
   151e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   151ec:	00bfff04 	movi	r2,-4
   151f0:	00c00074 	movhi	r3,1
   151f4:	18d79204 	addi	r3,r3,24136
   151f8:	1885883a 	add	r2,r3,r2
   151fc:	e0bfff15 	stw	r2,-4(fp)
   15200:	00000606 	br	1521c <_do_ctors+0x40>
        (*ctor) (); 
   15204:	e0bfff17 	ldw	r2,-4(fp)
   15208:	10800017 	ldw	r2,0(r2)
   1520c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15210:	e0bfff17 	ldw	r2,-4(fp)
   15214:	10bfff04 	addi	r2,r2,-4
   15218:	e0bfff15 	stw	r2,-4(fp)
   1521c:	e0ffff17 	ldw	r3,-4(fp)
   15220:	00800074 	movhi	r2,1
   15224:	10979104 	addi	r2,r2,24132
   15228:	18bff62e 	bgeu	r3,r2,15204 <_do_ctors+0x28>
        (*ctor) (); 
}
   1522c:	e037883a 	mov	sp,fp
   15230:	dfc00117 	ldw	ra,4(sp)
   15234:	df000017 	ldw	fp,0(sp)
   15238:	dec00204 	addi	sp,sp,8
   1523c:	f800283a 	ret

00015240 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15240:	defffd04 	addi	sp,sp,-12
   15244:	dfc00215 	stw	ra,8(sp)
   15248:	df000115 	stw	fp,4(sp)
   1524c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15250:	00bfff04 	movi	r2,-4
   15254:	00c00074 	movhi	r3,1
   15258:	18d79204 	addi	r3,r3,24136
   1525c:	1885883a 	add	r2,r3,r2
   15260:	e0bfff15 	stw	r2,-4(fp)
   15264:	00000606 	br	15280 <_do_dtors+0x40>
        (*dtor) (); 
   15268:	e0bfff17 	ldw	r2,-4(fp)
   1526c:	10800017 	ldw	r2,0(r2)
   15270:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15274:	e0bfff17 	ldw	r2,-4(fp)
   15278:	10bfff04 	addi	r2,r2,-4
   1527c:	e0bfff15 	stw	r2,-4(fp)
   15280:	e0ffff17 	ldw	r3,-4(fp)
   15284:	00800074 	movhi	r2,1
   15288:	10979204 	addi	r2,r2,24136
   1528c:	18bff62e 	bgeu	r3,r2,15268 <_do_dtors+0x28>
        (*dtor) (); 
}
   15290:	e037883a 	mov	sp,fp
   15294:	dfc00117 	ldw	ra,4(sp)
   15298:	df000017 	ldw	fp,0(sp)
   1529c:	dec00204 	addi	sp,sp,8
   152a0:	f800283a 	ret

000152a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   152a4:	defffe04 	addi	sp,sp,-8
   152a8:	dfc00115 	stw	ra,4(sp)
   152ac:	df000015 	stw	fp,0(sp)
   152b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   152b4:	0009883a 	mov	r4,zero
   152b8:	01440004 	movi	r5,4096
   152bc:	00159ac0 	call	159ac <alt_icache_flush>
#endif
}
   152c0:	e037883a 	mov	sp,fp
   152c4:	dfc00117 	ldw	ra,4(sp)
   152c8:	df000017 	ldw	fp,0(sp)
   152cc:	dec00204 	addi	sp,sp,8
   152d0:	f800283a 	ret

000152d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   152d4:	defff804 	addi	sp,sp,-32
   152d8:	dfc00715 	stw	ra,28(sp)
   152dc:	df000615 	stw	fp,24(sp)
   152e0:	dc000515 	stw	r16,20(sp)
   152e4:	df000504 	addi	fp,sp,20
   152e8:	e13ffc15 	stw	r4,-16(fp)
   152ec:	e17ffd15 	stw	r5,-12(fp)
   152f0:	e1bffe15 	stw	r6,-8(fp)
   152f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   152f8:	e13ffd17 	ldw	r4,-12(fp)
   152fc:	e17ffe17 	ldw	r5,-8(fp)
   15300:	e1bfff17 	ldw	r6,-4(fp)
   15304:	001551c0 	call	1551c <open>
   15308:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1530c:	e0bffb17 	ldw	r2,-20(fp)
   15310:	1004803a 	cmplt	r2,r2,zero
   15314:	10001f1e 	bne	r2,zero,15394 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   15318:	e13ffb17 	ldw	r4,-20(fp)
   1531c:	040001f4 	movhi	r16,7
   15320:	841bfe04 	addi	r16,r16,28664
   15324:	01400304 	movi	r5,12
   15328:	000a0540 	call	a054 <__mulsi3>
   1532c:	1405883a 	add	r2,r2,r16
   15330:	10c00017 	ldw	r3,0(r2)
   15334:	e0bffc17 	ldw	r2,-16(fp)
   15338:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1533c:	e13ffb17 	ldw	r4,-20(fp)
   15340:	040001f4 	movhi	r16,7
   15344:	841bfe04 	addi	r16,r16,28664
   15348:	01400304 	movi	r5,12
   1534c:	000a0540 	call	a054 <__mulsi3>
   15350:	1405883a 	add	r2,r2,r16
   15354:	10800104 	addi	r2,r2,4
   15358:	10c00017 	ldw	r3,0(r2)
   1535c:	e0bffc17 	ldw	r2,-16(fp)
   15360:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   15364:	e13ffb17 	ldw	r4,-20(fp)
   15368:	040001f4 	movhi	r16,7
   1536c:	841bfe04 	addi	r16,r16,28664
   15370:	01400304 	movi	r5,12
   15374:	000a0540 	call	a054 <__mulsi3>
   15378:	1405883a 	add	r2,r2,r16
   1537c:	10800204 	addi	r2,r2,8
   15380:	10c00017 	ldw	r3,0(r2)
   15384:	e0bffc17 	ldw	r2,-16(fp)
   15388:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1538c:	e13ffb17 	ldw	r4,-20(fp)
   15390:	0013d1c0 	call	13d1c <alt_release_fd>
  }
} 
   15394:	e037883a 	mov	sp,fp
   15398:	dfc00217 	ldw	ra,8(sp)
   1539c:	df000117 	ldw	fp,4(sp)
   153a0:	dc000017 	ldw	r16,0(sp)
   153a4:	dec00304 	addi	sp,sp,12
   153a8:	f800283a 	ret

000153ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   153ac:	defffb04 	addi	sp,sp,-20
   153b0:	dfc00415 	stw	ra,16(sp)
   153b4:	df000315 	stw	fp,12(sp)
   153b8:	df000304 	addi	fp,sp,12
   153bc:	e13ffd15 	stw	r4,-12(fp)
   153c0:	e17ffe15 	stw	r5,-8(fp)
   153c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   153c8:	010001f4 	movhi	r4,7
   153cc:	211c0104 	addi	r4,r4,28676
   153d0:	e17ffd17 	ldw	r5,-12(fp)
   153d4:	01800044 	movi	r6,1
   153d8:	01c07fc4 	movi	r7,511
   153dc:	00152d40 	call	152d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   153e0:	010001f4 	movhi	r4,7
   153e4:	211bfe04 	addi	r4,r4,28664
   153e8:	e17ffe17 	ldw	r5,-8(fp)
   153ec:	000d883a 	mov	r6,zero
   153f0:	01c07fc4 	movi	r7,511
   153f4:	00152d40 	call	152d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   153f8:	010001f4 	movhi	r4,7
   153fc:	211c0404 	addi	r4,r4,28688
   15400:	e17fff17 	ldw	r5,-4(fp)
   15404:	01800044 	movi	r6,1
   15408:	01c07fc4 	movi	r7,511
   1540c:	00152d40 	call	152d4 <alt_open_fd>
}  
   15410:	e037883a 	mov	sp,fp
   15414:	dfc00117 	ldw	ra,4(sp)
   15418:	df000017 	ldw	fp,0(sp)
   1541c:	dec00204 	addi	sp,sp,8
   15420:	f800283a 	ret

00015424 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15424:	defffa04 	addi	sp,sp,-24
   15428:	dfc00515 	stw	ra,20(sp)
   1542c:	df000415 	stw	fp,16(sp)
   15430:	dc000315 	stw	r16,12(sp)
   15434:	df000304 	addi	fp,sp,12
   15438:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1543c:	e0bffe17 	ldw	r2,-8(fp)
   15440:	10800217 	ldw	r2,8(r2)
   15444:	10d00034 	orhi	r3,r2,16384
   15448:	e0bffe17 	ldw	r2,-8(fp)
   1544c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15450:	e03ffd15 	stw	zero,-12(fp)
   15454:	00002306 	br	154e4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15458:	e13ffd17 	ldw	r4,-12(fp)
   1545c:	040001f4 	movhi	r16,7
   15460:	841bfe04 	addi	r16,r16,28664
   15464:	01400304 	movi	r5,12
   15468:	000a0540 	call	a054 <__mulsi3>
   1546c:	1405883a 	add	r2,r2,r16
   15470:	10c00017 	ldw	r3,0(r2)
   15474:	e0bffe17 	ldw	r2,-8(fp)
   15478:	10800017 	ldw	r2,0(r2)
   1547c:	1880161e 	bne	r3,r2,154d8 <alt_file_locked+0xb4>
   15480:	e13ffd17 	ldw	r4,-12(fp)
   15484:	040001f4 	movhi	r16,7
   15488:	841bfe04 	addi	r16,r16,28664
   1548c:	01400304 	movi	r5,12
   15490:	000a0540 	call	a054 <__mulsi3>
   15494:	1405883a 	add	r2,r2,r16
   15498:	10800204 	addi	r2,r2,8
   1549c:	10800017 	ldw	r2,0(r2)
   154a0:	1004403a 	cmpge	r2,r2,zero
   154a4:	10000c1e 	bne	r2,zero,154d8 <alt_file_locked+0xb4>
   154a8:	e13ffd17 	ldw	r4,-12(fp)
   154ac:	01400304 	movi	r5,12
   154b0:	000a0540 	call	a054 <__mulsi3>
   154b4:	1007883a 	mov	r3,r2
   154b8:	008001f4 	movhi	r2,7
   154bc:	109bfe04 	addi	r2,r2,28664
   154c0:	1887883a 	add	r3,r3,r2
   154c4:	e0bffe17 	ldw	r2,-8(fp)
   154c8:	18800326 	beq	r3,r2,154d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   154cc:	00bffcc4 	movi	r2,-13
   154d0:	e0bfff15 	stw	r2,-4(fp)
   154d4:	00000a06 	br	15500 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   154d8:	e0bffd17 	ldw	r2,-12(fp)
   154dc:	10800044 	addi	r2,r2,1
   154e0:	e0bffd15 	stw	r2,-12(fp)
   154e4:	00800234 	movhi	r2,8
   154e8:	10a08304 	addi	r2,r2,-32244
   154ec:	10800017 	ldw	r2,0(r2)
   154f0:	1007883a 	mov	r3,r2
   154f4:	e0bffd17 	ldw	r2,-12(fp)
   154f8:	18bfd72e 	bgeu	r3,r2,15458 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   154fc:	e03fff15 	stw	zero,-4(fp)
   15500:	e0bfff17 	ldw	r2,-4(fp)
}
   15504:	e037883a 	mov	sp,fp
   15508:	dfc00217 	ldw	ra,8(sp)
   1550c:	df000117 	ldw	fp,4(sp)
   15510:	dc000017 	ldw	r16,0(sp)
   15514:	dec00304 	addi	sp,sp,12
   15518:	f800283a 	ret

0001551c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1551c:	defff404 	addi	sp,sp,-48
   15520:	dfc00b15 	stw	ra,44(sp)
   15524:	df000a15 	stw	fp,40(sp)
   15528:	df000a04 	addi	fp,sp,40
   1552c:	e13ffb15 	stw	r4,-20(fp)
   15530:	e17ffc15 	stw	r5,-16(fp)
   15534:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15538:	00bfffc4 	movi	r2,-1
   1553c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   15540:	00bffb44 	movi	r2,-19
   15544:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   15548:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1554c:	e13ffb17 	ldw	r4,-20(fp)
   15550:	01400234 	movhi	r5,8
   15554:	29608104 	addi	r5,r5,-32252
   15558:	00157280 	call	15728 <alt_find_dev>
   1555c:	e0bffa15 	stw	r2,-24(fp)
   15560:	e0bffa17 	ldw	r2,-24(fp)
   15564:	1004c03a 	cmpne	r2,r2,zero
   15568:	1000051e 	bne	r2,zero,15580 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1556c:	e13ffb17 	ldw	r4,-20(fp)
   15570:	00157bc0 	call	157bc <alt_find_file>
   15574:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   15578:	00800044 	movi	r2,1
   1557c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15580:	e0bffa17 	ldw	r2,-24(fp)
   15584:	1005003a 	cmpeq	r2,r2,zero
   15588:	1000311e 	bne	r2,zero,15650 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1558c:	e13ffa17 	ldw	r4,-24(fp)
   15590:	00158dc0 	call	158dc <alt_get_fd>
   15594:	e0bff815 	stw	r2,-32(fp)
   15598:	e0bff817 	ldw	r2,-32(fp)
   1559c:	1004403a 	cmpge	r2,r2,zero
   155a0:	1000031e 	bne	r2,zero,155b0 <open+0x94>
    {
      status = index;
   155a4:	e0bff817 	ldw	r2,-32(fp)
   155a8:	e0bff715 	stw	r2,-36(fp)
   155ac:	00002a06 	br	15658 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   155b0:	e13ff817 	ldw	r4,-32(fp)
   155b4:	01400304 	movi	r5,12
   155b8:	000a0540 	call	a054 <__mulsi3>
   155bc:	1007883a 	mov	r3,r2
   155c0:	008001f4 	movhi	r2,7
   155c4:	109bfe04 	addi	r2,r2,28664
   155c8:	1885883a 	add	r2,r3,r2
   155cc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   155d0:	e0fffc17 	ldw	r3,-16(fp)
   155d4:	00900034 	movhi	r2,16384
   155d8:	10bfffc4 	addi	r2,r2,-1
   155dc:	1886703a 	and	r3,r3,r2
   155e0:	e0bff917 	ldw	r2,-28(fp)
   155e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   155e8:	e0bff617 	ldw	r2,-40(fp)
   155ec:	1004c03a 	cmpne	r2,r2,zero
   155f0:	1000061e 	bne	r2,zero,1560c <open+0xf0>
   155f4:	e13ff917 	ldw	r4,-28(fp)
   155f8:	00154240 	call	15424 <alt_file_locked>
   155fc:	e0bff715 	stw	r2,-36(fp)
   15600:	e0bff717 	ldw	r2,-36(fp)
   15604:	1004803a 	cmplt	r2,r2,zero
   15608:	1000131e 	bne	r2,zero,15658 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1560c:	e0bffa17 	ldw	r2,-24(fp)
   15610:	10800317 	ldw	r2,12(r2)
   15614:	1005003a 	cmpeq	r2,r2,zero
   15618:	1000091e 	bne	r2,zero,15640 <open+0x124>
   1561c:	e0bffa17 	ldw	r2,-24(fp)
   15620:	10800317 	ldw	r2,12(r2)
   15624:	e13ff917 	ldw	r4,-28(fp)
   15628:	e17ffb17 	ldw	r5,-20(fp)
   1562c:	e1bffc17 	ldw	r6,-16(fp)
   15630:	e1fffd17 	ldw	r7,-12(fp)
   15634:	103ee83a 	callr	r2
   15638:	e0bfff15 	stw	r2,-4(fp)
   1563c:	00000106 	br	15644 <open+0x128>
   15640:	e03fff15 	stw	zero,-4(fp)
   15644:	e0bfff17 	ldw	r2,-4(fp)
   15648:	e0bff715 	stw	r2,-36(fp)
   1564c:	00000206 	br	15658 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15650:	00bffb44 	movi	r2,-19
   15654:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15658:	e0bff717 	ldw	r2,-36(fp)
   1565c:	1004403a 	cmpge	r2,r2,zero
   15660:	1000091e 	bne	r2,zero,15688 <open+0x16c>
  {
    alt_release_fd (index);  
   15664:	e13ff817 	ldw	r4,-32(fp)
   15668:	0013d1c0 	call	13d1c <alt_release_fd>
    ALT_ERRNO = -status;
   1566c:	00156a80 	call	156a8 <alt_get_errno>
   15670:	e0fff717 	ldw	r3,-36(fp)
   15674:	00c7c83a 	sub	r3,zero,r3
   15678:	10c00015 	stw	r3,0(r2)
    return -1;
   1567c:	00bfffc4 	movi	r2,-1
   15680:	e0bffe15 	stw	r2,-8(fp)
   15684:	00000206 	br	15690 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   15688:	e0bff817 	ldw	r2,-32(fp)
   1568c:	e0bffe15 	stw	r2,-8(fp)
   15690:	e0bffe17 	ldw	r2,-8(fp)
}
   15694:	e037883a 	mov	sp,fp
   15698:	dfc00117 	ldw	ra,4(sp)
   1569c:	df000017 	ldw	fp,0(sp)
   156a0:	dec00204 	addi	sp,sp,8
   156a4:	f800283a 	ret

000156a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   156a8:	defffd04 	addi	sp,sp,-12
   156ac:	dfc00215 	stw	ra,8(sp)
   156b0:	df000115 	stw	fp,4(sp)
   156b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   156b8:	00800234 	movhi	r2,8
   156bc:	10a08404 	addi	r2,r2,-32240
   156c0:	10800017 	ldw	r2,0(r2)
   156c4:	1005003a 	cmpeq	r2,r2,zero
   156c8:	1000061e 	bne	r2,zero,156e4 <alt_get_errno+0x3c>
   156cc:	00800234 	movhi	r2,8
   156d0:	10a08404 	addi	r2,r2,-32240
   156d4:	10800017 	ldw	r2,0(r2)
   156d8:	103ee83a 	callr	r2
   156dc:	e0bfff15 	stw	r2,-4(fp)
   156e0:	00000306 	br	156f0 <alt_get_errno+0x48>
   156e4:	00800234 	movhi	r2,8
   156e8:	10ae1604 	addi	r2,r2,-18344
   156ec:	e0bfff15 	stw	r2,-4(fp)
   156f0:	e0bfff17 	ldw	r2,-4(fp)
}
   156f4:	e037883a 	mov	sp,fp
   156f8:	dfc00117 	ldw	ra,4(sp)
   156fc:	df000017 	ldw	fp,0(sp)
   15700:	dec00204 	addi	sp,sp,8
   15704:	f800283a 	ret

00015708 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   15708:	deffff04 	addi	sp,sp,-4
   1570c:	df000015 	stw	fp,0(sp)
   15710:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15714:	000170fa 	wrctl	ienable,zero
}
   15718:	e037883a 	mov	sp,fp
   1571c:	df000017 	ldw	fp,0(sp)
   15720:	dec00104 	addi	sp,sp,4
   15724:	f800283a 	ret

00015728 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15728:	defff904 	addi	sp,sp,-28
   1572c:	dfc00615 	stw	ra,24(sp)
   15730:	df000515 	stw	fp,20(sp)
   15734:	df000504 	addi	fp,sp,20
   15738:	e13ffd15 	stw	r4,-12(fp)
   1573c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15740:	e0bffe17 	ldw	r2,-8(fp)
   15744:	10800017 	ldw	r2,0(r2)
   15748:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1574c:	e13ffd17 	ldw	r4,-12(fp)
   15750:	000b3140 	call	b314 <strlen>
   15754:	10800044 	addi	r2,r2,1
   15758:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1575c:	00000d06 	br	15794 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15760:	e0bffc17 	ldw	r2,-16(fp)
   15764:	11000217 	ldw	r4,8(r2)
   15768:	e1bffb17 	ldw	r6,-20(fp)
   1576c:	e17ffd17 	ldw	r5,-12(fp)
   15770:	0015a880 	call	15a88 <memcmp>
   15774:	1004c03a 	cmpne	r2,r2,zero
   15778:	1000031e 	bne	r2,zero,15788 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1577c:	e0bffc17 	ldw	r2,-16(fp)
   15780:	e0bfff15 	stw	r2,-4(fp)
   15784:	00000706 	br	157a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15788:	e0bffc17 	ldw	r2,-16(fp)
   1578c:	10800017 	ldw	r2,0(r2)
   15790:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15794:	e0fffe17 	ldw	r3,-8(fp)
   15798:	e0bffc17 	ldw	r2,-16(fp)
   1579c:	10fff01e 	bne	r2,r3,15760 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   157a0:	e03fff15 	stw	zero,-4(fp)
   157a4:	e0bfff17 	ldw	r2,-4(fp)
}
   157a8:	e037883a 	mov	sp,fp
   157ac:	dfc00117 	ldw	ra,4(sp)
   157b0:	df000017 	ldw	fp,0(sp)
   157b4:	dec00204 	addi	sp,sp,8
   157b8:	f800283a 	ret

000157bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   157bc:	defffa04 	addi	sp,sp,-24
   157c0:	dfc00515 	stw	ra,20(sp)
   157c4:	df000415 	stw	fp,16(sp)
   157c8:	df000404 	addi	fp,sp,16
   157cc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   157d0:	00800234 	movhi	r2,8
   157d4:	10a07f04 	addi	r2,r2,-32260
   157d8:	10800017 	ldw	r2,0(r2)
   157dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   157e0:	00003306 	br	158b0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   157e4:	e0bffd17 	ldw	r2,-12(fp)
   157e8:	11000217 	ldw	r4,8(r2)
   157ec:	000b3140 	call	b314 <strlen>
   157f0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   157f4:	e0bffd17 	ldw	r2,-12(fp)
   157f8:	10c00217 	ldw	r3,8(r2)
   157fc:	e0bffc17 	ldw	r2,-16(fp)
   15800:	1885883a 	add	r2,r3,r2
   15804:	10bfffc4 	addi	r2,r2,-1
   15808:	10800003 	ldbu	r2,0(r2)
   1580c:	10803fcc 	andi	r2,r2,255
   15810:	1080201c 	xori	r2,r2,128
   15814:	10bfe004 	addi	r2,r2,-128
   15818:	10800bd8 	cmpnei	r2,r2,47
   1581c:	1000031e 	bne	r2,zero,1582c <alt_find_file+0x70>
    {
      len -= 1;
   15820:	e0bffc17 	ldw	r2,-16(fp)
   15824:	10bfffc4 	addi	r2,r2,-1
   15828:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1582c:	e0bffc17 	ldw	r2,-16(fp)
   15830:	1007883a 	mov	r3,r2
   15834:	e0bffe17 	ldw	r2,-8(fp)
   15838:	1885883a 	add	r2,r3,r2
   1583c:	10800003 	ldbu	r2,0(r2)
   15840:	10803fcc 	andi	r2,r2,255
   15844:	1080201c 	xori	r2,r2,128
   15848:	10bfe004 	addi	r2,r2,-128
   1584c:	10800be0 	cmpeqi	r2,r2,47
   15850:	10000a1e 	bne	r2,zero,1587c <alt_find_file+0xc0>
   15854:	e0bffc17 	ldw	r2,-16(fp)
   15858:	1007883a 	mov	r3,r2
   1585c:	e0bffe17 	ldw	r2,-8(fp)
   15860:	1885883a 	add	r2,r3,r2
   15864:	10800003 	ldbu	r2,0(r2)
   15868:	10803fcc 	andi	r2,r2,255
   1586c:	1080201c 	xori	r2,r2,128
   15870:	10bfe004 	addi	r2,r2,-128
   15874:	1004c03a 	cmpne	r2,r2,zero
   15878:	10000a1e 	bne	r2,zero,158a4 <alt_find_file+0xe8>
   1587c:	e0bffd17 	ldw	r2,-12(fp)
   15880:	11000217 	ldw	r4,8(r2)
   15884:	e1bffc17 	ldw	r6,-16(fp)
   15888:	e17ffe17 	ldw	r5,-8(fp)
   1588c:	0015a880 	call	15a88 <memcmp>
   15890:	1004c03a 	cmpne	r2,r2,zero
   15894:	1000031e 	bne	r2,zero,158a4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15898:	e0bffd17 	ldw	r2,-12(fp)
   1589c:	e0bfff15 	stw	r2,-4(fp)
   158a0:	00000806 	br	158c4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   158a4:	e0bffd17 	ldw	r2,-12(fp)
   158a8:	10800017 	ldw	r2,0(r2)
   158ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   158b0:	00c00234 	movhi	r3,8
   158b4:	18e07f04 	addi	r3,r3,-32260
   158b8:	e0bffd17 	ldw	r2,-12(fp)
   158bc:	10ffc91e 	bne	r2,r3,157e4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   158c0:	e03fff15 	stw	zero,-4(fp)
   158c4:	e0bfff17 	ldw	r2,-4(fp)
}
   158c8:	e037883a 	mov	sp,fp
   158cc:	dfc00117 	ldw	ra,4(sp)
   158d0:	df000017 	ldw	fp,0(sp)
   158d4:	dec00204 	addi	sp,sp,8
   158d8:	f800283a 	ret

000158dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   158dc:	defffa04 	addi	sp,sp,-24
   158e0:	dfc00515 	stw	ra,20(sp)
   158e4:	df000415 	stw	fp,16(sp)
   158e8:	dc000315 	stw	r16,12(sp)
   158ec:	df000304 	addi	fp,sp,12
   158f0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   158f4:	00bffa04 	movi	r2,-24
   158f8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   158fc:	e03ffe15 	stw	zero,-8(fp)
   15900:	00002006 	br	15984 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   15904:	e13ffe17 	ldw	r4,-8(fp)
   15908:	040001f4 	movhi	r16,7
   1590c:	841bfe04 	addi	r16,r16,28664
   15910:	01400304 	movi	r5,12
   15914:	000a0540 	call	a054 <__mulsi3>
   15918:	1405883a 	add	r2,r2,r16
   1591c:	10800017 	ldw	r2,0(r2)
   15920:	1004c03a 	cmpne	r2,r2,zero
   15924:	1000141e 	bne	r2,zero,15978 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   15928:	e13ffe17 	ldw	r4,-8(fp)
   1592c:	040001f4 	movhi	r16,7
   15930:	841bfe04 	addi	r16,r16,28664
   15934:	01400304 	movi	r5,12
   15938:	000a0540 	call	a054 <__mulsi3>
   1593c:	1407883a 	add	r3,r2,r16
   15940:	e0bfff17 	ldw	r2,-4(fp)
   15944:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   15948:	00800234 	movhi	r2,8
   1594c:	10a08304 	addi	r2,r2,-32244
   15950:	10c00017 	ldw	r3,0(r2)
   15954:	e0bffe17 	ldw	r2,-8(fp)
   15958:	1880040e 	bge	r3,r2,1596c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   1595c:	00c00234 	movhi	r3,8
   15960:	18e08304 	addi	r3,r3,-32244
   15964:	e0bffe17 	ldw	r2,-8(fp)
   15968:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   1596c:	e0bffe17 	ldw	r2,-8(fp)
   15970:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   15974:	00000606 	br	15990 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15978:	e0bffe17 	ldw	r2,-8(fp)
   1597c:	10800044 	addi	r2,r2,1
   15980:	e0bffe15 	stw	r2,-8(fp)
   15984:	e0bffe17 	ldw	r2,-8(fp)
   15988:	10800810 	cmplti	r2,r2,32
   1598c:	103fdd1e 	bne	r2,zero,15904 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15990:	e0bffd17 	ldw	r2,-12(fp)
}
   15994:	e037883a 	mov	sp,fp
   15998:	dfc00217 	ldw	ra,8(sp)
   1599c:	df000117 	ldw	fp,4(sp)
   159a0:	dc000017 	ldw	r16,0(sp)
   159a4:	dec00304 	addi	sp,sp,12
   159a8:	f800283a 	ret

000159ac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   159ac:	defffb04 	addi	sp,sp,-20
   159b0:	df000415 	stw	fp,16(sp)
   159b4:	df000404 	addi	fp,sp,16
   159b8:	e13ffe15 	stw	r4,-8(fp)
   159bc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   159c0:	e0bfff17 	ldw	r2,-4(fp)
   159c4:	10840070 	cmpltui	r2,r2,4097
   159c8:	1000021e 	bne	r2,zero,159d4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   159cc:	00840004 	movi	r2,4096
   159d0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   159d4:	e0fffe17 	ldw	r3,-8(fp)
   159d8:	e0bfff17 	ldw	r2,-4(fp)
   159dc:	1885883a 	add	r2,r3,r2
   159e0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   159e4:	e0bffe17 	ldw	r2,-8(fp)
   159e8:	e0bffd15 	stw	r2,-12(fp)
   159ec:	00000506 	br	15a04 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   159f0:	e0bffd17 	ldw	r2,-12(fp)
   159f4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   159f8:	e0bffd17 	ldw	r2,-12(fp)
   159fc:	10800804 	addi	r2,r2,32
   15a00:	e0bffd15 	stw	r2,-12(fp)
   15a04:	e0fffd17 	ldw	r3,-12(fp)
   15a08:	e0bffc17 	ldw	r2,-16(fp)
   15a0c:	18bff836 	bltu	r3,r2,159f0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   15a10:	e0bffe17 	ldw	r2,-8(fp)
   15a14:	108007cc 	andi	r2,r2,31
   15a18:	1005003a 	cmpeq	r2,r2,zero
   15a1c:	1000021e 	bne	r2,zero,15a28 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   15a20:	e0bffd17 	ldw	r2,-12(fp)
   15a24:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   15a28:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   15a2c:	e037883a 	mov	sp,fp
   15a30:	df000017 	ldw	fp,0(sp)
   15a34:	dec00104 	addi	sp,sp,4
   15a38:	f800283a 	ret

00015a3c <atexit>:
   15a3c:	200b883a 	mov	r5,r4
   15a40:	000d883a 	mov	r6,zero
   15a44:	0009883a 	mov	r4,zero
   15a48:	000f883a 	mov	r7,zero
   15a4c:	0015afc1 	jmpi	15afc <__register_exitproc>

00015a50 <exit>:
   15a50:	defffe04 	addi	sp,sp,-8
   15a54:	000b883a 	mov	r5,zero
   15a58:	dc000015 	stw	r16,0(sp)
   15a5c:	dfc00115 	stw	ra,4(sp)
   15a60:	2021883a 	mov	r16,r4
   15a64:	0015c340 	call	15c34 <__call_exitprocs>
   15a68:	00800234 	movhi	r2,8
   15a6c:	10a07a04 	addi	r2,r2,-32280
   15a70:	11000017 	ldw	r4,0(r2)
   15a74:	20800f17 	ldw	r2,60(r4)
   15a78:	10000126 	beq	r2,zero,15a80 <exit+0x30>
   15a7c:	103ee83a 	callr	r2
   15a80:	8009883a 	mov	r4,r16
   15a84:	0015e240 	call	15e24 <_exit>

00015a88 <memcmp>:
   15a88:	00c000c4 	movi	r3,3
   15a8c:	1980032e 	bgeu	r3,r6,15a9c <memcmp+0x14>
   15a90:	2144b03a 	or	r2,r4,r5
   15a94:	10c4703a 	and	r2,r2,r3
   15a98:	10000f26 	beq	r2,zero,15ad8 <memcmp+0x50>
   15a9c:	31ffffc4 	addi	r7,r6,-1
   15aa0:	3000061e 	bne	r6,zero,15abc <memcmp+0x34>
   15aa4:	00000a06 	br	15ad0 <memcmp+0x48>
   15aa8:	39ffffc4 	addi	r7,r7,-1
   15aac:	00bfffc4 	movi	r2,-1
   15ab0:	21000044 	addi	r4,r4,1
   15ab4:	29400044 	addi	r5,r5,1
   15ab8:	38800526 	beq	r7,r2,15ad0 <memcmp+0x48>
   15abc:	20c00003 	ldbu	r3,0(r4)
   15ac0:	28800003 	ldbu	r2,0(r5)
   15ac4:	18bff826 	beq	r3,r2,15aa8 <memcmp+0x20>
   15ac8:	1885c83a 	sub	r2,r3,r2
   15acc:	f800283a 	ret
   15ad0:	0005883a 	mov	r2,zero
   15ad4:	f800283a 	ret
   15ad8:	180f883a 	mov	r7,r3
   15adc:	20c00017 	ldw	r3,0(r4)
   15ae0:	28800017 	ldw	r2,0(r5)
   15ae4:	18bfed1e 	bne	r3,r2,15a9c <memcmp+0x14>
   15ae8:	31bfff04 	addi	r6,r6,-4
   15aec:	21000104 	addi	r4,r4,4
   15af0:	29400104 	addi	r5,r5,4
   15af4:	39bff936 	bltu	r7,r6,15adc <memcmp+0x54>
   15af8:	003fe806 	br	15a9c <memcmp+0x14>

00015afc <__register_exitproc>:
   15afc:	defffa04 	addi	sp,sp,-24
   15b00:	00800234 	movhi	r2,8
   15b04:	10a07a04 	addi	r2,r2,-32280
   15b08:	dc000015 	stw	r16,0(sp)
   15b0c:	14000017 	ldw	r16,0(r2)
   15b10:	dd000415 	stw	r20,16(sp)
   15b14:	2829883a 	mov	r20,r5
   15b18:	81405217 	ldw	r5,328(r16)
   15b1c:	dcc00315 	stw	r19,12(sp)
   15b20:	dc800215 	stw	r18,8(sp)
   15b24:	dc400115 	stw	r17,4(sp)
   15b28:	dfc00515 	stw	ra,20(sp)
   15b2c:	2023883a 	mov	r17,r4
   15b30:	3027883a 	mov	r19,r6
   15b34:	3825883a 	mov	r18,r7
   15b38:	28002526 	beq	r5,zero,15bd0 <__register_exitproc+0xd4>
   15b3c:	29000117 	ldw	r4,4(r5)
   15b40:	008007c4 	movi	r2,31
   15b44:	11002716 	blt	r2,r4,15be4 <__register_exitproc+0xe8>
   15b48:	8800101e 	bne	r17,zero,15b8c <__register_exitproc+0x90>
   15b4c:	2105883a 	add	r2,r4,r4
   15b50:	1085883a 	add	r2,r2,r2
   15b54:	20c00044 	addi	r3,r4,1
   15b58:	1145883a 	add	r2,r2,r5
   15b5c:	0009883a 	mov	r4,zero
   15b60:	15000215 	stw	r20,8(r2)
   15b64:	28c00115 	stw	r3,4(r5)
   15b68:	2005883a 	mov	r2,r4
   15b6c:	dfc00517 	ldw	ra,20(sp)
   15b70:	dd000417 	ldw	r20,16(sp)
   15b74:	dcc00317 	ldw	r19,12(sp)
   15b78:	dc800217 	ldw	r18,8(sp)
   15b7c:	dc400117 	ldw	r17,4(sp)
   15b80:	dc000017 	ldw	r16,0(sp)
   15b84:	dec00604 	addi	sp,sp,24
   15b88:	f800283a 	ret
   15b8c:	29802204 	addi	r6,r5,136
   15b90:	00800044 	movi	r2,1
   15b94:	110e983a 	sll	r7,r2,r4
   15b98:	30c04017 	ldw	r3,256(r6)
   15b9c:	2105883a 	add	r2,r4,r4
   15ba0:	1085883a 	add	r2,r2,r2
   15ba4:	1185883a 	add	r2,r2,r6
   15ba8:	19c6b03a 	or	r3,r3,r7
   15bac:	14802015 	stw	r18,128(r2)
   15bb0:	14c00015 	stw	r19,0(r2)
   15bb4:	00800084 	movi	r2,2
   15bb8:	30c04015 	stw	r3,256(r6)
   15bbc:	88bfe31e 	bne	r17,r2,15b4c <__register_exitproc+0x50>
   15bc0:	30804117 	ldw	r2,260(r6)
   15bc4:	11c4b03a 	or	r2,r2,r7
   15bc8:	30804115 	stw	r2,260(r6)
   15bcc:	003fdf06 	br	15b4c <__register_exitproc+0x50>
   15bd0:	00800234 	movhi	r2,8
   15bd4:	10ae6a04 	addi	r2,r2,-18008
   15bd8:	100b883a 	mov	r5,r2
   15bdc:	80805215 	stw	r2,328(r16)
   15be0:	003fd606 	br	15b3c <__register_exitproc+0x40>
   15be4:	00800074 	movhi	r2,1
   15be8:	10a9da04 	addi	r2,r2,-22680
   15bec:	1000021e 	bne	r2,zero,15bf8 <__register_exitproc+0xfc>
   15bf0:	013fffc4 	movi	r4,-1
   15bf4:	003fdc06 	br	15b68 <__register_exitproc+0x6c>
   15bf8:	01006404 	movi	r4,400
   15bfc:	103ee83a 	callr	r2
   15c00:	1007883a 	mov	r3,r2
   15c04:	103ffa26 	beq	r2,zero,15bf0 <__register_exitproc+0xf4>
   15c08:	80805217 	ldw	r2,328(r16)
   15c0c:	180b883a 	mov	r5,r3
   15c10:	18000115 	stw	zero,4(r3)
   15c14:	18800015 	stw	r2,0(r3)
   15c18:	80c05215 	stw	r3,328(r16)
   15c1c:	18006215 	stw	zero,392(r3)
   15c20:	18006315 	stw	zero,396(r3)
   15c24:	0009883a 	mov	r4,zero
   15c28:	883fc826 	beq	r17,zero,15b4c <__register_exitproc+0x50>
   15c2c:	003fd706 	br	15b8c <__register_exitproc+0x90>

00015c30 <register_fini>:
   15c30:	f800283a 	ret

00015c34 <__call_exitprocs>:
   15c34:	00800234 	movhi	r2,8
   15c38:	10a07a04 	addi	r2,r2,-32280
   15c3c:	10800017 	ldw	r2,0(r2)
   15c40:	defff304 	addi	sp,sp,-52
   15c44:	df000b15 	stw	fp,44(sp)
   15c48:	d8800115 	stw	r2,4(sp)
   15c4c:	00800074 	movhi	r2,1
   15c50:	10a9d504 	addi	r2,r2,-22700
   15c54:	1005003a 	cmpeq	r2,r2,zero
   15c58:	d8800215 	stw	r2,8(sp)
   15c5c:	d8800117 	ldw	r2,4(sp)
   15c60:	dd400815 	stw	r21,32(sp)
   15c64:	dd000715 	stw	r20,28(sp)
   15c68:	10805204 	addi	r2,r2,328
   15c6c:	dfc00c15 	stw	ra,48(sp)
   15c70:	ddc00a15 	stw	r23,40(sp)
   15c74:	dd800915 	stw	r22,36(sp)
   15c78:	dcc00615 	stw	r19,24(sp)
   15c7c:	dc800515 	stw	r18,20(sp)
   15c80:	dc400415 	stw	r17,16(sp)
   15c84:	dc000315 	stw	r16,12(sp)
   15c88:	282b883a 	mov	r21,r5
   15c8c:	2039883a 	mov	fp,r4
   15c90:	d8800015 	stw	r2,0(sp)
   15c94:	2829003a 	cmpeq	r20,r5,zero
   15c98:	d8800117 	ldw	r2,4(sp)
   15c9c:	14405217 	ldw	r17,328(r2)
   15ca0:	88001026 	beq	r17,zero,15ce4 <__call_exitprocs+0xb0>
   15ca4:	ddc00017 	ldw	r23,0(sp)
   15ca8:	88800117 	ldw	r2,4(r17)
   15cac:	8c802204 	addi	r18,r17,136
   15cb0:	143fffc4 	addi	r16,r2,-1
   15cb4:	80000916 	blt	r16,zero,15cdc <__call_exitprocs+0xa8>
   15cb8:	05bfffc4 	movi	r22,-1
   15cbc:	a000151e 	bne	r20,zero,15d14 <__call_exitprocs+0xe0>
   15cc0:	8409883a 	add	r4,r16,r16
   15cc4:	2105883a 	add	r2,r4,r4
   15cc8:	1485883a 	add	r2,r2,r18
   15ccc:	10c02017 	ldw	r3,128(r2)
   15cd0:	a8c01126 	beq	r21,r3,15d18 <__call_exitprocs+0xe4>
   15cd4:	843fffc4 	addi	r16,r16,-1
   15cd8:	85bff81e 	bne	r16,r22,15cbc <__call_exitprocs+0x88>
   15cdc:	d8800217 	ldw	r2,8(sp)
   15ce0:	10003126 	beq	r2,zero,15da8 <__call_exitprocs+0x174>
   15ce4:	dfc00c17 	ldw	ra,48(sp)
   15ce8:	df000b17 	ldw	fp,44(sp)
   15cec:	ddc00a17 	ldw	r23,40(sp)
   15cf0:	dd800917 	ldw	r22,36(sp)
   15cf4:	dd400817 	ldw	r21,32(sp)
   15cf8:	dd000717 	ldw	r20,28(sp)
   15cfc:	dcc00617 	ldw	r19,24(sp)
   15d00:	dc800517 	ldw	r18,20(sp)
   15d04:	dc400417 	ldw	r17,16(sp)
   15d08:	dc000317 	ldw	r16,12(sp)
   15d0c:	dec00d04 	addi	sp,sp,52
   15d10:	f800283a 	ret
   15d14:	8409883a 	add	r4,r16,r16
   15d18:	88c00117 	ldw	r3,4(r17)
   15d1c:	2105883a 	add	r2,r4,r4
   15d20:	1445883a 	add	r2,r2,r17
   15d24:	18ffffc4 	addi	r3,r3,-1
   15d28:	11800217 	ldw	r6,8(r2)
   15d2c:	1c001526 	beq	r3,r16,15d84 <__call_exitprocs+0x150>
   15d30:	10000215 	stw	zero,8(r2)
   15d34:	303fe726 	beq	r6,zero,15cd4 <__call_exitprocs+0xa0>
   15d38:	00c00044 	movi	r3,1
   15d3c:	1c06983a 	sll	r3,r3,r16
   15d40:	90804017 	ldw	r2,256(r18)
   15d44:	8cc00117 	ldw	r19,4(r17)
   15d48:	1884703a 	and	r2,r3,r2
   15d4c:	10001426 	beq	r2,zero,15da0 <__call_exitprocs+0x16c>
   15d50:	90804117 	ldw	r2,260(r18)
   15d54:	1884703a 	and	r2,r3,r2
   15d58:	10000c1e 	bne	r2,zero,15d8c <__call_exitprocs+0x158>
   15d5c:	2105883a 	add	r2,r4,r4
   15d60:	1485883a 	add	r2,r2,r18
   15d64:	11400017 	ldw	r5,0(r2)
   15d68:	e009883a 	mov	r4,fp
   15d6c:	303ee83a 	callr	r6
   15d70:	88800117 	ldw	r2,4(r17)
   15d74:	98bfc81e 	bne	r19,r2,15c98 <__call_exitprocs+0x64>
   15d78:	b8800017 	ldw	r2,0(r23)
   15d7c:	147fd526 	beq	r2,r17,15cd4 <__call_exitprocs+0xa0>
   15d80:	003fc506 	br	15c98 <__call_exitprocs+0x64>
   15d84:	8c000115 	stw	r16,4(r17)
   15d88:	003fea06 	br	15d34 <__call_exitprocs+0x100>
   15d8c:	2105883a 	add	r2,r4,r4
   15d90:	1485883a 	add	r2,r2,r18
   15d94:	11000017 	ldw	r4,0(r2)
   15d98:	303ee83a 	callr	r6
   15d9c:	003ff406 	br	15d70 <__call_exitprocs+0x13c>
   15da0:	303ee83a 	callr	r6
   15da4:	003ff206 	br	15d70 <__call_exitprocs+0x13c>
   15da8:	88800117 	ldw	r2,4(r17)
   15dac:	1000081e 	bne	r2,zero,15dd0 <__call_exitprocs+0x19c>
   15db0:	89000017 	ldw	r4,0(r17)
   15db4:	20000726 	beq	r4,zero,15dd4 <__call_exitprocs+0x1a0>
   15db8:	b9000015 	stw	r4,0(r23)
   15dbc:	8809883a 	mov	r4,r17
   15dc0:	000a7540 	call	a754 <free>
   15dc4:	bc400017 	ldw	r17,0(r23)
   15dc8:	883fb71e 	bne	r17,zero,15ca8 <__call_exitprocs+0x74>
   15dcc:	003fc506 	br	15ce4 <__call_exitprocs+0xb0>
   15dd0:	89000017 	ldw	r4,0(r17)
   15dd4:	882f883a 	mov	r23,r17
   15dd8:	2023883a 	mov	r17,r4
   15ddc:	883fb21e 	bne	r17,zero,15ca8 <__call_exitprocs+0x74>
   15de0:	003fc006 	br	15ce4 <__call_exitprocs+0xb0>

00015de4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   15de4:	defffd04 	addi	sp,sp,-12
   15de8:	df000215 	stw	fp,8(sp)
   15dec:	df000204 	addi	fp,sp,8
   15df0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   15df4:	e0bfff17 	ldw	r2,-4(fp)
   15df8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15dfc:	e0bffe17 	ldw	r2,-8(fp)
   15e00:	1005003a 	cmpeq	r2,r2,zero
   15e04:	1000021e 	bne	r2,zero,15e10 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   15e08:	002af070 	cmpltui	zero,zero,43969
   15e0c:	00000106 	br	15e14 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   15e10:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   15e14:	e037883a 	mov	sp,fp
   15e18:	df000017 	ldw	fp,0(sp)
   15e1c:	dec00104 	addi	sp,sp,4
   15e20:	f800283a 	ret

00015e24 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15e24:	defffd04 	addi	sp,sp,-12
   15e28:	dfc00215 	stw	ra,8(sp)
   15e2c:	df000115 	stw	fp,4(sp)
   15e30:	df000104 	addi	fp,sp,4
   15e34:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   15e38:	e13fff17 	ldw	r4,-4(fp)
   15e3c:	0015de40 	call	15de4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15e40:	003fff06 	br	15e40 <_exit+0x1c>
   15e44:	00015c30 	cmpltui	zero,zero,1392

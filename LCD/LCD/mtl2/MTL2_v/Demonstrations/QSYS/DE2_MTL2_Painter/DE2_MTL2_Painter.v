
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE2_MTL2_Painter(

	//////////// CLOCK //////////
	input 		          		CLOCK_27,	
	input 		          		CLOCK_50,
	//////////// TV Decoder Reset //////////// 
   output			            TD_RESET,
   input                      TD_CLK27	,
	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0_D,
	output		     [6:0]		HEX1_D,
	output		     [6:0]		HEX2_D,
	output		     [6:0]		HEX3_D,
	output		     [6:0]		HEX4_D,
	output		     [6:0]		HEX5_D,
	output		     [6:0]		HEX6_D,
	output		     [6:0]		HEX7_D,

	//////////// VGA //////////
	output		     [9:0]		VGA_B,
	output		          		VGA_BLANK,
	output		          		VGA_CLK,
	output		     [9:0]		VGA_G,
	output		          		VGA_HS,
	output		     [9:0]		VGA_R,
	output		          		VGA_SYNC,
	output		          		VGA_VS,

	//////////// SDRAM //////////
	output		    [11:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// GPIO_0, GPIO_0 connect to MTL2 - Multi-Touch LCD Panel //////////
	output		     [7:0]		MTL_B,
	output		          		MTL_DCLK,
	output		     [7:0]		MTL_G,
	output		          		MTL_HSD,
	output		     [7:0]		MTL_R,
	output		          		MTL_TOUCH_I2C_SCL,
	inout 		          		MTL_TOUCH_I2C_SDA,
	input 		          		MTL_TOUCH_INT_n,
	output		          		MTL_VSD
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

//=======================================================
//  Structural coding
//=======================================================

//**=== TV DECODER ====
assign	TD_RESET	=KEY[1] ;


//**=== VGA  ==========
wire video_hs,video_hs_1;
wire video_vs,video_vs_1;
wire video_clk;
wire [7:0]	video_r;
wire [7:0]	video_g;
wire [7:0]	video_b;

//reg video_clk_;
//always @(posedge CLOCK_50 ) video_clk_ <= ~video_clk_;
//assign video_clk = video_clk_;


vga_pll pll_inst(
		.areset(1'b0),
		.inclk0(CLOCK_27),	// Note :CLOCK_50 /CLOCK_27 dedicate clockin pin , but CLOCK_27 none OSC_Source by connected
                      		// Note :TD_CLK27 : is not dedicate clockin pin
		.c0    (video_clk),  	 
		.locked()
);

//**=== SOPC ===========
 MTL2 u0(
		.reset_n          (1'b1),      // clk_50_clk_in_reset.reset_n
		.clk_50           (CLOCK_50),  // clk_50_clk_in.clk
		.pll_sdram_clk_clk(DRAM_CLK),  // pll_sdram.clk
	  
		.zs_addr_from_the_sdram     (DRAM_ADDR[11:0]),			// sdram_wire.addr
		.zs_ba_from_the_sdram       (DRAM_BA),						// .ba
		.zs_cas_n_from_the_sdram    (DRAM_CAS_N),					// .cas_n
		.zs_cke_from_the_sdram      (DRAM_CKE),					// .cke
		.zs_cs_n_from_the_sdram     (DRAM_CS_N), 					// .cs_n
		.zs_dq_to_and_from_the_sdram(DRAM_DQ), 					// .dq
		.zs_dqm_from_the_sdram      ({DRAM_UDQM,DRAM_LDQM}),  // .dqm
		.zs_ras_n_from_the_sdram    (DRAM_RAS_N), 				// .ras_n
		.zs_we_n_from_the_sdram     (DRAM_WE_N), 					// .we_n
		
		
			
		.vid_clk_to_the_alt_vip_itc_0        (video_clk),             			// alt_vip_itc_0_clocked_video.vid_clk
		.vid_data_from_the_alt_vip_itc_0     ({video_r, video_g, video_b}),  // .vid_data
		.underflow_from_the_alt_vip_itc_0    (),       								//	.underflow
		.vid_datavalid_from_the_alt_vip_itc_0(),     								// .vid_datavalid
		.vid_v_sync_from_the_alt_vip_itc_0   (video_vs),							// .vid_v_sync
		.vid_h_sync_from_the_alt_vip_itc_0   (video_hs),							//	.vid_h_sync
		.vid_f_from_the_alt_vip_itc_0(),             								// .vid_f
		.vid_h_from_the_alt_vip_itc_0        (video_hs_1),             		// .vid_h
		.vid_v_from_the_alt_vip_itc_0        (video_vs_1),             		// .vid_v
		
		.out_port_from_the_led(LEDR ),     // led_external_connection.export
		.in_port_to_the_sw    (SW),    	// sw_external_connection.export
		.in_port_to_the_key   (KEY[3:0]),	   // key_external_connection.export
		
		.lcd_touch_int_external_connection_export(MTL_TOUCH_INT_n), 	// lcd_touch_int_external_connection.export
	   .i2c_opencores_0_export_scl_pad_io       (MTL_TOUCH_I2C_SCL),  // i2c_opencores_0_export.scl_pad_io
		.i2c_opencores_0_export_sda_pad_io       (MTL_TOUCH_I2C_SDA)   // .sda_pad_io		
	);


	
//** === 8BIT *3  VGA OUT ====
assign	{VGA_R, VGA_G, VGA_B} = {video_r,2'h0, video_g,2'h0, video_b,2'h0};
assign   VGA_BLANK = 1'b1;
assign   VGA_SYNC  = 1'b0;
assign 	VGA_HS    =  ~video_hs ;
assign 	VGA_VS    =  ~video_vs;
assign   VGA_CLK   =  video_clk;


//** === MTL DIISPLAY OUT ====
assign 	{MTL_R,MTL_G,MTL_B} = {video_r, video_g, video_b};
assign 	MTL_DCLK =  video_clk;
assign 	MTL_HSD  = ~video_hs;
assign 	MTL_VSD  = ~video_vs;

endmodule


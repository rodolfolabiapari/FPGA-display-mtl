
painter.elf:     file format elf32-littlenios2
painter.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b8

Program Header:
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00078de4 memsz 0x000790d4 flags rwx
    LOAD off    0x0007a000 vaddr 0x09001000 paddr 0x09001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  09001000  09001000  0007a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000167a0  040001b8  040001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0005edbc  04016958  04016958  00017958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000036f0  04075714  04075714  00076714  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  04078e04  04078e04  00079e04  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0007a000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010d8  00000000  00000000  0007a028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002f104  00000000  00000000  0007b100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b4da  00000000  00000000  000aa204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000d798  00000000  00000000  000b56de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002af4  00000000  00000000  000c2e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000055e0  00000000  00000000  000c596c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000134c5  00000000  00000000  000caf4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  000de414  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  000de468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000e4ce3  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000e4ce6  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000e4ce9  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000e4cea  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000e4ceb  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000e4cef  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000e4cf3  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000e4cf7  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000e4d00  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000e4d09  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  000e4d12  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000017  00000000  00000000  000e4d16  2**0
                  CONTENTS, READONLY
 28 .jdi          00004220  00000000  00000000  000e4d2d  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0008dbc8  00000000  00000000  000e8f4d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
09001000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b8 l    d  .text	00000000 .text
04016958 l    d  .rodata	00000000 .rodata
04075714 l    d  .rwdata	00000000 .rwdata
04078e04 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../painter_bsp//obj/HAL/src/crt0.o
040001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
04016958 l     O .rodata	000000b6 tahomabold_20_33
04016a0e l     O .rodata	00000104 tahomabold_20_34
04016b12 l     O .rodata	000001a0 tahomabold_20_35
04016cb2 l     O .rodata	00000152 tahomabold_20_36
04016e04 l     O .rodata	00000270 tahomabold_20_37
04017074 l     O .rodata	000001ba tahomabold_20_38
0401722e l     O .rodata	0000009c tahomabold_20_39
040172ca l     O .rodata	000000ea tahomabold_20_40
040173b4 l     O .rodata	000000ea tahomabold_20_41
0401749e l     O .rodata	00000152 tahomabold_20_42
040175f0 l     O .rodata	000001a0 tahomabold_20_43
04017790 l     O .rodata	0000009c tahomabold_20_44
0401782c l     O .rodata	000000ea tahomabold_20_45
04017916 l     O .rodata	0000009c tahomabold_20_46
040179b2 l     O .rodata	00000138 tahomabold_20_47
04017aea l     O .rodata	00000152 tahomabold_20_48
04017c3c l     O .rodata	00000152 tahomabold_20_49
04017d8e l     O .rodata	00000152 tahomabold_20_50
04017ee0 l     O .rodata	00000152 tahomabold_20_51
04018032 l     O .rodata	00000152 tahomabold_20_52
04018184 l     O .rodata	00000152 tahomabold_20_53
040182d6 l     O .rodata	00000152 tahomabold_20_54
04018428 l     O .rodata	00000152 tahomabold_20_55
0401857a l     O .rodata	00000152 tahomabold_20_56
040186cc l     O .rodata	00000152 tahomabold_20_57
0401881e l     O .rodata	000000b6 tahomabold_20_58
040188d4 l     O .rodata	000000b6 tahomabold_20_59
0401898a l     O .rodata	000001a0 tahomabold_20_60
04018b2a l     O .rodata	000001a0 tahomabold_20_61
04018cca l     O .rodata	000001a0 tahomabold_20_62
04018e6a l     O .rodata	0000011e tahomabold_20_63
04018f88 l     O .rodata	000001d4 tahomabold_20_64
0401915c l     O .rodata	0000016c tahomabold_20_65
040192c8 l     O .rodata	0000016c tahomabold_20_66
04019434 l     O .rodata	00000152 tahomabold_20_67
04019586 l     O .rodata	00000186 tahomabold_20_68
0401970c l     O .rodata	00000138 tahomabold_20_69
04019844 l     O .rodata	00000138 tahomabold_20_70
0401997c l     O .rodata	00000186 tahomabold_20_71
04019b02 l     O .rodata	00000186 tahomabold_20_72
04019c88 l     O .rodata	00000104 tahomabold_20_73
04019d8c l     O .rodata	00000104 tahomabold_20_74
04019e90 l     O .rodata	0000016c tahomabold_20_75
04019ffc l     O .rodata	0000011e tahomabold_20_76
0401a11a l     O .rodata	000001d4 tahomabold_20_77
0401a2ee l     O .rodata	00000186 tahomabold_20_78
0401a474 l     O .rodata	00000186 tahomabold_20_79
0401a5fa l     O .rodata	00000152 tahomabold_20_80
0401a74c l     O .rodata	00000186 tahomabold_20_81
0401a8d2 l     O .rodata	00000186 tahomabold_20_82
0401aa58 l     O .rodata	00000152 tahomabold_20_83
0401abaa l     O .rodata	00000138 tahomabold_20_84
0401ace2 l     O .rodata	00000186 tahomabold_20_85
0401ae68 l     O .rodata	0000016c tahomabold_20_86
0401afd4 l     O .rodata	00000222 tahomabold_20_87
0401b1f6 l     O .rodata	0000016c tahomabold_20_88
0401b362 l     O .rodata	0000016c tahomabold_20_89
0401b4ce l     O .rodata	00000138 tahomabold_20_90
0401b606 l     O .rodata	000000ea tahomabold_20_91
0401b6f0 l     O .rodata	00000138 tahomabold_20_92
0401b828 l     O .rodata	000000ea tahomabold_20_93
0401b912 l     O .rodata	000001a0 tahomabold_20_94
0401bab2 l     O .rodata	00000152 tahomabold_20_95
0401bc04 l     O .rodata	0000011e tahomabold_20_96
0401bd22 l     O .rodata	00000138 tahomabold_20_97
0401be5a l     O .rodata	00000152 tahomabold_20_98
0401bfac l     O .rodata	0000011e tahomabold_20_99
0401c0ca l     O .rodata	00000152 tahomabold_20_100
0401c21c l     O .rodata	00000138 tahomabold_20_101
0401c354 l     O .rodata	000000d0 tahomabold_20_102
0401c424 l     O .rodata	00000152 tahomabold_20_103
0401c576 l     O .rodata	00000152 tahomabold_20_104
0401c6c8 l     O .rodata	0000009c tahomabold_20_105
0401c764 l     O .rodata	000000ea tahomabold_20_106
0401c84e l     O .rodata	00000138 tahomabold_20_107
0401c986 l     O .rodata	0000009c tahomabold_20_108
0401ca22 l     O .rodata	000001ee tahomabold_20_109
0401cc10 l     O .rodata	00000152 tahomabold_20_110
0401cd62 l     O .rodata	00000138 tahomabold_20_111
0401ce9a l     O .rodata	00000152 tahomabold_20_112
0401cfec l     O .rodata	00000152 tahomabold_20_113
0401d13e l     O .rodata	000000ea tahomabold_20_114
0401d228 l     O .rodata	00000104 tahomabold_20_115
0401d32c l     O .rodata	000000d0 tahomabold_20_116
0401d3fc l     O .rodata	00000152 tahomabold_20_117
0401d54e l     O .rodata	00000138 tahomabold_20_118
0401d686 l     O .rodata	000001d4 tahomabold_20_119
0401d85a l     O .rodata	00000138 tahomabold_20_120
0401d992 l     O .rodata	00000138 tahomabold_20_121
0401daca l     O .rodata	0000011e tahomabold_20_122
0401dbe8 l     O .rodata	00000138 tahomabold_20_123
0401dd20 l     O .rodata	00000152 tahomabold_20_124
0401de72 l     O .rodata	00000138 tahomabold_20_125
0401dfaa l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
0401e14a l     O .rodata	000001b8 tahomabold_32_33
0401e302 l     O .rodata	00000280 tahomabold_32_34
0401e582 l     O .rodata	00000410 tahomabold_32_35
0401e992 l     O .rodata	00000320 tahomabold_32_36
0401ecb2 l     O .rodata	000005f0 tahomabold_32_37
0401f2a2 l     O .rodata	00000410 tahomabold_32_38
0401f6b2 l     O .rodata	00000168 tahomabold_32_39
0401f81a l     O .rodata	00000258 tahomabold_32_40
0401fa72 l     O .rodata	00000258 tahomabold_32_41
0401fcca l     O .rodata	00000320 tahomabold_32_42
0401ffea l     O .rodata	00000410 tahomabold_32_43
040203fa l     O .rodata	00000190 tahomabold_32_44
0402058a l     O .rodata	00000230 tahomabold_32_45
040207ba l     O .rodata	00000190 tahomabold_32_46
0402094a l     O .rodata	000002d0 tahomabold_32_47
04020c1a l     O .rodata	00000320 tahomabold_32_48
04020f3a l     O .rodata	00000320 tahomabold_32_49
0402125a l     O .rodata	00000320 tahomabold_32_50
0402157a l     O .rodata	00000320 tahomabold_32_51
0402189a l     O .rodata	00000320 tahomabold_32_52
04021bba l     O .rodata	00000320 tahomabold_32_53
04021eda l     O .rodata	00000320 tahomabold_32_54
040221fa l     O .rodata	00000320 tahomabold_32_55
0402251a l     O .rodata	00000320 tahomabold_32_56
0402283a l     O .rodata	00000320 tahomabold_32_57
04022b5a l     O .rodata	000001e0 tahomabold_32_58
04022d3a l     O .rodata	000001e0 tahomabold_32_59
04022f1a l     O .rodata	00000410 tahomabold_32_60
0402332a l     O .rodata	00000410 tahomabold_32_61
0402373a l     O .rodata	00000410 tahomabold_32_62
04023b4a l     O .rodata	000002d0 tahomabold_32_63
04023e1a l     O .rodata	00000488 tahomabold_32_64
040242a2 l     O .rodata	00000370 tahomabold_32_65
04024612 l     O .rodata	00000370 tahomabold_32_66
04024982 l     O .rodata	00000348 tahomabold_32_67
04024cca l     O .rodata	000003c0 tahomabold_32_68
0402508a l     O .rodata	00000320 tahomabold_32_69
040253aa l     O .rodata	000002f8 tahomabold_32_70
040256a2 l     O .rodata	000003c0 tahomabold_32_71
04025a62 l     O .rodata	000003c0 tahomabold_32_72
04025e22 l     O .rodata	00000258 tahomabold_32_73
0402607a l     O .rodata	00000280 tahomabold_32_74
040262fa l     O .rodata	00000398 tahomabold_32_75
04026692 l     O .rodata	000002d0 tahomabold_32_76
04026962 l     O .rodata	00000488 tahomabold_32_77
04026dea l     O .rodata	000003e8 tahomabold_32_78
040271d2 l     O .rodata	000003e8 tahomabold_32_79
040275ba l     O .rodata	00000348 tahomabold_32_80
04027902 l     O .rodata	000003e8 tahomabold_32_81
04027cea l     O .rodata	000003c0 tahomabold_32_82
040280aa l     O .rodata	00000320 tahomabold_32_83
040283ca l     O .rodata	00000320 tahomabold_32_84
040286ea l     O .rodata	000003c0 tahomabold_32_85
04028aaa l     O .rodata	00000370 tahomabold_32_86
04028e1a l     O .rodata	00000528 tahomabold_32_87
04029342 l     O .rodata	00000370 tahomabold_32_88
040296b2 l     O .rodata	00000370 tahomabold_32_89
04029a22 l     O .rodata	00000320 tahomabold_32_90
04029d42 l     O .rodata	00000258 tahomabold_32_91
04029f9a l     O .rodata	000002d0 tahomabold_32_92
0402a26a l     O .rodata	00000258 tahomabold_32_93
0402a4c2 l     O .rodata	00000410 tahomabold_32_94
0402a8d2 l     O .rodata	00000320 tahomabold_32_95
0402abf2 l     O .rodata	000002a8 tahomabold_32_96
0402ae9a l     O .rodata	000002f8 tahomabold_32_97
0402b192 l     O .rodata	00000320 tahomabold_32_98
0402b4b2 l     O .rodata	000002a8 tahomabold_32_99
0402b75a l     O .rodata	00000320 tahomabold_32_100
0402ba7a l     O .rodata	000002f8 tahomabold_32_101
0402bd72 l     O .rodata	00000230 tahomabold_32_102
0402bfa2 l     O .rodata	00000320 tahomabold_32_103
0402c2c2 l     O .rodata	00000320 tahomabold_32_104
0402c5e2 l     O .rodata	00000190 tahomabold_32_105
0402c772 l     O .rodata	00000208 tahomabold_32_106
0402c97a l     O .rodata	000002f8 tahomabold_32_107
0402cc72 l     O .rodata	00000190 tahomabold_32_108
0402ce02 l     O .rodata	000004d8 tahomabold_32_109
0402d2da l     O .rodata	00000320 tahomabold_32_110
0402d5fa l     O .rodata	00000320 tahomabold_32_111
0402d91a l     O .rodata	00000320 tahomabold_32_112
0402dc3a l     O .rodata	00000320 tahomabold_32_113
0402df5a l     O .rodata	00000230 tahomabold_32_114
0402e18a l     O .rodata	00000280 tahomabold_32_115
0402e40a l     O .rodata	00000208 tahomabold_32_116
0402e612 l     O .rodata	00000320 tahomabold_32_117
0402e932 l     O .rodata	000002f8 tahomabold_32_118
0402ec2a l     O .rodata	00000460 tahomabold_32_119
0402f08a l     O .rodata	000002f8 tahomabold_32_120
0402f382 l     O .rodata	000002d0 tahomabold_32_121
0402f652 l     O .rodata	000002a8 tahomabold_32_122
0402f8fa l     O .rodata	00000320 tahomabold_32_123
0402fc1a l     O .rodata	00000320 tahomabold_32_124
0402ff3a l     O .rodata	00000320 tahomabold_32_125
0403025a l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 gesture.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
04078e04 l     O .bss	00000004 x.3969
04078db8 l     O .rwdata	00000004 y.3970
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 multi_touch2.c
04007ea4 l     F .text	00000360 mtc2_QueryData
04008204 l     F .text	00000074 mtc2_ISR
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 vip_fr.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 fp-bit.c
04009214 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
04009ca8 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
040772d0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400b180 l     F .text	00000034 __sprint_r
04075532 l     O .rodata	00000010 blanks.3546
04075542 l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400d2b4 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0400ed24 l     F .text	00000008 __fp_lock
0400ed2c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04075574 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
040756bc l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
04012e78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04012fd8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04013004 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
040133cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
040134c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0401369c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04078df0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04013adc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04013c1c l     F .text	00000038 alt_dev_reg
04077c8c l     O .rwdata	000000c8 epcs_flash_controller_0
04077d54 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
04013cf0 l     F .text	00000038 alt_flash_device_register
04013d7c l     F .text	0000028c alt_epcs_flash_query
04014008 l     F .text	000000e8 alt_epcs_flash_memcmp
040143dc l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040148a4 l     F .text	00000204 altera_avalon_jtag_uart_irq
04014aa8 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
040150e0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
04015238 l     F .text	00000038 epcs_test_wip
04015270 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04015a94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04015cf4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
04015e4c l     F .text	00000050 alt_get_errno
04015e9c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0400ae84 g     F .text	0000001c putchar
04001524 g     F .text	000002fc vid_draw_horiz_line
04010e44 g     F .text	00000074 _mprec_log10
040063b0 g     F .text	00000118 I2C_Read
04014350 g     F .text	0000008c alt_epcs_flash_get_info
04010f34 g     F .text	00000084 __any_on
04011e28 g     F .text	00000064 _isatty_r
040755a4 g     O .rodata	00000028 __mprec_tinytens
040135e4 g     F .text	00000078 alt_main
0400b060 g     F .text	00000094 strcpy
0400a3f8 g     F .text	00000044 __ashldi3
0400aea0 g     F .text	00000084 _puts_r
04078e64 g     O .bss	00000100 alt_irq
04011e8c g     F .text	0000006c _lseek_r
04007488 g     F .text	00000068 ACK_check
0400190c g     F .text	0000006c vid_color_convert16_24
04008dd4 g     F .text	00000148 sqrt
04007130 g     F .text	000000a0 I2CL_Read16
040073fc g     F .text	0000008c ACK_single_check
04012bdc g     F .text	0000005c __eqdf2
040790f4 g       *ABS*	00000000 __alt_heap_start
0400862c g     F .text	00000064 QUEUE_IsFull
0400ae40 g     F .text	0000003c printf
04004144 g     F .text	00000200 GUI_DeskInit
04011874 g     F .text	0000005c __sseek
0400edc8 g     F .text	0000010c __sinit
0401197c g     F .text	0000013c __swbuf_r
0400fa60 g     F .text	0000009c _setlocale_r
0400ed40 g     F .text	00000078 __sfmoreglue
0401367c g     F .text	00000020 __malloc_unlock
04000e74 g     F .text	00000150 vid_draw_box
040005bc g     F .text	00000044 PtCopy
040034c8 g     F .text	0000025c vid_print_string_alpha
0400fddc g     F .text	0000018c memmove
040074f0 g     F .text	000001fc OC_I2C_Write
04004a0c g     F .text	00000308 GUI_ShowGesture
0400edb8 g     F .text	00000010 _cleanup
0400ff68 g     F .text	000000a8 _Balloc
04076e94 g     O .rwdata	00000415 cour10_font_array
04012c94 g     F .text	00000064 __gtdf2
04000c50 g     F .text	0000011c vid_move_block
0400a43c g     F .text	00000010 __errno
040152a8 g     F .text	000000f8 epcs_sector_erase
04006fb4 g     F .text	0000017c I2CL_MultipleWrite
04004064 g     F .text	000000e0 vid_string_pixel_length_alpha
040068b8 g     F .text	00000144 i2c_write
09001000 g     F .entry	00000000 __reset
04008b04 g     F .text	00000090 DRAW_EraseScreen
04006134 g     F .text	00000040 my_wait
04011dc0 g     F .text	00000068 _fstat_r
04078e14 g     O .bss	00000004 errno
040064c8 g     F .text	00000178 I2C_Read16
04078e2c g     O .bss	00000004 alt_argv
04080db4 g       *ABS*	00000000 _gp
04013aac g     F .text	00000030 usleep
040058b8 g     F .text	000000a4 VPG_ColorPanel
04003724 g     F .text	00000154 seperate_color_channels
04077b0c g     O .rwdata	00000180 alt_fd_list
04008ce4 g     F .text	00000038 FrameReader_Go
0400ae7c g     F .text	00000008 _putchar_r
040154e4 g     F .text	00000068 epcs_write_status_register
0401630c g     F .text	00000090 alt_find_dev
0400abf8 g     F .text	00000140 memcpy
0400ed34 g     F .text	0000000c _cleanup_r
04009b10 g     F .text	000000d4 __floatsidf
04002398 g     F .text	00000758 vid_round_corner_points
04015dd4 g     F .text	00000078 alt_io_redirect
04009ab4 g     F .text	0000005c __ltdf2
04008514 g     F .text	00000038 MTC2_ClearEvent
04016958 g       *ABS*	00000000 __DTOR_END__
04004344 g     F .text	00000094 GUI_CheckButton
0400af24 g     F .text	00000014 puts
04000600 g     F .text	00000060 vid_clean_screen
040144e4 g     F .text	00000104 alt_epcs_flash_write_block
04010da0 g     F .text	000000a4 __ratio
040085ec g     F .text	00000040 QUEUE_IsEmpty
0400076c g     F .text	00000154 vid_scroll_string_init
04014ca8 g     F .text	00000218 altera_avalon_jtag_uart_read
0400a44c g     F .text	00000014 malloc
0400ae14 g     F .text	0000002c _printf_r
04009dc8 g     F .text	00000008 __udivsi3
0401341c g     F .text	000000a4 isatty
040755f4 g     O .rodata	000000c8 __mprec_tens
040083b4 g     F .text	00000160 MTC2_GetStatus
0400fafc g     F .text	0000000c __locale_charset
0400d100 g     F .text	00000040 vsnprintf
040043d8 g     F .text	000005a8 GUI_DeskDraw
04006640 g     F .text	0000017c I2C_MultipleRead
04078e10 g     O .bss	00000004 __malloc_top_pad
040087b4 g     F .text	00000030 QUEUE_Empty
04078dd0 g     O .rwdata	00000004 __mb_cur_max
0400fb08 g     F .text	0000000c _localeconv_r
04010398 g     F .text	0000003c __i2b
0400f41c g     F .text	000004e4 __sfvwrite_r
04008724 g     F .text	00000090 QUEUE_Pop
0400af38 g     F .text	00000064 _sbrk_r
040004c8 g     F .text	00000034 RectHeight
04008a7c g     F .text	00000088 VIPFR_ActiveDrawFrame
04008b94 g     F .text	0000008c FrameReader_SetFrame0
04011ef8 g     F .text	0000006c _read_r
04077ad8 g     O .rwdata	0000000c __lc_ctype
04078de4 g     O .rwdata	00000004 alt_max_fd
0400a1e0 g     F .text	00000104 __unpack_d
04005800 g     F .text	000000b8 VPG_XLine
04011c70 g     F .text	0000013c _fclose_r
0400ecf4 g     F .text	00000030 fflush
04078e0c g     O .bss	00000004 __malloc_max_sbrked_mem
04006c8c g     F .text	00000168 I2CL_Read
040762d4 g     O .rwdata	00000bc0 tahomabold_32
04009568 g     F .text	00000054 __adddf3
04004d5c g     F .text	000000c4 GUI_ClearPaintArea
04014470 g     F .text	00000074 alt_epcs_flash_erase_block
04000284 g     F .text	00000040 PtSet
04010b14 g     F .text	00000148 __b2d
040125b4 g     F .text	00000628 __umoddi3
04013510 g     F .text	000000d4 lseek
04078dbc g     O .rwdata	00000004 __fdlib_version
04078dc0 g     O .rwdata	00000004 _global_impure_ptr
04001e9c g     F .text	00000140 vid_draw_circle
040157a8 g     F .text	00000058 epcs_exit_4_bytes_mode
04011164 g     F .text	000005fc _realloc_r
040790f4 g       *ABS*	00000000 __bss_end
040132dc g     F .text	000000f0 alt_iic_isr_register
040139a8 g     F .text	00000104 alt_tick
04006270 g     F .text	00000140 I2C_Write16
040003a8 g     F .text	00000088 RectOffset
04008278 g     F .text	000000f4 MTC2_Init
04011f64 g     F .text	00000650 __udivdi3
040755cc g     O .rodata	00000028 __mprec_bigtens
0401017c g     F .text	00000104 __s2b
04001c38 g     F .text	00000264 vid_draw_sloped_line
04012d5c g     F .text	0000011c __floatunsidf
040108b4 g     F .text	00000058 __mcmp
04005a68 g     F .text	000000f4 VPG_VGrid
0400efe0 g     F .text	00000018 __fp_lock_all
04013290 g     F .text	0000004c alt_ic_irq_enabled
04006174 g     F .text	000000fc I2C_Write
04001fdc g     F .text	000003bc vid_draw_round_corner_box
04007900 g     F .text	000001d8 OC_I2CL_Write
04013910 g     F .text	00000098 alt_alarm_stop
04078e24 g     O .bss	00000004 alt_irq_active
040076ec g     F .text	00000064 ACK_judge_for_read
040000ec g     F .exceptions	000000cc alt_irq_handler
04077ae4 g     O .rwdata	00000028 alt_dev_null
0400725c g     F .text	00000054 Write32_Data
040071d0 g     F .text	0000008c I2CL_Write16
040067bc g     F .text	00000084 i2c_start
04012f94 g     F .text	00000044 alt_dcache_flush_all
04010280 g     F .text	00000068 __hi0bits
04009be4 g     F .text	000000c4 __fixdfsi
04002f24 g     F .text	00000394 vid_draw_triangle
04078ddc g     O .rwdata	00000008 alt_dev_list
04013b2c g     F .text	000000f0 write
04010fb8 g     F .text	000000bc _putc_r
040772ac g     O .rwdata	00000024 szPallete
04003394 g     F .text	00000134 CropImage16
04013054 g     F .text	000000b0 fstat
0400a3b4 g     F .text	00000044 __lshrdi3
040008c0 g     F .text	00000390 vid_scroll_string
04007d24 g     F .text	0000006c myprintf
0401062c g     F .text	0000012c __pow5mult
04078e20 g     O .bss	00000004 __nlocale_changed
04009dd0 g     F .text	00000008 __umodsi3
04000494 g     F .text	00000034 RectWidth
04015668 g     F .text	00000068 epcs_read_electronic_signature
040032b8 g     F .text	000000dc CopyImage16
040790f4 g       *ABS*	00000000 end
04005f34 g     F .text	00000134 GUI_VPG
040089fc g     F .text	0000003c VIPFR_Go
040056d4 g     F .text	0000006c GUI_ShowInfo
040147e4 g     F .text	000000c0 altera_avalon_jtag_uart_init
04000fc4 g     F .text	000000f8 vid_print_char
04016958 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04015154 g     F .text	00000088 alt_avalon_timer_sc_init
04009f10 g     F .text	000000ac __clzsi2
04014ec0 g     F .text	00000220 altera_avalon_jtag_uart_write
04005db4 g     F .text	00000180 GUI_ShowPAT
04002b44 g     F .text	00000054 min3
04000660 g     F .text	000000cc vid_draw_line
040087e4 g     F .text	000000d8 VIPFR_Init
0400efd0 g     F .text	00000004 __sfp_lock_acquire
0400fce4 g     F .text	000000f8 memchr
0400b1b4 g     F .text	00001e7c ___vfprintf_internal_r
0400af9c g     F .text	00000058 _sprintf_r
0400f14c g     F .text	000002d0 _free_r
0401677c g     F .text	000001a0 __call_exitprocs
04078e1c g     O .bss	00000004 __mlocale_changed
0400595c g     F .text	0000010c VPG_Grid
04078dc8 g     O .rwdata	00000004 __malloc_sbrk_base
040001b8 g     F .text	00000048 _start
04078e34 g     O .bss	00000004 _alt_tick_rate
0400836c g     F .text	00000048 MTC2_UnInit
04010758 g     F .text	0000015c __lshift
04016104 g     F .text	00000208 alt_avalon_spi_command
04008690 g     F .text	00000094 QUEUE_Push
04078e38 g     O .bss	00000004 _alt_nticks
04002bfc g     F .text	000000f0 vid_put_pixel_in_span_map
040136ec g     F .text	000000f4 read
040088bc g     F .text	00000038 VIPFR_UnInit
04005c50 g     F .text	00000164 VPG_ColorBar
04013c88 g     F .text	00000068 alt_sys_init
0401664c g     F .text	00000130 __register_exitproc
040103d4 g     F .text	00000258 __multiply
040012c4 g     F .text	00000260 vid_paint_block
04014b4c g     F .text	00000068 altera_avalon_jtag_uart_close
04009dd8 g     F .text	00000028 __mulsi3
04078e3c g     O .bss	00000028 __malloc_current_mallinfo
04010c5c g     F .text	00000144 __d2b
04005b5c g     F .text	000000f4 VPG_HGrid
040151dc g     F .text	0000005c epcs_read_status_register
0400186c g     F .text	000000a0 vid_color_convert24_16
04014680 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040164b0 g     F .text	000000d4 alt_get_fd
04015940 g     F .text	00000154 alt_busy_sleep
0400a2e4 g     F .text	000000d0 __fpcmp_parts_d
04011c0c g     F .text	00000064 _close_r
04004e20 g     F .text	000008b4 GUI
04003c0c g     F .text	00000298 alpha_blending
040156d0 g     F .text	00000080 epcs_read_device_id
040165d0 g     F .text	0000007c memcmp
04014740 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040790f4 g       *ABS*	00000000 __alt_stack_base
04014790 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
09001000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
0403066c g     O .rodata	000448f0 gesture_bmp
0400d140 g     F .text	00000174 __swsetup_r
04007308 g     F .text	000000f4 oc_i2c_init
04009900 g     F .text	000001b4 __divdf3
0400eed4 g     F .text	000000fc __sfp
04010eb8 g     F .text	0000007c __copybits
040776d0 g     O .rwdata	00000408 __malloc_av_
0400efdc g     F .text	00000004 __sinit_lock_release
0400d054 g     F .text	000000ac _vsnprintf_r
04006840 g     F .text	00000078 i2c_stop
0400961c g     F .text	000002e4 __muldf3
04011798 g     F .text	00000054 __sread
0401639c g     F .text	00000114 alt_find_file
04015ae4 g     F .text	000000a0 alt_dev_llist_insert
0401365c g     F .text	00000020 __malloc_lock
04001978 g     F .text	000002c0 vid_copy_line_to_frame_buffer
04013860 g     F .text	000000b0 sbrk
0400eb0c g     F .text	000001e8 _fflush_r
04011b40 g     F .text	000000cc _calloc_r
04078dfc g     O .rwdata	00000008 alt_flash_dev_list
0400854c g     F .text	00000070 QUEUE_New
04078e04 g       *ABS*	00000000 __bss_start
0400ad38 g     F .text	000000dc memset
04006068 g     F .text	000000cc main
04078e30 g     O .bss	00000004 alt_envp
04078e08 g     O .bss	00000004 __malloc_max_total_mem
04007d90 g     F .text	00000088 myprintf_hexarray
040146e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04005740 g     F .text	00000060 GUI_ShowTouchPoint
040069fc g     F .text	00000150 i2c_read
04011ab8 g     F .text	0000001c __swbuf
04008cac g     F .text	00000038 FrameReader_SelectFrame
04075714 g     O .rwdata	00000bc0 tahomabold_20
040118d0 g     F .text	00000008 __sclose
0400920c g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
04003ea4 g     F .text	000001c0 vid_print_char_alpha
04011dac g     F .text	00000014 fclose
04078db4 g     O .rwdata	00000004 cour10_font
04078f64 g     O .bss	00000190 _atexit0
0400d4f0 g     F .text	0000161c _dtoa_r
0400a474 g     F .text	00000784 _malloc_r
04078de8 g     O .rwdata	00000004 alt_errno
0400f900 g     F .text	000000a8 _fwalk
040004fc g     F .text	000000c0 PtDistance
040002c4 g     F .text	0000005c RectSet
04011074 g     F .text	000000f0 putc
04009d1c g     F .text	00000050 __divsi3
04000430 g     F .text	00000064 RectCopy
040753d4 g     O .rodata	00000014 __thenan_df
0400f010 g     F .text	0000013c _malloc_trim_r
04016958 g       *ABS*	00000000 __CTOR_END__
04008a38 g     F .text	00000044 VIPFR_GetDrawFrame
040140f0 g     F .text	00000260 alt_epcs_flash_write
040118d8 g     F .text	000000a4 strcmp
040039c0 g     F .text	0000024c read_from_frame
04016958 g       *ABS*	00000000 __DTOR_LIST__
04001248 g     F .text	0000007c vid_get_pixel
04012c38 g     F .text	0000005c __nedf2
04013c54 g     F .text	00000034 alt_irq_init
040137e0 g     F .text	00000080 alt_release_fd
0400aff4 g     F .text	0000006c sprintf
040753e8 g     O .rodata	00000100 __clz_tab
04007cf4 g     F .text	00000030 debug_output
04078e18 g     O .bss	00000004 _PathLocale
04016584 g     F .text	00000014 atexit
04011ad4 g     F .text	0000006c _write_r
04000200 g     F .text	00000084 IsPtInRect
0400fb14 g     F .text	0000001c setlocale
04078dc4 g     O .rwdata	00000004 _impure_ptr
04078e28 g     O .bss	00000004 alt_argc
04015be0 g     F .text	0000005c _do_dtors
04007e18 g     F .text	0000008c myprintf_dwordarray
04006df4 g     F .text	000001c0 I2CL_MultipleRead
04000020 g       .exceptions	00000000 alt_irq_entry
04010ab4 g     F .text	00000060 __ulp
04011760 g     F .text	00000038 __isinfd
0400eff8 g     F .text	00000018 __fp_unlock_all
04078dd4 g     O .rwdata	00000008 alt_fs_list
040072b0 g     F .text	00000058 Read32_Data
04000d6c g     F .text	00000108 vid_print_string
04007750 g     F .text	000001b0 OC_I2C_Read
04008c20 g     F .text	0000008c FrameReader_SetFrame1
0400fb30 g     F .text	0000000c localeconv
040153a0 g     F .text	000000f4 epcs_read_buffer
04008f1c g     F .text	000002c4 __ieee754_sqrt
04013d28 g     F .text	00000054 alt_epcs_flash_init
04013104 g     F .text	00000050 alt_ic_isr_register
04078e04 g       *ABS*	00000000 _edata
04004d14 g     F .text	00000048 GUI_TraceGesture
040790f4 g       *ABS*	00000000 _end
04015c3c g     F .text	00000068 alt_flash_open_dev
040057a0 g     F .text	00000060 ShowInfo
04002af0 g     F .text	00000054 max3
04014bb4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04008d1c g     F .text	000000b8 VIPFR_ReserveBackground
040131f0 g     F .text	000000a0 alt_ic_irq_disable
04015750 g     F .text	00000058 epcs_enter_4_bytes_mode
04001820 g     F .text	0000004c vid_merge_colors
040117ec g     F .text	00000088 __swrite
04078dcc g     O .rwdata	00000004 __malloc_trim_threshold
040160e4 g     F .text	00000020 altera_nios2_qsys_irq_init
04016598 g     F .text	00000038 exit
0400f9a8 g     F .text	000000b8 _fwalk_reent
0401090c g     F .text	000001a8 __mdiff
04015ca4 g     F .text	00000050 alt_flash_close_dev
04004980 g     F .text	0000008c IsContinuedPoint
04009d6c g     F .text	0000005c __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400efd4 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
040085bc g     F .text	00000030 QUEUE_Delete
040010bc g     F .text	0000018c vid_set_pixel
040088f4 g     F .text	00000108 VIPFR_SetFrameSize
04007ad8 g     F .text	0000021c OC_I2CL_Read
0401691c g     F .text	0000003c _exit
040091e0 g     F .text	0000002c __isnand
04015800 g     F .text	00000140 alt_alarm_start
0400072c g     F .text	00000040 vid_scroll_string_quit
04009e00 g     F .text	00000110 __muldi3
0400fb3c g     F .text	000001a8 __smakebuf_r
0400b0f4 g     F .text	0000008c strlen
04015494 g     F .text	00000050 epcs_write_enable
04015f8c g     F .text	00000158 open
04012cf8 g     F .text	00000064 __gedf2
04000320 g     F .text	00000088 RectInflate
04078dec g     O .rwdata	00000004 alt_priority_mask
04013154 g     F .text	0000009c alt_ic_irq_enable
0400d030 g     F .text	00000024 __vfprintf_internal
040095bc g     F .text	00000060 __subdf3
04002cec g     F .text	00000238 vid_bres_scan_edges
040145e8 g     F .text	00000098 alt_epcs_flash_read
040102e8 g     F .text	000000b0 __lo0bits
04078df4 g     O .rwdata	00000008 alt_alarm_list
04002b98 g     F .text	00000064 max_diff3
04015b84 g     F .text	0000005c _do_ctors
04006b4c g     F .text	00000140 I2CL_Write
04003878 g     F .text	00000148 merge_color_channels
04012ec8 g     F .text	000000cc close
04009fbc g     F .text	00000224 __pack_d
0400a460 g     F .text	00000014 free
0400efd8 g     F .text	00000004 __sinit_lock_acquire
0401554c g     F .text	0000011c epcs_write_buffer
04010038 g     F .text	00000144 __multadd
04010010 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001726 	beq	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00c10234 	movhi	r3,1032
 4000130:	18e39904 	addi	r3,r3,-29084
 4000134:	e0bffd17 	ldw	r2,-12(fp)
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	1885883a 	add	r2,r3,r2
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	01010234 	movhi	r4,1032
 4000148:	21239904 	addi	r4,r4,-29084
 400014c:	e0bffd17 	ldw	r2,-12(fp)
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	2085883a 	add	r2,r4,r2
 4000158:	10800104 	addi	r2,r2,4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400017c:	e0bffb17 	ldw	r2,-20(fp)
 4000180:	103fe31e 	bne	r2,zero,4000110 <__reset+0xfafff110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffc17 	ldw	r2,-16(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <__reset+0xfafff11c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a4:	e037883a 	mov	sp,fp
 40001a8:	dfc00117 	ldw	ra,4(sp)
 40001ac:	df000017 	ldw	fp,0(sp)
 40001b0:	dec00204 	addi	sp,sp,8
 40001b4:	f800283a 	ret

Disassembly of section .text:

040001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40001bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40001c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 40001c4:	00bffd16 	blt	zero,r2,40001bc <__reset+0xfafff1bc>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001c8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001d0:	06810234 	movhi	gp,1032
    ori gp, gp, %lo(_gp)
 40001d4:	d6836d14 	ori	gp,gp,3508
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001d8:	008101f4 	movhi	r2,1031
    ori r2, r2, %lo(__bss_start)
 40001dc:	10a38114 	ori	r2,r2,36356

    movhi r3, %hi(__bss_end)
 40001e0:	00c101f4 	movhi	r3,1031
    ori r3, r3, %lo(__bss_end)
 40001e4:	18e43d14 	ori	r3,r3,37108

    beq r2, r3, 1f
 40001e8:	10c00326 	beq	r2,r3,40001f8 <_start+0x40>

0:
    stw zero, (r2)
 40001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001f4:	10fffd36 	bltu	r2,r3,40001ec <__reset+0xfafff1ec>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001f8:	40135e40 	call	40135e4 <alt_main>

040001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001fc:	003fff06 	br	40001fc <__reset+0xfafff1fc>

04000200 <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
 4000200:	defffc04 	addi	sp,sp,-16
 4000204:	df000315 	stw	fp,12(sp)
 4000208:	df000304 	addi	fp,sp,12
 400020c:	e13ffe15 	stw	r4,-8(fp)
 4000210:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
 4000214:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 4000218:	e0bffe17 	ldw	r2,-8(fp)
 400021c:	10c00017 	ldw	r3,0(r2)
 4000220:	e0bfff17 	ldw	r2,-4(fp)
 4000224:	10800017 	ldw	r2,0(r2)
 4000228:	18801116 	blt	r3,r2,4000270 <IsPtInRect+0x70>
 400022c:	e0bffe17 	ldw	r2,-8(fp)
 4000230:	10800017 	ldw	r2,0(r2)
 4000234:	e0ffff17 	ldw	r3,-4(fp)
 4000238:	18c00117 	ldw	r3,4(r3)
 400023c:	18800c16 	blt	r3,r2,4000270 <IsPtInRect+0x70>
 4000240:	e0bffe17 	ldw	r2,-8(fp)
 4000244:	10c00117 	ldw	r3,4(r2)
 4000248:	e0bfff17 	ldw	r2,-4(fp)
 400024c:	10800217 	ldw	r2,8(r2)
 4000250:	18800716 	blt	r3,r2,4000270 <IsPtInRect+0x70>
 4000254:	e0bffe17 	ldw	r2,-8(fp)
 4000258:	10800117 	ldw	r2,4(r2)
 400025c:	e0ffff17 	ldw	r3,-4(fp)
 4000260:	18c00317 	ldw	r3,12(r3)
 4000264:	18800216 	blt	r3,r2,4000270 <IsPtInRect+0x70>
        bYes = TRUE;
 4000268:	00800044 	movi	r2,1
 400026c:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
 4000270:	e0bffd17 	ldw	r2,-12(fp)
}
 4000274:	e037883a 	mov	sp,fp
 4000278:	df000017 	ldw	fp,0(sp)
 400027c:	dec00104 	addi	sp,sp,4
 4000280:	f800283a 	ret

04000284 <PtSet>:

void PtSet(POINT *pt, int x, int y){
 4000284:	defffc04 	addi	sp,sp,-16
 4000288:	df000315 	stw	fp,12(sp)
 400028c:	df000304 	addi	fp,sp,12
 4000290:	e13ffd15 	stw	r4,-12(fp)
 4000294:	e17ffe15 	stw	r5,-8(fp)
 4000298:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
 400029c:	e0bffd17 	ldw	r2,-12(fp)
 40002a0:	e0fffe17 	ldw	r3,-8(fp)
 40002a4:	10c00015 	stw	r3,0(r2)
    pt->y = y;
 40002a8:	e0bffd17 	ldw	r2,-12(fp)
 40002ac:	e0ffff17 	ldw	r3,-4(fp)
 40002b0:	10c00115 	stw	r3,4(r2)
}
 40002b4:	e037883a 	mov	sp,fp
 40002b8:	df000017 	ldw	fp,0(sp)
 40002bc:	dec00104 	addi	sp,sp,4
 40002c0:	f800283a 	ret

040002c4 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
 40002c4:	defffb04 	addi	sp,sp,-20
 40002c8:	df000415 	stw	fp,16(sp)
 40002cc:	df000404 	addi	fp,sp,16
 40002d0:	e13ffc15 	stw	r4,-16(fp)
 40002d4:	e17ffd15 	stw	r5,-12(fp)
 40002d8:	e1bffe15 	stw	r6,-8(fp)
 40002dc:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
 40002e0:	e0bffc17 	ldw	r2,-16(fp)
 40002e4:	e0fffd17 	ldw	r3,-12(fp)
 40002e8:	10c00015 	stw	r3,0(r2)
    rc->right = right;
 40002ec:	e0bffc17 	ldw	r2,-16(fp)
 40002f0:	e0fffe17 	ldw	r3,-8(fp)
 40002f4:	10c00115 	stw	r3,4(r2)
    rc->top = top;
 40002f8:	e0bffc17 	ldw	r2,-16(fp)
 40002fc:	e0ffff17 	ldw	r3,-4(fp)
 4000300:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
 4000304:	e0bffc17 	ldw	r2,-16(fp)
 4000308:	e0c00117 	ldw	r3,4(fp)
 400030c:	10c00315 	stw	r3,12(r2)
}
 4000310:	e037883a 	mov	sp,fp
 4000314:	df000017 	ldw	fp,0(sp)
 4000318:	dec00104 	addi	sp,sp,4
 400031c:	f800283a 	ret

04000320 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
 4000320:	defffc04 	addi	sp,sp,-16
 4000324:	df000315 	stw	fp,12(sp)
 4000328:	df000304 	addi	fp,sp,12
 400032c:	e13ffd15 	stw	r4,-12(fp)
 4000330:	e17ffe15 	stw	r5,-8(fp)
 4000334:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
 4000338:	e0bffd17 	ldw	r2,-12(fp)
 400033c:	10c00017 	ldw	r3,0(r2)
 4000340:	e0bffe17 	ldw	r2,-8(fp)
 4000344:	1887c83a 	sub	r3,r3,r2
 4000348:	e0bffd17 	ldw	r2,-12(fp)
 400034c:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 4000350:	e0bffd17 	ldw	r2,-12(fp)
 4000354:	10c00117 	ldw	r3,4(r2)
 4000358:	e0bffe17 	ldw	r2,-8(fp)
 400035c:	1887883a 	add	r3,r3,r2
 4000360:	e0bffd17 	ldw	r2,-12(fp)
 4000364:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
 4000368:	e0bffd17 	ldw	r2,-12(fp)
 400036c:	10c00217 	ldw	r3,8(r2)
 4000370:	e0bfff17 	ldw	r2,-4(fp)
 4000374:	1887c83a 	sub	r3,r3,r2
 4000378:	e0bffd17 	ldw	r2,-12(fp)
 400037c:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 4000380:	e0bffd17 	ldw	r2,-12(fp)
 4000384:	10c00317 	ldw	r3,12(r2)
 4000388:	e0bfff17 	ldw	r2,-4(fp)
 400038c:	1887883a 	add	r3,r3,r2
 4000390:	e0bffd17 	ldw	r2,-12(fp)
 4000394:	10c00315 	stw	r3,12(r2)
}
 4000398:	e037883a 	mov	sp,fp
 400039c:	df000017 	ldw	fp,0(sp)
 40003a0:	dec00104 	addi	sp,sp,4
 40003a4:	f800283a 	ret

040003a8 <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
 40003a8:	defffc04 	addi	sp,sp,-16
 40003ac:	df000315 	stw	fp,12(sp)
 40003b0:	df000304 	addi	fp,sp,12
 40003b4:	e13ffd15 	stw	r4,-12(fp)
 40003b8:	e17ffe15 	stw	r5,-8(fp)
 40003bc:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
 40003c0:	e0bffd17 	ldw	r2,-12(fp)
 40003c4:	10c00017 	ldw	r3,0(r2)
 40003c8:	e0bffe17 	ldw	r2,-8(fp)
 40003cc:	1887883a 	add	r3,r3,r2
 40003d0:	e0bffd17 	ldw	r2,-12(fp)
 40003d4:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 40003d8:	e0bffd17 	ldw	r2,-12(fp)
 40003dc:	10c00117 	ldw	r3,4(r2)
 40003e0:	e0bffe17 	ldw	r2,-8(fp)
 40003e4:	1887883a 	add	r3,r3,r2
 40003e8:	e0bffd17 	ldw	r2,-12(fp)
 40003ec:	10c00115 	stw	r3,4(r2)
    rc->top += y;
 40003f0:	e0bffd17 	ldw	r2,-12(fp)
 40003f4:	10c00217 	ldw	r3,8(r2)
 40003f8:	e0bfff17 	ldw	r2,-4(fp)
 40003fc:	1887883a 	add	r3,r3,r2
 4000400:	e0bffd17 	ldw	r2,-12(fp)
 4000404:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 4000408:	e0bffd17 	ldw	r2,-12(fp)
 400040c:	10c00317 	ldw	r3,12(r2)
 4000410:	e0bfff17 	ldw	r2,-4(fp)
 4000414:	1887883a 	add	r3,r3,r2
 4000418:	e0bffd17 	ldw	r2,-12(fp)
 400041c:	10c00315 	stw	r3,12(r2)
}
 4000420:	e037883a 	mov	sp,fp
 4000424:	df000017 	ldw	fp,0(sp)
 4000428:	dec00104 	addi	sp,sp,4
 400042c:	f800283a 	ret

04000430 <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
 4000430:	defffd04 	addi	sp,sp,-12
 4000434:	df000215 	stw	fp,8(sp)
 4000438:	df000204 	addi	fp,sp,8
 400043c:	e13ffe15 	stw	r4,-8(fp)
 4000440:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
 4000444:	e0bfff17 	ldw	r2,-4(fp)
 4000448:	10c00017 	ldw	r3,0(r2)
 400044c:	e0bffe17 	ldw	r2,-8(fp)
 4000450:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
 4000454:	e0bfff17 	ldw	r2,-4(fp)
 4000458:	10c00117 	ldw	r3,4(r2)
 400045c:	e0bffe17 	ldw	r2,-8(fp)
 4000460:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
 4000464:	e0bfff17 	ldw	r2,-4(fp)
 4000468:	10c00217 	ldw	r3,8(r2)
 400046c:	e0bffe17 	ldw	r2,-8(fp)
 4000470:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
 4000474:	e0bfff17 	ldw	r2,-4(fp)
 4000478:	10c00317 	ldw	r3,12(r2)
 400047c:	e0bffe17 	ldw	r2,-8(fp)
 4000480:	10c00315 	stw	r3,12(r2)
}
 4000484:	e037883a 	mov	sp,fp
 4000488:	df000017 	ldw	fp,0(sp)
 400048c:	dec00104 	addi	sp,sp,4
 4000490:	f800283a 	ret

04000494 <RectWidth>:

int RectWidth(RECT *rc){
 4000494:	defffe04 	addi	sp,sp,-8
 4000498:	df000115 	stw	fp,4(sp)
 400049c:	df000104 	addi	fp,sp,4
 40004a0:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
 40004a4:	e0bfff17 	ldw	r2,-4(fp)
 40004a8:	10c00117 	ldw	r3,4(r2)
 40004ac:	e0bfff17 	ldw	r2,-4(fp)
 40004b0:	10800017 	ldw	r2,0(r2)
 40004b4:	1885c83a 	sub	r2,r3,r2
}
 40004b8:	e037883a 	mov	sp,fp
 40004bc:	df000017 	ldw	fp,0(sp)
 40004c0:	dec00104 	addi	sp,sp,4
 40004c4:	f800283a 	ret

040004c8 <RectHeight>:

int RectHeight(RECT *rc){
 40004c8:	defffe04 	addi	sp,sp,-8
 40004cc:	df000115 	stw	fp,4(sp)
 40004d0:	df000104 	addi	fp,sp,4
 40004d4:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
 40004d8:	e0bfff17 	ldw	r2,-4(fp)
 40004dc:	10c00317 	ldw	r3,12(r2)
 40004e0:	e0bfff17 	ldw	r2,-4(fp)
 40004e4:	10800217 	ldw	r2,8(r2)
 40004e8:	1885c83a 	sub	r2,r3,r2
}
 40004ec:	e037883a 	mov	sp,fp
 40004f0:	df000017 	ldw	fp,0(sp)
 40004f4:	dec00104 	addi	sp,sp,4
 40004f8:	f800283a 	ret

040004fc <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
 40004fc:	defff804 	addi	sp,sp,-32
 4000500:	dfc00715 	stw	ra,28(sp)
 4000504:	df000615 	stw	fp,24(sp)
 4000508:	dc000515 	stw	r16,20(sp)
 400050c:	df000504 	addi	fp,sp,20
 4000510:	e13ffe15 	stw	r4,-8(fp)
 4000514:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
 4000518:	e0bffe17 	ldw	r2,-8(fp)
 400051c:	10c00017 	ldw	r3,0(r2)
 4000520:	e0bfff17 	ldw	r2,-4(fp)
 4000524:	10800017 	ldw	r2,0(r2)
 4000528:	1885c83a 	sub	r2,r3,r2
 400052c:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
 4000530:	e0bffe17 	ldw	r2,-8(fp)
 4000534:	10c00117 	ldw	r3,4(r2)
 4000538:	e0bfff17 	ldw	r2,-4(fp)
 400053c:	10800117 	ldw	r2,4(r2)
 4000540:	1885c83a 	sub	r2,r3,r2
 4000544:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
 4000548:	e13ffb17 	ldw	r4,-20(fp)
 400054c:	e17ffb17 	ldw	r5,-20(fp)
 4000550:	4009dd80 	call	4009dd8 <__mulsi3>
 4000554:	1021883a 	mov	r16,r2
 4000558:	e13ffc17 	ldw	r4,-16(fp)
 400055c:	e17ffc17 	ldw	r5,-16(fp)
 4000560:	4009dd80 	call	4009dd8 <__mulsi3>
 4000564:	8085883a 	add	r2,r16,r2
 4000568:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
 400056c:	e13ffd17 	ldw	r4,-12(fp)
 4000570:	4009b100 	call	4009b10 <__floatsidf>
 4000574:	100b883a 	mov	r5,r2
 4000578:	180d883a 	mov	r6,r3
 400057c:	2809883a 	mov	r4,r5
 4000580:	300b883a 	mov	r5,r6
 4000584:	4008dd40 	call	4008dd4 <sqrt>
 4000588:	100b883a 	mov	r5,r2
 400058c:	180d883a 	mov	r6,r3
 4000590:	2809883a 	mov	r4,r5
 4000594:	300b883a 	mov	r5,r6
 4000598:	4009be40 	call	4009be4 <__fixdfsi>
 400059c:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
 40005a0:	e0bffd17 	ldw	r2,-12(fp)
}
 40005a4:	e037883a 	mov	sp,fp
 40005a8:	dfc00217 	ldw	ra,8(sp)
 40005ac:	df000117 	ldw	fp,4(sp)
 40005b0:	dc000017 	ldw	r16,0(sp)
 40005b4:	dec00304 	addi	sp,sp,12
 40005b8:	f800283a 	ret

040005bc <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
 40005bc:	defffd04 	addi	sp,sp,-12
 40005c0:	df000215 	stw	fp,8(sp)
 40005c4:	df000204 	addi	fp,sp,8
 40005c8:	e13ffe15 	stw	r4,-8(fp)
 40005cc:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
 40005d0:	e0bfff17 	ldw	r2,-4(fp)
 40005d4:	10c00017 	ldw	r3,0(r2)
 40005d8:	e0bffe17 	ldw	r2,-8(fp)
 40005dc:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
 40005e0:	e0bfff17 	ldw	r2,-4(fp)
 40005e4:	10c00117 	ldw	r3,4(r2)
 40005e8:	e0bffe17 	ldw	r2,-8(fp)
 40005ec:	10c00115 	stw	r3,4(r2)
}
 40005f0:	e037883a 	mov	sp,fp
 40005f4:	df000017 	ldw	fp,0(sp)
 40005f8:	dec00104 	addi	sp,sp,4
 40005fc:	f800283a 	ret

04000600 <vid_clean_screen>:
#include "sys/alt_cache.h"
#include "system.h"


// richard add
void vid_clean_screen(alt_video_display* display, int color){
 4000600:	defffa04 	addi	sp,sp,-24
 4000604:	dfc00515 	stw	ra,20(sp)
 4000608:	df000415 	stw	fp,16(sp)
 400060c:	df000404 	addi	fp,sp,16
 4000610:	e13ffe15 	stw	r4,-8(fp)
 4000614:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
 4000618:	e0bffe17 	ldw	r2,-8(fp)
 400061c:	10c00517 	ldw	r3,20(r2)
 4000620:	e0bffe17 	ldw	r2,-8(fp)
 4000624:	10800617 	ldw	r2,24(r2)
 4000628:	e13fff17 	ldw	r4,-4(fp)
 400062c:	d9000015 	stw	r4,0(sp)
 4000630:	e13ffe17 	ldw	r4,-8(fp)
 4000634:	d9000115 	stw	r4,4(sp)
 4000638:	0009883a 	mov	r4,zero
 400063c:	000b883a 	mov	r5,zero
 4000640:	180d883a 	mov	r6,r3
 4000644:	100f883a 	mov	r7,r2
 4000648:	40012c40 	call	40012c4 <vid_paint_block>
}
 400064c:	e037883a 	mov	sp,fp
 4000650:	dfc00117 	ldw	ra,4(sp)
 4000654:	df000017 	ldw	fp,0(sp)
 4000658:	dec00204 	addi	sp,sp,8
 400065c:	f800283a 	ret

04000660 <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 4000660:	defff704 	addi	sp,sp,-36
 4000664:	dfc00815 	stw	ra,32(sp)
 4000668:	df000715 	stw	fp,28(sp)
 400066c:	df000704 	addi	fp,sp,28
 4000670:	e13ffc15 	stw	r4,-16(fp)
 4000674:	e17ffd15 	stw	r5,-12(fp)
 4000678:	e1bffe15 	stw	r6,-8(fp)
 400067c:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 4000680:	e0fffd17 	ldw	r3,-12(fp)
 4000684:	e0bfff17 	ldw	r2,-4(fp)
 4000688:	1880111e 	bne	r3,r2,40006d0 <vid_draw_line+0x70>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 400068c:	e0bffc17 	ldw	r2,-16(fp)
 4000690:	113fffcc 	andi	r4,r2,65535
 4000694:	2120001c 	xori	r4,r4,32768
 4000698:	21200004 	addi	r4,r4,-32768
 400069c:	e0bffe17 	ldw	r2,-8(fp)
 40006a0:	10ffffcc 	andi	r3,r2,65535
 40006a4:	18e0001c 	xori	r3,r3,32768
 40006a8:	18e00004 	addi	r3,r3,-32768
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
 40006ac:	e0bffd17 	ldw	r2,-12(fp)
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 40006b0:	10bfffcc 	andi	r2,r2,65535
 40006b4:	e1400417 	ldw	r5,16(fp)
 40006b8:	d9400015 	stw	r5,0(sp)
 40006bc:	180b883a 	mov	r5,r3
 40006c0:	100d883a 	mov	r6,r2
 40006c4:	e1c00317 	ldw	r7,12(fp)
 40006c8:	40015240 	call	4001524 <vid_draw_horiz_line>
 40006cc:	00001206 	br	4000718 <vid_draw_line+0xb8>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 40006d0:	e0bffc17 	ldw	r2,-16(fp)
 40006d4:	113fffcc 	andi	r4,r2,65535
                          (unsigned short)vert_start, 
 40006d8:	e0bffd17 	ldw	r2,-12(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 40006dc:	117fffcc 	andi	r5,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
 40006e0:	e0bffe17 	ldw	r2,-8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 40006e4:	10ffffcc 	andi	r3,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
 40006e8:	e0bfff17 	ldw	r2,-4(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 40006ec:	10bfffcc 	andi	r2,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
 40006f0:	e1800217 	ldw	r6,8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 40006f4:	31bfffcc 	andi	r6,r6,65535
 40006f8:	d9800015 	stw	r6,0(sp)
 40006fc:	e1800317 	ldw	r6,12(fp)
 4000700:	d9800115 	stw	r6,4(sp)
 4000704:	e1800417 	ldw	r6,16(fp)
 4000708:	d9800215 	stw	r6,8(sp)
 400070c:	180d883a 	mov	r6,r3
 4000710:	100f883a 	mov	r7,r2
 4000714:	4001c380 	call	4001c38 <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 4000718:	e037883a 	mov	sp,fp
 400071c:	dfc00117 	ldw	ra,4(sp)
 4000720:	df000017 	ldw	fp,0(sp)
 4000724:	dec00204 	addi	sp,sp,8
 4000728:	f800283a 	ret

0400072c <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
 400072c:	defffd04 	addi	sp,sp,-12
 4000730:	dfc00215 	stw	ra,8(sp)
 4000734:	df000115 	stw	fp,4(sp)
 4000738:	df000104 	addi	fp,sp,4
 400073c:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
 4000740:	e0bfff17 	ldw	r2,-4(fp)
 4000744:	10800517 	ldw	r2,20(r2)
 4000748:	1009883a 	mov	r4,r2
 400074c:	400a4600 	call	400a460 <free>
  free(scroll);
 4000750:	e13fff17 	ldw	r4,-4(fp)
 4000754:	400a4600 	call	400a460 <free>
}
 4000758:	e037883a 	mov	sp,fp
 400075c:	dfc00117 	ldw	ra,4(sp)
 4000760:	df000017 	ldw	fp,0(sp)
 4000764:	dec00204 	addi	sp,sp,8
 4000768:	f800283a 	ret

0400076c <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
 400076c:	defff904 	addi	sp,sp,-28
 4000770:	dfc00615 	stw	ra,24(sp)
 4000774:	df000515 	stw	fp,20(sp)
 4000778:	df000504 	addi	fp,sp,20
 400077c:	e13ffc15 	stw	r4,-16(fp)
 4000780:	e17ffd15 	stw	r5,-12(fp)
 4000784:	e1bffe15 	stw	r6,-8(fp)
 4000788:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
 400078c:	01000f04 	movi	r4,60
 4000790:	400a44c0 	call	400a44c <malloc>
 4000794:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
 4000798:	e0bffb17 	ldw	r2,-20(fp)
 400079c:	e0fffc17 	ldw	r3,-16(fp)
 40007a0:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
 40007a4:	e0bffb17 	ldw	r2,-20(fp)
 40007a8:	e0fffd17 	ldw	r3,-12(fp)
 40007ac:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
 40007b0:	e0bffb17 	ldw	r2,-20(fp)
 40007b4:	e0fffe17 	ldw	r3,-8(fp)
 40007b8:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
 40007bc:	e0bffb17 	ldw	r2,-20(fp)
 40007c0:	e0ffff17 	ldw	r3,-4(fp)
 40007c4:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
 40007c8:	e0bffb17 	ldw	r2,-20(fp)
 40007cc:	e0c00217 	ldw	r3,8(fp)
 40007d0:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
 40007d4:	e1000517 	ldw	r4,20(fp)
 40007d8:	400b0f40 	call	400b0f4 <strlen>
 40007dc:	10800084 	addi	r2,r2,2
 40007e0:	1009883a 	mov	r4,r2
 40007e4:	400a44c0 	call	400a44c <malloc>
 40007e8:	1007883a 	mov	r3,r2
 40007ec:	e0bffb17 	ldw	r2,-20(fp)
 40007f0:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
 40007f4:	e0bffb17 	ldw	r2,-20(fp)
 40007f8:	10800517 	ldw	r2,20(r2)
 40007fc:	1009883a 	mov	r4,r2
 4000800:	e1400517 	ldw	r5,20(fp)
 4000804:	400b0600 	call	400b060 <strcpy>
  scroll->font = font;
 4000808:	e0bffb17 	ldw	r2,-20(fp)
 400080c:	e0c00317 	ldw	r3,12(fp)
 4000810:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
 4000814:	e0bffb17 	ldw	r2,-20(fp)
 4000818:	e0c00417 	ldw	r3,16(fp)
 400081c:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4000820:	00810234 	movhi	r2,1032
 4000824:	10a38e04 	addi	r2,r2,-29128
 4000828:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
 400082c:	1007883a 	mov	r3,r2
 4000830:	e0bffb17 	ldw	r2,-20(fp)
 4000834:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
 4000838:	e0bffb17 	ldw	r2,-20(fp)
 400083c:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
 4000840:	e0bffb17 	ldw	r2,-20(fp)
 4000844:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
 4000848:	e0bffb17 	ldw	r2,-20(fp)
 400084c:	10c00217 	ldw	r3,8(r2)
 4000850:	e0bffb17 	ldw	r2,-20(fp)
 4000854:	10800017 	ldw	r2,0(r2)
 4000858:	1887c83a 	sub	r3,r3,r2
 400085c:	e0bffb17 	ldw	r2,-20(fp)
 4000860:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
 4000864:	e1000517 	ldw	r4,20(fp)
 4000868:	400b0f40 	call	400b0f4 <strlen>
 400086c:	1007883a 	mov	r3,r2
 4000870:	e0bffb17 	ldw	r2,-20(fp)
 4000874:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
 4000878:	e0bffb17 	ldw	r2,-20(fp)
 400087c:	10800c17 	ldw	r2,48(r2)
 4000880:	100690fa 	slli	r3,r2,3
 4000884:	e0bffb17 	ldw	r2,-20(fp)
 4000888:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
 400088c:	e0bffb17 	ldw	r2,-20(fp)
 4000890:	10c00b17 	ldw	r3,44(r2)
 4000894:	e0bffb17 	ldw	r2,-20(fp)
 4000898:	10800e17 	ldw	r2,56(r2)
 400089c:	1887883a 	add	r3,r3,r2
 40008a0:	e0bffb17 	ldw	r2,-20(fp)
 40008a4:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
 40008a8:	e0bffb17 	ldw	r2,-20(fp)
  
}
 40008ac:	e037883a 	mov	sp,fp
 40008b0:	dfc00117 	ldw	ra,4(sp)
 40008b4:	df000017 	ldw	fp,0(sp)
 40008b8:	dec00204 	addi	sp,sp,8
 40008bc:	f800283a 	ret

040008c0 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
 40008c0:	deffec04 	addi	sp,sp,-80
 40008c4:	dfc01315 	stw	ra,76(sp)
 40008c8:	df001215 	stw	fp,72(sp)
 40008cc:	dc401115 	stw	r17,68(sp)
 40008d0:	dc001015 	stw	r16,64(sp)
 40008d4:	df001004 	addi	fp,sp,64
 40008d8:	e13ffe15 	stw	r4,-8(fp)
 40008dc:	e17fff15 	stw	r5,-4(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
 40008e0:	00800044 	movi	r2,1
 40008e4:	e0bff805 	stb	r2,-32(fp)
 40008e8:	00810234 	movhi	r2,1032
 40008ec:	10a38e04 	addi	r2,r2,-29128
 40008f0:	10800017 	ldw	r2,0(r2)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
 40008f4:	1021883a 	mov	r16,r2
 40008f8:	e0bffe17 	ldw	r2,-8(fp)
 40008fc:	10800817 	ldw	r2,32(r2)
 4000900:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4000904:	00810234 	movhi	r2,1032
 4000908:	10a38d04 	addi	r2,r2,-29132
 400090c:	10800017 	ldw	r2,0(r2)
 4000910:	1007883a 	mov	r3,r2
 4000914:	e0bffe17 	ldw	r2,-8(fp)
 4000918:	10800717 	ldw	r2,28(r2)
 400091c:	1809883a 	mov	r4,r3
 4000920:	100b883a 	mov	r5,r2
 4000924:	4009dd80 	call	4009dd8 <__mulsi3>
 4000928:	1009883a 	mov	r4,r2
 400092c:	0140fa04 	movi	r5,1000
 4000930:	4009dc80 	call	4009dc8 <__udivsi3>
 4000934:	8885883a 	add	r2,r17,r2
 4000938:	8080bd36 	bltu	r16,r2,4000c30 <vid_scroll_string+0x370>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400093c:	00810234 	movhi	r2,1032
 4000940:	10a38e04 	addi	r2,r2,-29128
 4000944:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
 4000948:	1007883a 	mov	r3,r2
 400094c:	e0bffe17 	ldw	r2,-8(fp)
 4000950:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
 4000954:	e0bffe17 	ldw	r2,-8(fp)
 4000958:	10800a03 	ldbu	r2,40(r2)
 400095c:	10803fcc 	andi	r2,r2,255
 4000960:	1080201c 	xori	r2,r2,128
 4000964:	10bfe004 	addi	r2,r2,-128
 4000968:	1000061e 	bne	r2,zero,4000984 <vid_scroll_string+0xc4>
      scroll->text_scroll_index = 0;
 400096c:	e0bffe17 	ldw	r2,-8(fp)
 4000970:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
 4000974:	e0bffe17 	ldw	r2,-8(fp)
 4000978:	00c00044 	movi	r3,1
 400097c:	10c00a05 	stb	r3,40(r2)
 4000980:	00000e06 	br	40009bc <vid_scroll_string+0xfc>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
 4000984:	e0bffe17 	ldw	r2,-8(fp)
 4000988:	10c00917 	ldw	r3,36(r2)
 400098c:	e0bffe17 	ldw	r2,-8(fp)
 4000990:	10800d17 	ldw	r2,52(r2)
 4000994:	18800316 	blt	r3,r2,40009a4 <vid_scroll_string+0xe4>
      scroll->text_scroll_started = 0;
 4000998:	e0bffe17 	ldw	r2,-8(fp)
 400099c:	10000a05 	stb	zero,40(r2)
 40009a0:	00000606 	br	40009bc <vid_scroll_string+0xfc>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
 40009a4:	e0bffe17 	ldw	r2,-8(fp)
 40009a8:	10c00917 	ldw	r3,36(r2)
 40009ac:	e0bff807 	ldb	r2,-32(fp)
 40009b0:	1887883a 	add	r3,r3,r2
 40009b4:	e0bffe17 	ldw	r2,-8(fp)
 40009b8:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
 40009bc:	e0bffe17 	ldw	r2,-8(fp)
 40009c0:	10c00917 	ldw	r3,36(r2)
 40009c4:	e0bffe17 	ldw	r2,-8(fp)
 40009c8:	10800b17 	ldw	r2,44(r2)
 40009cc:	18800a0e 	bge	r3,r2,40009f8 <vid_scroll_string+0x138>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
 40009d0:	e0bffe17 	ldw	r2,-8(fp)
 40009d4:	10c00017 	ldw	r3,0(r2)
 40009d8:	e0bffe17 	ldw	r2,-8(fp)
 40009dc:	10800b17 	ldw	r2,44(r2)
 40009e0:	1887883a 	add	r3,r3,r2
 40009e4:	e0bffe17 	ldw	r2,-8(fp)
 40009e8:	10800917 	ldw	r2,36(r2)
 40009ec:	1885c83a 	sub	r2,r3,r2
 40009f0:	e0bff315 	stw	r2,-52(fp)
 40009f4:	00000306 	br	4000a04 <vid_scroll_string+0x144>
    } else {
      x_start = scroll->hbegin;
 40009f8:	e0bffe17 	ldw	r2,-8(fp)
 40009fc:	10800017 	ldw	r2,0(r2)
 4000a00:	e0bff315 	stw	r2,-52(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
 4000a04:	e0bffe17 	ldw	r2,-8(fp)
 4000a08:	10800e17 	ldw	r2,56(r2)
 4000a0c:	e0fffe17 	ldw	r3,-8(fp)
 4000a10:	18c00917 	ldw	r3,36(r3)
 4000a14:	1880040e 	bge	r3,r2,4000a28 <vid_scroll_string+0x168>
      x_end = scroll->hend;
 4000a18:	e0bffe17 	ldw	r2,-8(fp)
 4000a1c:	10800217 	ldw	r2,8(r2)
 4000a20:	e0bff415 	stw	r2,-48(fp)
 4000a24:	00000906 	br	4000a4c <vid_scroll_string+0x18c>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
 4000a28:	e0bffe17 	ldw	r2,-8(fp)
 4000a2c:	10c00217 	ldw	r3,8(r2)
 4000a30:	e0bffe17 	ldw	r2,-8(fp)
 4000a34:	10800917 	ldw	r2,36(r2)
 4000a38:	1887c83a 	sub	r3,r3,r2
 4000a3c:	e0bffe17 	ldw	r2,-8(fp)
 4000a40:	10800e17 	ldw	r2,56(r2)
 4000a44:	1885883a 	add	r2,r3,r2
 4000a48:	e0bff415 	stw	r2,-48(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 4000a4c:	e0bff317 	ldw	r2,-52(fp)
 4000a50:	e0bff515 	stw	r2,-44(fp)
 4000a54:	00006206 	br	4000be0 <vid_scroll_string+0x320>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
 4000a58:	e0bffe17 	ldw	r2,-8(fp)
 4000a5c:	10c00917 	ldw	r3,36(r2)
 4000a60:	e0bffe17 	ldw	r2,-8(fp)
 4000a64:	10800b17 	ldw	r2,44(r2)
 4000a68:	1880050e 	bge	r3,r2,4000a80 <vid_scroll_string+0x1c0>
        string_x_index = (x_index - x_start);
 4000a6c:	e0fff517 	ldw	r3,-44(fp)
 4000a70:	e0bff317 	ldw	r2,-52(fp)
 4000a74:	1885c83a 	sub	r2,r3,r2
 4000a78:	e0bff615 	stw	r2,-40(fp)
 4000a7c:	00000a06 	br	4000aa8 <vid_scroll_string+0x1e8>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
 4000a80:	e0bffe17 	ldw	r2,-8(fp)
 4000a84:	10c00917 	ldw	r3,36(r2)
 4000a88:	e0bffe17 	ldw	r2,-8(fp)
 4000a8c:	10800b17 	ldw	r2,44(r2)
 4000a90:	1887c83a 	sub	r3,r3,r2
 4000a94:	e0bff517 	ldw	r2,-44(fp)
 4000a98:	1887883a 	add	r3,r3,r2
 4000a9c:	e0bff317 	ldw	r2,-52(fp)
 4000aa0:	1885c83a 	sub	r2,r3,r2
 4000aa4:	e0bff615 	stw	r2,-40(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
 4000aa8:	e0bff617 	ldw	r2,-40(fp)
 4000aac:	1000010e 	bge	r2,zero,4000ab4 <vid_scroll_string+0x1f4>
 4000ab0:	108001c4 	addi	r2,r2,7
 4000ab4:	1005d0fa 	srai	r2,r2,3
 4000ab8:	e0bff915 	stw	r2,-28(fp)
      character = scroll->string[string_char_index];
 4000abc:	e0bffe17 	ldw	r2,-8(fp)
 4000ac0:	10c00517 	ldw	r3,20(r2)
 4000ac4:	e0bff917 	ldw	r2,-28(fp)
 4000ac8:	1885883a 	add	r2,r3,r2
 4000acc:	10800003 	ldbu	r2,0(r2)
 4000ad0:	e0bffa05 	stb	r2,-24(fp)
      char_column = (string_x_index % 8);
 4000ad4:	e0fff617 	ldw	r3,-40(fp)
 4000ad8:	00a00034 	movhi	r2,32768
 4000adc:	108001c4 	addi	r2,r2,7
 4000ae0:	1884703a 	and	r2,r3,r2
 4000ae4:	1000040e 	bge	r2,zero,4000af8 <vid_scroll_string+0x238>
 4000ae8:	10bfffc4 	addi	r2,r2,-1
 4000aec:	00fffe04 	movi	r3,-8
 4000af0:	10c4b03a 	or	r2,r2,r3
 4000af4:	10800044 	addi	r2,r2,1
 4000af8:	e0bffb15 	stw	r2,-20(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
 4000afc:	00c02004 	movi	r3,128
 4000b00:	e0bffb17 	ldw	r2,-20(fp)
 4000b04:	1884d83a 	srl	r2,r3,r2
 4000b08:	e0bffc05 	stb	r2,-16(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
 4000b0c:	e0bffe17 	ldw	r2,-8(fp)
 4000b10:	14000617 	ldw	r16,24(r2)
 4000b14:	e0bffa07 	ldb	r2,-24(fp)
 4000b18:	1009883a 	mov	r4,r2
 4000b1c:	014002c4 	movi	r5,11
 4000b20:	4009dd80 	call	4009dd8 <__mulsi3>
 4000b24:	10bfa804 	addi	r2,r2,-352
 4000b28:	8085883a 	add	r2,r16,r2
 4000b2c:	e0bffd15 	stw	r2,-12(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 4000b30:	e03ff715 	stw	zero,-36(fp)
 4000b34:	00002406 	br	4000bc8 <vid_scroll_string+0x308>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
 4000b38:	e0bff717 	ldw	r2,-36(fp)
 4000b3c:	e0fffd17 	ldw	r3,-12(fp)
 4000b40:	1885883a 	add	r2,r3,r2
 4000b44:	10c00003 	ldbu	r3,0(r2)
 4000b48:	e0bffc03 	ldbu	r2,-16(fp)
 4000b4c:	1884703a 	and	r2,r3,r2
 4000b50:	10803fcc 	andi	r2,r2,255
 4000b54:	1080201c 	xori	r2,r2,128
 4000b58:	10bfe004 	addi	r2,r2,-128
 4000b5c:	10000c26 	beq	r2,zero,4000b90 <vid_scroll_string+0x2d0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
 4000b60:	e0bffe17 	ldw	r2,-8(fp)
 4000b64:	10c00117 	ldw	r3,4(r2)
 4000b68:	e0bff717 	ldw	r2,-36(fp)
 4000b6c:	1887883a 	add	r3,r3,r2
 4000b70:	e0bffe17 	ldw	r2,-8(fp)
 4000b74:	10800317 	ldw	r2,12(r2)
 4000b78:	e13ff517 	ldw	r4,-44(fp)
 4000b7c:	180b883a 	mov	r5,r3
 4000b80:	100d883a 	mov	r6,r2
 4000b84:	e1ffff17 	ldw	r7,-4(fp)
 4000b88:	40010bc0 	call	40010bc <vid_set_pixel>
 4000b8c:	00000b06 	br	4000bbc <vid_scroll_string+0x2fc>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
 4000b90:	e0bffe17 	ldw	r2,-8(fp)
 4000b94:	10c00117 	ldw	r3,4(r2)
 4000b98:	e0bff717 	ldw	r2,-36(fp)
 4000b9c:	1887883a 	add	r3,r3,r2
 4000ba0:	e0bffe17 	ldw	r2,-8(fp)
 4000ba4:	10800417 	ldw	r2,16(r2)
 4000ba8:	e13ff517 	ldw	r4,-44(fp)
 4000bac:	180b883a 	mov	r5,r3
 4000bb0:	100d883a 	mov	r6,r2
 4000bb4:	e1ffff17 	ldw	r7,-4(fp)
 4000bb8:	40010bc0 	call	40010bc <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 4000bbc:	e0bff717 	ldw	r2,-36(fp)
 4000bc0:	10800044 	addi	r2,r2,1
 4000bc4:	e0bff715 	stw	r2,-36(fp)
 4000bc8:	e0bff717 	ldw	r2,-36(fp)
 4000bcc:	108002d0 	cmplti	r2,r2,11
 4000bd0:	103fd91e 	bne	r2,zero,4000b38 <__reset+0xfafffb38>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 4000bd4:	e0bff517 	ldw	r2,-44(fp)
 4000bd8:	10800044 	addi	r2,r2,1
 4000bdc:	e0bff515 	stw	r2,-44(fp)
 4000be0:	e0fff517 	ldw	r3,-44(fp)
 4000be4:	e0bff417 	ldw	r2,-48(fp)
 4000be8:	18bf9b16 	blt	r3,r2,4000a58 <__reset+0xfafffa58>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
 4000bec:	e0bffe17 	ldw	r2,-8(fp)
 4000bf0:	10c00117 	ldw	r3,4(r2)
 4000bf4:	e0bffe17 	ldw	r2,-8(fp)
 4000bf8:	10800117 	ldw	r2,4(r2)
 4000bfc:	10800284 	addi	r2,r2,10
 4000c00:	e13ffe17 	ldw	r4,-8(fp)
 4000c04:	21000417 	ldw	r4,16(r4)
 4000c08:	01400044 	movi	r5,1
 4000c0c:	d9400015 	stw	r5,0(sp)
 4000c10:	d9000115 	stw	r4,4(sp)
 4000c14:	e13fff17 	ldw	r4,-4(fp)
 4000c18:	d9000215 	stw	r4,8(sp)
 4000c1c:	e13ff417 	ldw	r4,-48(fp)
 4000c20:	180b883a 	mov	r5,r3
 4000c24:	e1bff417 	ldw	r6,-48(fp)
 4000c28:	100f883a 	mov	r7,r2
 4000c2c:	40006600 	call	4000660 <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
 4000c30:	0005883a 	mov	r2,zero
}
 4000c34:	e037883a 	mov	sp,fp
 4000c38:	dfc00317 	ldw	ra,12(sp)
 4000c3c:	df000217 	ldw	fp,8(sp)
 4000c40:	dc400117 	ldw	r17,4(sp)
 4000c44:	dc000017 	ldw	r16,0(sp)
 4000c48:	dec00404 	addi	sp,sp,16
 4000c4c:	f800283a 	ret

04000c50 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
 4000c50:	defff504 	addi	sp,sp,-44
 4000c54:	dfc00a15 	stw	ra,40(sp)
 4000c58:	df000915 	stw	fp,36(sp)
 4000c5c:	df000904 	addi	fp,sp,36
 4000c60:	e13ffc15 	stw	r4,-16(fp)
 4000c64:	e17ffd15 	stw	r5,-12(fp)
 4000c68:	e1bffe15 	stw	r6,-8(fp)
 4000c6c:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
 4000c70:	e0800217 	ldw	r2,8(fp)
 4000c74:	00803716 	blt	zero,r2,4000d54 <vid_move_block+0x104>
 4000c78:	e0800317 	ldw	r2,12(fp)
 4000c7c:	00803516 	blt	zero,r2,4000d54 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 4000c80:	e0bffd17 	ldw	r2,-12(fp)
 4000c84:	e0bff815 	stw	r2,-32(fp)
 4000c88:	00002f06 	br	4000d48 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
 4000c8c:	e0fff817 	ldw	r3,-32(fp)
 4000c90:	e0800317 	ldw	r2,12(fp)
 4000c94:	1885883a 	add	r2,r3,r2
 4000c98:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
 4000c9c:	e0bffc17 	ldw	r2,-16(fp)
 4000ca0:	e0bff715 	stw	r2,-36(fp)
 4000ca4:	00002206 	br	4000d30 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
 4000ca8:	e0fff717 	ldw	r3,-36(fp)
 4000cac:	e0800217 	ldw	r2,8(fp)
 4000cb0:	1885883a 	add	r2,r3,r2
 4000cb4:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
 4000cb8:	e13ff717 	ldw	r4,-36(fp)
 4000cbc:	e17ff817 	ldw	r5,-32(fp)
 4000cc0:	e1800517 	ldw	r6,20(fp)
 4000cc4:	40012480 	call	4001248 <vid_get_pixel>
 4000cc8:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
 4000ccc:	e0bffb0f 	ldh	r2,-20(fp)
 4000cd0:	e13ffa17 	ldw	r4,-24(fp)
 4000cd4:	e17ff917 	ldw	r5,-28(fp)
 4000cd8:	100d883a 	mov	r6,r2
 4000cdc:	e1c00517 	ldw	r7,20(fp)
 4000ce0:	40010bc0 	call	40010bc <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
 4000ce4:	e0fffe17 	ldw	r3,-8(fp)
 4000ce8:	e0800217 	ldw	r2,8(fp)
 4000cec:	1885883a 	add	r2,r3,r2
 4000cf0:	e0fff717 	ldw	r3,-36(fp)
 4000cf4:	1880050e 	bge	r3,r2,4000d0c <vid_move_block+0xbc>
 4000cf8:	e0ffff17 	ldw	r3,-4(fp)
 4000cfc:	e0800317 	ldw	r2,12(fp)
 4000d00:	1885883a 	add	r2,r3,r2
 4000d04:	e0fff817 	ldw	r3,-32(fp)
 4000d08:	18800616 	blt	r3,r2,4000d24 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
 4000d0c:	e0800417 	ldw	r2,16(fp)
 4000d10:	e13ff717 	ldw	r4,-36(fp)
 4000d14:	e17ff817 	ldw	r5,-32(fp)
 4000d18:	100d883a 	mov	r6,r2
 4000d1c:	e1c00517 	ldw	r7,20(fp)
 4000d20:	40010bc0 	call	40010bc <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
 4000d24:	e0bff717 	ldw	r2,-36(fp)
 4000d28:	10800044 	addi	r2,r2,1
 4000d2c:	e0bff715 	stw	r2,-36(fp)
 4000d30:	e0fff717 	ldw	r3,-36(fp)
 4000d34:	e0bffe17 	ldw	r2,-8(fp)
 4000d38:	18bfdb16 	blt	r3,r2,4000ca8 <__reset+0xfafffca8>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 4000d3c:	e0bff817 	ldw	r2,-32(fp)
 4000d40:	10800044 	addi	r2,r2,1
 4000d44:	e0bff815 	stw	r2,-32(fp)
 4000d48:	e0fff817 	ldw	r3,-32(fp)
 4000d4c:	e0bfff17 	ldw	r2,-4(fp)
 4000d50:	18bfce16 	blt	r3,r2,4000c8c <__reset+0xfafffc8c>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
 4000d54:	0005883a 	mov	r2,zero
}
 4000d58:	e037883a 	mov	sp,fp
 4000d5c:	dfc00117 	ldw	ra,4(sp)
 4000d60:	df000017 	ldw	fp,0(sp)
 4000d64:	dec00204 	addi	sp,sp,8
 4000d68:	f800283a 	ret

04000d6c <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
 4000d6c:	defff604 	addi	sp,sp,-40
 4000d70:	dfc00915 	stw	ra,36(sp)
 4000d74:	df000815 	stw	fp,32(sp)
 4000d78:	df000804 	addi	fp,sp,32
 4000d7c:	e13ffc15 	stw	r4,-16(fp)
 4000d80:	e17ffd15 	stw	r5,-12(fp)
 4000d84:	e1bffe15 	stw	r6,-8(fp)
 4000d88:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4000d8c:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4000d90:	e0bffc17 	ldw	r2,-16(fp)
 4000d94:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 4000d98:	00002806 	br	4000e3c <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
 4000d9c:	e0bffa17 	ldw	r2,-24(fp)
 4000da0:	e0c00317 	ldw	r3,12(fp)
 4000da4:	1885883a 	add	r2,r3,r2
 4000da8:	10800003 	ldbu	r2,0(r2)
 4000dac:	10803fcc 	andi	r2,r2,255
 4000db0:	1080201c 	xori	r2,r2,128
 4000db4:	10bfe004 	addi	r2,r2,-128
 4000db8:	10800298 	cmpnei	r2,r2,10
 4000dbc:	1000091e 	bne	r2,zero,4000de4 <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
 4000dc0:	e0bffb17 	ldw	r2,-20(fp)
 4000dc4:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
 4000dc8:	e0bffd17 	ldw	r2,-12(fp)
 4000dcc:	10800304 	addi	r2,r2,12
 4000dd0:	e0bffd15 	stw	r2,-12(fp)
      i++;
 4000dd4:	e0bffa17 	ldw	r2,-24(fp)
 4000dd8:	10800044 	addi	r2,r2,1
 4000ddc:	e0bffa15 	stw	r2,-24(fp)
      continue;
 4000de0:	00001606 	br	4000e3c <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
 4000de4:	e0bffa17 	ldw	r2,-24(fp)
 4000de8:	e0c00317 	ldw	r3,12(fp)
 4000dec:	1885883a 	add	r2,r3,r2
 4000df0:	10800003 	ldbu	r2,0(r2)
 4000df4:	10803fcc 	andi	r2,r2,255
 4000df8:	1080201c 	xori	r2,r2,128
 4000dfc:	10bfe004 	addi	r2,r2,-128
 4000e00:	e0ffff17 	ldw	r3,-4(fp)
 4000e04:	d8c00015 	stw	r3,0(sp)
 4000e08:	e0c00217 	ldw	r3,8(fp)
 4000e0c:	d8c00115 	stw	r3,4(sp)
 4000e10:	e13ffc17 	ldw	r4,-16(fp)
 4000e14:	e17ffd17 	ldw	r5,-12(fp)
 4000e18:	e1bffe17 	ldw	r6,-8(fp)
 4000e1c:	100f883a 	mov	r7,r2
 4000e20:	4000fc40 	call	4000fc4 <vid_print_char>
    i++;
 4000e24:	e0bffa17 	ldw	r2,-24(fp)
 4000e28:	10800044 	addi	r2,r2,1
 4000e2c:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
 4000e30:	e0bffc17 	ldw	r2,-16(fp)
 4000e34:	10800204 	addi	r2,r2,8
 4000e38:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4000e3c:	e0bffa17 	ldw	r2,-24(fp)
 4000e40:	e0c00317 	ldw	r3,12(fp)
 4000e44:	1885883a 	add	r2,r3,r2
 4000e48:	10800003 	ldbu	r2,0(r2)
 4000e4c:	10803fcc 	andi	r2,r2,255
 4000e50:	1080201c 	xori	r2,r2,128
 4000e54:	10bfe004 	addi	r2,r2,-128
 4000e58:	103fd01e 	bne	r2,zero,4000d9c <__reset+0xfafffd9c>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
 4000e5c:	0005883a 	mov	r2,zero
}
 4000e60:	e037883a 	mov	sp,fp
 4000e64:	dfc00117 	ldw	ra,4(sp)
 4000e68:	df000017 	ldw	fp,0(sp)
 4000e6c:	dec00204 	addi	sp,sp,8
 4000e70:	f800283a 	ret

04000e74 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
 4000e74:	defff704 	addi	sp,sp,-36
 4000e78:	dfc00815 	stw	ra,32(sp)
 4000e7c:	df000715 	stw	fp,28(sp)
 4000e80:	df000704 	addi	fp,sp,28
 4000e84:	e13ffc15 	stw	r4,-16(fp)
 4000e88:	e17ffd15 	stw	r5,-12(fp)
 4000e8c:	e1bffe15 	stw	r6,-8(fp)
 4000e90:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
 4000e94:	e0800317 	ldw	r2,12(fp)
 4000e98:	10000a26 	beq	r2,zero,4000ec4 <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
 4000e9c:	e0800217 	ldw	r2,8(fp)
 4000ea0:	d8800015 	stw	r2,0(sp)
 4000ea4:	e0800417 	ldw	r2,16(fp)
 4000ea8:	d8800115 	stw	r2,4(sp)
 4000eac:	e13ffc17 	ldw	r4,-16(fp)
 4000eb0:	e17ffd17 	ldw	r5,-12(fp)
 4000eb4:	e1bffe17 	ldw	r6,-8(fp)
 4000eb8:	e1ffff17 	ldw	r7,-4(fp)
 4000ebc:	40012c40 	call	40012c4 <vid_paint_block>
 4000ec0:	00003a06 	br	4000fac <vid_draw_box+0x138>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
 4000ec4:	e0bfff17 	ldw	r2,-4(fp)
 4000ec8:	10bfffc4 	addi	r2,r2,-1
 4000ecc:	00c00044 	movi	r3,1
 4000ed0:	d8c00015 	stw	r3,0(sp)
 4000ed4:	e0c00217 	ldw	r3,8(fp)
 4000ed8:	d8c00115 	stw	r3,4(sp)
 4000edc:	e0c00417 	ldw	r3,16(fp)
 4000ee0:	d8c00215 	stw	r3,8(sp)
 4000ee4:	e13ffc17 	ldw	r4,-16(fp)
 4000ee8:	e17ffd17 	ldw	r5,-12(fp)
 4000eec:	e1bffc17 	ldw	r6,-16(fp)
 4000ef0:	100f883a 	mov	r7,r2
 4000ef4:	40006600 	call	4000660 <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
 4000ef8:	e0bffe17 	ldw	r2,-8(fp)
 4000efc:	113fffc4 	addi	r4,r2,-1
 4000f00:	e0bffe17 	ldw	r2,-8(fp)
 4000f04:	10ffffc4 	addi	r3,r2,-1
 4000f08:	e0bfff17 	ldw	r2,-4(fp)
 4000f0c:	10bfffc4 	addi	r2,r2,-1
 4000f10:	01400044 	movi	r5,1
 4000f14:	d9400015 	stw	r5,0(sp)
 4000f18:	e1400217 	ldw	r5,8(fp)
 4000f1c:	d9400115 	stw	r5,4(sp)
 4000f20:	e1400417 	ldw	r5,16(fp)
 4000f24:	d9400215 	stw	r5,8(sp)
 4000f28:	e17ffd17 	ldw	r5,-12(fp)
 4000f2c:	180d883a 	mov	r6,r3
 4000f30:	100f883a 	mov	r7,r2
 4000f34:	40006600 	call	4000660 <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
 4000f38:	e0bffe17 	ldw	r2,-8(fp)
 4000f3c:	10bfffc4 	addi	r2,r2,-1
 4000f40:	00c00044 	movi	r3,1
 4000f44:	d8c00015 	stw	r3,0(sp)
 4000f48:	e0c00217 	ldw	r3,8(fp)
 4000f4c:	d8c00115 	stw	r3,4(sp)
 4000f50:	e0c00417 	ldw	r3,16(fp)
 4000f54:	d8c00215 	stw	r3,8(sp)
 4000f58:	e13ffc17 	ldw	r4,-16(fp)
 4000f5c:	e17ffd17 	ldw	r5,-12(fp)
 4000f60:	100d883a 	mov	r6,r2
 4000f64:	e1fffd17 	ldw	r7,-12(fp)
 4000f68:	40006600 	call	4000660 <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
 4000f6c:	e0bfff17 	ldw	r2,-4(fp)
 4000f70:	117fffc4 	addi	r5,r2,-1
 4000f74:	e0bffe17 	ldw	r2,-8(fp)
 4000f78:	10ffffc4 	addi	r3,r2,-1
 4000f7c:	e0bfff17 	ldw	r2,-4(fp)
 4000f80:	10bfffc4 	addi	r2,r2,-1
 4000f84:	01000044 	movi	r4,1
 4000f88:	d9000015 	stw	r4,0(sp)
 4000f8c:	e1000217 	ldw	r4,8(fp)
 4000f90:	d9000115 	stw	r4,4(sp)
 4000f94:	e1000417 	ldw	r4,16(fp)
 4000f98:	d9000215 	stw	r4,8(sp)
 4000f9c:	e13ffc17 	ldw	r4,-16(fp)
 4000fa0:	180d883a 	mov	r6,r3
 4000fa4:	100f883a 	mov	r7,r2
 4000fa8:	40006600 	call	4000660 <vid_draw_line>
  }

  return (0);
 4000fac:	0005883a 	mov	r2,zero
}
 4000fb0:	e037883a 	mov	sp,fp
 4000fb4:	dfc00117 	ldw	ra,4(sp)
 4000fb8:	df000017 	ldw	fp,0(sp)
 4000fbc:	dec00204 	addi	sp,sp,8
 4000fc0:	f800283a 	ret

04000fc4 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
 4000fc4:	defff704 	addi	sp,sp,-36
 4000fc8:	dfc00815 	stw	ra,32(sp)
 4000fcc:	df000715 	stw	fp,28(sp)
 4000fd0:	df000704 	addi	fp,sp,28
 4000fd4:	e13ffc15 	stw	r4,-16(fp)
 4000fd8:	e17ffd15 	stw	r5,-12(fp)
 4000fdc:	e1bffe15 	stw	r6,-8(fp)
 4000fe0:	3805883a 	mov	r2,r7
 4000fe4:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
 4000fe8:	e0bfff03 	ldbu	r2,-4(fp)
 4000fec:	10bff804 	addi	r2,r2,-32
 4000ff0:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4000ff4:	e03ff915 	stw	zero,-28(fp)
 4000ff8:	00002706 	br	4001098 <vid_print_char+0xd4>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
 4000ffc:	e0bffb07 	ldb	r2,-20(fp)
 4001000:	1009883a 	mov	r4,r2
 4001004:	014002c4 	movi	r5,11
 4001008:	4009dd80 	call	4009dd8 <__mulsi3>
 400100c:	1007883a 	mov	r3,r2
 4001010:	e0bff917 	ldw	r2,-28(fp)
 4001014:	1885883a 	add	r2,r3,r2
 4001018:	e0c00217 	ldw	r3,8(fp)
 400101c:	1885883a 	add	r2,r3,r2
 4001020:	10800003 	ldbu	r2,0(r2)
 4001024:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
 4001028:	e03ffa15 	stw	zero,-24(fp)
 400102c:	00001406 	br	4001080 <vid_print_char+0xbc>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
 4001030:	e0fffb47 	ldb	r3,-19(fp)
 4001034:	01002004 	movi	r4,128
 4001038:	e0bffa17 	ldw	r2,-24(fp)
 400103c:	2085d83a 	sra	r2,r4,r2
 4001040:	1884703a 	and	r2,r3,r2
 4001044:	10000b26 	beq	r2,zero,4001074 <vid_print_char+0xb0>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
 4001048:	e0fffc17 	ldw	r3,-16(fp)
 400104c:	e0bffa17 	ldw	r2,-24(fp)
 4001050:	1889883a 	add	r4,r3,r2
 4001054:	e0fffd17 	ldw	r3,-12(fp)
 4001058:	e0bff917 	ldw	r2,-28(fp)
 400105c:	1887883a 	add	r3,r3,r2
 4001060:	e0bffe17 	ldw	r2,-8(fp)
 4001064:	180b883a 	mov	r5,r3
 4001068:	100d883a 	mov	r6,r2
 400106c:	e1c00317 	ldw	r7,12(fp)
 4001070:	40010bc0 	call	40010bc <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
 4001074:	e0bffa17 	ldw	r2,-24(fp)
 4001078:	10800044 	addi	r2,r2,1
 400107c:	e0bffa15 	stw	r2,-24(fp)
 4001080:	e0bffa17 	ldw	r2,-24(fp)
 4001084:	10800210 	cmplti	r2,r2,8
 4001088:	103fe91e 	bne	r2,zero,4001030 <__reset+0xfb000030>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 400108c:	e0bff917 	ldw	r2,-28(fp)
 4001090:	10800044 	addi	r2,r2,1
 4001094:	e0bff915 	stw	r2,-28(fp)
 4001098:	e0bff917 	ldw	r2,-28(fp)
 400109c:	108002d0 	cmplti	r2,r2,11
 40010a0:	103fd61e 	bne	r2,zero,4000ffc <__reset+0xfafffffc>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
 40010a4:	0005883a 	mov	r2,zero
}
 40010a8:	e037883a 	mov	sp,fp
 40010ac:	dfc00117 	ldw	ra,4(sp)
 40010b0:	df000017 	ldw	fp,0(sp)
 40010b4:	dec00204 	addi	sp,sp,8
 40010b8:	f800283a 	ret

040010bc <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 40010bc:	defff804 	addi	sp,sp,-32
 40010c0:	dfc00715 	stw	ra,28(sp)
 40010c4:	df000615 	stw	fp,24(sp)
 40010c8:	dc000515 	stw	r16,20(sp)
 40010cc:	df000504 	addi	fp,sp,20
 40010d0:	e13ffc15 	stw	r4,-16(fp)
 40010d4:	e17ffd15 	stw	r5,-12(fp)
 40010d8:	e1bffe15 	stw	r6,-8(fp)
 40010dc:	e1ffff15 	stw	r7,-4(fp)
  int addr;
  
  if( display->color_depth == 32 )
 40010e0:	e0bfff17 	ldw	r2,-4(fp)
 40010e4:	10800417 	ldw	r2,16(r2)
 40010e8:	10800818 	cmpnei	r2,r2,32
 40010ec:	1000141e 	bne	r2,zero,4001140 <vid_set_pixel+0x84>
  {
//  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 4)) + horiz * 4);
 40010f0:	e13fff17 	ldw	r4,-4(fp)
 40010f4:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 40010f8:	1021883a 	mov	r16,r2
 40010fc:	e0bfff17 	ldw	r2,-4(fp)
 4001100:	10800517 	ldw	r2,20(r2)
 4001104:	1085883a 	add	r2,r2,r2
 4001108:	1085883a 	add	r2,r2,r2
 400110c:	1009883a 	mov	r4,r2
 4001110:	e17ffd17 	ldw	r5,-12(fp)
 4001114:	4009dd80 	call	4009dd8 <__mulsi3>
 4001118:	8087883a 	add	r3,r16,r2
 400111c:	e0bffc17 	ldw	r2,-16(fp)
 4001120:	1085883a 	add	r2,r2,r2
 4001124:	1085883a 	add	r2,r2,r2
 4001128:	1885883a 	add	r2,r3,r2
 400112c:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT( addr, 0, (unsigned int)(color));
 4001130:	e0bffb17 	ldw	r2,-20(fp)
 4001134:	e0fffe17 	ldw	r3,-8(fp)
 4001138:	10c00035 	stwio	r3,0(r2)
 400113c:	00003c06 	br	4001230 <vid_set_pixel+0x174>
  }
  
  else if( display->color_depth == 24 )
 4001140:	e0bfff17 	ldw	r2,-4(fp)
 4001144:	10800417 	ldw	r2,16(r2)
 4001148:	10800618 	cmpnei	r2,r2,24
 400114c:	1000231e 	bne	r2,zero,40011dc <vid_set_pixel+0x120>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 3)) + horiz * 3);
 4001150:	e13fff17 	ldw	r4,-4(fp)
 4001154:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4001158:	1021883a 	mov	r16,r2
 400115c:	e0bfff17 	ldw	r2,-4(fp)
 4001160:	10c00517 	ldw	r3,20(r2)
 4001164:	1805883a 	mov	r2,r3
 4001168:	1085883a 	add	r2,r2,r2
 400116c:	10c5883a 	add	r2,r2,r3
 4001170:	1009883a 	mov	r4,r2
 4001174:	e17ffd17 	ldw	r5,-12(fp)
 4001178:	4009dd80 	call	4009dd8 <__mulsi3>
 400117c:	8089883a 	add	r4,r16,r2
 4001180:	e0fffc17 	ldw	r3,-16(fp)
 4001184:	1805883a 	mov	r2,r3
 4001188:	1085883a 	add	r2,r2,r2
 400118c:	10c5883a 	add	r2,r2,r3
 4001190:	2085883a 	add	r2,r4,r2
 4001194:	e0bffb15 	stw	r2,-20(fp)
		IOWR_8DIRECT( addr, 0, (unsigned char)(color));
 4001198:	e0bffb17 	ldw	r2,-20(fp)
 400119c:	e0fffe17 	ldw	r3,-8(fp)
 40011a0:	18c03fcc 	andi	r3,r3,255
 40011a4:	10c00025 	stbio	r3,0(r2)
 		IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
 40011a8:	e0bffb17 	ldw	r2,-20(fp)
 40011ac:	10800044 	addi	r2,r2,1
 40011b0:	e0fffe17 	ldw	r3,-8(fp)
 40011b4:	1806d23a 	srli	r3,r3,8
 40011b8:	18c03fcc 	andi	r3,r3,255
 40011bc:	10c00025 	stbio	r3,0(r2)
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
 40011c0:	e0bffb17 	ldw	r2,-20(fp)
 40011c4:	10800084 	addi	r2,r2,2
 40011c8:	e0fffe17 	ldw	r3,-8(fp)
 40011cc:	1806d43a 	srli	r3,r3,16
 40011d0:	18c03fcc 	andi	r3,r3,255
 40011d4:	10c00025 	stbio	r3,0(r2)
 40011d8:	00001506 	br	4001230 <vid_set_pixel+0x174>
  }
  
  else if( display->color_depth == 16 )
 40011dc:	e0bfff17 	ldw	r2,-4(fp)
 40011e0:	10800417 	ldw	r2,16(r2)
 40011e4:	10800418 	cmpnei	r2,r2,16
 40011e8:	1000111e 	bne	r2,zero,4001230 <vid_set_pixel+0x174>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
 40011ec:	e13fff17 	ldw	r4,-4(fp)
 40011f0:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 40011f4:	1021883a 	mov	r16,r2
 40011f8:	e0bfff17 	ldw	r2,-4(fp)
 40011fc:	10800517 	ldw	r2,20(r2)
 4001200:	1085883a 	add	r2,r2,r2
 4001204:	1009883a 	mov	r4,r2
 4001208:	e17ffd17 	ldw	r5,-12(fp)
 400120c:	4009dd80 	call	4009dd8 <__mulsi3>
 4001210:	8087883a 	add	r3,r16,r2
 4001214:	e0bffc17 	ldw	r2,-16(fp)
 4001218:	1085883a 	add	r2,r2,r2
 400121c:	1885883a 	add	r2,r3,r2
 4001220:	e0bffb15 	stw	r2,-20(fp)
  	IOWR_16DIRECT( addr, 0, (int)(color));
 4001224:	e0bffb17 	ldw	r2,-20(fp)
 4001228:	e0fffe17 	ldw	r3,-8(fp)
 400122c:	10c0002d 	sthio	r3,0(r2)
	}


}
 4001230:	e037883a 	mov	sp,fp
 4001234:	dfc00217 	ldw	ra,8(sp)
 4001238:	df000117 	ldw	fp,4(sp)
 400123c:	dc000017 	ldw	r16,0(sp)
 4001240:	dec00304 	addi	sp,sp,12
 4001244:	f800283a 	ret

04001248 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
 4001248:	defff904 	addi	sp,sp,-28
 400124c:	dfc00615 	stw	ra,24(sp)
 4001250:	df000515 	stw	fp,20(sp)
 4001254:	dc000415 	stw	r16,16(sp)
 4001258:	df000404 	addi	fp,sp,16
 400125c:	e13ffd15 	stw	r4,-12(fp)
 4001260:	e17ffe15 	stw	r5,-8(fp)
 4001264:	e1bfff15 	stw	r6,-4(fp)
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
 4001268:	e13fff17 	ldw	r4,-4(fp)
 400126c:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4001270:	1021883a 	mov	r16,r2
 4001274:	e0bfff17 	ldw	r2,-4(fp)
 4001278:	10800517 	ldw	r2,20(r2)
 400127c:	1085883a 	add	r2,r2,r2
 4001280:	1009883a 	mov	r4,r2
 4001284:	e17ffe17 	ldw	r5,-8(fp)
 4001288:	4009dd80 	call	4009dd8 <__mulsi3>
 400128c:	8087883a 	add	r3,r16,r2
 4001290:	e0bffd17 	ldw	r2,-12(fp)
 4001294:	1085883a 	add	r2,r2,r2
 4001298:	1885883a 	add	r2,r3,r2
 400129c:	e0bffc15 	stw	r2,-16(fp)
  return(IORD_16DIRECT(addr, 0));
 40012a0:	e0bffc17 	ldw	r2,-16(fp)
 40012a4:	1080002b 	ldhuio	r2,0(r2)
 40012a8:	10bfffcc 	andi	r2,r2,65535

}
 40012ac:	e037883a 	mov	sp,fp
 40012b0:	dfc00217 	ldw	ra,8(sp)
 40012b4:	df000117 	ldw	fp,4(sp)
 40012b8:	dc000017 	ldw	r16,0(sp)
 40012bc:	dec00304 	addi	sp,sp,12
 40012c0:	f800283a 	ret

040012c4 <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
 40012c4:	defff304 	addi	sp,sp,-52
 40012c8:	dfc00c15 	stw	ra,48(sp)
 40012cc:	df000b15 	stw	fp,44(sp)
 40012d0:	dc400a15 	stw	r17,40(sp)
 40012d4:	dc000915 	stw	r16,36(sp)
 40012d8:	df000904 	addi	fp,sp,36
 40012dc:	e13ffc15 	stw	r4,-16(fp)
 40012e0:	e17ffd15 	stw	r5,-12(fp)
 40012e4:	e1bffe15 	stw	r6,-8(fp)
 40012e8:	e1ffff15 	stw	r7,-4(fp)
  int i;
  unsigned int addr; // richard add unsigned
  int bytes_per_line, bytes_per_pixel;
  char* line;
  
  bytes_per_pixel = (display->color_depth / 8);
 40012ec:	e0800517 	ldw	r2,20(fp)
 40012f0:	10800417 	ldw	r2,16(r2)
 40012f4:	1000010e 	bge	r2,zero,40012fc <vid_paint_block+0x38>
 40012f8:	108001c4 	addi	r2,r2,7
 40012fc:	1005d0fa 	srai	r2,r2,3
 4001300:	e0bff915 	stw	r2,-28(fp)
  bytes_per_line = ((Hend - Hstart) * bytes_per_pixel);
 4001304:	e0fffe17 	ldw	r3,-8(fp)
 4001308:	e0bffc17 	ldw	r2,-16(fp)
 400130c:	1885c83a 	sub	r2,r3,r2
 4001310:	1009883a 	mov	r4,r2
 4001314:	e17ff917 	ldw	r5,-28(fp)
 4001318:	4009dd80 	call	4009dd8 <__mulsi3>
 400131c:	e0bffa15 	stw	r2,-24(fp)

  line = malloc(bytes_per_line + 12);
 4001320:	e0bffa17 	ldw	r2,-24(fp)
 4001324:	10800304 	addi	r2,r2,12
 4001328:	1009883a 	mov	r4,r2
 400132c:	400a44c0 	call	400a44c <malloc>
 4001330:	e0bffb15 	stw	r2,-20(fp)

	if(display->color_depth == 16)
 4001334:	e0800517 	ldw	r2,20(fp)
 4001338:	10800417 	ldw	r2,16(r2)
 400133c:	10800418 	cmpnei	r2,r2,16
 4001340:	1000151e 	bne	r2,zero,4001398 <vid_paint_block+0xd4>
	{
    for (i = 0; i < bytes_per_line; i+=2) 
 4001344:	e03ff715 	stw	zero,-36(fp)
 4001348:	00000f06 	br	4001388 <vid_paint_block+0xc4>
    {
      *(line + i) = (unsigned char)color;
 400134c:	e0bff717 	ldw	r2,-36(fp)
 4001350:	e0fffb17 	ldw	r3,-20(fp)
 4001354:	1885883a 	add	r2,r3,r2
 4001358:	e0c00417 	ldw	r3,16(fp)
 400135c:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
 4001360:	e0bff717 	ldw	r2,-36(fp)
 4001364:	10800044 	addi	r2,r2,1
 4001368:	e0fffb17 	ldw	r3,-20(fp)
 400136c:	1885883a 	add	r2,r3,r2
 4001370:	e0c00417 	ldw	r3,16(fp)
 4001374:	1807d23a 	srai	r3,r3,8
 4001378:	10c00005 	stb	r3,0(r2)

  line = malloc(bytes_per_line + 12);

	if(display->color_depth == 16)
	{
    for (i = 0; i < bytes_per_line; i+=2) 
 400137c:	e0bff717 	ldw	r2,-36(fp)
 4001380:	10800084 	addi	r2,r2,2
 4001384:	e0bff715 	stw	r2,-36(fp)
 4001388:	e0fff717 	ldw	r3,-36(fp)
 400138c:	e0bffa17 	ldw	r2,-24(fp)
 4001390:	18bfee16 	blt	r3,r2,400134c <__reset+0xfb00034c>
 4001394:	00003106 	br	400145c <vid_paint_block+0x198>
    {
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
 4001398:	e0800517 	ldw	r2,20(fp)
 400139c:	10800417 	ldw	r2,16(r2)
 40013a0:	10800618 	cmpnei	r2,r2,24
 40013a4:	10001c1e 	bne	r2,zero,4001418 <vid_paint_block+0x154>
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
 40013a8:	e03ff715 	stw	zero,-36(fp)
 40013ac:	00001606 	br	4001408 <vid_paint_block+0x144>
    {
      *(line + i) = (unsigned char)color;
 40013b0:	e0bff717 	ldw	r2,-36(fp)
 40013b4:	e0fffb17 	ldw	r3,-20(fp)
 40013b8:	1885883a 	add	r2,r3,r2
 40013bc:	e0c00417 	ldw	r3,16(fp)
 40013c0:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
 40013c4:	e0bff717 	ldw	r2,-36(fp)
 40013c8:	10800044 	addi	r2,r2,1
 40013cc:	e0fffb17 	ldw	r3,-20(fp)
 40013d0:	1885883a 	add	r2,r3,r2
 40013d4:	e0c00417 	ldw	r3,16(fp)
 40013d8:	1807d23a 	srai	r3,r3,8
 40013dc:	10c00005 	stb	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
 40013e0:	e0bff717 	ldw	r2,-36(fp)
 40013e4:	10800084 	addi	r2,r2,2
 40013e8:	e0fffb17 	ldw	r3,-20(fp)
 40013ec:	1885883a 	add	r2,r3,r2
 40013f0:	e0c00417 	ldw	r3,16(fp)
 40013f4:	1807d43a 	srai	r3,r3,16
 40013f8:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
 40013fc:	e0bff717 	ldw	r2,-36(fp)
 4001400:	108000c4 	addi	r2,r2,3
 4001404:	e0bff715 	stw	r2,-36(fp)
 4001408:	e0fff717 	ldw	r3,-36(fp)
 400140c:	e0bffa17 	ldw	r2,-24(fp)
 4001410:	18bfe716 	blt	r3,r2,40013b0 <__reset+0xfb0003b0>
 4001414:	00001106 	br	400145c <vid_paint_block+0x198>
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
 4001418:	e0800517 	ldw	r2,20(fp)
 400141c:	10800417 	ldw	r2,16(r2)
 4001420:	10800818 	cmpnei	r2,r2,32
 4001424:	10000d1e 	bne	r2,zero,400145c <vid_paint_block+0x198>
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
 4001428:	e03ff715 	stw	zero,-36(fp)
 400142c:	00000806 	br	4001450 <vid_paint_block+0x18c>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(line + i) = (unsigned int)color;
 4001430:	e0bff717 	ldw	r2,-36(fp)
 4001434:	e0fffb17 	ldw	r3,-20(fp)
 4001438:	1885883a 	add	r2,r3,r2
 400143c:	e0c00417 	ldw	r3,16(fp)
 4001440:	10c00015 	stw	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
 4001444:	e0bff717 	ldw	r2,-36(fp)
 4001448:	10800104 	addi	r2,r2,4
 400144c:	e0bff715 	stw	r2,-36(fp)
 4001450:	e0fff717 	ldw	r3,-36(fp)
 4001454:	e0bffa17 	ldw	r2,-24(fp)
 4001458:	18bff516 	blt	r3,r2,4001430 <__reset+0xfb000430>
      *(int*)(line + i) = (unsigned int)color;
    }
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
 400145c:	e1000517 	ldw	r4,20(fp)
 4001460:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4001464:	1021883a 	mov	r16,r2
 4001468:	e0800517 	ldw	r2,20(fp)
 400146c:	10800517 	ldw	r2,20(r2)
 4001470:	1009883a 	mov	r4,r2
 4001474:	e17ff917 	ldw	r5,-28(fp)
 4001478:	4009dd80 	call	4009dd8 <__mulsi3>
 400147c:	1009883a 	mov	r4,r2
 4001480:	e17ffd17 	ldw	r5,-12(fp)
 4001484:	4009dd80 	call	4009dd8 <__mulsi3>
 4001488:	1023883a 	mov	r17,r2
 400148c:	e13ffc17 	ldw	r4,-16(fp)
 4001490:	e17ff917 	ldw	r5,-28(fp)
 4001494:	4009dd80 	call	4009dd8 <__mulsi3>
 4001498:	8885883a 	add	r2,r17,r2
 400149c:	8085883a 	add	r2,r16,r2
 40014a0:	e0bff815 	stw	r2,-32(fp)
  
  for (i = Vstart; i < Vend; i++)
 40014a4:	e0bffd17 	ldw	r2,-12(fp)
 40014a8:	e0bff715 	stw	r2,-36(fp)
 40014ac:	00001106 	br	40014f4 <vid_paint_block+0x230>
  {
    memcpy( (void*)addr, line, bytes_per_line );
 40014b0:	e0fff817 	ldw	r3,-32(fp)
 40014b4:	e0bffa17 	ldw	r2,-24(fp)
 40014b8:	1809883a 	mov	r4,r3
 40014bc:	e17ffb17 	ldw	r5,-20(fp)
 40014c0:	100d883a 	mov	r6,r2
 40014c4:	400abf80 	call	400abf8 <memcpy>
    addr += (display->width * bytes_per_pixel);
 40014c8:	e0800517 	ldw	r2,20(fp)
 40014cc:	10800517 	ldw	r2,20(r2)
 40014d0:	1009883a 	mov	r4,r2
 40014d4:	e17ff917 	ldw	r5,-28(fp)
 40014d8:	4009dd80 	call	4009dd8 <__mulsi3>
 40014dc:	e0fff817 	ldw	r3,-32(fp)
 40014e0:	1885883a 	add	r2,r3,r2
 40014e4:	e0bff815 	stw	r2,-32(fp)
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
  
  for (i = Vstart; i < Vend; i++)
 40014e8:	e0bff717 	ldw	r2,-36(fp)
 40014ec:	10800044 	addi	r2,r2,1
 40014f0:	e0bff715 	stw	r2,-36(fp)
 40014f4:	e0fff717 	ldw	r3,-36(fp)
 40014f8:	e0bfff17 	ldw	r2,-4(fp)
 40014fc:	18bfec16 	blt	r3,r2,40014b0 <__reset+0xfb0004b0>
  {
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
 4001500:	e13ffb17 	ldw	r4,-20(fp)
 4001504:	400a4600 	call	400a460 <free>
}
 4001508:	e037883a 	mov	sp,fp
 400150c:	dfc00317 	ldw	ra,12(sp)
 4001510:	df000217 	ldw	fp,8(sp)
 4001514:	dc400117 	ldw	r17,4(sp)
 4001518:	dc000017 	ldw	r16,0(sp)
 400151c:	dec00404 	addi	sp,sp,16
 4001520:	f800283a 	ret

04001524 <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 4001524:	defff404 	addi	sp,sp,-48
 4001528:	dfc00b15 	stw	ra,44(sp)
 400152c:	df000a15 	stw	fp,40(sp)
 4001530:	dc000915 	stw	r16,36(sp)
 4001534:	df000904 	addi	fp,sp,36
 4001538:	2007883a 	mov	r3,r4
 400153c:	2805883a 	mov	r2,r5
 4001540:	e1bffe15 	stw	r6,-8(fp)
 4001544:	e1ffff15 	stw	r7,-4(fp)
 4001548:	e0fffc0d 	sth	r3,-16(fp)
 400154c:	e0bffd0d 	sth	r2,-12(fp)

  int i;
  int addr;
  int bytes_per_line;

  char *fast_buffer = malloc(1024 * 3);
 4001550:	01030004 	movi	r4,3072
 4001554:	400a44c0 	call	400a44c <malloc>
 4001558:	e0bff815 	stw	r2,-32(fp)

  if( Hstart > Hend )
 400155c:	e0bffc0f 	ldh	r2,-16(fp)
 4001560:	e0fffd0f 	ldh	r3,-12(fp)
 4001564:	1880060e 	bge	r3,r2,4001580 <vid_draw_horiz_line+0x5c>
  {
    short temp = Hstart;
 4001568:	e0bffc0b 	ldhu	r2,-16(fp)
 400156c:	e0bff90d 	sth	r2,-28(fp)
    Hstart = Hend;
 4001570:	e0bffd0b 	ldhu	r2,-12(fp)
 4001574:	e0bffc0d 	sth	r2,-16(fp)
    Hend = temp;
 4001578:	e0bff90b 	ldhu	r2,-28(fp)
 400157c:	e0bffd0d 	sth	r2,-12(fp)
  }
  
  if(display->color_depth == 32)
 4001580:	e0800317 	ldw	r2,12(fp)
 4001584:	10800417 	ldw	r2,16(r2)
 4001588:	10800818 	cmpnei	r2,r2,32
 400158c:	10002a1e 	bne	r2,zero,4001638 <vid_draw_horiz_line+0x114>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
 4001590:	e1000317 	ldw	r4,12(fp)
 4001594:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4001598:	1021883a 	mov	r16,r2
 400159c:	e0800317 	ldw	r2,12(fp)
 40015a0:	10800517 	ldw	r2,20(r2)
 40015a4:	1085883a 	add	r2,r2,r2
 40015a8:	1085883a 	add	r2,r2,r2
 40015ac:	1009883a 	mov	r4,r2
 40015b0:	e17ffe17 	ldw	r5,-8(fp)
 40015b4:	4009dd80 	call	4009dd8 <__mulsi3>
 40015b8:	1007883a 	mov	r3,r2
 40015bc:	e0bffc0f 	ldh	r2,-16(fp)
 40015c0:	1085883a 	add	r2,r2,r2
 40015c4:	1085883a 	add	r2,r2,r2
 40015c8:	1885883a 	add	r2,r3,r2
 40015cc:	8085883a 	add	r2,r16,r2
 40015d0:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 4);
 40015d4:	e0fffd0f 	ldh	r3,-12(fp)
 40015d8:	e0bffc0f 	ldh	r2,-16(fp)
 40015dc:	1885c83a 	sub	r2,r3,r2
 40015e0:	1085883a 	add	r2,r2,r2
 40015e4:	1085883a 	add	r2,r2,r2
 40015e8:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=4) 
 40015ec:	e03ff715 	stw	zero,-36(fp)
 40015f0:	00000806 	br	4001614 <vid_draw_horiz_line+0xf0>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
 40015f4:	e0bff717 	ldw	r2,-36(fp)
 40015f8:	e0fff817 	ldw	r3,-32(fp)
 40015fc:	1885883a 	add	r2,r3,r2
 4001600:	e0ffff17 	ldw	r3,-4(fp)
 4001604:	10c00015 	stw	r3,0(r2)
  
  if(display->color_depth == 32)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
    bytes_per_line = ((Hend - Hstart) * 4);
    for (i = 0; i < bytes_per_line; i+=4) 
 4001608:	e0bff717 	ldw	r2,-36(fp)
 400160c:	10800104 	addi	r2,r2,4
 4001610:	e0bff715 	stw	r2,-36(fp)
 4001614:	e0fff717 	ldw	r3,-36(fp)
 4001618:	e0bffb17 	ldw	r2,-20(fp)
 400161c:	18bff516 	blt	r3,r2,40015f4 <__reset+0xfb0005f4>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 4001620:	e0fffa17 	ldw	r3,-24(fp)
 4001624:	e0bffb17 	ldw	r2,-20(fp)
 4001628:	1809883a 	mov	r4,r3
 400162c:	e17ff817 	ldw	r5,-32(fp)
 4001630:	100d883a 	mov	r6,r2
 4001634:	400abf80 	call	400abf8 <memcpy>
  }
  if(display->color_depth == 24)
 4001638:	e0800317 	ldw	r2,12(fp)
 400163c:	10800417 	ldw	r2,16(r2)
 4001640:	10800618 	cmpnei	r2,r2,24
 4001644:	10003c1e 	bne	r2,zero,4001738 <vid_draw_horiz_line+0x214>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
 4001648:	e1000317 	ldw	r4,12(fp)
 400164c:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4001650:	1021883a 	mov	r16,r2
 4001654:	e0800317 	ldw	r2,12(fp)
 4001658:	10c00517 	ldw	r3,20(r2)
 400165c:	1805883a 	mov	r2,r3
 4001660:	1085883a 	add	r2,r2,r2
 4001664:	10c5883a 	add	r2,r2,r3
 4001668:	1009883a 	mov	r4,r2
 400166c:	e17ffe17 	ldw	r5,-8(fp)
 4001670:	4009dd80 	call	4009dd8 <__mulsi3>
 4001674:	1009883a 	mov	r4,r2
 4001678:	e0fffc0f 	ldh	r3,-16(fp)
 400167c:	1805883a 	mov	r2,r3
 4001680:	1085883a 	add	r2,r2,r2
 4001684:	10c5883a 	add	r2,r2,r3
 4001688:	2085883a 	add	r2,r4,r2
 400168c:	8085883a 	add	r2,r16,r2
 4001690:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 3);
 4001694:	e0fffd0f 	ldh	r3,-12(fp)
 4001698:	e0bffc0f 	ldh	r2,-16(fp)
 400169c:	1887c83a 	sub	r3,r3,r2
 40016a0:	1805883a 	mov	r2,r3
 40016a4:	1085883a 	add	r2,r2,r2
 40016a8:	10c5883a 	add	r2,r2,r3
 40016ac:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=3) 
 40016b0:	e03ff715 	stw	zero,-36(fp)
 40016b4:	00001606 	br	4001710 <vid_draw_horiz_line+0x1ec>
    {
      *(fast_buffer + i) = (unsigned char)color;
 40016b8:	e0bff717 	ldw	r2,-36(fp)
 40016bc:	e0fff817 	ldw	r3,-32(fp)
 40016c0:	1885883a 	add	r2,r3,r2
 40016c4:	e0ffff17 	ldw	r3,-4(fp)
 40016c8:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 40016cc:	e0bff717 	ldw	r2,-36(fp)
 40016d0:	10800044 	addi	r2,r2,1
 40016d4:	e0fff817 	ldw	r3,-32(fp)
 40016d8:	1885883a 	add	r2,r3,r2
 40016dc:	e0ffff17 	ldw	r3,-4(fp)
 40016e0:	1807d23a 	srai	r3,r3,8
 40016e4:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
 40016e8:	e0bff717 	ldw	r2,-36(fp)
 40016ec:	10800084 	addi	r2,r2,2
 40016f0:	e0fff817 	ldw	r3,-32(fp)
 40016f4:	1885883a 	add	r2,r3,r2
 40016f8:	e0ffff17 	ldw	r3,-4(fp)
 40016fc:	1807d43a 	srai	r3,r3,16
 4001700:	10c00005 	stb	r3,0(r2)
  }
  if(display->color_depth == 24)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
    bytes_per_line = ((Hend - Hstart) * 3);
    for (i = 0; i < bytes_per_line; i+=3) 
 4001704:	e0bff717 	ldw	r2,-36(fp)
 4001708:	108000c4 	addi	r2,r2,3
 400170c:	e0bff715 	stw	r2,-36(fp)
 4001710:	e0fff717 	ldw	r3,-36(fp)
 4001714:	e0bffb17 	ldw	r2,-20(fp)
 4001718:	18bfe716 	blt	r3,r2,40016b8 <__reset+0xfb0006b8>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 400171c:	e0fffa17 	ldw	r3,-24(fp)
 4001720:	e0bffb17 	ldw	r2,-20(fp)
 4001724:	1809883a 	mov	r4,r3
 4001728:	e17ff817 	ldw	r5,-32(fp)
 400172c:	100d883a 	mov	r6,r2
 4001730:	400abf80 	call	400abf8 <memcpy>
 4001734:	00003206 	br	4001800 <vid_draw_horiz_line+0x2dc>
  }
  else if(display->color_depth == 16)
 4001738:	e0800317 	ldw	r2,12(fp)
 400173c:	10800417 	ldw	r2,16(r2)
 4001740:	10800418 	cmpnei	r2,r2,16
 4001744:	10002e1e 	bne	r2,zero,4001800 <vid_draw_horiz_line+0x2dc>
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
 4001748:	e1000317 	ldw	r4,12(fp)
 400174c:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4001750:	1021883a 	mov	r16,r2
 4001754:	e0800317 	ldw	r2,12(fp)
 4001758:	10800517 	ldw	r2,20(r2)
 400175c:	1085883a 	add	r2,r2,r2
 4001760:	1009883a 	mov	r4,r2
 4001764:	e17ffe17 	ldw	r5,-8(fp)
 4001768:	4009dd80 	call	4009dd8 <__mulsi3>
 400176c:	1007883a 	mov	r3,r2
 4001770:	e0bffc0f 	ldh	r2,-16(fp)
 4001774:	1085883a 	add	r2,r2,r2
 4001778:	1885883a 	add	r2,r3,r2
 400177c:	8085883a 	add	r2,r16,r2
 4001780:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 2);
 4001784:	e0fffd0f 	ldh	r3,-12(fp)
 4001788:	e0bffc0f 	ldh	r2,-16(fp)
 400178c:	1885c83a 	sub	r2,r3,r2
 4001790:	1085883a 	add	r2,r2,r2
 4001794:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=2) 
 4001798:	e03ff715 	stw	zero,-36(fp)
 400179c:	00000f06 	br	40017dc <vid_draw_horiz_line+0x2b8>
    {
      *(fast_buffer + i) = (unsigned char)color;
 40017a0:	e0bff717 	ldw	r2,-36(fp)
 40017a4:	e0fff817 	ldw	r3,-32(fp)
 40017a8:	1885883a 	add	r2,r3,r2
 40017ac:	e0ffff17 	ldw	r3,-4(fp)
 40017b0:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 40017b4:	e0bff717 	ldw	r2,-36(fp)
 40017b8:	10800044 	addi	r2,r2,1
 40017bc:	e0fff817 	ldw	r3,-32(fp)
 40017c0:	1885883a 	add	r2,r3,r2
 40017c4:	e0ffff17 	ldw	r3,-4(fp)
 40017c8:	1807d23a 	srai	r3,r3,8
 40017cc:	10c00005 	stb	r3,0(r2)
  }
  else if(display->color_depth == 16)
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
    bytes_per_line = ((Hend - Hstart) * 2);
    for (i = 0; i < bytes_per_line; i+=2) 
 40017d0:	e0bff717 	ldw	r2,-36(fp)
 40017d4:	10800084 	addi	r2,r2,2
 40017d8:	e0bff715 	stw	r2,-36(fp)
 40017dc:	e0fff717 	ldw	r3,-36(fp)
 40017e0:	e0bffb17 	ldw	r2,-20(fp)
 40017e4:	18bfee16 	blt	r3,r2,40017a0 <__reset+0xfb0007a0>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 40017e8:	e0fffa17 	ldw	r3,-24(fp)
 40017ec:	e0bffb17 	ldw	r2,-20(fp)
 40017f0:	1809883a 	mov	r4,r3
 40017f4:	e17ff817 	ldw	r5,-32(fp)
 40017f8:	100d883a 	mov	r6,r2
 40017fc:	400abf80 	call	400abf8 <memcpy>
  }
  free(fast_buffer);
 4001800:	e13ff817 	ldw	r4,-32(fp)
 4001804:	400a4600 	call	400a460 <free>
}
 4001808:	e037883a 	mov	sp,fp
 400180c:	dfc00217 	ldw	ra,8(sp)
 4001810:	df000117 	ldw	fp,4(sp)
 4001814:	dc000017 	ldw	r16,0(sp)
 4001818:	dec00304 	addi	sp,sp,12
 400181c:	f800283a 	ret

04001820 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
 4001820:	defffc04 	addi	sp,sp,-16
 4001824:	df000315 	stw	fp,12(sp)
 4001828:	df000304 	addi	fp,sp,12
 400182c:	e13ffd15 	stw	r4,-12(fp)
 4001830:	e17ffe15 	stw	r5,-8(fp)
 4001834:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
 4001838:	e0bffe17 	ldw	r2,-8(fp)
 400183c:	1085883a 	add	r2,r2,r2
 4001840:	10800054 	ori	r2,r2,1
 4001844:	1006917a 	slli	r3,r2,5
 4001848:	e0bfff17 	ldw	r2,-4(fp)
 400184c:	1886b03a 	or	r3,r3,r2
 4001850:	e0bffd17 	ldw	r2,-12(fp)
 4001854:	100492fa 	slli	r2,r2,11
 4001858:	1884b03a 	or	r2,r3,r2
}
 400185c:	e037883a 	mov	sp,fp
 4001860:	df000017 	ldw	fp,0(sp)
 4001864:	dec00104 	addi	sp,sp,4
 4001868:	f800283a 	ret

0400186c <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
 400186c:	defffc04 	addi	sp,sp,-16
 4001870:	df000315 	stw	fp,12(sp)
 4001874:	df000304 	addi	fp,sp,12
 4001878:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
 400187c:	e0bfff17 	ldw	r2,-4(fp)
 4001880:	10800003 	ldbu	r2,0(r2)
 4001884:	1007883a 	mov	r3,r2
 4001888:	00bffe04 	movi	r2,-8
 400188c:	1884703a 	and	r2,r3,r2
 4001890:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
 4001894:	e0bfff17 	ldw	r2,-4(fp)
 4001898:	10800044 	addi	r2,r2,1
 400189c:	10800003 	ldbu	r2,0(r2)
 40018a0:	1007883a 	mov	r3,r2
 40018a4:	00bfff04 	movi	r2,-4
 40018a8:	1884703a 	and	r2,r3,r2
 40018ac:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
 40018b0:	e0bfff17 	ldw	r2,-4(fp)
 40018b4:	10800084 	addi	r2,r2,2
 40018b8:	10800003 	ldbu	r2,0(r2)
 40018bc:	1007883a 	mov	r3,r2
 40018c0:	00bffe04 	movi	r2,-8
 40018c4:	1884703a 	and	r2,r3,r2
 40018c8:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
 40018cc:	e0bffd83 	ldbu	r2,-10(fp)
 40018d0:	1004d0fa 	srli	r2,r2,3
 40018d4:	10c03fcc 	andi	r3,r2,255
 40018d8:	e0bffd43 	ldbu	r2,-11(fp)
 40018dc:	100490fa 	slli	r2,r2,3
 40018e0:	1884b03a 	or	r2,r3,r2
 40018e4:	1007883a 	mov	r3,r2
 40018e8:	e0bffd03 	ldbu	r2,-12(fp)
 40018ec:	1004923a 	slli	r2,r2,8
 40018f0:	1884b03a 	or	r2,r3,r2
 40018f4:	e0bffe0d 	sth	r2,-8(fp)
	return output;
 40018f8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 40018fc:	e037883a 	mov	sp,fp
 4001900:	df000017 	ldw	fp,0(sp)
 4001904:	dec00104 	addi	sp,sp,4
 4001908:	f800283a 	ret

0400190c <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
 400190c:	defffd04 	addi	sp,sp,-12
 4001910:	df000215 	stw	fp,8(sp)
 4001914:	df000204 	addi	fp,sp,8
 4001918:	2005883a 	mov	r2,r4
 400191c:	e17fff15 	stw	r5,-4(fp)
 4001920:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
 4001924:	e0bffe0b 	ldhu	r2,-8(fp)
 4001928:	1004d2fa 	srli	r2,r2,11
 400192c:	1007883a 	mov	r3,r2
 4001930:	e0bfff17 	ldw	r2,-4(fp)
 4001934:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
 4001938:	e0bfff17 	ldw	r2,-4(fp)
 400193c:	10800044 	addi	r2,r2,1
 4001940:	e0fffe0b 	ldhu	r3,-8(fp)
 4001944:	18c00f8c 	andi	r3,r3,62
 4001948:	1807d17a 	srai	r3,r3,5
 400194c:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
 4001950:	e0bfff17 	ldw	r2,-4(fp)
 4001954:	10800084 	addi	r2,r2,2
 4001958:	e0fffe0b 	ldhu	r3,-8(fp)
 400195c:	18c007cc 	andi	r3,r3,31
 4001960:	10c00005 	stb	r3,0(r2)
	
	return (0);
 4001964:	0005883a 	mov	r2,zero
}
 4001968:	e037883a 	mov	sp,fp
 400196c:	df000017 	ldw	fp,0(sp)
 4001970:	dec00104 	addi	sp,sp,4
 4001974:	f800283a 	ret

04001978 <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
 4001978:	defff304 	addi	sp,sp,-52
 400197c:	dfc00c15 	stw	ra,48(sp)
 4001980:	df000b15 	stw	fp,44(sp)
 4001984:	dc400a15 	stw	r17,40(sp)
 4001988:	dc000915 	stw	r16,36(sp)
 400198c:	df000904 	addi	fp,sp,36
 4001990:	e13ffc15 	stw	r4,-16(fp)
 4001994:	e17ffd15 	stw	r5,-12(fp)
 4001998:	e1bffe15 	stw	r6,-8(fp)
 400199c:	e1ffff15 	stw	r7,-4(fp)
  unsigned short* temp_line;
  int index_24 = 0;
 40019a0:	e03ff715 	stw	zero,-36(fp)
  int index_16 = 0;
 40019a4:	e03ff815 	stw	zero,-32(fp)
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
 40019a8:	e1000517 	ldw	r4,20(fp)
 40019ac:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 40019b0:	1021883a 	mov	r16,r2
    ((y * (display->width * (display->bytes_per_pixel))) + 
 40019b4:	e0800517 	ldw	r2,20(fp)
 40019b8:	10c00517 	ldw	r3,20(r2)
 40019bc:	e0800517 	ldw	r2,20(fp)
 40019c0:	10800717 	ldw	r2,28(r2)
 40019c4:	1809883a 	mov	r4,r3
 40019c8:	100b883a 	mov	r5,r2
 40019cc:	4009dd80 	call	4009dd8 <__mulsi3>
 40019d0:	1009883a 	mov	r4,r2
 40019d4:	e17ffd17 	ldw	r5,-12(fp)
 40019d8:	4009dd80 	call	4009dd8 <__mulsi3>
 40019dc:	1023883a 	mov	r17,r2
    (x * (display->bytes_per_pixel)));
 40019e0:	e0800517 	ldw	r2,20(fp)
 40019e4:	10800717 	ldw	r2,28(r2)
 40019e8:	1009883a 	mov	r4,r2
 40019ec:	e17ffc17 	ldw	r5,-16(fp)
 40019f0:	4009dd80 	call	4009dd8 <__mulsi3>
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
    ((y * (display->width * (display->bytes_per_pixel))) + 
 40019f4:	8885883a 	add	r2,r17,r2
  int index_24 = 0;
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
 40019f8:	8085883a 	add	r2,r16,r2
 40019fc:	e0bff915 	stw	r2,-28(fp)
    ((y * (display->width * (display->bytes_per_pixel))) + 
    (x * (display->bytes_per_pixel)));
  
  bytes_in_line = num_pixels * display->bytes_per_pixel;
 4001a00:	e0800517 	ldw	r2,20(fp)
 4001a04:	10800717 	ldw	r2,28(r2)
 4001a08:	1009883a 	mov	r4,r2
 4001a0c:	e17fff17 	ldw	r5,-4(fp)
 4001a10:	4009dd80 	call	4009dd8 <__mulsi3>
 4001a14:	e0bffa15 	stw	r2,-24(fp)
  
  if(source_color_depth == 24)
 4001a18:	e0800417 	ldw	r2,16(fp)
 4001a1c:	10800618 	cmpnei	r2,r2,24
 4001a20:	1000491e 	bne	r2,zero,4001b48 <vid_copy_line_to_frame_buffer+0x1d0>
  {
    if(display->color_depth == 16)
 4001a24:	e0800517 	ldw	r2,20(fp)
 4001a28:	10800417 	ldw	r2,16(r2)
 4001a2c:	10800418 	cmpnei	r2,r2,16
 4001a30:	10003b1e 	bne	r2,zero,4001b20 <vid_copy_line_to_frame_buffer+0x1a8>
    {
      temp_line = malloc(bytes_in_line);
 4001a34:	e13ffa17 	ldw	r4,-24(fp)
 4001a38:	400a44c0 	call	400a44c <malloc>
 4001a3c:	e0bffb15 	stw	r2,-20(fp)
      while(index_24 < bytes_in_line)
 4001a40:	00002c06 	br	4001af4 <vid_copy_line_to_frame_buffer+0x17c>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
 4001a44:	e0bff817 	ldw	r2,-32(fp)
 4001a48:	1085883a 	add	r2,r2,r2
 4001a4c:	e0fffb17 	ldw	r3,-20(fp)
 4001a50:	1885883a 	add	r2,r3,r2
 4001a54:	e0fff717 	ldw	r3,-36(fp)
 4001a58:	18c00084 	addi	r3,r3,2
 4001a5c:	e13ffe17 	ldw	r4,-8(fp)
 4001a60:	20c7883a 	add	r3,r4,r3
 4001a64:	18c00003 	ldbu	r3,0(r3)
 4001a68:	18c03fcc 	andi	r3,r3,255
 4001a6c:	18c0201c 	xori	r3,r3,128
 4001a70:	18ffe004 	addi	r3,r3,-128
 4001a74:	18c03e0c 	andi	r3,r3,248
 4001a78:	1807d0fa 	srai	r3,r3,3
 4001a7c:	1809883a 	mov	r4,r3
 4001a80:	e0fff717 	ldw	r3,-36(fp)
 4001a84:	18c00044 	addi	r3,r3,1
 4001a88:	e17ffe17 	ldw	r5,-8(fp)
 4001a8c:	28c7883a 	add	r3,r5,r3
 4001a90:	18c00003 	ldbu	r3,0(r3)
 4001a94:	18c03fcc 	andi	r3,r3,255
 4001a98:	18c0201c 	xori	r3,r3,128
 4001a9c:	18ffe004 	addi	r3,r3,-128
 4001aa0:	18c03f0c 	andi	r3,r3,252
 4001aa4:	180690fa 	slli	r3,r3,3
 4001aa8:	20c6b03a 	or	r3,r4,r3
 4001aac:	1809883a 	mov	r4,r3
 4001ab0:	e0fff717 	ldw	r3,-36(fp)
 4001ab4:	e17ffe17 	ldw	r5,-8(fp)
 4001ab8:	28c7883a 	add	r3,r5,r3
 4001abc:	18c00003 	ldbu	r3,0(r3)
 4001ac0:	18c03fcc 	andi	r3,r3,255
 4001ac4:	18c0201c 	xori	r3,r3,128
 4001ac8:	18ffe004 	addi	r3,r3,-128
 4001acc:	18c03e0c 	andi	r3,r3,248
 4001ad0:	1806923a 	slli	r3,r3,8
 4001ad4:	20c6b03a 	or	r3,r4,r3
 4001ad8:	10c0000d 	sth	r3,0(r2)
        index_16++;
 4001adc:	e0bff817 	ldw	r2,-32(fp)
 4001ae0:	10800044 	addi	r2,r2,1
 4001ae4:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
 4001ae8:	e0bff717 	ldw	r2,-36(fp)
 4001aec:	108000c4 	addi	r2,r2,3
 4001af0:	e0bff715 	stw	r2,-36(fp)
  if(source_color_depth == 24)
  {
    if(display->color_depth == 16)
    {
      temp_line = malloc(bytes_in_line);
      while(index_24 < bytes_in_line)
 4001af4:	e0fff717 	ldw	r3,-36(fp)
 4001af8:	e0bffa17 	ldw	r2,-24(fp)
 4001afc:	18bfd136 	bltu	r3,r2,4001a44 <__reset+0xfb000a44>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
 4001b00:	e0bff917 	ldw	r2,-28(fp)
 4001b04:	1009883a 	mov	r4,r2
 4001b08:	e17ffb17 	ldw	r5,-20(fp)
 4001b0c:	e1bffa17 	ldw	r6,-24(fp)
 4001b10:	400abf80 	call	400abf8 <memcpy>
      free(temp_line);
 4001b14:	e13ffb17 	ldw	r4,-20(fp)
 4001b18:	400a4600 	call	400a460 <free>
 4001b1c:	00003e06 	br	4001c18 <vid_copy_line_to_frame_buffer+0x2a0>
    }
    else if(display->color_depth == 24)
 4001b20:	e0800517 	ldw	r2,20(fp)
 4001b24:	10800417 	ldw	r2,16(r2)
 4001b28:	10800618 	cmpnei	r2,r2,24
 4001b2c:	10003a1e 	bne	r2,zero,4001c18 <vid_copy_line_to_frame_buffer+0x2a0>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
 4001b30:	e0bff917 	ldw	r2,-28(fp)
 4001b34:	1009883a 	mov	r4,r2
 4001b38:	e17ffe17 	ldw	r5,-8(fp)
 4001b3c:	e1bffa17 	ldw	r6,-24(fp)
 4001b40:	400abf80 	call	400abf8 <memcpy>
 4001b44:	00003406 	br	4001c18 <vid_copy_line_to_frame_buffer+0x2a0>
    }
  }
  else if(source_color_depth == 16)
 4001b48:	e0800417 	ldw	r2,16(fp)
 4001b4c:	10800418 	cmpnei	r2,r2,16
 4001b50:	1000311e 	bne	r2,zero,4001c18 <vid_copy_line_to_frame_buffer+0x2a0>
  {
    if(display->color_depth == 24)
 4001b54:	e0800517 	ldw	r2,20(fp)
 4001b58:	10800417 	ldw	r2,16(r2)
 4001b5c:	10800618 	cmpnei	r2,r2,24
 4001b60:	1000241e 	bne	r2,zero,4001bf4 <vid_copy_line_to_frame_buffer+0x27c>
    {
      temp_line = malloc(bytes_in_line);
 4001b64:	e13ffa17 	ldw	r4,-24(fp)
 4001b68:	400a44c0 	call	400a44c <malloc>
 4001b6c:	e0bffb15 	stw	r2,-20(fp)
      while(index_16 < num_pixels )
 4001b70:	00001506 	br	4001bc8 <vid_copy_line_to_frame_buffer+0x250>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
 4001b74:	e0bff817 	ldw	r2,-32(fp)
 4001b78:	e0fffe17 	ldw	r3,-8(fp)
 4001b7c:	1885883a 	add	r2,r3,r2
 4001b80:	10800003 	ldbu	r2,0(r2)
 4001b84:	10803fcc 	andi	r2,r2,255
 4001b88:	1080201c 	xori	r2,r2,128
 4001b8c:	10bfe004 	addi	r2,r2,-128
 4001b90:	10ffffcc 	andi	r3,r2,65535
 4001b94:	e0bff717 	ldw	r2,-36(fp)
 4001b98:	1085883a 	add	r2,r2,r2
 4001b9c:	e13ffb17 	ldw	r4,-20(fp)
 4001ba0:	2085883a 	add	r2,r4,r2
 4001ba4:	1809883a 	mov	r4,r3
 4001ba8:	100b883a 	mov	r5,r2
 4001bac:	400190c0 	call	400190c <vid_color_convert16_24>
        index_16++;
 4001bb0:	e0bff817 	ldw	r2,-32(fp)
 4001bb4:	10800044 	addi	r2,r2,1
 4001bb8:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
 4001bbc:	e0bff717 	ldw	r2,-36(fp)
 4001bc0:	108000c4 	addi	r2,r2,3
 4001bc4:	e0bff715 	stw	r2,-36(fp)
  else if(source_color_depth == 16)
  {
    if(display->color_depth == 24)
    {
      temp_line = malloc(bytes_in_line);
      while(index_16 < num_pixels )
 4001bc8:	e0fff817 	ldw	r3,-32(fp)
 4001bcc:	e0bfff17 	ldw	r2,-4(fp)
 4001bd0:	18bfe816 	blt	r3,r2,4001b74 <__reset+0xfb000b74>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
 4001bd4:	e0bff917 	ldw	r2,-28(fp)
 4001bd8:	1009883a 	mov	r4,r2
 4001bdc:	e17ffb17 	ldw	r5,-20(fp)
 4001be0:	e1bffa17 	ldw	r6,-24(fp)
 4001be4:	400abf80 	call	400abf8 <memcpy>
      free(temp_line);
 4001be8:	e13ffb17 	ldw	r4,-20(fp)
 4001bec:	400a4600 	call	400a460 <free>
 4001bf0:	00000906 	br	4001c18 <vid_copy_line_to_frame_buffer+0x2a0>
      
    }
    else if(display->color_depth == 16)
 4001bf4:	e0800517 	ldw	r2,20(fp)
 4001bf8:	10800417 	ldw	r2,16(r2)
 4001bfc:	10800418 	cmpnei	r2,r2,16
 4001c00:	1000051e 	bne	r2,zero,4001c18 <vid_copy_line_to_frame_buffer+0x2a0>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
 4001c04:	e0bff917 	ldw	r2,-28(fp)
 4001c08:	1009883a 	mov	r4,r2
 4001c0c:	e17ffe17 	ldw	r5,-8(fp)
 4001c10:	e1bffa17 	ldw	r6,-24(fp)
 4001c14:	400abf80 	call	400abf8 <memcpy>
    }
  }
  return(0);
 4001c18:	0005883a 	mov	r2,zero
}
 4001c1c:	e037883a 	mov	sp,fp
 4001c20:	dfc00317 	ldw	ra,12(sp)
 4001c24:	df000217 	ldw	fp,8(sp)
 4001c28:	dc400117 	ldw	r17,4(sp)
 4001c2c:	dc000017 	ldw	r16,0(sp)
 4001c30:	dec00404 	addi	sp,sp,16
 4001c34:	f800283a 	ret

04001c38 <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 4001c38:	deffef04 	addi	sp,sp,-68
 4001c3c:	dfc01015 	stw	ra,64(sp)
 4001c40:	df000f15 	stw	fp,60(sp)
 4001c44:	df000f04 	addi	fp,sp,60
 4001c48:	2011883a 	mov	r8,r4
 4001c4c:	2809883a 	mov	r4,r5
 4001c50:	3007883a 	mov	r3,r6
 4001c54:	3805883a 	mov	r2,r7
 4001c58:	e1400217 	ldw	r5,8(fp)
 4001c5c:	e23ffb0d 	sth	r8,-20(fp)
 4001c60:	e13ffc0d 	sth	r4,-16(fp)
 4001c64:	e0fffd0d 	sth	r3,-12(fp)
 4001c68:	e0bffe0d 	sth	r2,-8(fp)
 4001c6c:	e17fff0d 	sth	r5,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 4001c70:	e0fffd0b 	ldhu	r3,-12(fp)
 4001c74:	e0bffb0b 	ldhu	r2,-20(fp)
 4001c78:	1885c83a 	sub	r2,r3,r2
 4001c7c:	1000010e 	bge	r2,zero,4001c84 <vid_draw_sloped_line+0x4c>
 4001c80:	0085c83a 	sub	r2,zero,r2
 4001c84:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
 4001c88:	e0fffe0b 	ldhu	r3,-8(fp)
 4001c8c:	e0bffc0b 	ldhu	r2,-16(fp)
 4001c90:	1885c83a 	sub	r2,r3,r2
 4001c94:	1000010e 	bge	r2,zero,4001c9c <vid_draw_sloped_line+0x64>
 4001c98:	0085c83a 	sub	r2,zero,r2
 4001c9c:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 4001ca0:	e0bffb0b 	ldhu	r2,-20(fp)
 4001ca4:	e0fffd0b 	ldhu	r3,-12(fp)
 4001ca8:	1880032e 	bgeu	r3,r2,4001cb8 <vid_draw_sloped_line+0x80>
 4001cac:	00bfffc4 	movi	r2,-1
 4001cb0:	e0bff315 	stw	r2,-52(fp)
 4001cb4:	00000206 	br	4001cc0 <vid_draw_sloped_line+0x88>
 4001cb8:	00800044 	movi	r2,1
 4001cbc:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 4001cc0:	e0bffc0b 	ldhu	r2,-16(fp)
 4001cc4:	e0fffe0b 	ldhu	r3,-8(fp)
 4001cc8:	1880032e 	bgeu	r3,r2,4001cd8 <vid_draw_sloped_line+0xa0>
 4001ccc:	00bfffc4 	movi	r2,-1
 4001cd0:	e0bff415 	stw	r2,-48(fp)
 4001cd4:	00000206 	br	4001ce0 <vid_draw_sloped_line+0xa8>
 4001cd8:	00800044 	movi	r2,1
 4001cdc:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 4001ce0:	e0fff117 	ldw	r3,-60(fp)
 4001ce4:	e0bff217 	ldw	r2,-56(fp)
 4001ce8:	18803416 	blt	r3,r2,4001dbc <vid_draw_sloped_line+0x184>
    int dPr   = vert_delta<<1;
 4001cec:	e0bff217 	ldw	r2,-56(fp)
 4001cf0:	1085883a 	add	r2,r2,r2
 4001cf4:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
 4001cf8:	e0bff117 	ldw	r2,-60(fp)
 4001cfc:	1085883a 	add	r2,r2,r2
 4001d00:	e0fff717 	ldw	r3,-36(fp)
 4001d04:	1885c83a 	sub	r2,r3,r2
 4001d08:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
 4001d0c:	e0fff717 	ldw	r3,-36(fp)
 4001d10:	e0bff117 	ldw	r2,-60(fp)
 4001d14:	1885c83a 	sub	r2,r3,r2
 4001d18:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4001d1c:	00002406 	br	4001db0 <vid_draw_sloped_line+0x178>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4001d20:	e13ffb0b 	ldhu	r4,-20(fp)
 4001d24:	e0fffc0b 	ldhu	r3,-16(fp)
 4001d28:	e0800317 	ldw	r2,12(fp)
 4001d2c:	180b883a 	mov	r5,r3
 4001d30:	100d883a 	mov	r6,r2
 4001d34:	e1c00417 	ldw	r7,16(fp)
 4001d38:	40010bc0 	call	40010bc <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 4001d3c:	e0bff517 	ldw	r2,-44(fp)
 4001d40:	00800f0e 	bge	zero,r2,4001d80 <vid_draw_sloped_line+0x148>
        horiz_start+=horiz_incr;
 4001d44:	e0bff317 	ldw	r2,-52(fp)
 4001d48:	1007883a 	mov	r3,r2
 4001d4c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d50:	1885883a 	add	r2,r3,r2
 4001d54:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4001d58:	e0bff417 	ldw	r2,-48(fp)
 4001d5c:	1007883a 	mov	r3,r2
 4001d60:	e0bffc0b 	ldhu	r2,-16(fp)
 4001d64:	1885883a 	add	r2,r3,r2
 4001d68:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4001d6c:	e0fff517 	ldw	r3,-44(fp)
 4001d70:	e0bff817 	ldw	r2,-32(fp)
 4001d74:	1885883a 	add	r2,r3,r2
 4001d78:	e0bff515 	stw	r2,-44(fp)
 4001d7c:	00000906 	br	4001da4 <vid_draw_sloped_line+0x16c>
      } else {
        horiz_start+=horiz_incr;
 4001d80:	e0bff317 	ldw	r2,-52(fp)
 4001d84:	1007883a 	mov	r3,r2
 4001d88:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d8c:	1885883a 	add	r2,r3,r2
 4001d90:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 4001d94:	e0fff517 	ldw	r3,-44(fp)
 4001d98:	e0bff717 	ldw	r2,-36(fp)
 4001d9c:	1885883a 	add	r2,r3,r2
 4001da0:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4001da4:	e0bff117 	ldw	r2,-60(fp)
 4001da8:	10bfffc4 	addi	r2,r2,-1
 4001dac:	e0bff115 	stw	r2,-60(fp)
 4001db0:	e0bff117 	ldw	r2,-60(fp)
 4001db4:	103fda0e 	bge	r2,zero,4001d20 <__reset+0xfb000d20>
 4001db8:	00003306 	br	4001e88 <vid_draw_sloped_line+0x250>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 4001dbc:	e0bff117 	ldw	r2,-60(fp)
 4001dc0:	1085883a 	add	r2,r2,r2
 4001dc4:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
 4001dc8:	e0bff217 	ldw	r2,-56(fp)
 4001dcc:	1085883a 	add	r2,r2,r2
 4001dd0:	e0fff917 	ldw	r3,-28(fp)
 4001dd4:	1885c83a 	sub	r2,r3,r2
 4001dd8:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
 4001ddc:	e0fff917 	ldw	r3,-28(fp)
 4001de0:	e0bff217 	ldw	r2,-56(fp)
 4001de4:	1885c83a 	sub	r2,r3,r2
 4001de8:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4001dec:	00002406 	br	4001e80 <vid_draw_sloped_line+0x248>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4001df0:	e13ffb0b 	ldhu	r4,-20(fp)
 4001df4:	e0fffc0b 	ldhu	r3,-16(fp)
 4001df8:	e0800317 	ldw	r2,12(fp)
 4001dfc:	180b883a 	mov	r5,r3
 4001e00:	100d883a 	mov	r6,r2
 4001e04:	e1c00417 	ldw	r7,16(fp)
 4001e08:	40010bc0 	call	40010bc <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 4001e0c:	e0bff617 	ldw	r2,-40(fp)
 4001e10:	00800f0e 	bge	zero,r2,4001e50 <vid_draw_sloped_line+0x218>
        horiz_start+=horiz_incr;
 4001e14:	e0bff317 	ldw	r2,-52(fp)
 4001e18:	1007883a 	mov	r3,r2
 4001e1c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001e20:	1885883a 	add	r2,r3,r2
 4001e24:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4001e28:	e0bff417 	ldw	r2,-48(fp)
 4001e2c:	1007883a 	mov	r3,r2
 4001e30:	e0bffc0b 	ldhu	r2,-16(fp)
 4001e34:	1885883a 	add	r2,r3,r2
 4001e38:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4001e3c:	e0fff617 	ldw	r3,-40(fp)
 4001e40:	e0bffa17 	ldw	r2,-24(fp)
 4001e44:	1885883a 	add	r2,r3,r2
 4001e48:	e0bff615 	stw	r2,-40(fp)
 4001e4c:	00000906 	br	4001e74 <vid_draw_sloped_line+0x23c>
      } else {
        vert_start+=vert_incr;
 4001e50:	e0bff417 	ldw	r2,-48(fp)
 4001e54:	1007883a 	mov	r3,r2
 4001e58:	e0bffc0b 	ldhu	r2,-16(fp)
 4001e5c:	1885883a 	add	r2,r3,r2
 4001e60:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 4001e64:	e0fff617 	ldw	r3,-40(fp)
 4001e68:	e0bff917 	ldw	r2,-28(fp)
 4001e6c:	1885883a 	add	r2,r3,r2
 4001e70:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4001e74:	e0bff217 	ldw	r2,-56(fp)
 4001e78:	10bfffc4 	addi	r2,r2,-1
 4001e7c:	e0bff215 	stw	r2,-56(fp)
 4001e80:	e0bff217 	ldw	r2,-56(fp)
 4001e84:	103fda0e 	bge	r2,zero,4001df0 <__reset+0xfb000df0>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 4001e88:	e037883a 	mov	sp,fp
 4001e8c:	dfc00117 	ldw	ra,4(sp)
 4001e90:	df000017 	ldw	fp,0(sp)
 4001e94:	dec00204 	addi	sp,sp,8
 4001e98:	f800283a 	ret

04001e9c <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 4001e9c:	defff104 	addi	sp,sp,-60
 4001ea0:	dfc00e15 	stw	ra,56(sp)
 4001ea4:	df000d15 	stw	fp,52(sp)
 4001ea8:	df000d04 	addi	fp,sp,52
 4001eac:	e13ffb15 	stw	r4,-20(fp)
 4001eb0:	e17ffc15 	stw	r5,-16(fp)
 4001eb4:	e1bffd15 	stw	r6,-12(fp)
 4001eb8:	e1fffe15 	stw	r7,-8(fp)
 4001ebc:	e0800217 	ldw	r2,8(fp)
 4001ec0:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
 4001ec4:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
 4001ec8:	e0bffd17 	ldw	r2,-12(fp)
 4001ecc:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
 4001ed0:	e13ffd17 	ldw	r4,-12(fp)
 4001ed4:	017fff04 	movi	r5,-4
 4001ed8:	4009dd80 	call	4009dd8 <__mulsi3>
 4001edc:	10800144 	addi	r2,r2,5
 4001ee0:	1000010e 	bge	r2,zero,4001ee8 <vid_draw_circle+0x4c>
 4001ee4:	108000c4 	addi	r2,r2,3
 4001ee8:	1005d0ba 	srai	r2,r2,2
 4001eec:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4001ef0:	e0bfff07 	ldb	r2,-4(fp)
 4001ef4:	d8000015 	stw	zero,0(sp)
 4001ef8:	d8000115 	stw	zero,4(sp)
 4001efc:	e0fffe17 	ldw	r3,-8(fp)
 4001f00:	d8c00215 	stw	r3,8(sp)
 4001f04:	d8800315 	stw	r2,12(sp)
 4001f08:	e0800317 	ldw	r2,12(fp)
 4001f0c:	d8800415 	stw	r2,16(sp)
 4001f10:	e13ffb17 	ldw	r4,-20(fp)
 4001f14:	e17ffc17 	ldw	r5,-16(fp)
 4001f18:	e1bff817 	ldw	r6,-32(fp)
 4001f1c:	e1fff917 	ldw	r7,-28(fp)
 4001f20:	40023980 	call	4002398 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4001f24:	00002406 	br	4001fb8 <vid_draw_circle+0x11c>
    x++;
 4001f28:	e0bff817 	ldw	r2,-32(fp)
 4001f2c:	10800044 	addi	r2,r2,1
 4001f30:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
 4001f34:	e0bffa17 	ldw	r2,-24(fp)
 4001f38:	1000070e 	bge	r2,zero,4001f58 <vid_draw_circle+0xbc>
      p += 2*x+1;
 4001f3c:	e0bff817 	ldw	r2,-32(fp)
 4001f40:	1085883a 	add	r2,r2,r2
 4001f44:	10800044 	addi	r2,r2,1
 4001f48:	e0fffa17 	ldw	r3,-24(fp)
 4001f4c:	1885883a 	add	r2,r3,r2
 4001f50:	e0bffa15 	stw	r2,-24(fp)
 4001f54:	00000b06 	br	4001f84 <vid_draw_circle+0xe8>
    } else {
      y--;
 4001f58:	e0bff917 	ldw	r2,-28(fp)
 4001f5c:	10bfffc4 	addi	r2,r2,-1
 4001f60:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 4001f64:	e0fff817 	ldw	r3,-32(fp)
 4001f68:	e0bff917 	ldw	r2,-28(fp)
 4001f6c:	1885c83a 	sub	r2,r3,r2
 4001f70:	1085883a 	add	r2,r2,r2
 4001f74:	10800044 	addi	r2,r2,1
 4001f78:	e0fffa17 	ldw	r3,-24(fp)
 4001f7c:	1885883a 	add	r2,r3,r2
 4001f80:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4001f84:	e0bfff07 	ldb	r2,-4(fp)
 4001f88:	d8000015 	stw	zero,0(sp)
 4001f8c:	d8000115 	stw	zero,4(sp)
 4001f90:	e0fffe17 	ldw	r3,-8(fp)
 4001f94:	d8c00215 	stw	r3,8(sp)
 4001f98:	d8800315 	stw	r2,12(sp)
 4001f9c:	e0800317 	ldw	r2,12(fp)
 4001fa0:	d8800415 	stw	r2,16(sp)
 4001fa4:	e13ffb17 	ldw	r4,-20(fp)
 4001fa8:	e17ffc17 	ldw	r5,-16(fp)
 4001fac:	e1bff817 	ldw	r6,-32(fp)
 4001fb0:	e1fff917 	ldw	r7,-28(fp)
 4001fb4:	40023980 	call	4002398 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4001fb8:	e0fff817 	ldw	r3,-32(fp)
 4001fbc:	e0bff917 	ldw	r2,-28(fp)
 4001fc0:	18bfd916 	blt	r3,r2,4001f28 <__reset+0xfb000f28>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 4001fc4:	0005883a 	mov	r2,zero
}
 4001fc8:	e037883a 	mov	sp,fp
 4001fcc:	dfc00117 	ldw	ra,4(sp)
 4001fd0:	df000017 	ldw	fp,0(sp)
 4001fd4:	dec00204 	addi	sp,sp,8
 4001fd8:	f800283a 	ret

04001fdc <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
 4001fdc:	deffec04 	addi	sp,sp,-80
 4001fe0:	dfc01315 	stw	ra,76(sp)
 4001fe4:	df001215 	stw	fp,72(sp)
 4001fe8:	df001204 	addi	fp,sp,72
 4001fec:	e13ffc15 	stw	r4,-16(fp)
 4001ff0:	e17ffd15 	stw	r5,-12(fp)
 4001ff4:	e1bffe15 	stw	r6,-8(fp)
 4001ff8:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
 4001ffc:	e0bffc17 	ldw	r2,-16(fp)
 4002000:	e0fffe17 	ldw	r3,-8(fp)
 4002004:	1880060e 	bge	r3,r2,4002020 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
 4002008:	e0bffe17 	ldw	r2,-8(fp)
 400200c:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
 4002010:	e0bffc17 	ldw	r2,-16(fp)
 4002014:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
 4002018:	e0bff617 	ldw	r2,-40(fp)
 400201c:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
 4002020:	e0bffd17 	ldw	r2,-12(fp)
 4002024:	e0ffff17 	ldw	r3,-4(fp)
 4002028:	1880060e 	bge	r3,r2,4002044 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
 400202c:	e0bfff17 	ldw	r2,-4(fp)
 4002030:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
 4002034:	e0bffd17 	ldw	r2,-12(fp)
 4002038:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
 400203c:	e0bff617 	ldw	r2,-40(fp)
 4002040:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
 4002044:	e0fffe17 	ldw	r3,-8(fp)
 4002048:	e0bffc17 	ldw	r2,-16(fp)
 400204c:	1885c83a 	sub	r2,r3,r2
 4002050:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
 4002054:	e0ffff17 	ldw	r3,-4(fp)
 4002058:	e0bffd17 	ldw	r2,-12(fp)
 400205c:	1885c83a 	sub	r2,r3,r2
 4002060:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
 4002064:	e0800217 	ldw	r2,8(fp)
 4002068:	e0fff717 	ldw	r3,-36(fp)
 400206c:	1806d07a 	srli	r3,r3,1
 4002070:	1880032e 	bgeu	r3,r2,4002080 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
 4002074:	e0bff717 	ldw	r2,-36(fp)
 4002078:	1004d07a 	srli	r2,r2,1
 400207c:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
 4002080:	e0800217 	ldw	r2,8(fp)
 4002084:	e0fff817 	ldw	r3,-32(fp)
 4002088:	1806d07a 	srli	r3,r3,1
 400208c:	1880032e 	bgeu	r3,r2,400209c <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
 4002090:	e0bff817 	ldw	r2,-32(fp)
 4002094:	1004d07a 	srli	r2,r2,1
 4002098:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
 400209c:	e0800217 	ldw	r2,8(fp)
 40020a0:	1085883a 	add	r2,r2,r2
 40020a4:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
 40020a8:	e0bff917 	ldw	r2,-28(fp)
 40020ac:	e0fff717 	ldw	r3,-36(fp)
 40020b0:	1885c83a 	sub	r2,r3,r2
 40020b4:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
 40020b8:	e0bff917 	ldw	r2,-28(fp)
 40020bc:	e0fff817 	ldw	r3,-32(fp)
 40020c0:	1885c83a 	sub	r2,r3,r2
 40020c4:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
 40020c8:	e03ff315 	stw	zero,-52(fp)
  y = radius;
 40020cc:	e0800217 	ldw	r2,8(fp)
 40020d0:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
 40020d4:	e1000217 	ldw	r4,8(fp)
 40020d8:	017fff04 	movi	r5,-4
 40020dc:	4009dd80 	call	4009dd8 <__mulsi3>
 40020e0:	10800144 	addi	r2,r2,5
 40020e4:	1000010e 	bge	r2,zero,40020ec <vid_draw_round_corner_box+0x110>
 40020e8:	108000c4 	addi	r2,r2,3
 40020ec:	1005d0ba 	srai	r2,r2,2
 40020f0:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 40020f4:	e0fffc17 	ldw	r3,-16(fp)
 40020f8:	e0800217 	ldw	r2,8(fp)
 40020fc:	1889883a 	add	r4,r3,r2
 4002100:	e0fffd17 	ldw	r3,-12(fp)
 4002104:	e0800217 	ldw	r2,8(fp)
 4002108:	188b883a 	add	r5,r3,r2
 400210c:	e0fff317 	ldw	r3,-52(fp)
 4002110:	e0bff417 	ldw	r2,-48(fp)
 4002114:	e23ffa17 	ldw	r8,-24(fp)
 4002118:	e1fffb17 	ldw	r7,-20(fp)
 400211c:	e1800417 	ldw	r6,16(fp)
 4002120:	31803fcc 	andi	r6,r6,255
 4002124:	3180201c 	xori	r6,r6,128
 4002128:	31bfe004 	addi	r6,r6,-128
 400212c:	da000015 	stw	r8,0(sp)
 4002130:	d9c00115 	stw	r7,4(sp)
 4002134:	e1c00317 	ldw	r7,12(fp)
 4002138:	d9c00215 	stw	r7,8(sp)
 400213c:	d9800315 	stw	r6,12(sp)
 4002140:	e1800517 	ldw	r6,20(fp)
 4002144:	d9800415 	stw	r6,16(sp)
 4002148:	180d883a 	mov	r6,r3
 400214c:	100f883a 	mov	r7,r2
 4002150:	40023980 	call	4002398 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002154:	00003106 	br	400221c <vid_draw_round_corner_box+0x240>
    x++;
 4002158:	e0bff317 	ldw	r2,-52(fp)
 400215c:	10800044 	addi	r2,r2,1
 4002160:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
 4002164:	e0bff517 	ldw	r2,-44(fp)
 4002168:	1000080e 	bge	r2,zero,400218c <vid_draw_round_corner_box+0x1b0>
      p += 2*x+1;
 400216c:	e0bff317 	ldw	r2,-52(fp)
 4002170:	1085883a 	add	r2,r2,r2
 4002174:	1007883a 	mov	r3,r2
 4002178:	e0bff517 	ldw	r2,-44(fp)
 400217c:	1885883a 	add	r2,r3,r2
 4002180:	10800044 	addi	r2,r2,1
 4002184:	e0bff515 	stw	r2,-44(fp)
 4002188:	00000c06 	br	40021bc <vid_draw_round_corner_box+0x1e0>
    } else {
      y--;
 400218c:	e0bff417 	ldw	r2,-48(fp)
 4002190:	10bfffc4 	addi	r2,r2,-1
 4002194:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
 4002198:	e0fff317 	ldw	r3,-52(fp)
 400219c:	e0bff417 	ldw	r2,-48(fp)
 40021a0:	1885c83a 	sub	r2,r3,r2
 40021a4:	1085883a 	add	r2,r2,r2
 40021a8:	1007883a 	mov	r3,r2
 40021ac:	e0bff517 	ldw	r2,-44(fp)
 40021b0:	1885883a 	add	r2,r3,r2
 40021b4:	10800044 	addi	r2,r2,1
 40021b8:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 40021bc:	e0fffc17 	ldw	r3,-16(fp)
 40021c0:	e0800217 	ldw	r2,8(fp)
 40021c4:	1889883a 	add	r4,r3,r2
 40021c8:	e0fffd17 	ldw	r3,-12(fp)
 40021cc:	e0800217 	ldw	r2,8(fp)
 40021d0:	188b883a 	add	r5,r3,r2
 40021d4:	e0fff317 	ldw	r3,-52(fp)
 40021d8:	e0bff417 	ldw	r2,-48(fp)
 40021dc:	e23ffa17 	ldw	r8,-24(fp)
 40021e0:	e1fffb17 	ldw	r7,-20(fp)
 40021e4:	e1800417 	ldw	r6,16(fp)
 40021e8:	31803fcc 	andi	r6,r6,255
 40021ec:	3180201c 	xori	r6,r6,128
 40021f0:	31bfe004 	addi	r6,r6,-128
 40021f4:	da000015 	stw	r8,0(sp)
 40021f8:	d9c00115 	stw	r7,4(sp)
 40021fc:	e1c00317 	ldw	r7,12(fp)
 4002200:	d9c00215 	stw	r7,8(sp)
 4002204:	d9800315 	stw	r6,12(sp)
 4002208:	e1800517 	ldw	r6,20(fp)
 400220c:	d9800415 	stw	r6,16(sp)
 4002210:	180d883a 	mov	r6,r3
 4002214:	100f883a 	mov	r7,r2
 4002218:	40023980 	call	4002398 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 400221c:	e0fff317 	ldw	r3,-52(fp)
 4002220:	e0bff417 	ldw	r2,-48(fp)
 4002224:	18bfcc36 	bltu	r3,r2,4002158 <__reset+0xfb001158>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
 4002228:	e0800417 	ldw	r2,16(fp)
 400222c:	10001026 	beq	r2,zero,4002270 <vid_draw_round_corner_box+0x294>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
 4002230:	e0fffd17 	ldw	r3,-12(fp)
 4002234:	e0800217 	ldw	r2,8(fp)
 4002238:	1887883a 	add	r3,r3,r2
 400223c:	e13fff17 	ldw	r4,-4(fp)
 4002240:	e0800217 	ldw	r2,8(fp)
 4002244:	2085c83a 	sub	r2,r4,r2
 4002248:	e1000317 	ldw	r4,12(fp)
 400224c:	d9000015 	stw	r4,0(sp)
 4002250:	e1000517 	ldw	r4,20(fp)
 4002254:	d9000115 	stw	r4,4(sp)
 4002258:	e13ffc17 	ldw	r4,-16(fp)
 400225c:	180b883a 	mov	r5,r3
 4002260:	e1bffe17 	ldw	r6,-8(fp)
 4002264:	100f883a 	mov	r7,r2
 4002268:	40012c40 	call	40012c4 <vid_paint_block>
 400226c:	00004406 	br	4002380 <vid_draw_round_corner_box+0x3a4>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
 4002270:	e0fffd17 	ldw	r3,-12(fp)
 4002274:	e0800217 	ldw	r2,8(fp)
 4002278:	1887883a 	add	r3,r3,r2
 400227c:	e13fff17 	ldw	r4,-4(fp)
 4002280:	e0800217 	ldw	r2,8(fp)
 4002284:	2085c83a 	sub	r2,r4,r2
 4002288:	01000044 	movi	r4,1
 400228c:	d9000015 	stw	r4,0(sp)
 4002290:	e1000317 	ldw	r4,12(fp)
 4002294:	d9000115 	stw	r4,4(sp)
 4002298:	e1000517 	ldw	r4,20(fp)
 400229c:	d9000215 	stw	r4,8(sp)
 40022a0:	e13ffc17 	ldw	r4,-16(fp)
 40022a4:	180b883a 	mov	r5,r3
 40022a8:	e1bffc17 	ldw	r6,-16(fp)
 40022ac:	100f883a 	mov	r7,r2
 40022b0:	40006600 	call	4000660 <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
 40022b4:	e0fffd17 	ldw	r3,-12(fp)
 40022b8:	e0800217 	ldw	r2,8(fp)
 40022bc:	1887883a 	add	r3,r3,r2
 40022c0:	e13fff17 	ldw	r4,-4(fp)
 40022c4:	e0800217 	ldw	r2,8(fp)
 40022c8:	2085c83a 	sub	r2,r4,r2
 40022cc:	01000044 	movi	r4,1
 40022d0:	d9000015 	stw	r4,0(sp)
 40022d4:	e1000317 	ldw	r4,12(fp)
 40022d8:	d9000115 	stw	r4,4(sp)
 40022dc:	e1000517 	ldw	r4,20(fp)
 40022e0:	d9000215 	stw	r4,8(sp)
 40022e4:	e13ffe17 	ldw	r4,-8(fp)
 40022e8:	180b883a 	mov	r5,r3
 40022ec:	e1bffe17 	ldw	r6,-8(fp)
 40022f0:	100f883a 	mov	r7,r2
 40022f4:	40006600 	call	4000660 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
 40022f8:	e0fffc17 	ldw	r3,-16(fp)
 40022fc:	e0800217 	ldw	r2,8(fp)
 4002300:	1887883a 	add	r3,r3,r2
 4002304:	e13ffe17 	ldw	r4,-8(fp)
 4002308:	e0800217 	ldw	r2,8(fp)
 400230c:	2085c83a 	sub	r2,r4,r2
 4002310:	01000044 	movi	r4,1
 4002314:	d9000015 	stw	r4,0(sp)
 4002318:	e1000317 	ldw	r4,12(fp)
 400231c:	d9000115 	stw	r4,4(sp)
 4002320:	e1000517 	ldw	r4,20(fp)
 4002324:	d9000215 	stw	r4,8(sp)
 4002328:	1809883a 	mov	r4,r3
 400232c:	e17ffd17 	ldw	r5,-12(fp)
 4002330:	100d883a 	mov	r6,r2
 4002334:	e1fffd17 	ldw	r7,-12(fp)
 4002338:	40006600 	call	4000660 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
 400233c:	e0fffc17 	ldw	r3,-16(fp)
 4002340:	e0800217 	ldw	r2,8(fp)
 4002344:	1887883a 	add	r3,r3,r2
 4002348:	e13ffe17 	ldw	r4,-8(fp)
 400234c:	e0800217 	ldw	r2,8(fp)
 4002350:	2085c83a 	sub	r2,r4,r2
 4002354:	01000044 	movi	r4,1
 4002358:	d9000015 	stw	r4,0(sp)
 400235c:	e1000317 	ldw	r4,12(fp)
 4002360:	d9000115 	stw	r4,4(sp)
 4002364:	e1000517 	ldw	r4,20(fp)
 4002368:	d9000215 	stw	r4,8(sp)
 400236c:	1809883a 	mov	r4,r3
 4002370:	e17fff17 	ldw	r5,-4(fp)
 4002374:	100d883a 	mov	r6,r2
 4002378:	e1ffff17 	ldw	r7,-4(fp)
 400237c:	40006600 	call	4000660 <vid_draw_line>
  }

  return (0);
 4002380:	0005883a 	mov	r2,zero
}
 4002384:	e037883a 	mov	sp,fp
 4002388:	dfc00117 	ldw	ra,4(sp)
 400238c:	df000017 	ldw	fp,0(sp)
 4002390:	dec00204 	addi	sp,sp,8
 4002394:	f800283a 	ret

04002398 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 4002398:	defff604 	addi	sp,sp,-40
 400239c:	dfc00915 	stw	ra,36(sp)
 40023a0:	df000815 	stw	fp,32(sp)
 40023a4:	df000804 	addi	fp,sp,32
 40023a8:	e13ffb15 	stw	r4,-20(fp)
 40023ac:	e17ffc15 	stw	r5,-16(fp)
 40023b0:	e1bffd15 	stw	r6,-12(fp)
 40023b4:	e1fffe15 	stw	r7,-8(fp)
 40023b8:	e0800517 	ldw	r2,20(fp)
 40023bc:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 40023c0:	e0bffd17 	ldw	r2,-12(fp)
 40023c4:	1000861e 	bne	r2,zero,40025e0 <vid_round_corner_points+0x248>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
 40023c8:	e0fffc17 	ldw	r3,-16(fp)
 40023cc:	e0bffe17 	ldw	r2,-8(fp)
 40023d0:	1887883a 	add	r3,r3,r2
 40023d4:	e0800317 	ldw	r2,12(fp)
 40023d8:	1887883a 	add	r3,r3,r2
 40023dc:	e0800417 	ldw	r2,16(fp)
 40023e0:	e13ffb17 	ldw	r4,-20(fp)
 40023e4:	180b883a 	mov	r5,r3
 40023e8:	100d883a 	mov	r6,r2
 40023ec:	e1c00617 	ldw	r7,24(fp)
 40023f0:	40010bc0 	call	40010bc <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
 40023f4:	e0fffb17 	ldw	r3,-20(fp)
 40023f8:	e0800217 	ldw	r2,8(fp)
 40023fc:	1889883a 	add	r4,r3,r2
 4002400:	e0fffc17 	ldw	r3,-16(fp)
 4002404:	e0bffe17 	ldw	r2,-8(fp)
 4002408:	1887883a 	add	r3,r3,r2
 400240c:	e0800317 	ldw	r2,12(fp)
 4002410:	1887883a 	add	r3,r3,r2
 4002414:	e0800417 	ldw	r2,16(fp)
 4002418:	180b883a 	mov	r5,r3
 400241c:	100d883a 	mov	r6,r2
 4002420:	e1c00617 	ldw	r7,24(fp)
 4002424:	40010bc0 	call	40010bc <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
 4002428:	e0fffc17 	ldw	r3,-16(fp)
 400242c:	e0bffe17 	ldw	r2,-8(fp)
 4002430:	1887c83a 	sub	r3,r3,r2
 4002434:	e0800417 	ldw	r2,16(fp)
 4002438:	e13ffb17 	ldw	r4,-20(fp)
 400243c:	180b883a 	mov	r5,r3
 4002440:	100d883a 	mov	r6,r2
 4002444:	e1c00617 	ldw	r7,24(fp)
 4002448:	40010bc0 	call	40010bc <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
 400244c:	e0fffb17 	ldw	r3,-20(fp)
 4002450:	e0800217 	ldw	r2,8(fp)
 4002454:	1889883a 	add	r4,r3,r2
 4002458:	e0fffc17 	ldw	r3,-16(fp)
 400245c:	e0bffe17 	ldw	r2,-8(fp)
 4002460:	1887c83a 	sub	r3,r3,r2
 4002464:	e0800417 	ldw	r2,16(fp)
 4002468:	180b883a 	mov	r5,r3
 400246c:	100d883a 	mov	r6,r2
 4002470:	e1c00617 	ldw	r7,24(fp)
 4002474:	40010bc0 	call	40010bc <vid_set_pixel>

        if(fill) {
 4002478:	e0bfff07 	ldb	r2,-4(fp)
 400247c:	10002b26 	beq	r2,zero,400252c <vid_round_corner_points+0x194>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 4002480:	e0fffb17 	ldw	r3,-20(fp)
 4002484:	e0bffe17 	ldw	r2,-8(fp)
 4002488:	1887c83a 	sub	r3,r3,r2
 400248c:	e13ffb17 	ldw	r4,-20(fp)
 4002490:	e0bffe17 	ldw	r2,-8(fp)
 4002494:	2089883a 	add	r4,r4,r2
 4002498:	e0800217 	ldw	r2,8(fp)
 400249c:	2085883a 	add	r2,r4,r2
 40024a0:	01000044 	movi	r4,1
 40024a4:	d9000015 	stw	r4,0(sp)
 40024a8:	e1000417 	ldw	r4,16(fp)
 40024ac:	d9000115 	stw	r4,4(sp)
 40024b0:	e1000617 	ldw	r4,24(fp)
 40024b4:	d9000215 	stw	r4,8(sp)
 40024b8:	1809883a 	mov	r4,r3
 40024bc:	e17ffc17 	ldw	r5,-16(fp)
 40024c0:	100d883a 	mov	r6,r2
 40024c4:	e1fffc17 	ldw	r7,-16(fp)
 40024c8:	40006600 	call	4000660 <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 40024cc:	e0fffb17 	ldw	r3,-20(fp)
 40024d0:	e0bffe17 	ldw	r2,-8(fp)
 40024d4:	1889c83a 	sub	r4,r3,r2
 40024d8:	e0fffc17 	ldw	r3,-16(fp)
 40024dc:	e0800317 	ldw	r2,12(fp)
 40024e0:	188b883a 	add	r5,r3,r2
 40024e4:	e0fffb17 	ldw	r3,-20(fp)
 40024e8:	e0bffe17 	ldw	r2,-8(fp)
 40024ec:	1887883a 	add	r3,r3,r2
 40024f0:	e0800217 	ldw	r2,8(fp)
 40024f4:	1887883a 	add	r3,r3,r2
 40024f8:	e1bffc17 	ldw	r6,-16(fp)
 40024fc:	e0800317 	ldw	r2,12(fp)
 4002500:	3085883a 	add	r2,r6,r2
 4002504:	01800044 	movi	r6,1
 4002508:	d9800015 	stw	r6,0(sp)
 400250c:	e1800417 	ldw	r6,16(fp)
 4002510:	d9800115 	stw	r6,4(sp)
 4002514:	e1800617 	ldw	r6,24(fp)
 4002518:	d9800215 	stw	r6,8(sp)
 400251c:	180d883a 	mov	r6,r3
 4002520:	100f883a 	mov	r7,r2
 4002524:	40006600 	call	4000660 <vid_draw_line>
 4002528:	00016c06 	br	4002adc <vid_round_corner_points+0x744>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
 400252c:	e0fffb17 	ldw	r3,-20(fp)
 4002530:	e0bffe17 	ldw	r2,-8(fp)
 4002534:	1887883a 	add	r3,r3,r2
 4002538:	e0800217 	ldw	r2,8(fp)
 400253c:	1887883a 	add	r3,r3,r2
 4002540:	e0800417 	ldw	r2,16(fp)
 4002544:	1809883a 	mov	r4,r3
 4002548:	e17ffc17 	ldw	r5,-16(fp)
 400254c:	100d883a 	mov	r6,r2
 4002550:	e1c00617 	ldw	r7,24(fp)
 4002554:	40010bc0 	call	40010bc <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
 4002558:	e0fffb17 	ldw	r3,-20(fp)
 400255c:	e0bffe17 	ldw	r2,-8(fp)
 4002560:	1887883a 	add	r3,r3,r2
 4002564:	e0800217 	ldw	r2,8(fp)
 4002568:	1889883a 	add	r4,r3,r2
 400256c:	e0fffc17 	ldw	r3,-16(fp)
 4002570:	e0800317 	ldw	r2,12(fp)
 4002574:	1887883a 	add	r3,r3,r2
 4002578:	e0800417 	ldw	r2,16(fp)
 400257c:	180b883a 	mov	r5,r3
 4002580:	100d883a 	mov	r6,r2
 4002584:	e1c00617 	ldw	r7,24(fp)
 4002588:	40010bc0 	call	40010bc <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
 400258c:	e0fffb17 	ldw	r3,-20(fp)
 4002590:	e0bffe17 	ldw	r2,-8(fp)
 4002594:	1887c83a 	sub	r3,r3,r2
 4002598:	e0800417 	ldw	r2,16(fp)
 400259c:	1809883a 	mov	r4,r3
 40025a0:	e17ffc17 	ldw	r5,-16(fp)
 40025a4:	100d883a 	mov	r6,r2
 40025a8:	e1c00617 	ldw	r7,24(fp)
 40025ac:	40010bc0 	call	40010bc <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
 40025b0:	e0fffb17 	ldw	r3,-20(fp)
 40025b4:	e0bffe17 	ldw	r2,-8(fp)
 40025b8:	1889c83a 	sub	r4,r3,r2
 40025bc:	e0fffc17 	ldw	r3,-16(fp)
 40025c0:	e0800317 	ldw	r2,12(fp)
 40025c4:	1887883a 	add	r3,r3,r2
 40025c8:	e0800417 	ldw	r2,16(fp)
 40025cc:	180b883a 	mov	r5,r3
 40025d0:	100d883a 	mov	r6,r2
 40025d4:	e1c00617 	ldw	r7,24(fp)
 40025d8:	40010bc0 	call	40010bc <vid_set_pixel>
 40025dc:	00013f06 	br	4002adc <vid_round_corner_points+0x744>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 40025e0:	e0fffd17 	ldw	r3,-12(fp)
 40025e4:	e0bffe17 	ldw	r2,-8(fp)
 40025e8:	18806a1e 	bne	r3,r2,4002794 <vid_round_corner_points+0x3fc>
      if(fill) {
 40025ec:	e0bfff07 	ldb	r2,-4(fp)
 40025f0:	10003326 	beq	r2,zero,40026c0 <vid_round_corner_points+0x328>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 40025f4:	e0fffb17 	ldw	r3,-20(fp)
 40025f8:	e0bffd17 	ldw	r2,-12(fp)
 40025fc:	1889c83a 	sub	r4,r3,r2
 4002600:	e0fffc17 	ldw	r3,-16(fp)
 4002604:	e0bffe17 	ldw	r2,-8(fp)
 4002608:	1887883a 	add	r3,r3,r2
 400260c:	e0800317 	ldw	r2,12(fp)
 4002610:	188b883a 	add	r5,r3,r2
 4002614:	e0fffb17 	ldw	r3,-20(fp)
 4002618:	e0bffd17 	ldw	r2,-12(fp)
 400261c:	1887883a 	add	r3,r3,r2
 4002620:	e0800217 	ldw	r2,8(fp)
 4002624:	1887883a 	add	r3,r3,r2
 4002628:	e1bffc17 	ldw	r6,-16(fp)
 400262c:	e0bffe17 	ldw	r2,-8(fp)
 4002630:	308d883a 	add	r6,r6,r2
 4002634:	e0800317 	ldw	r2,12(fp)
 4002638:	3085883a 	add	r2,r6,r2
 400263c:	01800044 	movi	r6,1
 4002640:	d9800015 	stw	r6,0(sp)
 4002644:	e1800417 	ldw	r6,16(fp)
 4002648:	d9800115 	stw	r6,4(sp)
 400264c:	e1800617 	ldw	r6,24(fp)
 4002650:	d9800215 	stw	r6,8(sp)
 4002654:	180d883a 	mov	r6,r3
 4002658:	100f883a 	mov	r7,r2
 400265c:	40006600 	call	4000660 <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 4002660:	e0fffb17 	ldw	r3,-20(fp)
 4002664:	e0bffd17 	ldw	r2,-12(fp)
 4002668:	1889c83a 	sub	r4,r3,r2
 400266c:	e0fffc17 	ldw	r3,-16(fp)
 4002670:	e0bffe17 	ldw	r2,-8(fp)
 4002674:	188bc83a 	sub	r5,r3,r2
 4002678:	e0fffb17 	ldw	r3,-20(fp)
 400267c:	e0bffd17 	ldw	r2,-12(fp)
 4002680:	1887883a 	add	r3,r3,r2
 4002684:	e0800217 	ldw	r2,8(fp)
 4002688:	1887883a 	add	r3,r3,r2
 400268c:	e1bffc17 	ldw	r6,-16(fp)
 4002690:	e0bffe17 	ldw	r2,-8(fp)
 4002694:	3085c83a 	sub	r2,r6,r2
 4002698:	01800044 	movi	r6,1
 400269c:	d9800015 	stw	r6,0(sp)
 40026a0:	e1800417 	ldw	r6,16(fp)
 40026a4:	d9800115 	stw	r6,4(sp)
 40026a8:	e1800617 	ldw	r6,24(fp)
 40026ac:	d9800215 	stw	r6,8(sp)
 40026b0:	180d883a 	mov	r6,r3
 40026b4:	100f883a 	mov	r7,r2
 40026b8:	40006600 	call	4000660 <vid_draw_line>
 40026bc:	00010706 	br	4002adc <vid_round_corner_points+0x744>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 40026c0:	e0fffb17 	ldw	r3,-20(fp)
 40026c4:	e0bffd17 	ldw	r2,-12(fp)
 40026c8:	1887883a 	add	r3,r3,r2
 40026cc:	e0800217 	ldw	r2,8(fp)
 40026d0:	1889883a 	add	r4,r3,r2
 40026d4:	e0fffc17 	ldw	r3,-16(fp)
 40026d8:	e0bffe17 	ldw	r2,-8(fp)
 40026dc:	1887883a 	add	r3,r3,r2
 40026e0:	e0800317 	ldw	r2,12(fp)
 40026e4:	1887883a 	add	r3,r3,r2
 40026e8:	e0800417 	ldw	r2,16(fp)
 40026ec:	180b883a 	mov	r5,r3
 40026f0:	100d883a 	mov	r6,r2
 40026f4:	e1c00617 	ldw	r7,24(fp)
 40026f8:	40010bc0 	call	40010bc <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
 40026fc:	e0fffb17 	ldw	r3,-20(fp)
 4002700:	e0bffd17 	ldw	r2,-12(fp)
 4002704:	1889c83a 	sub	r4,r3,r2
 4002708:	e0fffc17 	ldw	r3,-16(fp)
 400270c:	e0bffe17 	ldw	r2,-8(fp)
 4002710:	1887883a 	add	r3,r3,r2
 4002714:	e0800317 	ldw	r2,12(fp)
 4002718:	1887883a 	add	r3,r3,r2
 400271c:	e0800417 	ldw	r2,16(fp)
 4002720:	180b883a 	mov	r5,r3
 4002724:	100d883a 	mov	r6,r2
 4002728:	e1c00617 	ldw	r7,24(fp)
 400272c:	40010bc0 	call	40010bc <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
 4002730:	e0fffb17 	ldw	r3,-20(fp)
 4002734:	e0bffd17 	ldw	r2,-12(fp)
 4002738:	1887883a 	add	r3,r3,r2
 400273c:	e0800217 	ldw	r2,8(fp)
 4002740:	1889883a 	add	r4,r3,r2
 4002744:	e0fffc17 	ldw	r3,-16(fp)
 4002748:	e0bffe17 	ldw	r2,-8(fp)
 400274c:	1887c83a 	sub	r3,r3,r2
 4002750:	e0800417 	ldw	r2,16(fp)
 4002754:	180b883a 	mov	r5,r3
 4002758:	100d883a 	mov	r6,r2
 400275c:	e1c00617 	ldw	r7,24(fp)
 4002760:	40010bc0 	call	40010bc <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
 4002764:	e0fffb17 	ldw	r3,-20(fp)
 4002768:	e0bffd17 	ldw	r2,-12(fp)
 400276c:	1889c83a 	sub	r4,r3,r2
 4002770:	e0fffc17 	ldw	r3,-16(fp)
 4002774:	e0bffe17 	ldw	r2,-8(fp)
 4002778:	1887c83a 	sub	r3,r3,r2
 400277c:	e0800417 	ldw	r2,16(fp)
 4002780:	180b883a 	mov	r5,r3
 4002784:	100d883a 	mov	r6,r2
 4002788:	e1c00617 	ldw	r7,24(fp)
 400278c:	40010bc0 	call	40010bc <vid_set_pixel>
 4002790:	0000d206 	br	4002adc <vid_round_corner_points+0x744>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 4002794:	e0fffd17 	ldw	r3,-12(fp)
 4002798:	e0bffe17 	ldw	r2,-8(fp)
 400279c:	1880cf0e 	bge	r3,r2,4002adc <vid_round_corner_points+0x744>
        if(fill) {
 40027a0:	e0bfff07 	ldb	r2,-4(fp)
 40027a4:	10006526 	beq	r2,zero,400293c <vid_round_corner_points+0x5a4>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 40027a8:	e0fffb17 	ldw	r3,-20(fp)
 40027ac:	e0bffd17 	ldw	r2,-12(fp)
 40027b0:	1889c83a 	sub	r4,r3,r2
 40027b4:	e0fffc17 	ldw	r3,-16(fp)
 40027b8:	e0bffe17 	ldw	r2,-8(fp)
 40027bc:	1887883a 	add	r3,r3,r2
 40027c0:	e0800317 	ldw	r2,12(fp)
 40027c4:	188b883a 	add	r5,r3,r2
 40027c8:	e0fffb17 	ldw	r3,-20(fp)
 40027cc:	e0bffd17 	ldw	r2,-12(fp)
 40027d0:	1887883a 	add	r3,r3,r2
 40027d4:	e0800217 	ldw	r2,8(fp)
 40027d8:	1887883a 	add	r3,r3,r2
 40027dc:	e1bffc17 	ldw	r6,-16(fp)
 40027e0:	e0bffe17 	ldw	r2,-8(fp)
 40027e4:	308d883a 	add	r6,r6,r2
 40027e8:	e0800317 	ldw	r2,12(fp)
 40027ec:	3085883a 	add	r2,r6,r2
 40027f0:	01800044 	movi	r6,1
 40027f4:	d9800015 	stw	r6,0(sp)
 40027f8:	e1800417 	ldw	r6,16(fp)
 40027fc:	d9800115 	stw	r6,4(sp)
 4002800:	e1800617 	ldw	r6,24(fp)
 4002804:	d9800215 	stw	r6,8(sp)
 4002808:	180d883a 	mov	r6,r3
 400280c:	100f883a 	mov	r7,r2
 4002810:	40006600 	call	4000660 <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 4002814:	e0fffb17 	ldw	r3,-20(fp)
 4002818:	e0bffe17 	ldw	r2,-8(fp)
 400281c:	1889c83a 	sub	r4,r3,r2
 4002820:	e0fffc17 	ldw	r3,-16(fp)
 4002824:	e0bffd17 	ldw	r2,-12(fp)
 4002828:	1887883a 	add	r3,r3,r2
 400282c:	e0800317 	ldw	r2,12(fp)
 4002830:	188b883a 	add	r5,r3,r2
 4002834:	e0fffb17 	ldw	r3,-20(fp)
 4002838:	e0bffe17 	ldw	r2,-8(fp)
 400283c:	1887883a 	add	r3,r3,r2
 4002840:	e0800217 	ldw	r2,8(fp)
 4002844:	1887883a 	add	r3,r3,r2
 4002848:	e1bffc17 	ldw	r6,-16(fp)
 400284c:	e0bffd17 	ldw	r2,-12(fp)
 4002850:	308d883a 	add	r6,r6,r2
 4002854:	e0800317 	ldw	r2,12(fp)
 4002858:	3085883a 	add	r2,r6,r2
 400285c:	01800044 	movi	r6,1
 4002860:	d9800015 	stw	r6,0(sp)
 4002864:	e1800417 	ldw	r6,16(fp)
 4002868:	d9800115 	stw	r6,4(sp)
 400286c:	e1800617 	ldw	r6,24(fp)
 4002870:	d9800215 	stw	r6,8(sp)
 4002874:	180d883a 	mov	r6,r3
 4002878:	100f883a 	mov	r7,r2
 400287c:	40006600 	call	4000660 <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 4002880:	e0fffb17 	ldw	r3,-20(fp)
 4002884:	e0bffe17 	ldw	r2,-8(fp)
 4002888:	1889c83a 	sub	r4,r3,r2
 400288c:	e0fffc17 	ldw	r3,-16(fp)
 4002890:	e0bffd17 	ldw	r2,-12(fp)
 4002894:	188bc83a 	sub	r5,r3,r2
 4002898:	e0fffb17 	ldw	r3,-20(fp)
 400289c:	e0bffe17 	ldw	r2,-8(fp)
 40028a0:	1887883a 	add	r3,r3,r2
 40028a4:	e0800217 	ldw	r2,8(fp)
 40028a8:	1887883a 	add	r3,r3,r2
 40028ac:	e1bffc17 	ldw	r6,-16(fp)
 40028b0:	e0bffd17 	ldw	r2,-12(fp)
 40028b4:	3085c83a 	sub	r2,r6,r2
 40028b8:	01800044 	movi	r6,1
 40028bc:	d9800015 	stw	r6,0(sp)
 40028c0:	e1800417 	ldw	r6,16(fp)
 40028c4:	d9800115 	stw	r6,4(sp)
 40028c8:	e1800617 	ldw	r6,24(fp)
 40028cc:	d9800215 	stw	r6,8(sp)
 40028d0:	180d883a 	mov	r6,r3
 40028d4:	100f883a 	mov	r7,r2
 40028d8:	40006600 	call	4000660 <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 40028dc:	e0fffb17 	ldw	r3,-20(fp)
 40028e0:	e0bffd17 	ldw	r2,-12(fp)
 40028e4:	1889c83a 	sub	r4,r3,r2
 40028e8:	e0fffc17 	ldw	r3,-16(fp)
 40028ec:	e0bffe17 	ldw	r2,-8(fp)
 40028f0:	188bc83a 	sub	r5,r3,r2
 40028f4:	e0fffb17 	ldw	r3,-20(fp)
 40028f8:	e0bffd17 	ldw	r2,-12(fp)
 40028fc:	1887883a 	add	r3,r3,r2
 4002900:	e0800217 	ldw	r2,8(fp)
 4002904:	1887883a 	add	r3,r3,r2
 4002908:	e1bffc17 	ldw	r6,-16(fp)
 400290c:	e0bffe17 	ldw	r2,-8(fp)
 4002910:	3085c83a 	sub	r2,r6,r2
 4002914:	01800044 	movi	r6,1
 4002918:	d9800015 	stw	r6,0(sp)
 400291c:	e1800417 	ldw	r6,16(fp)
 4002920:	d9800115 	stw	r6,4(sp)
 4002924:	e1800617 	ldw	r6,24(fp)
 4002928:	d9800215 	stw	r6,8(sp)
 400292c:	180d883a 	mov	r6,r3
 4002930:	100f883a 	mov	r7,r2
 4002934:	40006600 	call	4000660 <vid_draw_line>
 4002938:	00006806 	br	4002adc <vid_round_corner_points+0x744>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
 400293c:	e0fffb17 	ldw	r3,-20(fp)
 4002940:	e0bffd17 	ldw	r2,-12(fp)
 4002944:	1887883a 	add	r3,r3,r2
 4002948:	e0800217 	ldw	r2,8(fp)
 400294c:	1889883a 	add	r4,r3,r2
 4002950:	e0fffc17 	ldw	r3,-16(fp)
 4002954:	e0bffe17 	ldw	r2,-8(fp)
 4002958:	1887883a 	add	r3,r3,r2
 400295c:	e0800317 	ldw	r2,12(fp)
 4002960:	1887883a 	add	r3,r3,r2
 4002964:	e0800417 	ldw	r2,16(fp)
 4002968:	180b883a 	mov	r5,r3
 400296c:	100d883a 	mov	r6,r2
 4002970:	e1c00617 	ldw	r7,24(fp)
 4002974:	40010bc0 	call	40010bc <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
 4002978:	e0fffb17 	ldw	r3,-20(fp)
 400297c:	e0bffd17 	ldw	r2,-12(fp)
 4002980:	1889c83a 	sub	r4,r3,r2
 4002984:	e0fffc17 	ldw	r3,-16(fp)
 4002988:	e0bffe17 	ldw	r2,-8(fp)
 400298c:	1887883a 	add	r3,r3,r2
 4002990:	e0800317 	ldw	r2,12(fp)
 4002994:	1887883a 	add	r3,r3,r2
 4002998:	e0800417 	ldw	r2,16(fp)
 400299c:	180b883a 	mov	r5,r3
 40029a0:	100d883a 	mov	r6,r2
 40029a4:	e1c00617 	ldw	r7,24(fp)
 40029a8:	40010bc0 	call	40010bc <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
 40029ac:	e0fffb17 	ldw	r3,-20(fp)
 40029b0:	e0bffd17 	ldw	r2,-12(fp)
 40029b4:	1887883a 	add	r3,r3,r2
 40029b8:	e0800217 	ldw	r2,8(fp)
 40029bc:	1889883a 	add	r4,r3,r2
 40029c0:	e0fffc17 	ldw	r3,-16(fp)
 40029c4:	e0bffe17 	ldw	r2,-8(fp)
 40029c8:	1887c83a 	sub	r3,r3,r2
 40029cc:	e0800417 	ldw	r2,16(fp)
 40029d0:	180b883a 	mov	r5,r3
 40029d4:	100d883a 	mov	r6,r2
 40029d8:	e1c00617 	ldw	r7,24(fp)
 40029dc:	40010bc0 	call	40010bc <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
 40029e0:	e0fffb17 	ldw	r3,-20(fp)
 40029e4:	e0bffd17 	ldw	r2,-12(fp)
 40029e8:	1889c83a 	sub	r4,r3,r2
 40029ec:	e0fffc17 	ldw	r3,-16(fp)
 40029f0:	e0bffe17 	ldw	r2,-8(fp)
 40029f4:	1887c83a 	sub	r3,r3,r2
 40029f8:	e0800417 	ldw	r2,16(fp)
 40029fc:	180b883a 	mov	r5,r3
 4002a00:	100d883a 	mov	r6,r2
 4002a04:	e1c00617 	ldw	r7,24(fp)
 4002a08:	40010bc0 	call	40010bc <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
 4002a0c:	e0fffb17 	ldw	r3,-20(fp)
 4002a10:	e0bffe17 	ldw	r2,-8(fp)
 4002a14:	1887883a 	add	r3,r3,r2
 4002a18:	e0800217 	ldw	r2,8(fp)
 4002a1c:	1889883a 	add	r4,r3,r2
 4002a20:	e0fffc17 	ldw	r3,-16(fp)
 4002a24:	e0bffd17 	ldw	r2,-12(fp)
 4002a28:	1887883a 	add	r3,r3,r2
 4002a2c:	e0800317 	ldw	r2,12(fp)
 4002a30:	1887883a 	add	r3,r3,r2
 4002a34:	e0800417 	ldw	r2,16(fp)
 4002a38:	180b883a 	mov	r5,r3
 4002a3c:	100d883a 	mov	r6,r2
 4002a40:	e1c00617 	ldw	r7,24(fp)
 4002a44:	40010bc0 	call	40010bc <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
 4002a48:	e0fffb17 	ldw	r3,-20(fp)
 4002a4c:	e0bffe17 	ldw	r2,-8(fp)
 4002a50:	1889c83a 	sub	r4,r3,r2
 4002a54:	e0fffc17 	ldw	r3,-16(fp)
 4002a58:	e0bffd17 	ldw	r2,-12(fp)
 4002a5c:	1887883a 	add	r3,r3,r2
 4002a60:	e0800317 	ldw	r2,12(fp)
 4002a64:	1887883a 	add	r3,r3,r2
 4002a68:	e0800417 	ldw	r2,16(fp)
 4002a6c:	180b883a 	mov	r5,r3
 4002a70:	100d883a 	mov	r6,r2
 4002a74:	e1c00617 	ldw	r7,24(fp)
 4002a78:	40010bc0 	call	40010bc <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
 4002a7c:	e0fffb17 	ldw	r3,-20(fp)
 4002a80:	e0bffe17 	ldw	r2,-8(fp)
 4002a84:	1887883a 	add	r3,r3,r2
 4002a88:	e0800217 	ldw	r2,8(fp)
 4002a8c:	1889883a 	add	r4,r3,r2
 4002a90:	e0fffc17 	ldw	r3,-16(fp)
 4002a94:	e0bffd17 	ldw	r2,-12(fp)
 4002a98:	1887c83a 	sub	r3,r3,r2
 4002a9c:	e0800417 	ldw	r2,16(fp)
 4002aa0:	180b883a 	mov	r5,r3
 4002aa4:	100d883a 	mov	r6,r2
 4002aa8:	e1c00617 	ldw	r7,24(fp)
 4002aac:	40010bc0 	call	40010bc <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
 4002ab0:	e0fffb17 	ldw	r3,-20(fp)
 4002ab4:	e0bffe17 	ldw	r2,-8(fp)
 4002ab8:	1889c83a 	sub	r4,r3,r2
 4002abc:	e0fffc17 	ldw	r3,-16(fp)
 4002ac0:	e0bffd17 	ldw	r2,-12(fp)
 4002ac4:	1887c83a 	sub	r3,r3,r2
 4002ac8:	e0800417 	ldw	r2,16(fp)
 4002acc:	180b883a 	mov	r5,r3
 4002ad0:	100d883a 	mov	r6,r2
 4002ad4:	e1c00617 	ldw	r7,24(fp)
 4002ad8:	40010bc0 	call	40010bc <vid_set_pixel>
        }
    }
}
 4002adc:	e037883a 	mov	sp,fp
 4002ae0:	dfc00117 	ldw	ra,4(sp)
 4002ae4:	df000017 	ldw	fp,0(sp)
 4002ae8:	dec00204 	addi	sp,sp,8
 4002aec:	f800283a 	ret

04002af0 <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
 4002af0:	defffc04 	addi	sp,sp,-16
 4002af4:	df000315 	stw	fp,12(sp)
 4002af8:	df000304 	addi	fp,sp,12
 4002afc:	e13ffd15 	stw	r4,-12(fp)
 4002b00:	e17ffe15 	stw	r5,-8(fp)
 4002b04:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
 4002b08:	e0fffd17 	ldw	r3,-12(fp)
 4002b0c:	e0bffe17 	ldw	r2,-8(fp)
 4002b10:	1880020e 	bge	r3,r2,4002b1c <max3+0x2c>
    a = b;
 4002b14:	e0bffe17 	ldw	r2,-8(fp)
 4002b18:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
 4002b1c:	e0fffd17 	ldw	r3,-12(fp)
 4002b20:	e0bfff17 	ldw	r2,-4(fp)
 4002b24:	1880020e 	bge	r3,r2,4002b30 <max3+0x40>
    a = c;
 4002b28:	e0bfff17 	ldw	r2,-4(fp)
 4002b2c:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4002b30:	e0bffd17 	ldw	r2,-12(fp)
}
 4002b34:	e037883a 	mov	sp,fp
 4002b38:	df000017 	ldw	fp,0(sp)
 4002b3c:	dec00104 	addi	sp,sp,4
 4002b40:	f800283a 	ret

04002b44 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
 4002b44:	defffc04 	addi	sp,sp,-16
 4002b48:	df000315 	stw	fp,12(sp)
 4002b4c:	df000304 	addi	fp,sp,12
 4002b50:	e13ffd15 	stw	r4,-12(fp)
 4002b54:	e17ffe15 	stw	r5,-8(fp)
 4002b58:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
 4002b5c:	e0bffd17 	ldw	r2,-12(fp)
 4002b60:	e0fffe17 	ldw	r3,-8(fp)
 4002b64:	1880020e 	bge	r3,r2,4002b70 <min3+0x2c>
    a = b;
 4002b68:	e0bffe17 	ldw	r2,-8(fp)
 4002b6c:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
 4002b70:	e0bffd17 	ldw	r2,-12(fp)
 4002b74:	e0ffff17 	ldw	r3,-4(fp)
 4002b78:	1880020e 	bge	r3,r2,4002b84 <min3+0x40>
    a = c;
 4002b7c:	e0bfff17 	ldw	r2,-4(fp)
 4002b80:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4002b84:	e0bffd17 	ldw	r2,-12(fp)
}
 4002b88:	e037883a 	mov	sp,fp
 4002b8c:	df000017 	ldw	fp,0(sp)
 4002b90:	dec00104 	addi	sp,sp,4
 4002b94:	f800283a 	ret

04002b98 <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
 4002b98:	defff904 	addi	sp,sp,-28
 4002b9c:	dfc00615 	stw	ra,24(sp)
 4002ba0:	df000515 	stw	fp,20(sp)
 4002ba4:	df000504 	addi	fp,sp,20
 4002ba8:	e13ffd15 	stw	r4,-12(fp)
 4002bac:	e17ffe15 	stw	r5,-8(fp)
 4002bb0:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
 4002bb4:	e13ffd17 	ldw	r4,-12(fp)
 4002bb8:	e17ffe17 	ldw	r5,-8(fp)
 4002bbc:	e1bfff17 	ldw	r6,-4(fp)
 4002bc0:	4002af00 	call	4002af0 <max3>
 4002bc4:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
 4002bc8:	e13ffd17 	ldw	r4,-12(fp)
 4002bcc:	e17ffe17 	ldw	r5,-8(fp)
 4002bd0:	e1bfff17 	ldw	r6,-4(fp)
 4002bd4:	4002b440 	call	4002b44 <min3>
 4002bd8:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
 4002bdc:	e0fffb17 	ldw	r3,-20(fp)
 4002be0:	e0bffc17 	ldw	r2,-16(fp)
 4002be4:	1885c83a 	sub	r2,r3,r2
}
 4002be8:	e037883a 	mov	sp,fp
 4002bec:	dfc00117 	ldw	ra,4(sp)
 4002bf0:	df000017 	ldw	fp,0(sp)
 4002bf4:	dec00204 	addi	sp,sp,8
 4002bf8:	f800283a 	ret

04002bfc <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
 4002bfc:	defffc04 	addi	sp,sp,-16
 4002c00:	df000315 	stw	fp,12(sp)
 4002c04:	df000304 	addi	fp,sp,12
 4002c08:	e13ffd15 	stw	r4,-12(fp)
 4002c0c:	e17ffe15 	stw	r5,-8(fp)
 4002c10:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
 4002c14:	e0bffe17 	ldw	r2,-8(fp)
 4002c18:	100490fa 	slli	r2,r2,3
 4002c1c:	e0ffff17 	ldw	r3,-4(fp)
 4002c20:	1885883a 	add	r2,r3,r2
 4002c24:	10800017 	ldw	r2,0(r2)
 4002c28:	10bfffd8 	cmpnei	r2,r2,-1
 4002c2c:	10000e1e 	bne	r2,zero,4002c68 <vid_put_pixel_in_span_map+0x6c>
  {
    span_array[y*2] = x;
 4002c30:	e0bffe17 	ldw	r2,-8(fp)
 4002c34:	100490fa 	slli	r2,r2,3
 4002c38:	e0ffff17 	ldw	r3,-4(fp)
 4002c3c:	1885883a 	add	r2,r3,r2
 4002c40:	e0fffd17 	ldw	r3,-12(fp)
 4002c44:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
 4002c48:	e0bffe17 	ldw	r2,-8(fp)
 4002c4c:	100490fa 	slli	r2,r2,3
 4002c50:	10800104 	addi	r2,r2,4
 4002c54:	e0ffff17 	ldw	r3,-4(fp)
 4002c58:	1885883a 	add	r2,r3,r2
 4002c5c:	e0fffd17 	ldw	r3,-12(fp)
 4002c60:	10c00015 	stw	r3,0(r2)
 4002c64:	00001d06 	br	4002cdc <vid_put_pixel_in_span_map+0xe0>
  }
  else if( span_array[y*2] > x )
 4002c68:	e0bffe17 	ldw	r2,-8(fp)
 4002c6c:	100490fa 	slli	r2,r2,3
 4002c70:	e0ffff17 	ldw	r3,-4(fp)
 4002c74:	1885883a 	add	r2,r3,r2
 4002c78:	10800017 	ldw	r2,0(r2)
 4002c7c:	e0fffd17 	ldw	r3,-12(fp)
 4002c80:	1880070e 	bge	r3,r2,4002ca0 <vid_put_pixel_in_span_map+0xa4>
    span_array[y*2] = x;
 4002c84:	e0bffe17 	ldw	r2,-8(fp)
 4002c88:	100490fa 	slli	r2,r2,3
 4002c8c:	e0ffff17 	ldw	r3,-4(fp)
 4002c90:	1885883a 	add	r2,r3,r2
 4002c94:	e0fffd17 	ldw	r3,-12(fp)
 4002c98:	10c00015 	stw	r3,0(r2)
 4002c9c:	00000f06 	br	4002cdc <vid_put_pixel_in_span_map+0xe0>
  else if( span_array[(y*2)+1] < x )
 4002ca0:	e0bffe17 	ldw	r2,-8(fp)
 4002ca4:	100490fa 	slli	r2,r2,3
 4002ca8:	10800104 	addi	r2,r2,4
 4002cac:	e0ffff17 	ldw	r3,-4(fp)
 4002cb0:	1885883a 	add	r2,r3,r2
 4002cb4:	10c00017 	ldw	r3,0(r2)
 4002cb8:	e0bffd17 	ldw	r2,-12(fp)
 4002cbc:	1880070e 	bge	r3,r2,4002cdc <vid_put_pixel_in_span_map+0xe0>
    span_array[(y*2)+1] = x;
 4002cc0:	e0bffe17 	ldw	r2,-8(fp)
 4002cc4:	100490fa 	slli	r2,r2,3
 4002cc8:	10800104 	addi	r2,r2,4
 4002ccc:	e0ffff17 	ldw	r3,-4(fp)
 4002cd0:	1885883a 	add	r2,r3,r2
 4002cd4:	e0fffd17 	ldw	r3,-12(fp)
 4002cd8:	10c00015 	stw	r3,0(r2)
}
 4002cdc:	e037883a 	mov	sp,fp
 4002ce0:	df000017 	ldw	fp,0(sp)
 4002ce4:	dec00104 	addi	sp,sp,4
 4002ce8:	f800283a 	ret

04002cec <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
 4002cec:	deffee04 	addi	sp,sp,-72
 4002cf0:	dfc01115 	stw	ra,68(sp)
 4002cf4:	df001015 	stw	fp,64(sp)
 4002cf8:	df001004 	addi	fp,sp,64
 4002cfc:	e13ffc15 	stw	r4,-16(fp)
 4002d00:	e17ffd15 	stw	r5,-12(fp)
 4002d04:	e1bffe15 	stw	r6,-8(fp)
 4002d08:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
 4002d0c:	e0bffc17 	ldw	r2,-16(fp)
 4002d10:	e0fffe17 	ldw	r3,-8(fp)
 4002d14:	18800c0e 	bge	r3,r2,4002d48 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
 4002d18:	e0bffe17 	ldw	r2,-8(fp)
 4002d1c:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
 4002d20:	e0bffc17 	ldw	r2,-16(fp)
 4002d24:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
 4002d28:	e0bff517 	ldw	r2,-44(fp)
 4002d2c:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
 4002d30:	e0bfff17 	ldw	r2,-4(fp)
 4002d34:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
 4002d38:	e0bffd17 	ldw	r2,-12(fp)
 4002d3c:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
 4002d40:	e0bff617 	ldw	r2,-40(fp)
 4002d44:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
 4002d48:	e0fffd17 	ldw	r3,-12(fp)
 4002d4c:	e0bfff17 	ldw	r2,-4(fp)
 4002d50:	1885c83a 	sub	r2,r3,r2
 4002d54:	1000010e 	bge	r2,zero,4002d5c <vid_bres_scan_edges+0x70>
 4002d58:	0085c83a 	sub	r2,zero,r2
 4002d5c:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
 4002d60:	e0fffe17 	ldw	r3,-8(fp)
 4002d64:	e0bffc17 	ldw	r2,-16(fp)
 4002d68:	1885c83a 	sub	r2,r3,r2
 4002d6c:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
 4002d70:	e0bffd17 	ldw	r2,-12(fp)
 4002d74:	e0ffff17 	ldw	r3,-4(fp)
 4002d78:	1880030e 	bge	r3,r2,4002d88 <vid_bres_scan_edges+0x9c>
 4002d7c:	00bfffc4 	movi	r2,-1
 4002d80:	e0bff015 	stw	r2,-64(fp)
 4002d84:	00000206 	br	4002d90 <vid_bres_scan_edges+0xa4>
 4002d88:	00800044 	movi	r2,1
 4002d8c:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
 4002d90:	00800044 	movi	r2,1
 4002d94:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
 4002d98:	e0fff217 	ldw	r3,-56(fp)
 4002d9c:	e0bff117 	ldw	r2,-60(fp)
 4002da0:	18802e16 	blt	r3,r2,4002e5c <vid_bres_scan_edges+0x170>
    int dPr   = y_delta<<1;
 4002da4:	e0bff117 	ldw	r2,-60(fp)
 4002da8:	1085883a 	add	r2,r2,r2
 4002dac:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
 4002db0:	e0bff217 	ldw	r2,-56(fp)
 4002db4:	1085883a 	add	r2,r2,r2
 4002db8:	e0fff817 	ldw	r3,-32(fp)
 4002dbc:	1885c83a 	sub	r2,r3,r2
 4002dc0:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
 4002dc4:	e0fff817 	ldw	r3,-32(fp)
 4002dc8:	e0bff217 	ldw	r2,-56(fp)
 4002dcc:	1885c83a 	sub	r2,r3,r2
 4002dd0:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 4002dd4:	00001e06 	br	4002e50 <vid_bres_scan_edges+0x164>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 4002dd8:	e13ffc17 	ldw	r4,-16(fp)
 4002ddc:	e17ffd17 	ldw	r5,-12(fp)
 4002de0:	e1800217 	ldw	r6,8(fp)
 4002de4:	4002bfc0 	call	4002bfc <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 4002de8:	e0bff317 	ldw	r2,-52(fp)
 4002dec:	00800d0e 	bge	zero,r2,4002e24 <vid_bres_scan_edges+0x138>
        x1+=x_incr;
 4002df0:	e0fffc17 	ldw	r3,-16(fp)
 4002df4:	e0bff717 	ldw	r2,-36(fp)
 4002df8:	1885883a 	add	r2,r3,r2
 4002dfc:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 4002e00:	e0fffd17 	ldw	r3,-12(fp)
 4002e04:	e0bff017 	ldw	r2,-64(fp)
 4002e08:	1885883a 	add	r2,r3,r2
 4002e0c:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 4002e10:	e0fff317 	ldw	r3,-52(fp)
 4002e14:	e0bff917 	ldw	r2,-28(fp)
 4002e18:	1885883a 	add	r2,r3,r2
 4002e1c:	e0bff315 	stw	r2,-52(fp)
 4002e20:	00000806 	br	4002e44 <vid_bres_scan_edges+0x158>
      } else {
        x1+=x_incr;
 4002e24:	e0fffc17 	ldw	r3,-16(fp)
 4002e28:	e0bff717 	ldw	r2,-36(fp)
 4002e2c:	1885883a 	add	r2,r3,r2
 4002e30:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
 4002e34:	e0fff317 	ldw	r3,-52(fp)
 4002e38:	e0bff817 	ldw	r2,-32(fp)
 4002e3c:	1885883a 	add	r2,r3,r2
 4002e40:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 4002e44:	e0bff217 	ldw	r2,-56(fp)
 4002e48:	10bfffc4 	addi	r2,r2,-1
 4002e4c:	e0bff215 	stw	r2,-56(fp)
 4002e50:	e0bff217 	ldw	r2,-56(fp)
 4002e54:	103fe00e 	bge	r2,zero,4002dd8 <__reset+0xfb001dd8>
 4002e58:	00002d06 	br	4002f10 <vid_bres_scan_edges+0x224>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
 4002e5c:	e0bff217 	ldw	r2,-56(fp)
 4002e60:	1085883a 	add	r2,r2,r2
 4002e64:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
 4002e68:	e0bff117 	ldw	r2,-60(fp)
 4002e6c:	1085883a 	add	r2,r2,r2
 4002e70:	e0fffa17 	ldw	r3,-24(fp)
 4002e74:	1885c83a 	sub	r2,r3,r2
 4002e78:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
 4002e7c:	e0fffa17 	ldw	r3,-24(fp)
 4002e80:	e0bff117 	ldw	r2,-60(fp)
 4002e84:	1885c83a 	sub	r2,r3,r2
 4002e88:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 4002e8c:	00001e06 	br	4002f08 <vid_bres_scan_edges+0x21c>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 4002e90:	e13ffc17 	ldw	r4,-16(fp)
 4002e94:	e17ffd17 	ldw	r5,-12(fp)
 4002e98:	e1800217 	ldw	r6,8(fp)
 4002e9c:	4002bfc0 	call	4002bfc <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 4002ea0:	e0bff417 	ldw	r2,-48(fp)
 4002ea4:	00800d0e 	bge	zero,r2,4002edc <vid_bres_scan_edges+0x1f0>
        x1+=x_incr;
 4002ea8:	e0fffc17 	ldw	r3,-16(fp)
 4002eac:	e0bff717 	ldw	r2,-36(fp)
 4002eb0:	1885883a 	add	r2,r3,r2
 4002eb4:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 4002eb8:	e0fffd17 	ldw	r3,-12(fp)
 4002ebc:	e0bff017 	ldw	r2,-64(fp)
 4002ec0:	1885883a 	add	r2,r3,r2
 4002ec4:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 4002ec8:	e0fff417 	ldw	r3,-48(fp)
 4002ecc:	e0bffb17 	ldw	r2,-20(fp)
 4002ed0:	1885883a 	add	r2,r3,r2
 4002ed4:	e0bff415 	stw	r2,-48(fp)
 4002ed8:	00000806 	br	4002efc <vid_bres_scan_edges+0x210>
      } else {
        y1+=y_incr;
 4002edc:	e0fffd17 	ldw	r3,-12(fp)
 4002ee0:	e0bff017 	ldw	r2,-64(fp)
 4002ee4:	1885883a 	add	r2,r3,r2
 4002ee8:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
 4002eec:	e0fff417 	ldw	r3,-48(fp)
 4002ef0:	e0bffa17 	ldw	r2,-24(fp)
 4002ef4:	1885883a 	add	r2,r3,r2
 4002ef8:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 4002efc:	e0bff117 	ldw	r2,-60(fp)
 4002f00:	10bfffc4 	addi	r2,r2,-1
 4002f04:	e0bff115 	stw	r2,-60(fp)
 4002f08:	e0bff117 	ldw	r2,-60(fp)
 4002f0c:	103fe00e 	bge	r2,zero,4002e90 <__reset+0xfb001e90>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 4002f10:	e037883a 	mov	sp,fp
 4002f14:	dfc00117 	ldw	ra,4(sp)
 4002f18:	df000017 	ldw	fp,0(sp)
 4002f1c:	dec00204 	addi	sp,sp,8
 4002f20:	f800283a 	ret

04002f24 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
 4002f24:	defff804 	addi	sp,sp,-32
 4002f28:	dfc00715 	stw	ra,28(sp)
 4002f2c:	df000615 	stw	fp,24(sp)
 4002f30:	df000604 	addi	fp,sp,24
 4002f34:	e13ffe15 	stw	r4,-8(fp)
 4002f38:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 4002f3c:	e0bffe17 	ldw	r2,-8(fp)
 4002f40:	11000017 	ldw	r4,0(r2)
 4002f44:	e0bffe17 	ldw	r2,-8(fp)
 4002f48:	11400317 	ldw	r5,12(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
 4002f4c:	e0bffe17 	ldw	r2,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 4002f50:	10c00117 	ldw	r3,4(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
 4002f54:	e0bffe17 	ldw	r2,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 4002f58:	10800417 	ldw	r2,16(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
 4002f5c:	e1bffe17 	ldw	r6,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 4002f60:	31800a17 	ldw	r6,40(r6)
 4002f64:	01c00044 	movi	r7,1
 4002f68:	d9c00015 	stw	r7,0(sp)
 4002f6c:	d9800115 	stw	r6,4(sp)
 4002f70:	e1bfff17 	ldw	r6,-4(fp)
 4002f74:	d9800215 	stw	r6,8(sp)
 4002f78:	180d883a 	mov	r6,r3
 4002f7c:	100f883a 	mov	r7,r2
 4002f80:	40006600 	call	4000660 <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 4002f84:	e0bffe17 	ldw	r2,-8(fp)
 4002f88:	11000117 	ldw	r4,4(r2)
 4002f8c:	e0bffe17 	ldw	r2,-8(fp)
 4002f90:	11400417 	ldw	r5,16(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
 4002f94:	e0bffe17 	ldw	r2,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 4002f98:	10c00217 	ldw	r3,8(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
 4002f9c:	e0bffe17 	ldw	r2,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 4002fa0:	10800517 	ldw	r2,20(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
 4002fa4:	e1bffe17 	ldw	r6,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 4002fa8:	31800a17 	ldw	r6,40(r6)
 4002fac:	01c00044 	movi	r7,1
 4002fb0:	d9c00015 	stw	r7,0(sp)
 4002fb4:	d9800115 	stw	r6,4(sp)
 4002fb8:	e1bfff17 	ldw	r6,-4(fp)
 4002fbc:	d9800215 	stw	r6,8(sp)
 4002fc0:	180d883a 	mov	r6,r3
 4002fc4:	100f883a 	mov	r7,r2
 4002fc8:	40006600 	call	4000660 <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 4002fcc:	e0bffe17 	ldw	r2,-8(fp)
 4002fd0:	11000217 	ldw	r4,8(r2)
 4002fd4:	e0bffe17 	ldw	r2,-8(fp)
 4002fd8:	11400517 	ldw	r5,20(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
 4002fdc:	e0bffe17 	ldw	r2,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 4002fe0:	10c00017 	ldw	r3,0(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
 4002fe4:	e0bffe17 	ldw	r2,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 4002fe8:	10800317 	ldw	r2,12(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
 4002fec:	e1bffe17 	ldw	r6,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 4002ff0:	31800a17 	ldw	r6,40(r6)
 4002ff4:	01c00044 	movi	r7,1
 4002ff8:	d9c00015 	stw	r7,0(sp)
 4002ffc:	d9800115 	stw	r6,4(sp)
 4003000:	e1bfff17 	ldw	r6,-4(fp)
 4003004:	d9800215 	stw	r6,8(sp)
 4003008:	180d883a 	mov	r6,r3
 400300c:	100f883a 	mov	r7,r2
 4003010:	40006600 	call	4000660 <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
 4003014:	e0bffe17 	ldw	r2,-8(fp)
 4003018:	10800b17 	ldw	r2,44(r2)
 400301c:	10800058 	cmpnei	r2,r2,1
 4003020:	1000a01e 	bne	r2,zero,40032a4 <vid_draw_triangle+0x380>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4003024:	e0bffe17 	ldw	r2,-8(fp)
 4003028:	11000317 	ldw	r4,12(r2)
 400302c:	e0bffe17 	ldw	r2,-8(fp)
 4003030:	10c00417 	ldw	r3,16(r2)
 4003034:	e0bffe17 	ldw	r2,-8(fp)
 4003038:	10800517 	ldw	r2,20(r2)
 400303c:	180b883a 	mov	r5,r3
 4003040:	100d883a 	mov	r6,r2
 4003044:	4002b440 	call	4002b44 <min3>
 4003048:	e0fffe17 	ldw	r3,-8(fp)
 400304c:	18800815 	stw	r2,32(r3)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4003050:	e0bffe17 	ldw	r2,-8(fp)
 4003054:	11000317 	ldw	r4,12(r2)
 4003058:	e0bffe17 	ldw	r2,-8(fp)
 400305c:	10c00417 	ldw	r3,16(r2)
 4003060:	e0bffe17 	ldw	r2,-8(fp)
 4003064:	10800517 	ldw	r2,20(r2)
 4003068:	180b883a 	mov	r5,r3
 400306c:	100d883a 	mov	r6,r2
 4003070:	4002af00 	call	4002af0 <max3>
 4003074:	e0fffe17 	ldw	r3,-8(fp)
 4003078:	18800915 	stw	r2,36(r3)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 400307c:	e0bffe17 	ldw	r2,-8(fp)
 4003080:	11000317 	ldw	r4,12(r2)
 4003084:	e0bffe17 	ldw	r2,-8(fp)
 4003088:	10c00417 	ldw	r3,16(r2)
 400308c:	e0bffe17 	ldw	r2,-8(fp)
 4003090:	10800517 	ldw	r2,20(r2)
 4003094:	180b883a 	mov	r5,r3
 4003098:	100d883a 	mov	r6,r2
 400309c:	4002b980 	call	4002b98 <max_diff3>
 40030a0:	e0fffe17 	ldw	r3,-8(fp)
 40030a4:	18800615 	stw	r2,24(r3)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
 40030a8:	e0bffe17 	ldw	r2,-8(fp)
 40030ac:	11000017 	ldw	r4,0(r2)
 40030b0:	e0bffe17 	ldw	r2,-8(fp)
 40030b4:	10c00117 	ldw	r3,4(r2)
 40030b8:	e0bffe17 	ldw	r2,-8(fp)
 40030bc:	10800217 	ldw	r2,8(r2)
 40030c0:	180b883a 	mov	r5,r3
 40030c4:	100d883a 	mov	r6,r2
 40030c8:	4002b980 	call	4002b98 <max_diff3>
 40030cc:	e0fffe17 	ldw	r3,-8(fp)
 40030d0:	18800715 	stw	r2,28(r3)
    tri->span_array = malloc(display->height * 4 * 2);
 40030d4:	e0bfff17 	ldw	r2,-4(fp)
 40030d8:	10800617 	ldw	r2,24(r2)
 40030dc:	100490fa 	slli	r2,r2,3
 40030e0:	1009883a 	mov	r4,r2
 40030e4:	400a44c0 	call	400a44c <malloc>
 40030e8:	1007883a 	mov	r3,r2
 40030ec:	e0bffe17 	ldw	r2,-8(fp)
 40030f0:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 40030f4:	e0bffe17 	ldw	r2,-8(fp)
 40030f8:	10800817 	ldw	r2,32(r2)
 40030fc:	e0bffd15 	stw	r2,-12(fp)
 4003100:	00001206 	br	400314c <vid_draw_triangle+0x228>
    {
      tri->span_array[i*2] = -1;
 4003104:	e0bffe17 	ldw	r2,-8(fp)
 4003108:	10c00d17 	ldw	r3,52(r2)
 400310c:	e0bffd17 	ldw	r2,-12(fp)
 4003110:	100490fa 	slli	r2,r2,3
 4003114:	1885883a 	add	r2,r3,r2
 4003118:	00ffffc4 	movi	r3,-1
 400311c:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
 4003120:	e0bffe17 	ldw	r2,-8(fp)
 4003124:	10c00d17 	ldw	r3,52(r2)
 4003128:	e0bffd17 	ldw	r2,-12(fp)
 400312c:	100490fa 	slli	r2,r2,3
 4003130:	10800104 	addi	r2,r2,4
 4003134:	1885883a 	add	r2,r3,r2
 4003138:	00ffffc4 	movi	r3,-1
 400313c:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 4003140:	e0bffd17 	ldw	r2,-12(fp)
 4003144:	10800044 	addi	r2,r2,1
 4003148:	e0bffd15 	stw	r2,-12(fp)
 400314c:	e0bffe17 	ldw	r2,-8(fp)
 4003150:	10c00917 	ldw	r3,36(r2)
 4003154:	e0bffd17 	ldw	r2,-12(fp)
 4003158:	18bfea0e 	bge	r3,r2,4003104 <__reset+0xfb002104>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 400315c:	e0bffe17 	ldw	r2,-8(fp)
 4003160:	11000017 	ldw	r4,0(r2)
 4003164:	e0bffe17 	ldw	r2,-8(fp)
 4003168:	11400317 	ldw	r5,12(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 400316c:	e0bffe17 	ldw	r2,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 4003170:	10c00117 	ldw	r3,4(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 4003174:	e0bffe17 	ldw	r2,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 4003178:	10800417 	ldw	r2,16(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 400317c:	e1bffe17 	ldw	r6,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 4003180:	31800d17 	ldw	r6,52(r6)
 4003184:	d9800015 	stw	r6,0(sp)
 4003188:	180d883a 	mov	r6,r3
 400318c:	100f883a 	mov	r7,r2
 4003190:	4002cec0 	call	4002cec <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 4003194:	e0bffe17 	ldw	r2,-8(fp)
 4003198:	11000117 	ldw	r4,4(r2)
 400319c:	e0bffe17 	ldw	r2,-8(fp)
 40031a0:	11400417 	ldw	r5,16(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 40031a4:	e0bffe17 	ldw	r2,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 40031a8:	10c00217 	ldw	r3,8(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 40031ac:	e0bffe17 	ldw	r2,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 40031b0:	10800517 	ldw	r2,20(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 40031b4:	e1bffe17 	ldw	r6,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 40031b8:	31800d17 	ldw	r6,52(r6)
 40031bc:	d9800015 	stw	r6,0(sp)
 40031c0:	180d883a 	mov	r6,r3
 40031c4:	100f883a 	mov	r7,r2
 40031c8:	4002cec0 	call	4002cec <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 40031cc:	e0bffe17 	ldw	r2,-8(fp)
 40031d0:	11000217 	ldw	r4,8(r2)
 40031d4:	e0bffe17 	ldw	r2,-8(fp)
 40031d8:	11400517 	ldw	r5,20(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 40031dc:	e0bffe17 	ldw	r2,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 40031e0:	10c00017 	ldw	r3,0(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 40031e4:	e0bffe17 	ldw	r2,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 40031e8:	10800317 	ldw	r2,12(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 40031ec:	e1bffe17 	ldw	r6,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 40031f0:	31800d17 	ldw	r6,52(r6)
 40031f4:	d9800015 	stw	r6,0(sp)
 40031f8:	180d883a 	mov	r6,r3
 40031fc:	100f883a 	mov	r7,r2
 4003200:	4002cec0 	call	4002cec <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 4003204:	e0bffe17 	ldw	r2,-8(fp)
 4003208:	10800817 	ldw	r2,32(r2)
 400320c:	e0bffd15 	stw	r2,-12(fp)
 4003210:	00001c06 	br	4003284 <vid_draw_triangle+0x360>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
 4003214:	e0bffe17 	ldw	r2,-8(fp)
 4003218:	10c00d17 	ldw	r3,52(r2)
 400321c:	e0bffd17 	ldw	r2,-12(fp)
 4003220:	100490fa 	slli	r2,r2,3
 4003224:	1885883a 	add	r2,r3,r2
 4003228:	10c00017 	ldw	r3,0(r2)
 400322c:	e0bffe17 	ldw	r2,-8(fp)
 4003230:	11000d17 	ldw	r4,52(r2)
 4003234:	e0bffd17 	ldw	r2,-12(fp)
 4003238:	100490fa 	slli	r2,r2,3
 400323c:	10800104 	addi	r2,r2,4
 4003240:	2085883a 	add	r2,r4,r2
 4003244:	10800017 	ldw	r2,0(r2)
 4003248:	e13ffe17 	ldw	r4,-8(fp)
 400324c:	21000a17 	ldw	r4,40(r4)
 4003250:	01400044 	movi	r5,1
 4003254:	d9400015 	stw	r5,0(sp)
 4003258:	d9000115 	stw	r4,4(sp)
 400325c:	e13fff17 	ldw	r4,-4(fp)
 4003260:	d9000215 	stw	r4,8(sp)
 4003264:	1809883a 	mov	r4,r3
 4003268:	e17ffd17 	ldw	r5,-12(fp)
 400326c:	100d883a 	mov	r6,r2
 4003270:	e1fffd17 	ldw	r7,-12(fp)
 4003274:	40006600 	call	4000660 <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 4003278:	e0bffd17 	ldw	r2,-12(fp)
 400327c:	10800044 	addi	r2,r2,1
 4003280:	e0bffd15 	stw	r2,-12(fp)
 4003284:	e0bffe17 	ldw	r2,-8(fp)
 4003288:	10c00917 	ldw	r3,36(r2)
 400328c:	e0bffd17 	ldw	r2,-12(fp)
 4003290:	18bfe00e 	bge	r3,r2,4003214 <__reset+0xfb002214>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
 4003294:	e0bffe17 	ldw	r2,-8(fp)
 4003298:	10800d17 	ldw	r2,52(r2)
 400329c:	1009883a 	mov	r4,r2
 40032a0:	400a4600 	call	400a460 <free>
  }
}
 40032a4:	e037883a 	mov	sp,fp
 40032a8:	dfc00117 	ldw	ra,4(sp)
 40032ac:	df000017 	ldw	fp,0(sp)
 40032b0:	dec00204 	addi	sp,sp,8
 40032b4:	f800283a 	ret

040032b8 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
 40032b8:	defff404 	addi	sp,sp,-48
 40032bc:	dfc00b15 	stw	ra,44(sp)
 40032c0:	df000a15 	stw	fp,40(sp)
 40032c4:	df000a04 	addi	fp,sp,40
 40032c8:	e13ffa15 	stw	r4,-24(fp)
 40032cc:	e17ffb15 	stw	r5,-20(fp)
 40032d0:	3007883a 	mov	r3,r6
 40032d4:	3805883a 	mov	r2,r7
 40032d8:	e1400217 	ldw	r5,8(fp)
 40032dc:	e1000317 	ldw	r4,12(fp)
 40032e0:	e0fffc0d 	sth	r3,-16(fp)
 40032e4:	e0bffd0d 	sth	r2,-12(fp)
 40032e8:	e17ffe0d 	sth	r5,-8(fp)
 40032ec:	e13fff0d 	sth	r4,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
 40032f0:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
 40032f4:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
 40032f8:	e03ff615 	stw	zero,-40(fp)
 40032fc:	e03ff715 	stw	zero,-36(fp)
 4003300:	00001b06 	br	4003370 <CopyImage16+0xb8>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003304:	e0bff917 	ldw	r2,-28(fp)
 4003308:	1085883a 	add	r2,r2,r2
 400330c:	e0fffb17 	ldw	r3,-20(fp)
 4003310:	1889883a 	add	r4,r3,r2
 4003314:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
 4003318:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 400331c:	e0fffa17 	ldw	r3,-24(fp)
 4003320:	1887883a 	add	r3,r3,r2
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
 4003324:	e0bffc0f 	ldh	r2,-16(fp)
 4003328:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 400332c:	180b883a 	mov	r5,r3
 4003330:	100d883a 	mov	r6,r2
 4003334:	400abf80 	call	400abf8 <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 4003338:	e0bff617 	ldw	r2,-40(fp)
 400333c:	10800044 	addi	r2,r2,1
 4003340:	e0bff615 	stw	r2,-40(fp)
 4003344:	e0bff717 	ldw	r2,-36(fp)
 4003348:	10800044 	addi	r2,r2,1
 400334c:	e0bff715 	stw	r2,-36(fp)
 4003350:	e0bffc0f 	ldh	r2,-16(fp)
 4003354:	e0fff817 	ldw	r3,-32(fp)
 4003358:	1885883a 	add	r2,r3,r2
 400335c:	e0bff815 	stw	r2,-32(fp)
 4003360:	e0bffe0f 	ldh	r2,-8(fp)
 4003364:	e0fff917 	ldw	r3,-28(fp)
 4003368:	1885883a 	add	r2,r3,r2
 400336c:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
 4003370:	e0bffd0f 	ldh	r2,-12(fp)
 4003374:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
 4003378:	e0bff617 	ldw	r2,-40(fp)
 400337c:	18bfe10e 	bge	r3,r2,4003304 <__reset+0xfb002304>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
 4003380:	e037883a 	mov	sp,fp
 4003384:	dfc00117 	ldw	ra,4(sp)
 4003388:	df000017 	ldw	fp,0(sp)
 400338c:	dec00204 	addi	sp,sp,8
 4003390:	f800283a 	ret

04003394 <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
 4003394:	defff004 	addi	sp,sp,-64
 4003398:	dfc00f15 	stw	ra,60(sp)
 400339c:	df000e15 	stw	fp,56(sp)
 40033a0:	df000e04 	addi	fp,sp,56
 40033a4:	e13ff615 	stw	r4,-40(fp)
 40033a8:	e17ff715 	stw	r5,-36(fp)
 40033ac:	3007883a 	mov	r3,r6
 40033b0:	3805883a 	mov	r2,r7
 40033b4:	e2400217 	ldw	r9,8(fp)
 40033b8:	e2000317 	ldw	r8,12(fp)
 40033bc:	e1c00417 	ldw	r7,16(fp)
 40033c0:	e1800517 	ldw	r6,20(fp)
 40033c4:	e1400617 	ldw	r5,24(fp)
 40033c8:	e1000717 	ldw	r4,28(fp)
 40033cc:	e0fff80d 	sth	r3,-32(fp)
 40033d0:	e0bff90d 	sth	r2,-28(fp)
 40033d4:	e27ffa0d 	sth	r9,-24(fp)
 40033d8:	e23ffb0d 	sth	r8,-20(fp)
 40033dc:	e1fffc0d 	sth	r7,-16(fp)
 40033e0:	e1bffd0d 	sth	r6,-12(fp)
 40033e4:	e17ffe0d 	sth	r5,-8(fp)
 40033e8:	e13fff0d 	sth	r4,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
 40033ec:	e0fff80f 	ldh	r3,-32(fp)
 40033f0:	e0bffc0f 	ldh	r2,-16(fp)
 40033f4:	1809883a 	mov	r4,r3
 40033f8:	100b883a 	mov	r5,r2
 40033fc:	4009dd80 	call	4009dd8 <__mulsi3>
 4003400:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
 4003404:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
 4003408:	e0bffc0f 	ldh	r2,-16(fp)
 400340c:	e0bff215 	stw	r2,-56(fp)
 4003410:	e03ff315 	stw	zero,-52(fp)
 4003414:	00002106 	br	400349c <CropImage16+0x108>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003418:	e0bff517 	ldw	r2,-44(fp)
 400341c:	1085883a 	add	r2,r2,r2
 4003420:	e0fff717 	ldw	r3,-36(fp)
 4003424:	1889883a 	add	r4,r3,r2
           ( source_buffer + y_src_offset + crop_left ), 
 4003428:	e0fffa0f 	ldh	r3,-24(fp)
 400342c:	e0bff417 	ldw	r2,-48(fp)
 4003430:	1885883a 	add	r2,r3,r2
 4003434:	1085883a 	add	r2,r2,r2
 4003438:	e0fff617 	ldw	r3,-40(fp)
 400343c:	1887883a 	add	r3,r3,r2
           ((source_width - crop_left - crop_right) << 1));
 4003440:	e17ff80f 	ldh	r5,-32(fp)
 4003444:	e0bffa0f 	ldh	r2,-24(fp)
 4003448:	288bc83a 	sub	r5,r5,r2
 400344c:	e0bffb0f 	ldh	r2,-20(fp)
 4003450:	2885c83a 	sub	r2,r5,r2
 4003454:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003458:	180b883a 	mov	r5,r3
 400345c:	100d883a 	mov	r6,r2
 4003460:	400abf80 	call	400abf8 <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 4003464:	e0bff217 	ldw	r2,-56(fp)
 4003468:	10800044 	addi	r2,r2,1
 400346c:	e0bff215 	stw	r2,-56(fp)
 4003470:	e0bff317 	ldw	r2,-52(fp)
 4003474:	10800044 	addi	r2,r2,1
 4003478:	e0bff315 	stw	r2,-52(fp)
 400347c:	e0bff80f 	ldh	r2,-32(fp)
 4003480:	e0fff417 	ldw	r3,-48(fp)
 4003484:	1885883a 	add	r2,r3,r2
 4003488:	e0bff415 	stw	r2,-48(fp)
 400348c:	e0bffe0f 	ldh	r2,-8(fp)
 4003490:	e0fff517 	ldw	r3,-44(fp)
 4003494:	1885883a 	add	r2,r3,r2
 4003498:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
 400349c:	e0fff90f 	ldh	r3,-28(fp)
 40034a0:	e0bffd0f 	ldh	r2,-12(fp)
 40034a4:	1885c83a 	sub	r2,r3,r2
 40034a8:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
 40034ac:	e0bff217 	ldw	r2,-56(fp)
 40034b0:	18bfd90e 	bge	r3,r2,4003418 <__reset+0xfb002418>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
 40034b4:	e037883a 	mov	sp,fp
 40034b8:	dfc00117 	ldw	ra,4(sp)
 40034bc:	df000017 	ldw	fp,0(sp)
 40034c0:	dec00204 	addi	sp,sp,8
 40034c4:	f800283a 	ret

040034c8 <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 40034c8:	defff404 	addi	sp,sp,-48
 40034cc:	dfc00b15 	stw	ra,44(sp)
 40034d0:	df000a15 	stw	fp,40(sp)
 40034d4:	df000a04 	addi	fp,sp,40
 40034d8:	e13ffc15 	stw	r4,-16(fp)
 40034dc:	e17ffd15 	stw	r5,-12(fp)
 40034e0:	e1bffe15 	stw	r6,-8(fp)
 40034e4:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 40034e8:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 40034ec:	e0bffc17 	ldw	r2,-16(fp)
 40034f0:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 40034f4:	00007d06 	br	40036ec <vid_print_string_alpha+0x224>
    //Handle newline char here.
    if (string[i] == '\n') {
 40034f8:	e0bff917 	ldw	r2,-28(fp)
 40034fc:	e0c00417 	ldw	r3,16(fp)
 4003500:	1885883a 	add	r2,r3,r2
 4003504:	10800003 	ldbu	r2,0(r2)
 4003508:	10803fcc 	andi	r2,r2,255
 400350c:	1080201c 	xori	r2,r2,128
 4003510:	10bfe004 	addi	r2,r2,-128
 4003514:	10800298 	cmpnei	r2,r2,10
 4003518:	10000c1e 	bne	r2,zero,400354c <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
 400351c:	e0bffb17 	ldw	r2,-20(fp)
 4003520:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 4003524:	e0800217 	ldw	r2,8(fp)
 4003528:	1082d804 	addi	r2,r2,2912
 400352c:	10c00517 	ldw	r3,20(r2)
 4003530:	e0bffd17 	ldw	r2,-12(fp)
 4003534:	1885883a 	add	r2,r3,r2
 4003538:	e0bffd15 	stw	r2,-12(fp)
      i++;
 400353c:	e0bff917 	ldw	r2,-28(fp)
 4003540:	10800044 	addi	r2,r2,1
 4003544:	e0bff915 	stw	r2,-28(fp)
      continue;
 4003548:	00006806 	br	40036ec <vid_print_string_alpha+0x224>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 400354c:	e0bff917 	ldw	r2,-28(fp)
 4003550:	e0c00417 	ldw	r3,16(fp)
 4003554:	1885883a 	add	r2,r3,r2
 4003558:	10800003 	ldbu	r2,0(r2)
 400355c:	10803fcc 	andi	r2,r2,255
 4003560:	1080201c 	xori	r2,r2,128
 4003564:	10bfe004 	addi	r2,r2,-128
 4003568:	10800818 	cmpnei	r2,r2,32
 400356c:	1000151e 	bne	r2,zero,40035c4 <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 4003570:	e0bfff17 	ldw	r2,-4(fp)
 4003574:	10bfffe0 	cmpeqi	r2,r2,-1
 4003578:	10000b1e 	bne	r2,zero,40035a8 <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 400357c:	e0bfff17 	ldw	r2,-4(fp)
 4003580:	d8800015 	stw	r2,0(sp)
 4003584:	e0800217 	ldw	r2,8(fp)
 4003588:	d8800115 	stw	r2,4(sp)
 400358c:	e0800317 	ldw	r2,12(fp)
 4003590:	d8800215 	stw	r2,8(sp)
 4003594:	e13ffc17 	ldw	r4,-16(fp)
 4003598:	e17ffd17 	ldw	r5,-12(fp)
 400359c:	e1bfff17 	ldw	r6,-4(fp)
 40035a0:	01c00b44 	movi	r7,45
 40035a4:	4003ea40 	call	4003ea4 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 40035a8:	e0800217 	ldw	r2,8(fp)
 40035ac:	10806004 	addi	r2,r2,384
 40035b0:	10c00417 	ldw	r3,16(r2)
 40035b4:	e0bffc17 	ldw	r2,-16(fp)
 40035b8:	1885883a 	add	r2,r3,r2
 40035bc:	e0bffc15 	stw	r2,-16(fp)
 40035c0:	00004706 	br	40036e0 <vid_print_string_alpha+0x218>
    }
    else if(string[i] == '\t')  // this is a tab
 40035c4:	e0bff917 	ldw	r2,-28(fp)
 40035c8:	e0c00417 	ldw	r3,16(fp)
 40035cc:	1885883a 	add	r2,r3,r2
 40035d0:	10800003 	ldbu	r2,0(r2)
 40035d4:	10803fcc 	andi	r2,r2,255
 40035d8:	1080201c 	xori	r2,r2,128
 40035dc:	10bfe004 	addi	r2,r2,-128
 40035e0:	10800258 	cmpnei	r2,r2,9
 40035e4:	10001d1e 	bne	r2,zero,400365c <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 40035e8:	e03ffa15 	stw	zero,-24(fp)
 40035ec:	00001706 	br	400364c <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 40035f0:	e0bfff17 	ldw	r2,-4(fp)
 40035f4:	10bfffe0 	cmpeqi	r2,r2,-1
 40035f8:	10000b1e 	bne	r2,zero,4003628 <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 40035fc:	e0bfff17 	ldw	r2,-4(fp)
 4003600:	d8800015 	stw	r2,0(sp)
 4003604:	e0800217 	ldw	r2,8(fp)
 4003608:	d8800115 	stw	r2,4(sp)
 400360c:	e0800317 	ldw	r2,12(fp)
 4003610:	d8800215 	stw	r2,8(sp)
 4003614:	e13ffc17 	ldw	r4,-16(fp)
 4003618:	e17ffd17 	ldw	r5,-12(fp)
 400361c:	e1bfff17 	ldw	r6,-4(fp)
 4003620:	01c00b44 	movi	r7,45
 4003624:	4003ea40 	call	4003ea4 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 4003628:	e0800217 	ldw	r2,8(fp)
 400362c:	10806004 	addi	r2,r2,384
 4003630:	10c00417 	ldw	r3,16(r2)
 4003634:	e0bffc17 	ldw	r2,-16(fp)
 4003638:	1885883a 	add	r2,r3,r2
 400363c:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4003640:	e0bffa17 	ldw	r2,-24(fp)
 4003644:	10800044 	addi	r2,r2,1
 4003648:	e0bffa15 	stw	r2,-24(fp)
 400364c:	e0bffa17 	ldw	r2,-24(fp)
 4003650:	10800090 	cmplti	r2,r2,2
 4003654:	103fe61e 	bne	r2,zero,40035f0 <__reset+0xfb0025f0>
 4003658:	00002106 	br	40036e0 <vid_print_string_alpha+0x218>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 400365c:	e0bff917 	ldw	r2,-28(fp)
 4003660:	e0c00417 	ldw	r3,16(fp)
 4003664:	1885883a 	add	r2,r3,r2
 4003668:	10800003 	ldbu	r2,0(r2)
 400366c:	10803fcc 	andi	r2,r2,255
 4003670:	1080201c 	xori	r2,r2,128
 4003674:	10bfe004 	addi	r2,r2,-128
 4003678:	e0ffff17 	ldw	r3,-4(fp)
 400367c:	d8c00015 	stw	r3,0(sp)
 4003680:	e0c00217 	ldw	r3,8(fp)
 4003684:	d8c00115 	stw	r3,4(sp)
 4003688:	e0c00317 	ldw	r3,12(fp)
 400368c:	d8c00215 	stw	r3,8(sp)
 4003690:	e13ffc17 	ldw	r4,-16(fp)
 4003694:	e17ffd17 	ldw	r5,-12(fp)
 4003698:	e1bffe17 	ldw	r6,-8(fp)
 400369c:	100f883a 	mov	r7,r2
 40036a0:	4003ea40 	call	4003ea4 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
 40036a4:	e0bff917 	ldw	r2,-28(fp)
 40036a8:	e0c00417 	ldw	r3,16(fp)
 40036ac:	1885883a 	add	r2,r3,r2
 40036b0:	10800003 	ldbu	r2,0(r2)
 40036b4:	10803fcc 	andi	r2,r2,255
 40036b8:	1080201c 	xori	r2,r2,128
 40036bc:	10bfe004 	addi	r2,r2,-128
 40036c0:	10bff7c4 	addi	r2,r2,-33
 40036c4:	1004917a 	slli	r2,r2,5
 40036c8:	e0c00217 	ldw	r3,8(fp)
 40036cc:	1885883a 	add	r2,r3,r2
 40036d0:	10c00417 	ldw	r3,16(r2)
 40036d4:	e0bffc17 	ldw	r2,-16(fp)
 40036d8:	1885883a 	add	r2,r3,r2
 40036dc:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 40036e0:	e0bff917 	ldw	r2,-28(fp)
 40036e4:	10800044 	addi	r2,r2,1
 40036e8:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 40036ec:	e0bff917 	ldw	r2,-28(fp)
 40036f0:	e0c00417 	ldw	r3,16(fp)
 40036f4:	1885883a 	add	r2,r3,r2
 40036f8:	10800003 	ldbu	r2,0(r2)
 40036fc:	10803fcc 	andi	r2,r2,255
 4003700:	1080201c 	xori	r2,r2,128
 4003704:	10bfe004 	addi	r2,r2,-128
 4003708:	103f7b1e 	bne	r2,zero,40034f8 <__reset+0xfb0024f8>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 400370c:	0005883a 	mov	r2,zero
}
 4003710:	e037883a 	mov	sp,fp
 4003714:	dfc00117 	ldw	ra,4(sp)
 4003718:	df000017 	ldw	fp,0(sp)
 400371c:	dec00204 	addi	sp,sp,8
 4003720:	f800283a 	ret

04003724 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 4003724:	defff904 	addi	sp,sp,-28
 4003728:	df000615 	stw	fp,24(sp)
 400372c:	df000604 	addi	fp,sp,24
 4003730:	e13ffc15 	stw	r4,-16(fp)
 4003734:	e17ffd15 	stw	r5,-12(fp)
 4003738:	e1bffe15 	stw	r6,-8(fp)
 400373c:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 4003740:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
 4003744:	e0bffc17 	ldw	r2,-16(fp)
 4003748:	10800418 	cmpnei	r2,r2,16
 400374c:	1000231e 	bne	r2,zero,40037dc <seperate_color_channels+0xb8>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 4003750:	e0bffd17 	ldw	r2,-12(fp)
 4003754:	10800003 	ldbu	r2,0(r2)
 4003758:	10803fcc 	andi	r2,r2,255
 400375c:	e0bffb0d 	sth	r2,-20(fp)
 4003760:	e0bffd17 	ldw	r2,-12(fp)
 4003764:	10800044 	addi	r2,r2,1
 4003768:	e0bffd15 	stw	r2,-12(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 400376c:	e0bffd17 	ldw	r2,-12(fp)
 4003770:	10800003 	ldbu	r2,0(r2)
 4003774:	10803fcc 	andi	r2,r2,255
 4003778:	1004923a 	slli	r2,r2,8
 400377c:	1007883a 	mov	r3,r2
 4003780:	e0bffb0b 	ldhu	r2,-20(fp)
 4003784:	1885883a 	add	r2,r3,r2
 4003788:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
 400378c:	e0bffb0b 	ldhu	r2,-20(fp)
 4003790:	108007cc 	andi	r2,r2,31
 4003794:	1007883a 	mov	r3,r2
 4003798:	e0800117 	ldw	r2,4(fp)
 400379c:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 40037a0:	e0bffb0b 	ldhu	r2,-20(fp)
 40037a4:	1004d17a 	srli	r2,r2,5
 40037a8:	10800fcc 	andi	r2,r2,63
 40037ac:	1007883a 	mov	r3,r2
 40037b0:	e0bfff17 	ldw	r2,-4(fp)
 40037b4:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 40037b8:	e0bffb0b 	ldhu	r2,-20(fp)
 40037bc:	1004d2fa 	srli	r2,r2,11
 40037c0:	108007cc 	andi	r2,r2,31
 40037c4:	1007883a 	mov	r3,r2
 40037c8:	e0bffe17 	ldw	r2,-8(fp)
 40037cc:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40037d0:	00800044 	movi	r2,1
 40037d4:	e0bffa15 	stw	r2,-24(fp)
 40037d8:	00002206 	br	4003864 <seperate_color_channels+0x140>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 40037dc:	e0bffc17 	ldw	r2,-16(fp)
 40037e0:	10800620 	cmpeqi	r2,r2,24
 40037e4:	1000031e 	bne	r2,zero,40037f4 <seperate_color_channels+0xd0>
 40037e8:	e0bffc17 	ldw	r2,-16(fp)
 40037ec:	10800818 	cmpnei	r2,r2,32
 40037f0:	1000151e 	bne	r2,zero,4003848 <seperate_color_channels+0x124>
  {
    *blue = *color++;
 40037f4:	e0bffd17 	ldw	r2,-12(fp)
 40037f8:	10c00003 	ldbu	r3,0(r2)
 40037fc:	e0800117 	ldw	r2,4(fp)
 4003800:	10c00005 	stb	r3,0(r2)
 4003804:	e0bffd17 	ldw	r2,-12(fp)
 4003808:	10800044 	addi	r2,r2,1
 400380c:	e0bffd15 	stw	r2,-12(fp)
    *green = *color++;
 4003810:	e0bffd17 	ldw	r2,-12(fp)
 4003814:	10c00003 	ldbu	r3,0(r2)
 4003818:	e0bfff17 	ldw	r2,-4(fp)
 400381c:	10c00005 	stb	r3,0(r2)
 4003820:	e0bffd17 	ldw	r2,-12(fp)
 4003824:	10800044 	addi	r2,r2,1
 4003828:	e0bffd15 	stw	r2,-12(fp)
    *red = *color;   
 400382c:	e0bffd17 	ldw	r2,-12(fp)
 4003830:	10c00003 	ldbu	r3,0(r2)
 4003834:	e0bffe17 	ldw	r2,-8(fp)
 4003838:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 400383c:	00800044 	movi	r2,1
 4003840:	e0bffa15 	stw	r2,-24(fp)
 4003844:	00000706 	br	4003864 <seperate_color_channels+0x140>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 4003848:	e0bffe17 	ldw	r2,-8(fp)
 400384c:	10000005 	stb	zero,0(r2)
    *green = 0;
 4003850:	e0bfff17 	ldw	r2,-4(fp)
 4003854:	10000005 	stb	zero,0(r2)
    *blue = 0;    
 4003858:	e0800117 	ldw	r2,4(fp)
 400385c:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 4003860:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 4003864:	e0bffa17 	ldw	r2,-24(fp)
}
 4003868:	e037883a 	mov	sp,fp
 400386c:	df000017 	ldw	fp,0(sp)
 4003870:	dec00104 	addi	sp,sp,4
 4003874:	f800283a 	ret

04003878 <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 4003878:	defff904 	addi	sp,sp,-28
 400387c:	df000615 	stw	fp,24(sp)
 4003880:	df000604 	addi	fp,sp,24
 4003884:	e13ffc15 	stw	r4,-16(fp)
 4003888:	2809883a 	mov	r4,r5
 400388c:	3007883a 	mov	r3,r6
 4003890:	3805883a 	mov	r2,r7
 4003894:	e13ffd05 	stb	r4,-12(fp)
 4003898:	e0fffe05 	stb	r3,-8(fp)
 400389c:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
 40038a0:	e0bffc17 	ldw	r2,-16(fp)
 40038a4:	10800418 	cmpnei	r2,r2,16
 40038a8:	10001b1e 	bne	r2,zero,4003918 <merge_color_channels+0xa0>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 40038ac:	e0bfff03 	ldbu	r2,-4(fp)
 40038b0:	108007cc 	andi	r2,r2,31
 40038b4:	1007883a 	mov	r3,r2
 40038b8:	e0bffe03 	ldbu	r2,-8(fp)
 40038bc:	10800fcc 	andi	r2,r2,63
 40038c0:	1004917a 	slli	r2,r2,5
 40038c4:	1884b03a 	or	r2,r3,r2
 40038c8:	1007883a 	mov	r3,r2
 40038cc:	e0bffd03 	ldbu	r2,-12(fp)
 40038d0:	100492fa 	slli	r2,r2,11
 40038d4:	1884b03a 	or	r2,r3,r2
 40038d8:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 40038dc:	e0bffb0b 	ldhu	r2,-20(fp)
 40038e0:	1007883a 	mov	r3,r2
 40038e4:	e0800117 	ldw	r2,4(fp)
 40038e8:	10c00005 	stb	r3,0(r2)
 40038ec:	e0800117 	ldw	r2,4(fp)
 40038f0:	10800044 	addi	r2,r2,1
 40038f4:	e0800115 	stw	r2,4(fp)
    *color = (temp_color >> 8) & 0xFF;
 40038f8:	e0bffb0b 	ldhu	r2,-20(fp)
 40038fc:	1004d23a 	srli	r2,r2,8
 4003900:	1007883a 	mov	r3,r2
 4003904:	e0800117 	ldw	r2,4(fp)
 4003908:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 400390c:	00800044 	movi	r2,1
 4003910:	e0bffa15 	stw	r2,-24(fp)
 4003914:	00002506 	br	40039ac <merge_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4003918:	e0bffc17 	ldw	r2,-16(fp)
 400391c:	10800620 	cmpeqi	r2,r2,24
 4003920:	1000031e 	bne	r2,zero,4003930 <merge_color_channels+0xb8>
 4003924:	e0bffc17 	ldw	r2,-16(fp)
 4003928:	10800818 	cmpnei	r2,r2,32
 400392c:	1000121e 	bne	r2,zero,4003978 <merge_color_channels+0x100>
  {
    *color++ = blue;
 4003930:	e0800117 	ldw	r2,4(fp)
 4003934:	e0ffff03 	ldbu	r3,-4(fp)
 4003938:	10c00005 	stb	r3,0(r2)
 400393c:	e0800117 	ldw	r2,4(fp)
 4003940:	10800044 	addi	r2,r2,1
 4003944:	e0800115 	stw	r2,4(fp)
    *color++ = green;
 4003948:	e0800117 	ldw	r2,4(fp)
 400394c:	e0fffe03 	ldbu	r3,-8(fp)
 4003950:	10c00005 	stb	r3,0(r2)
 4003954:	e0800117 	ldw	r2,4(fp)
 4003958:	10800044 	addi	r2,r2,1
 400395c:	e0800115 	stw	r2,4(fp)
    *color = red;
 4003960:	e0800117 	ldw	r2,4(fp)
 4003964:	e0fffd03 	ldbu	r3,-12(fp)
 4003968:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 400396c:	00800044 	movi	r2,1
 4003970:	e0bffa15 	stw	r2,-24(fp)
 4003974:	00000d06 	br	40039ac <merge_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 4003978:	e0800117 	ldw	r2,4(fp)
 400397c:	10000005 	stb	zero,0(r2)
 4003980:	e0800117 	ldw	r2,4(fp)
 4003984:	10800044 	addi	r2,r2,1
 4003988:	e0800115 	stw	r2,4(fp)
    *color++ = 0;
 400398c:	e0800117 	ldw	r2,4(fp)
 4003990:	10000005 	stb	zero,0(r2)
 4003994:	e0800117 	ldw	r2,4(fp)
 4003998:	10800044 	addi	r2,r2,1
 400399c:	e0800115 	stw	r2,4(fp)
    *color = 0;
 40039a0:	e0800117 	ldw	r2,4(fp)
 40039a4:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 40039a8:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
 40039ac:	e0bffa17 	ldw	r2,-24(fp)
}
 40039b0:	e037883a 	mov	sp,fp
 40039b4:	df000017 	ldw	fp,0(sp)
 40039b8:	dec00104 	addi	sp,sp,4
 40039bc:	f800283a 	ret

040039c0 <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 40039c0:	defff604 	addi	sp,sp,-40
 40039c4:	dfc00915 	stw	ra,36(sp)
 40039c8:	df000815 	stw	fp,32(sp)
 40039cc:	dc000715 	stw	r16,28(sp)
 40039d0:	df000704 	addi	fp,sp,28
 40039d4:	e13ffc15 	stw	r4,-16(fp)
 40039d8:	e17ffd15 	stw	r5,-12(fp)
 40039dc:	e1bffe15 	stw	r6,-8(fp)
 40039e0:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned int temp_color;
  unsigned int addr;
  
  if( display->color_depth == 32 )
 40039e4:	e0800417 	ldw	r2,16(fp)
 40039e8:	10800417 	ldw	r2,16(r2)
 40039ec:	10800818 	cmpnei	r2,r2,32
 40039f0:	1000231e 	bne	r2,zero,4003a80 <read_from_frame+0xc0>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 4) + (horiz * 4)));
 40039f4:	e1000417 	ldw	r4,16(fp)
 40039f8:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 40039fc:	1021883a 	mov	r16,r2
 4003a00:	e0800417 	ldw	r2,16(fp)
 4003a04:	10800517 	ldw	r2,20(r2)
 4003a08:	1009883a 	mov	r4,r2
 4003a0c:	e17ffd17 	ldw	r5,-12(fp)
 4003a10:	4009dd80 	call	4009dd8 <__mulsi3>
 4003a14:	1007883a 	mov	r3,r2
 4003a18:	e0bffc17 	ldw	r2,-16(fp)
 4003a1c:	1885883a 	add	r2,r3,r2
 4003a20:	1085883a 	add	r2,r2,r2
 4003a24:	1085883a 	add	r2,r2,r2
 4003a28:	8085883a 	add	r2,r16,r2
 4003a2c:	e0bffa15 	stw	r2,-24(fp)
    temp_color = IORD_32DIRECT(addr, 0);
 4003a30:	e0bffa17 	ldw	r2,-24(fp)
 4003a34:	10800037 	ldwio	r2,0(r2)
 4003a38:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0xFF);
 4003a3c:	e0bffb17 	ldw	r2,-20(fp)
 4003a40:	1007883a 	mov	r3,r2
 4003a44:	e0800317 	ldw	r2,12(fp)
 4003a48:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 8) & 0xFF);
 4003a4c:	e0bffb17 	ldw	r2,-20(fp)
 4003a50:	1004d23a 	srli	r2,r2,8
 4003a54:	1007883a 	mov	r3,r2
 4003a58:	e0bfff17 	ldw	r2,-4(fp)
 4003a5c:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 16) & 0xFF);
 4003a60:	e0bffb17 	ldw	r2,-20(fp)
 4003a64:	1004d43a 	srli	r2,r2,16
 4003a68:	1007883a 	mov	r3,r2
 4003a6c:	e0bffe17 	ldw	r2,-8(fp)
 4003a70:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003a74:	00800044 	movi	r2,1
 4003a78:	e0bff915 	stw	r2,-28(fp)
 4003a7c:	00005c06 	br	4003bf0 <read_from_frame+0x230>
  }
  else if( display->color_depth == 24 )
 4003a80:	e0800417 	ldw	r2,16(fp)
 4003a84:	10800417 	ldw	r2,16(r2)
 4003a88:	10800618 	cmpnei	r2,r2,24
 4003a8c:	1000271e 	bne	r2,zero,4003b2c <read_from_frame+0x16c>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 3) + (horiz * 3)));
 4003a90:	e1000417 	ldw	r4,16(fp)
 4003a94:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4003a98:	1021883a 	mov	r16,r2
 4003a9c:	e0800417 	ldw	r2,16(fp)
 4003aa0:	10800517 	ldw	r2,20(r2)
 4003aa4:	1009883a 	mov	r4,r2
 4003aa8:	e17ffd17 	ldw	r5,-12(fp)
 4003aac:	4009dd80 	call	4009dd8 <__mulsi3>
 4003ab0:	1007883a 	mov	r3,r2
 4003ab4:	e0bffc17 	ldw	r2,-16(fp)
 4003ab8:	1887883a 	add	r3,r3,r2
 4003abc:	1805883a 	mov	r2,r3
 4003ac0:	1085883a 	add	r2,r2,r2
 4003ac4:	10c5883a 	add	r2,r2,r3
 4003ac8:	8085883a 	add	r2,r16,r2
 4003acc:	e0bffa15 	stw	r2,-24(fp)
    *blue = IORD_8DIRECT(addr, 0);
 4003ad0:	e0bffa17 	ldw	r2,-24(fp)
 4003ad4:	10800023 	ldbuio	r2,0(r2)
 4003ad8:	10803fcc 	andi	r2,r2,255
 4003adc:	1007883a 	mov	r3,r2
 4003ae0:	e0800317 	ldw	r2,12(fp)
 4003ae4:	10c00005 	stb	r3,0(r2)
    *green = IORD_8DIRECT(addr, 1);
 4003ae8:	e0bffa17 	ldw	r2,-24(fp)
 4003aec:	10800044 	addi	r2,r2,1
 4003af0:	10800023 	ldbuio	r2,0(r2)
 4003af4:	10803fcc 	andi	r2,r2,255
 4003af8:	1007883a 	mov	r3,r2
 4003afc:	e0bfff17 	ldw	r2,-4(fp)
 4003b00:	10c00005 	stb	r3,0(r2)
    *red = IORD_8DIRECT(addr, 2);
 4003b04:	e0bffa17 	ldw	r2,-24(fp)
 4003b08:	10800084 	addi	r2,r2,2
 4003b0c:	10800023 	ldbuio	r2,0(r2)
 4003b10:	10803fcc 	andi	r2,r2,255
 4003b14:	1007883a 	mov	r3,r2
 4003b18:	e0bffe17 	ldw	r2,-8(fp)
 4003b1c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003b20:	00800044 	movi	r2,1
 4003b24:	e0bff915 	stw	r2,-28(fp)
 4003b28:	00003106 	br	4003bf0 <read_from_frame+0x230>
  }
  else if( display->color_depth == 16 )
 4003b2c:	e0800417 	ldw	r2,16(fp)
 4003b30:	10800417 	ldw	r2,16(r2)
 4003b34:	10800418 	cmpnei	r2,r2,16
 4003b38:	1000261e 	bne	r2,zero,4003bd4 <read_from_frame+0x214>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 2) + (horiz * 2)));
 4003b3c:	e1000417 	ldw	r4,16(fp)
 4003b40:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4003b44:	1021883a 	mov	r16,r2
 4003b48:	e0800417 	ldw	r2,16(fp)
 4003b4c:	10800517 	ldw	r2,20(r2)
 4003b50:	1009883a 	mov	r4,r2
 4003b54:	e17ffd17 	ldw	r5,-12(fp)
 4003b58:	4009dd80 	call	4009dd8 <__mulsi3>
 4003b5c:	1007883a 	mov	r3,r2
 4003b60:	e0bffc17 	ldw	r2,-16(fp)
 4003b64:	1885883a 	add	r2,r3,r2
 4003b68:	1085883a 	add	r2,r2,r2
 4003b6c:	8085883a 	add	r2,r16,r2
 4003b70:	e0bffa15 	stw	r2,-24(fp)
    temp_color = (unsigned int)IORD_16DIRECT(addr, 0);
 4003b74:	e0bffa17 	ldw	r2,-24(fp)
 4003b78:	1080002b 	ldhuio	r2,0(r2)
 4003b7c:	10bfffcc 	andi	r2,r2,65535
 4003b80:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0x1F); 
 4003b84:	e0bffb17 	ldw	r2,-20(fp)
 4003b88:	108007cc 	andi	r2,r2,31
 4003b8c:	1007883a 	mov	r3,r2
 4003b90:	e0800317 	ldw	r2,12(fp)
 4003b94:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 5) & 0x3F);
 4003b98:	e0bffb17 	ldw	r2,-20(fp)
 4003b9c:	1004d17a 	srli	r2,r2,5
 4003ba0:	10800fcc 	andi	r2,r2,63
 4003ba4:	1007883a 	mov	r3,r2
 4003ba8:	e0bfff17 	ldw	r2,-4(fp)
 4003bac:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 11) & 0x1F);
 4003bb0:	e0bffb17 	ldw	r2,-20(fp)
 4003bb4:	1004d2fa 	srli	r2,r2,11
 4003bb8:	108007cc 	andi	r2,r2,31
 4003bbc:	1007883a 	mov	r3,r2
 4003bc0:	e0bffe17 	ldw	r2,-8(fp)
 4003bc4:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003bc8:	00800044 	movi	r2,1
 4003bcc:	e0bff915 	stw	r2,-28(fp)
 4003bd0:	00000706 	br	4003bf0 <read_from_frame+0x230>
  }
  else
  {
    *blue = 0;
 4003bd4:	e0800317 	ldw	r2,12(fp)
 4003bd8:	10000005 	stb	zero,0(r2)
    *red = 0;
 4003bdc:	e0bffe17 	ldw	r2,-8(fp)
 4003be0:	10000005 	stb	zero,0(r2)
    *green = 0;
 4003be4:	e0bfff17 	ldw	r2,-4(fp)
 4003be8:	10000005 	stb	zero,0(r2)
    return_value = 0; 
 4003bec:	e03ff915 	stw	zero,-28(fp)
  }

  return return_value;
 4003bf0:	e0bff917 	ldw	r2,-28(fp)
}
 4003bf4:	e037883a 	mov	sp,fp
 4003bf8:	dfc00217 	ldw	ra,8(sp)
 4003bfc:	df000117 	ldw	fp,4(sp)
 4003c00:	dc000017 	ldw	r16,0(sp)
 4003c04:	dec00304 	addi	sp,sp,12
 4003c08:	f800283a 	ret

04003c0c <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4003c0c:	defff204 	addi	sp,sp,-56
 4003c10:	dfc00d15 	stw	ra,52(sp)
 4003c14:	df000c15 	stw	fp,48(sp)
 4003c18:	dc000b15 	stw	r16,44(sp)
 4003c1c:	df000b04 	addi	fp,sp,44
 4003c20:	e13ffc15 	stw	r4,-16(fp)
 4003c24:	e17ffd15 	stw	r5,-12(fp)
 4003c28:	e1bffe15 	stw	r6,-8(fp)
 4003c2c:	3805883a 	mov	r2,r7
 4003c30:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 4003c34:	e0bffe17 	ldw	r2,-8(fp)
 4003c38:	10bfffd8 	cmpnei	r2,r2,-1
 4003c3c:	10000c1e 	bne	r2,zero,4003c70 <alpha_blending+0x64>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
 4003c40:	e0fffb04 	addi	r3,fp,-20
 4003c44:	e0bffb44 	addi	r2,fp,-19
 4003c48:	e13ffb84 	addi	r4,fp,-18
 4003c4c:	d9000015 	stw	r4,0(sp)
 4003c50:	e1000617 	ldw	r4,24(fp)
 4003c54:	d9000115 	stw	r4,4(sp)
 4003c58:	e13ffc17 	ldw	r4,-16(fp)
 4003c5c:	e17ffd17 	ldw	r5,-12(fp)
 4003c60:	180d883a 	mov	r6,r3
 4003c64:	100f883a 	mov	r7,r2
 4003c68:	40039c00 	call	40039c0 <read_from_frame>
 4003c6c:	00000a06 	br	4003c98 <alpha_blending+0x8c>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 4003c70:	e0800617 	ldw	r2,24(fp)
 4003c74:	11000417 	ldw	r4,16(r2)
 4003c78:	e17ffe04 	addi	r5,fp,-8
 4003c7c:	e0fffb04 	addi	r3,fp,-20
 4003c80:	e0bffb44 	addi	r2,fp,-19
 4003c84:	e1bffb84 	addi	r6,fp,-18
 4003c88:	d9800015 	stw	r6,0(sp)
 4003c8c:	180d883a 	mov	r6,r3
 4003c90:	100f883a 	mov	r7,r2
 4003c94:	40037240 	call	4003724 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 4003c98:	e0800317 	ldw	r2,12(fp)
 4003c9c:	10800003 	ldbu	r2,0(r2)
 4003ca0:	10c03fcc 	andi	r3,r2,255
 4003ca4:	e0bfff03 	ldbu	r2,-4(fp)
 4003ca8:	1809883a 	mov	r4,r3
 4003cac:	100b883a 	mov	r5,r2
 4003cb0:	4009dd80 	call	4009dd8 <__mulsi3>
 4003cb4:	1021883a 	mov	r16,r2
 4003cb8:	e0bffb03 	ldbu	r2,-20(fp)
 4003cbc:	10c03fcc 	andi	r3,r2,255
 4003cc0:	e0bfff03 	ldbu	r2,-4(fp)
 4003cc4:	01003fc4 	movi	r4,255
 4003cc8:	2085c83a 	sub	r2,r4,r2
 4003ccc:	1809883a 	mov	r4,r3
 4003cd0:	100b883a 	mov	r5,r2
 4003cd4:	4009dd80 	call	4009dd8 <__mulsi3>
 4003cd8:	8085883a 	add	r2,r16,r2
 4003cdc:	1009883a 	mov	r4,r2
 4003ce0:	01403fc4 	movi	r5,255
 4003ce4:	4009d1c0 	call	4009d1c <__divsi3>
 4003ce8:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 4003cec:	e0800417 	ldw	r2,16(fp)
 4003cf0:	10800003 	ldbu	r2,0(r2)
 4003cf4:	10c03fcc 	andi	r3,r2,255
 4003cf8:	e0bfff03 	ldbu	r2,-4(fp)
 4003cfc:	1809883a 	mov	r4,r3
 4003d00:	100b883a 	mov	r5,r2
 4003d04:	4009dd80 	call	4009dd8 <__mulsi3>
 4003d08:	1021883a 	mov	r16,r2
 4003d0c:	e0bffb43 	ldbu	r2,-19(fp)
 4003d10:	10c03fcc 	andi	r3,r2,255
 4003d14:	e0bfff03 	ldbu	r2,-4(fp)
 4003d18:	01003fc4 	movi	r4,255
 4003d1c:	2085c83a 	sub	r2,r4,r2
 4003d20:	1809883a 	mov	r4,r3
 4003d24:	100b883a 	mov	r5,r2
 4003d28:	4009dd80 	call	4009dd8 <__mulsi3>
 4003d2c:	8085883a 	add	r2,r16,r2
 4003d30:	1009883a 	mov	r4,r2
 4003d34:	01403fc4 	movi	r5,255
 4003d38:	4009d1c0 	call	4009d1c <__divsi3>
 4003d3c:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 4003d40:	e0800517 	ldw	r2,20(fp)
 4003d44:	10800003 	ldbu	r2,0(r2)
 4003d48:	10c03fcc 	andi	r3,r2,255
 4003d4c:	e0bfff03 	ldbu	r2,-4(fp)
 4003d50:	1809883a 	mov	r4,r3
 4003d54:	100b883a 	mov	r5,r2
 4003d58:	4009dd80 	call	4009dd8 <__mulsi3>
 4003d5c:	1021883a 	mov	r16,r2
 4003d60:	e0bffb83 	ldbu	r2,-18(fp)
 4003d64:	10c03fcc 	andi	r3,r2,255
 4003d68:	e0bfff03 	ldbu	r2,-4(fp)
 4003d6c:	01003fc4 	movi	r4,255
 4003d70:	2085c83a 	sub	r2,r4,r2
 4003d74:	1809883a 	mov	r4,r3
 4003d78:	100b883a 	mov	r5,r2
 4003d7c:	4009dd80 	call	4009dd8 <__mulsi3>
 4003d80:	8085883a 	add	r2,r16,r2
 4003d84:	1009883a 	mov	r4,r2
 4003d88:	01403fc4 	movi	r5,255
 4003d8c:	4009d1c0 	call	4009d1c <__divsi3>
 4003d90:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
 4003d94:	e0800617 	ldw	r2,24(fp)
 4003d98:	10800417 	ldw	r2,16(r2)
 4003d9c:	10800418 	cmpnei	r2,r2,16
 4003da0:	1000181e 	bne	r2,zero,4003e04 <alpha_blending+0x1f8>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 4003da4:	e0bff817 	ldw	r2,-32(fp)
 4003da8:	10c00830 	cmpltui	r3,r2,32
 4003dac:	1800011e 	bne	r3,zero,4003db4 <alpha_blending+0x1a8>
 4003db0:	008007c4 	movi	r2,31
 4003db4:	1007883a 	mov	r3,r2
 4003db8:	e0800317 	ldw	r2,12(fp)
 4003dbc:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 4003dc0:	e0bff917 	ldw	r2,-28(fp)
 4003dc4:	10c01030 	cmpltui	r3,r2,64
 4003dc8:	1800011e 	bne	r3,zero,4003dd0 <alpha_blending+0x1c4>
 4003dcc:	00800fc4 	movi	r2,63
 4003dd0:	1007883a 	mov	r3,r2
 4003dd4:	e0800417 	ldw	r2,16(fp)
 4003dd8:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
 4003ddc:	e0bffa17 	ldw	r2,-24(fp)
 4003de0:	10c00830 	cmpltui	r3,r2,32
 4003de4:	1800011e 	bne	r3,zero,4003dec <alpha_blending+0x1e0>
 4003de8:	008007c4 	movi	r2,31
 4003dec:	1007883a 	mov	r3,r2
 4003df0:	e0800517 	ldw	r2,20(fp)
 4003df4:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
 4003df8:	00800044 	movi	r2,1
 4003dfc:	e0bff715 	stw	r2,-36(fp)
 4003e00:	00002106 	br	4003e88 <alpha_blending+0x27c>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 4003e04:	e0800617 	ldw	r2,24(fp)
 4003e08:	10800417 	ldw	r2,16(r2)
 4003e0c:	10800620 	cmpeqi	r2,r2,24
 4003e10:	1000041e 	bne	r2,zero,4003e24 <alpha_blending+0x218>
 4003e14:	e0800617 	ldw	r2,24(fp)
 4003e18:	10800417 	ldw	r2,16(r2)
 4003e1c:	10800818 	cmpnei	r2,r2,32
 4003e20:	1000181e 	bne	r2,zero,4003e84 <alpha_blending+0x278>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 4003e24:	e0bff817 	ldw	r2,-32(fp)
 4003e28:	10c04030 	cmpltui	r3,r2,256
 4003e2c:	1800011e 	bne	r3,zero,4003e34 <alpha_blending+0x228>
 4003e30:	00803fc4 	movi	r2,255
 4003e34:	1007883a 	mov	r3,r2
 4003e38:	e0800317 	ldw	r2,12(fp)
 4003e3c:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 4003e40:	e0bff917 	ldw	r2,-28(fp)
 4003e44:	10c04030 	cmpltui	r3,r2,256
 4003e48:	1800011e 	bne	r3,zero,4003e50 <alpha_blending+0x244>
 4003e4c:	00803fc4 	movi	r2,255
 4003e50:	1007883a 	mov	r3,r2
 4003e54:	e0800417 	ldw	r2,16(fp)
 4003e58:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
 4003e5c:	e0bffa17 	ldw	r2,-24(fp)
 4003e60:	10c04030 	cmpltui	r3,r2,256
 4003e64:	1800011e 	bne	r3,zero,4003e6c <alpha_blending+0x260>
 4003e68:	00803fc4 	movi	r2,255
 4003e6c:	1007883a 	mov	r3,r2
 4003e70:	e0800517 	ldw	r2,20(fp)
 4003e74:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
 4003e78:	00800044 	movi	r2,1
 4003e7c:	e0bff715 	stw	r2,-36(fp)
 4003e80:	00000106 	br	4003e88 <alpha_blending+0x27c>
  }
  else
  {
    return_value = 0;     
 4003e84:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
 4003e88:	e0bff717 	ldw	r2,-36(fp)
} 
 4003e8c:	e037883a 	mov	sp,fp
 4003e90:	dfc00217 	ldw	ra,8(sp)
 4003e94:	df000117 	ldw	fp,4(sp)
 4003e98:	dc000017 	ldw	r16,0(sp)
 4003e9c:	dec00304 	addi	sp,sp,12
 4003ea0:	f800283a 	ret

04003ea4 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 4003ea4:	defff004 	addi	sp,sp,-64
 4003ea8:	dfc00f15 	stw	ra,60(sp)
 4003eac:	df000e15 	stw	fp,56(sp)
 4003eb0:	df000e04 	addi	fp,sp,56
 4003eb4:	e13ffc15 	stw	r4,-16(fp)
 4003eb8:	e17ffd15 	stw	r5,-12(fp)
 4003ebc:	e1bffe15 	stw	r6,-8(fp)
 4003ec0:	3805883a 	mov	r2,r7
 4003ec4:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 4003ec8:	e0bfff07 	ldb	r2,-4(fp)
 4003ecc:	10bff7c4 	addi	r2,r2,-33
 4003ed0:	1004917a 	slli	r2,r2,5
 4003ed4:	e0c00317 	ldw	r3,12(fp)
 4003ed8:	1885883a 	add	r2,r3,r2
 4003edc:	10800617 	ldw	r2,24(r2)
 4003ee0:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
 4003ee4:	e0800417 	ldw	r2,16(fp)
 4003ee8:	11000417 	ldw	r4,16(r2)
 4003eec:	e17ffe04 	addi	r5,fp,-8
 4003ef0:	e0fff904 	addi	r3,fp,-28
 4003ef4:	e0bff984 	addi	r2,fp,-26
 4003ef8:	e1bff944 	addi	r6,fp,-27
 4003efc:	d9800015 	stw	r6,0(sp)
 4003f00:	180d883a 	mov	r6,r3
 4003f04:	100f883a 	mov	r7,r2
 4003f08:	40037240 	call	4003724 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4003f0c:	e03ff615 	stw	zero,-40(fp)
 4003f10:	00004606 	br	400402c <vid_print_char_alpha+0x188>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4003f14:	e03ff715 	stw	zero,-36(fp)
 4003f18:	00003906 	br	4004000 <vid_print_char_alpha+0x15c>
      red = original_red;
 4003f1c:	e0bff903 	ldbu	r2,-28(fp)
 4003f20:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
 4003f24:	e0bff983 	ldbu	r2,-26(fp)
 4003f28:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
 4003f2c:	e0bff943 	ldbu	r2,-27(fp)
 4003f30:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
 4003f34:	e0fffc17 	ldw	r3,-16(fp)
 4003f38:	e0bff717 	ldw	r2,-36(fp)
 4003f3c:	1889883a 	add	r4,r3,r2
 4003f40:	e0fffd17 	ldw	r3,-12(fp)
 4003f44:	e0bff617 	ldw	r2,-40(fp)
 4003f48:	1887883a 	add	r3,r3,r2
 4003f4c:	e0bff817 	ldw	r2,-32(fp)
 4003f50:	10800003 	ldbu	r2,0(r2)
 4003f54:	10803fcc 	andi	r2,r2,255
 4003f58:	e17ff9c4 	addi	r5,fp,-25
 4003f5c:	d9400015 	stw	r5,0(sp)
 4003f60:	e17ffa04 	addi	r5,fp,-24
 4003f64:	d9400115 	stw	r5,4(sp)
 4003f68:	e17ffa44 	addi	r5,fp,-23
 4003f6c:	d9400215 	stw	r5,8(sp)
 4003f70:	e1400417 	ldw	r5,16(fp)
 4003f74:	d9400315 	stw	r5,12(sp)
 4003f78:	180b883a 	mov	r5,r3
 4003f7c:	e1800217 	ldw	r6,8(fp)
 4003f80:	100f883a 	mov	r7,r2
 4003f84:	4003c0c0 	call	4003c0c <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
 4003f88:	e0800417 	ldw	r2,16(fp)
 4003f8c:	11000417 	ldw	r4,16(r2)
 4003f90:	e0bff9c3 	ldbu	r2,-25(fp)
 4003f94:	11403fcc 	andi	r5,r2,255
 4003f98:	e0bffa03 	ldbu	r2,-24(fp)
 4003f9c:	10c03fcc 	andi	r3,r2,255
 4003fa0:	e0bffa43 	ldbu	r2,-23(fp)
 4003fa4:	10803fcc 	andi	r2,r2,255
 4003fa8:	e1bffb04 	addi	r6,fp,-20
 4003fac:	d9800015 	stw	r6,0(sp)
 4003fb0:	180d883a 	mov	r6,r3
 4003fb4:	100f883a 	mov	r7,r2
 4003fb8:	40038780 	call	4003878 <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
 4003fbc:	e0fffc17 	ldw	r3,-16(fp)
 4003fc0:	e0bff717 	ldw	r2,-36(fp)
 4003fc4:	1889883a 	add	r4,r3,r2
 4003fc8:	e0fffd17 	ldw	r3,-12(fp)
 4003fcc:	e0bff617 	ldw	r2,-40(fp)
 4003fd0:	1887883a 	add	r3,r3,r2
 4003fd4:	e0bffb17 	ldw	r2,-20(fp)
 4003fd8:	180b883a 	mov	r5,r3
 4003fdc:	100d883a 	mov	r6,r2
 4003fe0:	e1c00417 	ldw	r7,16(fp)
 4003fe4:	40010bc0 	call	40010bc <vid_set_pixel>

      alpha++;
 4003fe8:	e0bff817 	ldw	r2,-32(fp)
 4003fec:	10800044 	addi	r2,r2,1
 4003ff0:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4003ff4:	e0bff717 	ldw	r2,-36(fp)
 4003ff8:	10800044 	addi	r2,r2,1
 4003ffc:	e0bff715 	stw	r2,-36(fp)
 4004000:	e0fff717 	ldw	r3,-36(fp)
 4004004:	e0bfff07 	ldb	r2,-4(fp)
 4004008:	10bff7c4 	addi	r2,r2,-33
 400400c:	1004917a 	slli	r2,r2,5
 4004010:	e1000317 	ldw	r4,12(fp)
 4004014:	2085883a 	add	r2,r4,r2
 4004018:	10800417 	ldw	r2,16(r2)
 400401c:	18bfbf36 	bltu	r3,r2,4003f1c <__reset+0xfb002f1c>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4004020:	e0bff617 	ldw	r2,-40(fp)
 4004024:	10800044 	addi	r2,r2,1
 4004028:	e0bff615 	stw	r2,-40(fp)
 400402c:	e0fff617 	ldw	r3,-40(fp)
 4004030:	e0bfff07 	ldb	r2,-4(fp)
 4004034:	10bff7c4 	addi	r2,r2,-33
 4004038:	1004917a 	slli	r2,r2,5
 400403c:	e1000317 	ldw	r4,12(fp)
 4004040:	2085883a 	add	r2,r4,r2
 4004044:	10800517 	ldw	r2,20(r2)
 4004048:	18bfb236 	bltu	r3,r2,4003f14 <__reset+0xfb002f14>

      alpha++;
    }
  }

  return(0);
 400404c:	0005883a 	mov	r2,zero
}
 4004050:	e037883a 	mov	sp,fp
 4004054:	dfc00117 	ldw	ra,4(sp)
 4004058:	df000017 	ldw	fp,0(sp)
 400405c:	dec00204 	addi	sp,sp,8
 4004060:	f800283a 	ret

04004064 <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
 4004064:	defffb04 	addi	sp,sp,-20
 4004068:	df000415 	stw	fp,16(sp)
 400406c:	df000404 	addi	fp,sp,16
 4004070:	e13ffe15 	stw	r4,-8(fp)
 4004074:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
 4004078:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
 400407c:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 4004080:	e03ffc15 	stw	zero,-16(fp)
 4004084:	00002206 	br	4004110 <vid_string_pixel_length_alpha+0xac>
  {
    if( string[i] == ' ' )
 4004088:	e0bffc17 	ldw	r2,-16(fp)
 400408c:	e0ffff17 	ldw	r3,-4(fp)
 4004090:	1885883a 	add	r2,r3,r2
 4004094:	10800003 	ldbu	r2,0(r2)
 4004098:	10803fcc 	andi	r2,r2,255
 400409c:	1080201c 	xori	r2,r2,128
 40040a0:	10bfe004 	addi	r2,r2,-128
 40040a4:	10800818 	cmpnei	r2,r2,32
 40040a8:	1000071e 	bne	r2,zero,40040c8 <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
 40040ac:	e0bffe17 	ldw	r2,-8(fp)
 40040b0:	10806004 	addi	r2,r2,384
 40040b4:	10c00417 	ldw	r3,16(r2)
 40040b8:	e0bffd17 	ldw	r2,-12(fp)
 40040bc:	1885883a 	add	r2,r3,r2
 40040c0:	e0bffd15 	stw	r2,-12(fp)
 40040c4:	00000f06 	br	4004104 <vid_string_pixel_length_alpha+0xa0>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
 40040c8:	e0bffc17 	ldw	r2,-16(fp)
 40040cc:	e0ffff17 	ldw	r3,-4(fp)
 40040d0:	1885883a 	add	r2,r3,r2
 40040d4:	10800003 	ldbu	r2,0(r2)
 40040d8:	10803fcc 	andi	r2,r2,255
 40040dc:	1080201c 	xori	r2,r2,128
 40040e0:	10bfe004 	addi	r2,r2,-128
 40040e4:	10bff7c4 	addi	r2,r2,-33
 40040e8:	1004917a 	slli	r2,r2,5
 40040ec:	e0fffe17 	ldw	r3,-8(fp)
 40040f0:	1885883a 	add	r2,r3,r2
 40040f4:	10c00417 	ldw	r3,16(r2)
 40040f8:	e0bffd17 	ldw	r2,-12(fp)
 40040fc:	1885883a 	add	r2,r3,r2
 4004100:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 4004104:	e0bffc17 	ldw	r2,-16(fp)
 4004108:	10800044 	addi	r2,r2,1
 400410c:	e0bffc15 	stw	r2,-16(fp)
 4004110:	e0bffc17 	ldw	r2,-16(fp)
 4004114:	e0ffff17 	ldw	r3,-4(fp)
 4004118:	1885883a 	add	r2,r3,r2
 400411c:	10800003 	ldbu	r2,0(r2)
 4004120:	10803fcc 	andi	r2,r2,255
 4004124:	1080201c 	xori	r2,r2,128
 4004128:	10bfe004 	addi	r2,r2,-128
 400412c:	103fd61e 	bne	r2,zero,4004088 <__reset+0xfb003088>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
 4004130:	e0bffd17 	ldw	r2,-12(fp)
}
 4004134:	e037883a 	mov	sp,fp
 4004138:	df000017 	ldw	fp,0(sp)
 400413c:	dec00104 	addi	sp,sp,4
 4004140:	f800283a 	ret

04004144 <GUI_DeskInit>:
    int Paint4_Index;
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;

void GUI_DeskInit(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
 4004144:	deffee04 	addi	sp,sp,-72
 4004148:	dfc01115 	stw	ra,68(sp)
 400414c:	df001015 	stw	fp,64(sp)
 4004150:	dc400f15 	stw	r17,60(sp)
 4004154:	dc000e15 	stw	r16,56(sp)
 4004158:	df000e04 	addi	fp,sp,56
 400415c:	e13ffe15 	stw	r4,-8(fp)
 4004160:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 70;
 4004164:	00801184 	movi	r2,70
 4004168:	e0bff415 	stw	r2,-48(fp)
    const int BoxW = 70;
 400416c:	00801184 	movi	r2,70
 4004170:	e0bff515 	stw	r2,-44(fp)
    const int GapH = 10;
 4004174:	00800284 	movi	r2,10
 4004178:	e0bff615 	stw	r2,-40(fp)
    const int DrawBorder = 2;
 400417c:	00800084 	movi	r2,2
 4004180:	e0bff715 	stw	r2,-36(fp)
    const int TextW = 120;
 4004184:	00801e04 	movi	r2,120
 4004188:	e0bff815 	stw	r2,-32(fp)
    int GapW;

    
    GapW = (pReader->width - TextW - (BTN_NUM*BoxW))/(BTN_NUM+1);
 400418c:	e0bffe17 	ldw	r2,-8(fp)
 4004190:	10c00517 	ldw	r3,20(r2)
 4004194:	e0bff817 	ldw	r2,-32(fp)
 4004198:	18a1c83a 	sub	r16,r3,r2
 400419c:	e13ff517 	ldw	r4,-44(fp)
 40041a0:	017ffdc4 	movi	r5,-9
 40041a4:	4009dd80 	call	4009dd8 <__mulsi3>
 40041a8:	8085883a 	add	r2,r16,r2
 40041ac:	1009883a 	mov	r4,r2
 40041b0:	01400284 	movi	r5,10
 40041b4:	4009d1c0 	call	4009d1c <__divsi3>
 40041b8:	e0bff915 	stw	r2,-28(fp)
    rc.top = pReader->height - BoxH - GapH;
 40041bc:	e0bffe17 	ldw	r2,-8(fp)
 40041c0:	10c00617 	ldw	r3,24(r2)
 40041c4:	e0bff417 	ldw	r2,-48(fp)
 40041c8:	1887c83a 	sub	r3,r3,r2
 40041cc:	e0bff617 	ldw	r2,-40(fp)
 40041d0:	1885c83a 	sub	r2,r3,r2
 40041d4:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
 40041d8:	e0fffc17 	ldw	r3,-16(fp)
 40041dc:	e0bff417 	ldw	r2,-48(fp)
 40041e0:	1885883a 	add	r2,r3,r2
 40041e4:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW;
 40041e8:	e0fff917 	ldw	r3,-28(fp)
 40041ec:	e0bff817 	ldw	r2,-32(fp)
 40041f0:	1885883a 	add	r2,r3,r2
 40041f4:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
 40041f8:	e0fffa17 	ldw	r3,-24(fp)
 40041fc:	e0bff517 	ldw	r2,-44(fp)
 4004200:	1885883a 	add	r2,r3,r2
 4004204:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pReader->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
 4004208:	e0bfff17 	ldw	r2,-4(fp)
 400420c:	10c00504 	addi	r3,r2,20
 4004210:	e0bffe17 	ldw	r2,-8(fp)
 4004214:	11000517 	ldw	r4,20(r2)
 4004218:	e0bff717 	ldw	r2,-36(fp)
 400421c:	2085c83a 	sub	r2,r4,r2
 4004220:	e17ffc17 	ldw	r5,-16(fp)
 4004224:	e13ff717 	ldw	r4,-36(fp)
 4004228:	2909c83a 	sub	r4,r5,r4
 400422c:	d9000015 	stw	r4,0(sp)
 4004230:	1809883a 	mov	r4,r3
 4004234:	e17ff717 	ldw	r5,-36(fp)
 4004238:	100d883a 	mov	r6,r2
 400423c:	e1fff717 	ldw	r7,-36(fp)
 4004240:	40002c40 	call	40002c4 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
 4004244:	e03ff315 	stw	zero,-52(fp)
 4004248:	00002506 	br	40042e0 <GUI_DeskInit+0x19c>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
 400424c:	e13ff317 	ldw	r4,-52(fp)
 4004250:	01400504 	movi	r5,20
 4004254:	4009dd80 	call	4009dd8 <__mulsi3>
 4004258:	10800904 	addi	r2,r2,36
 400425c:	e0ffff17 	ldw	r3,-4(fp)
 4004260:	1887883a 	add	r3,r3,r2
 4004264:	e0bffa04 	addi	r2,fp,-24
 4004268:	1809883a 	mov	r4,r3
 400426c:	100b883a 	mov	r5,r2
 4004270:	40004300 	call	4000430 <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
 4004274:	00c101f4 	movhi	r3,1031
 4004278:	18dcab04 	addi	r3,r3,29356
 400427c:	e0bff317 	ldw	r2,-52(fp)
 4004280:	1085883a 	add	r2,r2,r2
 4004284:	1085883a 	add	r2,r2,r2
 4004288:	1885883a 	add	r2,r3,r2
 400428c:	10800017 	ldw	r2,0(r2)
 4004290:	1021883a 	mov	r16,r2
 4004294:	e47fff17 	ldw	r17,-4(fp)
 4004298:	e0bff317 	ldw	r2,-52(fp)
 400429c:	1009883a 	mov	r4,r2
 40042a0:	01400504 	movi	r5,20
 40042a4:	4009dd80 	call	4009dd8 <__mulsi3>
 40042a8:	8885883a 	add	r2,r17,r2
 40042ac:	10800d04 	addi	r2,r2,52
 40042b0:	14000015 	stw	r16,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
 40042b4:	e0fff517 	ldw	r3,-44(fp)
 40042b8:	e0bff917 	ldw	r2,-28(fp)
 40042bc:	1885883a 	add	r2,r3,r2
 40042c0:	e0fffa04 	addi	r3,fp,-24
 40042c4:	1809883a 	mov	r4,r3
 40042c8:	100b883a 	mov	r5,r2
 40042cc:	000d883a 	mov	r6,zero
 40042d0:	40003a80 	call	40003a8 <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pReader->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
 40042d4:	e0bff317 	ldw	r2,-52(fp)
 40042d8:	10800044 	addi	r2,r2,1
 40042dc:	e0bff315 	stw	r2,-52(fp)
 40042e0:	e0bff317 	ldw	r2,-52(fp)
 40042e4:	10800250 	cmplti	r2,r2,9
 40042e8:	103fd81e 	bne	r2,zero,400424c <__reset+0xfb00324c>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->Paint0_Index = BTN_BLUE;
 40042ec:	e0bfff17 	ldw	r2,-4(fp)
 40042f0:	00c000c4 	movi	r3,3
 40042f4:	10c00015 	stw	r3,0(r2)
    pDeskInfo->Paint1_Index = BTN_GREEN;
 40042f8:	e0bfff17 	ldw	r2,-4(fp)
 40042fc:	00c00104 	movi	r3,4
 4004300:	10c00115 	stw	r3,4(r2)
    //add by matthew for mtl2
    pDeskInfo->Paint2_Index = BTN_RED;
 4004304:	e0bfff17 	ldw	r2,-4(fp)
 4004308:	00c00144 	movi	r3,5
 400430c:	10c00215 	stw	r3,8(r2)
    pDeskInfo->Paint3_Index = BTN_SKY;
 4004310:	e0bfff17 	ldw	r2,-4(fp)
 4004314:	00c00184 	movi	r3,6
 4004318:	10c00315 	stw	r3,12(r2)
    pDeskInfo->Paint4_Index = BTN_YELLOW;
 400431c:	e0bfff17 	ldw	r2,-4(fp)
 4004320:	00c001c4 	movi	r3,7
 4004324:	10c00415 	stw	r3,16(r2)
}
 4004328:	e037883a 	mov	sp,fp
 400432c:	dfc00317 	ldw	ra,12(sp)
 4004330:	df000217 	ldw	fp,8(sp)
 4004334:	dc400117 	ldw	r17,4(sp)
 4004338:	dc000017 	ldw	r16,0(sp)
 400433c:	dec00404 	addi	sp,sp,16
 4004340:	f800283a 	ret

04004344 <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
 4004344:	defffa04 	addi	sp,sp,-24
 4004348:	dfc00515 	stw	ra,20(sp)
 400434c:	df000415 	stw	fp,16(sp)
 4004350:	df000404 	addi	fp,sp,16
 4004354:	e13ffe15 	stw	r4,-8(fp)
 4004358:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
 400435c:	00800284 	movi	r2,10
 4004360:	e0bffc15 	stw	r2,-16(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 4004364:	e03ffd15 	stw	zero,-12(fp)
 4004368:	00000f06 	br	40043a8 <GUI_CheckButton+0x64>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
 400436c:	e13ffd17 	ldw	r4,-12(fp)
 4004370:	01400504 	movi	r5,20
 4004374:	4009dd80 	call	4009dd8 <__mulsi3>
 4004378:	10800904 	addi	r2,r2,36
 400437c:	e0fffe17 	ldw	r3,-8(fp)
 4004380:	1885883a 	add	r2,r3,r2
 4004384:	e13fff17 	ldw	r4,-4(fp)
 4004388:	100b883a 	mov	r5,r2
 400438c:	40002000 	call	4000200 <IsPtInRect>
 4004390:	10000226 	beq	r2,zero,400439c <GUI_CheckButton+0x58>
            ButtonId = i;
 4004394:	e0bffd17 	ldw	r2,-12(fp)
 4004398:	e0bffc15 	stw	r2,-16(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 400439c:	e0bffd17 	ldw	r2,-12(fp)
 40043a0:	10800044 	addi	r2,r2,1
 40043a4:	e0bffd15 	stw	r2,-12(fp)
 40043a8:	e0bffd17 	ldw	r2,-12(fp)
 40043ac:	10800248 	cmpgei	r2,r2,9
 40043b0:	1000031e 	bne	r2,zero,40043c0 <GUI_CheckButton+0x7c>
 40043b4:	e0bffc17 	ldw	r2,-16(fp)
 40043b8:	108002a0 	cmpeqi	r2,r2,10
 40043bc:	103feb1e 	bne	r2,zero,400436c <__reset+0xfb00336c>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
 40043c0:	e0bffc17 	ldw	r2,-16(fp)
}
 40043c4:	e037883a 	mov	sp,fp
 40043c8:	dfc00117 	ldw	ra,4(sp)
 40043cc:	df000017 	ldw	fp,0(sp)
 40043d0:	dec00204 	addi	sp,sp,8
 40043d4:	f800283a 	ret

040043d8 <GUI_DeskDraw>:

void GUI_DeskDraw(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
 40043d8:	deffee04 	addi	sp,sp,-72
 40043dc:	dfc01115 	stw	ra,68(sp)
 40043e0:	df001015 	stw	fp,64(sp)
 40043e4:	dd000f15 	stw	r20,60(sp)
 40043e8:	dcc00e15 	stw	r19,56(sp)
 40043ec:	dc800d15 	stw	r18,52(sp)
 40043f0:	dc400c15 	stw	r17,48(sp)
 40043f4:	dc000b15 	stw	r16,44(sp)
 40043f8:	df000b04 	addi	fp,sp,44
 40043fc:	e13ffe15 	stw	r4,-8(fp)
 4004400:	e17fff15 	stw	r5,-4(fp)
    int i, active;
    RECT rc;
    
    
    // show text
    vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pReader, "Terasic");
 4004404:	e0bfff17 	ldw	r2,-4(fp)
 4004408:	10c00517 	ldw	r3,20(r2)
 400440c:	e0bfff17 	ldw	r2,-4(fp)
 4004410:	10800b17 	ldw	r2,44(r2)
 4004414:	010101f4 	movhi	r4,1031
 4004418:	2115c504 	addi	r4,r4,22292
 400441c:	d9000015 	stw	r4,0(sp)
 4004420:	e13ffe17 	ldw	r4,-8(fp)
 4004424:	d9000115 	stw	r4,4(sp)
 4004428:	010101f4 	movhi	r4,1031
 400442c:	2113d704 	addi	r4,r4,20316
 4004430:	d9000215 	stw	r4,8(sp)
 4004434:	1809883a 	mov	r4,r3
 4004438:	100b883a 	mov	r5,r2
 400443c:	01803fc4 	movi	r6,255
 4004440:	000f883a 	mov	r7,zero
 4004444:	40034c80 	call	40034c8 <vid_print_string_alpha>
    vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pReader, "Multi-Touch");
 4004448:	e0bfff17 	ldw	r2,-4(fp)
 400444c:	10c00517 	ldw	r3,20(r2)
 4004450:	e0bfff17 	ldw	r2,-4(fp)
 4004454:	10800b17 	ldw	r2,44(r2)
 4004458:	10800584 	addi	r2,r2,22
 400445c:	010101f4 	movhi	r4,1031
 4004460:	2115c504 	addi	r4,r4,22292
 4004464:	d9000015 	stw	r4,0(sp)
 4004468:	e13ffe17 	ldw	r4,-8(fp)
 400446c:	d9000115 	stw	r4,4(sp)
 4004470:	010101f4 	movhi	r4,1031
 4004474:	2113d904 	addi	r4,r4,20324
 4004478:	d9000215 	stw	r4,8(sp)
 400447c:	1809883a 	mov	r4,r3
 4004480:	100b883a 	mov	r5,r2
 4004484:	01803fc4 	movi	r6,255
 4004488:	000f883a 	mov	r7,zero
 400448c:	40034c80 	call	40034c8 <vid_print_string_alpha>

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
 4004490:	e0bfff17 	ldw	r2,-4(fp)
 4004494:	10800504 	addi	r2,r2,20
 4004498:	e0fffa04 	addi	r3,fp,-24
 400449c:	1809883a 	mov	r4,r3
 40044a0:	100b883a 	mov	r5,r2
 40044a4:	40004300 	call	4000430 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pReader);
 40044a8:	e13ffa17 	ldw	r4,-24(fp)
 40044ac:	e17ffc17 	ldw	r5,-16(fp)
 40044b0:	e0fffb17 	ldw	r3,-20(fp)
 40044b4:	e0bffd17 	ldw	r2,-12(fp)
 40044b8:	01804034 	movhi	r6,256
 40044bc:	31bfffc4 	addi	r6,r6,-1
 40044c0:	d9800015 	stw	r6,0(sp)
 40044c4:	d8000115 	stw	zero,4(sp)
 40044c8:	e1bffe17 	ldw	r6,-8(fp)
 40044cc:	d9800215 	stw	r6,8(sp)
 40044d0:	180d883a 	mov	r6,r3
 40044d4:	100f883a 	mov	r7,r2
 40044d8:	4000e740 	call	4000e74 <vid_draw_box>
    

    // draw palette
    for(i=0;i<BTN_NUM;i++){
 40044dc:	e03ff815 	stw	zero,-32(fp)
 40044e0:	00005c06 	br	4004654 <GUI_DeskDraw+0x27c>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
 40044e4:	e13ff817 	ldw	r4,-32(fp)
 40044e8:	01400504 	movi	r5,20
 40044ec:	4009dd80 	call	4009dd8 <__mulsi3>
 40044f0:	10800904 	addi	r2,r2,36
 40044f4:	e0ffff17 	ldw	r3,-4(fp)
 40044f8:	1885883a 	add	r2,r3,r2
 40044fc:	e0fffa04 	addi	r3,fp,-24
 4004500:	1809883a 	mov	r4,r3
 4004504:	100b883a 	mov	r5,r2
 4004508:	40004300 	call	4000430 <RectCopy>
        if (i == BTN_CLEAR){
 400450c:	e0bff817 	ldw	r2,-32(fp)
 4004510:	10800058 	cmpnei	r2,r2,1
 4004514:	1000361e 	bne	r2,zero,40045f0 <GUI_DeskDraw+0x218>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pReader);
 4004518:	e4fffa17 	ldw	r19,-24(fp)
 400451c:	e4bffc17 	ldw	r18,-16(fp)
 4004520:	e47ffb17 	ldw	r17,-20(fp)
 4004524:	e43ffd17 	ldw	r16,-12(fp)
 4004528:	e53fff17 	ldw	r20,-4(fp)
 400452c:	e0bff817 	ldw	r2,-32(fp)
 4004530:	1009883a 	mov	r4,r2
 4004534:	01400504 	movi	r5,20
 4004538:	4009dd80 	call	4009dd8 <__mulsi3>
 400453c:	a085883a 	add	r2,r20,r2
 4004540:	10800d04 	addi	r2,r2,52
 4004544:	10800017 	ldw	r2,0(r2)
 4004548:	d8800015 	stw	r2,0(sp)
 400454c:	d8000115 	stw	zero,4(sp)
 4004550:	e0bffe17 	ldw	r2,-8(fp)
 4004554:	d8800215 	stw	r2,8(sp)
 4004558:	9809883a 	mov	r4,r19
 400455c:	900b883a 	mov	r5,r18
 4004560:	880d883a 	mov	r6,r17
 4004564:	800f883a 	mov	r7,r16
 4004568:	4000e740 	call	4000e74 <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pReader, "Clear");
 400456c:	e0bffa17 	ldw	r2,-24(fp)
 4004570:	14400204 	addi	r17,r2,8
 4004574:	e43ffc17 	ldw	r16,-16(fp)
 4004578:	e0bffa04 	addi	r2,fp,-24
 400457c:	1009883a 	mov	r4,r2
 4004580:	40004c80 	call	40004c8 <RectHeight>
 4004584:	10bffa84 	addi	r2,r2,-22
 4004588:	1006d7fa 	srli	r3,r2,31
 400458c:	1885883a 	add	r2,r3,r2
 4004590:	1005d07a 	srai	r2,r2,1
 4004594:	80a1883a 	add	r16,r16,r2
 4004598:	e4bfff17 	ldw	r18,-4(fp)
 400459c:	e0bff817 	ldw	r2,-32(fp)
 40045a0:	1009883a 	mov	r4,r2
 40045a4:	01400504 	movi	r5,20
 40045a8:	4009dd80 	call	4009dd8 <__mulsi3>
 40045ac:	9085883a 	add	r2,r18,r2
 40045b0:	10800d04 	addi	r2,r2,52
 40045b4:	10800017 	ldw	r2,0(r2)
 40045b8:	00c101f4 	movhi	r3,1031
 40045bc:	18d5c504 	addi	r3,r3,22292
 40045c0:	d8c00015 	stw	r3,0(sp)
 40045c4:	e0fffe17 	ldw	r3,-8(fp)
 40045c8:	d8c00115 	stw	r3,4(sp)
 40045cc:	00c101f4 	movhi	r3,1031
 40045d0:	18d3dc04 	addi	r3,r3,20336
 40045d4:	d8c00215 	stw	r3,8(sp)
 40045d8:	8809883a 	mov	r4,r17
 40045dc:	800b883a 	mov	r5,r16
 40045e0:	100d883a 	mov	r6,r2
 40045e4:	000f883a 	mov	r7,zero
 40045e8:	40034c80 	call	40034c8 <vid_print_string_alpha>
 40045ec:	00001606 	br	4004648 <GUI_DeskDraw+0x270>
        }else{
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pReader);
 40045f0:	e4fffa17 	ldw	r19,-24(fp)
 40045f4:	e4bffc17 	ldw	r18,-16(fp)
 40045f8:	e47ffb17 	ldw	r17,-20(fp)
 40045fc:	e43ffd17 	ldw	r16,-12(fp)
 4004600:	e53fff17 	ldw	r20,-4(fp)
 4004604:	e0bff817 	ldw	r2,-32(fp)
 4004608:	1009883a 	mov	r4,r2
 400460c:	01400504 	movi	r5,20
 4004610:	4009dd80 	call	4009dd8 <__mulsi3>
 4004614:	a085883a 	add	r2,r20,r2
 4004618:	10800d04 	addi	r2,r2,52
 400461c:	10800017 	ldw	r2,0(r2)
 4004620:	d8800015 	stw	r2,0(sp)
 4004624:	00800044 	movi	r2,1
 4004628:	d8800115 	stw	r2,4(sp)
 400462c:	e0bffe17 	ldw	r2,-8(fp)
 4004630:	d8800215 	stw	r2,8(sp)
 4004634:	9809883a 	mov	r4,r19
 4004638:	900b883a 	mov	r5,r18
 400463c:	880d883a 	mov	r6,r17
 4004640:	800f883a 	mov	r7,r16
 4004644:	4000e740 	call	4000e74 <vid_draw_box>
    RectCopy(&rc, &pDeskInfo->rcPaint);
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pReader);
    

    // draw palette
    for(i=0;i<BTN_NUM;i++){
 4004648:	e0bff817 	ldw	r2,-32(fp)
 400464c:	10800044 	addi	r2,r2,1
 4004650:	e0bff815 	stw	r2,-32(fp)
 4004654:	e0bff817 	ldw	r2,-32(fp)
 4004658:	10800250 	cmplti	r2,r2,9
 400465c:	103fa11e 	bne	r2,zero,40044e4 <__reset+0xfb0034e4>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pReader);
        }            
    }
  
    // draw activce color
    active = pDeskInfo->Paint0_Index;
 4004660:	e0bfff17 	ldw	r2,-4(fp)
 4004664:	10800017 	ldw	r2,0(r2)
 4004668:	e0bff915 	stw	r2,-28(fp)
    RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
 400466c:	e13ff917 	ldw	r4,-28(fp)
 4004670:	01400504 	movi	r5,20
 4004674:	4009dd80 	call	4009dd8 <__mulsi3>
 4004678:	10800904 	addi	r2,r2,36
 400467c:	e0ffff17 	ldw	r3,-4(fp)
 4004680:	1885883a 	add	r2,r3,r2
 4004684:	e0fffa04 	addi	r3,fp,-24
 4004688:	1809883a 	mov	r4,r3
 400468c:	100b883a 	mov	r5,r2
 4004690:	40004300 	call	4000430 <RectCopy>
    vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "1");
 4004694:	e0bffa17 	ldw	r2,-24(fp)
 4004698:	14400084 	addi	r17,r2,2
 400469c:	e0bffc17 	ldw	r2,-16(fp)
 40046a0:	14000084 	addi	r16,r2,2
 40046a4:	e4bfff17 	ldw	r18,-4(fp)
 40046a8:	e0bff917 	ldw	r2,-28(fp)
 40046ac:	1009883a 	mov	r4,r2
 40046b0:	01400504 	movi	r5,20
 40046b4:	4009dd80 	call	4009dd8 <__mulsi3>
 40046b8:	9085883a 	add	r2,r18,r2
 40046bc:	10800d04 	addi	r2,r2,52
 40046c0:	10800017 	ldw	r2,0(r2)
 40046c4:	00c101f4 	movhi	r3,1031
 40046c8:	18d5c504 	addi	r3,r3,22292
 40046cc:	d8c00015 	stw	r3,0(sp)
 40046d0:	e0fffe17 	ldw	r3,-8(fp)
 40046d4:	d8c00115 	stw	r3,4(sp)
 40046d8:	00c101f4 	movhi	r3,1031
 40046dc:	18d3de04 	addi	r3,r3,20344
 40046e0:	d8c00215 	stw	r3,8(sp)
 40046e4:	8809883a 	mov	r4,r17
 40046e8:	800b883a 	mov	r5,r16
 40046ec:	000d883a 	mov	r6,zero
 40046f0:	100f883a 	mov	r7,r2
 40046f4:	40034c80 	call	40034c8 <vid_print_string_alpha>
        
    active = pDeskInfo->Paint1_Index;
 40046f8:	e0bfff17 	ldw	r2,-4(fp)
 40046fc:	10800117 	ldw	r2,4(r2)
 4004700:	e0bff915 	stw	r2,-28(fp)
    RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
 4004704:	e13ff917 	ldw	r4,-28(fp)
 4004708:	01400504 	movi	r5,20
 400470c:	4009dd80 	call	4009dd8 <__mulsi3>
 4004710:	10800904 	addi	r2,r2,36
 4004714:	e0ffff17 	ldw	r3,-4(fp)
 4004718:	1885883a 	add	r2,r3,r2
 400471c:	e0fffa04 	addi	r3,fp,-24
 4004720:	1809883a 	mov	r4,r3
 4004724:	100b883a 	mov	r5,r2
 4004728:	40004300 	call	4000430 <RectCopy>
    vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "2");
 400472c:	e0bffa17 	ldw	r2,-24(fp)
 4004730:	14400084 	addi	r17,r2,2
 4004734:	e0bffc17 	ldw	r2,-16(fp)
 4004738:	14000084 	addi	r16,r2,2
 400473c:	e4bfff17 	ldw	r18,-4(fp)
 4004740:	e0bff917 	ldw	r2,-28(fp)
 4004744:	1009883a 	mov	r4,r2
 4004748:	01400504 	movi	r5,20
 400474c:	4009dd80 	call	4009dd8 <__mulsi3>
 4004750:	9085883a 	add	r2,r18,r2
 4004754:	10800d04 	addi	r2,r2,52
 4004758:	10800017 	ldw	r2,0(r2)
 400475c:	00c101f4 	movhi	r3,1031
 4004760:	18d5c504 	addi	r3,r3,22292
 4004764:	d8c00015 	stw	r3,0(sp)
 4004768:	e0fffe17 	ldw	r3,-8(fp)
 400476c:	d8c00115 	stw	r3,4(sp)
 4004770:	00c101f4 	movhi	r3,1031
 4004774:	18d3df04 	addi	r3,r3,20348
 4004778:	d8c00215 	stw	r3,8(sp)
 400477c:	8809883a 	mov	r4,r17
 4004780:	800b883a 	mov	r5,r16
 4004784:	000d883a 	mov	r6,zero
 4004788:	100f883a 	mov	r7,r2
 400478c:	40034c80 	call	40034c8 <vid_print_string_alpha>
    active = pDeskInfo->Paint2_Index;
 4004790:	e0bfff17 	ldw	r2,-4(fp)
 4004794:	10800217 	ldw	r2,8(r2)
 4004798:	e0bff915 	stw	r2,-28(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
 400479c:	e13ff917 	ldw	r4,-28(fp)
 40047a0:	01400504 	movi	r5,20
 40047a4:	4009dd80 	call	4009dd8 <__mulsi3>
 40047a8:	10800904 	addi	r2,r2,36
 40047ac:	e0ffff17 	ldw	r3,-4(fp)
 40047b0:	1885883a 	add	r2,r3,r2
 40047b4:	e0fffa04 	addi	r3,fp,-24
 40047b8:	1809883a 	mov	r4,r3
 40047bc:	100b883a 	mov	r5,r2
 40047c0:	40004300 	call	4000430 <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "3");
 40047c4:	e0bffa17 	ldw	r2,-24(fp)
 40047c8:	14400084 	addi	r17,r2,2
 40047cc:	e0bffc17 	ldw	r2,-16(fp)
 40047d0:	14000084 	addi	r16,r2,2
 40047d4:	e4bfff17 	ldw	r18,-4(fp)
 40047d8:	e0bff917 	ldw	r2,-28(fp)
 40047dc:	1009883a 	mov	r4,r2
 40047e0:	01400504 	movi	r5,20
 40047e4:	4009dd80 	call	4009dd8 <__mulsi3>
 40047e8:	9085883a 	add	r2,r18,r2
 40047ec:	10800d04 	addi	r2,r2,52
 40047f0:	10800017 	ldw	r2,0(r2)
 40047f4:	00c101f4 	movhi	r3,1031
 40047f8:	18d5c504 	addi	r3,r3,22292
 40047fc:	d8c00015 	stw	r3,0(sp)
 4004800:	e0fffe17 	ldw	r3,-8(fp)
 4004804:	d8c00115 	stw	r3,4(sp)
 4004808:	00c101f4 	movhi	r3,1031
 400480c:	18d3e004 	addi	r3,r3,20352
 4004810:	d8c00215 	stw	r3,8(sp)
 4004814:	8809883a 	mov	r4,r17
 4004818:	800b883a 	mov	r5,r16
 400481c:	000d883a 	mov	r6,zero
 4004820:	100f883a 	mov	r7,r2
 4004824:	40034c80 	call	40034c8 <vid_print_string_alpha>
	active = pDeskInfo->Paint3_Index;
 4004828:	e0bfff17 	ldw	r2,-4(fp)
 400482c:	10800317 	ldw	r2,12(r2)
 4004830:	e0bff915 	stw	r2,-28(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
 4004834:	e13ff917 	ldw	r4,-28(fp)
 4004838:	01400504 	movi	r5,20
 400483c:	4009dd80 	call	4009dd8 <__mulsi3>
 4004840:	10800904 	addi	r2,r2,36
 4004844:	e0ffff17 	ldw	r3,-4(fp)
 4004848:	1885883a 	add	r2,r3,r2
 400484c:	e0fffa04 	addi	r3,fp,-24
 4004850:	1809883a 	mov	r4,r3
 4004854:	100b883a 	mov	r5,r2
 4004858:	40004300 	call	4000430 <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "4");
 400485c:	e0bffa17 	ldw	r2,-24(fp)
 4004860:	14400084 	addi	r17,r2,2
 4004864:	e0bffc17 	ldw	r2,-16(fp)
 4004868:	14000084 	addi	r16,r2,2
 400486c:	e4bfff17 	ldw	r18,-4(fp)
 4004870:	e0bff917 	ldw	r2,-28(fp)
 4004874:	1009883a 	mov	r4,r2
 4004878:	01400504 	movi	r5,20
 400487c:	4009dd80 	call	4009dd8 <__mulsi3>
 4004880:	9085883a 	add	r2,r18,r2
 4004884:	10800d04 	addi	r2,r2,52
 4004888:	10800017 	ldw	r2,0(r2)
 400488c:	00c101f4 	movhi	r3,1031
 4004890:	18d5c504 	addi	r3,r3,22292
 4004894:	d8c00015 	stw	r3,0(sp)
 4004898:	e0fffe17 	ldw	r3,-8(fp)
 400489c:	d8c00115 	stw	r3,4(sp)
 40048a0:	00c101f4 	movhi	r3,1031
 40048a4:	18d3e104 	addi	r3,r3,20356
 40048a8:	d8c00215 	stw	r3,8(sp)
 40048ac:	8809883a 	mov	r4,r17
 40048b0:	800b883a 	mov	r5,r16
 40048b4:	000d883a 	mov	r6,zero
 40048b8:	100f883a 	mov	r7,r2
 40048bc:	40034c80 	call	40034c8 <vid_print_string_alpha>
	active = pDeskInfo->Paint4_Index;
 40048c0:	e0bfff17 	ldw	r2,-4(fp)
 40048c4:	10800417 	ldw	r2,16(r2)
 40048c8:	e0bff915 	stw	r2,-28(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
 40048cc:	e13ff917 	ldw	r4,-28(fp)
 40048d0:	01400504 	movi	r5,20
 40048d4:	4009dd80 	call	4009dd8 <__mulsi3>
 40048d8:	10800904 	addi	r2,r2,36
 40048dc:	e0ffff17 	ldw	r3,-4(fp)
 40048e0:	1885883a 	add	r2,r3,r2
 40048e4:	e0fffa04 	addi	r3,fp,-24
 40048e8:	1809883a 	mov	r4,r3
 40048ec:	100b883a 	mov	r5,r2
 40048f0:	40004300 	call	4000430 <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "5");
 40048f4:	e0bffa17 	ldw	r2,-24(fp)
 40048f8:	14400084 	addi	r17,r2,2
 40048fc:	e0bffc17 	ldw	r2,-16(fp)
 4004900:	14000084 	addi	r16,r2,2
 4004904:	e4bfff17 	ldw	r18,-4(fp)
 4004908:	e0bff917 	ldw	r2,-28(fp)
 400490c:	1009883a 	mov	r4,r2
 4004910:	01400504 	movi	r5,20
 4004914:	4009dd80 	call	4009dd8 <__mulsi3>
 4004918:	9085883a 	add	r2,r18,r2
 400491c:	10800d04 	addi	r2,r2,52
 4004920:	10800017 	ldw	r2,0(r2)
 4004924:	00c101f4 	movhi	r3,1031
 4004928:	18d5c504 	addi	r3,r3,22292
 400492c:	d8c00015 	stw	r3,0(sp)
 4004930:	e0fffe17 	ldw	r3,-8(fp)
 4004934:	d8c00115 	stw	r3,4(sp)
 4004938:	00c101f4 	movhi	r3,1031
 400493c:	18d3e204 	addi	r3,r3,20360
 4004940:	d8c00215 	stw	r3,8(sp)
 4004944:	8809883a 	mov	r4,r17
 4004948:	800b883a 	mov	r5,r16
 400494c:	000d883a 	mov	r6,zero
 4004950:	100f883a 	mov	r7,r2
 4004954:	40034c80 	call	40034c8 <vid_print_string_alpha>
        
        
}
 4004958:	e037883a 	mov	sp,fp
 400495c:	dfc00617 	ldw	ra,24(sp)
 4004960:	df000517 	ldw	fp,20(sp)
 4004964:	dd000417 	ldw	r20,16(sp)
 4004968:	dcc00317 	ldw	r19,12(sp)
 400496c:	dc800217 	ldw	r18,8(sp)
 4004970:	dc400117 	ldw	r17,4(sp)
 4004974:	dc000017 	ldw	r16,0(sp)
 4004978:	dec00704 	addi	sp,sp,28
 400497c:	f800283a 	ret

04004980 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
 4004980:	defffb04 	addi	sp,sp,-20
 4004984:	df000415 	stw	fp,16(sp)
 4004988:	df000404 	addi	fp,sp,16
 400498c:	e13ffe15 	stw	r4,-8(fp)
 4004990:	e17fff15 	stw	r5,-4(fp)
    bool bYes = TRUE;
 4004994:	00800044 	movi	r2,1
 4004998:	e0bffc15 	stw	r2,-16(fp)
    const int nMax = 50;
 400499c:	00800c84 	movi	r2,50
 40049a0:	e0bffd15 	stw	r2,-12(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
 40049a4:	e0bffe17 	ldw	r2,-8(fp)
 40049a8:	10c00017 	ldw	r3,0(r2)
 40049ac:	e0bfff17 	ldw	r2,-4(fp)
 40049b0:	10800017 	ldw	r2,0(r2)
 40049b4:	1885c83a 	sub	r2,r3,r2
 40049b8:	1000010e 	bge	r2,zero,40049c0 <IsContinuedPoint+0x40>
 40049bc:	0085c83a 	sub	r2,zero,r2
 40049c0:	e0fffd17 	ldw	r3,-12(fp)
 40049c4:	1880020e 	bge	r3,r2,40049d0 <IsContinuedPoint+0x50>
        bYes = FALSE;
 40049c8:	e03ffc15 	stw	zero,-16(fp)
 40049cc:	00000a06 	br	40049f8 <IsContinuedPoint+0x78>
    else if (abs(ptPre->y - ptNew->y) > nMax)
 40049d0:	e0bffe17 	ldw	r2,-8(fp)
 40049d4:	10c00117 	ldw	r3,4(r2)
 40049d8:	e0bfff17 	ldw	r2,-4(fp)
 40049dc:	10800117 	ldw	r2,4(r2)
 40049e0:	1885c83a 	sub	r2,r3,r2
 40049e4:	1000010e 	bge	r2,zero,40049ec <IsContinuedPoint+0x6c>
 40049e8:	0085c83a 	sub	r2,zero,r2
 40049ec:	e0fffd17 	ldw	r3,-12(fp)
 40049f0:	1880010e 	bge	r3,r2,40049f8 <IsContinuedPoint+0x78>
        bYes = FALSE;
 40049f4:	e03ffc15 	stw	zero,-16(fp)
        
    return bYes;        
 40049f8:	e0bffc17 	ldw	r2,-16(fp)
        
}
 40049fc:	e037883a 	mov	sp,fp
 4004a00:	df000017 	ldw	fp,0(sp)
 4004a04:	dec00104 	addi	sp,sp,4
 4004a08:	f800283a 	ret

04004a0c <GUI_ShowGesture>:

void GUI_ShowGesture(VIP_FRAME_READER *pReader, POINT *ptDraw, alt_u8 GestureId ){
 4004a0c:	defff104 	addi	sp,sp,-60
 4004a10:	dfc00e15 	stw	ra,56(sp)
 4004a14:	df000d15 	stw	fp,52(sp)
 4004a18:	dc400c15 	stw	r17,48(sp)
 4004a1c:	dc000b15 	stw	r16,44(sp)
 4004a20:	df000b04 	addi	fp,sp,44
 4004a24:	e13ffd15 	stw	r4,-12(fp)
 4004a28:	e17ffe15 	stw	r5,-8(fp)
 4004a2c:	3005883a 	mov	r2,r6
 4004a30:	e0bfff05 	stb	r2,-4(fp)
    // show bitmap
    int nIndex = -1, x, y;
 4004a34:	00bfffc4 	movi	r2,-1
 4004a38:	e0bff515 	stw	r2,-44(fp)
    const int BmpW = 60;
 4004a3c:	00800f04 	movi	r2,60
 4004a40:	e0bffb15 	stw	r2,-20(fp)
    const int BmpH = 60;
 4004a44:	00800f04 	movi	r2,60
 4004a48:	e0bffc15 	stw	r2,-16(fp)
    alt_u8 *pDes, *pSrc, *pDesStart;

    // find gesture bitmap id
    switch(GestureId){
 4004a4c:	e0bfff03 	ldbu	r2,-4(fp)
 4004a50:	10bffc04 	addi	r2,r2,-16
 4004a54:	10c00ea8 	cmpgeui	r3,r2,58
 4004a58:	1800521e 	bne	r3,zero,4004ba4 <GUI_ShowGesture+0x198>
 4004a5c:	1085883a 	add	r2,r2,r2
 4004a60:	1087883a 	add	r3,r2,r2
 4004a64:	00810034 	movhi	r2,1024
 4004a68:	10929e04 	addi	r2,r2,19064
 4004a6c:	1885883a 	add	r2,r3,r2
 4004a70:	10800017 	ldw	r2,0(r2)
 4004a74:	1000683a 	jmp	r2
 4004a78:	04004b80 	call	4004b8 <__alt_mem_sdram-0x3bffb48>
 4004a7c:	04004ba4 	muli	r16,zero,302
 4004a80:	04004ba4 	muli	r16,zero,302
 4004a84:	04004ba4 	muli	r16,zero,302
 4004a88:	04004b68 	cmpgeui	r16,zero,301
 4004a8c:	04004ba4 	muli	r16,zero,302
 4004a90:	04004ba4 	muli	r16,zero,302
 4004a94:	04004ba4 	muli	r16,zero,302
 4004a98:	04004b74 	movhi	r16,301
 4004a9c:	04004ba4 	muli	r16,zero,302
 4004aa0:	04004ba4 	muli	r16,zero,302
 4004aa4:	04004ba4 	muli	r16,zero,302
 4004aa8:	04004b60 	cmpeqi	r16,zero,301
 4004aac:	04004ba4 	muli	r16,zero,302
 4004ab0:	04004ba4 	muli	r16,zero,302
 4004ab4:	04004ba4 	muli	r16,zero,302
 4004ab8:	04004ba4 	muli	r16,zero,302
 4004abc:	04004ba4 	muli	r16,zero,302
 4004ac0:	04004ba4 	muli	r16,zero,302
 4004ac4:	04004ba4 	muli	r16,zero,302
 4004ac8:	04004ba4 	muli	r16,zero,302
 4004acc:	04004ba4 	muli	r16,zero,302
 4004ad0:	04004ba4 	muli	r16,zero,302
 4004ad4:	04004ba4 	muli	r16,zero,302
 4004ad8:	04004ba4 	muli	r16,zero,302
 4004adc:	04004ba4 	muli	r16,zero,302
 4004ae0:	04004ba4 	muli	r16,zero,302
 4004ae4:	04004ba4 	muli	r16,zero,302
 4004ae8:	04004ba4 	muli	r16,zero,302
 4004aec:	04004ba4 	muli	r16,zero,302
 4004af0:	04004ba4 	muli	r16,zero,302
 4004af4:	04004ba4 	muli	r16,zero,302
 4004af8:	04004ba4 	muli	r16,zero,302
 4004afc:	04004ba4 	muli	r16,zero,302
 4004b00:	04004ba4 	muli	r16,zero,302
 4004b04:	04004ba4 	muli	r16,zero,302
 4004b08:	04004ba4 	muli	r16,zero,302
 4004b0c:	04004ba4 	muli	r16,zero,302
 4004b10:	04004ba4 	muli	r16,zero,302
 4004b14:	04004ba4 	muli	r16,zero,302
 4004b18:	04004ba4 	muli	r16,zero,302
 4004b1c:	04004ba4 	muli	r16,zero,302
 4004b20:	04004ba4 	muli	r16,zero,302
 4004b24:	04004ba4 	muli	r16,zero,302
 4004b28:	04004ba4 	muli	r16,zero,302
 4004b2c:	04004ba4 	muli	r16,zero,302
 4004b30:	04004ba4 	muli	r16,zero,302
 4004b34:	04004ba4 	muli	r16,zero,302
 4004b38:	04004ba4 	muli	r16,zero,302
 4004b3c:	04004ba4 	muli	r16,zero,302
 4004b40:	04004ba4 	muli	r16,zero,302
 4004b44:	04004ba4 	muli	r16,zero,302
 4004b48:	04004ba4 	muli	r16,zero,302
 4004b4c:	04004ba4 	muli	r16,zero,302
 4004b50:	04004ba4 	muli	r16,zero,302
 4004b54:	04004ba4 	muli	r16,zero,302
 4004b58:	04004b8c 	andi	r16,zero,302
 4004b5c:	04004b98 	cmpnei	r16,zero,302
        case MTC_ST_UP:  nIndex = 0; break;
 4004b60:	e03ff515 	stw	zero,-44(fp)
 4004b64:	00000f06 	br	4004ba4 <GUI_ShowGesture+0x198>
        case MTC_ST_DOWN:  nIndex = 1; break;
 4004b68:	00800044 	movi	r2,1
 4004b6c:	e0bff515 	stw	r2,-44(fp)
 4004b70:	00000c06 	br	4004ba4 <GUI_ShowGesture+0x198>
        case MTC_ST_RIGHT:   nIndex = 2; break;
 4004b74:	00800084 	movi	r2,2
 4004b78:	e0bff515 	stw	r2,-44(fp)
 4004b7c:	00000906 	br	4004ba4 <GUI_ShowGesture+0x198>
        case MTC_ST_LEFT:   nIndex = 3; break;
 4004b80:	008000c4 	movi	r2,3
 4004b84:	e0bff515 	stw	r2,-44(fp)
 4004b88:	00000606 	br	4004ba4 <GUI_ShowGesture+0x198>

        case MTC_ZOOM_IN:         nIndex = 24; break;
 4004b8c:	00800604 	movi	r2,24
 4004b90:	e0bff515 	stw	r2,-44(fp)
 4004b94:	00000306 	br	4004ba4 <GUI_ShowGesture+0x198>
        case MTC_ZOOM_OUT:        nIndex = 25; break;
 4004b98:	00800644 	movi	r2,25
 4004b9c:	e0bff515 	stw	r2,-44(fp)
 4004ba0:	0001883a 	nop
    }

    if (nIndex  == -1)
 4004ba4:	e0bff517 	ldw	r2,-44(fp)
 4004ba8:	10bfffd8 	cmpnei	r2,r2,-1
 4004bac:	10005126 	beq	r2,zero,4004cf4 <GUI_ShowGesture+0x2e8>
        return;

    pSrc = (alt_u8 *)gesture_bmp.pixel_data + nIndex * BmpW * BmpH * 3;
 4004bb0:	e13ff517 	ldw	r4,-44(fp)
 4004bb4:	e17ffb17 	ldw	r5,-20(fp)
 4004bb8:	4009dd80 	call	4009dd8 <__mulsi3>
 4004bbc:	1009883a 	mov	r4,r2
 4004bc0:	e17ffc17 	ldw	r5,-16(fp)
 4004bc4:	4009dd80 	call	4009dd8 <__mulsi3>
 4004bc8:	1007883a 	mov	r3,r2
 4004bcc:	1805883a 	mov	r2,r3
 4004bd0:	1085883a 	add	r2,r2,r2
 4004bd4:	10c5883a 	add	r2,r2,r3
 4004bd8:	10c00304 	addi	r3,r2,12
 4004bdc:	008100f4 	movhi	r2,1027
 4004be0:	10819b04 	addi	r2,r2,1644
 4004be4:	1885883a 	add	r2,r3,r2
 4004be8:	e0bff915 	stw	r2,-28(fp)

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);
 4004bec:	e13ffd17 	ldw	r4,-12(fp)
 4004bf0:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4004bf4:	1021883a 	mov	r16,r2
 4004bf8:	e0bffe17 	ldw	r2,-8(fp)
 4004bfc:	10c00117 	ldw	r3,4(r2)
 4004c00:	e0bffd17 	ldw	r2,-12(fp)
 4004c04:	10800517 	ldw	r2,20(r2)
 4004c08:	1809883a 	mov	r4,r3
 4004c0c:	100b883a 	mov	r5,r2
 4004c10:	4009dd80 	call	4009dd8 <__mulsi3>
 4004c14:	1007883a 	mov	r3,r2
 4004c18:	e0bffd17 	ldw	r2,-12(fp)
 4004c1c:	10800717 	ldw	r2,28(r2)
 4004c20:	1809883a 	mov	r4,r3
 4004c24:	100b883a 	mov	r5,r2
 4004c28:	4009dd80 	call	4009dd8 <__mulsi3>
 4004c2c:	1023883a 	mov	r17,r2
 4004c30:	e0bffe17 	ldw	r2,-8(fp)
 4004c34:	10c00017 	ldw	r3,0(r2)
 4004c38:	e0bffd17 	ldw	r2,-12(fp)
 4004c3c:	10800717 	ldw	r2,28(r2)
 4004c40:	1809883a 	mov	r4,r3
 4004c44:	100b883a 	mov	r5,r2
 4004c48:	4009dd80 	call	4009dd8 <__mulsi3>
 4004c4c:	8885883a 	add	r2,r17,r2
 4004c50:	8085883a 	add	r2,r16,r2
 4004c54:	e0bffa15 	stw	r2,-24(fp)

    for(y=0;y<BmpH;y++){
 4004c58:	e03ff715 	stw	zero,-36(fp)
 4004c5c:	00002106 	br	4004ce4 <GUI_ShowGesture+0x2d8>
        pDes = pDesStart;
 4004c60:	e0bffa17 	ldw	r2,-24(fp)
 4004c64:	e0bff815 	stw	r2,-32(fp)
        for(x=0;x<BmpW;x++){
 4004c68:	e03ff615 	stw	zero,-40(fp)
 4004c6c:	00000d06 	br	4004ca4 <GUI_ShowGesture+0x298>
            memcpy(pDes, pSrc, 3);
 4004c70:	e13ff817 	ldw	r4,-32(fp)
 4004c74:	e17ff917 	ldw	r5,-28(fp)
 4004c78:	018000c4 	movi	r6,3
 4004c7c:	400abf80 	call	400abf8 <memcpy>
            pDes += 4;
 4004c80:	e0bff817 	ldw	r2,-32(fp)
 4004c84:	10800104 	addi	r2,r2,4
 4004c88:	e0bff815 	stw	r2,-32(fp)
            pSrc += 3;
 4004c8c:	e0bff917 	ldw	r2,-28(fp)
 4004c90:	108000c4 	addi	r2,r2,3
 4004c94:	e0bff915 	stw	r2,-28(fp)

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);

    for(y=0;y<BmpH;y++){
        pDes = pDesStart;
        for(x=0;x<BmpW;x++){
 4004c98:	e0bff617 	ldw	r2,-40(fp)
 4004c9c:	10800044 	addi	r2,r2,1
 4004ca0:	e0bff615 	stw	r2,-40(fp)
 4004ca4:	e0fff617 	ldw	r3,-40(fp)
 4004ca8:	e0bffb17 	ldw	r2,-20(fp)
 4004cac:	18bff016 	blt	r3,r2,4004c70 <__reset+0xfb003c70>
            memcpy(pDes, pSrc, 3);
            pDes += 4;
            pSrc += 3;
        }
        pDesStart += pReader->width*pReader->bytes_per_pixel;
 4004cb0:	e0bffd17 	ldw	r2,-12(fp)
 4004cb4:	10c00517 	ldw	r3,20(r2)
 4004cb8:	e0bffd17 	ldw	r2,-12(fp)
 4004cbc:	10800717 	ldw	r2,28(r2)
 4004cc0:	1809883a 	mov	r4,r3
 4004cc4:	100b883a 	mov	r5,r2
 4004cc8:	4009dd80 	call	4009dd8 <__mulsi3>
 4004ccc:	e0fffa17 	ldw	r3,-24(fp)
 4004cd0:	1885883a 	add	r2,r3,r2
 4004cd4:	e0bffa15 	stw	r2,-24(fp)

    pSrc = (alt_u8 *)gesture_bmp.pixel_data + nIndex * BmpW * BmpH * 3;

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);

    for(y=0;y<BmpH;y++){
 4004cd8:	e0bff717 	ldw	r2,-36(fp)
 4004cdc:	10800044 	addi	r2,r2,1
 4004ce0:	e0bff715 	stw	r2,-36(fp)
 4004ce4:	e0fff717 	ldw	r3,-36(fp)
 4004ce8:	e0bffc17 	ldw	r2,-16(fp)
 4004cec:	18bfdc16 	blt	r3,r2,4004c60 <__reset+0xfb003c60>
 4004cf0:	00000106 	br	4004cf8 <GUI_ShowGesture+0x2ec>
        case MTC_ZOOM_IN:         nIndex = 24; break;
        case MTC_ZOOM_OUT:        nIndex = 25; break;
    }

    if (nIndex  == -1)
        return;
 4004cf4:	0001883a 	nop
            pDes += 4;
            pSrc += 3;
        }
        pDesStart += pReader->width*pReader->bytes_per_pixel;
    }
}
 4004cf8:	e037883a 	mov	sp,fp
 4004cfc:	dfc00317 	ldw	ra,12(sp)
 4004d00:	df000217 	ldw	fp,8(sp)
 4004d04:	dc400117 	ldw	r17,4(sp)
 4004d08:	dc000017 	ldw	r16,0(sp)
 4004d0c:	dec00404 	addi	sp,sp,16
 4004d10:	f800283a 	ret

04004d14 <GUI_TraceGesture>:

void GUI_TraceGesture(VIP_FRAME_READER *pReader, POINT *ptDraw, alt_u8 GestureId ){
 4004d14:	defffb04 	addi	sp,sp,-20
 4004d18:	dfc00415 	stw	ra,16(sp)
 4004d1c:	df000315 	stw	fp,12(sp)
 4004d20:	df000304 	addi	fp,sp,12
 4004d24:	e13ffd15 	stw	r4,-12(fp)
 4004d28:	e17ffe15 	stw	r5,-8(fp)
 4004d2c:	3005883a 	mov	r2,r6
 4004d30:	e0bfff05 	stb	r2,-4(fp)
      GUI_ShowGesture(pReader, ptDraw, GestureId);
 4004d34:	e0bfff03 	ldbu	r2,-4(fp)
 4004d38:	e13ffd17 	ldw	r4,-12(fp)
 4004d3c:	e17ffe17 	ldw	r5,-8(fp)
 4004d40:	100d883a 	mov	r6,r2
 4004d44:	4004a0c0 	call	4004a0c <GUI_ShowGesture>
}
 4004d48:	e037883a 	mov	sp,fp
 4004d4c:	dfc00117 	ldw	ra,4(sp)
 4004d50:	df000017 	ldw	fp,0(sp)
 4004d54:	dec00204 	addi	sp,sp,8
 4004d58:	f800283a 	ret

04004d5c <GUI_ClearPaintArea>:

void GUI_ClearPaintArea(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
 4004d5c:	defff504 	addi	sp,sp,-44
 4004d60:	dfc00a15 	stw	ra,40(sp)
 4004d64:	df000915 	stw	fp,36(sp)
 4004d68:	df000904 	addi	fp,sp,36
 4004d6c:	e13ffe15 	stw	r4,-8(fp)
 4004d70:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
 4004d74:	e0bfff17 	ldw	r2,-4(fp)
 4004d78:	10800504 	addi	r2,r2,20
 4004d7c:	e13ffa04 	addi	r4,fp,-24
 4004d80:	100b883a 	mov	r5,r2
 4004d84:	40004300 	call	4000430 <RectCopy>
    RectInflate(&rc, -1, -1);
 4004d88:	e13ffa04 	addi	r4,fp,-24
 4004d8c:	017fffc4 	movi	r5,-1
 4004d90:	01bfffc4 	movi	r6,-1
 4004d94:	40003200 	call	4000320 <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pReader);
 4004d98:	e13ffa17 	ldw	r4,-24(fp)
 4004d9c:	e17ffc17 	ldw	r5,-16(fp)
 4004da0:	e0fffb17 	ldw	r3,-20(fp)
 4004da4:	e0bffd17 	ldw	r2,-12(fp)
 4004da8:	d8000015 	stw	zero,0(sp)
 4004dac:	01800044 	movi	r6,1
 4004db0:	d9800115 	stw	r6,4(sp)
 4004db4:	e1bffe17 	ldw	r6,-8(fp)
 4004db8:	d9800215 	stw	r6,8(sp)
 4004dbc:	180d883a 	mov	r6,r3
 4004dc0:	100f883a 	mov	r7,r2
 4004dc4:	4000e740 	call	4000e74 <vid_draw_box>
    //
    RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
 4004dc8:	e0bfff17 	ldw	r2,-4(fp)
 4004dcc:	10800904 	addi	r2,r2,36
 4004dd0:	e13ffa04 	addi	r4,fp,-24
 4004dd4:	100b883a 	mov	r5,r2
 4004dd8:	40004300 	call	4000430 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pReader);
 4004ddc:	e13ffa17 	ldw	r4,-24(fp)
 4004de0:	e17ffc17 	ldw	r5,-16(fp)
 4004de4:	e0fffb17 	ldw	r3,-20(fp)
 4004de8:	e0bffd17 	ldw	r2,-12(fp)
 4004dec:	d8000015 	stw	zero,0(sp)
 4004df0:	01800044 	movi	r6,1
 4004df4:	d9800115 	stw	r6,4(sp)
 4004df8:	e1bffe17 	ldw	r6,-8(fp)
 4004dfc:	d9800215 	stw	r6,8(sp)
 4004e00:	180d883a 	mov	r6,r3
 4004e04:	100f883a 	mov	r7,r2
 4004e08:	4000e740 	call	4000e74 <vid_draw_box>
}
 4004e0c:	e037883a 	mov	sp,fp
 4004e10:	dfc00117 	ldw	ra,4(sp)
 4004e14:	df000017 	ldw	fp,0(sp)
 4004e18:	dec00204 	addi	sp,sp,8
 4004e1c:	f800283a 	ret

04004e20 <GUI>:

void GUI(MTC2_INFO *pTouch){
 4004e20:	deff9504 	addi	sp,sp,-428
 4004e24:	dfc06a15 	stw	ra,424(sp)
 4004e28:	df006915 	stw	fp,420(sp)
 4004e2c:	df006904 	addi	fp,sp,420
 4004e30:	e13fff15 	stw	r4,-4(fp)
    // video
    DESK_INFO DeskInfo;
    VIP_FRAME_READER *pReader;
    int X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5 ;
    POINT Pt1, Pt2, Pt3, Pt4, Pt5, ptGesture;
    alt_u8 Event, TouchNum, LedMask = 0x01;
 4004e34:	00800044 	movi	r2,1
 4004e38:	e0bfa005 	stb	r2,-384(fp)
    const int nDotSize = DOT_SIZE;
 4004e3c:	00800184 	movi	r2,6
 4004e40:	e0bfa715 	stw	r2,-356(fp)
    /////////////////////////////////////////////
    // frame reader
#ifdef DUAL_FRAME_BUFFER    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
#else    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_0, FRAME_WIDTH, FRAME_HEIGHT);
 4004e44:	00807804 	movi	r2,480
 4004e48:	d8800015 	stw	r2,0(sp)
 4004e4c:	01024034 	movhi	r4,2304
 4004e50:	21080004 	addi	r4,r4,8192
 4004e54:	01418034 	movhi	r5,1536
 4004e58:	01818034 	movhi	r6,1536
 4004e5c:	01c0c804 	movi	r7,800
 4004e60:	40087e40 	call	40087e4 <VIPFR_Init>
 4004e64:	e0bfa815 	stw	r2,-352(fp)
#endif // DUAL_FRAME_BUFFER    
    VIPFR_Go(pReader, TRUE);
 4004e68:	e13fa817 	ldw	r4,-352(fp)
 4004e6c:	01400044 	movi	r5,1
 4004e70:	40089fc0 	call	40089fc <VIPFR_Go>
    
    
    // clean screen
    vid_clean_screen(pReader, BLACK_24);
 4004e74:	e13fa817 	ldw	r4,-352(fp)
 4004e78:	000b883a 	mov	r5,zero
 4004e7c:	40006000 	call	4000600 <vid_clean_screen>
    
   
    GUI_DeskInit(pReader, &DeskInfo);
 4004e80:	e0bfae04 	addi	r2,fp,-328
 4004e84:	e13fa817 	ldw	r4,-352(fp)
 4004e88:	100b883a 	mov	r5,r2
 4004e8c:	40041440 	call	4004144 <GUI_DeskInit>
    GUI_DeskDraw(pReader, &DeskInfo);
 4004e90:	e0bfae04 	addi	r2,fp,-328
 4004e94:	e13fa817 	ldw	r4,-352(fp)
 4004e98:	100b883a 	mov	r5,r2
 4004e9c:	40043d80 	call	40043d8 <GUI_DeskDraw>
    
    VIPFR_ActiveDrawFrame(pReader);
 4004ea0:	e13fa817 	ldw	r4,-352(fp)
 4004ea4:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
 4004ea8:	e0fffb04 	addi	r3,fp,-20
 4004eac:	e0bfae04 	addi	r2,fp,-328
 4004eb0:	10800504 	addi	r2,r2,20
 4004eb4:	1809883a 	mov	r4,r3
 4004eb8:	100b883a 	mov	r5,r2
 4004ebc:	40004300 	call	4000430 <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
 4004ec0:	00ffff84 	movi	r3,-2
 4004ec4:	e0bfa717 	ldw	r2,-356(fp)
 4004ec8:	1887c83a 	sub	r3,r3,r2
 4004ecc:	013fff84 	movi	r4,-2
 4004ed0:	e0bfa717 	ldw	r2,-356(fp)
 4004ed4:	2085c83a 	sub	r2,r4,r2
 4004ed8:	e13ffb04 	addi	r4,fp,-20
 4004edc:	180b883a 	mov	r5,r3
 4004ee0:	100d883a 	mov	r6,r2
 4004ee4:	40003200 	call	4000320 <RectInflate>
    
    ColorPen0 = DeskInfo.szPalette[DeskInfo.Paint0_Index].color;
 4004ee8:	e0bfae17 	ldw	r2,-328(fp)
 4004eec:	1009883a 	mov	r4,r2
 4004ef0:	01400504 	movi	r5,20
 4004ef4:	4009dd80 	call	4009dd8 <__mulsi3>
 4004ef8:	e0ffa004 	addi	r3,fp,-384
 4004efc:	1885883a 	add	r2,r3,r2
 4004f00:	10801b04 	addi	r2,r2,108
 4004f04:	10800017 	ldw	r2,0(r2)
 4004f08:	e0bfa115 	stw	r2,-380(fp)
    ColorPen1 = DeskInfo.szPalette[DeskInfo.Paint1_Index].color;
 4004f0c:	e0bfaf17 	ldw	r2,-324(fp)
 4004f10:	1009883a 	mov	r4,r2
 4004f14:	01400504 	movi	r5,20
 4004f18:	4009dd80 	call	4009dd8 <__mulsi3>
 4004f1c:	e0ffa004 	addi	r3,fp,-384
 4004f20:	1885883a 	add	r2,r3,r2
 4004f24:	10801b04 	addi	r2,r2,108
 4004f28:	10800017 	ldw	r2,0(r2)
 4004f2c:	e0bfa215 	stw	r2,-376(fp)
    ColorPen2 = DeskInfo.szPalette[DeskInfo.Paint2_Index].color;
 4004f30:	e0bfb017 	ldw	r2,-320(fp)
 4004f34:	1009883a 	mov	r4,r2
 4004f38:	01400504 	movi	r5,20
 4004f3c:	4009dd80 	call	4009dd8 <__mulsi3>
 4004f40:	e0ffa004 	addi	r3,fp,-384
 4004f44:	1885883a 	add	r2,r3,r2
 4004f48:	10801b04 	addi	r2,r2,108
 4004f4c:	10800017 	ldw	r2,0(r2)
 4004f50:	e0bfa315 	stw	r2,-372(fp)
    ColorPen3 = DeskInfo.szPalette[DeskInfo.Paint3_Index].color;
 4004f54:	e0bfb117 	ldw	r2,-316(fp)
 4004f58:	1009883a 	mov	r4,r2
 4004f5c:	01400504 	movi	r5,20
 4004f60:	4009dd80 	call	4009dd8 <__mulsi3>
 4004f64:	e0ffa004 	addi	r3,fp,-384
 4004f68:	1885883a 	add	r2,r3,r2
 4004f6c:	10801b04 	addi	r2,r2,108
 4004f70:	10800017 	ldw	r2,0(r2)
 4004f74:	e0bfa415 	stw	r2,-368(fp)
    ColorPen4 = DeskInfo.szPalette[DeskInfo.Paint4_Index].color;
 4004f78:	e0bfb217 	ldw	r2,-312(fp)
 4004f7c:	1009883a 	mov	r4,r2
 4004f80:	01400504 	movi	r5,20
 4004f84:	4009dd80 	call	4009dd8 <__mulsi3>
 4004f88:	e0ffa004 	addi	r3,fp,-384
 4004f8c:	1885883a 	add	r2,r3,r2
 4004f90:	10801b04 	addi	r2,r2,108
 4004f94:	10800017 	ldw	r2,0(r2)
 4004f98:	e0bfa515 	stw	r2,-364(fp)
    
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
    PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);
 4004f9c:	e0bfb717 	ldw	r2,-292(fp)
 4004fa0:	10c00144 	addi	r3,r2,5
 4004fa4:	e0bfb917 	ldw	r2,-284(fp)
 4004fa8:	10800144 	addi	r2,r2,5
 4004fac:	e13ff804 	addi	r4,fp,-32
 4004fb0:	180b883a 	mov	r5,r3
 4004fb4:	100d883a 	mov	r6,r2
 4004fb8:	40002840 	call	4000284 <PtSet>
 4004fbc:	00000106 	br	4004fc4 <GUI+0x1a4>
					VIPFR_ActiveDrawFrame(pReader);
					MTC2_ClearEvent(pTouch);
				}
                }
        }
    }
 4004fc0:	0001883a 	nop
    PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);
    
    while(1)
    {
        // touch
        if (MTC2_GetStatus(pTouch,&Event, &TouchNum, &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)){
 4004fc4:	e17ffa04 	addi	r5,fp,-24
 4004fc8:	e0fffa44 	addi	r3,fp,-23
 4004fcc:	e0bfe404 	addi	r2,fp,-112
 4004fd0:	e13fe504 	addi	r4,fp,-108
 4004fd4:	d9000015 	stw	r4,0(sp)
 4004fd8:	e13fe604 	addi	r4,fp,-104
 4004fdc:	d9000115 	stw	r4,4(sp)
 4004fe0:	e13fe704 	addi	r4,fp,-100
 4004fe4:	d9000215 	stw	r4,8(sp)
 4004fe8:	e13fe804 	addi	r4,fp,-96
 4004fec:	d9000315 	stw	r4,12(sp)
 4004ff0:	e13fe904 	addi	r4,fp,-92
 4004ff4:	d9000415 	stw	r4,16(sp)
 4004ff8:	e13fea04 	addi	r4,fp,-88
 4004ffc:	d9000515 	stw	r4,20(sp)
 4005000:	e13feb04 	addi	r4,fp,-84
 4005004:	d9000615 	stw	r4,24(sp)
 4005008:	e13fec04 	addi	r4,fp,-80
 400500c:	d9000715 	stw	r4,28(sp)
 4005010:	e13fed04 	addi	r4,fp,-76
 4005014:	d9000815 	stw	r4,32(sp)
 4005018:	e13fff17 	ldw	r4,-4(fp)
 400501c:	180d883a 	mov	r6,r3
 4005020:	100f883a 	mov	r7,r2
 4005024:	40083b40 	call	40083b4 <MTC2_GetStatus>
 4005028:	103fe526 	beq	r2,zero,4004fc0 <__reset+0xfb003fc0>
            IOWR(LED_BASE, 0x00, LedMask);
 400502c:	e0ffa003 	ldbu	r3,-384(fp)
 4005030:	00820034 	movhi	r2,2048
 4005034:	10801004 	addi	r2,r2,64
 4005038:	10c00035 	stwio	r3,0(r2)
            LedMask <<= 1;
 400503c:	e0bfa003 	ldbu	r2,-384(fp)
 4005040:	1085883a 	add	r2,r2,r2
 4005044:	e0bfa005 	stb	r2,-384(fp)
            if (LedMask == 0x00)
 4005048:	e0bfa003 	ldbu	r2,-384(fp)
 400504c:	1000021e 	bne	r2,zero,4005058 <GUI+0x238>
                LedMask = 0x01;
 4005050:	00800044 	movi	r2,1
 4005054:	e0bfa005 	stb	r2,-384(fp)

           GUI_TraceGesture(pReader, &ptGesture, Event);
 4005058:	e0bffa03 	ldbu	r2,-24(fp)
 400505c:	10803fcc 	andi	r2,r2,255
 4005060:	e0fff804 	addi	r3,fp,-32
 4005064:	e13fa817 	ldw	r4,-352(fp)
 4005068:	180b883a 	mov	r5,r3
 400506c:	100d883a 	mov	r6,r2
 4005070:	4004d140 	call	4004d14 <GUI_TraceGesture>
           printf(".");
 4005074:	01000b84 	movi	r4,46
 4005078:	400ae840 	call	400ae84 <putchar>
            switch(TouchNum)
 400507c:	e0bffa43 	ldbu	r2,-23(fp)
 4005080:	10803fcc 	andi	r2,r2,255
 4005084:	10c001a8 	cmpgeui	r3,r2,6
 4005088:	18002c1e 	bne	r3,zero,400513c <GUI+0x31c>
 400508c:	1085883a 	add	r2,r2,r2
 4005090:	1087883a 	add	r3,r2,r2
 4005094:	00810034 	movhi	r2,1024
 4005098:	10942a04 	addi	r2,r2,20648
 400509c:	1885883a 	add	r2,r3,r2
 40050a0:	10800017 	ldw	r2,0(r2)
 40050a4:	1000683a 	jmp	r2
 40050a8:	0400513c 	xorhi	r16,zero,324
 40050ac:	04005120 	cmpeqi	r16,zero,324
 40050b0:	04005108 	cmpgei	r16,zero,324
 40050b4:	040050f0 	cmpltui	r16,zero,323
 40050b8:	040050d8 	cmpnei	r16,zero,323
 40050bc:	040050c0 	call	40050c <__alt_mem_sdram-0x3bffaf4>
            {
            case 5 :
            	PtSet(&Pt5, X5, Y5);
 40050c0:	e0ffec17 	ldw	r3,-80(fp)
 40050c4:	e0bfed17 	ldw	r2,-76(fp)
 40050c8:	e13ff604 	addi	r4,fp,-40
 40050cc:	180b883a 	mov	r5,r3
 40050d0:	100d883a 	mov	r6,r2
 40050d4:	40002840 	call	4000284 <PtSet>
            case 4 :
            	PtSet(&Pt4, X4, Y4);
 40050d8:	e0ffea17 	ldw	r3,-88(fp)
 40050dc:	e0bfeb17 	ldw	r2,-84(fp)
 40050e0:	e13ff404 	addi	r4,fp,-48
 40050e4:	180b883a 	mov	r5,r3
 40050e8:	100d883a 	mov	r6,r2
 40050ec:	40002840 	call	4000284 <PtSet>
            case 3:
            	PtSet(&Pt3, X3, Y3);
 40050f0:	e0ffe817 	ldw	r3,-96(fp)
 40050f4:	e0bfe917 	ldw	r2,-92(fp)
 40050f8:	e13ff204 	addi	r4,fp,-56
 40050fc:	180b883a 	mov	r5,r3
 4005100:	100d883a 	mov	r6,r2
 4005104:	40002840 	call	4000284 <PtSet>
            case 2:
            	PtSet(&Pt2, X2, Y2);
 4005108:	e0ffe617 	ldw	r3,-104(fp)
 400510c:	e0bfe717 	ldw	r2,-100(fp)
 4005110:	e13ff004 	addi	r4,fp,-64
 4005114:	180b883a 	mov	r5,r3
 4005118:	100d883a 	mov	r6,r2
 400511c:	40002840 	call	4000284 <PtSet>
            case 1:
            	PtSet(&Pt1, X1, Y1); break;
 4005120:	e0ffe417 	ldw	r3,-112(fp)
 4005124:	e0bfe517 	ldw	r2,-108(fp)
 4005128:	e13fee04 	addi	r4,fp,-72
 400512c:	180b883a 	mov	r5,r3
 4005130:	100d883a 	mov	r6,r2
 4005134:	40002840 	call	4000284 <PtSet>
 4005138:	00000106 	br	4005140 <GUI+0x320>
            default:break;
 400513c:	0001883a 	nop
            }

            if (TouchNum >= 1 && IsPtInRect(&Pt1, &rcTouch)){
 4005140:	e0bffa43 	ldbu	r2,-23(fp)
 4005144:	10803fcc 	andi	r2,r2,255
 4005148:	10006826 	beq	r2,zero,40052ec <GUI+0x4cc>
 400514c:	e0ffee04 	addi	r3,fp,-72
 4005150:	e0bffb04 	addi	r2,fp,-20
 4005154:	1809883a 	mov	r4,r3
 4005158:	100b883a 	mov	r5,r2
 400515c:	40002000 	call	4000200 <IsPtInRect>
 4005160:	10006226 	beq	r2,zero,40052ec <GUI+0x4cc>
                    }
                }else{
                    printf("invalid pt1(%d,%d) pre(%d,%d)\r\n", Pt1.x, Pt1.y, LastPt1.x, LastPt1.y);
                }
#else
                vid_draw_circle(Pt1.x, Pt1.y, nDotSize, ColorPen0, DO_FILL, pReader);
 4005164:	e0ffee17 	ldw	r3,-72(fp)
 4005168:	e0bfef17 	ldw	r2,-68(fp)
 400516c:	01000044 	movi	r4,1
 4005170:	d9000015 	stw	r4,0(sp)
 4005174:	e13fa817 	ldw	r4,-352(fp)
 4005178:	d9000115 	stw	r4,4(sp)
 400517c:	1809883a 	mov	r4,r3
 4005180:	100b883a 	mov	r5,r2
 4005184:	e1bfa717 	ldw	r6,-356(fp)
 4005188:	e1ffa117 	ldw	r7,-380(fp)
 400518c:	4001e9c0 	call	4001e9c <vid_draw_circle>
                if (TouchNum >= 2 && IsPtInRect(&Pt2, &rcTouch))
 4005190:	e0bffa43 	ldbu	r2,-23(fp)
 4005194:	10803fcc 	andi	r2,r2,255
 4005198:	108000b0 	cmpltui	r2,r2,2
 400519c:	1000111e 	bne	r2,zero,40051e4 <GUI+0x3c4>
 40051a0:	e0fff004 	addi	r3,fp,-64
 40051a4:	e0bffb04 	addi	r2,fp,-20
 40051a8:	1809883a 	mov	r4,r3
 40051ac:	100b883a 	mov	r5,r2
 40051b0:	40002000 	call	4000200 <IsPtInRect>
 40051b4:	10000b26 	beq	r2,zero,40051e4 <GUI+0x3c4>
                    vid_draw_circle(Pt2.x, Pt2.y, nDotSize, ColorPen1, DO_FILL, pReader);
 40051b8:	e0fff017 	ldw	r3,-64(fp)
 40051bc:	e0bff117 	ldw	r2,-60(fp)
 40051c0:	01000044 	movi	r4,1
 40051c4:	d9000015 	stw	r4,0(sp)
 40051c8:	e13fa817 	ldw	r4,-352(fp)
 40051cc:	d9000115 	stw	r4,4(sp)
 40051d0:	1809883a 	mov	r4,r3
 40051d4:	100b883a 	mov	r5,r2
 40051d8:	e1bfa717 	ldw	r6,-356(fp)
 40051dc:	e1ffa217 	ldw	r7,-376(fp)
 40051e0:	4001e9c0 	call	4001e9c <vid_draw_circle>
                if (TouchNum >= 3 && IsPtInRect(&Pt3, &rcTouch))
 40051e4:	e0bffa43 	ldbu	r2,-23(fp)
 40051e8:	10803fcc 	andi	r2,r2,255
 40051ec:	108000f0 	cmpltui	r2,r2,3
 40051f0:	1000111e 	bne	r2,zero,4005238 <GUI+0x418>
 40051f4:	e0fff204 	addi	r3,fp,-56
 40051f8:	e0bffb04 	addi	r2,fp,-20
 40051fc:	1809883a 	mov	r4,r3
 4005200:	100b883a 	mov	r5,r2
 4005204:	40002000 	call	4000200 <IsPtInRect>
 4005208:	10000b26 	beq	r2,zero,4005238 <GUI+0x418>
                    vid_draw_circle(Pt3.x, Pt3.y, nDotSize, ColorPen2, DO_FILL, pReader);
 400520c:	e0fff217 	ldw	r3,-56(fp)
 4005210:	e0bff317 	ldw	r2,-52(fp)
 4005214:	01000044 	movi	r4,1
 4005218:	d9000015 	stw	r4,0(sp)
 400521c:	e13fa817 	ldw	r4,-352(fp)
 4005220:	d9000115 	stw	r4,4(sp)
 4005224:	1809883a 	mov	r4,r3
 4005228:	100b883a 	mov	r5,r2
 400522c:	e1bfa717 	ldw	r6,-356(fp)
 4005230:	e1ffa317 	ldw	r7,-372(fp)
 4005234:	4001e9c0 	call	4001e9c <vid_draw_circle>
                if (TouchNum >= 4 && IsPtInRect(&Pt4, &rcTouch))
 4005238:	e0bffa43 	ldbu	r2,-23(fp)
 400523c:	10803fcc 	andi	r2,r2,255
 4005240:	10800130 	cmpltui	r2,r2,4
 4005244:	1000111e 	bne	r2,zero,400528c <GUI+0x46c>
 4005248:	e0fff404 	addi	r3,fp,-48
 400524c:	e0bffb04 	addi	r2,fp,-20
 4005250:	1809883a 	mov	r4,r3
 4005254:	100b883a 	mov	r5,r2
 4005258:	40002000 	call	4000200 <IsPtInRect>
 400525c:	10000b26 	beq	r2,zero,400528c <GUI+0x46c>
                    vid_draw_circle(Pt4.x, Pt4.y, nDotSize, ColorPen3, DO_FILL, pReader);
 4005260:	e0fff417 	ldw	r3,-48(fp)
 4005264:	e0bff517 	ldw	r2,-44(fp)
 4005268:	01000044 	movi	r4,1
 400526c:	d9000015 	stw	r4,0(sp)
 4005270:	e13fa817 	ldw	r4,-352(fp)
 4005274:	d9000115 	stw	r4,4(sp)
 4005278:	1809883a 	mov	r4,r3
 400527c:	100b883a 	mov	r5,r2
 4005280:	e1bfa717 	ldw	r6,-356(fp)
 4005284:	e1ffa417 	ldw	r7,-368(fp)
 4005288:	4001e9c0 	call	4001e9c <vid_draw_circle>
                if (TouchNum >= 5 && IsPtInRect(&Pt5, &rcTouch))
 400528c:	e0bffa43 	ldbu	r2,-23(fp)
 4005290:	10803fcc 	andi	r2,r2,255
 4005294:	10800170 	cmpltui	r2,r2,5
 4005298:	1000111e 	bne	r2,zero,40052e0 <GUI+0x4c0>
 400529c:	e0fff604 	addi	r3,fp,-40
 40052a0:	e0bffb04 	addi	r2,fp,-20
 40052a4:	1809883a 	mov	r4,r3
 40052a8:	100b883a 	mov	r5,r2
 40052ac:	40002000 	call	4000200 <IsPtInRect>
 40052b0:	10000b26 	beq	r2,zero,40052e0 <GUI+0x4c0>
                     vid_draw_circle(Pt5.x, Pt5.y, nDotSize, ColorPen4, DO_FILL, pReader);
 40052b4:	e0fff617 	ldw	r3,-40(fp)
 40052b8:	e0bff717 	ldw	r2,-36(fp)
 40052bc:	01000044 	movi	r4,1
 40052c0:	d9000015 	stw	r4,0(sp)
 40052c4:	e13fa817 	ldw	r4,-352(fp)
 40052c8:	d9000115 	stw	r4,4(sp)
 40052cc:	1809883a 	mov	r4,r3
 40052d0:	100b883a 	mov	r5,r2
 40052d4:	e1bfa717 	ldw	r6,-356(fp)
 40052d8:	e1ffa517 	ldw	r7,-364(fp)
 40052dc:	4001e9c0 	call	4001e9c <vid_draw_circle>
#endif
//            }else if (Event == MTC_ST_DOUBLECLICK || (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR)){
                VIPFR_ActiveDrawFrame(pReader);
 40052e0:	e13fa817 	ldw	r4,-352(fp)
 40052e4:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
 40052e8:	0000f906 	br	40056d0 <GUI+0x8b0>
            }else if (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR){
 40052ec:	e0bffa43 	ldbu	r2,-23(fp)
 40052f0:	10803fcc 	andi	r2,r2,255
 40052f4:	10800058 	cmpnei	r2,r2,1
 40052f8:	1000101e 	bne	r2,zero,400533c <GUI+0x51c>
 40052fc:	e0ffae04 	addi	r3,fp,-328
 4005300:	e0bfee04 	addi	r2,fp,-72
 4005304:	1809883a 	mov	r4,r3
 4005308:	100b883a 	mov	r5,r2
 400530c:	40043440 	call	4004344 <GUI_CheckButton>
 4005310:	10800058 	cmpnei	r2,r2,1
 4005314:	1000091e 	bne	r2,zero,400533c <GUI+0x51c>
                GUI_ClearPaintArea(pReader, &DeskInfo);
 4005318:	e0bfae04 	addi	r2,fp,-328
 400531c:	e13fa817 	ldw	r4,-352(fp)
 4005320:	100b883a 	mov	r5,r2
 4005324:	4004d5c0 	call	4004d5c <GUI_ClearPaintArea>
                //vid_clean_screen(pReader, BLACK_24);
                //GUI_DeskDraw(pReader, &DeskInfo);
                VIPFR_ActiveDrawFrame(pReader);
 4005328:	e13fa817 	ldw	r4,-352(fp)
 400532c:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
                MTC2_ClearEvent(pTouch);
 4005330:	e13fff17 	ldw	r4,-4(fp)
 4005334:	40085140 	call	4008514 <MTC2_ClearEvent>
 4005338:	0000e506 	br	40056d0 <GUI+0x8b0>
            }else if (TouchNum >= 1){
 400533c:	e0bffa43 	ldbu	r2,-23(fp)
 4005340:	10803fcc 	andi	r2,r2,255
 4005344:	103f1e26 	beq	r2,zero,4004fc0 <__reset+0xfb003fc0>
                ButtonId = GUI_CheckButton(&DeskInfo, &Pt1);
 4005348:	e0ffae04 	addi	r3,fp,-328
 400534c:	e0bfee04 	addi	r2,fp,-72
 4005350:	1809883a 	mov	r4,r3
 4005354:	100b883a 	mov	r5,r2
 4005358:	40043440 	call	4004344 <GUI_CheckButton>
 400535c:	e0bfa915 	stw	r2,-348(fp)
                UpdatePalette = FALSE;
 4005360:	e03fa615 	stw	zero,-360(fp)
                switch(TouchNum)
 4005364:	e0bffa43 	ldbu	r2,-23(fp)
 4005368:	10803fcc 	andi	r2,r2,255
 400536c:	10c001a8 	cmpgeui	r3,r2,6
 4005370:	18009c1e 	bne	r3,zero,40055e4 <GUI+0x7c4>
 4005374:	1085883a 	add	r2,r2,r2
 4005378:	1087883a 	add	r3,r2,r2
 400537c:	00810034 	movhi	r2,1024
 4005380:	1094e404 	addi	r2,r2,21392
 4005384:	1885883a 	add	r2,r3,r2
 4005388:	10800017 	ldw	r2,0(r2)
 400538c:	1000683a 	jmp	r2
 4005390:	040055e4 	muli	r16,zero,343
 4005394:	04005568 	cmpgeui	r16,zero,341
 4005398:	040054f8 	rdprs	r16,zero,339
 400539c:	04005488 	cmpgei	r16,zero,338
 40053a0:	04005418 	cmpnei	r16,zero,336
 40053a4:	040053a8 	cmpgeui	r16,zero,334
                {
                	case 5:
					{
						ButtonId5 = GUI_CheckButton(&DeskInfo, &Pt5);
 40053a8:	e0ffae04 	addi	r3,fp,-328
 40053ac:	e0bff604 	addi	r2,fp,-40
 40053b0:	1809883a 	mov	r4,r3
 40053b4:	100b883a 	mov	r5,r2
 40053b8:	40043440 	call	4004344 <GUI_CheckButton>
 40053bc:	e0bfaa15 	stw	r2,-344(fp)
						if(ButtonId5 != BTN_NONE && ButtonId5 != BTN_CLEAR && ButtonId5 != BTN_GESTRUE &&ButtonId5 != DeskInfo.Paint0_Index  &&  ButtonId5 != DeskInfo.Paint1_Index&&  ButtonId5 != DeskInfo.Paint2_Index && ButtonId5 != DeskInfo.Paint3_Index)
 40053c0:	e0bfaa17 	ldw	r2,-344(fp)
 40053c4:	108002a0 	cmpeqi	r2,r2,10
 40053c8:	1000131e 	bne	r2,zero,4005418 <GUI+0x5f8>
 40053cc:	e0bfaa17 	ldw	r2,-344(fp)
 40053d0:	10800060 	cmpeqi	r2,r2,1
 40053d4:	1000101e 	bne	r2,zero,4005418 <GUI+0x5f8>
 40053d8:	e0bfaa17 	ldw	r2,-344(fp)
 40053dc:	10000e26 	beq	r2,zero,4005418 <GUI+0x5f8>
 40053e0:	e0ffae17 	ldw	r3,-328(fp)
 40053e4:	e0bfaa17 	ldw	r2,-344(fp)
 40053e8:	18800b26 	beq	r3,r2,4005418 <GUI+0x5f8>
 40053ec:	e0ffaf17 	ldw	r3,-324(fp)
 40053f0:	e0bfaa17 	ldw	r2,-344(fp)
 40053f4:	18800826 	beq	r3,r2,4005418 <GUI+0x5f8>
 40053f8:	e0ffb017 	ldw	r3,-320(fp)
 40053fc:	e0bfaa17 	ldw	r2,-344(fp)
 4005400:	18800526 	beq	r3,r2,4005418 <GUI+0x5f8>
 4005404:	e0ffb117 	ldw	r3,-316(fp)
 4005408:	e0bfaa17 	ldw	r2,-344(fp)
 400540c:	18800226 	beq	r3,r2,4005418 <GUI+0x5f8>
						DeskInfo.Paint4_Index = ButtonId5;
 4005410:	e0bfaa17 	ldw	r2,-344(fp)
 4005414:	e0bfb215 	stw	r2,-312(fp)
					}
                	case 4:
                	{
                		ButtonId4 = GUI_CheckButton(&DeskInfo, &Pt4);
 4005418:	e0ffae04 	addi	r3,fp,-328
 400541c:	e0bff404 	addi	r2,fp,-48
 4005420:	1809883a 	mov	r4,r3
 4005424:	100b883a 	mov	r5,r2
 4005428:	40043440 	call	4004344 <GUI_CheckButton>
 400542c:	e0bfab15 	stw	r2,-340(fp)
                		if(ButtonId4 != BTN_NONE && ButtonId4 != BTN_CLEAR && ButtonId4 != BTN_GESTRUE &&ButtonId4 != DeskInfo.Paint0_Index  &&  ButtonId4 != DeskInfo.Paint1_Index&&  ButtonId4 != DeskInfo.Paint2_Index && ButtonId4 != DeskInfo.Paint4_Index)
 4005430:	e0bfab17 	ldw	r2,-340(fp)
 4005434:	108002a0 	cmpeqi	r2,r2,10
 4005438:	1000131e 	bne	r2,zero,4005488 <GUI+0x668>
 400543c:	e0bfab17 	ldw	r2,-340(fp)
 4005440:	10800060 	cmpeqi	r2,r2,1
 4005444:	1000101e 	bne	r2,zero,4005488 <GUI+0x668>
 4005448:	e0bfab17 	ldw	r2,-340(fp)
 400544c:	10000e26 	beq	r2,zero,4005488 <GUI+0x668>
 4005450:	e0ffae17 	ldw	r3,-328(fp)
 4005454:	e0bfab17 	ldw	r2,-340(fp)
 4005458:	18800b26 	beq	r3,r2,4005488 <GUI+0x668>
 400545c:	e0ffaf17 	ldw	r3,-324(fp)
 4005460:	e0bfab17 	ldw	r2,-340(fp)
 4005464:	18800826 	beq	r3,r2,4005488 <GUI+0x668>
 4005468:	e0ffb017 	ldw	r3,-320(fp)
 400546c:	e0bfab17 	ldw	r2,-340(fp)
 4005470:	18800526 	beq	r3,r2,4005488 <GUI+0x668>
 4005474:	e0ffb217 	ldw	r3,-312(fp)
 4005478:	e0bfab17 	ldw	r2,-340(fp)
 400547c:	18800226 	beq	r3,r2,4005488 <GUI+0x668>
                		DeskInfo.Paint3_Index = ButtonId4;
 4005480:	e0bfab17 	ldw	r2,-340(fp)
 4005484:	e0bfb115 	stw	r2,-316(fp)
                	}
                	case 3:
                	{
                		ButtonId3 = GUI_CheckButton(&DeskInfo, &Pt3);
 4005488:	e0ffae04 	addi	r3,fp,-328
 400548c:	e0bff204 	addi	r2,fp,-56
 4005490:	1809883a 	mov	r4,r3
 4005494:	100b883a 	mov	r5,r2
 4005498:	40043440 	call	4004344 <GUI_CheckButton>
 400549c:	e0bfac15 	stw	r2,-336(fp)
                		 if(ButtonId3 != BTN_NONE && ButtonId3 != BTN_CLEAR && ButtonId3 != BTN_GESTRUE && ButtonId3 != DeskInfo.Paint4_Index && ButtonId3 != DeskInfo.Paint3_Index &&ButtonId3 != DeskInfo.Paint0_Index  &&  ButtonId3 != DeskInfo.Paint1_Index)
 40054a0:	e0bfac17 	ldw	r2,-336(fp)
 40054a4:	108002a0 	cmpeqi	r2,r2,10
 40054a8:	1000131e 	bne	r2,zero,40054f8 <GUI+0x6d8>
 40054ac:	e0bfac17 	ldw	r2,-336(fp)
 40054b0:	10800060 	cmpeqi	r2,r2,1
 40054b4:	1000101e 	bne	r2,zero,40054f8 <GUI+0x6d8>
 40054b8:	e0bfac17 	ldw	r2,-336(fp)
 40054bc:	10000e26 	beq	r2,zero,40054f8 <GUI+0x6d8>
 40054c0:	e0ffb217 	ldw	r3,-312(fp)
 40054c4:	e0bfac17 	ldw	r2,-336(fp)
 40054c8:	18800b26 	beq	r3,r2,40054f8 <GUI+0x6d8>
 40054cc:	e0ffb117 	ldw	r3,-316(fp)
 40054d0:	e0bfac17 	ldw	r2,-336(fp)
 40054d4:	18800826 	beq	r3,r2,40054f8 <GUI+0x6d8>
 40054d8:	e0ffae17 	ldw	r3,-328(fp)
 40054dc:	e0bfac17 	ldw	r2,-336(fp)
 40054e0:	18800526 	beq	r3,r2,40054f8 <GUI+0x6d8>
 40054e4:	e0ffaf17 	ldw	r3,-324(fp)
 40054e8:	e0bfac17 	ldw	r2,-336(fp)
 40054ec:	18800226 	beq	r3,r2,40054f8 <GUI+0x6d8>
                		DeskInfo.Paint2_Index = ButtonId3;
 40054f0:	e0bfac17 	ldw	r2,-336(fp)
 40054f4:	e0bfb015 	stw	r2,-320(fp)
                	}
                	case 2:
					{
						ButtonId2 = GUI_CheckButton(&DeskInfo, &Pt2);
 40054f8:	e0ffae04 	addi	r3,fp,-328
 40054fc:	e0bff004 	addi	r2,fp,-64
 4005500:	1809883a 	mov	r4,r3
 4005504:	100b883a 	mov	r5,r2
 4005508:	40043440 	call	4004344 <GUI_CheckButton>
 400550c:	e0bfad15 	stw	r2,-332(fp)
					   if(ButtonId2 != BTN_NONE && ButtonId2 != BTN_CLEAR && ButtonId2 != BTN_GESTRUE && ButtonId2 != DeskInfo.Paint4_Index && ButtonId2 != DeskInfo.Paint3_Index && ButtonId2 != DeskInfo.Paint2_Index &&ButtonId2 != DeskInfo.Paint0_Index )
 4005510:	e0bfad17 	ldw	r2,-332(fp)
 4005514:	108002a0 	cmpeqi	r2,r2,10
 4005518:	1000131e 	bne	r2,zero,4005568 <GUI+0x748>
 400551c:	e0bfad17 	ldw	r2,-332(fp)
 4005520:	10800060 	cmpeqi	r2,r2,1
 4005524:	1000101e 	bne	r2,zero,4005568 <GUI+0x748>
 4005528:	e0bfad17 	ldw	r2,-332(fp)
 400552c:	10000e26 	beq	r2,zero,4005568 <GUI+0x748>
 4005530:	e0ffb217 	ldw	r3,-312(fp)
 4005534:	e0bfad17 	ldw	r2,-332(fp)
 4005538:	18800b26 	beq	r3,r2,4005568 <GUI+0x748>
 400553c:	e0ffb117 	ldw	r3,-316(fp)
 4005540:	e0bfad17 	ldw	r2,-332(fp)
 4005544:	18800826 	beq	r3,r2,4005568 <GUI+0x748>
 4005548:	e0ffb017 	ldw	r3,-320(fp)
 400554c:	e0bfad17 	ldw	r2,-332(fp)
 4005550:	18800526 	beq	r3,r2,4005568 <GUI+0x748>
 4005554:	e0ffae17 	ldw	r3,-328(fp)
 4005558:	e0bfad17 	ldw	r2,-332(fp)
 400555c:	18800226 	beq	r3,r2,4005568 <GUI+0x748>
						DeskInfo.Paint1_Index = ButtonId2;
 4005560:	e0bfad17 	ldw	r2,-332(fp)
 4005564:	e0bfaf15 	stw	r2,-324(fp)
					}
                	case 1:
					{
						ButtonId = GUI_CheckButton(&DeskInfo, &Pt1);
 4005568:	e0ffae04 	addi	r3,fp,-328
 400556c:	e0bfee04 	addi	r2,fp,-72
 4005570:	1809883a 	mov	r4,r3
 4005574:	100b883a 	mov	r5,r2
 4005578:	40043440 	call	4004344 <GUI_CheckButton>
 400557c:	e0bfa915 	stw	r2,-348(fp)
						if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR && ButtonId != BTN_GESTRUE && ButtonId != DeskInfo.Paint4_Index && ButtonId != DeskInfo.Paint3_Index && ButtonId != DeskInfo.Paint2_Index && ButtonId != DeskInfo.Paint1_Index)
 4005580:	e0bfa917 	ldw	r2,-348(fp)
 4005584:	108002a0 	cmpeqi	r2,r2,10
 4005588:	1000181e 	bne	r2,zero,40055ec <GUI+0x7cc>
 400558c:	e0bfa917 	ldw	r2,-348(fp)
 4005590:	10800060 	cmpeqi	r2,r2,1
 4005594:	1000151e 	bne	r2,zero,40055ec <GUI+0x7cc>
 4005598:	e0bfa917 	ldw	r2,-348(fp)
 400559c:	10001326 	beq	r2,zero,40055ec <GUI+0x7cc>
 40055a0:	e0ffb217 	ldw	r3,-312(fp)
 40055a4:	e0bfa917 	ldw	r2,-348(fp)
 40055a8:	18801026 	beq	r3,r2,40055ec <GUI+0x7cc>
 40055ac:	e0ffb117 	ldw	r3,-316(fp)
 40055b0:	e0bfa917 	ldw	r2,-348(fp)
 40055b4:	18800d26 	beq	r3,r2,40055ec <GUI+0x7cc>
 40055b8:	e0ffb017 	ldw	r3,-320(fp)
 40055bc:	e0bfa917 	ldw	r2,-348(fp)
 40055c0:	18800a26 	beq	r3,r2,40055ec <GUI+0x7cc>
 40055c4:	e0ffaf17 	ldw	r3,-324(fp)
 40055c8:	e0bfa917 	ldw	r2,-348(fp)
 40055cc:	18800726 	beq	r3,r2,40055ec <GUI+0x7cc>
						{
						       UpdatePalette = TRUE;
 40055d0:	00800044 	movi	r2,1
 40055d4:	e0bfa615 	stw	r2,-360(fp)
						       DeskInfo.Paint0_Index = ButtonId;
 40055d8:	e0bfa917 	ldw	r2,-348(fp)
 40055dc:	e0bfae15 	stw	r2,-328(fp)
						}
					}break;
 40055e0:	00000206 	br	40055ec <GUI+0x7cc>
                	default:break;
 40055e4:	0001883a 	nop
 40055e8:	00000106 	br	40055f0 <GUI+0x7d0>
						if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR && ButtonId != BTN_GESTRUE && ButtonId != DeskInfo.Paint4_Index && ButtonId != DeskInfo.Paint3_Index && ButtonId != DeskInfo.Paint2_Index && ButtonId != DeskInfo.Paint1_Index)
						{
						       UpdatePalette = TRUE;
						       DeskInfo.Paint0_Index = ButtonId;
						}
					}break;
 40055ec:	0001883a 	nop
                	default:break;
                }
				if (UpdatePalette){
 40055f0:	e0bfa617 	ldw	r2,-360(fp)
 40055f4:	103e7226 	beq	r2,zero,4004fc0 <__reset+0xfb003fc0>
					ColorPen0 = DeskInfo.szPalette[DeskInfo.Paint0_Index].color;
 40055f8:	e0bfae17 	ldw	r2,-328(fp)
 40055fc:	1009883a 	mov	r4,r2
 4005600:	01400504 	movi	r5,20
 4005604:	4009dd80 	call	4009dd8 <__mulsi3>
 4005608:	e0ffa004 	addi	r3,fp,-384
 400560c:	1885883a 	add	r2,r3,r2
 4005610:	10801b04 	addi	r2,r2,108
 4005614:	10800017 	ldw	r2,0(r2)
 4005618:	e0bfa115 	stw	r2,-380(fp)
					ColorPen1 = DeskInfo.szPalette[DeskInfo.Paint1_Index].color;
 400561c:	e0bfaf17 	ldw	r2,-324(fp)
 4005620:	1009883a 	mov	r4,r2
 4005624:	01400504 	movi	r5,20
 4005628:	4009dd80 	call	4009dd8 <__mulsi3>
 400562c:	e0ffa004 	addi	r3,fp,-384
 4005630:	1885883a 	add	r2,r3,r2
 4005634:	10801b04 	addi	r2,r2,108
 4005638:	10800017 	ldw	r2,0(r2)
 400563c:	e0bfa215 	stw	r2,-376(fp)
					ColorPen2 = DeskInfo.szPalette[DeskInfo.Paint2_Index].color;
 4005640:	e0bfb017 	ldw	r2,-320(fp)
 4005644:	1009883a 	mov	r4,r2
 4005648:	01400504 	movi	r5,20
 400564c:	4009dd80 	call	4009dd8 <__mulsi3>
 4005650:	e0ffa004 	addi	r3,fp,-384
 4005654:	1885883a 	add	r2,r3,r2
 4005658:	10801b04 	addi	r2,r2,108
 400565c:	10800017 	ldw	r2,0(r2)
 4005660:	e0bfa315 	stw	r2,-372(fp)
					ColorPen3 = DeskInfo.szPalette[DeskInfo.Paint3_Index].color;
 4005664:	e0bfb117 	ldw	r2,-316(fp)
 4005668:	1009883a 	mov	r4,r2
 400566c:	01400504 	movi	r5,20
 4005670:	4009dd80 	call	4009dd8 <__mulsi3>
 4005674:	e0ffa004 	addi	r3,fp,-384
 4005678:	1885883a 	add	r2,r3,r2
 400567c:	10801b04 	addi	r2,r2,108
 4005680:	10800017 	ldw	r2,0(r2)
 4005684:	e0bfa415 	stw	r2,-368(fp)
					ColorPen4 = DeskInfo.szPalette[DeskInfo.Paint4_Index].color;
 4005688:	e0bfb217 	ldw	r2,-312(fp)
 400568c:	1009883a 	mov	r4,r2
 4005690:	01400504 	movi	r5,20
 4005694:	4009dd80 	call	4009dd8 <__mulsi3>
 4005698:	e0ffa004 	addi	r3,fp,-384
 400569c:	1885883a 	add	r2,r3,r2
 40056a0:	10801b04 	addi	r2,r2,108
 40056a4:	10800017 	ldw	r2,0(r2)
 40056a8:	e0bfa515 	stw	r2,-364(fp)
					GUI_DeskDraw(pReader, &DeskInfo);
 40056ac:	e0bfae04 	addi	r2,fp,-328
 40056b0:	e13fa817 	ldw	r4,-352(fp)
 40056b4:	100b883a 	mov	r5,r2
 40056b8:	40043d80 	call	40043d8 <GUI_DeskDraw>
					VIPFR_ActiveDrawFrame(pReader);
 40056bc:	e13fa817 	ldw	r4,-352(fp)
 40056c0:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
					MTC2_ClearEvent(pTouch);
 40056c4:	e13fff17 	ldw	r4,-4(fp)
 40056c8:	40085140 	call	4008514 <MTC2_ClearEvent>
				}
                }
        }
    }
 40056cc:	003e3c06 	br	4004fc0 <__reset+0xfb003fc0>
 40056d0:	003e3b06 	br	4004fc0 <__reset+0xfb003fc0>

040056d4 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(VIP_FRAME_READER *pReader, char *pText){
 40056d4:	defff904 	addi	sp,sp,-28
 40056d8:	dfc00615 	stw	ra,24(sp)
 40056dc:	df000515 	stw	fp,20(sp)
 40056e0:	df000504 	addi	fp,sp,20
 40056e4:	e13ffe15 	stw	r4,-8(fp)
 40056e8:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pReader, pText);
 40056ec:	d0e01417 	ldw	r3,-32688(gp)
 40056f0:	d0a00117 	ldw	r2,-32764(gp)
 40056f4:	010101f4 	movhi	r4,1031
 40056f8:	2115c504 	addi	r4,r4,22292
 40056fc:	d9000015 	stw	r4,0(sp)
 4005700:	e13ffe17 	ldw	r4,-8(fp)
 4005704:	d9000115 	stw	r4,4(sp)
 4005708:	e13fff17 	ldw	r4,-4(fp)
 400570c:	d9000215 	stw	r4,8(sp)
 4005710:	1809883a 	mov	r4,r3
 4005714:	100b883a 	mov	r5,r2
 4005718:	01803fc4 	movi	r6,255
 400571c:	000f883a 	mov	r7,zero
 4005720:	40034c80 	call	40034c8 <vid_print_string_alpha>
    VIPFR_ActiveDrawFrame(pReader);
 4005724:	e13ffe17 	ldw	r4,-8(fp)
 4005728:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
}
 400572c:	e037883a 	mov	sp,fp
 4005730:	dfc00117 	ldw	ra,4(sp)
 4005734:	df000017 	ldw	fp,0(sp)
 4005738:	dec00204 	addi	sp,sp,8
 400573c:	f800283a 	ret

04005740 <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(VIP_FRAME_READER *pReader, int X, int Y, int color){
 4005740:	defff804 	addi	sp,sp,-32
 4005744:	dfc00715 	stw	ra,28(sp)
 4005748:	df000615 	stw	fp,24(sp)
 400574c:	df000604 	addi	fp,sp,24
 4005750:	e13ffc15 	stw	r4,-16(fp)
 4005754:	e17ffd15 	stw	r5,-12(fp)
 4005758:	e1bffe15 	stw	r6,-8(fp)
 400575c:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pReader);
 4005760:	00800044 	movi	r2,1
 4005764:	d8800015 	stw	r2,0(sp)
 4005768:	e0bffc17 	ldw	r2,-16(fp)
 400576c:	d8800115 	stw	r2,4(sp)
 4005770:	e13ffd17 	ldw	r4,-12(fp)
 4005774:	e17ffe17 	ldw	r5,-8(fp)
 4005778:	01800284 	movi	r6,10
 400577c:	e1ffff17 	ldw	r7,-4(fp)
 4005780:	4001e9c0 	call	4001e9c <vid_draw_circle>
    VIPFR_ActiveDrawFrame(pReader);    
 4005784:	e13ffc17 	ldw	r4,-16(fp)
 4005788:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
}
 400578c:	e037883a 	mov	sp,fp
 4005790:	dfc00117 	ldw	ra,4(sp)
 4005794:	df000017 	ldw	fp,0(sp)
 4005798:	dec00204 	addi	sp,sp,8
 400579c:	f800283a 	ret

040057a0 <ShowInfo>:
#define FRAME_HEIGHT 480

#define FR_FRAME_0  (SDRAM_BASE + SDRAM_SPAN/2)
#define FR_FRAME_1  (SDRAM_BASE + SDRAM_SPAN/2 + FRAME_WIDTH*FRAME_HEIGHT*4)

void ShowInfo(VIP_FRAME_READER *pReader, char *pText){
 40057a0:	defff904 	addi	sp,sp,-28
 40057a4:	dfc00615 	stw	ra,24(sp)
 40057a8:	df000515 	stw	fp,20(sp)
 40057ac:	df000504 	addi	fp,sp,20
 40057b0:	e13ffe15 	stw	r4,-8(fp)
 40057b4:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pReader, pText);    
 40057b8:	008101f4 	movhi	r2,1031
 40057bc:	1095c504 	addi	r2,r2,22292
 40057c0:	d8800015 	stw	r2,0(sp)
 40057c4:	e0bffe17 	ldw	r2,-8(fp)
 40057c8:	d8800115 	stw	r2,4(sp)
 40057cc:	e0bfff17 	ldw	r2,-4(fp)
 40057d0:	d8800215 	stw	r2,8(sp)
 40057d4:	01000044 	movi	r4,1
 40057d8:	01400044 	movi	r5,1
 40057dc:	01804034 	movhi	r6,256
 40057e0:	31bfffc4 	addi	r6,r6,-1
 40057e4:	000f883a 	mov	r7,zero
 40057e8:	40034c80 	call	40034c8 <vid_print_string_alpha>
}
 40057ec:	e037883a 	mov	sp,fp
 40057f0:	dfc00117 	ldw	ra,4(sp)
 40057f4:	df000017 	ldw	fp,0(sp)
 40057f8:	dec00204 	addi	sp,sp,8
 40057fc:	f800283a 	ret

04005800 <VPG_XLine>:

void VPG_XLine(VIP_FRAME_READER *pReader){
 4005800:	defff904 	addi	sp,sp,-28
 4005804:	dfc00615 	stw	ra,24(sp)
 4005808:	df000515 	stw	fp,20(sp)
 400580c:	df000504 	addi	fp,sp,20
 4005810:	e13fff15 	stw	r4,-4(fp)
    alt_u32 *p;
    
    p = VIPFR_GetDrawFrame(pReader);
 4005814:	e13fff17 	ldw	r4,-4(fp)
 4005818:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 400581c:	e0bffe15 	stw	r2,-8(fp)

    // erase background
     vid_clean_screen(pReader, BLACK_24);
 4005820:	e13fff17 	ldw	r4,-4(fp)
 4005824:	000b883a 	mov	r5,zero
 4005828:	40006000 	call	4000600 <vid_clean_screen>
    
    // draw line    
    vid_draw_line(0, 0, FRAME_HEIGHT-1, FRAME_HEIGHT-1, 1, WHITE_24, pReader);
 400582c:	00800044 	movi	r2,1
 4005830:	d8800015 	stw	r2,0(sp)
 4005834:	00804034 	movhi	r2,256
 4005838:	10bfffc4 	addi	r2,r2,-1
 400583c:	d8800115 	stw	r2,4(sp)
 4005840:	e0bfff17 	ldw	r2,-4(fp)
 4005844:	d8800215 	stw	r2,8(sp)
 4005848:	0009883a 	mov	r4,zero
 400584c:	000b883a 	mov	r5,zero
 4005850:	018077c4 	movi	r6,479
 4005854:	01c077c4 	movi	r7,479
 4005858:	40006600 	call	4000660 <vid_draw_line>
    vid_draw_line(FRAME_HEIGHT-1, 0, 0, FRAME_HEIGHT-1, 1, WHITE_24, pReader);
 400585c:	00800044 	movi	r2,1
 4005860:	d8800015 	stw	r2,0(sp)
 4005864:	00804034 	movhi	r2,256
 4005868:	10bfffc4 	addi	r2,r2,-1
 400586c:	d8800115 	stw	r2,4(sp)
 4005870:	e0bfff17 	ldw	r2,-4(fp)
 4005874:	d8800215 	stw	r2,8(sp)
 4005878:	010077c4 	movi	r4,479
 400587c:	000b883a 	mov	r5,zero
 4005880:	000d883a 	mov	r6,zero
 4005884:	01c077c4 	movi	r7,479
 4005888:	40006600 	call	4000660 <vid_draw_line>

    // show text
    ShowInfo(pReader, "X Line");
 400588c:	e13fff17 	ldw	r4,-4(fp)
 4005890:	014101f4 	movhi	r5,1031
 4005894:	2953e304 	addi	r5,r5,20364
 4005898:	40057a00 	call	40057a0 <ShowInfo>
    
    //    
    VIPFR_ActiveDrawFrame(pReader);        
 400589c:	e13fff17 	ldw	r4,-4(fp)
 40058a0:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
}
 40058a4:	e037883a 	mov	sp,fp
 40058a8:	dfc00117 	ldw	ra,4(sp)
 40058ac:	df000017 	ldw	fp,0(sp)
 40058b0:	dec00204 	addi	sp,sp,8
 40058b4:	f800283a 	ret

040058b8 <VPG_ColorPanel>:

void VPG_ColorPanel(VIP_FRAME_READER *pReader, alt_u32 Color){
 40058b8:	defff204 	addi	sp,sp,-56
 40058bc:	dfc00d15 	stw	ra,52(sp)
 40058c0:	df000c15 	stw	fp,48(sp)
 40058c4:	df000c04 	addi	fp,sp,48
 40058c8:	e13ffe15 	stw	r4,-8(fp)
 40058cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *p;
    int i;
    char szText[32];
    
    
    p = VIPFR_GetDrawFrame(pReader);
 40058d0:	e13ffe17 	ldw	r4,-8(fp)
 40058d4:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 40058d8:	e0bff415 	stw	r2,-48(fp)
    for(i=0;i<FRAME_HEIGHT*FRAME_WIDTH;i++)
 40058dc:	e03ff515 	stw	zero,-44(fp)
 40058e0:	00000906 	br	4005908 <VPG_ColorPanel+0x50>
        *p++ = Color;
 40058e4:	e0bff417 	ldw	r2,-48(fp)
 40058e8:	e0ffff17 	ldw	r3,-4(fp)
 40058ec:	10c00015 	stw	r3,0(r2)
 40058f0:	e0bff417 	ldw	r2,-48(fp)
 40058f4:	10800104 	addi	r2,r2,4
 40058f8:	e0bff415 	stw	r2,-48(fp)
    int i;
    char szText[32];
    
    
    p = VIPFR_GetDrawFrame(pReader);
    for(i=0;i<FRAME_HEIGHT*FRAME_WIDTH;i++)
 40058fc:	e0bff517 	ldw	r2,-44(fp)
 4005900:	10800044 	addi	r2,r2,1
 4005904:	e0bff515 	stw	r2,-44(fp)
 4005908:	e0bff517 	ldw	r2,-44(fp)
 400590c:	00c001b4 	movhi	r3,6
 4005910:	18f6ffc4 	addi	r3,r3,-9217
 4005914:	18bff30e 	bge	r3,r2,40058e4 <__reset+0xfb0048e4>
        *p++ = Color;
        
    // show text
    sprintf(szText,"Panel: %08xh", Color);
 4005918:	e0bff604 	addi	r2,fp,-40
 400591c:	1009883a 	mov	r4,r2
 4005920:	014101f4 	movhi	r5,1031
 4005924:	2953e504 	addi	r5,r5,20372
 4005928:	e1bfff17 	ldw	r6,-4(fp)
 400592c:	400aff40 	call	400aff4 <sprintf>
    ShowInfo(pReader, szText);
 4005930:	e0bff604 	addi	r2,fp,-40
 4005934:	e13ffe17 	ldw	r4,-8(fp)
 4005938:	100b883a 	mov	r5,r2
 400593c:	40057a00 	call	40057a0 <ShowInfo>
        
    VIPFR_ActiveDrawFrame(pReader);        
 4005940:	e13ffe17 	ldw	r4,-8(fp)
 4005944:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
    
}
 4005948:	e037883a 	mov	sp,fp
 400594c:	dfc00117 	ldw	ra,4(sp)
 4005950:	df000017 	ldw	fp,0(sp)
 4005954:	dec00204 	addi	sp,sp,8
 4005958:	f800283a 	ret

0400595c <VPG_Grid>:

void VPG_Grid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
 400595c:	defff004 	addi	sp,sp,-64
 4005960:	dfc00f15 	stw	ra,60(sp)
 4005964:	df000e15 	stw	fp,56(sp)
 4005968:	df000e04 	addi	fp,sp,56
 400596c:	e13ffe15 	stw	r4,-8(fp)
 4005970:	2805883a 	mov	r2,r5
 4005974:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
 4005978:	e13ffe17 	ldw	r4,-8(fp)
 400597c:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4005980:	e0bff415 	stw	r2,-48(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
 4005984:	e03ff315 	stw	zero,-52(fp)
 4005988:	00002206 	br	4005a14 <VPG_Grid+0xb8>
        for(x=0;x<FRAME_WIDTH;x++){
 400598c:	e03ff215 	stw	zero,-56(fp)
 4005990:	00001a06 	br	40059fc <VPG_Grid+0xa0>
            if (x%GridSize == 0 || y%GridSize == 0)
 4005994:	e0bfff03 	ldbu	r2,-4(fp)
 4005998:	e0fff217 	ldw	r3,-56(fp)
 400599c:	1809883a 	mov	r4,r3
 40059a0:	100b883a 	mov	r5,r2
 40059a4:	4009d6c0 	call	4009d6c <__modsi3>
 40059a8:	10000626 	beq	r2,zero,40059c4 <VPG_Grid+0x68>
 40059ac:	e0bfff03 	ldbu	r2,-4(fp)
 40059b0:	e0fff317 	ldw	r3,-52(fp)
 40059b4:	1809883a 	mov	r4,r3
 40059b8:	100b883a 	mov	r5,r2
 40059bc:	4009d6c0 	call	4009d6c <__modsi3>
 40059c0:	1000041e 	bne	r2,zero,40059d4 <VPG_Grid+0x78>
                Value32 = WHITE_24;
 40059c4:	00804034 	movhi	r2,256
 40059c8:	10bfffc4 	addi	r2,r2,-1
 40059cc:	e0bff515 	stw	r2,-44(fp)
 40059d0:	00000106 	br	40059d8 <VPG_Grid+0x7c>
            else
                Value32 = BLACK_24;
 40059d4:	e03ff515 	stw	zero,-44(fp)
            *p++ = Value32;
 40059d8:	e0bff417 	ldw	r2,-48(fp)
 40059dc:	e0fff517 	ldw	r3,-44(fp)
 40059e0:	10c00015 	stw	r3,0(r2)
 40059e4:	e0bff417 	ldw	r2,-48(fp)
 40059e8:	10800104 	addi	r2,r2,4
 40059ec:	e0bff415 	stw	r2,-48(fp)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
 40059f0:	e0bff217 	ldw	r2,-56(fp)
 40059f4:	10800044 	addi	r2,r2,1
 40059f8:	e0bff215 	stw	r2,-56(fp)
 40059fc:	e0bff217 	ldw	r2,-56(fp)
 4005a00:	1080c810 	cmplti	r2,r2,800
 4005a04:	103fe31e 	bne	r2,zero,4005994 <__reset+0xfb004994>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
 4005a08:	e0bff317 	ldw	r2,-52(fp)
 4005a0c:	10800044 	addi	r2,r2,1
 4005a10:	e0bff315 	stw	r2,-52(fp)
 4005a14:	e0bff317 	ldw	r2,-52(fp)
 4005a18:	10807810 	cmplti	r2,r2,480
 4005a1c:	103fdb1e 	bne	r2,zero,400598c <__reset+0xfb00498c>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
 4005a20:	e0bfff03 	ldbu	r2,-4(fp)
 4005a24:	e0fff604 	addi	r3,fp,-40
 4005a28:	1809883a 	mov	r4,r3
 4005a2c:	014101f4 	movhi	r5,1031
 4005a30:	2953e904 	addi	r5,r5,20388
 4005a34:	100d883a 	mov	r6,r2
 4005a38:	400aff40 	call	400aff4 <sprintf>
    ShowInfo(pReader, szText);
 4005a3c:	e0bff604 	addi	r2,fp,-40
 4005a40:	e13ffe17 	ldw	r4,-8(fp)
 4005a44:	100b883a 	mov	r5,r2
 4005a48:	40057a00 	call	40057a0 <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
 4005a4c:	e13ffe17 	ldw	r4,-8(fp)
 4005a50:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
}
 4005a54:	e037883a 	mov	sp,fp
 4005a58:	dfc00117 	ldw	ra,4(sp)
 4005a5c:	df000017 	ldw	fp,0(sp)
 4005a60:	dec00204 	addi	sp,sp,8
 4005a64:	f800283a 	ret

04005a68 <VPG_VGrid>:

void VPG_VGrid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
 4005a68:	defff004 	addi	sp,sp,-64
 4005a6c:	dfc00f15 	stw	ra,60(sp)
 4005a70:	df000e15 	stw	fp,56(sp)
 4005a74:	df000e04 	addi	fp,sp,56
 4005a78:	e13ffe15 	stw	r4,-8(fp)
 4005a7c:	2805883a 	mov	r2,r5
 4005a80:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
 4005a84:	e13ffe17 	ldw	r4,-8(fp)
 4005a88:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4005a8c:	e0bff415 	stw	r2,-48(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
 4005a90:	e03ff315 	stw	zero,-52(fp)
 4005a94:	00001c06 	br	4005b08 <VPG_VGrid+0xa0>
        for(x=0;x<FRAME_WIDTH;x++){
 4005a98:	e03ff215 	stw	zero,-56(fp)
 4005a9c:	00001406 	br	4005af0 <VPG_VGrid+0x88>
            if (x%GridSize == 0)
 4005aa0:	e0bfff03 	ldbu	r2,-4(fp)
 4005aa4:	e0fff217 	ldw	r3,-56(fp)
 4005aa8:	1809883a 	mov	r4,r3
 4005aac:	100b883a 	mov	r5,r2
 4005ab0:	4009d6c0 	call	4009d6c <__modsi3>
 4005ab4:	1000041e 	bne	r2,zero,4005ac8 <VPG_VGrid+0x60>
                Value32 = WHITE_24;
 4005ab8:	00804034 	movhi	r2,256
 4005abc:	10bfffc4 	addi	r2,r2,-1
 4005ac0:	e0bff515 	stw	r2,-44(fp)
 4005ac4:	00000106 	br	4005acc <VPG_VGrid+0x64>
            else
                Value32 = BLACK_24;
 4005ac8:	e03ff515 	stw	zero,-44(fp)
            *p++ = Value32;
 4005acc:	e0bff417 	ldw	r2,-48(fp)
 4005ad0:	e0fff517 	ldw	r3,-44(fp)
 4005ad4:	10c00015 	stw	r3,0(r2)
 4005ad8:	e0bff417 	ldw	r2,-48(fp)
 4005adc:	10800104 	addi	r2,r2,4
 4005ae0:	e0bff415 	stw	r2,-48(fp)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
 4005ae4:	e0bff217 	ldw	r2,-56(fp)
 4005ae8:	10800044 	addi	r2,r2,1
 4005aec:	e0bff215 	stw	r2,-56(fp)
 4005af0:	e0bff217 	ldw	r2,-56(fp)
 4005af4:	1080c810 	cmplti	r2,r2,800
 4005af8:	103fe91e 	bne	r2,zero,4005aa0 <__reset+0xfb004aa0>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
 4005afc:	e0bff317 	ldw	r2,-52(fp)
 4005b00:	10800044 	addi	r2,r2,1
 4005b04:	e0bff315 	stw	r2,-52(fp)
 4005b08:	e0bff317 	ldw	r2,-52(fp)
 4005b0c:	10807810 	cmplti	r2,r2,480
 4005b10:	103fe11e 	bne	r2,zero,4005a98 <__reset+0xfb004a98>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
 4005b14:	e0bfff03 	ldbu	r2,-4(fp)
 4005b18:	e0fff604 	addi	r3,fp,-40
 4005b1c:	1809883a 	mov	r4,r3
 4005b20:	014101f4 	movhi	r5,1031
 4005b24:	2953eb04 	addi	r5,r5,20396
 4005b28:	100d883a 	mov	r6,r2
 4005b2c:	400aff40 	call	400aff4 <sprintf>
    ShowInfo(pReader, szText);
 4005b30:	e0bff604 	addi	r2,fp,-40
 4005b34:	e13ffe17 	ldw	r4,-8(fp)
 4005b38:	100b883a 	mov	r5,r2
 4005b3c:	40057a00 	call	40057a0 <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
 4005b40:	e13ffe17 	ldw	r4,-8(fp)
 4005b44:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
}
 4005b48:	e037883a 	mov	sp,fp
 4005b4c:	dfc00117 	ldw	ra,4(sp)
 4005b50:	df000017 	ldw	fp,0(sp)
 4005b54:	dec00204 	addi	sp,sp,8
 4005b58:	f800283a 	ret

04005b5c <VPG_HGrid>:

void VPG_HGrid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
 4005b5c:	defff004 	addi	sp,sp,-64
 4005b60:	dfc00f15 	stw	ra,60(sp)
 4005b64:	df000e15 	stw	fp,56(sp)
 4005b68:	df000e04 	addi	fp,sp,56
 4005b6c:	e13ffe15 	stw	r4,-8(fp)
 4005b70:	2805883a 	mov	r2,r5
 4005b74:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
 4005b78:	e13ffe17 	ldw	r4,-8(fp)
 4005b7c:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4005b80:	e0bff415 	stw	r2,-48(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
 4005b84:	e03ff315 	stw	zero,-52(fp)
 4005b88:	00001c06 	br	4005bfc <VPG_HGrid+0xa0>
        for(x=0;x<FRAME_WIDTH;x++){
 4005b8c:	e03ff215 	stw	zero,-56(fp)
 4005b90:	00001406 	br	4005be4 <VPG_HGrid+0x88>
            if (y%GridSize == 0)
 4005b94:	e0bfff03 	ldbu	r2,-4(fp)
 4005b98:	e0fff317 	ldw	r3,-52(fp)
 4005b9c:	1809883a 	mov	r4,r3
 4005ba0:	100b883a 	mov	r5,r2
 4005ba4:	4009d6c0 	call	4009d6c <__modsi3>
 4005ba8:	1000041e 	bne	r2,zero,4005bbc <VPG_HGrid+0x60>
                Value32 = WHITE_24;
 4005bac:	00804034 	movhi	r2,256
 4005bb0:	10bfffc4 	addi	r2,r2,-1
 4005bb4:	e0bff515 	stw	r2,-44(fp)
 4005bb8:	00000106 	br	4005bc0 <VPG_HGrid+0x64>
            else
                Value32 = BLACK_24;
 4005bbc:	e03ff515 	stw	zero,-44(fp)
            *p++ = Value32;
 4005bc0:	e0bff417 	ldw	r2,-48(fp)
 4005bc4:	e0fff517 	ldw	r3,-44(fp)
 4005bc8:	10c00015 	stw	r3,0(r2)
 4005bcc:	e0bff417 	ldw	r2,-48(fp)
 4005bd0:	10800104 	addi	r2,r2,4
 4005bd4:	e0bff415 	stw	r2,-48(fp)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
 4005bd8:	e0bff217 	ldw	r2,-56(fp)
 4005bdc:	10800044 	addi	r2,r2,1
 4005be0:	e0bff215 	stw	r2,-56(fp)
 4005be4:	e0bff217 	ldw	r2,-56(fp)
 4005be8:	1080c810 	cmplti	r2,r2,800
 4005bec:	103fe91e 	bne	r2,zero,4005b94 <__reset+0xfb004b94>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
 4005bf0:	e0bff317 	ldw	r2,-52(fp)
 4005bf4:	10800044 	addi	r2,r2,1
 4005bf8:	e0bff315 	stw	r2,-52(fp)
 4005bfc:	e0bff317 	ldw	r2,-52(fp)
 4005c00:	10807810 	cmplti	r2,r2,480
 4005c04:	103fe11e 	bne	r2,zero,4005b8c <__reset+0xfb004b8c>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
 4005c08:	e0bfff03 	ldbu	r2,-4(fp)
 4005c0c:	e0fff604 	addi	r3,fp,-40
 4005c10:	1809883a 	mov	r4,r3
 4005c14:	014101f4 	movhi	r5,1031
 4005c18:	2953ed04 	addi	r5,r5,20404
 4005c1c:	100d883a 	mov	r6,r2
 4005c20:	400aff40 	call	400aff4 <sprintf>
    ShowInfo(pReader, szText);
 4005c24:	e0bff604 	addi	r2,fp,-40
 4005c28:	e13ffe17 	ldw	r4,-8(fp)
 4005c2c:	100b883a 	mov	r5,r2
 4005c30:	40057a00 	call	40057a0 <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
 4005c34:	e13ffe17 	ldw	r4,-8(fp)
 4005c38:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
}
 4005c3c:	e037883a 	mov	sp,fp
 4005c40:	dfc00117 	ldw	ra,4(sp)
 4005c44:	df000017 	ldw	fp,0(sp)
 4005c48:	dec00204 	addi	sp,sp,8
 4005c4c:	f800283a 	ret

04005c50 <VPG_ColorBar>:




void VPG_ColorBar(VIP_FRAME_READER *pReader){
 4005c50:	defff904 	addi	sp,sp,-28
 4005c54:	dfc00615 	stw	ra,24(sp)
 4005c58:	df000515 	stw	fp,20(sp)
 4005c5c:	df000504 	addi	fp,sp,20
 4005c60:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
 4005c64:	e13fff17 	ldw	r4,-4(fp)
 4005c68:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4005c6c:	e0bffd15 	stw	r2,-12(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
 4005c70:	e03ffc15 	stw	zero,-16(fp)
 4005c74:	00004506 	br	4005d8c <VPG_ColorBar+0x13c>
        for(x=0;x<FRAME_WIDTH;x++){
 4005c78:	e03ffb15 	stw	zero,-20(fp)
 4005c7c:	00003d06 	br	4005d74 <VPG_ColorBar+0x124>
            if (x == 0 || y == 0 || x == FRAME_WIDTH-1 || y == FRAME_HEIGHT-1){
 4005c80:	e0bffb17 	ldw	r2,-20(fp)
 4005c84:	10000826 	beq	r2,zero,4005ca8 <VPG_ColorBar+0x58>
 4005c88:	e0bffc17 	ldw	r2,-16(fp)
 4005c8c:	10000626 	beq	r2,zero,4005ca8 <VPG_ColorBar+0x58>
 4005c90:	e0bffb17 	ldw	r2,-20(fp)
 4005c94:	1080c7e0 	cmpeqi	r2,r2,799
 4005c98:	1000031e 	bne	r2,zero,4005ca8 <VPG_ColorBar+0x58>
 4005c9c:	e0bffc17 	ldw	r2,-16(fp)
 4005ca0:	108077d8 	cmpnei	r2,r2,479
 4005ca4:	1000041e 	bne	r2,zero,4005cb8 <VPG_ColorBar+0x68>
                Value32 = WHITE_24;
 4005ca8:	00804034 	movhi	r2,256
 4005cac:	10bfffc4 	addi	r2,r2,-1
 4005cb0:	e0bffe15 	stw	r2,-8(fp)
 4005cb4:	00002606 	br	4005d50 <VPG_ColorBar+0x100>
            }else if (y < FRAME_HEIGHT/4){
 4005cb8:	e0bffc17 	ldw	r2,-16(fp)
 4005cbc:	10801e08 	cmpgei	r2,r2,120
 4005cc0:	1000041e 	bne	r2,zero,4005cd4 <VPG_ColorBar+0x84>
                // red
                Value32 = x & 0xFF;
 4005cc4:	e0bffb17 	ldw	r2,-20(fp)
 4005cc8:	10803fcc 	andi	r2,r2,255
 4005ccc:	e0bffe15 	stw	r2,-8(fp)
 4005cd0:	00001f06 	br	4005d50 <VPG_ColorBar+0x100>
            }else if (y < FRAME_HEIGHT/2){
 4005cd4:	e0bffc17 	ldw	r2,-16(fp)
 4005cd8:	10803c08 	cmpgei	r2,r2,240
 4005cdc:	1000051e 	bne	r2,zero,4005cf4 <VPG_ColorBar+0xa4>
                Value32 = (x & 0xFF) << 8;
 4005ce0:	e0bffb17 	ldw	r2,-20(fp)
 4005ce4:	1004923a 	slli	r2,r2,8
 4005ce8:	10bfffcc 	andi	r2,r2,65535
 4005cec:	e0bffe15 	stw	r2,-8(fp)
 4005cf0:	00001706 	br	4005d50 <VPG_ColorBar+0x100>
            }else if (y < FRAME_HEIGHT*3/4){
 4005cf4:	e0bffc17 	ldw	r2,-16(fp)
 4005cf8:	10805a08 	cmpgei	r2,r2,360
 4005cfc:	1000051e 	bne	r2,zero,4005d14 <VPG_ColorBar+0xc4>
                Value32 = (x & 0xFF) << 16;
 4005d00:	e0bffb17 	ldw	r2,-20(fp)
 4005d04:	10803fcc 	andi	r2,r2,255
 4005d08:	1004943a 	slli	r2,r2,16
 4005d0c:	e0bffe15 	stw	r2,-8(fp)
 4005d10:	00000f06 	br	4005d50 <VPG_ColorBar+0x100>
            }else{
                Value32 = x & 0xFF;
 4005d14:	e0bffb17 	ldw	r2,-20(fp)
 4005d18:	10803fcc 	andi	r2,r2,255
 4005d1c:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 8;
 4005d20:	e0bffb17 	ldw	r2,-20(fp)
 4005d24:	1004923a 	slli	r2,r2,8
 4005d28:	10bfffcc 	andi	r2,r2,65535
 4005d2c:	e0fffe17 	ldw	r3,-8(fp)
 4005d30:	1884b03a 	or	r2,r3,r2
 4005d34:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 16;
 4005d38:	e0bffb17 	ldw	r2,-20(fp)
 4005d3c:	10803fcc 	andi	r2,r2,255
 4005d40:	1004943a 	slli	r2,r2,16
 4005d44:	e0fffe17 	ldw	r3,-8(fp)
 4005d48:	1884b03a 	or	r2,r3,r2
 4005d4c:	e0bffe15 	stw	r2,-8(fp)
            }
            *p++ = Value32;
 4005d50:	e0bffd17 	ldw	r2,-12(fp)
 4005d54:	e0fffe17 	ldw	r3,-8(fp)
 4005d58:	10c00015 	stw	r3,0(r2)
 4005d5c:	e0bffd17 	ldw	r2,-12(fp)
 4005d60:	10800104 	addi	r2,r2,4
 4005d64:	e0bffd15 	stw	r2,-12(fp)
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
 4005d68:	e0bffb17 	ldw	r2,-20(fp)
 4005d6c:	10800044 	addi	r2,r2,1
 4005d70:	e0bffb15 	stw	r2,-20(fp)
 4005d74:	e0bffb17 	ldw	r2,-20(fp)
 4005d78:	1080c810 	cmplti	r2,r2,800
 4005d7c:	103fc01e 	bne	r2,zero,4005c80 <__reset+0xfb004c80>
void VPG_ColorBar(VIP_FRAME_READER *pReader){
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
 4005d80:	e0bffc17 	ldw	r2,-16(fp)
 4005d84:	10800044 	addi	r2,r2,1
 4005d88:	e0bffc15 	stw	r2,-16(fp)
 4005d8c:	e0bffc17 	ldw	r2,-16(fp)
 4005d90:	10807810 	cmplti	r2,r2,480
 4005d94:	103fb81e 	bne	r2,zero,4005c78 <__reset+0xfb004c78>
            *p++ = Value32;
        }            
        
    }
    
    VIPFR_ActiveDrawFrame(pReader);
 4005d98:	e13fff17 	ldw	r4,-4(fp)
 4005d9c:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
}
 4005da0:	e037883a 	mov	sp,fp
 4005da4:	dfc00117 	ldw	ra,4(sp)
 4005da8:	df000017 	ldw	fp,0(sp)
 4005dac:	dec00204 	addi	sp,sp,8
 4005db0:	f800283a 	ret

04005db4 <GUI_ShowPAT>:

void GUI_ShowPAT(VIP_FRAME_READER *pReader, int PatId){
 4005db4:	defffc04 	addi	sp,sp,-16
 4005db8:	dfc00315 	stw	ra,12(sp)
 4005dbc:	df000215 	stw	fp,8(sp)
 4005dc0:	df000204 	addi	fp,sp,8
 4005dc4:	e13ffe15 	stw	r4,-8(fp)
 4005dc8:	e17fff15 	stw	r5,-4(fp)
                switch(PatId){
 4005dcc:	e0bfff17 	ldw	r2,-4(fp)
 4005dd0:	108003e8 	cmpgeui	r2,r2,15
 4005dd4:	1000521e 	bne	r2,zero,4005f20 <GUI_ShowPAT+0x16c>
 4005dd8:	e0bfff17 	ldw	r2,-4(fp)
 4005ddc:	1085883a 	add	r2,r2,r2
 4005de0:	1087883a 	add	r3,r2,r2
 4005de4:	00810034 	movhi	r2,1024
 4005de8:	10977e04 	addi	r2,r2,24056
 4005dec:	1885883a 	add	r2,r3,r2
 4005df0:	10800017 	ldw	r2,0(r2)
 4005df4:	1000683a 	jmp	r2
 4005df8:	04005e34 	movhi	r16,376
 4005dfc:	04005e40 	call	4005e4 <__alt_mem_sdram-0x3bffa1c>
 4005e00:	04005e54 	movui	r16,377
 4005e04:	04005e64 	muli	r16,zero,377
 4005e08:	04005e74 	movhi	r16,377
 4005e0c:	04005e84 	movi	r16,378
 4005e10:	04005e90 	cmplti	r16,zero,378
 4005e14:	04005ea0 	cmpeqi	r16,zero,378
 4005e18:	04005eb0 	cmpltui	r16,zero,378
 4005e1c:	04005ec0 	call	4005ec <__alt_mem_sdram-0x3bffa14>
 4005e20:	04005ed0 	cmplti	r16,zero,379
 4005e24:	04005ee0 	cmpeqi	r16,zero,379
 4005e28:	04005ef0 	cmpltui	r16,zero,379
 4005e2c:	04005f00 	call	4005f0 <__alt_mem_sdram-0x3bffa10>
 4005e30:	04005f10 	cmplti	r16,zero,380
                    case 0: VPG_ColorBar(pReader); break;
 4005e34:	e13ffe17 	ldw	r4,-8(fp)
 4005e38:	4005c500 	call	4005c50 <VPG_ColorBar>
 4005e3c:	00003806 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 1: VPG_ColorPanel(pReader, WHITE_24); break;
 4005e40:	e13ffe17 	ldw	r4,-8(fp)
 4005e44:	01404034 	movhi	r5,256
 4005e48:	297fffc4 	addi	r5,r5,-1
 4005e4c:	40058b80 	call	40058b8 <VPG_ColorPanel>
 4005e50:	00003306 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 2: VPG_ColorPanel(pReader, RED_24); break;
 4005e54:	e13ffe17 	ldw	r4,-8(fp)
 4005e58:	01403ff4 	movhi	r5,255
 4005e5c:	40058b80 	call	40058b8 <VPG_ColorPanel>
 4005e60:	00002f06 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 3: VPG_ColorPanel(pReader, GREEN_24); break;
 4005e64:	e13ffe17 	ldw	r4,-8(fp)
 4005e68:	01600014 	movui	r5,32768
 4005e6c:	40058b80 	call	40058b8 <VPG_ColorPanel>
 4005e70:	00002b06 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 4: VPG_ColorPanel(pReader, BLUE_24); break;
 4005e74:	e13ffe17 	ldw	r4,-8(fp)
 4005e78:	01403fc4 	movi	r5,255
 4005e7c:	40058b80 	call	40058b8 <VPG_ColorPanel>
 4005e80:	00002706 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 5: VPG_XLine(pReader); break;
 4005e84:	e13ffe17 	ldw	r4,-8(fp)
 4005e88:	40058000 	call	4005800 <VPG_XLine>
 4005e8c:	00002406 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 6: VPG_VGrid(pReader, 2); break;
 4005e90:	e13ffe17 	ldw	r4,-8(fp)
 4005e94:	01400084 	movi	r5,2
 4005e98:	4005a680 	call	4005a68 <VPG_VGrid>
 4005e9c:	00002006 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 7: VPG_VGrid(pReader, 4); break;
 4005ea0:	e13ffe17 	ldw	r4,-8(fp)
 4005ea4:	01400104 	movi	r5,4
 4005ea8:	4005a680 	call	4005a68 <VPG_VGrid>
 4005eac:	00001c06 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 8: VPG_VGrid(pReader, 8); break;
 4005eb0:	e13ffe17 	ldw	r4,-8(fp)
 4005eb4:	01400204 	movi	r5,8
 4005eb8:	4005a680 	call	4005a68 <VPG_VGrid>
 4005ebc:	00001806 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 9: VPG_HGrid(pReader, 2); break;
 4005ec0:	e13ffe17 	ldw	r4,-8(fp)
 4005ec4:	01400084 	movi	r5,2
 4005ec8:	4005b5c0 	call	4005b5c <VPG_HGrid>
 4005ecc:	00001406 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 10: VPG_HGrid(pReader, 4); break;
 4005ed0:	e13ffe17 	ldw	r4,-8(fp)
 4005ed4:	01400104 	movi	r5,4
 4005ed8:	4005b5c0 	call	4005b5c <VPG_HGrid>
 4005edc:	00001006 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 11: VPG_HGrid(pReader, 8); break;
 4005ee0:	e13ffe17 	ldw	r4,-8(fp)
 4005ee4:	01400204 	movi	r5,8
 4005ee8:	4005b5c0 	call	4005b5c <VPG_HGrid>
 4005eec:	00000c06 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 12: VPG_Grid(pReader, 2); break;
 4005ef0:	e13ffe17 	ldw	r4,-8(fp)
 4005ef4:	01400084 	movi	r5,2
 4005ef8:	400595c0 	call	400595c <VPG_Grid>
 4005efc:	00000806 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 13: VPG_Grid(pReader, 4); break;
 4005f00:	e13ffe17 	ldw	r4,-8(fp)
 4005f04:	01400104 	movi	r5,4
 4005f08:	400595c0 	call	400595c <VPG_Grid>
 4005f0c:	00000406 	br	4005f20 <GUI_ShowPAT+0x16c>
                    case 14: VPG_Grid(pReader, 8); break;
 4005f10:	e13ffe17 	ldw	r4,-8(fp)
 4005f14:	01400204 	movi	r5,8
 4005f18:	400595c0 	call	400595c <VPG_Grid>
 4005f1c:	0001883a 	nop
                }
    
}
 4005f20:	e037883a 	mov	sp,fp
 4005f24:	dfc00117 	ldw	ra,4(sp)
 4005f28:	df000017 	ldw	fp,0(sp)
 4005f2c:	dec00204 	addi	sp,sp,8
 4005f30:	f800283a 	ret

04005f34 <GUI_VPG>:

void GUI_VPG(MTC2_INFO *pTouch){
 4005f34:	deffe704 	addi	sp,sp,-100
 4005f38:	dfc01815 	stw	ra,96(sp)
 4005f3c:	df001715 	stw	fp,92(sp)
 4005f40:	df001704 	addi	fp,sp,92
 4005f44:	e13fff15 	stw	r4,-4(fp)
    // video
    VIP_FRAME_READER *pReader;
    int X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5;
    alt_u8 Event, TouchNum;    
    alt_u8 PatId = 0;
 4005f48:	e03ff205 	stb	zero,-56(fp)
    /////////////////////////////////////////////
    // frame reader
#ifdef DUAL_FRAME_BUFFER
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
#else    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_0, FRAME_WIDTH, FRAME_HEIGHT);
 4005f4c:	00807804 	movi	r2,480
 4005f50:	d8800015 	stw	r2,0(sp)
 4005f54:	01024034 	movhi	r4,2304
 4005f58:	21080004 	addi	r4,r4,8192
 4005f5c:	01418034 	movhi	r5,1536
 4005f60:	01818034 	movhi	r6,1536
 4005f64:	01c0c804 	movi	r7,800
 4005f68:	40087e40 	call	40087e4 <VIPFR_Init>
 4005f6c:	e0bff315 	stw	r2,-52(fp)
#endif // DUAL_FRAME_BUFFER    
    VIPFR_Go(pReader, TRUE);
 4005f70:	e13ff317 	ldw	r4,-52(fp)
 4005f74:	01400044 	movi	r5,1
 4005f78:	40089fc0 	call	40089fc <VIPFR_Go>
    
    
    // clean screen
    vid_clean_screen(pReader, BLACK_24);
 4005f7c:	e13ff317 	ldw	r4,-52(fp)
 4005f80:	000b883a 	mov	r5,zero
 4005f84:	40006000 	call	4000600 <vid_clean_screen>
    
   
    VIPFR_ActiveDrawFrame(pReader);
 4005f88:	e13ff317 	ldw	r4,-52(fp)
 4005f8c:	4008a7c0 	call	4008a7c <VIPFR_ActiveDrawFrame>
    
    VPG_ColorBar(pReader);
 4005f90:	e13ff317 	ldw	r4,-52(fp)
 4005f94:	4005c500 	call	4005c50 <VPG_ColorBar>

   GUI_ShowPAT(pReader, PatId);    
 4005f98:	e0bff203 	ldbu	r2,-56(fp)
 4005f9c:	e13ff317 	ldw	r4,-52(fp)
 4005fa0:	100b883a 	mov	r5,r2
 4005fa4:	4005db40 	call	4005db4 <GUI_ShowPAT>
 4005fa8:	00000106 	br	4005fb0 <GUI_VPG+0x7c>
                GUI_ShowPAT(pReader, PatId);
                usleep(300*1000); // debounce
                MTC2_ClearEvent(pTouch);
            }
        }
    }
 4005fac:	0001883a 	nop
    VPG_ColorBar(pReader);

   GUI_ShowPAT(pReader, PatId);    
    
    while(1){
        if (MTC2_GetStatus(pTouch,&Event, &TouchNum, &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)){
 4005fb0:	e17ffe04 	addi	r5,fp,-8
 4005fb4:	e0fffe44 	addi	r3,fp,-7
 4005fb8:	e0bff404 	addi	r2,fp,-48
 4005fbc:	e13ff504 	addi	r4,fp,-44
 4005fc0:	d9000015 	stw	r4,0(sp)
 4005fc4:	e13ff604 	addi	r4,fp,-40
 4005fc8:	d9000115 	stw	r4,4(sp)
 4005fcc:	e13ff704 	addi	r4,fp,-36
 4005fd0:	d9000215 	stw	r4,8(sp)
 4005fd4:	e13ff804 	addi	r4,fp,-32
 4005fd8:	d9000315 	stw	r4,12(sp)
 4005fdc:	e13ff904 	addi	r4,fp,-28
 4005fe0:	d9000415 	stw	r4,16(sp)
 4005fe4:	e13ffa04 	addi	r4,fp,-24
 4005fe8:	d9000515 	stw	r4,20(sp)
 4005fec:	e13ffb04 	addi	r4,fp,-20
 4005ff0:	d9000615 	stw	r4,24(sp)
 4005ff4:	e13ffc04 	addi	r4,fp,-16
 4005ff8:	d9000715 	stw	r4,28(sp)
 4005ffc:	e13ffd04 	addi	r4,fp,-12
 4006000:	d9000815 	stw	r4,32(sp)
 4006004:	e13fff17 	ldw	r4,-4(fp)
 4006008:	180d883a 	mov	r6,r3
 400600c:	100f883a 	mov	r7,r2
 4006010:	40083b40 	call	40083b4 <MTC2_GetStatus>
 4006014:	103fe526 	beq	r2,zero,4005fac <__reset+0xfb004fac>
           // printf(".");
            //
            if (TouchNum > 0){
 4006018:	e0bffe43 	ldbu	r2,-7(fp)
 400601c:	10803fcc 	andi	r2,r2,255
 4006020:	103fe226 	beq	r2,zero,4005fac <__reset+0xfb004fac>
                // change patter
                PatId++;
 4006024:	e0bff203 	ldbu	r2,-56(fp)
 4006028:	10800044 	addi	r2,r2,1
 400602c:	e0bff205 	stb	r2,-56(fp)
                if (PatId > 14)
 4006030:	e0bff203 	ldbu	r2,-56(fp)
 4006034:	108003f0 	cmpltui	r2,r2,15
 4006038:	1000011e 	bne	r2,zero,4006040 <GUI_VPG+0x10c>
                    PatId = 0;
 400603c:	e03ff205 	stb	zero,-56(fp)
                GUI_ShowPAT(pReader, PatId);
 4006040:	e0bff203 	ldbu	r2,-56(fp)
 4006044:	e13ff317 	ldw	r4,-52(fp)
 4006048:	100b883a 	mov	r5,r2
 400604c:	4005db40 	call	4005db4 <GUI_ShowPAT>
                usleep(300*1000); // debounce
 4006050:	01000174 	movhi	r4,5
 4006054:	2124f804 	addi	r4,r4,-27680
 4006058:	4013aac0 	call	4013aac <usleep>
                MTC2_ClearEvent(pTouch);
 400605c:	e13fff17 	ldw	r4,-4(fp)
 4006060:	40085140 	call	4008514 <MTC2_ClearEvent>
            }
        }
    }
 4006064:	003fd106 	br	4005fac <__reset+0xfb004fac>

04006068 <main>:
#include "gui.h"
#include "system.h"


int main()
{
 4006068:	defffc04 	addi	sp,sp,-16
 400606c:	dfc00315 	stw	ra,12(sp)
 4006070:	df000215 	stw	fp,8(sp)
 4006074:	df000204 	addi	fp,sp,8

    // touch
    MTC2_INFO *pTouch;
    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
 4006078:	00820034 	movhi	r2,2048
 400607c:	10800804 	addi	r2,r2,32
 4006080:	10800037 	ldwio	r2,0(r2)
 4006084:	1080004c 	andi	r2,r2,1
 4006088:	1005003a 	cmpeq	r2,r2,zero
 400608c:	10803fcc 	andi	r2,r2,255
 4006090:	e0bffe15 	stw	r2,-8(fp)
    IOWR(LED_BASE, 0x00, 0xFF); // high-active
 4006094:	00c03fc4 	movi	r3,255
 4006098:	00820034 	movhi	r2,2048
 400609c:	10801004 	addi	r2,r2,64
 40060a0:	10c00035 	stwio	r3,0(r2)
//    if (LCD_Open()){
//        LCD_TextOut(bVPG?"Multi-Touch\nPattern\n" : "Multi-Touch\nPainter\n");
//    }
    printf("Terasic Painter Demo\r\n");
 40060a4:	010101f4 	movhi	r4,1031
 40060a8:	2113ef04 	addi	r4,r4,20412
 40060ac:	400af240 	call	400af24 <puts>

    oc_i2c_init(I2C_OPENCORES_0_BASE);
 40060b0:	01024034 	movhi	r4,2304
 40060b4:	21082004 	addi	r4,r4,8320
 40060b8:	40073080 	call	4007308 <oc_i2c_init>

    usleep(1000);
 40060bc:	0100fa04 	movi	r4,1000
 40060c0:	4013aac0 	call	4013aac <usleep>

    pTouch=MTC2_Init(I2C_OPENCORES_0_BASE,LCD_TOUCH_INT_BASE,LCD_TOUCH_INT_IRQ);
 40060c4:	01024034 	movhi	r4,2304
 40060c8:	21082004 	addi	r4,r4,8320
 40060cc:	01424034 	movhi	r5,2304
 40060d0:	29482804 	addi	r5,r5,8352
 40060d4:	01800144 	movi	r6,5
 40060d8:	40082780 	call	4008278 <MTC2_Init>
 40060dc:	e0bfff15 	stw	r2,-4(fp)
    if (!pTouch){
 40060e0:	e0bfff17 	ldw	r2,-4(fp)
 40060e4:	1000041e 	bne	r2,zero,40060f8 <main+0x90>
        printf("Failed to init multi-touch\r\n");
 40060e8:	010101f4 	movhi	r4,1031
 40060ec:	2113f504 	addi	r4,r4,20436
 40060f0:	400af240 	call	400af24 <puts>
 40060f4:	00000306 	br	4006104 <main+0x9c>
    }else{
        printf("Init touch successfully\r\n");
 40060f8:	010101f4 	movhi	r4,1031
 40060fc:	2113fc04 	addi	r4,r4,20464
 4006100:	400af240 	call	400af24 <puts>

    }
   if (bVPG)
 4006104:	e0bffe17 	ldw	r2,-8(fp)
 4006108:	10000226 	beq	r2,zero,4006114 <main+0xac>
       GUI_VPG(pTouch); // enter vpg mode when users press KEY0
 400610c:	e13fff17 	ldw	r4,-4(fp)
 4006110:	4005f340 	call	4005f34 <GUI_VPG>
       GUI(pTouch);
 4006114:	e13fff17 	ldw	r4,-4(fp)
 4006118:	4004e200 	call	4004e20 <GUI>
  return 0;
 400611c:	0005883a 	mov	r2,zero
}
 4006120:	e037883a 	mov	sp,fp
 4006124:	dfc00117 	ldw	ra,4(sp)
 4006128:	df000017 	ldw	fp,0(sp)
 400612c:	dec00204 	addi	sp,sp,8
 4006130:	f800283a 	ret

04006134 <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
 4006134:	defffd04 	addi	sp,sp,-12
 4006138:	df000215 	stw	fp,8(sp)
 400613c:	df000204 	addi	fp,sp,8
 4006140:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
 4006144:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
 4006148:	00000306 	br	4006158 <my_wait+0x24>
        i++;
 400614c:	e0bffe17 	ldw	r2,-8(fp)
 4006150:	10800044 	addi	r2,r2,1
 4006154:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
 4006158:	e0fffe17 	ldw	r3,-8(fp)
 400615c:	e0bfff17 	ldw	r2,-4(fp)
 4006160:	18bffa16 	blt	r3,r2,400614c <__reset+0xfb00514c>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
 4006164:	e037883a 	mov	sp,fp
 4006168:	df000017 	ldw	fp,0(sp)
 400616c:	dec00104 	addi	sp,sp,4
 4006170:	f800283a 	ret

04006174 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 4006174:	defff804 	addi	sp,sp,-32
 4006178:	dfc00715 	stw	ra,28(sp)
 400617c:	df000615 	stw	fp,24(sp)
 4006180:	df000604 	addi	fp,sp,24
 4006184:	e13ffb15 	stw	r4,-20(fp)
 4006188:	e17ffc15 	stw	r5,-16(fp)
 400618c:	3007883a 	mov	r3,r6
 4006190:	3805883a 	mov	r2,r7
 4006194:	e1000217 	ldw	r4,8(fp)
 4006198:	e0fffd05 	stb	r3,-12(fp)
 400619c:	e0bffe05 	stb	r2,-8(fp)
 40061a0:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
 40061a4:	00800044 	movi	r2,1
 40061a8:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
 40061ac:	e13ffb17 	ldw	r4,-20(fp)
 40061b0:	e17ffc17 	ldw	r5,-16(fp)
 40061b4:	40067bc0 	call	40067bc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40061b8:	e0bffd03 	ldbu	r2,-12(fp)
 40061bc:	10803fcc 	andi	r2,r2,255
 40061c0:	e13ffb17 	ldw	r4,-20(fp)
 40061c4:	e17ffc17 	ldw	r5,-16(fp)
 40061c8:	100d883a 	mov	r6,r2
 40061cc:	40068b80 	call	40068b8 <i2c_write>
 40061d0:	1000041e 	bne	r2,zero,40061e4 <I2C_Write+0x70>
        bSuccess = FALSE;
 40061d4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 40061d8:	010101f4 	movhi	r4,1031
 40061dc:	21140304 	addi	r4,r4,20492
 40061e0:	4007d240 	call	4007d24 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 40061e4:	e0bffa17 	ldw	r2,-24(fp)
 40061e8:	10000a26 	beq	r2,zero,4006214 <I2C_Write+0xa0>
 40061ec:	e0bffe03 	ldbu	r2,-8(fp)
 40061f0:	e13ffb17 	ldw	r4,-20(fp)
 40061f4:	e17ffc17 	ldw	r5,-16(fp)
 40061f8:	100d883a 	mov	r6,r2
 40061fc:	40068b80 	call	40068b8 <i2c_write>
 4006200:	1000041e 	bne	r2,zero,4006214 <I2C_Write+0xa0>
        bSuccess = FALSE;
 4006204:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 4006208:	010101f4 	movhi	r4,1031
 400620c:	21140b04 	addi	r4,r4,20524
 4006210:	4007d240 	call	4007d24 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 4006214:	e0bffa17 	ldw	r2,-24(fp)
 4006218:	10000a26 	beq	r2,zero,4006244 <I2C_Write+0xd0>
 400621c:	e0bfff03 	ldbu	r2,-4(fp)
 4006220:	e13ffb17 	ldw	r4,-20(fp)
 4006224:	e17ffc17 	ldw	r5,-16(fp)
 4006228:	100d883a 	mov	r6,r2
 400622c:	40068b80 	call	40068b8 <i2c_write>
 4006230:	1000041e 	bne	r2,zero,4006244 <I2C_Write+0xd0>
        bSuccess = FALSE;
 4006234:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4006238:	010101f4 	movhi	r4,1031
 400623c:	21141404 	addi	r4,r4,20560
 4006240:	4007d240 	call	4007d24 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4006244:	e13ffb17 	ldw	r4,-20(fp)
 4006248:	e17ffc17 	ldw	r5,-16(fp)
 400624c:	40068400 	call	4006840 <i2c_stop>
    
    usleep(7*100); // delay to wait EE2 ready (at least 5 ms delay is required)
 4006250:	0100af04 	movi	r4,700
 4006254:	4013aac0 	call	4013aac <usleep>
    
    return bSuccess;
 4006258:	e0bffa17 	ldw	r2,-24(fp)

    
}
 400625c:	e037883a 	mov	sp,fp
 4006260:	dfc00117 	ldw	ra,4(sp)
 4006264:	df000017 	ldw	fp,0(sp)
 4006268:	dec00204 	addi	sp,sp,8
 400626c:	f800283a 	ret

04006270 <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
 4006270:	defff704 	addi	sp,sp,-36
 4006274:	dfc00815 	stw	ra,32(sp)
 4006278:	df000715 	stw	fp,28(sp)
 400627c:	df000704 	addi	fp,sp,28
 4006280:	e13ffb15 	stw	r4,-20(fp)
 4006284:	e17ffc15 	stw	r5,-16(fp)
 4006288:	3007883a 	mov	r3,r6
 400628c:	3805883a 	mov	r2,r7
 4006290:	e1000217 	ldw	r4,8(fp)
 4006294:	e0fffd05 	stb	r3,-12(fp)
 4006298:	e0bffe05 	stb	r2,-8(fp)
 400629c:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
 40062a0:	00800044 	movi	r2,1
 40062a4:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
 40062a8:	e0bfff0b 	ldhu	r2,-4(fp)
 40062ac:	1004d23a 	srli	r2,r2,8
 40062b0:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
 40062b4:	e0bfff0b 	ldhu	r2,-4(fp)
 40062b8:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 40062bc:	e13ffb17 	ldw	r4,-20(fp)
 40062c0:	e17ffc17 	ldw	r5,-16(fp)
 40062c4:	40067bc0 	call	40067bc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40062c8:	e0bffd03 	ldbu	r2,-12(fp)
 40062cc:	10803fcc 	andi	r2,r2,255
 40062d0:	e13ffb17 	ldw	r4,-20(fp)
 40062d4:	e17ffc17 	ldw	r5,-16(fp)
 40062d8:	100d883a 	mov	r6,r2
 40062dc:	40068b80 	call	40068b8 <i2c_write>
 40062e0:	1000041e 	bne	r2,zero,40062f4 <I2C_Write16+0x84>
        bSuccess = FALSE;
 40062e4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 40062e8:	010101f4 	movhi	r4,1031
 40062ec:	21140304 	addi	r4,r4,20492
 40062f0:	4007d240 	call	4007d24 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 40062f4:	e0bff917 	ldw	r2,-28(fp)
 40062f8:	10000a26 	beq	r2,zero,4006324 <I2C_Write16+0xb4>
 40062fc:	e0bffe03 	ldbu	r2,-8(fp)
 4006300:	e13ffb17 	ldw	r4,-20(fp)
 4006304:	e17ffc17 	ldw	r5,-16(fp)
 4006308:	100d883a 	mov	r6,r2
 400630c:	40068b80 	call	40068b8 <i2c_write>
 4006310:	1000041e 	bne	r2,zero,4006324 <I2C_Write16+0xb4>
        bSuccess = FALSE;
 4006314:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 4006318:	010101f4 	movhi	r4,1031
 400631c:	21140b04 	addi	r4,r4,20524
 4006320:	4007d240 	call	4007d24 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
 4006324:	e0bff917 	ldw	r2,-28(fp)
 4006328:	10000a26 	beq	r2,zero,4006354 <I2C_Write16+0xe4>
 400632c:	e0bffa03 	ldbu	r2,-24(fp)
 4006330:	e13ffb17 	ldw	r4,-20(fp)
 4006334:	e17ffc17 	ldw	r5,-16(fp)
 4006338:	100d883a 	mov	r6,r2
 400633c:	40068b80 	call	40068b8 <i2c_write>
 4006340:	1000041e 	bne	r2,zero,4006354 <I2C_Write16+0xe4>
        bSuccess = FALSE;
 4006344:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4006348:	010101f4 	movhi	r4,1031
 400634c:	21141404 	addi	r4,r4,20560
 4006350:	4007d240 	call	4007d24 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
 4006354:	e0bff917 	ldw	r2,-28(fp)
 4006358:	10000a26 	beq	r2,zero,4006384 <I2C_Write16+0x114>
 400635c:	e0bffa43 	ldbu	r2,-23(fp)
 4006360:	e13ffb17 	ldw	r4,-20(fp)
 4006364:	e17ffc17 	ldw	r5,-16(fp)
 4006368:	100d883a 	mov	r6,r2
 400636c:	40068b80 	call	40068b8 <i2c_write>
 4006370:	1000041e 	bne	r2,zero,4006384 <I2C_Write16+0x114>
        bSuccess = FALSE;
 4006374:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4006378:	010101f4 	movhi	r4,1031
 400637c:	21141404 	addi	r4,r4,20560
 4006380:	4007d240 	call	4007d24 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
 4006384:	e13ffb17 	ldw	r4,-20(fp)
 4006388:	e17ffc17 	ldw	r5,-16(fp)
 400638c:	40068400 	call	4006840 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4006390:	0106d604 	movi	r4,7000
 4006394:	4013aac0 	call	4013aac <usleep>
    
    return bSuccess;
 4006398:	e0bff917 	ldw	r2,-28(fp)
}
 400639c:	e037883a 	mov	sp,fp
 40063a0:	dfc00117 	ldw	ra,4(sp)
 40063a4:	df000017 	ldw	fp,0(sp)
 40063a8:	dec00204 	addi	sp,sp,8
 40063ac:	f800283a 	ret

040063b0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 40063b0:	defff904 	addi	sp,sp,-28
 40063b4:	dfc00615 	stw	ra,24(sp)
 40063b8:	df000515 	stw	fp,20(sp)
 40063bc:	df000504 	addi	fp,sp,20
 40063c0:	e13ffc15 	stw	r4,-16(fp)
 40063c4:	e17ffd15 	stw	r5,-12(fp)
 40063c8:	3007883a 	mov	r3,r6
 40063cc:	3805883a 	mov	r2,r7
 40063d0:	e0fffe05 	stb	r3,-8(fp)
 40063d4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 40063d8:	00800044 	movi	r2,1
 40063dc:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40063e0:	e0bffe03 	ldbu	r2,-8(fp)
 40063e4:	10803fcc 	andi	r2,r2,255
 40063e8:	e13ffc17 	ldw	r4,-16(fp)
 40063ec:	e17ffd17 	ldw	r5,-12(fp)
 40063f0:	100d883a 	mov	r6,r2
 40063f4:	40068b80 	call	40068b8 <i2c_write>
 40063f8:	1000041e 	bne	r2,zero,400640c <I2C_Read+0x5c>
        bSuccess = FALSE;
 40063fc:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
 4006400:	010101f4 	movhi	r4,1031
 4006404:	21141c04 	addi	r4,r4,20592
 4006408:	4007d240 	call	4007d24 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 400640c:	e0bffb17 	ldw	r2,-20(fp)
 4006410:	10000a26 	beq	r2,zero,400643c <I2C_Read+0x8c>
 4006414:	e0bfff03 	ldbu	r2,-4(fp)
 4006418:	e13ffc17 	ldw	r4,-16(fp)
 400641c:	e17ffd17 	ldw	r5,-12(fp)
 4006420:	100d883a 	mov	r6,r2
 4006424:	40068b80 	call	40068b8 <i2c_write>
 4006428:	1000041e 	bne	r2,zero,400643c <I2C_Read+0x8c>
        bSuccess = FALSE;
 400642c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
 4006430:	010101f4 	movhi	r4,1031
 4006434:	21142504 	addi	r4,r4,20628
 4006438:	4007d240 	call	4007d24 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 400643c:	e13ffc17 	ldw	r4,-16(fp)
 4006440:	e17ffd17 	ldw	r5,-12(fp)
 4006444:	40067bc0 	call	40067bc <i2c_start>
    DeviceAddr |= 1; // Read
 4006448:	e0bffe03 	ldbu	r2,-8(fp)
 400644c:	10800054 	ori	r2,r2,1
 4006450:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4006454:	e0bffb17 	ldw	r2,-20(fp)
 4006458:	10000b26 	beq	r2,zero,4006488 <I2C_Read+0xd8>
 400645c:	e0bffe03 	ldbu	r2,-8(fp)
 4006460:	10803fcc 	andi	r2,r2,255
 4006464:	e13ffc17 	ldw	r4,-16(fp)
 4006468:	e17ffd17 	ldw	r5,-12(fp)
 400646c:	100d883a 	mov	r6,r2
 4006470:	40068b80 	call	40068b8 <i2c_write>
 4006474:	1000041e 	bne	r2,zero,4006488 <I2C_Read+0xd8>
        bSuccess = FALSE;
 4006478:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
 400647c:	010101f4 	movhi	r4,1031
 4006480:	21142e04 	addi	r4,r4,20664
 4006484:	4007d240 	call	4007d24 <myprintf>
    }
    
    if (bSuccess){
 4006488:	e0bffb17 	ldw	r2,-20(fp)
 400648c:	10000526 	beq	r2,zero,40064a4 <I2C_Read+0xf4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 4006490:	e13ffc17 	ldw	r4,-16(fp)
 4006494:	e17ffd17 	ldw	r5,-12(fp)
 4006498:	e1800217 	ldw	r6,8(fp)
 400649c:	000f883a 	mov	r7,zero
 40064a0:	40069fc0 	call	40069fc <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 40064a4:	e13ffc17 	ldw	r4,-16(fp)
 40064a8:	e17ffd17 	ldw	r5,-12(fp)
 40064ac:	40068400 	call	4006840 <i2c_stop>
    
    return bSuccess;
 40064b0:	e0bffb17 	ldw	r2,-20(fp)
}
 40064b4:	e037883a 	mov	sp,fp
 40064b8:	dfc00117 	ldw	ra,4(sp)
 40064bc:	df000017 	ldw	fp,0(sp)
 40064c0:	dec00204 	addi	sp,sp,8
 40064c4:	f800283a 	ret

040064c8 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
 40064c8:	defff804 	addi	sp,sp,-32
 40064cc:	dfc00715 	stw	ra,28(sp)
 40064d0:	df000615 	stw	fp,24(sp)
 40064d4:	df000604 	addi	fp,sp,24
 40064d8:	e13ffc15 	stw	r4,-16(fp)
 40064dc:	e17ffd15 	stw	r5,-12(fp)
 40064e0:	3007883a 	mov	r3,r6
 40064e4:	3805883a 	mov	r2,r7
 40064e8:	e0fffe05 	stb	r3,-8(fp)
 40064ec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 40064f0:	00800044 	movi	r2,1
 40064f4:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 LowByte, HighByte;
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
 40064f8:	e13ffc17 	ldw	r4,-16(fp)
 40064fc:	e17ffd17 	ldw	r5,-12(fp)
 4006500:	40067bc0 	call	40067bc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006504:	e0bffe03 	ldbu	r2,-8(fp)
 4006508:	10803fcc 	andi	r2,r2,255
 400650c:	e13ffc17 	ldw	r4,-16(fp)
 4006510:	e17ffd17 	ldw	r5,-12(fp)
 4006514:	100d883a 	mov	r6,r2
 4006518:	40068b80 	call	40068b8 <i2c_write>
 400651c:	1000041e 	bne	r2,zero,4006530 <I2C_Read16+0x68>
        bSuccess = FALSE;
 4006520:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4006524:	010101f4 	movhi	r4,1031
 4006528:	21140304 	addi	r4,r4,20492
 400652c:	4007d240 	call	4007d24 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4006530:	e0bffa17 	ldw	r2,-24(fp)
 4006534:	10000a26 	beq	r2,zero,4006560 <I2C_Read16+0x98>
 4006538:	e0bfff03 	ldbu	r2,-4(fp)
 400653c:	e13ffc17 	ldw	r4,-16(fp)
 4006540:	e17ffd17 	ldw	r5,-12(fp)
 4006544:	100d883a 	mov	r6,r2
 4006548:	40068b80 	call	40068b8 <i2c_write>
 400654c:	1000041e 	bne	r2,zero,4006560 <I2C_Read16+0x98>
        bSuccess = FALSE;
 4006550:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 4006554:	010101f4 	movhi	r4,1031
 4006558:	21140b04 	addi	r4,r4,20524
 400655c:	4007d240 	call	4007d24 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4006560:	e13ffc17 	ldw	r4,-16(fp)
 4006564:	e17ffd17 	ldw	r5,-12(fp)
 4006568:	40067bc0 	call	40067bc <i2c_start>
    DeviceAddr |= 1; // Read
 400656c:	e0bffe03 	ldbu	r2,-8(fp)
 4006570:	10800054 	ori	r2,r2,1
 4006574:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4006578:	e0bffa17 	ldw	r2,-24(fp)
 400657c:	10000b26 	beq	r2,zero,40065ac <I2C_Read16+0xe4>
 4006580:	e0bffe03 	ldbu	r2,-8(fp)
 4006584:	10803fcc 	andi	r2,r2,255
 4006588:	e13ffc17 	ldw	r4,-16(fp)
 400658c:	e17ffd17 	ldw	r5,-12(fp)
 4006590:	100d883a 	mov	r6,r2
 4006594:	40068b80 	call	40068b8 <i2c_write>
 4006598:	1000041e 	bne	r2,zero,40065ac <I2C_Read16+0xe4>
        bSuccess = FALSE;
 400659c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 40065a0:	010101f4 	movhi	r4,1031
 40065a4:	21143704 	addi	r4,r4,20700
 40065a8:	4007d240 	call	4007d24 <myprintf>
    }
    
    if (bSuccess){
 40065ac:	e0bffa17 	ldw	r2,-24(fp)
 40065b0:	10000626 	beq	r2,zero,40065cc <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
 40065b4:	e0bffb44 	addi	r2,fp,-19
 40065b8:	e13ffc17 	ldw	r4,-16(fp)
 40065bc:	e17ffd17 	ldw	r5,-12(fp)
 40065c0:	100d883a 	mov	r6,r2
 40065c4:	01c00044 	movi	r7,1
 40065c8:	40069fc0 	call	40069fc <i2c_read>
    }        
    if (bSuccess){
 40065cc:	e0bffa17 	ldw	r2,-24(fp)
 40065d0:	10000626 	beq	r2,zero,40065ec <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
 40065d4:	e0bffb04 	addi	r2,fp,-20
 40065d8:	e13ffc17 	ldw	r4,-16(fp)
 40065dc:	e17ffd17 	ldw	r5,-12(fp)
 40065e0:	100d883a 	mov	r6,r2
 40065e4:	000f883a 	mov	r7,zero
 40065e8:	40069fc0 	call	40069fc <i2c_read>
    }        
    if (bSuccess)
 40065ec:	e0bffa17 	ldw	r2,-24(fp)
 40065f0:	10000a26 	beq	r2,zero,400661c <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
 40065f4:	e0bffb43 	ldbu	r2,-19(fp)
 40065f8:	10803fcc 	andi	r2,r2,255
 40065fc:	1004923a 	slli	r2,r2,8
 4006600:	1007883a 	mov	r3,r2
 4006604:	e0bffb03 	ldbu	r2,-20(fp)
 4006608:	10803fcc 	andi	r2,r2,255
 400660c:	1884b03a 	or	r2,r3,r2
 4006610:	1007883a 	mov	r3,r2
 4006614:	e0800217 	ldw	r2,8(fp)
 4006618:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
 400661c:	e13ffc17 	ldw	r4,-16(fp)
 4006620:	e17ffd17 	ldw	r5,-12(fp)
 4006624:	40068400 	call	4006840 <i2c_stop>
    return bSuccess;
 4006628:	e0bffa17 	ldw	r2,-24(fp)
}
 400662c:	e037883a 	mov	sp,fp
 4006630:	dfc00117 	ldw	ra,4(sp)
 4006634:	df000017 	ldw	fp,0(sp)
 4006638:	dec00204 	addi	sp,sp,8
 400663c:	f800283a 	ret

04006640 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 4006640:	defff704 	addi	sp,sp,-36
 4006644:	dfc00815 	stw	ra,32(sp)
 4006648:	df000715 	stw	fp,28(sp)
 400664c:	df000704 	addi	fp,sp,28
 4006650:	e13ffb15 	stw	r4,-20(fp)
 4006654:	e17ffc15 	stw	r5,-16(fp)
 4006658:	3007883a 	mov	r3,r6
 400665c:	3805883a 	mov	r2,r7
 4006660:	e1000317 	ldw	r4,12(fp)
 4006664:	e0fffd05 	stb	r3,-12(fp)
 4006668:	e0bffe05 	stb	r2,-8(fp)
 400666c:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
 4006670:	00800044 	movi	r2,1
 4006674:	e0bffa15 	stw	r2,-24(fp)
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
 4006678:	e13ffb17 	ldw	r4,-20(fp)
 400667c:	e17ffc17 	ldw	r5,-16(fp)
 4006680:	40067bc0 	call	40067bc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006684:	e0bffd03 	ldbu	r2,-12(fp)
 4006688:	10803fcc 	andi	r2,r2,255
 400668c:	e13ffb17 	ldw	r4,-20(fp)
 4006690:	e17ffc17 	ldw	r5,-16(fp)
 4006694:	100d883a 	mov	r6,r2
 4006698:	40068b80 	call	40068b8 <i2c_write>
 400669c:	1000041e 	bne	r2,zero,40066b0 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
 40066a0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
 40066a4:	010101f4 	movhi	r4,1031
 40066a8:	21144004 	addi	r4,r4,20736
 40066ac:	4007d240 	call	4007d24 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 40066b0:	e0bffa17 	ldw	r2,-24(fp)
 40066b4:	10000a26 	beq	r2,zero,40066e0 <I2C_MultipleRead+0xa0>
 40066b8:	e0bffe03 	ldbu	r2,-8(fp)
 40066bc:	e13ffb17 	ldw	r4,-20(fp)
 40066c0:	e17ffc17 	ldw	r5,-16(fp)
 40066c4:	100d883a 	mov	r6,r2
 40066c8:	40068b80 	call	40068b8 <i2c_write>
 40066cc:	1000041e 	bne	r2,zero,40066e0 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
 40066d0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
 40066d4:	010101f4 	movhi	r4,1031
 40066d8:	21144b04 	addi	r4,r4,20780
 40066dc:	4007d240 	call	4007d24 <myprintf>
    }    
    if (bSuccess)        
 40066e0:	e0bffa17 	ldw	r2,-24(fp)
 40066e4:	10000326 	beq	r2,zero,40066f4 <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
 40066e8:	e13ffb17 	ldw	r4,-20(fp)
 40066ec:	e17ffc17 	ldw	r5,-16(fp)
 40066f0:	40067bc0 	call	40067bc <i2c_start>
    DeviceAddr |= 1; // Read
 40066f4:	e0bffd03 	ldbu	r2,-12(fp)
 40066f8:	10800054 	ori	r2,r2,1
 40066fc:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4006700:	e0bffa17 	ldw	r2,-24(fp)
 4006704:	10000b26 	beq	r2,zero,4006734 <I2C_MultipleRead+0xf4>
 4006708:	e0bffd03 	ldbu	r2,-12(fp)
 400670c:	10803fcc 	andi	r2,r2,255
 4006710:	e13ffb17 	ldw	r4,-20(fp)
 4006714:	e17ffc17 	ldw	r5,-16(fp)
 4006718:	100d883a 	mov	r6,r2
 400671c:	40068b80 	call	40068b8 <i2c_write>
 4006720:	1000041e 	bne	r2,zero,4006734 <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
 4006724:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
 4006728:	010101f4 	movhi	r4,1031
 400672c:	21145604 	addi	r4,r4,20824
 4006730:	4007d240 	call	4007d24 <myprintf>
    }
    
    if (bSuccess){
 4006734:	e0bffa17 	ldw	r2,-24(fp)
 4006738:	10001726 	beq	r2,zero,4006798 <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
 400673c:	e03ff915 	stw	zero,-28(fp)
 4006740:	00001006 	br	4006784 <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 4006744:	e0bfff0b 	ldhu	r2,-4(fp)
 4006748:	10ffffc4 	addi	r3,r2,-1
 400674c:	e0bff917 	ldw	r2,-28(fp)
 4006750:	1884c03a 	cmpne	r2,r3,r2
 4006754:	10803fcc 	andi	r2,r2,255
 4006758:	e13ffb17 	ldw	r4,-20(fp)
 400675c:	e17ffc17 	ldw	r5,-16(fp)
 4006760:	e1800217 	ldw	r6,8(fp)
 4006764:	100f883a 	mov	r7,r2
 4006768:	40069fc0 	call	40069fc <i2c_read>
            pBuf++;
 400676c:	e0800217 	ldw	r2,8(fp)
 4006770:	10800044 	addi	r2,r2,1
 4006774:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 4006778:	e0bff917 	ldw	r2,-28(fp)
 400677c:	10800044 	addi	r2,r2,1
 4006780:	e0bff915 	stw	r2,-28(fp)
 4006784:	e0bfff0b 	ldhu	r2,-4(fp)
 4006788:	e0fff917 	ldw	r3,-28(fp)
 400678c:	1880020e 	bge	r3,r2,4006798 <I2C_MultipleRead+0x158>
 4006790:	e0bffa17 	ldw	r2,-24(fp)
 4006794:	103feb1e 	bne	r2,zero,4006744 <__reset+0xfb005744>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 4006798:	e13ffb17 	ldw	r4,-20(fp)
 400679c:	e17ffc17 	ldw	r5,-16(fp)
 40067a0:	40068400 	call	4006840 <i2c_stop>
    
    return bSuccess;    
 40067a4:	e0bffa17 	ldw	r2,-24(fp)
    
}
 40067a8:	e037883a 	mov	sp,fp
 40067ac:	dfc00117 	ldw	ra,4(sp)
 40067b0:	df000017 	ldw	fp,0(sp)
 40067b4:	dec00204 	addi	sp,sp,8
 40067b8:	f800283a 	ret

040067bc <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 40067bc:	defffc04 	addi	sp,sp,-16
 40067c0:	dfc00315 	stw	ra,12(sp)
 40067c4:	df000215 	stw	fp,8(sp)
 40067c8:	df000204 	addi	fp,sp,8
 40067cc:	e13ffe15 	stw	r4,-8(fp)
 40067d0:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 40067d4:	e0bfff17 	ldw	r2,-4(fp)
 40067d8:	10800104 	addi	r2,r2,4
 40067dc:	00c00044 	movi	r3,1
 40067e0:	10c00035 	stwio	r3,0(r2)
    // start condition
    SDA_HIGH(data_base); // data high
 40067e4:	e0bfff17 	ldw	r2,-4(fp)
 40067e8:	00c00044 	movi	r3,1
 40067ec:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 40067f0:	e0bffe17 	ldw	r2,-8(fp)
 40067f4:	00c00044 	movi	r3,1
 40067f8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 40067fc:	01000784 	movi	r4,30
 4006800:	4013aac0 	call	4013aac <usleep>
    SDA_LOW(data_base); // data low
 4006804:	e0bfff17 	ldw	r2,-4(fp)
 4006808:	0007883a 	mov	r3,zero
 400680c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 4006810:	01000784 	movi	r4,30
 4006814:	4013aac0 	call	4013aac <usleep>
    SCL_LOW(clk_base); // clock low
 4006818:	e0bffe17 	ldw	r2,-8(fp)
 400681c:	0007883a 	mov	r3,zero
 4006820:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 4006824:	01000784 	movi	r4,30
 4006828:	4013aac0 	call	4013aac <usleep>
}
 400682c:	e037883a 	mov	sp,fp
 4006830:	dfc00117 	ldw	ra,4(sp)
 4006834:	df000017 	ldw	fp,0(sp)
 4006838:	dec00204 	addi	sp,sp,8
 400683c:	f800283a 	ret

04006840 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 4006840:	defffc04 	addi	sp,sp,-16
 4006844:	dfc00315 	stw	ra,12(sp)
 4006848:	df000215 	stw	fp,8(sp)
 400684c:	df000204 	addi	fp,sp,8
 4006850:	e13ffe15 	stw	r4,-8(fp)
 4006854:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 4006858:	e0bfff17 	ldw	r2,-4(fp)
 400685c:	10800104 	addi	r2,r2,4
 4006860:	00c00044 	movi	r3,1
 4006864:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
 4006868:	e0bfff17 	ldw	r2,-4(fp)
 400686c:	0007883a 	mov	r3,zero
 4006870:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 4006874:	01000784 	movi	r4,30
 4006878:	4013aac0 	call	4013aac <usleep>
    SCL_HIGH(clk_base);  // clock high
 400687c:	e0bffe17 	ldw	r2,-8(fp)
 4006880:	00c00044 	movi	r3,1
 4006884:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 4006888:	01000784 	movi	r4,30
 400688c:	4013aac0 	call	4013aac <usleep>
    SDA_HIGH(data_base); // data high
 4006890:	e0bfff17 	ldw	r2,-4(fp)
 4006894:	00c00044 	movi	r3,1
 4006898:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 400689c:	01000784 	movi	r4,30
 40068a0:	4013aac0 	call	4013aac <usleep>
 //   SDA_DIR_IN(data_base);  // data read modes
}
 40068a4:	e037883a 	mov	sp,fp
 40068a8:	dfc00117 	ldw	ra,4(sp)
 40068ac:	df000017 	ldw	fp,0(sp)
 40068b0:	dec00204 	addi	sp,sp,8
 40068b4:	f800283a 	ret

040068b8 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 40068b8:	defff804 	addi	sp,sp,-32
 40068bc:	dfc00715 	stw	ra,28(sp)
 40068c0:	df000615 	stw	fp,24(sp)
 40068c4:	df000604 	addi	fp,sp,24
 40068c8:	e13ffd15 	stw	r4,-12(fp)
 40068cc:	e17ffe15 	stw	r5,-8(fp)
 40068d0:	3005883a 	mov	r2,r6
 40068d4:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 40068d8:	00bfe004 	movi	r2,-128
 40068dc:	e0bffa05 	stb	r2,-24(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 40068e0:	e0bffe17 	ldw	r2,-8(fp)
 40068e4:	10800104 	addi	r2,r2,4
 40068e8:	00c00044 	movi	r3,1
 40068ec:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
 40068f0:	e03ffb15 	stw	zero,-20(fp)
 40068f4:	00002106 	br	400697c <i2c_write+0xc4>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 40068f8:	e0bffd17 	ldw	r2,-12(fp)
 40068fc:	0007883a 	mov	r3,zero
 4006900:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 4006904:	e0ffff03 	ldbu	r3,-4(fp)
 4006908:	e0bffa03 	ldbu	r2,-24(fp)
 400690c:	1884703a 	and	r2,r3,r2
 4006910:	10803fcc 	andi	r2,r2,255
 4006914:	10000426 	beq	r2,zero,4006928 <i2c_write+0x70>
            SDA_HIGH(data_base);
 4006918:	e0bffe17 	ldw	r2,-8(fp)
 400691c:	00c00044 	movi	r3,1
 4006920:	10c00035 	stwio	r3,0(r2)
 4006924:	00000306 	br	4006934 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
 4006928:	e0bffe17 	ldw	r2,-8(fp)
 400692c:	0007883a 	mov	r3,zero
 4006930:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 4006934:	e0bffa03 	ldbu	r2,-24(fp)
 4006938:	1004d07a 	srli	r2,r2,1
 400693c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_DELAY;
 4006940:	01000784 	movi	r4,30
 4006944:	4013aac0 	call	4013aac <usleep>
        SCL_HIGH(clk_base);
 4006948:	e0bffd17 	ldw	r2,-12(fp)
 400694c:	00c00044 	movi	r3,1
 4006950:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4006954:	01000784 	movi	r4,30
 4006958:	4013aac0 	call	4013aac <usleep>
        SCL_LOW(clk_base);
 400695c:	e0bffd17 	ldw	r2,-12(fp)
 4006960:	0007883a 	mov	r3,zero
 4006964:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4006968:	01000784 	movi	r4,30
 400696c:	4013aac0 	call	4013aac <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 4006970:	e0bffb17 	ldw	r2,-20(fp)
 4006974:	10800044 	addi	r2,r2,1
 4006978:	e0bffb15 	stw	r2,-20(fp)
 400697c:	e0bffb17 	ldw	r2,-20(fp)
 4006980:	10800210 	cmplti	r2,r2,8
 4006984:	103fdc1e 	bne	r2,zero,40068f8 <__reset+0xfb0058f8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 4006988:	e0bffe17 	ldw	r2,-8(fp)
 400698c:	10800104 	addi	r2,r2,4
 4006990:	0007883a 	mov	r3,zero
 4006994:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
    SCL_DELAY;
 4006998:	01000784 	movi	r4,30
 400699c:	4013aac0 	call	4013aac <usleep>
//	while(SDA_READ(data_base) && w++ < 1000000){
//	}


    // clock high
    SCL_HIGH(clk_base);  // clock high
 40069a0:	e0bffd17 	ldw	r2,-12(fp)
 40069a4:	00c00044 	movi	r3,1
 40069a8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 40069ac:	01000784 	movi	r4,30
 40069b0:	4013aac0 	call	4013aac <usleep>
    SCL_DELAY;  // clock high delay
 40069b4:	01000784 	movi	r4,30
 40069b8:	4013aac0 	call	4013aac <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 40069bc:	e0bffe17 	ldw	r2,-8(fp)
 40069c0:	10800037 	ldwio	r2,0(r2)
 40069c4:	1005003a 	cmpeq	r2,r2,zero
 40069c8:	10803fcc 	andi	r2,r2,255
 40069cc:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 40069d0:	e0bffd17 	ldw	r2,-12(fp)
 40069d4:	0007883a 	mov	r3,zero
 40069d8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 40069dc:	01000784 	movi	r4,30
 40069e0:	4013aac0 	call	4013aac <usleep>
    return bAck;
 40069e4:	e0bffc17 	ldw	r2,-16(fp)
}    
 40069e8:	e037883a 	mov	sp,fp
 40069ec:	dfc00117 	ldw	ra,4(sp)
 40069f0:	df000017 	ldw	fp,0(sp)
 40069f4:	dec00204 	addi	sp,sp,8
 40069f8:	f800283a 	ret

040069fc <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 40069fc:	defff804 	addi	sp,sp,-32
 4006a00:	dfc00715 	stw	ra,28(sp)
 4006a04:	df000615 	stw	fp,24(sp)
 4006a08:	df000604 	addi	fp,sp,24
 4006a0c:	e13ffc15 	stw	r4,-16(fp)
 4006a10:	e17ffd15 	stw	r5,-12(fp)
 4006a14:	e1bffe15 	stw	r6,-8(fp)
 4006a18:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 4006a1c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    SDA_DIR_IN(data_base);  // set data read mode
 4006a20:	e0bffd17 	ldw	r2,-12(fp)
 4006a24:	10800104 	addi	r2,r2,4
 4006a28:	0007883a 	mov	r3,zero
 4006a2c:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 4006a30:	e0bffc17 	ldw	r2,-16(fp)
 4006a34:	0007883a 	mov	r3,zero
 4006a38:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 4006a3c:	01000784 	movi	r4,30
 4006a40:	4013aac0 	call	4013aac <usleep>

    for(i=0;i<8;i++){
 4006a44:	e03ffb15 	stw	zero,-20(fp)
 4006a48:	00001606 	br	4006aa4 <i2c_read+0xa8>
        Data <<= 1;
 4006a4c:	e0bffa03 	ldbu	r2,-24(fp)
 4006a50:	1085883a 	add	r2,r2,r2
 4006a54:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 4006a58:	e0bffc17 	ldw	r2,-16(fp)
 4006a5c:	00c00044 	movi	r3,1
 4006a60:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4006a64:	01000784 	movi	r4,30
 4006a68:	4013aac0 	call	4013aac <usleep>
        if (SDA_READ(data_base))  // read data   
 4006a6c:	e0bffd17 	ldw	r2,-12(fp)
 4006a70:	10800037 	ldwio	r2,0(r2)
 4006a74:	10000326 	beq	r2,zero,4006a84 <i2c_read+0x88>
            Data |= 0x01;
 4006a78:	e0bffa03 	ldbu	r2,-24(fp)
 4006a7c:	10800054 	ori	r2,r2,1
 4006a80:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 4006a84:	e0bffc17 	ldw	r2,-16(fp)
 4006a88:	0007883a 	mov	r3,zero
 4006a8c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4006a90:	01000784 	movi	r4,30
 4006a94:	4013aac0 	call	4013aac <usleep>
    // assume SCL = low
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 4006a98:	e0bffb17 	ldw	r2,-20(fp)
 4006a9c:	10800044 	addi	r2,r2,1
 4006aa0:	e0bffb15 	stw	r2,-20(fp)
 4006aa4:	e0bffb17 	ldw	r2,-20(fp)
 4006aa8:	10800210 	cmplti	r2,r2,8
 4006aac:	103fe71e 	bne	r2,zero,4006a4c <__reset+0xfb005a4c>
            Data |= 0x01;
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 4006ab0:	e0bffc17 	ldw	r2,-16(fp)
 4006ab4:	0007883a 	mov	r3,zero
 4006ab8:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 4006abc:	e0bffd17 	ldw	r2,-12(fp)
 4006ac0:	10800104 	addi	r2,r2,4
 4006ac4:	00c00044 	movi	r3,1
 4006ac8:	10c00035 	stwio	r3,0(r2)
    if (bAck)
 4006acc:	e0bfff17 	ldw	r2,-4(fp)
 4006ad0:	10000426 	beq	r2,zero,4006ae4 <i2c_read+0xe8>
        SDA_LOW(data_base);
 4006ad4:	e0bffd17 	ldw	r2,-12(fp)
 4006ad8:	0007883a 	mov	r3,zero
 4006adc:	10c00035 	stwio	r3,0(r2)
 4006ae0:	00000306 	br	4006af0 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 4006ae4:	e0bffd17 	ldw	r2,-12(fp)
 4006ae8:	00c00044 	movi	r3,1
 4006aec:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 4006af0:	e0bffc17 	ldw	r2,-16(fp)
 4006af4:	00c00044 	movi	r3,1
 4006af8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 4006afc:	01000784 	movi	r4,30
 4006b00:	4013aac0 	call	4013aac <usleep>
    SCL_LOW(clk_base); // clock low
 4006b04:	e0bffc17 	ldw	r2,-16(fp)
 4006b08:	0007883a 	mov	r3,zero
 4006b0c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 4006b10:	01000784 	movi	r4,30
 4006b14:	4013aac0 	call	4013aac <usleep>
    SDA_LOW(data_base);  // data low
 4006b18:	e0bffd17 	ldw	r2,-12(fp)
 4006b1c:	0007883a 	mov	r3,zero
 4006b20:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 4006b24:	01000784 	movi	r4,30
 4006b28:	4013aac0 	call	4013aac <usleep>
//    SDA_DIR_IN;  // set data read mode
    *pData = Data;
 4006b2c:	e0bffe17 	ldw	r2,-8(fp)
 4006b30:	e0fffa03 	ldbu	r3,-24(fp)
 4006b34:	10c00005 	stb	r3,0(r2)
}
 4006b38:	e037883a 	mov	sp,fp
 4006b3c:	dfc00117 	ldw	ra,4(sp)
 4006b40:	df000017 	ldw	fp,0(sp)
 4006b44:	dec00204 	addi	sp,sp,8
 4006b48:	f800283a 	ret

04006b4c <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
 4006b4c:	defff704 	addi	sp,sp,-36
 4006b50:	dfc00815 	stw	ra,32(sp)
 4006b54:	df000715 	stw	fp,28(sp)
 4006b58:	df000704 	addi	fp,sp,28
 4006b5c:	e13ffb15 	stw	r4,-20(fp)
 4006b60:	e17ffc15 	stw	r5,-16(fp)
 4006b64:	3007883a 	mov	r3,r6
 4006b68:	3805883a 	mov	r2,r7
 4006b6c:	e1000217 	ldw	r4,8(fp)
 4006b70:	e0fffd05 	stb	r3,-12(fp)
 4006b74:	e0bffe0d 	sth	r2,-8(fp)
 4006b78:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
 4006b7c:	00800044 	movi	r2,1
 4006b80:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4006b84:	e0bffe0b 	ldhu	r2,-8(fp)
 4006b88:	1004d23a 	srli	r2,r2,8
 4006b8c:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4006b90:	e0bffe0b 	ldhu	r2,-8(fp)
 4006b94:	e0bffa45 	stb	r2,-23(fp)

    i2c_start(clk_base, data_base);
 4006b98:	e13ffb17 	ldw	r4,-20(fp)
 4006b9c:	e17ffc17 	ldw	r5,-16(fp)
 4006ba0:	40067bc0 	call	40067bc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006ba4:	e0bffd03 	ldbu	r2,-12(fp)
 4006ba8:	10803fcc 	andi	r2,r2,255
 4006bac:	e13ffb17 	ldw	r4,-20(fp)
 4006bb0:	e17ffc17 	ldw	r5,-16(fp)
 4006bb4:	100d883a 	mov	r6,r2
 4006bb8:	40068b80 	call	40068b8 <i2c_write>
 4006bbc:	1000041e 	bne	r2,zero,4006bd0 <I2CL_Write+0x84>
        bSuccess = FALSE;
 4006bc0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4006bc4:	010101f4 	movhi	r4,1031
 4006bc8:	21140304 	addi	r4,r4,20492
 4006bcc:	4007d240 	call	4007d24 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4006bd0:	e0bff917 	ldw	r2,-28(fp)
 4006bd4:	10000a26 	beq	r2,zero,4006c00 <I2CL_Write+0xb4>
 4006bd8:	e0bffa03 	ldbu	r2,-24(fp)
 4006bdc:	e13ffb17 	ldw	r4,-20(fp)
 4006be0:	e17ffc17 	ldw	r5,-16(fp)
 4006be4:	100d883a 	mov	r6,r2
 4006be8:	40068b80 	call	40068b8 <i2c_write>
 4006bec:	1000041e 	bne	r2,zero,4006c00 <I2CL_Write+0xb4>
        bSuccess = FALSE;
 4006bf0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4006bf4:	010101f4 	movhi	r4,1031
 4006bf8:	21146104 	addi	r4,r4,20868
 4006bfc:	4007d240 	call	4007d24 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4006c00:	e0bff917 	ldw	r2,-28(fp)
 4006c04:	10000a26 	beq	r2,zero,4006c30 <I2CL_Write+0xe4>
 4006c08:	e0bffa43 	ldbu	r2,-23(fp)
 4006c0c:	e13ffb17 	ldw	r4,-20(fp)
 4006c10:	e17ffc17 	ldw	r5,-16(fp)
 4006c14:	100d883a 	mov	r6,r2
 4006c18:	40068b80 	call	40068b8 <i2c_write>
 4006c1c:	1000041e 	bne	r2,zero,4006c30 <I2CL_Write+0xe4>
        bSuccess = FALSE;
 4006c20:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4006c24:	010101f4 	movhi	r4,1031
 4006c28:	21146b04 	addi	r4,r4,20908
 4006c2c:	4007d240 	call	4007d24 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 4006c30:	e0bff917 	ldw	r2,-28(fp)
 4006c34:	10000a26 	beq	r2,zero,4006c60 <I2CL_Write+0x114>
 4006c38:	e0bfff03 	ldbu	r2,-4(fp)
 4006c3c:	e13ffb17 	ldw	r4,-20(fp)
 4006c40:	e17ffc17 	ldw	r5,-16(fp)
 4006c44:	100d883a 	mov	r6,r2
 4006c48:	40068b80 	call	40068b8 <i2c_write>
 4006c4c:	1000041e 	bne	r2,zero,4006c60 <I2CL_Write+0x114>
        bSuccess = FALSE;
 4006c50:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4006c54:	010101f4 	movhi	r4,1031
 4006c58:	21141404 	addi	r4,r4,20560
 4006c5c:	4007d240 	call	4007d24 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4006c60:	e13ffb17 	ldw	r4,-20(fp)
 4006c64:	e17ffc17 	ldw	r5,-16(fp)
 4006c68:	40068400 	call	4006840 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4006c6c:	0106d604 	movi	r4,7000
 4006c70:	4013aac0 	call	4013aac <usleep>
    
    return bSuccess;
 4006c74:	e0bff917 	ldw	r2,-28(fp)
    
}
 4006c78:	e037883a 	mov	sp,fp
 4006c7c:	dfc00117 	ldw	ra,4(sp)
 4006c80:	df000017 	ldw	fp,0(sp)
 4006c84:	dec00204 	addi	sp,sp,8
 4006c88:	f800283a 	ret

04006c8c <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
 4006c8c:	defff804 	addi	sp,sp,-32
 4006c90:	dfc00715 	stw	ra,28(sp)
 4006c94:	df000615 	stw	fp,24(sp)
 4006c98:	df000604 	addi	fp,sp,24
 4006c9c:	e13ffc15 	stw	r4,-16(fp)
 4006ca0:	e17ffd15 	stw	r5,-12(fp)
 4006ca4:	3007883a 	mov	r3,r6
 4006ca8:	3805883a 	mov	r2,r7
 4006cac:	e0fffe05 	stb	r3,-8(fp)
 4006cb0:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 4006cb4:	00800044 	movi	r2,1
 4006cb8:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4006cbc:	e0bfff0b 	ldhu	r2,-4(fp)
 4006cc0:	1004d23a 	srli	r2,r2,8
 4006cc4:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4006cc8:	e0bfff0b 	ldhu	r2,-4(fp)
 4006ccc:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
 4006cd0:	e13ffc17 	ldw	r4,-16(fp)
 4006cd4:	e17ffd17 	ldw	r5,-12(fp)
 4006cd8:	40067bc0 	call	40067bc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006cdc:	e0bffe03 	ldbu	r2,-8(fp)
 4006ce0:	10803fcc 	andi	r2,r2,255
 4006ce4:	e13ffc17 	ldw	r4,-16(fp)
 4006ce8:	e17ffd17 	ldw	r5,-12(fp)
 4006cec:	100d883a 	mov	r6,r2
 4006cf0:	40068b80 	call	40068b8 <i2c_write>
 4006cf4:	1000041e 	bne	r2,zero,4006d08 <I2CL_Read+0x7c>
        bSuccess = FALSE;
 4006cf8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4006cfc:	010101f4 	movhi	r4,1031
 4006d00:	21140304 	addi	r4,r4,20492
 4006d04:	4007d240 	call	4007d24 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4006d08:	e0bffa17 	ldw	r2,-24(fp)
 4006d0c:	10000a26 	beq	r2,zero,4006d38 <I2CL_Read+0xac>
 4006d10:	e0bffb03 	ldbu	r2,-20(fp)
 4006d14:	e13ffc17 	ldw	r4,-16(fp)
 4006d18:	e17ffd17 	ldw	r5,-12(fp)
 4006d1c:	100d883a 	mov	r6,r2
 4006d20:	40068b80 	call	40068b8 <i2c_write>
 4006d24:	1000041e 	bne	r2,zero,4006d38 <I2CL_Read+0xac>
        bSuccess = FALSE;
 4006d28:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4006d2c:	010101f4 	movhi	r4,1031
 4006d30:	21146104 	addi	r4,r4,20868
 4006d34:	4007d240 	call	4007d24 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4006d38:	e0bffa17 	ldw	r2,-24(fp)
 4006d3c:	10000a26 	beq	r2,zero,4006d68 <I2CL_Read+0xdc>
 4006d40:	e0bffb43 	ldbu	r2,-19(fp)
 4006d44:	e13ffc17 	ldw	r4,-16(fp)
 4006d48:	e17ffd17 	ldw	r5,-12(fp)
 4006d4c:	100d883a 	mov	r6,r2
 4006d50:	40068b80 	call	40068b8 <i2c_write>
 4006d54:	1000041e 	bne	r2,zero,4006d68 <I2CL_Read+0xdc>
        bSuccess = FALSE;
 4006d58:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4006d5c:	010101f4 	movhi	r4,1031
 4006d60:	21146b04 	addi	r4,r4,20908
 4006d64:	4007d240 	call	4007d24 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4006d68:	e13ffc17 	ldw	r4,-16(fp)
 4006d6c:	e17ffd17 	ldw	r5,-12(fp)
 4006d70:	40067bc0 	call	40067bc <i2c_start>
    DeviceAddr |= 1; // Read
 4006d74:	e0bffe03 	ldbu	r2,-8(fp)
 4006d78:	10800054 	ori	r2,r2,1
 4006d7c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4006d80:	e0bffa17 	ldw	r2,-24(fp)
 4006d84:	10000b26 	beq	r2,zero,4006db4 <I2CL_Read+0x128>
 4006d88:	e0bffe03 	ldbu	r2,-8(fp)
 4006d8c:	10803fcc 	andi	r2,r2,255
 4006d90:	e13ffc17 	ldw	r4,-16(fp)
 4006d94:	e17ffd17 	ldw	r5,-12(fp)
 4006d98:	100d883a 	mov	r6,r2
 4006d9c:	40068b80 	call	40068b8 <i2c_write>
 4006da0:	1000041e 	bne	r2,zero,4006db4 <I2CL_Read+0x128>
        bSuccess = FALSE;
 4006da4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 4006da8:	010101f4 	movhi	r4,1031
 4006dac:	21143704 	addi	r4,r4,20700
 4006db0:	4007d240 	call	4007d24 <myprintf>
    }
    
    if (bSuccess){
 4006db4:	e0bffa17 	ldw	r2,-24(fp)
 4006db8:	10000526 	beq	r2,zero,4006dd0 <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 4006dbc:	e13ffc17 	ldw	r4,-16(fp)
 4006dc0:	e17ffd17 	ldw	r5,-12(fp)
 4006dc4:	e1800217 	ldw	r6,8(fp)
 4006dc8:	000f883a 	mov	r7,zero
 4006dcc:	40069fc0 	call	40069fc <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 4006dd0:	e13ffc17 	ldw	r4,-16(fp)
 4006dd4:	e17ffd17 	ldw	r5,-12(fp)
 4006dd8:	40068400 	call	4006840 <i2c_stop>
    
    return bSuccess;    
 4006ddc:	e0bffa17 	ldw	r2,-24(fp)
}
 4006de0:	e037883a 	mov	sp,fp
 4006de4:	dfc00117 	ldw	ra,4(sp)
 4006de8:	df000017 	ldw	fp,0(sp)
 4006dec:	dec00204 	addi	sp,sp,8
 4006df0:	f800283a 	ret

04006df4 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 4006df4:	defff604 	addi	sp,sp,-40
 4006df8:	dfc00915 	stw	ra,36(sp)
 4006dfc:	df000815 	stw	fp,32(sp)
 4006e00:	df000804 	addi	fp,sp,32
 4006e04:	e13ffb15 	stw	r4,-20(fp)
 4006e08:	e17ffc15 	stw	r5,-16(fp)
 4006e0c:	3007883a 	mov	r3,r6
 4006e10:	3805883a 	mov	r2,r7
 4006e14:	e1000317 	ldw	r4,12(fp)
 4006e18:	e0fffd05 	stb	r3,-12(fp)
 4006e1c:	e0bffe0d 	sth	r2,-8(fp)
 4006e20:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
 4006e24:	00800044 	movi	r2,1
 4006e28:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4006e2c:	e0bffe0b 	ldhu	r2,-8(fp)
 4006e30:	1004d23a 	srli	r2,r2,8
 4006e34:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
 4006e38:	e0bffe0b 	ldhu	r2,-8(fp)
 4006e3c:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4006e40:	e13ffb17 	ldw	r4,-20(fp)
 4006e44:	e17ffc17 	ldw	r5,-16(fp)
 4006e48:	40067bc0 	call	40067bc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006e4c:	e0bffd03 	ldbu	r2,-12(fp)
 4006e50:	10803fcc 	andi	r2,r2,255
 4006e54:	e13ffb17 	ldw	r4,-20(fp)
 4006e58:	e17ffc17 	ldw	r5,-16(fp)
 4006e5c:	100d883a 	mov	r6,r2
 4006e60:	40068b80 	call	40068b8 <i2c_write>
 4006e64:	1000041e 	bne	r2,zero,4006e78 <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
 4006e68:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4006e6c:	010101f4 	movhi	r4,1031
 4006e70:	21140304 	addi	r4,r4,20492
 4006e74:	4007d240 	call	4007d24 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4006e78:	e0bff917 	ldw	r2,-28(fp)
 4006e7c:	10000a26 	beq	r2,zero,4006ea8 <I2CL_MultipleRead+0xb4>
 4006e80:	e0bffa03 	ldbu	r2,-24(fp)
 4006e84:	e13ffb17 	ldw	r4,-20(fp)
 4006e88:	e17ffc17 	ldw	r5,-16(fp)
 4006e8c:	100d883a 	mov	r6,r2
 4006e90:	40068b80 	call	40068b8 <i2c_write>
 4006e94:	1000041e 	bne	r2,zero,4006ea8 <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
 4006e98:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4006e9c:	010101f4 	movhi	r4,1031
 4006ea0:	21146104 	addi	r4,r4,20868
 4006ea4:	4007d240 	call	4007d24 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4006ea8:	e0bff917 	ldw	r2,-28(fp)
 4006eac:	10000a26 	beq	r2,zero,4006ed8 <I2CL_MultipleRead+0xe4>
 4006eb0:	e0bffa43 	ldbu	r2,-23(fp)
 4006eb4:	e13ffb17 	ldw	r4,-20(fp)
 4006eb8:	e17ffc17 	ldw	r5,-16(fp)
 4006ebc:	100d883a 	mov	r6,r2
 4006ec0:	40068b80 	call	40068b8 <i2c_write>
 4006ec4:	1000041e 	bne	r2,zero,4006ed8 <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
 4006ec8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4006ecc:	010101f4 	movhi	r4,1031
 4006ed0:	21146b04 	addi	r4,r4,20908
 4006ed4:	4007d240 	call	4007d24 <myprintf>
    }    
    if (bSuccess)        
 4006ed8:	e0bff917 	ldw	r2,-28(fp)
 4006edc:	10000326 	beq	r2,zero,4006eec <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
 4006ee0:	e13ffb17 	ldw	r4,-20(fp)
 4006ee4:	e17ffc17 	ldw	r5,-16(fp)
 4006ee8:	40067bc0 	call	40067bc <i2c_start>
    DeviceAddr |= 1; // Read
 4006eec:	e0bffd03 	ldbu	r2,-12(fp)
 4006ef0:	10800054 	ori	r2,r2,1
 4006ef4:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4006ef8:	e0bff917 	ldw	r2,-28(fp)
 4006efc:	10000b26 	beq	r2,zero,4006f2c <I2CL_MultipleRead+0x138>
 4006f00:	e0bffd03 	ldbu	r2,-12(fp)
 4006f04:	10803fcc 	andi	r2,r2,255
 4006f08:	e13ffb17 	ldw	r4,-20(fp)
 4006f0c:	e17ffc17 	ldw	r5,-16(fp)
 4006f10:	100d883a 	mov	r6,r2
 4006f14:	40068b80 	call	40068b8 <i2c_write>
 4006f18:	1000041e 	bne	r2,zero,4006f2c <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
 4006f1c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
 4006f20:	010101f4 	movhi	r4,1031
 4006f24:	21147504 	addi	r4,r4,20948
 4006f28:	4007d240 	call	4007d24 <myprintf>
    }
    
    if (bSuccess){
 4006f2c:	e0bff917 	ldw	r2,-28(fp)
 4006f30:	10001726 	beq	r2,zero,4006f90 <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
 4006f34:	e03ff815 	stw	zero,-32(fp)
 4006f38:	00001006 	br	4006f7c <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 4006f3c:	e0bff817 	ldw	r2,-32(fp)
 4006f40:	e0c00217 	ldw	r3,8(fp)
 4006f44:	1887883a 	add	r3,r3,r2
 4006f48:	e0bfff0b 	ldhu	r2,-4(fp)
 4006f4c:	113fffc4 	addi	r4,r2,-1
 4006f50:	e0bff817 	ldw	r2,-32(fp)
 4006f54:	2084c03a 	cmpne	r2,r4,r2
 4006f58:	10803fcc 	andi	r2,r2,255
 4006f5c:	e13ffb17 	ldw	r4,-20(fp)
 4006f60:	e17ffc17 	ldw	r5,-16(fp)
 4006f64:	180d883a 	mov	r6,r3
 4006f68:	100f883a 	mov	r7,r2
 4006f6c:	40069fc0 	call	40069fc <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 4006f70:	e0bff817 	ldw	r2,-32(fp)
 4006f74:	10800044 	addi	r2,r2,1
 4006f78:	e0bff815 	stw	r2,-32(fp)
 4006f7c:	e0bfff0b 	ldhu	r2,-4(fp)
 4006f80:	e0fff817 	ldw	r3,-32(fp)
 4006f84:	1880020e 	bge	r3,r2,4006f90 <I2CL_MultipleRead+0x19c>
 4006f88:	e0bff917 	ldw	r2,-28(fp)
 4006f8c:	103feb1e 	bne	r2,zero,4006f3c <__reset+0xfb005f3c>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 4006f90:	e13ffb17 	ldw	r4,-20(fp)
 4006f94:	e17ffc17 	ldw	r5,-16(fp)
 4006f98:	40068400 	call	4006840 <i2c_stop>
    
    return bSuccess;    
 4006f9c:	e0bff917 	ldw	r2,-28(fp)
    
} 
 4006fa0:	e037883a 	mov	sp,fp
 4006fa4:	dfc00117 	ldw	ra,4(sp)
 4006fa8:	df000017 	ldw	fp,0(sp)
 4006fac:	dec00204 	addi	sp,sp,8
 4006fb0:	f800283a 	ret

04006fb4 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 4006fb4:	defff604 	addi	sp,sp,-40
 4006fb8:	dfc00915 	stw	ra,36(sp)
 4006fbc:	df000815 	stw	fp,32(sp)
 4006fc0:	df000804 	addi	fp,sp,32
 4006fc4:	e13ffb15 	stw	r4,-20(fp)
 4006fc8:	e17ffc15 	stw	r5,-16(fp)
 4006fcc:	3007883a 	mov	r3,r6
 4006fd0:	3805883a 	mov	r2,r7
 4006fd4:	e1000317 	ldw	r4,12(fp)
 4006fd8:	e0fffd05 	stb	r3,-12(fp)
 4006fdc:	e0bffe0d 	sth	r2,-8(fp)
 4006fe0:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
 4006fe4:	00800044 	movi	r2,1
 4006fe8:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4006fec:	e0bffe0b 	ldhu	r2,-8(fp)
 4006ff0:	1004d23a 	srli	r2,r2,8
 4006ff4:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4006ff8:	e0bffe0b 	ldhu	r2,-8(fp)
 4006ffc:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
 4007000:	e13ffb17 	ldw	r4,-20(fp)
 4007004:	e17ffc17 	ldw	r5,-16(fp)
 4007008:	40067bc0 	call	40067bc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 400700c:	e0bffd03 	ldbu	r2,-12(fp)
 4007010:	10803fcc 	andi	r2,r2,255
 4007014:	e13ffb17 	ldw	r4,-20(fp)
 4007018:	e17ffc17 	ldw	r5,-16(fp)
 400701c:	100d883a 	mov	r6,r2
 4007020:	40068b80 	call	40068b8 <i2c_write>
 4007024:	1000041e 	bne	r2,zero,4007038 <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
 4007028:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 400702c:	010101f4 	movhi	r4,1031
 4007030:	21140304 	addi	r4,r4,20492
 4007034:	4007d240 	call	4007d24 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4007038:	e0bff817 	ldw	r2,-32(fp)
 400703c:	10000a26 	beq	r2,zero,4007068 <I2CL_MultipleWrite+0xb4>
 4007040:	e0bffa03 	ldbu	r2,-24(fp)
 4007044:	e13ffb17 	ldw	r4,-20(fp)
 4007048:	e17ffc17 	ldw	r5,-16(fp)
 400704c:	100d883a 	mov	r6,r2
 4007050:	40068b80 	call	40068b8 <i2c_write>
 4007054:	1000041e 	bne	r2,zero,4007068 <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
 4007058:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 400705c:	010101f4 	movhi	r4,1031
 4007060:	21146104 	addi	r4,r4,20868
 4007064:	4007d240 	call	4007d24 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4007068:	e0bff817 	ldw	r2,-32(fp)
 400706c:	10000a26 	beq	r2,zero,4007098 <I2CL_MultipleWrite+0xe4>
 4007070:	e0bffa43 	ldbu	r2,-23(fp)
 4007074:	e13ffb17 	ldw	r4,-20(fp)
 4007078:	e17ffc17 	ldw	r5,-16(fp)
 400707c:	100d883a 	mov	r6,r2
 4007080:	40068b80 	call	40068b8 <i2c_write>
 4007084:	1000041e 	bne	r2,zero,4007098 <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
 4007088:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 400708c:	010101f4 	movhi	r4,1031
 4007090:	21146b04 	addi	r4,r4,20908
 4007094:	4007d240 	call	4007d24 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
 4007098:	e0bff817 	ldw	r2,-32(fp)
 400709c:	10001926 	beq	r2,zero,4007104 <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
 40070a0:	e03ff915 	stw	zero,-28(fp)
 40070a4:	00000d06 	br	40070dc <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
 40070a8:	e0bff917 	ldw	r2,-28(fp)
 40070ac:	e0c00217 	ldw	r3,8(fp)
 40070b0:	1885883a 	add	r2,r3,r2
 40070b4:	10800003 	ldbu	r2,0(r2)
 40070b8:	10803fcc 	andi	r2,r2,255
 40070bc:	e13ffb17 	ldw	r4,-20(fp)
 40070c0:	e17ffc17 	ldw	r5,-16(fp)
 40070c4:	100d883a 	mov	r6,r2
 40070c8:	40068b80 	call	40068b8 <i2c_write>
 40070cc:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
 40070d0:	e0bff917 	ldw	r2,-28(fp)
 40070d4:	10800044 	addi	r2,r2,1
 40070d8:	e0bff915 	stw	r2,-28(fp)
 40070dc:	e0bfff0b 	ldhu	r2,-4(fp)
 40070e0:	e0fff917 	ldw	r3,-28(fp)
 40070e4:	1880020e 	bge	r3,r2,40070f0 <I2CL_MultipleWrite+0x13c>
 40070e8:	e0bff817 	ldw	r2,-32(fp)
 40070ec:	103fee1e 	bne	r2,zero,40070a8 <__reset+0xfb0060a8>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
 40070f0:	e0bff817 	ldw	r2,-32(fp)
 40070f4:	1000031e 	bne	r2,zero,4007104 <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 40070f8:	010101f4 	movhi	r4,1031
 40070fc:	21141404 	addi	r4,r4,20560
 4007100:	4007d240 	call	4007d24 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4007104:	e13ffb17 	ldw	r4,-20(fp)
 4007108:	e17ffc17 	ldw	r5,-16(fp)
 400710c:	40068400 	call	4006840 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4007110:	0106d604 	movi	r4,7000
 4007114:	4013aac0 	call	4013aac <usleep>
    
    return bSuccess;
 4007118:	e0bff817 	ldw	r2,-32(fp)
    
}
 400711c:	e037883a 	mov	sp,fp
 4007120:	dfc00117 	ldw	ra,4(sp)
 4007124:	df000017 	ldw	fp,0(sp)
 4007128:	dec00204 	addi	sp,sp,8
 400712c:	f800283a 	ret

04007130 <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
 4007130:	defff604 	addi	sp,sp,-40
 4007134:	dfc00915 	stw	ra,36(sp)
 4007138:	df000815 	stw	fp,32(sp)
 400713c:	df000804 	addi	fp,sp,32
 4007140:	e13ffc15 	stw	r4,-16(fp)
 4007144:	e17ffd15 	stw	r5,-12(fp)
 4007148:	3007883a 	mov	r3,r6
 400714c:	3805883a 	mov	r2,r7
 4007150:	e0fffe05 	stb	r3,-8(fp)
 4007154:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 4007158:	e0fffe07 	ldb	r3,-8(fp)
 400715c:	e0bfff0b 	ldhu	r2,-4(fp)
 4007160:	e13ffb04 	addi	r4,fp,-20
 4007164:	d9000015 	stw	r4,0(sp)
 4007168:	01000084 	movi	r4,2
 400716c:	d9000115 	stw	r4,4(sp)
 4007170:	e13ffc17 	ldw	r4,-16(fp)
 4007174:	e17ffd17 	ldw	r5,-12(fp)
 4007178:	180d883a 	mov	r6,r3
 400717c:	100f883a 	mov	r7,r2
 4007180:	4006df40 	call	4006df4 <I2CL_MultipleRead>
 4007184:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
 4007188:	e0bffa17 	ldw	r2,-24(fp)
 400718c:	10000a26 	beq	r2,zero,40071b8 <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
 4007190:	e0bffb03 	ldbu	r2,-20(fp)
 4007194:	10803fcc 	andi	r2,r2,255
 4007198:	1004923a 	slli	r2,r2,8
 400719c:	1007883a 	mov	r3,r2
 40071a0:	e0bffb43 	ldbu	r2,-19(fp)
 40071a4:	10803fcc 	andi	r2,r2,255
 40071a8:	1884b03a 	or	r2,r3,r2
 40071ac:	1007883a 	mov	r3,r2
 40071b0:	e0800217 	ldw	r2,8(fp)
 40071b4:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
 40071b8:	e0bffa17 	ldw	r2,-24(fp)
}
 40071bc:	e037883a 	mov	sp,fp
 40071c0:	dfc00117 	ldw	ra,4(sp)
 40071c4:	df000017 	ldw	fp,0(sp)
 40071c8:	dec00204 	addi	sp,sp,8
 40071cc:	f800283a 	ret

040071d0 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
 40071d0:	defff504 	addi	sp,sp,-44
 40071d4:	dfc00a15 	stw	ra,40(sp)
 40071d8:	df000915 	stw	fp,36(sp)
 40071dc:	df000904 	addi	fp,sp,36
 40071e0:	e13ffb15 	stw	r4,-20(fp)
 40071e4:	e17ffc15 	stw	r5,-16(fp)
 40071e8:	3007883a 	mov	r3,r6
 40071ec:	3805883a 	mov	r2,r7
 40071f0:	e1000217 	ldw	r4,8(fp)
 40071f4:	e0fffd05 	stb	r3,-12(fp)
 40071f8:	e0bffe0d 	sth	r2,-8(fp)
 40071fc:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
 4007200:	e0bfff0b 	ldhu	r2,-4(fp)
 4007204:	1004d23a 	srli	r2,r2,8
 4007208:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
 400720c:	e0bfff0b 	ldhu	r2,-4(fp)
 4007210:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 4007214:	e0fffd07 	ldb	r3,-12(fp)
 4007218:	e0bffe0b 	ldhu	r2,-8(fp)
 400721c:	e13ffa04 	addi	r4,fp,-24
 4007220:	d9000015 	stw	r4,0(sp)
 4007224:	01000084 	movi	r4,2
 4007228:	d9000115 	stw	r4,4(sp)
 400722c:	e13ffb17 	ldw	r4,-20(fp)
 4007230:	e17ffc17 	ldw	r5,-16(fp)
 4007234:	180d883a 	mov	r6,r3
 4007238:	100f883a 	mov	r7,r2
 400723c:	4006fb40 	call	4006fb4 <I2CL_MultipleWrite>
 4007240:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
 4007244:	e0bff917 	ldw	r2,-28(fp)
}
 4007248:	e037883a 	mov	sp,fp
 400724c:	dfc00117 	ldw	ra,4(sp)
 4007250:	df000017 	ldw	fp,0(sp)
 4007254:	dec00204 	addi	sp,sp,8
 4007258:	f800283a 	ret

0400725c <Write32_Data>:

#define SLEEP_TIME 15  //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
 400725c:	defffb04 	addi	sp,sp,-20
 4007260:	df000415 	stw	fp,16(sp)
 4007264:	df000404 	addi	fp,sp,16
 4007268:	e13ffd15 	stw	r4,-12(fp)
 400726c:	e17ffe15 	stw	r5,-8(fp)
 4007270:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4007274:	e0bffe17 	ldw	r2,-8(fp)
 4007278:	1085883a 	add	r2,r2,r2
 400727c:	1085883a 	add	r2,r2,r2
 4007280:	1007883a 	mov	r3,r2
 4007284:	e0bffd17 	ldw	r2,-12(fp)
 4007288:	1885883a 	add	r2,r3,r2
 400728c:	e0ffff17 	ldw	r3,-4(fp)
 4007290:	10c00035 	stwio	r3,0(r2)
    bPass=TRUE;
 4007294:	00800044 	movi	r2,1
 4007298:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
 400729c:	e0bffc17 	ldw	r2,-16(fp)
}
 40072a0:	e037883a 	mov	sp,fp
 40072a4:	df000017 	ldw	fp,0(sp)
 40072a8:	dec00104 	addi	sp,sp,4
 40072ac:	f800283a 	ret

040072b0 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
 40072b0:	defffb04 	addi	sp,sp,-20
 40072b4:	df000415 	stw	fp,16(sp)
 40072b8:	df000404 	addi	fp,sp,16
 40072bc:	e13ffd15 	stw	r4,-12(fp)
 40072c0:	e17ffe15 	stw	r5,-8(fp)
 40072c4:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 40072c8:	e0bffe17 	ldw	r2,-8(fp)
 40072cc:	1085883a 	add	r2,r2,r2
 40072d0:	1085883a 	add	r2,r2,r2
 40072d4:	1007883a 	mov	r3,r2
 40072d8:	e0bffd17 	ldw	r2,-12(fp)
 40072dc:	1885883a 	add	r2,r3,r2
 40072e0:	10c00037 	ldwio	r3,0(r2)
 40072e4:	e0bfff17 	ldw	r2,-4(fp)
 40072e8:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
 40072ec:	00800044 	movi	r2,1
 40072f0:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
 40072f4:	e0bffc17 	ldw	r2,-16(fp)
}
 40072f8:	e037883a 	mov	sp,fp
 40072fc:	df000017 	ldw	fp,0(sp)
 4007300:	dec00104 	addi	sp,sp,4
 4007304:	f800283a 	ret

04007308 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base)
{
 4007308:	defffb04 	addi	sp,sp,-20
 400730c:	dfc00415 	stw	ra,16(sp)
 4007310:	df000315 	stw	fp,12(sp)
 4007314:	df000304 	addi	fp,sp,12
 4007318:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 400731c:	00800044 	movi	r2,1
 4007320:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;
    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
   IOWR(i2c_base, 0,0x18);//write high prescale
 4007324:	e0bfff17 	ldw	r2,-4(fp)
 4007328:	00c00604 	movi	r3,24
 400732c:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1,0x00);//write low prescale
 4007330:	e0bfff17 	ldw	r2,-4(fp)
 4007334:	10800104 	addi	r2,r2,4
 4007338:	0007883a 	mov	r3,zero
 400733c:	10c00035 	stwio	r3,0(r2)
   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2,0x80);
 4007340:	e0bfff17 	ldw	r2,-4(fp)
 4007344:	10800204 	addi	r2,r2,8
 4007348:	00c02004 	movi	r3,128
 400734c:	10c00035 	stwio	r3,0(r2)

    read_data =IORD(i2c_base, 0);
 4007350:	e0bfff17 	ldw	r2,-4(fp)
 4007354:	10800037 	ldwio	r2,0(r2)
 4007358:	e0bffe15 	stw	r2,-8(fp)
    if( (read_data & 0x00ff) != 0x18)
 400735c:	e0bffe17 	ldw	r2,-8(fp)
 4007360:	10803fcc 	andi	r2,r2,255
 4007364:	10800620 	cmpeqi	r2,r2,24
 4007368:	10000a1e 	bne	r2,zero,4007394 <oc_i2c_init+0x8c>
    {
    	bSuccess = FALSE;
 400736c:	e03ffd15 	stw	zero,-12(fp)
       	read_data =IORD(i2c_base, 1);
 4007370:	e0bfff17 	ldw	r2,-4(fp)
 4007374:	10800104 	addi	r2,r2,4
 4007378:	10800037 	ldwio	r2,0(r2)
 400737c:	e0bffe15 	stw	r2,-8(fp)
		if((read_data & 0x00ff) != 0x00){
 4007380:	e0bffe17 	ldw	r2,-8(fp)
 4007384:	10803fcc 	andi	r2,r2,255
 4007388:	10000d26 	beq	r2,zero,40073c0 <oc_i2c_init+0xb8>
			bSuccess = FALSE;
 400738c:	e03ffd15 	stw	zero,-12(fp)
 4007390:	00000b06 	br	40073c0 <oc_i2c_init+0xb8>
		}
    }
    else if (bSuccess){
 4007394:	e0bffd17 	ldw	r2,-12(fp)
 4007398:	10000926 	beq	r2,zero,40073c0 <oc_i2c_init+0xb8>
    	read_data =IORD(i2c_base, 2);
 400739c:	e0bfff17 	ldw	r2,-4(fp)
 40073a0:	10800204 	addi	r2,r2,8
 40073a4:	10800037 	ldwio	r2,0(r2)
 40073a8:	e0bffe15 	stw	r2,-8(fp)
        if( (read_data & 0x00ff) != 0x80 ){
 40073ac:	e0bffe17 	ldw	r2,-8(fp)
 40073b0:	10803fcc 	andi	r2,r2,255
 40073b4:	10802020 	cmpeqi	r2,r2,128
 40073b8:	1000011e 	bne	r2,zero,40073c0 <oc_i2c_init+0xb8>
            bSuccess = FALSE;
 40073bc:	e03ffd15 	stw	zero,-12(fp)
        }
    }

   if (bSuccess)
 40073c0:	e0bffd17 	ldw	r2,-12(fp)
 40073c4:	10000426 	beq	r2,zero,40073d8 <oc_i2c_init+0xd0>
       printf("\nI2C core is enabled! \r\n");
 40073c8:	010101f4 	movhi	r4,1031
 40073cc:	21148004 	addi	r4,r4,20992
 40073d0:	400af240 	call	400af24 <puts>
 40073d4:	00000306 	br	40073e4 <oc_i2c_init+0xdc>
   else
       printf("\nI2C core is not enabled! \r\n");
 40073d8:	010101f4 	movhi	r4,1031
 40073dc:	21148604 	addi	r4,r4,21016
 40073e0:	400af240 	call	400af24 <puts>

   return bSuccess;
 40073e4:	e0bffd17 	ldw	r2,-12(fp)

}
 40073e8:	e037883a 	mov	sp,fp
 40073ec:	dfc00117 	ldw	ra,4(sp)
 40073f0:	df000017 	ldw	fp,0(sp)
 40073f4:	dec00204 	addi	sp,sp,8
 40073f8:	f800283a 	ret

040073fc <ACK_single_check>:

bool  ACK_single_check(alt_32 i2c_base)
{
 40073fc:	defffb04 	addi	sp,sp,-20
 4007400:	dfc00415 	stw	ra,16(sp)
 4007404:	df000315 	stw	fp,12(sp)
 4007408:	df000304 	addi	fp,sp,12
 400740c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 4007410:	00800044 	movi	r2,1
 4007414:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;

    usleep(SLEEP_TIME);
 4007418:	010003c4 	movi	r4,15
 400741c:	4013aac0 	call	4013aac <usleep>
    read_data =IORD(i2c_base, 4);
 4007420:	e0bfff17 	ldw	r2,-4(fp)
 4007424:	10800404 	addi	r2,r2,16
 4007428:	10800037 	ldwio	r2,0(r2)
 400742c:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
 4007430:	e0bffe17 	ldw	r2,-8(fp)
 4007434:	1080008c 	andi	r2,r2,2
 4007438:	10000126 	beq	r2,zero,4007440 <ACK_single_check+0x44>
            bSuccess = FALSE;
 400743c:	e03ffd15 	stw	zero,-12(fp)
     if (bSuccess){
 4007440:	e0bffd17 	ldw	r2,-12(fp)
 4007444:	10000a26 	beq	r2,zero,4007470 <ACK_single_check+0x74>
            usleep(SLEEP_TIME);
 4007448:	010003c4 	movi	r4,15
 400744c:	4013aac0 	call	4013aac <usleep>
            read_data =IORD(i2c_base, 4);
 4007450:	e0bfff17 	ldw	r2,-4(fp)
 4007454:	10800404 	addi	r2,r2,16
 4007458:	10800037 	ldwio	r2,0(r2)
 400745c:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
 4007460:	e0bffe17 	ldw	r2,-8(fp)
 4007464:	1080200c 	andi	r2,r2,128
 4007468:	10000126 	beq	r2,zero,4007470 <ACK_single_check+0x74>
                    bSuccess = FALSE;
 400746c:	e03ffd15 	stw	zero,-12(fp)
     }
    return bSuccess;
 4007470:	e0bffd17 	ldw	r2,-12(fp)
}
 4007474:	e037883a 	mov	sp,fp
 4007478:	dfc00117 	ldw	ra,4(sp)
 400747c:	df000017 	ldw	fp,0(sp)
 4007480:	dec00204 	addi	sp,sp,8
 4007484:	f800283a 	ret

04007488 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
 4007488:	defffb04 	addi	sp,sp,-20
 400748c:	dfc00415 	stw	ra,16(sp)
 4007490:	df000315 	stw	fp,12(sp)
 4007494:	df000304 	addi	fp,sp,12
 4007498:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 400749c:	e03ffd15 	stw	zero,-12(fp)
    int i=0;
 40074a0:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
 40074a4:	00000306 	br	40074b4 <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
 40074a8:	e13fff17 	ldw	r4,-4(fp)
 40074ac:	40073fc0 	call	40073fc <ACK_single_check>
 40074b0:	e0bffd15 	stw	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
 40074b4:	e0bffd17 	ldw	r2,-12(fp)
 40074b8:	1000071e 	bne	r2,zero,40074d8 <ACK_check+0x50>
 40074bc:	e0bffe17 	ldw	r2,-8(fp)
 40074c0:	10800290 	cmplti	r2,r2,10
 40074c4:	e0fffe17 	ldw	r3,-8(fp)
 40074c8:	18c00044 	addi	r3,r3,1
 40074cc:	e0fffe15 	stw	r3,-8(fp)
 40074d0:	10803fcc 	andi	r2,r2,255
 40074d4:	103ff41e 	bne	r2,zero,40074a8 <__reset+0xfb0064a8>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
 40074d8:	e0bffd17 	ldw	r2,-12(fp)
}
 40074dc:	e037883a 	mov	sp,fp
 40074e0:	dfc00117 	ldw	ra,4(sp)
 40074e4:	df000017 	ldw	fp,0(sp)
 40074e8:	dec00204 	addi	sp,sp,8
 40074ec:	f800283a 	ret

040074f0 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
 40074f0:	defff904 	addi	sp,sp,-28
 40074f4:	dfc00615 	stw	ra,24(sp)
 40074f8:	df000515 	stw	fp,20(sp)
 40074fc:	df000504 	addi	fp,sp,20
 4007500:	e13ffc15 	stw	r4,-16(fp)
 4007504:	2807883a 	mov	r3,r5
 4007508:	3005883a 	mov	r2,r6
 400750c:	e1ffff15 	stw	r7,-4(fp)
 4007510:	e0fffd05 	stb	r3,-12(fp)
 4007514:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;
   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
 4007518:	e0bffd03 	ldbu	r2,-12(fp)
 400751c:	e13ffc17 	ldw	r4,-16(fp)
 4007520:	014000c4 	movi	r5,3
 4007524:	100d883a 	mov	r6,r2
 4007528:	400725c0 	call	400725c <Write32_Data>
 400752c:	1000051e 	bne	r2,zero,4007544 <OC_I2C_Write+0x54>
       printf("OC_I2C_Write error[0]\r\n");
 4007530:	010101f4 	movhi	r4,1031
 4007534:	21148d04 	addi	r4,r4,21044
 4007538:	400af240 	call	400af24 <puts>
       return FALSE;
 400753c:	0005883a 	mov	r2,zero
 4007540:	00006506 	br	40076d8 <OC_I2C_Write+0x1e8>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
 4007544:	e13ffc17 	ldw	r4,-16(fp)
 4007548:	01400104 	movi	r5,4
 400754c:	01802404 	movi	r6,144
 4007550:	400725c0 	call	400725c <Write32_Data>
 4007554:	1000051e 	bne	r2,zero,400756c <OC_I2C_Write+0x7c>
       printf("OC_I2C_Write error[1]\r\n");
 4007558:	010101f4 	movhi	r4,1031
 400755c:	21149304 	addi	r4,r4,21068
 4007560:	400af240 	call	400af24 <puts>
       return FALSE;
 4007564:	0005883a 	mov	r2,zero
 4007568:	00005b06 	br	40076d8 <OC_I2C_Write+0x1e8>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 400756c:	e13ffc17 	ldw	r4,-16(fp)
 4007570:	40074880 	call	4007488 <ACK_check>
 4007574:	1000051e 	bne	r2,zero,400758c <OC_I2C_Write+0x9c>
        printf("OC_I2C_Write error[2]\r\n");
 4007578:	010101f4 	movhi	r4,1031
 400757c:	21149904 	addi	r4,r4,21092
 4007580:	400af240 	call	400af24 <puts>
        return FALSE;
 4007584:	0005883a 	mov	r2,zero
 4007588:	00005306 	br	40076d8 <OC_I2C_Write+0x1e8>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
 400758c:	e0bffe03 	ldbu	r2,-8(fp)
 4007590:	e13ffc17 	ldw	r4,-16(fp)
 4007594:	014000c4 	movi	r5,3
 4007598:	100d883a 	mov	r6,r2
 400759c:	400725c0 	call	400725c <Write32_Data>
 40075a0:	1000051e 	bne	r2,zero,40075b8 <OC_I2C_Write+0xc8>
       printf("OC_I2C_Write error[3]\r\n");
 40075a4:	010101f4 	movhi	r4,1031
 40075a8:	21149f04 	addi	r4,r4,21116
 40075ac:	400af240 	call	400af24 <puts>
       return FALSE;
 40075b0:	0005883a 	mov	r2,zero
 40075b4:	00004806 	br	40076d8 <OC_I2C_Write+0x1e8>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
 40075b8:	e13ffc17 	ldw	r4,-16(fp)
 40075bc:	01400104 	movi	r5,4
 40075c0:	01800404 	movi	r6,16
 40075c4:	400725c0 	call	400725c <Write32_Data>
 40075c8:	1000051e 	bne	r2,zero,40075e0 <OC_I2C_Write+0xf0>
        printf("OC_I2C_Write error[4]\r\n");
 40075cc:	010101f4 	movhi	r4,1031
 40075d0:	2114a504 	addi	r4,r4,21140
 40075d4:	400af240 	call	400af24 <puts>
        return FALSE;
 40075d8:	0005883a 	mov	r2,zero
 40075dc:	00003e06 	br	40076d8 <OC_I2C_Write+0x1e8>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 40075e0:	e13ffc17 	ldw	r4,-16(fp)
 40075e4:	40074880 	call	4007488 <ACK_check>
 40075e8:	1000051e 	bne	r2,zero,4007600 <OC_I2C_Write+0x110>
        printf("OC_I2C_Write error[5]\r\n");
 40075ec:	010101f4 	movhi	r4,1031
 40075f0:	2114ab04 	addi	r4,r4,21164
 40075f4:	400af240 	call	400af24 <puts>
        return FALSE;
 40075f8:	0005883a 	mov	r2,zero
 40075fc:	00003606 	br	40076d8 <OC_I2C_Write+0x1e8>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 4007600:	e03ffb15 	stw	zero,-20(fp)
 4007604:	00002406 	br	4007698 <OC_I2C_Write+0x1a8>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
 4007608:	e0bffb17 	ldw	r2,-20(fp)
 400760c:	e0ffff17 	ldw	r3,-4(fp)
 4007610:	1885883a 	add	r2,r3,r2
 4007614:	10800003 	ldbu	r2,0(r2)
 4007618:	10803fcc 	andi	r2,r2,255
 400761c:	e13ffc17 	ldw	r4,-16(fp)
 4007620:	014000c4 	movi	r5,3
 4007624:	100d883a 	mov	r6,r2
 4007628:	400725c0 	call	400725c <Write32_Data>
 400762c:	1000051e 	bne	r2,zero,4007644 <OC_I2C_Write+0x154>
              printf("OC_I2C_Write error[6]\r\n");
 4007630:	010101f4 	movhi	r4,1031
 4007634:	2114b104 	addi	r4,r4,21188
 4007638:	400af240 	call	400af24 <puts>
              return FALSE;
 400763c:	0005883a 	mov	r2,zero
 4007640:	00002506 	br	40076d8 <OC_I2C_Write+0x1e8>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
 4007644:	e13ffc17 	ldw	r4,-16(fp)
 4007648:	01400104 	movi	r5,4
 400764c:	01800404 	movi	r6,16
 4007650:	400725c0 	call	400725c <Write32_Data>
 4007654:	1000051e 	bne	r2,zero,400766c <OC_I2C_Write+0x17c>
             printf("OC_I2C_Write error[7]\r\n");
 4007658:	010101f4 	movhi	r4,1031
 400765c:	2114b704 	addi	r4,r4,21212
 4007660:	400af240 	call	400af24 <puts>
              return FALSE;
 4007664:	0005883a 	mov	r2,zero
 4007668:	00001b06 	br	40076d8 <OC_I2C_Write+0x1e8>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
 400766c:	e13ffc17 	ldw	r4,-16(fp)
 4007670:	40074880 	call	4007488 <ACK_check>
 4007674:	1000051e 	bne	r2,zero,400768c <OC_I2C_Write+0x19c>
              printf("OC_I2C_Write error[8]\r\n");
 4007678:	010101f4 	movhi	r4,1031
 400767c:	2114bd04 	addi	r4,r4,21236
 4007680:	400af240 	call	400af24 <puts>
              return FALSE;
 4007684:	0005883a 	mov	r2,zero
 4007688:	00001306 	br	40076d8 <OC_I2C_Write+0x1e8>
        return FALSE;
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 400768c:	e0bffb17 	ldw	r2,-20(fp)
 4007690:	10800044 	addi	r2,r2,1
 4007694:	e0bffb15 	stw	r2,-20(fp)
 4007698:	e0fffb17 	ldw	r3,-20(fp)
 400769c:	e0800217 	ldw	r2,8(fp)
 40076a0:	18bfd916 	blt	r3,r2,4007608 <__reset+0xfb006608>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
 40076a4:	e13ffc17 	ldw	r4,-16(fp)
 40076a8:	01400104 	movi	r5,4
 40076ac:	01801004 	movi	r6,64
 40076b0:	400725c0 	call	400725c <Write32_Data>
 40076b4:	1000051e 	bne	r2,zero,40076cc <OC_I2C_Write+0x1dc>
         printf("OC_I2C_Write error[9]\r\n");
 40076b8:	010101f4 	movhi	r4,1031
 40076bc:	2114c304 	addi	r4,r4,21260
 40076c0:	400af240 	call	400af24 <puts>
         return FALSE;
 40076c4:	0005883a 	mov	r2,zero
 40076c8:	00000306 	br	40076d8 <OC_I2C_Write+0x1e8>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
 40076cc:	010003c4 	movi	r4,15
 40076d0:	4013aac0 	call	4013aac <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
 40076d4:	00800044 	movi	r2,1

}
 40076d8:	e037883a 	mov	sp,fp
 40076dc:	dfc00117 	ldw	ra,4(sp)
 40076e0:	df000017 	ldw	fp,0(sp)
 40076e4:	dec00204 	addi	sp,sp,8
 40076e8:	f800283a 	ret

040076ec <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
 40076ec:	defffb04 	addi	sp,sp,-20
 40076f0:	dfc00415 	stw	ra,16(sp)
 40076f4:	df000315 	stw	fp,12(sp)
 40076f8:	df000304 	addi	fp,sp,12
 40076fc:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(SLEEP_TIME);
 4007700:	010003c4 	movi	r4,15
 4007704:	4013aac0 	call	4013aac <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
 4007708:	e0bffe04 	addi	r2,fp,-8
 400770c:	e13fff17 	ldw	r4,-4(fp)
 4007710:	01400104 	movi	r5,4
 4007714:	100d883a 	mov	r6,r2
 4007718:	40072b00 	call	40072b0 <Read32_Data>
 400771c:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
 4007720:	e0bffd17 	ldw	r2,-12(fp)
 4007724:	10000426 	beq	r2,zero,4007738 <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
 4007728:	e0bffe17 	ldw	r2,-8(fp)
 400772c:	1080008c 	andi	r2,r2,2
 4007730:	10000126 	beq	r2,zero,4007738 <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
 4007734:	e03ffd15 	stw	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
 4007738:	e0bffd17 	ldw	r2,-12(fp)

}
 400773c:	e037883a 	mov	sp,fp
 4007740:	dfc00117 	ldw	ra,4(sp)
 4007744:	df000017 	ldw	fp,0(sp)
 4007748:	dec00204 	addi	sp,sp,8
 400774c:	f800283a 	ret

04007750 <OC_I2C_Read>:


bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
 4007750:	defff804 	addi	sp,sp,-32
 4007754:	dfc00715 	stw	ra,28(sp)
 4007758:	df000615 	stw	fp,24(sp)
 400775c:	df000604 	addi	fp,sp,24
 4007760:	e13ffc15 	stw	r4,-16(fp)
 4007764:	2807883a 	mov	r3,r5
 4007768:	3005883a 	mov	r2,r6
 400776c:	e1ffff15 	stw	r7,-4(fp)
 4007770:	e0fffd05 	stb	r3,-12(fp)
 4007774:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
 4007778:	e0bffc17 	ldw	r2,-16(fp)
 400777c:	10800304 	addi	r2,r2,12
 4007780:	e0fffd03 	ldbu	r3,-12(fp)
 4007784:	10c00035 	stwio	r3,0(r2)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
 4007788:	e0bffc17 	ldw	r2,-16(fp)
 400778c:	10800404 	addi	r2,r2,16
 4007790:	00c02404 	movi	r3,144
 4007794:	10c00035 	stwio	r3,0(r2)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
 4007798:	e13ffc17 	ldw	r4,-16(fp)
 400779c:	40074880 	call	4007488 <ACK_check>
 40077a0:	1000051e 	bne	r2,zero,40077b8 <OC_I2C_Read+0x68>
       printf("OC_I2C_Read error[2]\r\n");
 40077a4:	010101f4 	movhi	r4,1031
 40077a8:	2114c904 	addi	r4,r4,21284
 40077ac:	400af240 	call	400af24 <puts>
       return FALSE;
 40077b0:	0005883a 	mov	r2,zero
 40077b4:	00004d06 	br	40078ec <OC_I2C_Read+0x19c>
   }
   IOWR(i2c_base, 3,sub_address);
 40077b8:	e0bffc17 	ldw	r2,-16(fp)
 40077bc:	10800304 	addi	r2,r2,12
 40077c0:	e0fffe03 	ldbu	r3,-8(fp)
 40077c4:	10c00035 	stwio	r3,0(r2)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
 40077c8:	e0bffc17 	ldw	r2,-16(fp)
 40077cc:	10800404 	addi	r2,r2,16
 40077d0:	00c00404 	movi	r3,16
 40077d4:	10c00035 	stwio	r3,0(r2)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 40077d8:	e13ffc17 	ldw	r4,-16(fp)
 40077dc:	40074880 	call	4007488 <ACK_check>
 40077e0:	1000051e 	bne	r2,zero,40077f8 <OC_I2C_Read+0xa8>
        printf("OC_I2C_Read error[5]\r\n");
 40077e4:	010101f4 	movhi	r4,1031
 40077e8:	2114cf04 	addi	r4,r4,21308
 40077ec:	400af240 	call	400af24 <puts>
        return FALSE;
 40077f0:	0005883a 	mov	r2,zero
 40077f4:	00003d06 	br	40078ec <OC_I2C_Read+0x19c>
    }
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
    IOWR(i2c_base, 3,device_address|0x01);
 40077f8:	e0bffc17 	ldw	r2,-16(fp)
 40077fc:	10800304 	addi	r2,r2,12
 4007800:	e0fffd03 	ldbu	r3,-12(fp)
 4007804:	18c00054 	ori	r3,r3,1
 4007808:	18c03fcc 	andi	r3,r3,255
 400780c:	10c00035 	stwio	r3,0(r2)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 4007810:	e0bffc17 	ldw	r2,-16(fp)
 4007814:	10800404 	addi	r2,r2,16
 4007818:	00c02404 	movi	r3,144
 400781c:	10c00035 	stwio	r3,0(r2)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 4007820:	e13ffc17 	ldw	r4,-16(fp)
 4007824:	40074880 	call	4007488 <ACK_check>
 4007828:	1000051e 	bne	r2,zero,4007840 <OC_I2C_Read+0xf0>
        printf("OC_I2C_Read error[8]\r\n");
 400782c:	010101f4 	movhi	r4,1031
 4007830:	2114d504 	addi	r4,r4,21332
 4007834:	400af240 	call	400af24 <puts>
        return FALSE;
 4007838:	0005883a 	mov	r2,zero
 400783c:	00002b06 	br	40078ec <OC_I2C_Read+0x19c>
    }

    for(i=0;i<nReadLength;i++){
 4007840:	e03ffa15 	stw	zero,-24(fp)
 4007844:	00001f06 	br	40078c4 <OC_I2C_Read+0x174>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 4007848:	e0bffc17 	ldw	r2,-16(fp)
 400784c:	10800404 	addi	r2,r2,16
 4007850:	1007883a 	mov	r3,r2
 4007854:	e0bffa17 	ldw	r2,-24(fp)
 4007858:	11000044 	addi	r4,r2,1
 400785c:	e0800217 	ldw	r2,8(fp)
 4007860:	2080021e 	bne	r4,r2,400786c <OC_I2C_Read+0x11c>
 4007864:	00800a04 	movi	r2,40
 4007868:	00000106 	br	4007870 <OC_I2C_Read+0x120>
 400786c:	00800804 	movi	r2,32
 4007870:	18800035 	stwio	r2,0(r3)

        if (!ACK_judge_for_read( i2c_base)){
 4007874:	e13ffc17 	ldw	r4,-16(fp)
 4007878:	40076ec0 	call	40076ec <ACK_judge_for_read>
 400787c:	1000051e 	bne	r2,zero,4007894 <OC_I2C_Read+0x144>
            printf("OC_I2C_Read error[10]\r\n");
 4007880:	010101f4 	movhi	r4,1031
 4007884:	2114db04 	addi	r4,r4,21356
 4007888:	400af240 	call	400af24 <puts>
            return FALSE;
 400788c:	0005883a 	mov	r2,zero
 4007890:	00001606 	br	40078ec <OC_I2C_Read+0x19c>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4007894:	e0bffc17 	ldw	r2,-16(fp)
 4007898:	10800304 	addi	r2,r2,12
 400789c:	10800037 	ldwio	r2,0(r2)
 40078a0:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 40078a4:	e0bffa17 	ldw	r2,-24(fp)
 40078a8:	e0ffff17 	ldw	r3,-4(fp)
 40078ac:	1885883a 	add	r2,r3,r2
 40078b0:	e0fffb17 	ldw	r3,-20(fp)
 40078b4:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 40078b8:	e0bffa17 	ldw	r2,-24(fp)
 40078bc:	10800044 	addi	r2,r2,1
 40078c0:	e0bffa15 	stw	r2,-24(fp)
 40078c4:	e0fffa17 	ldw	r3,-24(fp)
 40078c8:	e0800217 	ldw	r2,8(fp)
 40078cc:	18bfde16 	blt	r3,r2,4007848 <__reset+0xfb006848>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 40078d0:	e0bffc17 	ldw	r2,-16(fp)
 40078d4:	10800404 	addi	r2,r2,16
 40078d8:	00c01004 	movi	r3,64
 40078dc:	10c00035 	stwio	r3,0(r2)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 40078e0:	010003c4 	movi	r4,15
 40078e4:	4013aac0 	call	4013aac <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 40078e8:	00800044 	movi	r2,1

}
 40078ec:	e037883a 	mov	sp,fp
 40078f0:	dfc00117 	ldw	ra,4(sp)
 40078f4:	df000017 	ldw	fp,0(sp)
 40078f8:	dec00204 	addi	sp,sp,8
 40078fc:	f800283a 	ret

04007900 <OC_I2CL_Write>:
//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,int sub_address,alt_u8 *pData, int nWriteLength)
    {
 4007900:	defff804 	addi	sp,sp,-32
 4007904:	dfc00715 	stw	ra,28(sp)
 4007908:	df000615 	stw	fp,24(sp)
 400790c:	df000604 	addi	fp,sp,24
 4007910:	e13ffc15 	stw	r4,-16(fp)
 4007914:	2805883a 	mov	r2,r5
 4007918:	e1bffe15 	stw	r6,-8(fp)
 400791c:	e1ffff15 	stw	r7,-4(fp)
 4007920:	e0bffd05 	stb	r2,-12(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
 4007924:	e0bffe17 	ldw	r2,-8(fp)
 4007928:	1005d23a 	srai	r2,r2,8
 400792c:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
 4007930:	e0bffe17 	ldw	r2,-8(fp)
 4007934:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 4007938:	e0bffd03 	ldbu	r2,-12(fp)
 400793c:	e13ffc17 	ldw	r4,-16(fp)
 4007940:	014000c4 	movi	r5,3
 4007944:	100d883a 	mov	r6,r2
 4007948:	400725c0 	call	400725c <Write32_Data>
 400794c:	1000021e 	bne	r2,zero,4007958 <OC_I2CL_Write+0x58>
       return FALSE;
 4007950:	0005883a 	mov	r2,zero
 4007954:	00005b06 	br	4007ac4 <OC_I2CL_Write+0x1c4>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
 4007958:	e13ffc17 	ldw	r4,-16(fp)
 400795c:	01400104 	movi	r5,4
 4007960:	01802404 	movi	r6,144
 4007964:	400725c0 	call	400725c <Write32_Data>
 4007968:	1000021e 	bne	r2,zero,4007974 <OC_I2CL_Write+0x74>
       return FALSE;
 400796c:	0005883a 	mov	r2,zero
 4007970:	00005406 	br	4007ac4 <OC_I2CL_Write+0x1c4>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 4007974:	e13ffc17 	ldw	r4,-16(fp)
 4007978:	40074880 	call	4007488 <ACK_check>
 400797c:	1000021e 	bne	r2,zero,4007988 <OC_I2CL_Write+0x88>
        return FALSE;
 4007980:	0005883a 	mov	r2,zero
 4007984:	00004f06 	br	4007ac4 <OC_I2CL_Write+0x1c4>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 4007988:	e0bffb03 	ldbu	r2,-20(fp)
 400798c:	e13ffc17 	ldw	r4,-16(fp)
 4007990:	014000c4 	movi	r5,3
 4007994:	100d883a 	mov	r6,r2
 4007998:	400725c0 	call	400725c <Write32_Data>
 400799c:	1000021e 	bne	r2,zero,40079a8 <OC_I2CL_Write+0xa8>
       return FALSE;
 40079a0:	0005883a 	mov	r2,zero
 40079a4:	00004706 	br	4007ac4 <OC_I2CL_Write+0x1c4>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 40079a8:	e13ffc17 	ldw	r4,-16(fp)
 40079ac:	01400104 	movi	r5,4
 40079b0:	01800404 	movi	r6,16
 40079b4:	400725c0 	call	400725c <Write32_Data>
 40079b8:	1000021e 	bne	r2,zero,40079c4 <OC_I2CL_Write+0xc4>
        return FALSE;
 40079bc:	0005883a 	mov	r2,zero
 40079c0:	00004006 	br	4007ac4 <OC_I2CL_Write+0x1c4>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 40079c4:	e13ffc17 	ldw	r4,-16(fp)
 40079c8:	40074880 	call	4007488 <ACK_check>
 40079cc:	1000021e 	bne	r2,zero,40079d8 <OC_I2CL_Write+0xd8>
        return FALSE;
 40079d0:	0005883a 	mov	r2,zero
 40079d4:	00003b06 	br	4007ac4 <OC_I2CL_Write+0x1c4>
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
 40079d8:	e0bffb43 	ldbu	r2,-19(fp)
 40079dc:	e13ffc17 	ldw	r4,-16(fp)
 40079e0:	014000c4 	movi	r5,3
 40079e4:	100d883a 	mov	r6,r2
 40079e8:	400725c0 	call	400725c <Write32_Data>
 40079ec:	1000021e 	bne	r2,zero,40079f8 <OC_I2CL_Write+0xf8>
       return FALSE;
 40079f0:	0005883a 	mov	r2,zero
 40079f4:	00003306 	br	4007ac4 <OC_I2CL_Write+0x1c4>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
 40079f8:	e13ffc17 	ldw	r4,-16(fp)
 40079fc:	01400104 	movi	r5,4
 4007a00:	01800404 	movi	r6,16
 4007a04:	400725c0 	call	400725c <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 4007a08:	e13ffc17 	ldw	r4,-16(fp)
 4007a0c:	40074880 	call	4007488 <ACK_check>
 4007a10:	1000021e 	bne	r2,zero,4007a1c <OC_I2CL_Write+0x11c>
        return FALSE;
 4007a14:	0005883a 	mov	r2,zero
 4007a18:	00002a06 	br	4007ac4 <OC_I2CL_Write+0x1c4>
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 4007a1c:	e03ffa15 	stw	zero,-24(fp)
 4007a20:	00001b06 	br	4007a90 <OC_I2CL_Write+0x190>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
 4007a24:	e0bffa17 	ldw	r2,-24(fp)
 4007a28:	e0ffff17 	ldw	r3,-4(fp)
 4007a2c:	1885883a 	add	r2,r3,r2
 4007a30:	10800003 	ldbu	r2,0(r2)
 4007a34:	10803fcc 	andi	r2,r2,255
 4007a38:	e13ffc17 	ldw	r4,-16(fp)
 4007a3c:	014000c4 	movi	r5,3
 4007a40:	100d883a 	mov	r6,r2
 4007a44:	400725c0 	call	400725c <Write32_Data>
 4007a48:	1000021e 	bne	r2,zero,4007a54 <OC_I2CL_Write+0x154>
            return FALSE;
 4007a4c:	0005883a 	mov	r2,zero
 4007a50:	00001c06 	br	4007ac4 <OC_I2CL_Write+0x1c4>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
 4007a54:	e13ffc17 	ldw	r4,-16(fp)
 4007a58:	01400104 	movi	r5,4
 4007a5c:	01800404 	movi	r6,16
 4007a60:	400725c0 	call	400725c <Write32_Data>
 4007a64:	1000021e 	bne	r2,zero,4007a70 <OC_I2CL_Write+0x170>
            return FALSE;
 4007a68:	0005883a 	mov	r2,zero
 4007a6c:	00001506 	br	4007ac4 <OC_I2CL_Write+0x1c4>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base))
 4007a70:	e13ffc17 	ldw	r4,-16(fp)
 4007a74:	40074880 	call	4007488 <ACK_check>
 4007a78:	1000021e 	bne	r2,zero,4007a84 <OC_I2CL_Write+0x184>
             return FALSE;
 4007a7c:	0005883a 	mov	r2,zero
 4007a80:	00001006 	br	4007ac4 <OC_I2CL_Write+0x1c4>
    if(!ACK_check( i2c_base))
        return FALSE;
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 4007a84:	e0bffa17 	ldw	r2,-24(fp)
 4007a88:	10800044 	addi	r2,r2,1
 4007a8c:	e0bffa15 	stw	r2,-24(fp)
 4007a90:	e0fffa17 	ldw	r3,-24(fp)
 4007a94:	e0800217 	ldw	r2,8(fp)
 4007a98:	18bfe216 	blt	r3,r2,4007a24 <__reset+0xfb006a24>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
 4007a9c:	e13ffc17 	ldw	r4,-16(fp)
 4007aa0:	01400104 	movi	r5,4
 4007aa4:	01801004 	movi	r6,64
 4007aa8:	400725c0 	call	400725c <Write32_Data>
 4007aac:	1000021e 	bne	r2,zero,4007ab8 <OC_I2CL_Write+0x1b8>
         return FALSE;
 4007ab0:	0005883a 	mov	r2,zero
 4007ab4:	00000306 	br	4007ac4 <OC_I2CL_Write+0x1c4>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
 4007ab8:	010003c4 	movi	r4,15
 4007abc:	4013aac0 	call	4013aac <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
 4007ac0:	00800044 	movi	r2,1
}
 4007ac4:	e037883a 	mov	sp,fp
 4007ac8:	dfc00117 	ldw	ra,4(sp)
 4007acc:	df000017 	ldw	fp,0(sp)
 4007ad0:	dec00204 	addi	sp,sp,8
 4007ad4:	f800283a 	ret

04007ad8 <OC_I2CL_Read>:


bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address,int sub_address, alt_u8 *pData8){
 4007ad8:	defff804 	addi	sp,sp,-32
 4007adc:	dfc00715 	stw	ra,28(sp)
 4007ae0:	df000615 	stw	fp,24(sp)
 4007ae4:	df000604 	addi	fp,sp,24
 4007ae8:	e13ffc15 	stw	r4,-16(fp)
 4007aec:	2805883a 	mov	r2,r5
 4007af0:	e1bffe15 	stw	r6,-8(fp)
 4007af4:	e1ffff15 	stw	r7,-4(fp)
 4007af8:	e0bffd05 	stb	r2,-12(fp)
    //DWORD reg_data = 0x0;
    alt_32 Data32;// = 0x0;

    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
 4007afc:	e0bffe17 	ldw	r2,-8(fp)
 4007b00:	1005d23a 	srai	r2,r2,8
 4007b04:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
 4007b08:	e0bffe17 	ldw	r2,-8(fp)
 4007b0c:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 4007b10:	e0bffd03 	ldbu	r2,-12(fp)
 4007b14:	e13ffc17 	ldw	r4,-16(fp)
 4007b18:	014000c4 	movi	r5,3
 4007b1c:	100d883a 	mov	r6,r2
 4007b20:	400725c0 	call	400725c <Write32_Data>
 4007b24:	1000021e 	bne	r2,zero,4007b30 <OC_I2CL_Read+0x58>
       return FALSE;
 4007b28:	0005883a 	mov	r2,zero
 4007b2c:	00006c06 	br	4007ce0 <OC_I2CL_Read+0x208>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
 4007b30:	e13ffc17 	ldw	r4,-16(fp)
 4007b34:	01400104 	movi	r5,4
 4007b38:	01802404 	movi	r6,144
 4007b3c:	400725c0 	call	400725c <Write32_Data>
 4007b40:	1000021e 	bne	r2,zero,4007b4c <OC_I2CL_Read+0x74>
       return FALSE;
 4007b44:	0005883a 	mov	r2,zero
 4007b48:	00006506 	br	4007ce0 <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 4007b4c:	e13ffc17 	ldw	r4,-16(fp)
 4007b50:	40074880 	call	4007488 <ACK_check>
 4007b54:	1000021e 	bne	r2,zero,4007b60 <OC_I2CL_Read+0x88>
        return FALSE;
 4007b58:	0005883a 	mov	r2,zero
 4007b5c:	00006006 	br	4007ce0 <OC_I2CL_Read+0x208>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 4007b60:	e0bffa03 	ldbu	r2,-24(fp)
 4007b64:	e13ffc17 	ldw	r4,-16(fp)
 4007b68:	014000c4 	movi	r5,3
 4007b6c:	100d883a 	mov	r6,r2
 4007b70:	400725c0 	call	400725c <Write32_Data>
 4007b74:	1000021e 	bne	r2,zero,4007b80 <OC_I2CL_Read+0xa8>
       return FALSE;
 4007b78:	0005883a 	mov	r2,zero
 4007b7c:	00005806 	br	4007ce0 <OC_I2CL_Read+0x208>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 4007b80:	e13ffc17 	ldw	r4,-16(fp)
 4007b84:	01400104 	movi	r5,4
 4007b88:	01800404 	movi	r6,16
 4007b8c:	400725c0 	call	400725c <Write32_Data>
 4007b90:	1000021e 	bne	r2,zero,4007b9c <OC_I2CL_Read+0xc4>
        return FALSE;
 4007b94:	0005883a 	mov	r2,zero
 4007b98:	00005106 	br	4007ce0 <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 4007b9c:	e13ffc17 	ldw	r4,-16(fp)
 4007ba0:	40074880 	call	4007488 <ACK_check>
 4007ba4:	1000021e 	bne	r2,zero,4007bb0 <OC_I2CL_Read+0xd8>
        return FALSE;
 4007ba8:	0005883a 	mov	r2,zero
 4007bac:	00004c06 	br	4007ce0 <OC_I2CL_Read+0x208>
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
 4007bb0:	e0bffa43 	ldbu	r2,-23(fp)
 4007bb4:	e13ffc17 	ldw	r4,-16(fp)
 4007bb8:	014000c4 	movi	r5,3
 4007bbc:	100d883a 	mov	r6,r2
 4007bc0:	400725c0 	call	400725c <Write32_Data>
 4007bc4:	1000021e 	bne	r2,zero,4007bd0 <OC_I2CL_Read+0xf8>
       return FALSE;
 4007bc8:	0005883a 	mov	r2,zero
 4007bcc:	00004406 	br	4007ce0 <OC_I2CL_Read+0x208>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 4007bd0:	e13ffc17 	ldw	r4,-16(fp)
 4007bd4:	01400104 	movi	r5,4
 4007bd8:	01800404 	movi	r6,16
 4007bdc:	400725c0 	call	400725c <Write32_Data>
 4007be0:	1000021e 	bne	r2,zero,4007bec <OC_I2CL_Read+0x114>
        return FALSE;
 4007be4:	0005883a 	mov	r2,zero
 4007be8:	00003d06 	br	4007ce0 <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 4007bec:	e13ffc17 	ldw	r4,-16(fp)
 4007bf0:	40074880 	call	4007488 <ACK_check>
 4007bf4:	1000021e 	bne	r2,zero,4007c00 <OC_I2CL_Read+0x128>
        return FALSE;
 4007bf8:	0005883a 	mov	r2,zero
 4007bfc:	00003806 	br	4007ce0 <OC_I2CL_Read+0x208>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
 4007c00:	e0bffd03 	ldbu	r2,-12(fp)
 4007c04:	10800054 	ori	r2,r2,1
 4007c08:	10803fcc 	andi	r2,r2,255
 4007c0c:	e13ffc17 	ldw	r4,-16(fp)
 4007c10:	014000c4 	movi	r5,3
 4007c14:	100d883a 	mov	r6,r2
 4007c18:	400725c0 	call	400725c <Write32_Data>
 4007c1c:	1000021e 	bne	r2,zero,4007c28 <OC_I2CL_Read+0x150>
         return FALSE;
 4007c20:	0005883a 	mov	r2,zero
 4007c24:	00002e06 	br	4007ce0 <OC_I2CL_Read+0x208>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
 4007c28:	e13ffc17 	ldw	r4,-16(fp)
 4007c2c:	01400104 	movi	r5,4
 4007c30:	01802404 	movi	r6,144
 4007c34:	400725c0 	call	400725c <Write32_Data>
 4007c38:	1000021e 	bne	r2,zero,4007c44 <OC_I2CL_Read+0x16c>
         return FALSE;
 4007c3c:	0005883a 	mov	r2,zero
 4007c40:	00002706 	br	4007ce0 <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 4007c44:	e13ffc17 	ldw	r4,-16(fp)
 4007c48:	40074880 	call	4007488 <ACK_check>
 4007c4c:	1000021e 	bne	r2,zero,4007c58 <OC_I2CL_Read+0x180>
        return FALSE;
 4007c50:	0005883a 	mov	r2,zero
 4007c54:	00002206 	br	4007ce0 <OC_I2CL_Read+0x208>

       //read the rxr data


   //set the RD and ACK bit(bit5 and bit3)
    if (!Write32_Data( i2c_base, 4,0x28))
 4007c58:	e13ffc17 	ldw	r4,-16(fp)
 4007c5c:	01400104 	movi	r5,4
 4007c60:	01800a04 	movi	r6,40
 4007c64:	400725c0 	call	400725c <Write32_Data>
 4007c68:	1000021e 	bne	r2,zero,4007c74 <OC_I2CL_Read+0x19c>
        return FALSE;
 4007c6c:	0005883a 	mov	r2,zero
 4007c70:	00001b06 	br	4007ce0 <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_judge_for_read( i2c_base))
 4007c74:	e13ffc17 	ldw	r4,-16(fp)
 4007c78:	40076ec0 	call	40076ec <ACK_judge_for_read>
 4007c7c:	1000021e 	bne	r2,zero,4007c88 <OC_I2CL_Read+0x1b0>
        return FALSE;
 4007c80:	0005883a 	mov	r2,zero
 4007c84:	00001606 	br	4007ce0 <OC_I2CL_Read+0x208>

//    printf("\n read receive ACK-device address(read)! \n");
    if (!Read32_Data ( i2c_base, 3, &Data32))
 4007c88:	e0bffb04 	addi	r2,fp,-20
 4007c8c:	e13ffc17 	ldw	r4,-16(fp)
 4007c90:	014000c4 	movi	r5,3
 4007c94:	100d883a 	mov	r6,r2
 4007c98:	40072b00 	call	40072b0 <Read32_Data>
 4007c9c:	1000021e 	bne	r2,zero,4007ca8 <OC_I2CL_Read+0x1d0>
        return FALSE;
 4007ca0:	0005883a 	mov	r2,zero
 4007ca4:	00000e06 	br	4007ce0 <OC_I2CL_Read+0x208>

    *pData8 =  Data32 & 0xff;
 4007ca8:	e0bffb17 	ldw	r2,-20(fp)
 4007cac:	1007883a 	mov	r3,r2
 4007cb0:	e0bfff17 	ldw	r2,-4(fp)
 4007cb4:	10c00005 	stb	r3,0(r2)


   if (!Write32_Data( i2c_base, 4,0x40))
 4007cb8:	e13ffc17 	ldw	r4,-16(fp)
 4007cbc:	01400104 	movi	r5,4
 4007cc0:	01801004 	movi	r6,64
 4007cc4:	400725c0 	call	400725c <Write32_Data>
 4007cc8:	1000021e 	bne	r2,zero,4007cd4 <OC_I2CL_Read+0x1fc>
       return FALSE;
 4007ccc:	0005883a 	mov	r2,zero
 4007cd0:	00000306 	br	4007ce0 <OC_I2CL_Read+0x208>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
 4007cd4:	010003c4 	movi	r4,15
 4007cd8:	4013aac0 	call	4013aac <usleep>

   return TRUE;
 4007cdc:	00800044 	movi	r2,1

}
 4007ce0:	e037883a 	mov	sp,fp
 4007ce4:	dfc00117 	ldw	ra,4(sp)
 4007ce8:	df000017 	ldw	fp,0(sp)
 4007cec:	dec00204 	addi	sp,sp,8
 4007cf0:	f800283a 	ret

04007cf4 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
 4007cf4:	defffd04 	addi	sp,sp,-12
 4007cf8:	dfc00215 	stw	ra,8(sp)
 4007cfc:	df000115 	stw	fp,4(sp)
 4007d00:	df000104 	addi	fp,sp,4
 4007d04:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
 4007d08:	e13fff17 	ldw	r4,-4(fp)
 4007d0c:	400ae400 	call	400ae40 <printf>
}
 4007d10:	e037883a 	mov	sp,fp
 4007d14:	dfc00117 	ldw	ra,4(sp)
 4007d18:	df000017 	ldw	fp,0(sp)
 4007d1c:	dec00204 	addi	sp,sp,8
 4007d20:	f800283a 	ret

04007d24 <myprintf>:





int myprintf(char *format, ...){
 4007d24:	deff7804 	addi	sp,sp,-544
 4007d28:	dfc08415 	stw	ra,528(sp)
 4007d2c:	df008315 	stw	fp,524(sp)
 4007d30:	df008304 	addi	fp,sp,524
 4007d34:	e1400215 	stw	r5,8(fp)
 4007d38:	e1800315 	stw	r6,12(fp)
 4007d3c:	e1c00415 	stw	r7,16(fp)
 4007d40:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 4007d44:	e0800204 	addi	r2,fp,8
 4007d48:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 4007d4c:	e0bffe17 	ldw	r2,-8(fp)
 4007d50:	e0ff7e04 	addi	r3,fp,-520
 4007d54:	1809883a 	mov	r4,r3
 4007d58:	01408004 	movi	r5,512
 4007d5c:	e1bfff17 	ldw	r6,-4(fp)
 4007d60:	100f883a 	mov	r7,r2
 4007d64:	400d1000 	call	400d100 <vsnprintf>
 4007d68:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 4007d6c:	e0bf7e04 	addi	r2,fp,-520
 4007d70:	1009883a 	mov	r4,r2
 4007d74:	4007cf40 	call	4007cf4 <debug_output>

    return rc;    
 4007d78:	e0bf7d17 	ldw	r2,-524(fp)
}
 4007d7c:	e037883a 	mov	sp,fp
 4007d80:	dfc00117 	ldw	ra,4(sp)
 4007d84:	df000017 	ldw	fp,0(sp)
 4007d88:	dec00504 	addi	sp,sp,20
 4007d8c:	f800283a 	ret

04007d90 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
 4007d90:	defff704 	addi	sp,sp,-36
 4007d94:	dfc00815 	stw	ra,32(sp)
 4007d98:	df000715 	stw	fp,28(sp)
 4007d9c:	df000704 	addi	fp,sp,28
 4007da0:	e13ffe15 	stw	r4,-8(fp)
 4007da4:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 4007da8:	e03ff915 	stw	zero,-28(fp)
 4007dac:	00001106 	br	4007df4 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 4007db0:	e0bff917 	ldw	r2,-28(fp)
 4007db4:	e0fffe17 	ldw	r3,-8(fp)
 4007db8:	1885883a 	add	r2,r3,r2
 4007dbc:	10800003 	ldbu	r2,0(r2)
 4007dc0:	10803fcc 	andi	r2,r2,255
 4007dc4:	e0fffa04 	addi	r3,fp,-24
 4007dc8:	1809883a 	mov	r4,r3
 4007dcc:	014101f4 	movhi	r5,1031
 4007dd0:	2954e104 	addi	r5,r5,21380
 4007dd4:	100d883a 	mov	r6,r2
 4007dd8:	400aff40 	call	400aff4 <sprintf>
        DEBUG((szText));
 4007ddc:	e0bffa04 	addi	r2,fp,-24
 4007de0:	1009883a 	mov	r4,r2
 4007de4:	4007d240 	call	4007d24 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 4007de8:	e0bff917 	ldw	r2,-28(fp)
 4007dec:	10800044 	addi	r2,r2,1
 4007df0:	e0bff915 	stw	r2,-28(fp)
 4007df4:	e0fff917 	ldw	r3,-28(fp)
 4007df8:	e0bfff17 	ldw	r2,-4(fp)
 4007dfc:	18bfec16 	blt	r3,r2,4007db0 <__reset+0xfb006db0>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 4007e00:	e0bfff17 	ldw	r2,-4(fp)
}
 4007e04:	e037883a 	mov	sp,fp
 4007e08:	dfc00117 	ldw	ra,4(sp)
 4007e0c:	df000017 	ldw	fp,0(sp)
 4007e10:	dec00204 	addi	sp,sp,8
 4007e14:	f800283a 	ret

04007e18 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
 4007e18:	defff704 	addi	sp,sp,-36
 4007e1c:	dfc00815 	stw	ra,32(sp)
 4007e20:	df000715 	stw	fp,28(sp)
 4007e24:	df000704 	addi	fp,sp,28
 4007e28:	e13ffe15 	stw	r4,-8(fp)
 4007e2c:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 4007e30:	e03ff915 	stw	zero,-28(fp)
 4007e34:	00001206 	br	4007e80 <myprintf_dwordarray+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
 4007e38:	e0bff917 	ldw	r2,-28(fp)
 4007e3c:	1085883a 	add	r2,r2,r2
 4007e40:	1085883a 	add	r2,r2,r2
 4007e44:	e0fffe17 	ldw	r3,-8(fp)
 4007e48:	1885883a 	add	r2,r3,r2
 4007e4c:	10800017 	ldw	r2,0(r2)
 4007e50:	e0fffa04 	addi	r3,fp,-24
 4007e54:	1809883a 	mov	r4,r3
 4007e58:	014101f4 	movhi	r5,1031
 4007e5c:	2954e304 	addi	r5,r5,21388
 4007e60:	100d883a 	mov	r6,r2
 4007e64:	400aff40 	call	400aff4 <sprintf>
        DEBUG((szText));
 4007e68:	e0bffa04 	addi	r2,fp,-24
 4007e6c:	1009883a 	mov	r4,r2
 4007e70:	4007d240 	call	4007d24 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 4007e74:	e0bff917 	ldw	r2,-28(fp)
 4007e78:	10800044 	addi	r2,r2,1
 4007e7c:	e0bff915 	stw	r2,-28(fp)
 4007e80:	e0fff917 	ldw	r3,-28(fp)
 4007e84:	e0bfff17 	ldw	r2,-4(fp)
 4007e88:	18bfeb16 	blt	r3,r2,4007e38 <__reset+0xfb006e38>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 4007e8c:	e0bfff17 	ldw	r2,-4(fp)
}
 4007e90:	e037883a 	mov	sp,fp
 4007e94:	dfc00117 	ldw	ra,4(sp)
 4007e98:	df000017 	ldw	fp,0(sp)
 4007e9c:	dec00204 	addi	sp,sp,8
 4007ea0:	f800283a 	ret

04007ea4 <mtc2_QueryData>:
#include "alt_types.h"

#define TRUE 1


static void mtc2_QueryData(MTC2_INFO *p){
 4007ea4:	deffe804 	addi	sp,sp,-96
 4007ea8:	dfc01715 	stw	ra,92(sp)
 4007eac:	df001615 	stw	fp,88(sp)
 4007eb0:	df001604 	addi	fp,sp,88
 4007eb4:	e13fff15 	stw	r4,-4(fp)
    MTC2_EVENT *pEvent, *pOldEvent;
    unsigned char reg_data[31];
    unsigned long x1,y1,x2,y2,x3,y3,x4,y4,x5,y5;
    if(OC_I2C_Read(p->TOUCH_I2C_BASE,I2C_FT5316_ADDR,0x00,reg_data,31))
 4007eb8:	e0bfff17 	ldw	r2,-4(fp)
 4007ebc:	10800017 	ldw	r2,0(r2)
 4007ec0:	1007883a 	mov	r3,r2
 4007ec4:	e0bff704 	addi	r2,fp,-36
 4007ec8:	010007c4 	movi	r4,31
 4007ecc:	d9000015 	stw	r4,0(sp)
 4007ed0:	1809883a 	mov	r4,r3
 4007ed4:	01401c04 	movi	r5,112
 4007ed8:	000d883a 	mov	r6,zero
 4007edc:	100f883a 	mov	r7,r2
 4007ee0:	40077500 	call	4007750 <OC_I2C_Read>
 4007ee4:	1000a426 	beq	r2,zero,4008178 <mtc2_QueryData+0x2d4>
        {
 //   			if(reg_data[1]>0)
//    				printf("reg_data[1]=%x\n",reg_data[1]);
    			 pEvent = (MTC2_EVENT *)malloc(sizeof(MTC2_EVENT));
 4007ee8:	01000584 	movi	r4,22
 4007eec:	400a44c0 	call	400a44c <malloc>
 4007ef0:	e0bfeb15 	stw	r2,-84(fp)
    			 pEvent->Event=reg_data[1];
 4007ef4:	e0fff743 	ldbu	r3,-35(fp)
 4007ef8:	e0bfeb17 	ldw	r2,-84(fp)
 4007efc:	10c00005 	stb	r3,0(r2)
        		 pEvent->TouchNum = reg_data[2];
 4007f00:	e0fff783 	ldbu	r3,-34(fp)
 4007f04:	e0bfeb17 	ldw	r2,-84(fp)
 4007f08:	10c00045 	stb	r3,1(r2)
        		 x1 = ((reg_data[3]&0x0f)<<8)|reg_data[4];
 4007f0c:	e0bff7c3 	ldbu	r2,-33(fp)
 4007f10:	10803fcc 	andi	r2,r2,255
 4007f14:	108003cc 	andi	r2,r2,15
 4007f18:	1006923a 	slli	r3,r2,8
 4007f1c:	e0bff803 	ldbu	r2,-32(fp)
 4007f20:	10803fcc 	andi	r2,r2,255
 4007f24:	1884b03a 	or	r2,r3,r2
 4007f28:	e0bfec15 	stw	r2,-80(fp)
        		 y1 = ((reg_data[5]&0x0f)<<8)|reg_data[6];
 4007f2c:	e0bff843 	ldbu	r2,-31(fp)
 4007f30:	10803fcc 	andi	r2,r2,255
 4007f34:	108003cc 	andi	r2,r2,15
 4007f38:	1006923a 	slli	r3,r2,8
 4007f3c:	e0bff883 	ldbu	r2,-30(fp)
 4007f40:	10803fcc 	andi	r2,r2,255
 4007f44:	1884b03a 	or	r2,r3,r2
 4007f48:	e0bfed15 	stw	r2,-76(fp)
        		 x2 = ((reg_data[9]&0x0f)<<8)|reg_data[10];
 4007f4c:	e0bff943 	ldbu	r2,-27(fp)
 4007f50:	10803fcc 	andi	r2,r2,255
 4007f54:	108003cc 	andi	r2,r2,15
 4007f58:	1006923a 	slli	r3,r2,8
 4007f5c:	e0bff983 	ldbu	r2,-26(fp)
 4007f60:	10803fcc 	andi	r2,r2,255
 4007f64:	1884b03a 	or	r2,r3,r2
 4007f68:	e0bfee15 	stw	r2,-72(fp)
        		 y2 = ((reg_data[11]&0x0f)<<8)|reg_data[12];
 4007f6c:	e0bff9c3 	ldbu	r2,-25(fp)
 4007f70:	10803fcc 	andi	r2,r2,255
 4007f74:	108003cc 	andi	r2,r2,15
 4007f78:	1006923a 	slli	r3,r2,8
 4007f7c:	e0bffa03 	ldbu	r2,-24(fp)
 4007f80:	10803fcc 	andi	r2,r2,255
 4007f84:	1884b03a 	or	r2,r3,r2
 4007f88:	e0bfef15 	stw	r2,-68(fp)

        		 x3 = ((reg_data[15]&0x0f)<<8)|reg_data[16];
 4007f8c:	e0bffac3 	ldbu	r2,-21(fp)
 4007f90:	10803fcc 	andi	r2,r2,255
 4007f94:	108003cc 	andi	r2,r2,15
 4007f98:	1006923a 	slli	r3,r2,8
 4007f9c:	e0bffb03 	ldbu	r2,-20(fp)
 4007fa0:	10803fcc 	andi	r2,r2,255
 4007fa4:	1884b03a 	or	r2,r3,r2
 4007fa8:	e0bff015 	stw	r2,-64(fp)
				 y3 = ((reg_data[17]&0x0f)<<8)|reg_data[18];
 4007fac:	e0bffb43 	ldbu	r2,-19(fp)
 4007fb0:	10803fcc 	andi	r2,r2,255
 4007fb4:	108003cc 	andi	r2,r2,15
 4007fb8:	1006923a 	slli	r3,r2,8
 4007fbc:	e0bffb83 	ldbu	r2,-18(fp)
 4007fc0:	10803fcc 	andi	r2,r2,255
 4007fc4:	1884b03a 	or	r2,r3,r2
 4007fc8:	e0bff115 	stw	r2,-60(fp)

				 x4 = ((reg_data[21]&0x0f)<<8)|reg_data[22];
 4007fcc:	e0bffc43 	ldbu	r2,-15(fp)
 4007fd0:	10803fcc 	andi	r2,r2,255
 4007fd4:	108003cc 	andi	r2,r2,15
 4007fd8:	1006923a 	slli	r3,r2,8
 4007fdc:	e0bffc83 	ldbu	r2,-14(fp)
 4007fe0:	10803fcc 	andi	r2,r2,255
 4007fe4:	1884b03a 	or	r2,r3,r2
 4007fe8:	e0bff215 	stw	r2,-56(fp)
				 y4 = ((reg_data[23]&0x0f)<<8)|reg_data[24];
 4007fec:	e0bffcc3 	ldbu	r2,-13(fp)
 4007ff0:	10803fcc 	andi	r2,r2,255
 4007ff4:	108003cc 	andi	r2,r2,15
 4007ff8:	1006923a 	slli	r3,r2,8
 4007ffc:	e0bffd03 	ldbu	r2,-12(fp)
 4008000:	10803fcc 	andi	r2,r2,255
 4008004:	1884b03a 	or	r2,r3,r2
 4008008:	e0bff315 	stw	r2,-52(fp)

				 x5 = ((reg_data[27]&0x0f)<<8)|reg_data[28];
 400800c:	e0bffdc3 	ldbu	r2,-9(fp)
 4008010:	10803fcc 	andi	r2,r2,255
 4008014:	108003cc 	andi	r2,r2,15
 4008018:	1006923a 	slli	r3,r2,8
 400801c:	e0bffe03 	ldbu	r2,-8(fp)
 4008020:	10803fcc 	andi	r2,r2,255
 4008024:	1884b03a 	or	r2,r3,r2
 4008028:	e0bff415 	stw	r2,-48(fp)
				 y5 = ((reg_data[29]&0x0f)<<8)|reg_data[30];
 400802c:	e0bffe43 	ldbu	r2,-7(fp)
 4008030:	10803fcc 	andi	r2,r2,255
 4008034:	108003cc 	andi	r2,r2,15
 4008038:	1006923a 	slli	r3,r2,8
 400803c:	e0bffe83 	ldbu	r2,-6(fp)
 4008040:	10803fcc 	andi	r2,r2,255
 4008044:	1884b03a 	or	r2,r3,r2
 4008048:	e0bff515 	stw	r2,-44(fp)
				 //the register value (1024,600)
				 //change the value to (800,480)
        		 pEvent->x1=(x1*800)>>10;
 400804c:	e13fec17 	ldw	r4,-80(fp)
 4008050:	0140c804 	movi	r5,800
 4008054:	4009dd80 	call	4009dd8 <__mulsi3>
 4008058:	1004d2ba 	srli	r2,r2,10
 400805c:	1007883a 	mov	r3,r2
 4008060:	e0bfeb17 	ldw	r2,-84(fp)
 4008064:	10c0008d 	sth	r3,2(r2)
        		 pEvent->y1=(y1/10)<<3;
 4008068:	e0bfed17 	ldw	r2,-76(fp)
 400806c:	1009883a 	mov	r4,r2
 4008070:	01400284 	movi	r5,10
 4008074:	4009dc80 	call	4009dc8 <__udivsi3>
 4008078:	100490fa 	slli	r2,r2,3
 400807c:	1007883a 	mov	r3,r2
 4008080:	e0bfeb17 	ldw	r2,-84(fp)
 4008084:	10c0010d 	sth	r3,4(r2)
        		 pEvent->x2=(x2*800)>>10;
 4008088:	e13fee17 	ldw	r4,-72(fp)
 400808c:	0140c804 	movi	r5,800
 4008090:	4009dd80 	call	4009dd8 <__mulsi3>
 4008094:	1004d2ba 	srli	r2,r2,10
 4008098:	1007883a 	mov	r3,r2
 400809c:	e0bfeb17 	ldw	r2,-84(fp)
 40080a0:	10c0018d 	sth	r3,6(r2)
        		 pEvent->y2=(y2/10)<<3;
 40080a4:	e0bfef17 	ldw	r2,-68(fp)
 40080a8:	1009883a 	mov	r4,r2
 40080ac:	01400284 	movi	r5,10
 40080b0:	4009dc80 	call	4009dc8 <__udivsi3>
 40080b4:	100490fa 	slli	r2,r2,3
 40080b8:	1007883a 	mov	r3,r2
 40080bc:	e0bfeb17 	ldw	r2,-84(fp)
 40080c0:	10c0020d 	sth	r3,8(r2)
        		 pEvent->x3=(x3*800)>>10;
 40080c4:	e13ff017 	ldw	r4,-64(fp)
 40080c8:	0140c804 	movi	r5,800
 40080cc:	4009dd80 	call	4009dd8 <__mulsi3>
 40080d0:	1004d2ba 	srli	r2,r2,10
 40080d4:	1007883a 	mov	r3,r2
 40080d8:	e0bfeb17 	ldw	r2,-84(fp)
 40080dc:	10c0028d 	sth	r3,10(r2)
				 pEvent->y3=(y3/10)<<3;
 40080e0:	e0bff117 	ldw	r2,-60(fp)
 40080e4:	1009883a 	mov	r4,r2
 40080e8:	01400284 	movi	r5,10
 40080ec:	4009dc80 	call	4009dc8 <__udivsi3>
 40080f0:	100490fa 	slli	r2,r2,3
 40080f4:	1007883a 	mov	r3,r2
 40080f8:	e0bfeb17 	ldw	r2,-84(fp)
 40080fc:	10c0030d 	sth	r3,12(r2)
				 pEvent->x4=(x4*800)>>10;
 4008100:	e13ff217 	ldw	r4,-56(fp)
 4008104:	0140c804 	movi	r5,800
 4008108:	4009dd80 	call	4009dd8 <__mulsi3>
 400810c:	1004d2ba 	srli	r2,r2,10
 4008110:	1007883a 	mov	r3,r2
 4008114:	e0bfeb17 	ldw	r2,-84(fp)
 4008118:	10c0038d 	sth	r3,14(r2)
				 pEvent->y4=(y4/10)<<3;
 400811c:	e0bff317 	ldw	r2,-52(fp)
 4008120:	1009883a 	mov	r4,r2
 4008124:	01400284 	movi	r5,10
 4008128:	4009dc80 	call	4009dc8 <__udivsi3>
 400812c:	100490fa 	slli	r2,r2,3
 4008130:	1007883a 	mov	r3,r2
 4008134:	e0bfeb17 	ldw	r2,-84(fp)
 4008138:	10c0040d 	sth	r3,16(r2)
				 pEvent->x5=(x5*800)>>10;
 400813c:	e13ff417 	ldw	r4,-48(fp)
 4008140:	0140c804 	movi	r5,800
 4008144:	4009dd80 	call	4009dd8 <__mulsi3>
 4008148:	1004d2ba 	srli	r2,r2,10
 400814c:	1007883a 	mov	r3,r2
 4008150:	e0bfeb17 	ldw	r2,-84(fp)
 4008154:	10c0048d 	sth	r3,18(r2)
				 pEvent->y5=(y5/10)<<3;
 4008158:	e0bff517 	ldw	r2,-44(fp)
 400815c:	1009883a 	mov	r4,r2
 4008160:	01400284 	movi	r5,10
 4008164:	4009dc80 	call	4009dc8 <__udivsi3>
 4008168:	100490fa 	slli	r2,r2,3
 400816c:	1007883a 	mov	r3,r2
 4008170:	e0bfeb17 	ldw	r2,-84(fp)
 4008174:	10c0050d 	sth	r3,20(r2)

        }
    if((pEvent->TouchNum>0)&&(pEvent->TouchNum<=5))
 4008178:	e0bfeb17 	ldw	r2,-84(fp)
 400817c:	10800043 	ldbu	r2,1(r2)
 4008180:	10803fcc 	andi	r2,r2,255
 4008184:	10001826 	beq	r2,zero,40081e8 <mtc2_QueryData+0x344>
 4008188:	e0bfeb17 	ldw	r2,-84(fp)
 400818c:	10800043 	ldbu	r2,1(r2)
 4008190:	10803fcc 	andi	r2,r2,255
 4008194:	108001a8 	cmpgeui	r2,r2,6
 4008198:	1000131e 	bne	r2,zero,40081e8 <mtc2_QueryData+0x344>
    {
		if (QUEUE_IsFull(p->pQueue)){
 400819c:	e0bfff17 	ldw	r2,-4(fp)
 40081a0:	10800317 	ldw	r2,12(r2)
 40081a4:	1009883a 	mov	r4,r2
 40081a8:	400862c0 	call	400862c <QUEUE_IsFull>
 40081ac:	10000726 	beq	r2,zero,40081cc <mtc2_QueryData+0x328>
					  // remove the old one
		  pOldEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
 40081b0:	e0bfff17 	ldw	r2,-4(fp)
 40081b4:	10800317 	ldw	r2,12(r2)
 40081b8:	1009883a 	mov	r4,r2
 40081bc:	40087240 	call	4008724 <QUEUE_Pop>
 40081c0:	e0bff615 	stw	r2,-40(fp)
		  free(pOldEvent);
 40081c4:	e13ff617 	ldw	r4,-40(fp)
 40081c8:	400a4600 	call	400a460 <free>
		 }
		 QUEUE_Push(p->pQueue, (alt_u32)pEvent);
 40081cc:	e0bfff17 	ldw	r2,-4(fp)
 40081d0:	10c00317 	ldw	r3,12(r2)
 40081d4:	e0bfeb17 	ldw	r2,-84(fp)
 40081d8:	1809883a 	mov	r4,r3
 40081dc:	100b883a 	mov	r5,r2
 40081e0:	40086900 	call	4008690 <QUEUE_Push>
 40081e4:	00000206 	br	40081f0 <mtc2_QueryData+0x34c>
    }
    else
    	free(pEvent);
 40081e8:	e13feb17 	ldw	r4,-84(fp)
 40081ec:	400a4600 	call	400a460 <free>
}
 40081f0:	e037883a 	mov	sp,fp
 40081f4:	dfc00117 	ldw	ra,4(sp)
 40081f8:	df000017 	ldw	fp,0(sp)
 40081fc:	dec00204 	addi	sp,sp,8
 4008200:	f800283a 	ret

04008204 <mtc2_ISR>:


#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void mtc2_ISR(void* context){
 4008204:	defffc04 	addi	sp,sp,-16
 4008208:	dfc00315 	stw	ra,12(sp)
 400820c:	df000215 	stw	fp,8(sp)
 4008210:	df000204 	addi	fp,sp,8
 4008214:	e13fff15 	stw	r4,-4(fp)
#else
static void mtc2_ISR(void* context, alt_u32 id){
#endif
   MTC2_INFO *p = (MTC2_INFO *)context;
 4008218:	e0bfff17 	ldw	r2,-4(fp)
 400821c:	e0bffe15 	stw	r2,-8(fp)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,p->INT_IRQ_NUM);
 4008220:	e0bffe17 	ldw	r2,-8(fp)
 4008224:	10800217 	ldw	r2,8(r2)
 4008228:	0009883a 	mov	r4,zero
 400822c:	100b883a 	mov	r5,r2
 4008230:	40131f00 	call	40131f0 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif
    mtc2_QueryData(p);
 4008234:	e13ffe17 	ldw	r4,-8(fp)
 4008238:	4007ea40 	call	4007ea4 <mtc2_QueryData>

    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE,0);
 400823c:	e0bffe17 	ldw	r2,-8(fp)
 4008240:	10800117 	ldw	r2,4(r2)
 4008244:	10800304 	addi	r2,r2,12
 4008248:	0007883a 	mov	r3,zero
 400824c:	10c00035 	stwio	r3,0(r2)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,p->INT_IRQ_NUM);
 4008250:	e0bffe17 	ldw	r2,-8(fp)
 4008254:	10800217 	ldw	r2,8(r2)
 4008258:	0009883a 	mov	r4,zero
 400825c:	100b883a 	mov	r5,r2
 4008260:	40131540 	call	4013154 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif
 }
 4008264:	e037883a 	mov	sp,fp
 4008268:	dfc00117 	ldw	ra,4(sp)
 400826c:	df000017 	ldw	fp,0(sp)
 4008270:	dec00204 	addi	sp,sp,8
 4008274:	f800283a 	ret

04008278 <MTC2_Init>:

MTC2_INFO* MTC2_Init(alt_u32 TOUCH_I2C_BASE,alt_u32 TOUCH_INT_BASE, alt_u32 INT_IRQ_NUM)
{
 4008278:	defff904 	addi	sp,sp,-28
 400827c:	dfc00615 	stw	ra,24(sp)
 4008280:	df000515 	stw	fp,20(sp)
 4008284:	df000504 	addi	fp,sp,20
 4008288:	e13ffd15 	stw	r4,-12(fp)
 400828c:	e17ffe15 	stw	r5,-8(fp)
 4008290:	e1bfff15 	stw	r6,-4(fp)
    MTC2_INFO *p;

    p = (MTC2_INFO *)malloc(sizeof(MTC2_INFO));
 4008294:	01000404 	movi	r4,16
 4008298:	400a44c0 	call	400a44c <malloc>
 400829c:	e0bffc15 	stw	r2,-16(fp)
    p->TOUCH_I2C_BASE=TOUCH_I2C_BASE;
 40082a0:	e0bffc17 	ldw	r2,-16(fp)
 40082a4:	e0fffd17 	ldw	r3,-12(fp)
 40082a8:	10c00015 	stw	r3,0(r2)
    p->TOUCH_INT_BASE=TOUCH_INT_BASE;
 40082ac:	e0bffc17 	ldw	r2,-16(fp)
 40082b0:	e0fffe17 	ldw	r3,-8(fp)
 40082b4:	10c00115 	stw	r3,4(r2)

    p->INT_IRQ_NUM = INT_IRQ_NUM;
 40082b8:	e0bffc17 	ldw	r2,-16(fp)
 40082bc:	e0ffff17 	ldw	r3,-4(fp)
 40082c0:	10c00215 	stw	r3,8(r2)
    p->pQueue = QUEUE_New(TOUCH_QUEUE_SIZE);
 40082c4:	01000804 	movi	r4,32
 40082c8:	400854c0 	call	400854c <QUEUE_New>
 40082cc:	e0fffc17 	ldw	r3,-16(fp)
 40082d0:	18800315 	stw	r2,12(r3)


//    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x00);
 40082d4:	e0bffc17 	ldw	r2,-16(fp)
 40082d8:	10800117 	ldw	r2,4(r2)
 40082dc:	10800204 	addi	r2,r2,8
 40082e0:	0007883a 	mov	r3,zero
 40082e4:	10c00035 	stwio	r3,0(r2)
//    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE, 0x00);
 40082e8:	e0bffc17 	ldw	r2,-16(fp)
 40082ec:	10800117 	ldw	r2,4(r2)
 40082f0:	10800304 	addi	r2,r2,12
 40082f4:	0007883a 	mov	r3,zero
 40082f8:	10c00035 	stwio	r3,0(r2)
 // register callback function
 //   error = alt_irq_register (p->INT_IRQ_NUM, p, mtc2_ISR);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,
		                   p->INT_IRQ_NUM,
 40082fc:	e0bffc17 	ldw	r2,-16(fp)
//    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE, 0x00);
 // register callback function
 //   error = alt_irq_register (p->INT_IRQ_NUM, p, mtc2_ISR);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,
 4008300:	10800217 	ldw	r2,8(r2)
 4008304:	d8000015 	stw	zero,0(sp)
 4008308:	0009883a 	mov	r4,zero
 400830c:	100b883a 	mov	r5,r2
 4008310:	01810074 	movhi	r6,1025
 4008314:	31a08104 	addi	r6,r6,-32252
 4008318:	e1fffc17 	ldw	r7,-16(fp)
 400831c:	40131040 	call	4013104 <alt_ic_isr_register>
 4008320:	10000426 	beq	r2,zero,4008334 <MTC2_Init+0xbc>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->INT_IRQ_NUM, (void *)p, mtc2_ISR) != 0)){
 #endif

	  printf(("[TOUCH]register IRQ fail\n"));
 4008324:	010101f4 	movhi	r4,1031
 4008328:	2114e504 	addi	r4,r4,21396
 400832c:	400af240 	call	400af24 <puts>
 4008330:	00000306 	br	4008340 <MTC2_Init+0xc8>
		  }else{
			  printf(("[TOUCH]register IRQ success\n"));
 4008334:	010101f4 	movhi	r4,1031
 4008338:	2114ec04 	addi	r4,r4,21424
 400833c:	400af240 	call	400af24 <puts>
		  }
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x01);
 4008340:	e0bffc17 	ldw	r2,-16(fp)
 4008344:	10800117 	ldw	r2,4(r2)
 4008348:	10800204 	addi	r2,r2,8
 400834c:	00c00044 	movi	r3,1
 4008350:	10c00035 	stwio	r3,0(r2)
    return p;
 4008354:	e0bffc17 	ldw	r2,-16(fp)
}
 4008358:	e037883a 	mov	sp,fp
 400835c:	dfc00117 	ldw	ra,4(sp)
 4008360:	df000017 	ldw	fp,0(sp)
 4008364:	dec00204 	addi	sp,sp,8
 4008368:	f800283a 	ret

0400836c <MTC2_UnInit>:

void MTC2_UnInit(MTC2_INFO *p){
 400836c:	defffd04 	addi	sp,sp,-12
 4008370:	dfc00215 	stw	ra,8(sp)
 4008374:	df000115 	stw	fp,4(sp)
 4008378:	df000104 	addi	fp,sp,4
 400837c:	e13fff15 	stw	r4,-4(fp)
    if (p){
 4008380:	e0bfff17 	ldw	r2,-4(fp)
 4008384:	10000626 	beq	r2,zero,40083a0 <MTC2_UnInit+0x34>
        QUEUE_Delete(p->pQueue);
 4008388:	e0bfff17 	ldw	r2,-4(fp)
 400838c:	10800317 	ldw	r2,12(r2)
 4008390:	1009883a 	mov	r4,r2
 4008394:	40085bc0 	call	40085bc <QUEUE_Delete>
        free(p);
 4008398:	e13fff17 	ldw	r4,-4(fp)
 400839c:	400a4600 	call	400a460 <free>
    }
}
 40083a0:	e037883a 	mov	sp,fp
 40083a4:	dfc00117 	ldw	ra,4(sp)
 40083a8:	df000017 	ldw	fp,0(sp)
 40083ac:	dec00204 	addi	sp,sp,8
 40083b0:	f800283a 	ret

040083b4 <MTC2_GetStatus>:

//, int X3,int Y3,int X4,int Y4,int X5,int Y5
bool MTC2_GetStatus(MTC2_INFO *p, alt_u8 *Event, alt_u8 *TouchNum, int *X1, int *Y1, int *X2, int *Y2,int *X3, int *Y3, int *X4, int *Y4,int *X5,int *Y5)
{
 40083b4:	defff804 	addi	sp,sp,-32
 40083b8:	dfc00715 	stw	ra,28(sp)
 40083bc:	df000615 	stw	fp,24(sp)
 40083c0:	df000604 	addi	fp,sp,24
 40083c4:	e13ffc15 	stw	r4,-16(fp)
 40083c8:	e17ffd15 	stw	r5,-12(fp)
 40083cc:	e1bffe15 	stw	r6,-8(fp)
 40083d0:	e1ffff15 	stw	r7,-4(fp)
    bool bFind;
    MTC2_EVENT *pEvent;
    bFind = QUEUE_IsEmpty(p->pQueue)?FALSE:TRUE;
 40083d4:	e0bffc17 	ldw	r2,-16(fp)
 40083d8:	10800317 	ldw	r2,12(r2)
 40083dc:	1009883a 	mov	r4,r2
 40083e0:	40085ec0 	call	40085ec <QUEUE_IsEmpty>
 40083e4:	1005003a 	cmpeq	r2,r2,zero
 40083e8:	10803fcc 	andi	r2,r2,255
 40083ec:	e0bffa15 	stw	r2,-24(fp)
    if (bFind){
 40083f0:	e0bffa17 	ldw	r2,-24(fp)
 40083f4:	10004126 	beq	r2,zero,40084fc <MTC2_GetStatus+0x148>
        pEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
 40083f8:	e0bffc17 	ldw	r2,-16(fp)
 40083fc:	10800317 	ldw	r2,12(r2)
 4008400:	1009883a 	mov	r4,r2
 4008404:	40087240 	call	4008724 <QUEUE_Pop>
 4008408:	e0bffb15 	stw	r2,-20(fp)
        *Event=pEvent->Event;;
 400840c:	e0bffb17 	ldw	r2,-20(fp)
 4008410:	10c00003 	ldbu	r3,0(r2)
 4008414:	e0bffd17 	ldw	r2,-12(fp)
 4008418:	10c00005 	stb	r3,0(r2)
        *TouchNum = pEvent->TouchNum;
 400841c:	e0bffb17 	ldw	r2,-20(fp)
 4008420:	10c00043 	ldbu	r3,1(r2)
 4008424:	e0bffe17 	ldw	r2,-8(fp)
 4008428:	10c00005 	stb	r3,0(r2)
        *X1 = pEvent->x1;
 400842c:	e0bffb17 	ldw	r2,-20(fp)
 4008430:	1080008b 	ldhu	r2,2(r2)
 4008434:	10ffffcc 	andi	r3,r2,65535
 4008438:	e0bfff17 	ldw	r2,-4(fp)
 400843c:	10c00015 	stw	r3,0(r2)
        *Y1 = pEvent->y1;
 4008440:	e0bffb17 	ldw	r2,-20(fp)
 4008444:	1080010b 	ldhu	r2,4(r2)
 4008448:	10ffffcc 	andi	r3,r2,65535
 400844c:	e0800217 	ldw	r2,8(fp)
 4008450:	10c00015 	stw	r3,0(r2)
        *X2 = pEvent->x2;
 4008454:	e0bffb17 	ldw	r2,-20(fp)
 4008458:	1080018b 	ldhu	r2,6(r2)
 400845c:	10ffffcc 	andi	r3,r2,65535
 4008460:	e0800317 	ldw	r2,12(fp)
 4008464:	10c00015 	stw	r3,0(r2)
        *Y2 = pEvent->y2;
 4008468:	e0bffb17 	ldw	r2,-20(fp)
 400846c:	1080020b 	ldhu	r2,8(r2)
 4008470:	10ffffcc 	andi	r3,r2,65535
 4008474:	e0800417 	ldw	r2,16(fp)
 4008478:	10c00015 	stw	r3,0(r2)
        *X3 = pEvent->x3;
 400847c:	e0bffb17 	ldw	r2,-20(fp)
 4008480:	1080028b 	ldhu	r2,10(r2)
 4008484:	10ffffcc 	andi	r3,r2,65535
 4008488:	e0800517 	ldw	r2,20(fp)
 400848c:	10c00015 	stw	r3,0(r2)
		*Y3 = pEvent->y3;
 4008490:	e0bffb17 	ldw	r2,-20(fp)
 4008494:	1080030b 	ldhu	r2,12(r2)
 4008498:	10ffffcc 	andi	r3,r2,65535
 400849c:	e0800617 	ldw	r2,24(fp)
 40084a0:	10c00015 	stw	r3,0(r2)
		*X4 = pEvent->x4;
 40084a4:	e0bffb17 	ldw	r2,-20(fp)
 40084a8:	1080038b 	ldhu	r2,14(r2)
 40084ac:	10ffffcc 	andi	r3,r2,65535
 40084b0:	e0800717 	ldw	r2,28(fp)
 40084b4:	10c00015 	stw	r3,0(r2)
		*Y4 = pEvent->y4;
 40084b8:	e0bffb17 	ldw	r2,-20(fp)
 40084bc:	1080040b 	ldhu	r2,16(r2)
 40084c0:	10ffffcc 	andi	r3,r2,65535
 40084c4:	e0800817 	ldw	r2,32(fp)
 40084c8:	10c00015 	stw	r3,0(r2)
		*X5 = pEvent->x5;
 40084cc:	e0bffb17 	ldw	r2,-20(fp)
 40084d0:	1080048b 	ldhu	r2,18(r2)
 40084d4:	10ffffcc 	andi	r3,r2,65535
 40084d8:	e0800917 	ldw	r2,36(fp)
 40084dc:	10c00015 	stw	r3,0(r2)
		*Y5 = pEvent->y5;
 40084e0:	e0bffb17 	ldw	r2,-20(fp)
 40084e4:	1080050b 	ldhu	r2,20(r2)
 40084e8:	10ffffcc 	andi	r3,r2,65535
 40084ec:	e0800a17 	ldw	r2,40(fp)
 40084f0:	10c00015 	stw	r3,0(r2)
        free(pEvent);
 40084f4:	e13ffb17 	ldw	r4,-20(fp)
 40084f8:	400a4600 	call	400a460 <free>
    }
    return bFind;
 40084fc:	e0bffa17 	ldw	r2,-24(fp)
}
 4008500:	e037883a 	mov	sp,fp
 4008504:	dfc00117 	ldw	ra,4(sp)
 4008508:	df000017 	ldw	fp,0(sp)
 400850c:	dec00204 	addi	sp,sp,8
 4008510:	f800283a 	ret

04008514 <MTC2_ClearEvent>:


void MTC2_ClearEvent(MTC2_INFO *p){
 4008514:	defffd04 	addi	sp,sp,-12
 4008518:	dfc00215 	stw	ra,8(sp)
 400851c:	df000115 	stw	fp,4(sp)
 4008520:	df000104 	addi	fp,sp,4
 4008524:	e13fff15 	stw	r4,-4(fp)
    QUEUE_Empty(p->pQueue);
 4008528:	e0bfff17 	ldw	r2,-4(fp)
 400852c:	10800317 	ldw	r2,12(r2)
 4008530:	1009883a 	mov	r4,r2
 4008534:	40087b40 	call	40087b4 <QUEUE_Empty>
}
 4008538:	e037883a 	mov	sp,fp
 400853c:	dfc00117 	ldw	ra,4(sp)
 4008540:	df000017 	ldw	fp,0(sp)
 4008544:	dec00204 	addi	sp,sp,8
 4008548:	f800283a 	ret

0400854c <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
 400854c:	defffb04 	addi	sp,sp,-20
 4008550:	dfc00415 	stw	ra,16(sp)
 4008554:	df000315 	stw	fp,12(sp)
 4008558:	df000304 	addi	fp,sp,12
 400855c:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
 4008560:	e0bfff17 	ldw	r2,-4(fp)
 4008564:	10800144 	addi	r2,r2,5
 4008568:	1085883a 	add	r2,r2,r2
 400856c:	1085883a 	add	r2,r2,r2
 4008570:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
 4008574:	e0bffd17 	ldw	r2,-12(fp)
 4008578:	1009883a 	mov	r4,r2
 400857c:	400a44c0 	call	400a44c <malloc>
 4008580:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
 4008584:	e0bffd17 	ldw	r2,-12(fp)
 4008588:	e13ffe17 	ldw	r4,-8(fp)
 400858c:	000b883a 	mov	r5,zero
 4008590:	100d883a 	mov	r6,r2
 4008594:	400ad380 	call	400ad38 <memset>
    pQueue->num = nQueueNum;
 4008598:	e0ffff17 	ldw	r3,-4(fp)
 400859c:	e0bffe17 	ldw	r2,-8(fp)
 40085a0:	10c00015 	stw	r3,0(r2)
    return pQueue;
 40085a4:	e0bffe17 	ldw	r2,-8(fp)
}
 40085a8:	e037883a 	mov	sp,fp
 40085ac:	dfc00117 	ldw	ra,4(sp)
 40085b0:	df000017 	ldw	fp,0(sp)
 40085b4:	dec00204 	addi	sp,sp,8
 40085b8:	f800283a 	ret

040085bc <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
 40085bc:	defffd04 	addi	sp,sp,-12
 40085c0:	dfc00215 	stw	ra,8(sp)
 40085c4:	df000115 	stw	fp,4(sp)
 40085c8:	df000104 	addi	fp,sp,4
 40085cc:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
 40085d0:	e13fff17 	ldw	r4,-4(fp)
 40085d4:	400a4600 	call	400a460 <free>
}
 40085d8:	e037883a 	mov	sp,fp
 40085dc:	dfc00117 	ldw	ra,4(sp)
 40085e0:	df000017 	ldw	fp,0(sp)
 40085e4:	dec00204 	addi	sp,sp,8
 40085e8:	f800283a 	ret

040085ec <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
 40085ec:	defffe04 	addi	sp,sp,-8
 40085f0:	df000115 	stw	fp,4(sp)
 40085f4:	df000104 	addi	fp,sp,4
 40085f8:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
 40085fc:	e0bfff17 	ldw	r2,-4(fp)
 4008600:	10c00117 	ldw	r3,4(r2)
 4008604:	e0bfff17 	ldw	r2,-4(fp)
 4008608:	10800217 	ldw	r2,8(r2)
 400860c:	1880021e 	bne	r3,r2,4008618 <QUEUE_IsEmpty+0x2c>
        return TRUE;
 4008610:	00800044 	movi	r2,1
 4008614:	00000106 	br	400861c <QUEUE_IsEmpty+0x30>
    return FALSE;
 4008618:	0005883a 	mov	r2,zero
}
 400861c:	e037883a 	mov	sp,fp
 4008620:	df000017 	ldw	fp,0(sp)
 4008624:	dec00104 	addi	sp,sp,4
 4008628:	f800283a 	ret

0400862c <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
 400862c:	defffd04 	addi	sp,sp,-12
 4008630:	dfc00215 	stw	ra,8(sp)
 4008634:	df000115 	stw	fp,4(sp)
 4008638:	df000104 	addi	fp,sp,4
 400863c:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
 4008640:	e0bfff17 	ldw	r2,-4(fp)
 4008644:	10800117 	ldw	r2,4(r2)
 4008648:	10c00044 	addi	r3,r2,1
 400864c:	e0bfff17 	ldw	r2,-4(fp)
 4008650:	10800017 	ldw	r2,0(r2)
 4008654:	1809883a 	mov	r4,r3
 4008658:	100b883a 	mov	r5,r2
 400865c:	4009dd00 	call	4009dd0 <__umodsi3>
 4008660:	1007883a 	mov	r3,r2
 4008664:	e0bfff17 	ldw	r2,-4(fp)
 4008668:	10800217 	ldw	r2,8(r2)
 400866c:	1880021e 	bne	r3,r2,4008678 <QUEUE_IsFull+0x4c>
        return TRUE;
 4008670:	00800044 	movi	r2,1
 4008674:	00000106 	br	400867c <QUEUE_IsFull+0x50>
    return FALSE;
 4008678:	0005883a 	mov	r2,zero
}
 400867c:	e037883a 	mov	sp,fp
 4008680:	dfc00117 	ldw	ra,4(sp)
 4008684:	df000017 	ldw	fp,0(sp)
 4008688:	dec00204 	addi	sp,sp,8
 400868c:	f800283a 	ret

04008690 <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
 4008690:	defffc04 	addi	sp,sp,-16
 4008694:	dfc00315 	stw	ra,12(sp)
 4008698:	df000215 	stw	fp,8(sp)
 400869c:	df000204 	addi	fp,sp,8
 40086a0:	e13ffe15 	stw	r4,-8(fp)
 40086a4:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
 40086a8:	e13ffe17 	ldw	r4,-8(fp)
 40086ac:	400862c0 	call	400862c <QUEUE_IsFull>
 40086b0:	10000226 	beq	r2,zero,40086bc <QUEUE_Push+0x2c>
        return FALSE;
 40086b4:	0005883a 	mov	r2,zero
 40086b8:	00001506 	br	4008710 <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
 40086bc:	e0bffe17 	ldw	r2,-8(fp)
 40086c0:	10800117 	ldw	r2,4(r2)
 40086c4:	e0fffe17 	ldw	r3,-8(fp)
 40086c8:	108000c4 	addi	r2,r2,3
 40086cc:	1085883a 	add	r2,r2,r2
 40086d0:	1085883a 	add	r2,r2,r2
 40086d4:	1885883a 	add	r2,r3,r2
 40086d8:	e0ffff17 	ldw	r3,-4(fp)
 40086dc:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
 40086e0:	e0bffe17 	ldw	r2,-8(fp)
 40086e4:	10800117 	ldw	r2,4(r2)
 40086e8:	10c00044 	addi	r3,r2,1
 40086ec:	e0bffe17 	ldw	r2,-8(fp)
 40086f0:	10800017 	ldw	r2,0(r2)
 40086f4:	1809883a 	mov	r4,r3
 40086f8:	100b883a 	mov	r5,r2
 40086fc:	4009dd00 	call	4009dd0 <__umodsi3>
 4008700:	1007883a 	mov	r3,r2
 4008704:	e0bffe17 	ldw	r2,-8(fp)
 4008708:	10c00115 	stw	r3,4(r2)
    return TRUE;
 400870c:	00800044 	movi	r2,1
}
 4008710:	e037883a 	mov	sp,fp
 4008714:	dfc00117 	ldw	ra,4(sp)
 4008718:	df000017 	ldw	fp,0(sp)
 400871c:	dec00204 	addi	sp,sp,8
 4008720:	f800283a 	ret

04008724 <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
 4008724:	defffc04 	addi	sp,sp,-16
 4008728:	dfc00315 	stw	ra,12(sp)
 400872c:	df000215 	stw	fp,8(sp)
 4008730:	df000204 	addi	fp,sp,8
 4008734:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
 4008738:	e13fff17 	ldw	r4,-4(fp)
 400873c:	40085ec0 	call	40085ec <QUEUE_IsEmpty>
 4008740:	10000226 	beq	r2,zero,400874c <QUEUE_Pop+0x28>
        return 0;
 4008744:	0005883a 	mov	r2,zero
 4008748:	00001506 	br	40087a0 <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
 400874c:	e0bfff17 	ldw	r2,-4(fp)
 4008750:	10800217 	ldw	r2,8(r2)
 4008754:	e0ffff17 	ldw	r3,-4(fp)
 4008758:	108000c4 	addi	r2,r2,3
 400875c:	1085883a 	add	r2,r2,r2
 4008760:	1085883a 	add	r2,r2,r2
 4008764:	1885883a 	add	r2,r3,r2
 4008768:	10800017 	ldw	r2,0(r2)
 400876c:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
 4008770:	e0bfff17 	ldw	r2,-4(fp)
 4008774:	10800217 	ldw	r2,8(r2)
 4008778:	10c00044 	addi	r3,r2,1
 400877c:	e0bfff17 	ldw	r2,-4(fp)
 4008780:	10800017 	ldw	r2,0(r2)
 4008784:	1809883a 	mov	r4,r3
 4008788:	100b883a 	mov	r5,r2
 400878c:	4009dd00 	call	4009dd0 <__umodsi3>
 4008790:	1007883a 	mov	r3,r2
 4008794:	e0bfff17 	ldw	r2,-4(fp)
 4008798:	10c00215 	stw	r3,8(r2)
    return data32;
 400879c:	e0bffe17 	ldw	r2,-8(fp)
}
 40087a0:	e037883a 	mov	sp,fp
 40087a4:	dfc00117 	ldw	ra,4(sp)
 40087a8:	df000017 	ldw	fp,0(sp)
 40087ac:	dec00204 	addi	sp,sp,8
 40087b0:	f800283a 	ret

040087b4 <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
 40087b4:	defffe04 	addi	sp,sp,-8
 40087b8:	df000115 	stw	fp,4(sp)
 40087bc:	df000104 	addi	fp,sp,4
 40087c0:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
 40087c4:	e0bfff17 	ldw	r2,-4(fp)
 40087c8:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
 40087cc:	e0bfff17 	ldw	r2,-4(fp)
 40087d0:	10000215 	stw	zero,8(r2)
}
 40087d4:	e037883a 	mov	sp,fp
 40087d8:	df000017 	ldw	fp,0(sp)
 40087dc:	dec00104 	addi	sp,sp,4
 40087e0:	f800283a 	ret

040087e4 <VIPFR_Init>:
void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex);
void FrameReader_Go(alt_u32 VipBase, bool bGO);



VIP_FRAME_READER* VIPFR_Init(alt_u32 VipBase, void* Frame0_Base, void* Frame1_Base, alt_u32 Frame_Width, alt_u32 Frame_Height){
 40087e4:	defff904 	addi	sp,sp,-28
 40087e8:	dfc00615 	stw	ra,24(sp)
 40087ec:	df000515 	stw	fp,20(sp)
 40087f0:	df000504 	addi	fp,sp,20
 40087f4:	e13ffc15 	stw	r4,-16(fp)
 40087f8:	e17ffd15 	stw	r5,-12(fp)
 40087fc:	e1bffe15 	stw	r6,-8(fp)
 4008800:	e1ffff15 	stw	r7,-4(fp)

    VIP_FRAME_READER *p;
    
    p = malloc(sizeof(VIP_FRAME_READER));
 4008804:	01000904 	movi	r4,36
 4008808:	400a44c0 	call	400a44c <malloc>
 400880c:	e0bffb15 	stw	r2,-20(fp)
    p->VipBase = VipBase;
 4008810:	e0bffb17 	ldw	r2,-20(fp)
 4008814:	e0fffc17 	ldw	r3,-16(fp)
 4008818:	10c00015 	stw	r3,0(r2)
    p->Frame0_Base = Frame0_Base;
 400881c:	e0bffb17 	ldw	r2,-20(fp)
 4008820:	e0fffd17 	ldw	r3,-12(fp)
 4008824:	10c00115 	stw	r3,4(r2)
    p->Frame1_Base = Frame1_Base;
 4008828:	e0bffb17 	ldw	r2,-20(fp)
 400882c:	e0fffe17 	ldw	r3,-8(fp)
 4008830:	10c00215 	stw	r3,8(r2)
    p->DisplayFrame = 0;
 4008834:	e0bffb17 	ldw	r2,-20(fp)
 4008838:	10000305 	stb	zero,12(r2)
     
    p->bytes_per_pixel = 4;
 400883c:	e0bffb17 	ldw	r2,-20(fp)
 4008840:	00c00104 	movi	r3,4
 4008844:	10c00715 	stw	r3,28(r2)
    p->color_depth = 32;
 4008848:	e0bffb17 	ldw	r2,-20(fp)
 400884c:	00c00804 	movi	r3,32
 4008850:	10c00415 	stw	r3,16(r2)
    p->interlace = 0;
 4008854:	e0bffb17 	ldw	r2,-20(fp)
 4008858:	10000815 	stw	zero,32(r2)
    
    FrameReader_Go(VipBase, FALSE); // stop for config
 400885c:	e13ffc17 	ldw	r4,-16(fp)
 4008860:	000b883a 	mov	r5,zero
 4008864:	4008ce40 	call	4008ce4 <FrameReader_Go>
    
    VIPFR_SetFrameSize(p, Frame_Width, Frame_Height);
 4008868:	e0ffff17 	ldw	r3,-4(fp)
 400886c:	e0800217 	ldw	r2,8(fp)
 4008870:	e13ffb17 	ldw	r4,-20(fp)
 4008874:	180b883a 	mov	r5,r3
 4008878:	100d883a 	mov	r6,r2
 400887c:	40088f40 	call	40088f4 <VIPFR_SetFrameSize>
    
    FrameReader_SelectFrame(VipBase, p->DisplayFrame);
 4008880:	e0bffb17 	ldw	r2,-20(fp)
 4008884:	10800303 	ldbu	r2,12(r2)
 4008888:	10803fcc 	andi	r2,r2,255
 400888c:	e13ffc17 	ldw	r4,-16(fp)
 4008890:	100b883a 	mov	r5,r2
 4008894:	4008cac0 	call	4008cac <FrameReader_SelectFrame>
    //
    FrameReader_Go(VipBase, TRUE); // go
 4008898:	e13ffc17 	ldw	r4,-16(fp)
 400889c:	01400044 	movi	r5,1
 40088a0:	4008ce40 	call	4008ce4 <FrameReader_Go>
    
    return p;
 40088a4:	e0bffb17 	ldw	r2,-20(fp)
}
 40088a8:	e037883a 	mov	sp,fp
 40088ac:	dfc00117 	ldw	ra,4(sp)
 40088b0:	df000017 	ldw	fp,0(sp)
 40088b4:	dec00204 	addi	sp,sp,8
 40088b8:	f800283a 	ret

040088bc <VIPFR_UnInit>:

void VIPFR_UnInit(VIP_FRAME_READER* p){
 40088bc:	defffd04 	addi	sp,sp,-12
 40088c0:	dfc00215 	stw	ra,8(sp)
 40088c4:	df000115 	stw	fp,4(sp)
 40088c8:	df000104 	addi	fp,sp,4
 40088cc:	e13fff15 	stw	r4,-4(fp)
    if (p)
 40088d0:	e0bfff17 	ldw	r2,-4(fp)
 40088d4:	10000226 	beq	r2,zero,40088e0 <VIPFR_UnInit+0x24>
        free(p);
 40088d8:	e13fff17 	ldw	r4,-4(fp)
 40088dc:	400a4600 	call	400a460 <free>
}
 40088e0:	e037883a 	mov	sp,fp
 40088e4:	dfc00117 	ldw	ra,4(sp)
 40088e8:	df000017 	ldw	fp,0(sp)
 40088ec:	dec00204 	addi	sp,sp,8
 40088f0:	f800283a 	ret

040088f4 <VIPFR_SetFrameSize>:

void VIPFR_SetFrameSize(VIP_FRAME_READER* p, int width, int height){
 40088f4:	defff604 	addi	sp,sp,-40
 40088f8:	dfc00915 	stw	ra,36(sp)
 40088fc:	df000815 	stw	fp,32(sp)
 4008900:	df000804 	addi	fp,sp,32
 4008904:	e13ffd15 	stw	r4,-12(fp)
 4008908:	e17ffe15 	stw	r5,-8(fp)
 400890c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 words, cycle;
    words = width*height;
 4008910:	e13ffe17 	ldw	r4,-8(fp)
 4008914:	e17fff17 	ldw	r5,-4(fp)
 4008918:	4009dd80 	call	4009dd8 <__mulsi3>
 400891c:	e0bffb15 	stw	r2,-20(fp)
    cycle = width*height;
 4008920:	e13ffe17 	ldw	r4,-8(fp)
 4008924:	e17fff17 	ldw	r5,-4(fp)
 4008928:	4009dd80 	call	4009dd8 <__mulsi3>
 400892c:	e0bffc15 	stw	r2,-16(fp)
    
  //  p->Frame_Width = width;
  //  p->Frame_Height = height;
    //
    p->width = width;
 4008930:	e0bffd17 	ldw	r2,-12(fp)
 4008934:	e0fffe17 	ldw	r3,-8(fp)
 4008938:	10c00515 	stw	r3,20(r2)
    p->height = height;
 400893c:	e0bffd17 	ldw	r2,-12(fp)
 4008940:	e0ffff17 	ldw	r3,-4(fp)
 4008944:	10c00615 	stw	r3,24(r2)
    //
    FrameReader_SetFrame0(p->VipBase, (alt_u32)p->Frame0_Base, words, cycle, p->width, p->height, p->interlace);
 4008948:	e0bffd17 	ldw	r2,-12(fp)
 400894c:	10c00017 	ldw	r3,0(r2)
 4008950:	e0bffd17 	ldw	r2,-12(fp)
 4008954:	10800117 	ldw	r2,4(r2)
 4008958:	e13ffd17 	ldw	r4,-12(fp)
 400895c:	21000517 	ldw	r4,20(r4)
 4008960:	200d883a 	mov	r6,r4
 4008964:	e13ffd17 	ldw	r4,-12(fp)
 4008968:	21000617 	ldw	r4,24(r4)
 400896c:	200b883a 	mov	r5,r4
 4008970:	e13ffd17 	ldw	r4,-12(fp)
 4008974:	21000817 	ldw	r4,32(r4)
 4008978:	d9800015 	stw	r6,0(sp)
 400897c:	d9400115 	stw	r5,4(sp)
 4008980:	d9000215 	stw	r4,8(sp)
 4008984:	1809883a 	mov	r4,r3
 4008988:	100b883a 	mov	r5,r2
 400898c:	e1bffb17 	ldw	r6,-20(fp)
 4008990:	e1fffc17 	ldw	r7,-16(fp)
 4008994:	4008b940 	call	4008b94 <FrameReader_SetFrame0>
    FrameReader_SetFrame1(p->VipBase, (alt_u32)p->Frame1_Base, words, cycle, p->width, p->height, p->interlace);
 4008998:	e0bffd17 	ldw	r2,-12(fp)
 400899c:	10c00017 	ldw	r3,0(r2)
 40089a0:	e0bffd17 	ldw	r2,-12(fp)
 40089a4:	10800217 	ldw	r2,8(r2)
 40089a8:	e13ffd17 	ldw	r4,-12(fp)
 40089ac:	21000517 	ldw	r4,20(r4)
 40089b0:	200d883a 	mov	r6,r4
 40089b4:	e13ffd17 	ldw	r4,-12(fp)
 40089b8:	21000617 	ldw	r4,24(r4)
 40089bc:	200b883a 	mov	r5,r4
 40089c0:	e13ffd17 	ldw	r4,-12(fp)
 40089c4:	21000817 	ldw	r4,32(r4)
 40089c8:	d9800015 	stw	r6,0(sp)
 40089cc:	d9400115 	stw	r5,4(sp)
 40089d0:	d9000215 	stw	r4,8(sp)
 40089d4:	1809883a 	mov	r4,r3
 40089d8:	100b883a 	mov	r5,r2
 40089dc:	e1bffb17 	ldw	r6,-20(fp)
 40089e0:	e1fffc17 	ldw	r7,-16(fp)
 40089e4:	4008c200 	call	4008c20 <FrameReader_SetFrame1>
    
}
 40089e8:	e037883a 	mov	sp,fp
 40089ec:	dfc00117 	ldw	ra,4(sp)
 40089f0:	df000017 	ldw	fp,0(sp)
 40089f4:	dec00204 	addi	sp,sp,8
 40089f8:	f800283a 	ret

040089fc <VIPFR_Go>:

void VIPFR_Go(VIP_FRAME_READER* p, bool bGo){
 40089fc:	defffd04 	addi	sp,sp,-12
 4008a00:	df000215 	stw	fp,8(sp)
 4008a04:	df000204 	addi	fp,sp,8
 4008a08:	e13ffe15 	stw	r4,-8(fp)
 4008a0c:	e17fff15 	stw	r5,-4(fp)
    IOWR(p->VipBase, 0x00, bGo?0x01:0x00);
 4008a10:	e0bffe17 	ldw	r2,-8(fp)
 4008a14:	10800017 	ldw	r2,0(r2)
 4008a18:	e0ffff17 	ldw	r3,-4(fp)
 4008a1c:	1806c03a 	cmpne	r3,r3,zero
 4008a20:	18c03fcc 	andi	r3,r3,255
 4008a24:	10c00035 	stwio	r3,0(r2)
}
 4008a28:	e037883a 	mov	sp,fp
 4008a2c:	df000017 	ldw	fp,0(sp)
 4008a30:	dec00104 	addi	sp,sp,4
 4008a34:	f800283a 	ret

04008a38 <VIPFR_GetDrawFrame>:

void* VIPFR_GetDrawFrame(VIP_FRAME_READER* p){
 4008a38:	defffe04 	addi	sp,sp,-8
 4008a3c:	df000115 	stw	fp,4(sp)
 4008a40:	df000104 	addi	fp,sp,4
 4008a44:	e13fff15 	stw	r4,-4(fp)
        if (p->DisplayFrame == 0)
 4008a48:	e0bfff17 	ldw	r2,-4(fp)
 4008a4c:	10800303 	ldbu	r2,12(r2)
 4008a50:	10803fcc 	andi	r2,r2,255
 4008a54:	1000031e 	bne	r2,zero,4008a64 <VIPFR_GetDrawFrame+0x2c>
            return p->Frame1_Base;
 4008a58:	e0bfff17 	ldw	r2,-4(fp)
 4008a5c:	10800217 	ldw	r2,8(r2)
 4008a60:	00000206 	br	4008a6c <VIPFR_GetDrawFrame+0x34>
        return p->Frame0_Base;
 4008a64:	e0bfff17 	ldw	r2,-4(fp)
 4008a68:	10800117 	ldw	r2,4(r2)
}
 4008a6c:	e037883a 	mov	sp,fp
 4008a70:	df000017 	ldw	fp,0(sp)
 4008a74:	dec00104 	addi	sp,sp,4
 4008a78:	f800283a 	ret

04008a7c <VIPFR_ActiveDrawFrame>:
void VIPFR_ActiveDrawFrame(VIP_FRAME_READER* p){
 4008a7c:	defffd04 	addi	sp,sp,-12
 4008a80:	dfc00215 	stw	ra,8(sp)
 4008a84:	df000115 	stw	fp,4(sp)
 4008a88:	df000104 	addi	fp,sp,4
 4008a8c:	e13fff15 	stw	r4,-4(fp)
     p->DisplayFrame =  (p->DisplayFrame+1)%2;
 4008a90:	e0bfff17 	ldw	r2,-4(fp)
 4008a94:	10800303 	ldbu	r2,12(r2)
 4008a98:	10803fcc 	andi	r2,r2,255
 4008a9c:	10c00044 	addi	r3,r2,1
 4008aa0:	00a00034 	movhi	r2,32768
 4008aa4:	10800044 	addi	r2,r2,1
 4008aa8:	1884703a 	and	r2,r3,r2
 4008aac:	1000040e 	bge	r2,zero,4008ac0 <VIPFR_ActiveDrawFrame+0x44>
 4008ab0:	10bfffc4 	addi	r2,r2,-1
 4008ab4:	00ffff84 	movi	r3,-2
 4008ab8:	10c4b03a 	or	r2,r2,r3
 4008abc:	10800044 	addi	r2,r2,1
 4008ac0:	1007883a 	mov	r3,r2
 4008ac4:	e0bfff17 	ldw	r2,-4(fp)
 4008ac8:	10c00305 	stb	r3,12(r2)
     FrameReader_SelectFrame(p->VipBase, p->DisplayFrame);
 4008acc:	e0bfff17 	ldw	r2,-4(fp)
 4008ad0:	10c00017 	ldw	r3,0(r2)
 4008ad4:	e0bfff17 	ldw	r2,-4(fp)
 4008ad8:	10800303 	ldbu	r2,12(r2)
 4008adc:	10803fcc 	andi	r2,r2,255
 4008ae0:	1809883a 	mov	r4,r3
 4008ae4:	100b883a 	mov	r5,r2
 4008ae8:	4008cac0 	call	4008cac <FrameReader_SelectFrame>
     alt_dcache_flush_all();
 4008aec:	4012f940 	call	4012f94 <alt_dcache_flush_all>
}
 4008af0:	e037883a 	mov	sp,fp
 4008af4:	dfc00117 	ldw	ra,4(sp)
 4008af8:	df000017 	ldw	fp,0(sp)
 4008afc:	dec00204 	addi	sp,sp,8
 4008b00:	f800283a 	ret

04008b04 <DRAW_EraseScreen>:

void DRAW_EraseScreen(VIP_FRAME_READER *p, alt_u32 Color){
 4008b04:	defffa04 	addi	sp,sp,-24
 4008b08:	dfc00515 	stw	ra,20(sp)
 4008b0c:	df000415 	stw	fp,16(sp)
 4008b10:	dc400315 	stw	r17,12(sp)
 4008b14:	dc000215 	stw	r16,8(sp)
 4008b18:	df000204 	addi	fp,sp,8
 4008b1c:	e13ffe15 	stw	r4,-8(fp)
 4008b20:	e17fff15 	stw	r5,-4(fp)
    memset(VIPFR_GetDrawFrame(p), Color, p->width*p->height*p->bytes_per_pixel);
 4008b24:	e13ffe17 	ldw	r4,-8(fp)
 4008b28:	4008a380 	call	4008a38 <VIPFR_GetDrawFrame>
 4008b2c:	1023883a 	mov	r17,r2
 4008b30:	e43fff17 	ldw	r16,-4(fp)
 4008b34:	e0bffe17 	ldw	r2,-8(fp)
 4008b38:	10c00517 	ldw	r3,20(r2)
 4008b3c:	e0bffe17 	ldw	r2,-8(fp)
 4008b40:	10800617 	ldw	r2,24(r2)
 4008b44:	1809883a 	mov	r4,r3
 4008b48:	100b883a 	mov	r5,r2
 4008b4c:	4009dd80 	call	4009dd8 <__mulsi3>
 4008b50:	1007883a 	mov	r3,r2
 4008b54:	e0bffe17 	ldw	r2,-8(fp)
 4008b58:	10800717 	ldw	r2,28(r2)
 4008b5c:	1809883a 	mov	r4,r3
 4008b60:	100b883a 	mov	r5,r2
 4008b64:	4009dd80 	call	4009dd8 <__mulsi3>
 4008b68:	8809883a 	mov	r4,r17
 4008b6c:	800b883a 	mov	r5,r16
 4008b70:	100d883a 	mov	r6,r2
 4008b74:	400ad380 	call	400ad38 <memset>
}
 4008b78:	e037883a 	mov	sp,fp
 4008b7c:	dfc00317 	ldw	ra,12(sp)
 4008b80:	df000217 	ldw	fp,8(sp)
 4008b84:	dc400117 	ldw	r17,4(sp)
 4008b88:	dc000017 	ldw	r16,0(sp)
 4008b8c:	dec00404 	addi	sp,sp,16
 4008b90:	f800283a 	ret

04008b94 <FrameReader_SetFrame0>:
////////////////////////////////////////////////////////////////////
// internal function
////////////////////////////////////////////////////////////////////


void FrameReader_SetFrame0(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
 4008b94:	defffb04 	addi	sp,sp,-20
 4008b98:	df000415 	stw	fp,16(sp)
 4008b9c:	df000404 	addi	fp,sp,16
 4008ba0:	e13ffc15 	stw	r4,-16(fp)
 4008ba4:	e17ffd15 	stw	r5,-12(fp)
 4008ba8:	e1bffe15 	stw	r6,-8(fp)
 4008bac:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 4, FrameBase); // frame0 base address
 4008bb0:	e0bffc17 	ldw	r2,-16(fp)
 4008bb4:	10800404 	addi	r2,r2,16
 4008bb8:	e0fffd17 	ldw	r3,-12(fp)
 4008bbc:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 5, words); // frame0 words
 4008bc0:	e0bffc17 	ldw	r2,-16(fp)
 4008bc4:	10800504 	addi	r2,r2,20
 4008bc8:	e0fffe17 	ldw	r3,-8(fp)
 4008bcc:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 6, cycle); // frame0 single cylce color pattern
 4008bd0:	e0bffc17 	ldw	r2,-16(fp)
 4008bd4:	10800604 	addi	r2,r2,24
 4008bd8:	e0ffff17 	ldw	r3,-4(fp)
 4008bdc:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 8, width); // frame0 width
 4008be0:	e0bffc17 	ldw	r2,-16(fp)
 4008be4:	10800804 	addi	r2,r2,32
 4008be8:	e0c00117 	ldw	r3,4(fp)
 4008bec:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 9, height); // frame0 height
 4008bf0:	e0bffc17 	ldw	r2,-16(fp)
 4008bf4:	10800904 	addi	r2,r2,36
 4008bf8:	e0c00217 	ldw	r3,8(fp)
 4008bfc:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 10, interlace); // frame0 interlaced
 4008c00:	e0bffc17 	ldw	r2,-16(fp)
 4008c04:	10800a04 	addi	r2,r2,40
 4008c08:	e0c00317 	ldw	r3,12(fp)
 4008c0c:	10c00035 	stwio	r3,0(r2)
}
 4008c10:	e037883a 	mov	sp,fp
 4008c14:	df000017 	ldw	fp,0(sp)
 4008c18:	dec00104 	addi	sp,sp,4
 4008c1c:	f800283a 	ret

04008c20 <FrameReader_SetFrame1>:

void FrameReader_SetFrame1(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
 4008c20:	defffb04 	addi	sp,sp,-20
 4008c24:	df000415 	stw	fp,16(sp)
 4008c28:	df000404 	addi	fp,sp,16
 4008c2c:	e13ffc15 	stw	r4,-16(fp)
 4008c30:	e17ffd15 	stw	r5,-12(fp)
 4008c34:	e1bffe15 	stw	r6,-8(fp)
 4008c38:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 11, FrameBase); // frame0 base address
 4008c3c:	e0bffc17 	ldw	r2,-16(fp)
 4008c40:	10800b04 	addi	r2,r2,44
 4008c44:	e0fffd17 	ldw	r3,-12(fp)
 4008c48:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 12, words); // frame0 words
 4008c4c:	e0bffc17 	ldw	r2,-16(fp)
 4008c50:	10800c04 	addi	r2,r2,48
 4008c54:	e0fffe17 	ldw	r3,-8(fp)
 4008c58:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 13, cycle); // frame0 single cylce color pattern
 4008c5c:	e0bffc17 	ldw	r2,-16(fp)
 4008c60:	10800d04 	addi	r2,r2,52
 4008c64:	e0ffff17 	ldw	r3,-4(fp)
 4008c68:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 15, width); // frame0 width
 4008c6c:	e0bffc17 	ldw	r2,-16(fp)
 4008c70:	10800f04 	addi	r2,r2,60
 4008c74:	e0c00117 	ldw	r3,4(fp)
 4008c78:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 16, height); // frame0 height
 4008c7c:	e0bffc17 	ldw	r2,-16(fp)
 4008c80:	10801004 	addi	r2,r2,64
 4008c84:	e0c00217 	ldw	r3,8(fp)
 4008c88:	10c00035 	stwio	r3,0(r2)
    IOWR(VipBase, 17, interlace); // frame0 interlaced
 4008c8c:	e0bffc17 	ldw	r2,-16(fp)
 4008c90:	10801104 	addi	r2,r2,68
 4008c94:	e0c00317 	ldw	r3,12(fp)
 4008c98:	10c00035 	stwio	r3,0(r2)
}
 4008c9c:	e037883a 	mov	sp,fp
 4008ca0:	df000017 	ldw	fp,0(sp)
 4008ca4:	dec00104 	addi	sp,sp,4
 4008ca8:	f800283a 	ret

04008cac <FrameReader_SelectFrame>:

void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex){
 4008cac:	defffd04 	addi	sp,sp,-12
 4008cb0:	df000215 	stw	fp,8(sp)
 4008cb4:	df000204 	addi	fp,sp,8
 4008cb8:	e13ffe15 	stw	r4,-8(fp)
 4008cbc:	2805883a 	mov	r2,r5
 4008cc0:	e0bfff05 	stb	r2,-4(fp)
    IOWR(VipBase, 3, FrameIndex);
 4008cc4:	e0bffe17 	ldw	r2,-8(fp)
 4008cc8:	10800304 	addi	r2,r2,12
 4008ccc:	e0ffff03 	ldbu	r3,-4(fp)
 4008cd0:	10c00035 	stwio	r3,0(r2)
}        
 4008cd4:	e037883a 	mov	sp,fp
 4008cd8:	df000017 	ldw	fp,0(sp)
 4008cdc:	dec00104 	addi	sp,sp,4
 4008ce0:	f800283a 	ret

04008ce4 <FrameReader_Go>:

void FrameReader_Go(alt_u32 VipBase, bool bGO){
 4008ce4:	defffd04 	addi	sp,sp,-12
 4008ce8:	df000215 	stw	fp,8(sp)
 4008cec:	df000204 	addi	fp,sp,8
 4008cf0:	e13ffe15 	stw	r4,-8(fp)
 4008cf4:	e17fff15 	stw	r5,-4(fp)
    IOWR(VipBase, 0, bGO?0x01:0x00);
 4008cf8:	e0bffe17 	ldw	r2,-8(fp)
 4008cfc:	e0ffff17 	ldw	r3,-4(fp)
 4008d00:	1806c03a 	cmpne	r3,r3,zero
 4008d04:	18c03fcc 	andi	r3,r3,255
 4008d08:	10c00035 	stwio	r3,0(r2)
}
 4008d0c:	e037883a 	mov	sp,fp
 4008d10:	df000017 	ldw	fp,0(sp)
 4008d14:	dec00104 	addi	sp,sp,4
 4008d18:	f800283a 	ret

04008d1c <VIPFR_ReserveBackground>:


///////////////////////////////////////////////////////////////


void VIPFR_ReserveBackground(VIP_FRAME_READER* p){
 4008d1c:	defffa04 	addi	sp,sp,-24
 4008d20:	dfc00515 	stw	ra,20(sp)
 4008d24:	df000415 	stw	fp,16(sp)
 4008d28:	df000404 	addi	fp,sp,16
 4008d2c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 *pSrc, *pDes;
    int nSize;
    
    nSize = p->width * p->height * p->bytes_per_pixel;
 4008d30:	e0bfff17 	ldw	r2,-4(fp)
 4008d34:	10c00517 	ldw	r3,20(r2)
 4008d38:	e0bfff17 	ldw	r2,-4(fp)
 4008d3c:	10800617 	ldw	r2,24(r2)
 4008d40:	1809883a 	mov	r4,r3
 4008d44:	100b883a 	mov	r5,r2
 4008d48:	4009dd80 	call	4009dd8 <__mulsi3>
 4008d4c:	1007883a 	mov	r3,r2
 4008d50:	e0bfff17 	ldw	r2,-4(fp)
 4008d54:	10800717 	ldw	r2,28(r2)
 4008d58:	1809883a 	mov	r4,r3
 4008d5c:	100b883a 	mov	r5,r2
 4008d60:	4009dd80 	call	4009dd8 <__mulsi3>
 4008d64:	e0bffe15 	stw	r2,-8(fp)
        
    
    if (p->DisplayFrame == 0){
 4008d68:	e0bfff17 	ldw	r2,-4(fp)
 4008d6c:	10800303 	ldbu	r2,12(r2)
 4008d70:	10803fcc 	andi	r2,r2,255
 4008d74:	1000071e 	bne	r2,zero,4008d94 <VIPFR_ReserveBackground+0x78>
        pSrc = p->Frame0_Base;
 4008d78:	e0bfff17 	ldw	r2,-4(fp)
 4008d7c:	10800117 	ldw	r2,4(r2)
 4008d80:	e0bffc15 	stw	r2,-16(fp)
        pDes = p->Frame1_Base;
 4008d84:	e0bfff17 	ldw	r2,-4(fp)
 4008d88:	10800217 	ldw	r2,8(r2)
 4008d8c:	e0bffd15 	stw	r2,-12(fp)
 4008d90:	00000606 	br	4008dac <VIPFR_ReserveBackground+0x90>
    }else{
        pDes = p->Frame0_Base;
 4008d94:	e0bfff17 	ldw	r2,-4(fp)
 4008d98:	10800117 	ldw	r2,4(r2)
 4008d9c:	e0bffd15 	stw	r2,-12(fp)
        pSrc = p->Frame1_Base;
 4008da0:	e0bfff17 	ldw	r2,-4(fp)
 4008da4:	10800217 	ldw	r2,8(r2)
 4008da8:	e0bffc15 	stw	r2,-16(fp)
    }
#ifdef ENABLE_DMA    
    my_memcpy(pDes, pSrc, nSize);
#else    
    memcpy(pDes, pSrc, nSize);
 4008dac:	e0bffe17 	ldw	r2,-8(fp)
 4008db0:	e13ffd17 	ldw	r4,-12(fp)
 4008db4:	e17ffc17 	ldw	r5,-16(fp)
 4008db8:	100d883a 	mov	r6,r2
 4008dbc:	400abf80 	call	400abf8 <memcpy>
#endif //ENABLE_DMA    
}
 4008dc0:	e037883a 	mov	sp,fp
 4008dc4:	dfc00117 	ldw	ra,4(sp)
 4008dc8:	df000017 	ldw	fp,0(sp)
 4008dcc:	dec00204 	addi	sp,sp,8
 4008dd0:	f800283a 	ret

04008dd4 <sqrt>:
 4008dd4:	defff104 	addi	sp,sp,-60
 4008dd8:	dcc00d15 	stw	r19,52(sp)
 4008ddc:	dc800c15 	stw	r18,48(sp)
 4008de0:	dc400b15 	stw	r17,44(sp)
 4008de4:	dc000a15 	stw	r16,40(sp)
 4008de8:	2023883a 	mov	r17,r4
 4008dec:	dfc00e15 	stw	ra,56(sp)
 4008df0:	04810234 	movhi	r18,1032
 4008df4:	94a36f04 	addi	r18,r18,-29252
 4008df8:	2821883a 	mov	r16,r5
 4008dfc:	4008f1c0 	call	4008f1c <__ieee754_sqrt>
 4008e00:	91000017 	ldw	r4,0(r18)
 4008e04:	1027883a 	mov	r19,r2
 4008e08:	00bfffc4 	movi	r2,-1
 4008e0c:	20800d26 	beq	r4,r2,4008e44 <sqrt+0x70>
 4008e10:	8809883a 	mov	r4,r17
 4008e14:	800b883a 	mov	r5,r16
 4008e18:	d8c00915 	stw	r3,36(sp)
 4008e1c:	40091e00 	call	40091e0 <__isnand>
 4008e20:	d8c00917 	ldw	r3,36(sp)
 4008e24:	1000071e 	bne	r2,zero,4008e44 <sqrt+0x70>
 4008e28:	8809883a 	mov	r4,r17
 4008e2c:	800b883a 	mov	r5,r16
 4008e30:	000d883a 	mov	r6,zero
 4008e34:	000f883a 	mov	r7,zero
 4008e38:	4009ab40 	call	4009ab4 <__ltdf2>
 4008e3c:	d8c00917 	ldw	r3,36(sp)
 4008e40:	10000816 	blt	r2,zero,4008e64 <sqrt+0x90>
 4008e44:	9805883a 	mov	r2,r19
 4008e48:	dfc00e17 	ldw	ra,56(sp)
 4008e4c:	dcc00d17 	ldw	r19,52(sp)
 4008e50:	dc800c17 	ldw	r18,48(sp)
 4008e54:	dc400b17 	ldw	r17,44(sp)
 4008e58:	dc000a17 	ldw	r16,40(sp)
 4008e5c:	dec00f04 	addi	sp,sp,60
 4008e60:	f800283a 	ret
 4008e64:	94800017 	ldw	r18,0(r18)
 4008e68:	00800044 	movi	r2,1
 4008e6c:	d8800015 	stw	r2,0(sp)
 4008e70:	008101f4 	movhi	r2,1031
 4008e74:	1094f304 	addi	r2,r2,21452
 4008e78:	d8800115 	stw	r2,4(sp)
 4008e7c:	d8000815 	stw	zero,32(sp)
 4008e80:	dc400415 	stw	r17,16(sp)
 4008e84:	dc000515 	stw	r16,20(sp)
 4008e88:	dc400215 	stw	r17,8(sp)
 4008e8c:	dc000315 	stw	r16,12(sp)
 4008e90:	9000111e 	bne	r18,zero,4008ed8 <sqrt+0x104>
 4008e94:	d8000615 	stw	zero,24(sp)
 4008e98:	d8000715 	stw	zero,28(sp)
 4008e9c:	d809883a 	mov	r4,sp
 4008ea0:	400920c0 	call	400920c <matherr>
 4008ea4:	10001526 	beq	r2,zero,4008efc <sqrt+0x128>
 4008ea8:	d8800817 	ldw	r2,32(sp)
 4008eac:	1000171e 	bne	r2,zero,4008f0c <sqrt+0x138>
 4008eb0:	dcc00617 	ldw	r19,24(sp)
 4008eb4:	d8c00717 	ldw	r3,28(sp)
 4008eb8:	9805883a 	mov	r2,r19
 4008ebc:	dfc00e17 	ldw	ra,56(sp)
 4008ec0:	dcc00d17 	ldw	r19,52(sp)
 4008ec4:	dc800c17 	ldw	r18,48(sp)
 4008ec8:	dc400b17 	ldw	r17,44(sp)
 4008ecc:	dc000a17 	ldw	r16,40(sp)
 4008ed0:	dec00f04 	addi	sp,sp,60
 4008ed4:	f800283a 	ret
 4008ed8:	0009883a 	mov	r4,zero
 4008edc:	000b883a 	mov	r5,zero
 4008ee0:	000d883a 	mov	r6,zero
 4008ee4:	000f883a 	mov	r7,zero
 4008ee8:	40099000 	call	4009900 <__divdf3>
 4008eec:	d8800615 	stw	r2,24(sp)
 4008ef0:	d8c00715 	stw	r3,28(sp)
 4008ef4:	00800084 	movi	r2,2
 4008ef8:	90bfe81e 	bne	r18,r2,4008e9c <__reset+0xfb007e9c>
 4008efc:	400a43c0 	call	400a43c <__errno>
 4008f00:	00c00844 	movi	r3,33
 4008f04:	10c00015 	stw	r3,0(r2)
 4008f08:	003fe706 	br	4008ea8 <__reset+0xfb007ea8>
 4008f0c:	400a43c0 	call	400a43c <__errno>
 4008f10:	d8c00817 	ldw	r3,32(sp)
 4008f14:	10c00015 	stw	r3,0(r2)
 4008f18:	003fe506 	br	4008eb0 <__reset+0xfb007eb0>

04008f1c <__ieee754_sqrt>:
 4008f1c:	defffd04 	addi	sp,sp,-12
 4008f20:	dc400115 	stw	r17,4(sp)
 4008f24:	dc000015 	stw	r16,0(sp)
 4008f28:	dfc00215 	stw	ra,8(sp)
 4008f2c:	28dffc2c 	andhi	r3,r5,32752
 4008f30:	009ffc34 	movhi	r2,32752
 4008f34:	2821883a 	mov	r16,r5
 4008f38:	2023883a 	mov	r17,r4
 4008f3c:	2811883a 	mov	r8,r5
 4008f40:	2013883a 	mov	r9,r4
 4008f44:	18808326 	beq	r3,r2,4009154 <__ieee754_sqrt+0x238>
 4008f48:	0140610e 	bge	zero,r5,40090d0 <__ieee754_sqrt+0x1b4>
 4008f4c:	2805d53a 	srai	r2,r5,20
 4008f50:	10006a26 	beq	r2,zero,40090fc <__ieee754_sqrt+0x1e0>
 4008f54:	00c00434 	movhi	r3,16
 4008f58:	18ffffc4 	addi	r3,r3,-1
 4008f5c:	10bf0044 	addi	r2,r2,-1023
 4008f60:	40d0703a 	and	r8,r8,r3
 4008f64:	10c0004c 	andi	r3,r2,1
 4008f68:	42000434 	orhi	r8,r8,16
 4008f6c:	1800511e 	bne	r3,zero,40090b4 <__ieee754_sqrt+0x198>
 4008f70:	4808d7fa 	srli	r4,r9,31
 4008f74:	4211883a 	add	r8,r8,r8
 4008f78:	101bd07a 	srai	r13,r2,1
 4008f7c:	4107883a 	add	r3,r8,r4
 4008f80:	4a4b883a 	add	r5,r9,r9
 4008f84:	01000584 	movi	r4,22
 4008f88:	0015883a 	mov	r10,zero
 4008f8c:	000d883a 	mov	r6,zero
 4008f90:	00800834 	movhi	r2,32
 4008f94:	308f883a 	add	r7,r6,r2
 4008f98:	2810d7fa 	srli	r8,r5,31
 4008f9c:	213fffc4 	addi	r4,r4,-1
 4008fa0:	19c00316 	blt	r3,r7,4008fb0 <__ieee754_sqrt+0x94>
 4008fa4:	19c7c83a 	sub	r3,r3,r7
 4008fa8:	388d883a 	add	r6,r7,r2
 4008fac:	5095883a 	add	r10,r10,r2
 4008fb0:	18c7883a 	add	r3,r3,r3
 4008fb4:	1a07883a 	add	r3,r3,r8
 4008fb8:	294b883a 	add	r5,r5,r5
 4008fbc:	1004d07a 	srli	r2,r2,1
 4008fc0:	203ff41e 	bne	r4,zero,4008f94 <__reset+0xfb007f94>
 4008fc4:	01e00034 	movhi	r7,32768
 4008fc8:	02400804 	movi	r9,32
 4008fcc:	0005883a 	mov	r2,zero
 4008fd0:	0017883a 	mov	r11,zero
 4008fd4:	3819883a 	mov	r12,r7
 4008fd8:	00000806 	br	4008ffc <__ieee754_sqrt+0xe0>
 4008fdc:	19803226 	beq	r3,r6,40090a8 <__ieee754_sqrt+0x18c>
 4008fe0:	2810d7fa 	srli	r8,r5,31
 4008fe4:	18c7883a 	add	r3,r3,r3
 4008fe8:	4a7fffc4 	addi	r9,r9,-1
 4008fec:	1a07883a 	add	r3,r3,r8
 4008ff0:	294b883a 	add	r5,r5,r5
 4008ff4:	380ed07a 	srli	r7,r7,1
 4008ff8:	48001326 	beq	r9,zero,4009048 <__ieee754_sqrt+0x12c>
 4008ffc:	59d1883a 	add	r8,r11,r7
 4009000:	30fff60e 	bge	r6,r3,4008fdc <__reset+0xfb007fdc>
 4009004:	4120002c 	andhi	r4,r8,32768
 4009008:	41d7883a 	add	r11,r8,r7
 400900c:	23002326 	beq	r4,r12,400909c <__ieee754_sqrt+0x180>
 4009010:	3009883a 	mov	r4,r6
 4009014:	1987c83a 	sub	r3,r3,r6
 4009018:	2a00012e 	bgeu	r5,r8,4009020 <__ieee754_sqrt+0x104>
 400901c:	18ffffc4 	addi	r3,r3,-1
 4009020:	2a0bc83a 	sub	r5,r5,r8
 4009024:	2810d7fa 	srli	r8,r5,31
 4009028:	18c7883a 	add	r3,r3,r3
 400902c:	4a7fffc4 	addi	r9,r9,-1
 4009030:	11c5883a 	add	r2,r2,r7
 4009034:	200d883a 	mov	r6,r4
 4009038:	1a07883a 	add	r3,r3,r8
 400903c:	294b883a 	add	r5,r5,r5
 4009040:	380ed07a 	srli	r7,r7,1
 4009044:	483fed1e 	bne	r9,zero,4008ffc <__reset+0xfb007ffc>
 4009048:	28c6b03a 	or	r3,r5,r3
 400904c:	18000426 	beq	r3,zero,4009060 <__ieee754_sqrt+0x144>
 4009050:	00ffffc4 	movi	r3,-1
 4009054:	10c05026 	beq	r2,r3,4009198 <__ieee754_sqrt+0x27c>
 4009058:	10c0004c 	andi	r3,r2,1
 400905c:	1885883a 	add	r2,r3,r2
 4009060:	1022d07a 	srli	r17,r2,1
 4009064:	5007d07a 	srai	r3,r10,1
 4009068:	008ff834 	movhi	r2,16352
 400906c:	5280004c 	andi	r10,r10,1
 4009070:	1887883a 	add	r3,r3,r2
 4009074:	5000141e 	bne	r10,zero,40090c8 <__ieee754_sqrt+0x1ac>
 4009078:	681a953a 	slli	r13,r13,20
 400907c:	68e1883a 	add	r16,r13,r3
 4009080:	8805883a 	mov	r2,r17
 4009084:	8007883a 	mov	r3,r16
 4009088:	dfc00217 	ldw	ra,8(sp)
 400908c:	dc400117 	ldw	r17,4(sp)
 4009090:	dc000017 	ldw	r16,0(sp)
 4009094:	dec00304 	addi	sp,sp,12
 4009098:	f800283a 	ret
 400909c:	583fdc16 	blt	r11,zero,4009010 <__reset+0xfb008010>
 40090a0:	31000044 	addi	r4,r6,1
 40090a4:	003fdb06 	br	4009014 <__reset+0xfb008014>
 40090a8:	2a3fd62e 	bgeu	r5,r8,4009004 <__reset+0xfb008004>
 40090ac:	180d883a 	mov	r6,r3
 40090b0:	003fcb06 	br	4008fe0 <__reset+0xfb007fe0>
 40090b4:	4806d7fa 	srli	r3,r9,31
 40090b8:	4211883a 	add	r8,r8,r8
 40090bc:	4a53883a 	add	r9,r9,r9
 40090c0:	40d1883a 	add	r8,r8,r3
 40090c4:	003faa06 	br	4008f70 <__reset+0xfb007f70>
 40090c8:	8c600034 	orhi	r17,r17,32768
 40090cc:	003fea06 	br	4009078 <__reset+0xfb008078>
 40090d0:	00a00034 	movhi	r2,32768
 40090d4:	10bfffc4 	addi	r2,r2,-1
 40090d8:	2884703a 	and	r2,r5,r2
 40090dc:	1104b03a 	or	r2,r2,r4
 40090e0:	103fe726 	beq	r2,zero,4009080 <__reset+0xfb008080>
 40090e4:	2800331e 	bne	r5,zero,40091b4 <__ieee754_sqrt+0x298>
 40090e8:	0005883a 	mov	r2,zero
 40090ec:	4810d2fa 	srli	r8,r9,11
 40090f0:	10bffac4 	addi	r2,r2,-21
 40090f4:	4812957a 	slli	r9,r9,21
 40090f8:	403ffc26 	beq	r8,zero,40090ec <__reset+0xfb0080ec>
 40090fc:	40c0042c 	andhi	r3,r8,16
 4009100:	1800281e 	bne	r3,zero,40091a4 <__ieee754_sqrt+0x288>
 4009104:	4211883a 	add	r8,r8,r8
 4009108:	4100042c 	andhi	r4,r8,16
 400910c:	18c00044 	addi	r3,r3,1
 4009110:	203ffc26 	beq	r4,zero,4009104 <__reset+0xfb008104>
 4009114:	01400044 	movi	r5,1
 4009118:	01000804 	movi	r4,32
 400911c:	28cbc83a 	sub	r5,r5,r3
 4009120:	20c9c83a 	sub	r4,r4,r3
 4009124:	4908d83a 	srl	r4,r9,r4
 4009128:	1145883a 	add	r2,r2,r5
 400912c:	48d2983a 	sll	r9,r9,r3
 4009130:	4110b03a 	or	r8,r8,r4
 4009134:	00c00434 	movhi	r3,16
 4009138:	18ffffc4 	addi	r3,r3,-1
 400913c:	10bf0044 	addi	r2,r2,-1023
 4009140:	40d0703a 	and	r8,r8,r3
 4009144:	10c0004c 	andi	r3,r2,1
 4009148:	42000434 	orhi	r8,r8,16
 400914c:	183f8826 	beq	r3,zero,4008f70 <__reset+0xfb007f70>
 4009150:	003fd806 	br	40090b4 <__reset+0xfb0080b4>
 4009154:	200d883a 	mov	r6,r4
 4009158:	280f883a 	mov	r7,r5
 400915c:	400961c0 	call	400961c <__muldf3>
 4009160:	8809883a 	mov	r4,r17
 4009164:	800b883a 	mov	r5,r16
 4009168:	100d883a 	mov	r6,r2
 400916c:	180f883a 	mov	r7,r3
 4009170:	40095680 	call	4009568 <__adddf3>
 4009174:	1023883a 	mov	r17,r2
 4009178:	1821883a 	mov	r16,r3
 400917c:	8805883a 	mov	r2,r17
 4009180:	8007883a 	mov	r3,r16
 4009184:	dfc00217 	ldw	ra,8(sp)
 4009188:	dc400117 	ldw	r17,4(sp)
 400918c:	dc000017 	ldw	r16,0(sp)
 4009190:	dec00304 	addi	sp,sp,12
 4009194:	f800283a 	ret
 4009198:	52800044 	addi	r10,r10,1
 400919c:	0023883a 	mov	r17,zero
 40091a0:	003fb006 	br	4009064 <__reset+0xfb008064>
 40091a4:	01000804 	movi	r4,32
 40091a8:	01400044 	movi	r5,1
 40091ac:	0007883a 	mov	r3,zero
 40091b0:	003fdc06 	br	4009124 <__reset+0xfb008124>
 40091b4:	200d883a 	mov	r6,r4
 40091b8:	280f883a 	mov	r7,r5
 40091bc:	40095bc0 	call	40095bc <__subdf3>
 40091c0:	1009883a 	mov	r4,r2
 40091c4:	180b883a 	mov	r5,r3
 40091c8:	100d883a 	mov	r6,r2
 40091cc:	180f883a 	mov	r7,r3
 40091d0:	40099000 	call	4009900 <__divdf3>
 40091d4:	1023883a 	mov	r17,r2
 40091d8:	1821883a 	mov	r16,r3
 40091dc:	003fa806 	br	4009080 <__reset+0xfb008080>

040091e0 <__isnand>:
 40091e0:	0105c83a 	sub	r2,zero,r4
 40091e4:	1108b03a 	or	r4,r2,r4
 40091e8:	2004d7fa 	srli	r2,r4,31
 40091ec:	00e00034 	movhi	r3,32768
 40091f0:	18ffffc4 	addi	r3,r3,-1
 40091f4:	28ca703a 	and	r5,r5,r3
 40091f8:	1144b03a 	or	r2,r2,r5
 40091fc:	00dffc34 	movhi	r3,32752
 4009200:	1885c83a 	sub	r2,r3,r2
 4009204:	1004d7fa 	srli	r2,r2,31
 4009208:	f800283a 	ret

0400920c <matherr>:
 400920c:	0005883a 	mov	r2,zero
 4009210:	f800283a 	ret

04009214 <_fpadd_parts>:
 4009214:	2005883a 	mov	r2,r4
 4009218:	21000017 	ldw	r4,0(r4)
 400921c:	01c00044 	movi	r7,1
 4009220:	3900622e 	bgeu	r7,r4,40093ac <_fpadd_parts+0x198>
 4009224:	28c00017 	ldw	r3,0(r5)
 4009228:	38c05f2e 	bgeu	r7,r3,40093a8 <_fpadd_parts+0x194>
 400922c:	01c00104 	movi	r7,4
 4009230:	21c0c626 	beq	r4,r7,400954c <_fpadd_parts+0x338>
 4009234:	19c05c26 	beq	r3,r7,40093a8 <_fpadd_parts+0x194>
 4009238:	01c00084 	movi	r7,2
 400923c:	19c06b26 	beq	r3,r7,40093ec <_fpadd_parts+0x1d8>
 4009240:	21c05926 	beq	r4,r7,40093a8 <_fpadd_parts+0x194>
 4009244:	11c00217 	ldw	r7,8(r2)
 4009248:	2ac00217 	ldw	r11,8(r5)
 400924c:	13000317 	ldw	r12,12(r2)
 4009250:	13400417 	ldw	r13,16(r2)
 4009254:	3ac9c83a 	sub	r4,r7,r11
 4009258:	2a000317 	ldw	r8,12(r5)
 400925c:	2a400417 	ldw	r9,16(r5)
 4009260:	2015883a 	mov	r10,r4
 4009264:	20007516 	blt	r4,zero,400943c <_fpadd_parts+0x228>
 4009268:	00c00fc4 	movi	r3,63
 400926c:	1a805016 	blt	r3,r10,40093b0 <_fpadd_parts+0x19c>
 4009270:	0100870e 	bge	zero,r4,4009490 <_fpadd_parts+0x27c>
 4009274:	50fff804 	addi	r3,r10,-32
 4009278:	18009916 	blt	r3,zero,40094e0 <_fpadd_parts+0x2cc>
 400927c:	48d6d83a 	srl	r11,r9,r3
 4009280:	001d883a 	mov	r14,zero
 4009284:	18009e16 	blt	r3,zero,4009500 <_fpadd_parts+0x2ec>
 4009288:	01000044 	movi	r4,1
 400928c:	20c6983a 	sll	r3,r4,r3
 4009290:	0015883a 	mov	r10,zero
 4009294:	513fffc4 	addi	r4,r10,-1
 4009298:	2295403a 	cmpgeu	r10,r4,r10
 400929c:	1a87c83a 	sub	r3,r3,r10
 40092a0:	1a52703a 	and	r9,r3,r9
 40092a4:	2210703a 	and	r8,r4,r8
 40092a8:	4250b03a 	or	r8,r8,r9
 40092ac:	4010c03a 	cmpne	r8,r8,zero
 40092b0:	42d0b03a 	or	r8,r8,r11
 40092b4:	7013883a 	mov	r9,r14
 40092b8:	11000117 	ldw	r4,4(r2)
 40092bc:	28800117 	ldw	r2,4(r5)
 40092c0:	20804126 	beq	r4,r2,40093c8 <_fpadd_parts+0x1b4>
 40092c4:	20006326 	beq	r4,zero,4009454 <_fpadd_parts+0x240>
 40092c8:	4305c83a 	sub	r2,r8,r12
 40092cc:	4091803a 	cmpltu	r8,r8,r2
 40092d0:	4b47c83a 	sub	r3,r9,r13
 40092d4:	1a07c83a 	sub	r3,r3,r8
 40092d8:	18006316 	blt	r3,zero,4009468 <_fpadd_parts+0x254>
 40092dc:	30000115 	stw	zero,4(r6)
 40092e0:	31c00215 	stw	r7,8(r6)
 40092e4:	30800315 	stw	r2,12(r6)
 40092e8:	30c00415 	stw	r3,16(r6)
 40092ec:	11ffffc4 	addi	r7,r2,-1
 40092f0:	388b403a 	cmpgeu	r5,r7,r2
 40092f4:	194bc83a 	sub	r5,r3,r5
 40092f8:	01040034 	movhi	r4,4096
 40092fc:	213fffc4 	addi	r4,r4,-1
 4009300:	21401736 	bltu	r4,r5,4009360 <_fpadd_parts+0x14c>
 4009304:	29008226 	beq	r5,r4,4009510 <_fpadd_parts+0x2fc>
 4009308:	31400217 	ldw	r5,8(r6)
 400930c:	02840034 	movhi	r10,4096
 4009310:	52bfffc4 	addi	r10,r10,-1
 4009314:	033fff84 	movi	r12,-2
 4009318:	297fffc4 	addi	r5,r5,-1
 400931c:	00000106 	br	4009324 <_fpadd_parts+0x110>
 4009320:	3a804a26 	beq	r7,r10,400944c <_fpadd_parts+0x238>
 4009324:	1089883a 	add	r4,r2,r2
 4009328:	2091803a 	cmpltu	r8,r4,r2
 400932c:	18c7883a 	add	r3,r3,r3
 4009330:	227fffc4 	addi	r9,r4,-1
 4009334:	40d1883a 	add	r8,r8,r3
 4009338:	490f403a 	cmpgeu	r7,r9,r4
 400933c:	41cfc83a 	sub	r7,r8,r7
 4009340:	2817883a 	mov	r11,r5
 4009344:	2005883a 	mov	r2,r4
 4009348:	4007883a 	mov	r3,r8
 400934c:	297fffc4 	addi	r5,r5,-1
 4009350:	51fff32e 	bgeu	r10,r7,4009320 <__reset+0xfb008320>
 4009354:	31000315 	stw	r4,12(r6)
 4009358:	32000415 	stw	r8,16(r6)
 400935c:	32c00215 	stw	r11,8(r6)
 4009360:	010000c4 	movi	r4,3
 4009364:	31000015 	stw	r4,0(r6)
 4009368:	01080034 	movhi	r4,8192
 400936c:	213fffc4 	addi	r4,r4,-1
 4009370:	20c00b2e 	bgeu	r4,r3,40093a0 <_fpadd_parts+0x18c>
 4009374:	180e97fa 	slli	r7,r3,31
 4009378:	1008d07a 	srli	r4,r2,1
 400937c:	31400217 	ldw	r5,8(r6)
 4009380:	1806d07a 	srli	r3,r3,1
 4009384:	1080004c 	andi	r2,r2,1
 4009388:	3908b03a 	or	r4,r7,r4
 400938c:	1108b03a 	or	r4,r2,r4
 4009390:	29400044 	addi	r5,r5,1
 4009394:	31000315 	stw	r4,12(r6)
 4009398:	30c00415 	stw	r3,16(r6)
 400939c:	31400215 	stw	r5,8(r6)
 40093a0:	3005883a 	mov	r2,r6
 40093a4:	f800283a 	ret
 40093a8:	2805883a 	mov	r2,r5
 40093ac:	f800283a 	ret
 40093b0:	59c01e0e 	bge	r11,r7,400942c <_fpadd_parts+0x218>
 40093b4:	11000117 	ldw	r4,4(r2)
 40093b8:	28800117 	ldw	r2,4(r5)
 40093bc:	0011883a 	mov	r8,zero
 40093c0:	0013883a 	mov	r9,zero
 40093c4:	20bfbf1e 	bne	r4,r2,40092c4 <__reset+0xfb0082c4>
 40093c8:	4305883a 	add	r2,r8,r12
 40093cc:	1207803a 	cmpltu	r3,r2,r8
 40093d0:	4b53883a 	add	r9,r9,r13
 40093d4:	1a47883a 	add	r3,r3,r9
 40093d8:	31000115 	stw	r4,4(r6)
 40093dc:	31c00215 	stw	r7,8(r6)
 40093e0:	30800315 	stw	r2,12(r6)
 40093e4:	30c00415 	stw	r3,16(r6)
 40093e8:	003fdd06 	br	4009360 <__reset+0xfb008360>
 40093ec:	20ffef1e 	bne	r4,r3,40093ac <__reset+0xfb0083ac>
 40093f0:	31000015 	stw	r4,0(r6)
 40093f4:	10c00117 	ldw	r3,4(r2)
 40093f8:	30c00115 	stw	r3,4(r6)
 40093fc:	10c00217 	ldw	r3,8(r2)
 4009400:	11000117 	ldw	r4,4(r2)
 4009404:	29400117 	ldw	r5,4(r5)
 4009408:	30c00215 	stw	r3,8(r6)
 400940c:	10c00317 	ldw	r3,12(r2)
 4009410:	2908703a 	and	r4,r5,r4
 4009414:	30c00315 	stw	r3,12(r6)
 4009418:	10c00417 	ldw	r3,16(r2)
 400941c:	31000115 	stw	r4,4(r6)
 4009420:	3005883a 	mov	r2,r6
 4009424:	30c00415 	stw	r3,16(r6)
 4009428:	f800283a 	ret
 400942c:	580f883a 	mov	r7,r11
 4009430:	0019883a 	mov	r12,zero
 4009434:	001b883a 	mov	r13,zero
 4009438:	003f9f06 	br	40092b8 <__reset+0xfb0082b8>
 400943c:	0115c83a 	sub	r10,zero,r4
 4009440:	00c00fc4 	movi	r3,63
 4009444:	1abfda16 	blt	r3,r10,40093b0 <__reset+0xfb0083b0>
 4009448:	003f8906 	br	4009270 <__reset+0xfb008270>
 400944c:	627fb52e 	bgeu	r12,r9,4009324 <__reset+0xfb008324>
 4009450:	003fc006 	br	4009354 <__reset+0xfb008354>
 4009454:	6205c83a 	sub	r2,r12,r8
 4009458:	6099803a 	cmpltu	r12,r12,r2
 400945c:	6a47c83a 	sub	r3,r13,r9
 4009460:	1b07c83a 	sub	r3,r3,r12
 4009464:	183f9d0e 	bge	r3,zero,40092dc <__reset+0xfb0082dc>
 4009468:	0085c83a 	sub	r2,zero,r2
 400946c:	1008c03a 	cmpne	r4,r2,zero
 4009470:	00c7c83a 	sub	r3,zero,r3
 4009474:	1907c83a 	sub	r3,r3,r4
 4009478:	01000044 	movi	r4,1
 400947c:	31000115 	stw	r4,4(r6)
 4009480:	31c00215 	stw	r7,8(r6)
 4009484:	30800315 	stw	r2,12(r6)
 4009488:	30c00415 	stw	r3,16(r6)
 400948c:	003f9706 	br	40092ec <__reset+0xfb0082ec>
 4009490:	203f8926 	beq	r4,zero,40092b8 <__reset+0xfb0082b8>
 4009494:	50fff804 	addi	r3,r10,-32
 4009498:	3a8f883a 	add	r7,r7,r10
 400949c:	18002316 	blt	r3,zero,400952c <_fpadd_parts+0x318>
 40094a0:	68d6d83a 	srl	r11,r13,r3
 40094a4:	001d883a 	mov	r14,zero
 40094a8:	18001c16 	blt	r3,zero,400951c <_fpadd_parts+0x308>
 40094ac:	01000044 	movi	r4,1
 40094b0:	20c6983a 	sll	r3,r4,r3
 40094b4:	0015883a 	mov	r10,zero
 40094b8:	513fffc4 	addi	r4,r10,-1
 40094bc:	2295403a 	cmpgeu	r10,r4,r10
 40094c0:	1a87c83a 	sub	r3,r3,r10
 40094c4:	1b5a703a 	and	r13,r3,r13
 40094c8:	2318703a 	and	r12,r4,r12
 40094cc:	6358b03a 	or	r12,r12,r13
 40094d0:	6018c03a 	cmpne	r12,r12,zero
 40094d4:	62d8b03a 	or	r12,r12,r11
 40094d8:	701b883a 	mov	r13,r14
 40094dc:	003f7606 	br	40092b8 <__reset+0xfb0082b8>
 40094e0:	4808907a 	slli	r4,r9,1
 40094e4:	02c007c4 	movi	r11,31
 40094e8:	5a97c83a 	sub	r11,r11,r10
 40094ec:	22c8983a 	sll	r4,r4,r11
 40094f0:	4296d83a 	srl	r11,r8,r10
 40094f4:	4a9cd83a 	srl	r14,r9,r10
 40094f8:	22d6b03a 	or	r11,r4,r11
 40094fc:	003f6106 	br	4009284 <__reset+0xfb008284>
 4009500:	00c00044 	movi	r3,1
 4009504:	1a94983a 	sll	r10,r3,r10
 4009508:	0007883a 	mov	r3,zero
 400950c:	003f6106 	br	4009294 <__reset+0xfb008294>
 4009510:	013fff84 	movi	r4,-2
 4009514:	21ff7c2e 	bgeu	r4,r7,4009308 <__reset+0xfb008308>
 4009518:	003f9106 	br	4009360 <__reset+0xfb008360>
 400951c:	00c00044 	movi	r3,1
 4009520:	1a94983a 	sll	r10,r3,r10
 4009524:	0007883a 	mov	r3,zero
 4009528:	003fe306 	br	40094b8 <__reset+0xfb0084b8>
 400952c:	6816907a 	slli	r11,r13,1
 4009530:	010007c4 	movi	r4,31
 4009534:	2289c83a 	sub	r4,r4,r10
 4009538:	5908983a 	sll	r4,r11,r4
 400953c:	6296d83a 	srl	r11,r12,r10
 4009540:	6a9cd83a 	srl	r14,r13,r10
 4009544:	22d6b03a 	or	r11,r4,r11
 4009548:	003fd706 	br	40094a8 <__reset+0xfb0084a8>
 400954c:	193f971e 	bne	r3,r4,40093ac <__reset+0xfb0083ac>
 4009550:	11000117 	ldw	r4,4(r2)
 4009554:	28c00117 	ldw	r3,4(r5)
 4009558:	20ff9426 	beq	r4,r3,40093ac <__reset+0xfb0083ac>
 400955c:	008101f4 	movhi	r2,1031
 4009560:	1094f504 	addi	r2,r2,21460
 4009564:	f800283a 	ret

04009568 <__adddf3>:
 4009568:	deffec04 	addi	sp,sp,-80
 400956c:	d9001115 	stw	r4,68(sp)
 4009570:	d9401215 	stw	r5,72(sp)
 4009574:	d9001104 	addi	r4,sp,68
 4009578:	d9400a04 	addi	r5,sp,40
 400957c:	dfc01315 	stw	ra,76(sp)
 4009580:	d9c01015 	stw	r7,64(sp)
 4009584:	d9800f15 	stw	r6,60(sp)
 4009588:	400a1e00 	call	400a1e0 <__unpack_d>
 400958c:	d9000f04 	addi	r4,sp,60
 4009590:	d9400504 	addi	r5,sp,20
 4009594:	400a1e00 	call	400a1e0 <__unpack_d>
 4009598:	d9000a04 	addi	r4,sp,40
 400959c:	d9400504 	addi	r5,sp,20
 40095a0:	d80d883a 	mov	r6,sp
 40095a4:	40092140 	call	4009214 <_fpadd_parts>
 40095a8:	1009883a 	mov	r4,r2
 40095ac:	4009fbc0 	call	4009fbc <__pack_d>
 40095b0:	dfc01317 	ldw	ra,76(sp)
 40095b4:	dec01404 	addi	sp,sp,80
 40095b8:	f800283a 	ret

040095bc <__subdf3>:
 40095bc:	deffec04 	addi	sp,sp,-80
 40095c0:	d9001115 	stw	r4,68(sp)
 40095c4:	d9401215 	stw	r5,72(sp)
 40095c8:	d9001104 	addi	r4,sp,68
 40095cc:	d9400a04 	addi	r5,sp,40
 40095d0:	dfc01315 	stw	ra,76(sp)
 40095d4:	d9c01015 	stw	r7,64(sp)
 40095d8:	d9800f15 	stw	r6,60(sp)
 40095dc:	400a1e00 	call	400a1e0 <__unpack_d>
 40095e0:	d9000f04 	addi	r4,sp,60
 40095e4:	d9400504 	addi	r5,sp,20
 40095e8:	400a1e00 	call	400a1e0 <__unpack_d>
 40095ec:	d8800617 	ldw	r2,24(sp)
 40095f0:	d9000a04 	addi	r4,sp,40
 40095f4:	d9400504 	addi	r5,sp,20
 40095f8:	d80d883a 	mov	r6,sp
 40095fc:	1080005c 	xori	r2,r2,1
 4009600:	d8800615 	stw	r2,24(sp)
 4009604:	40092140 	call	4009214 <_fpadd_parts>
 4009608:	1009883a 	mov	r4,r2
 400960c:	4009fbc0 	call	4009fbc <__pack_d>
 4009610:	dfc01317 	ldw	ra,76(sp)
 4009614:	dec01404 	addi	sp,sp,80
 4009618:	f800283a 	ret

0400961c <__muldf3>:
 400961c:	deffe404 	addi	sp,sp,-112
 4009620:	d9001115 	stw	r4,68(sp)
 4009624:	d9401215 	stw	r5,72(sp)
 4009628:	d9001104 	addi	r4,sp,68
 400962c:	d9400a04 	addi	r5,sp,40
 4009630:	dfc01b15 	stw	ra,108(sp)
 4009634:	d9800f15 	stw	r6,60(sp)
 4009638:	d9c01015 	stw	r7,64(sp)
 400963c:	ddc01a15 	stw	r23,104(sp)
 4009640:	dd801915 	stw	r22,100(sp)
 4009644:	dd401815 	stw	r21,96(sp)
 4009648:	dd001715 	stw	r20,92(sp)
 400964c:	dcc01615 	stw	r19,88(sp)
 4009650:	dc801515 	stw	r18,84(sp)
 4009654:	dc401415 	stw	r17,80(sp)
 4009658:	dc001315 	stw	r16,76(sp)
 400965c:	400a1e00 	call	400a1e0 <__unpack_d>
 4009660:	d9000f04 	addi	r4,sp,60
 4009664:	d9400504 	addi	r5,sp,20
 4009668:	400a1e00 	call	400a1e0 <__unpack_d>
 400966c:	d8c00a17 	ldw	r3,40(sp)
 4009670:	00800044 	movi	r2,1
 4009674:	10c01136 	bltu	r2,r3,40096bc <__muldf3+0xa0>
 4009678:	d8c00b17 	ldw	r3,44(sp)
 400967c:	d8800617 	ldw	r2,24(sp)
 4009680:	d9000a04 	addi	r4,sp,40
 4009684:	1884c03a 	cmpne	r2,r3,r2
 4009688:	d8800b15 	stw	r2,44(sp)
 400968c:	4009fbc0 	call	4009fbc <__pack_d>
 4009690:	dfc01b17 	ldw	ra,108(sp)
 4009694:	ddc01a17 	ldw	r23,104(sp)
 4009698:	dd801917 	ldw	r22,100(sp)
 400969c:	dd401817 	ldw	r21,96(sp)
 40096a0:	dd001717 	ldw	r20,92(sp)
 40096a4:	dcc01617 	ldw	r19,88(sp)
 40096a8:	dc801517 	ldw	r18,84(sp)
 40096ac:	dc401417 	ldw	r17,80(sp)
 40096b0:	dc001317 	ldw	r16,76(sp)
 40096b4:	dec01c04 	addi	sp,sp,112
 40096b8:	f800283a 	ret
 40096bc:	d9000517 	ldw	r4,20(sp)
 40096c0:	11000636 	bltu	r2,r4,40096dc <__muldf3+0xc0>
 40096c4:	d8800617 	ldw	r2,24(sp)
 40096c8:	d8c00b17 	ldw	r3,44(sp)
 40096cc:	d9000504 	addi	r4,sp,20
 40096d0:	1884c03a 	cmpne	r2,r3,r2
 40096d4:	d8800615 	stw	r2,24(sp)
 40096d8:	003fec06 	br	400968c <__reset+0xfb00868c>
 40096dc:	00800104 	movi	r2,4
 40096e0:	1880051e 	bne	r3,r2,40096f8 <__muldf3+0xdc>
 40096e4:	00800084 	movi	r2,2
 40096e8:	20bfe31e 	bne	r4,r2,4009678 <__reset+0xfb008678>
 40096ec:	010101f4 	movhi	r4,1031
 40096f0:	2114f504 	addi	r4,r4,21460
 40096f4:	003fe506 	br	400968c <__reset+0xfb00868c>
 40096f8:	2080031e 	bne	r4,r2,4009708 <__muldf3+0xec>
 40096fc:	00800084 	movi	r2,2
 4009700:	18bffa26 	beq	r3,r2,40096ec <__reset+0xfb0086ec>
 4009704:	003fef06 	br	40096c4 <__reset+0xfb0086c4>
 4009708:	00800084 	movi	r2,2
 400970c:	18bfda26 	beq	r3,r2,4009678 <__reset+0xfb008678>
 4009710:	20bfec26 	beq	r4,r2,40096c4 <__reset+0xfb0086c4>
 4009714:	dc000d17 	ldw	r16,52(sp)
 4009718:	dd000817 	ldw	r20,32(sp)
 400971c:	dc800917 	ldw	r18,36(sp)
 4009720:	8009883a 	mov	r4,r16
 4009724:	000b883a 	mov	r5,zero
 4009728:	a00d883a 	mov	r6,r20
 400972c:	000f883a 	mov	r7,zero
 4009730:	4009e000 	call	4009e00 <__muldi3>
 4009734:	dc400e17 	ldw	r17,56(sp)
 4009738:	9009883a 	mov	r4,r18
 400973c:	800d883a 	mov	r6,r16
 4009740:	000b883a 	mov	r5,zero
 4009744:	000f883a 	mov	r7,zero
 4009748:	102f883a 	mov	r23,r2
 400974c:	1827883a 	mov	r19,r3
 4009750:	4009e000 	call	4009e00 <__muldi3>
 4009754:	900d883a 	mov	r6,r18
 4009758:	8809883a 	mov	r4,r17
 400975c:	000b883a 	mov	r5,zero
 4009760:	000f883a 	mov	r7,zero
 4009764:	102b883a 	mov	r21,r2
 4009768:	1821883a 	mov	r16,r3
 400976c:	4009e000 	call	4009e00 <__muldi3>
 4009770:	8809883a 	mov	r4,r17
 4009774:	000b883a 	mov	r5,zero
 4009778:	a00d883a 	mov	r6,r20
 400977c:	000f883a 	mov	r7,zero
 4009780:	102d883a 	mov	r22,r2
 4009784:	1825883a 	mov	r18,r3
 4009788:	4009e000 	call	4009e00 <__muldi3>
 400978c:	154b883a 	add	r5,r2,r21
 4009790:	2889803a 	cmpltu	r4,r5,r2
 4009794:	1c07883a 	add	r3,r3,r16
 4009798:	20c9883a 	add	r4,r4,r3
 400979c:	24004b36 	bltu	r4,r16,40098cc <__muldf3+0x2b0>
 40097a0:	8100011e 	bne	r16,r4,40097a8 <__muldf3+0x18c>
 40097a4:	2d404936 	bltu	r5,r21,40098cc <__muldf3+0x2b0>
 40097a8:	0011883a 	mov	r8,zero
 40097ac:	0007883a 	mov	r3,zero
 40097b0:	2ccb883a 	add	r5,r5,r19
 40097b4:	b80d883a 	mov	r6,r23
 40097b8:	2cc0012e 	bgeu	r5,r19,40097c0 <__muldf3+0x1a4>
 40097bc:	02000044 	movi	r8,1
 40097c0:	258f883a 	add	r7,r4,r22
 40097c4:	3909803a 	cmpltu	r4,r7,r4
 40097c8:	da400c17 	ldw	r9,48(sp)
 40097cc:	2489883a 	add	r4,r4,r18
 40097d0:	d8800717 	ldw	r2,28(sp)
 40097d4:	20c9883a 	add	r4,r4,r3
 40097d8:	da800b17 	ldw	r10,44(sp)
 40097dc:	d8c00617 	ldw	r3,24(sp)
 40097e0:	3a11883a 	add	r8,r7,r8
 40097e4:	4885883a 	add	r2,r9,r2
 40097e8:	50c6c03a 	cmpne	r3,r10,r3
 40097ec:	41cf803a 	cmpltu	r7,r8,r7
 40097f0:	12400104 	addi	r9,r2,4
 40097f4:	d8c00115 	stw	r3,4(sp)
 40097f8:	3909883a 	add	r4,r7,r4
 40097fc:	da400215 	stw	r9,8(sp)
 4009800:	03480034 	movhi	r13,8192
 4009804:	6b7fffc4 	addi	r13,r13,-1
 4009808:	4007883a 	mov	r3,r8
 400980c:	6900102e 	bgeu	r13,r4,4009850 <__muldf3+0x234>
 4009810:	10800144 	addi	r2,r2,5
 4009814:	180ed07a 	srli	r7,r3,1
 4009818:	18c0004c 	andi	r3,r3,1
 400981c:	201097fa 	slli	r8,r4,31
 4009820:	281697fa 	slli	r11,r5,31
 4009824:	2008d07a 	srli	r4,r4,1
 4009828:	3014d07a 	srli	r10,r6,1
 400982c:	2812d07a 	srli	r9,r5,1
 4009830:	1019883a 	mov	r12,r2
 4009834:	18000226 	beq	r3,zero,4009840 <__muldf3+0x224>
 4009838:	5a8cb03a 	or	r6,r11,r10
 400983c:	49600034 	orhi	r5,r9,32768
 4009840:	41c6b03a 	or	r3,r8,r7
 4009844:	10800044 	addi	r2,r2,1
 4009848:	693ff236 	bltu	r13,r4,4009814 <__reset+0xfb008814>
 400984c:	db000215 	stw	r12,8(sp)
 4009850:	03440034 	movhi	r13,4096
 4009854:	6b7fffc4 	addi	r13,r13,-1
 4009858:	69001336 	bltu	r13,r4,40098a8 <__muldf3+0x28c>
 400985c:	d8800217 	ldw	r2,8(sp)
 4009860:	10bfffc4 	addi	r2,r2,-1
 4009864:	18d3883a 	add	r9,r3,r3
 4009868:	48c7803a 	cmpltu	r3,r9,r3
 400986c:	2109883a 	add	r4,r4,r4
 4009870:	190f883a 	add	r7,r3,r4
 4009874:	3191883a 	add	r8,r6,r6
 4009878:	4197803a 	cmpltu	r11,r8,r6
 400987c:	2955883a 	add	r10,r5,r5
 4009880:	1019883a 	mov	r12,r2
 4009884:	4807883a 	mov	r3,r9
 4009888:	3809883a 	mov	r4,r7
 400988c:	2800010e 	bge	r5,zero,4009894 <__muldf3+0x278>
 4009890:	48c00054 	ori	r3,r9,1
 4009894:	400d883a 	mov	r6,r8
 4009898:	5a8b883a 	add	r5,r11,r10
 400989c:	10bfffc4 	addi	r2,r2,-1
 40098a0:	69fff02e 	bgeu	r13,r7,4009864 <__reset+0xfb008864>
 40098a4:	db000215 	stw	r12,8(sp)
 40098a8:	18803fcc 	andi	r2,r3,255
 40098ac:	01c02004 	movi	r7,128
 40098b0:	11c00926 	beq	r2,r7,40098d8 <__muldf3+0x2bc>
 40098b4:	008000c4 	movi	r2,3
 40098b8:	d9000415 	stw	r4,16(sp)
 40098bc:	d8c00315 	stw	r3,12(sp)
 40098c0:	d8800015 	stw	r2,0(sp)
 40098c4:	d809883a 	mov	r4,sp
 40098c8:	003f7006 	br	400968c <__reset+0xfb00868c>
 40098cc:	0011883a 	mov	r8,zero
 40098d0:	00c00044 	movi	r3,1
 40098d4:	003fb606 	br	40097b0 <__reset+0xfb0087b0>
 40098d8:	19c0400c 	andi	r7,r3,256
 40098dc:	383ff51e 	bne	r7,zero,40098b4 <__reset+0xfb0088b4>
 40098e0:	314ab03a 	or	r5,r6,r5
 40098e4:	283ff326 	beq	r5,zero,40098b4 <__reset+0xfb0088b4>
 40098e8:	1885883a 	add	r2,r3,r2
 40098ec:	10cb803a 	cmpltu	r5,r2,r3
 40098f0:	00ffc004 	movi	r3,-256
 40098f4:	10c6703a 	and	r3,r2,r3
 40098f8:	2909883a 	add	r4,r5,r4
 40098fc:	003fed06 	br	40098b4 <__reset+0xfb0088b4>

04009900 <__divdf3>:
 4009900:	defff104 	addi	sp,sp,-60
 4009904:	d9000c15 	stw	r4,48(sp)
 4009908:	d9400d15 	stw	r5,52(sp)
 400990c:	d9000c04 	addi	r4,sp,48
 4009910:	d9400504 	addi	r5,sp,20
 4009914:	dfc00e15 	stw	ra,56(sp)
 4009918:	d9800a15 	stw	r6,40(sp)
 400991c:	d9c00b15 	stw	r7,44(sp)
 4009920:	400a1e00 	call	400a1e0 <__unpack_d>
 4009924:	d9000a04 	addi	r4,sp,40
 4009928:	d80b883a 	mov	r5,sp
 400992c:	400a1e00 	call	400a1e0 <__unpack_d>
 4009930:	d8c00517 	ldw	r3,20(sp)
 4009934:	00800044 	movi	r2,1
 4009938:	10c00536 	bltu	r2,r3,4009950 <__divdf3+0x50>
 400993c:	d9000504 	addi	r4,sp,20
 4009940:	4009fbc0 	call	4009fbc <__pack_d>
 4009944:	dfc00e17 	ldw	ra,56(sp)
 4009948:	dec00f04 	addi	sp,sp,60
 400994c:	f800283a 	ret
 4009950:	d9000017 	ldw	r4,0(sp)
 4009954:	11000536 	bltu	r2,r4,400996c <__divdf3+0x6c>
 4009958:	d809883a 	mov	r4,sp
 400995c:	4009fbc0 	call	4009fbc <__pack_d>
 4009960:	dfc00e17 	ldw	ra,56(sp)
 4009964:	dec00f04 	addi	sp,sp,60
 4009968:	f800283a 	ret
 400996c:	d9800617 	ldw	r6,24(sp)
 4009970:	d9400117 	ldw	r5,4(sp)
 4009974:	00800104 	movi	r2,4
 4009978:	314af03a 	xor	r5,r6,r5
 400997c:	d9400615 	stw	r5,24(sp)
 4009980:	18800226 	beq	r3,r2,400998c <__divdf3+0x8c>
 4009984:	01400084 	movi	r5,2
 4009988:	1940041e 	bne	r3,r5,400999c <__divdf3+0x9c>
 400998c:	193feb1e 	bne	r3,r4,400993c <__reset+0xfb00893c>
 4009990:	010101f4 	movhi	r4,1031
 4009994:	2114f504 	addi	r4,r4,21460
 4009998:	003fe906 	br	4009940 <__reset+0xfb008940>
 400999c:	20803326 	beq	r4,r2,4009a6c <__divdf3+0x16c>
 40099a0:	21403726 	beq	r4,r5,4009a80 <__divdf3+0x180>
 40099a4:	d8800217 	ldw	r2,8(sp)
 40099a8:	d9000717 	ldw	r4,28(sp)
 40099ac:	d8c00917 	ldw	r3,36(sp)
 40099b0:	da000417 	ldw	r8,16(sp)
 40099b4:	2089c83a 	sub	r4,r4,r2
 40099b8:	d9000715 	stw	r4,28(sp)
 40099bc:	d8800817 	ldw	r2,32(sp)
 40099c0:	dbc00317 	ldw	r15,12(sp)
 40099c4:	1a000236 	bltu	r3,r8,40099d0 <__divdf3+0xd0>
 40099c8:	40c0081e 	bne	r8,r3,40099ec <__divdf3+0xec>
 40099cc:	13c0072e 	bgeu	r2,r15,40099ec <__divdf3+0xec>
 40099d0:	108b883a 	add	r5,r2,r2
 40099d4:	288d803a 	cmpltu	r6,r5,r2
 40099d8:	18c7883a 	add	r3,r3,r3
 40099dc:	213fffc4 	addi	r4,r4,-1
 40099e0:	2805883a 	mov	r2,r5
 40099e4:	30c7883a 	add	r3,r6,r3
 40099e8:	d9000715 	stw	r4,28(sp)
 40099ec:	01400f44 	movi	r5,61
 40099f0:	000f883a 	mov	r7,zero
 40099f4:	01040034 	movhi	r4,4096
 40099f8:	0019883a 	mov	r12,zero
 40099fc:	001b883a 	mov	r13,zero
 4009a00:	201697fa 	slli	r11,r4,31
 4009a04:	3814d07a 	srli	r10,r7,1
 4009a08:	297fffc4 	addi	r5,r5,-1
 4009a0c:	1a000936 	bltu	r3,r8,4009a34 <__divdf3+0x134>
 4009a10:	13cdc83a 	sub	r6,r2,r15
 4009a14:	1193803a 	cmpltu	r9,r2,r6
 4009a18:	1a1dc83a 	sub	r14,r3,r8
 4009a1c:	40c0011e 	bne	r8,r3,4009a24 <__divdf3+0x124>
 4009a20:	13c00436 	bltu	r2,r15,4009a34 <__divdf3+0x134>
 4009a24:	3005883a 	mov	r2,r6
 4009a28:	7247c83a 	sub	r3,r14,r9
 4009a2c:	61d8b03a 	or	r12,r12,r7
 4009a30:	691ab03a 	or	r13,r13,r4
 4009a34:	108d883a 	add	r6,r2,r2
 4009a38:	3093803a 	cmpltu	r9,r6,r2
 4009a3c:	18c7883a 	add	r3,r3,r3
 4009a40:	5a8eb03a 	or	r7,r11,r10
 4009a44:	2008d07a 	srli	r4,r4,1
 4009a48:	3005883a 	mov	r2,r6
 4009a4c:	48c7883a 	add	r3,r9,r3
 4009a50:	283feb1e 	bne	r5,zero,4009a00 <__reset+0xfb008a00>
 4009a54:	61003fcc 	andi	r4,r12,255
 4009a58:	01402004 	movi	r5,128
 4009a5c:	21400b26 	beq	r4,r5,4009a8c <__divdf3+0x18c>
 4009a60:	db000815 	stw	r12,32(sp)
 4009a64:	db400915 	stw	r13,36(sp)
 4009a68:	003fb406 	br	400993c <__reset+0xfb00893c>
 4009a6c:	d8000815 	stw	zero,32(sp)
 4009a70:	d8000915 	stw	zero,36(sp)
 4009a74:	d8000715 	stw	zero,28(sp)
 4009a78:	d9000504 	addi	r4,sp,20
 4009a7c:	003fb006 	br	4009940 <__reset+0xfb008940>
 4009a80:	d8800515 	stw	r2,20(sp)
 4009a84:	d9000504 	addi	r4,sp,20
 4009a88:	003fad06 	br	4009940 <__reset+0xfb008940>
 4009a8c:	6140400c 	andi	r5,r12,256
 4009a90:	283ff31e 	bne	r5,zero,4009a60 <__reset+0xfb008a60>
 4009a94:	30c4b03a 	or	r2,r6,r3
 4009a98:	103ff126 	beq	r2,zero,4009a60 <__reset+0xfb008a60>
 4009a9c:	6109883a 	add	r4,r12,r4
 4009aa0:	2305803a 	cmpltu	r2,r4,r12
 4009aa4:	033fc004 	movi	r12,-256
 4009aa8:	2318703a 	and	r12,r4,r12
 4009aac:	135b883a 	add	r13,r2,r13
 4009ab0:	003feb06 	br	4009a60 <__reset+0xfb008a60>

04009ab4 <__ltdf2>:
 4009ab4:	defff104 	addi	sp,sp,-60
 4009ab8:	d9000c15 	stw	r4,48(sp)
 4009abc:	d9400d15 	stw	r5,52(sp)
 4009ac0:	d9000c04 	addi	r4,sp,48
 4009ac4:	d9400504 	addi	r5,sp,20
 4009ac8:	dfc00e15 	stw	ra,56(sp)
 4009acc:	d9800a15 	stw	r6,40(sp)
 4009ad0:	d9c00b15 	stw	r7,44(sp)
 4009ad4:	400a1e00 	call	400a1e0 <__unpack_d>
 4009ad8:	d9000a04 	addi	r4,sp,40
 4009adc:	d80b883a 	mov	r5,sp
 4009ae0:	400a1e00 	call	400a1e0 <__unpack_d>
 4009ae4:	d8c00517 	ldw	r3,20(sp)
 4009ae8:	00800044 	movi	r2,1
 4009aec:	10c0052e 	bgeu	r2,r3,4009b04 <__ltdf2+0x50>
 4009af0:	d8c00017 	ldw	r3,0(sp)
 4009af4:	10c0032e 	bgeu	r2,r3,4009b04 <__ltdf2+0x50>
 4009af8:	d9000504 	addi	r4,sp,20
 4009afc:	d80b883a 	mov	r5,sp
 4009b00:	400a2e40 	call	400a2e4 <__fpcmp_parts_d>
 4009b04:	dfc00e17 	ldw	ra,56(sp)
 4009b08:	dec00f04 	addi	sp,sp,60
 4009b0c:	f800283a 	ret

04009b10 <__floatsidf>:
 4009b10:	2004d7fa 	srli	r2,r4,31
 4009b14:	defff904 	addi	sp,sp,-28
 4009b18:	00c000c4 	movi	r3,3
 4009b1c:	dfc00615 	stw	ra,24(sp)
 4009b20:	dc000515 	stw	r16,20(sp)
 4009b24:	d8c00015 	stw	r3,0(sp)
 4009b28:	d8800115 	stw	r2,4(sp)
 4009b2c:	2000081e 	bne	r4,zero,4009b50 <__floatsidf+0x40>
 4009b30:	00800084 	movi	r2,2
 4009b34:	d8800015 	stw	r2,0(sp)
 4009b38:	d809883a 	mov	r4,sp
 4009b3c:	4009fbc0 	call	4009fbc <__pack_d>
 4009b40:	dfc00617 	ldw	ra,24(sp)
 4009b44:	dc000517 	ldw	r16,20(sp)
 4009b48:	dec00704 	addi	sp,sp,28
 4009b4c:	f800283a 	ret
 4009b50:	00c00f04 	movi	r3,60
 4009b54:	d8c00215 	stw	r3,8(sp)
 4009b58:	10000f1e 	bne	r2,zero,4009b98 <__floatsidf+0x88>
 4009b5c:	2021883a 	mov	r16,r4
 4009b60:	8009883a 	mov	r4,r16
 4009b64:	4009f100 	call	4009f10 <__clzsi2>
 4009b68:	11000744 	addi	r4,r2,29
 4009b6c:	0100110e 	bge	zero,r4,4009bb4 <__floatsidf+0xa4>
 4009b70:	10ffff44 	addi	r3,r2,-3
 4009b74:	18001216 	blt	r3,zero,4009bc0 <__floatsidf+0xb0>
 4009b78:	80c6983a 	sll	r3,r16,r3
 4009b7c:	0009883a 	mov	r4,zero
 4009b80:	014007c4 	movi	r5,31
 4009b84:	2885c83a 	sub	r2,r5,r2
 4009b88:	d9000315 	stw	r4,12(sp)
 4009b8c:	d8c00415 	stw	r3,16(sp)
 4009b90:	d8800215 	stw	r2,8(sp)
 4009b94:	003fe806 	br	4009b38 <__reset+0xfb008b38>
 4009b98:	00a00034 	movhi	r2,32768
 4009b9c:	20800e26 	beq	r4,r2,4009bd8 <__floatsidf+0xc8>
 4009ba0:	0121c83a 	sub	r16,zero,r4
 4009ba4:	8009883a 	mov	r4,r16
 4009ba8:	4009f100 	call	4009f10 <__clzsi2>
 4009bac:	11000744 	addi	r4,r2,29
 4009bb0:	013fef16 	blt	zero,r4,4009b70 <__reset+0xfb008b70>
 4009bb4:	dc000315 	stw	r16,12(sp)
 4009bb8:	d8000415 	stw	zero,16(sp)
 4009bbc:	003fde06 	br	4009b38 <__reset+0xfb008b38>
 4009bc0:	800ad07a 	srli	r5,r16,1
 4009bc4:	00c007c4 	movi	r3,31
 4009bc8:	1907c83a 	sub	r3,r3,r4
 4009bcc:	28c6d83a 	srl	r3,r5,r3
 4009bd0:	8108983a 	sll	r4,r16,r4
 4009bd4:	003fea06 	br	4009b80 <__reset+0xfb008b80>
 4009bd8:	0005883a 	mov	r2,zero
 4009bdc:	00f07834 	movhi	r3,49632
 4009be0:	003fd706 	br	4009b40 <__reset+0xfb008b40>

04009be4 <__fixdfsi>:
 4009be4:	defff804 	addi	sp,sp,-32
 4009be8:	d9000515 	stw	r4,20(sp)
 4009bec:	d9400615 	stw	r5,24(sp)
 4009bf0:	d9000504 	addi	r4,sp,20
 4009bf4:	d80b883a 	mov	r5,sp
 4009bf8:	dfc00715 	stw	ra,28(sp)
 4009bfc:	400a1e00 	call	400a1e0 <__unpack_d>
 4009c00:	d8800017 	ldw	r2,0(sp)
 4009c04:	00c00084 	movi	r3,2
 4009c08:	10c01c26 	beq	r2,r3,4009c7c <__fixdfsi+0x98>
 4009c0c:	00c00044 	movi	r3,1
 4009c10:	18801a2e 	bgeu	r3,r2,4009c7c <__fixdfsi+0x98>
 4009c14:	00c00104 	movi	r3,4
 4009c18:	10c01126 	beq	r2,r3,4009c60 <__fixdfsi+0x7c>
 4009c1c:	d8800217 	ldw	r2,8(sp)
 4009c20:	10001616 	blt	r2,zero,4009c7c <__fixdfsi+0x98>
 4009c24:	00c00784 	movi	r3,30
 4009c28:	18800d16 	blt	r3,r2,4009c60 <__fixdfsi+0x7c>
 4009c2c:	00c00f04 	movi	r3,60
 4009c30:	1885c83a 	sub	r2,r3,r2
 4009c34:	10fff804 	addi	r3,r2,-32
 4009c38:	d9400317 	ldw	r5,12(sp)
 4009c3c:	d9000417 	ldw	r4,16(sp)
 4009c40:	18001216 	blt	r3,zero,4009c8c <__fixdfsi+0xa8>
 4009c44:	20c4d83a 	srl	r2,r4,r3
 4009c48:	d8c00117 	ldw	r3,4(sp)
 4009c4c:	18000826 	beq	r3,zero,4009c70 <__fixdfsi+0x8c>
 4009c50:	0085c83a 	sub	r2,zero,r2
 4009c54:	dfc00717 	ldw	ra,28(sp)
 4009c58:	dec00804 	addi	sp,sp,32
 4009c5c:	f800283a 	ret
 4009c60:	d8800117 	ldw	r2,4(sp)
 4009c64:	00e00034 	movhi	r3,32768
 4009c68:	1005003a 	cmpeq	r2,r2,zero
 4009c6c:	1885c83a 	sub	r2,r3,r2
 4009c70:	dfc00717 	ldw	ra,28(sp)
 4009c74:	dec00804 	addi	sp,sp,32
 4009c78:	f800283a 	ret
 4009c7c:	0005883a 	mov	r2,zero
 4009c80:	dfc00717 	ldw	ra,28(sp)
 4009c84:	dec00804 	addi	sp,sp,32
 4009c88:	f800283a 	ret
 4009c8c:	2008907a 	slli	r4,r4,1
 4009c90:	018007c4 	movi	r6,31
 4009c94:	308dc83a 	sub	r6,r6,r2
 4009c98:	2188983a 	sll	r4,r4,r6
 4009c9c:	2884d83a 	srl	r2,r5,r2
 4009ca0:	2084b03a 	or	r2,r4,r2
 4009ca4:	003fe806 	br	4009c48 <__reset+0xfb008c48>

04009ca8 <udivmodsi4>:
 4009ca8:	2005883a 	mov	r2,r4
 4009cac:	2900182e 	bgeu	r5,r4,4009d10 <udivmodsi4+0x68>
 4009cb0:	28001716 	blt	r5,zero,4009d10 <udivmodsi4+0x68>
 4009cb4:	01000804 	movi	r4,32
 4009cb8:	00c00044 	movi	r3,1
 4009cbc:	00000206 	br	4009cc8 <udivmodsi4+0x20>
 4009cc0:	20001126 	beq	r4,zero,4009d08 <udivmodsi4+0x60>
 4009cc4:	28000516 	blt	r5,zero,4009cdc <udivmodsi4+0x34>
 4009cc8:	294b883a 	add	r5,r5,r5
 4009ccc:	213fffc4 	addi	r4,r4,-1
 4009cd0:	18c7883a 	add	r3,r3,r3
 4009cd4:	28bffa36 	bltu	r5,r2,4009cc0 <__reset+0xfb008cc0>
 4009cd8:	18000b26 	beq	r3,zero,4009d08 <udivmodsi4+0x60>
 4009cdc:	0009883a 	mov	r4,zero
 4009ce0:	11400236 	bltu	r2,r5,4009cec <udivmodsi4+0x44>
 4009ce4:	1145c83a 	sub	r2,r2,r5
 4009ce8:	20c8b03a 	or	r4,r4,r3
 4009cec:	1806d07a 	srli	r3,r3,1
 4009cf0:	280ad07a 	srli	r5,r5,1
 4009cf4:	183ffa1e 	bne	r3,zero,4009ce0 <__reset+0xfb008ce0>
 4009cf8:	3000021e 	bne	r6,zero,4009d04 <udivmodsi4+0x5c>
 4009cfc:	2005883a 	mov	r2,r4
 4009d00:	f800283a 	ret
 4009d04:	f800283a 	ret
 4009d08:	0009883a 	mov	r4,zero
 4009d0c:	003ffa06 	br	4009cf8 <__reset+0xfb008cf8>
 4009d10:	00c00044 	movi	r3,1
 4009d14:	0009883a 	mov	r4,zero
 4009d18:	003ff106 	br	4009ce0 <__reset+0xfb008ce0>

04009d1c <__divsi3>:
 4009d1c:	defffe04 	addi	sp,sp,-8
 4009d20:	dfc00115 	stw	ra,4(sp)
 4009d24:	dc000015 	stw	r16,0(sp)
 4009d28:	20000a16 	blt	r4,zero,4009d54 <__divsi3+0x38>
 4009d2c:	0021883a 	mov	r16,zero
 4009d30:	28000b16 	blt	r5,zero,4009d60 <__divsi3+0x44>
 4009d34:	000d883a 	mov	r6,zero
 4009d38:	4009ca80 	call	4009ca8 <udivmodsi4>
 4009d3c:	80000126 	beq	r16,zero,4009d44 <__divsi3+0x28>
 4009d40:	0085c83a 	sub	r2,zero,r2
 4009d44:	dfc00117 	ldw	ra,4(sp)
 4009d48:	dc000017 	ldw	r16,0(sp)
 4009d4c:	dec00204 	addi	sp,sp,8
 4009d50:	f800283a 	ret
 4009d54:	0109c83a 	sub	r4,zero,r4
 4009d58:	04000044 	movi	r16,1
 4009d5c:	283ff50e 	bge	r5,zero,4009d34 <__reset+0xfb008d34>
 4009d60:	014bc83a 	sub	r5,zero,r5
 4009d64:	8400005c 	xori	r16,r16,1
 4009d68:	003ff206 	br	4009d34 <__reset+0xfb008d34>

04009d6c <__modsi3>:
 4009d6c:	deffff04 	addi	sp,sp,-4
 4009d70:	dfc00015 	stw	ra,0(sp)
 4009d74:	20000516 	blt	r4,zero,4009d8c <__modsi3+0x20>
 4009d78:	28000c16 	blt	r5,zero,4009dac <__modsi3+0x40>
 4009d7c:	01800044 	movi	r6,1
 4009d80:	dfc00017 	ldw	ra,0(sp)
 4009d84:	dec00104 	addi	sp,sp,4
 4009d88:	4009ca81 	jmpi	4009ca8 <udivmodsi4>
 4009d8c:	0109c83a 	sub	r4,zero,r4
 4009d90:	28000b16 	blt	r5,zero,4009dc0 <__modsi3+0x54>
 4009d94:	01800044 	movi	r6,1
 4009d98:	4009ca80 	call	4009ca8 <udivmodsi4>
 4009d9c:	0085c83a 	sub	r2,zero,r2
 4009da0:	dfc00017 	ldw	ra,0(sp)
 4009da4:	dec00104 	addi	sp,sp,4
 4009da8:	f800283a 	ret
 4009dac:	014bc83a 	sub	r5,zero,r5
 4009db0:	01800044 	movi	r6,1
 4009db4:	dfc00017 	ldw	ra,0(sp)
 4009db8:	dec00104 	addi	sp,sp,4
 4009dbc:	4009ca81 	jmpi	4009ca8 <udivmodsi4>
 4009dc0:	014bc83a 	sub	r5,zero,r5
 4009dc4:	003ff306 	br	4009d94 <__reset+0xfb008d94>

04009dc8 <__udivsi3>:
 4009dc8:	000d883a 	mov	r6,zero
 4009dcc:	4009ca81 	jmpi	4009ca8 <udivmodsi4>

04009dd0 <__umodsi3>:
 4009dd0:	01800044 	movi	r6,1
 4009dd4:	4009ca81 	jmpi	4009ca8 <udivmodsi4>

04009dd8 <__mulsi3>:
 4009dd8:	0005883a 	mov	r2,zero
 4009ddc:	20000726 	beq	r4,zero,4009dfc <__mulsi3+0x24>
 4009de0:	20c0004c 	andi	r3,r4,1
 4009de4:	2008d07a 	srli	r4,r4,1
 4009de8:	18000126 	beq	r3,zero,4009df0 <__mulsi3+0x18>
 4009dec:	1145883a 	add	r2,r2,r5
 4009df0:	294b883a 	add	r5,r5,r5
 4009df4:	203ffa1e 	bne	r4,zero,4009de0 <__reset+0xfb008de0>
 4009df8:	f800283a 	ret
 4009dfc:	f800283a 	ret

04009e00 <__muldi3>:
 4009e00:	defff604 	addi	sp,sp,-40
 4009e04:	dd400515 	stw	r21,20(sp)
 4009e08:	dd000415 	stw	r20,16(sp)
 4009e0c:	257fffcc 	andi	r21,r4,65535
 4009e10:	353fffcc 	andi	r20,r6,65535
 4009e14:	dcc00315 	stw	r19,12(sp)
 4009e18:	3026d43a 	srli	r19,r6,16
 4009e1c:	dd800615 	stw	r22,24(sp)
 4009e20:	dc800215 	stw	r18,8(sp)
 4009e24:	dc400115 	stw	r17,4(sp)
 4009e28:	2024d43a 	srli	r18,r4,16
 4009e2c:	2023883a 	mov	r17,r4
 4009e30:	282d883a 	mov	r22,r5
 4009e34:	a009883a 	mov	r4,r20
 4009e38:	a80b883a 	mov	r5,r21
 4009e3c:	dfc00915 	stw	ra,36(sp)
 4009e40:	df000815 	stw	fp,32(sp)
 4009e44:	ddc00715 	stw	r23,28(sp)
 4009e48:	3839883a 	mov	fp,r7
 4009e4c:	dc000015 	stw	r16,0(sp)
 4009e50:	3021883a 	mov	r16,r6
 4009e54:	4009dd80 	call	4009dd8 <__mulsi3>
 4009e58:	a80b883a 	mov	r5,r21
 4009e5c:	9809883a 	mov	r4,r19
 4009e60:	102f883a 	mov	r23,r2
 4009e64:	4009dd80 	call	4009dd8 <__mulsi3>
 4009e68:	a009883a 	mov	r4,r20
 4009e6c:	900b883a 	mov	r5,r18
 4009e70:	102b883a 	mov	r21,r2
 4009e74:	4009dd80 	call	4009dd8 <__mulsi3>
 4009e78:	9809883a 	mov	r4,r19
 4009e7c:	900b883a 	mov	r5,r18
 4009e80:	1029883a 	mov	r20,r2
 4009e84:	4009dd80 	call	4009dd8 <__mulsi3>
 4009e88:	1007883a 	mov	r3,r2
 4009e8c:	b804d43a 	srli	r2,r23,16
 4009e90:	a549883a 	add	r4,r20,r21
 4009e94:	2089883a 	add	r4,r4,r2
 4009e98:	2500022e 	bgeu	r4,r20,4009ea4 <__muldi3+0xa4>
 4009e9c:	00800074 	movhi	r2,1
 4009ea0:	1887883a 	add	r3,r3,r2
 4009ea4:	200cd43a 	srli	r6,r4,16
 4009ea8:	2004943a 	slli	r2,r4,16
 4009eac:	e00b883a 	mov	r5,fp
 4009eb0:	8809883a 	mov	r4,r17
 4009eb4:	bdffffcc 	andi	r23,r23,65535
 4009eb8:	19a3883a 	add	r17,r3,r6
 4009ebc:	15ef883a 	add	r23,r2,r23
 4009ec0:	4009dd80 	call	4009dd8 <__mulsi3>
 4009ec4:	8009883a 	mov	r4,r16
 4009ec8:	b00b883a 	mov	r5,r22
 4009ecc:	1025883a 	mov	r18,r2
 4009ed0:	4009dd80 	call	4009dd8 <__mulsi3>
 4009ed4:	9085883a 	add	r2,r18,r2
 4009ed8:	1447883a 	add	r3,r2,r17
 4009edc:	b805883a 	mov	r2,r23
 4009ee0:	dfc00917 	ldw	ra,36(sp)
 4009ee4:	df000817 	ldw	fp,32(sp)
 4009ee8:	ddc00717 	ldw	r23,28(sp)
 4009eec:	dd800617 	ldw	r22,24(sp)
 4009ef0:	dd400517 	ldw	r21,20(sp)
 4009ef4:	dd000417 	ldw	r20,16(sp)
 4009ef8:	dcc00317 	ldw	r19,12(sp)
 4009efc:	dc800217 	ldw	r18,8(sp)
 4009f00:	dc400117 	ldw	r17,4(sp)
 4009f04:	dc000017 	ldw	r16,0(sp)
 4009f08:	dec00a04 	addi	sp,sp,40
 4009f0c:	f800283a 	ret

04009f10 <__clzsi2>:
 4009f10:	00bfffd4 	movui	r2,65535
 4009f14:	11000b36 	bltu	r2,r4,4009f44 <__clzsi2+0x34>
 4009f18:	00803fc4 	movi	r2,255
 4009f1c:	11001e2e 	bgeu	r2,r4,4009f98 <__clzsi2+0x88>
 4009f20:	00c00204 	movi	r3,8
 4009f24:	20c8d83a 	srl	r4,r4,r3
 4009f28:	00c101f4 	movhi	r3,1031
 4009f2c:	18d4fa04 	addi	r3,r3,21480
 4009f30:	00800604 	movi	r2,24
 4009f34:	1909883a 	add	r4,r3,r4
 4009f38:	20c00003 	ldbu	r3,0(r4)
 4009f3c:	10c5c83a 	sub	r2,r2,r3
 4009f40:	f800283a 	ret
 4009f44:	00804034 	movhi	r2,256
 4009f48:	10bfffc4 	addi	r2,r2,-1
 4009f4c:	11000936 	bltu	r2,r4,4009f74 <__clzsi2+0x64>
 4009f50:	00800404 	movi	r2,16
 4009f54:	1007883a 	mov	r3,r2
 4009f58:	20c8d83a 	srl	r4,r4,r3
 4009f5c:	00c101f4 	movhi	r3,1031
 4009f60:	18d4fa04 	addi	r3,r3,21480
 4009f64:	1909883a 	add	r4,r3,r4
 4009f68:	20c00003 	ldbu	r3,0(r4)
 4009f6c:	10c5c83a 	sub	r2,r2,r3
 4009f70:	f800283a 	ret
 4009f74:	00c00604 	movi	r3,24
 4009f78:	20c8d83a 	srl	r4,r4,r3
 4009f7c:	00c101f4 	movhi	r3,1031
 4009f80:	18d4fa04 	addi	r3,r3,21480
 4009f84:	00800204 	movi	r2,8
 4009f88:	1909883a 	add	r4,r3,r4
 4009f8c:	20c00003 	ldbu	r3,0(r4)
 4009f90:	10c5c83a 	sub	r2,r2,r3
 4009f94:	f800283a 	ret
 4009f98:	0007883a 	mov	r3,zero
 4009f9c:	20c8d83a 	srl	r4,r4,r3
 4009fa0:	00c101f4 	movhi	r3,1031
 4009fa4:	18d4fa04 	addi	r3,r3,21480
 4009fa8:	00800804 	movi	r2,32
 4009fac:	1909883a 	add	r4,r3,r4
 4009fb0:	20c00003 	ldbu	r3,0(r4)
 4009fb4:	10c5c83a 	sub	r2,r2,r3
 4009fb8:	f800283a 	ret

04009fbc <__pack_d>:
 4009fbc:	20800017 	ldw	r2,0(r4)
 4009fc0:	defff804 	addi	sp,sp,-32
 4009fc4:	dcc00315 	stw	r19,12(sp)
 4009fc8:	dc800215 	stw	r18,8(sp)
 4009fcc:	dfc00715 	stw	ra,28(sp)
 4009fd0:	dd800615 	stw	r22,24(sp)
 4009fd4:	dd400515 	stw	r21,20(sp)
 4009fd8:	dd000415 	stw	r20,16(sp)
 4009fdc:	dc400115 	stw	r17,4(sp)
 4009fe0:	dc000015 	stw	r16,0(sp)
 4009fe4:	04800044 	movi	r18,1
 4009fe8:	24400317 	ldw	r17,12(r4)
 4009fec:	24000417 	ldw	r16,16(r4)
 4009ff0:	24c00117 	ldw	r19,4(r4)
 4009ff4:	9080422e 	bgeu	r18,r2,400a100 <__pack_d+0x144>
 4009ff8:	00c00104 	movi	r3,4
 4009ffc:	10c03c26 	beq	r2,r3,400a0f0 <__pack_d+0x134>
 400a000:	00c00084 	movi	r3,2
 400a004:	10c01926 	beq	r2,r3,400a06c <__pack_d+0xb0>
 400a008:	8c04b03a 	or	r2,r17,r16
 400a00c:	10001726 	beq	r2,zero,400a06c <__pack_d+0xb0>
 400a010:	21000217 	ldw	r4,8(r4)
 400a014:	00bf0084 	movi	r2,-1022
 400a018:	20804016 	blt	r4,r2,400a11c <__pack_d+0x160>
 400a01c:	0080ffc4 	movi	r2,1023
 400a020:	11003316 	blt	r2,r4,400a0f0 <__pack_d+0x134>
 400a024:	88803fcc 	andi	r2,r17,255
 400a028:	00c02004 	movi	r3,128
 400a02c:	10c02926 	beq	r2,r3,400a0d4 <__pack_d+0x118>
 400a030:	88801fc4 	addi	r2,r17,127
 400a034:	1463803a 	cmpltu	r17,r2,r17
 400a038:	8c21883a 	add	r16,r17,r16
 400a03c:	1023883a 	mov	r17,r2
 400a040:	00880034 	movhi	r2,8192
 400a044:	10bfffc4 	addi	r2,r2,-1
 400a048:	14001c36 	bltu	r2,r16,400a0bc <__pack_d+0x100>
 400a04c:	2100ffc4 	addi	r4,r4,1023
 400a050:	8006963a 	slli	r3,r16,24
 400a054:	8804d23a 	srli	r2,r17,8
 400a058:	8020913a 	slli	r16,r16,4
 400a05c:	2101ffcc 	andi	r4,r4,2047
 400a060:	1884b03a 	or	r2,r3,r2
 400a064:	8020d33a 	srli	r16,r16,12
 400a068:	00000306 	br	400a078 <__pack_d+0xbc>
 400a06c:	0009883a 	mov	r4,zero
 400a070:	0005883a 	mov	r2,zero
 400a074:	0021883a 	mov	r16,zero
 400a078:	2008953a 	slli	r4,r4,20
 400a07c:	982697fa 	slli	r19,r19,31
 400a080:	00c00434 	movhi	r3,16
 400a084:	18ffffc4 	addi	r3,r3,-1
 400a088:	80e0703a 	and	r16,r16,r3
 400a08c:	8106b03a 	or	r3,r16,r4
 400a090:	1cc6b03a 	or	r3,r3,r19
 400a094:	dfc00717 	ldw	ra,28(sp)
 400a098:	dd800617 	ldw	r22,24(sp)
 400a09c:	dd400517 	ldw	r21,20(sp)
 400a0a0:	dd000417 	ldw	r20,16(sp)
 400a0a4:	dcc00317 	ldw	r19,12(sp)
 400a0a8:	dc800217 	ldw	r18,8(sp)
 400a0ac:	dc400117 	ldw	r17,4(sp)
 400a0b0:	dc000017 	ldw	r16,0(sp)
 400a0b4:	dec00804 	addi	sp,sp,32
 400a0b8:	f800283a 	ret
 400a0bc:	800697fa 	slli	r3,r16,31
 400a0c0:	8804d07a 	srli	r2,r17,1
 400a0c4:	21010004 	addi	r4,r4,1024
 400a0c8:	8020d07a 	srli	r16,r16,1
 400a0cc:	18a2b03a 	or	r17,r3,r2
 400a0d0:	003fdf06 	br	400a050 <__reset+0xfb009050>
 400a0d4:	88c0400c 	andi	r3,r17,256
 400a0d8:	183fd926 	beq	r3,zero,400a040 <__reset+0xfb009040>
 400a0dc:	8885883a 	add	r2,r17,r2
 400a0e0:	1463803a 	cmpltu	r17,r2,r17
 400a0e4:	8c21883a 	add	r16,r17,r16
 400a0e8:	1023883a 	mov	r17,r2
 400a0ec:	003fd406 	br	400a040 <__reset+0xfb009040>
 400a0f0:	0101ffc4 	movi	r4,2047
 400a0f4:	0005883a 	mov	r2,zero
 400a0f8:	0021883a 	mov	r16,zero
 400a0fc:	003fde06 	br	400a078 <__reset+0xfb009078>
 400a100:	84000234 	orhi	r16,r16,8
 400a104:	00c00434 	movhi	r3,16
 400a108:	18ffffc4 	addi	r3,r3,-1
 400a10c:	8805883a 	mov	r2,r17
 400a110:	80e0703a 	and	r16,r16,r3
 400a114:	0101ffc4 	movi	r4,2047
 400a118:	003fd706 	br	400a078 <__reset+0xfb009078>
 400a11c:	1129c83a 	sub	r20,r2,r4
 400a120:	00800e04 	movi	r2,56
 400a124:	15002716 	blt	r2,r20,400a1c4 <__pack_d+0x208>
 400a128:	800b883a 	mov	r5,r16
 400a12c:	a00d883a 	mov	r6,r20
 400a130:	8809883a 	mov	r4,r17
 400a134:	400a3b40 	call	400a3b4 <__lshrdi3>
 400a138:	9009883a 	mov	r4,r18
 400a13c:	000b883a 	mov	r5,zero
 400a140:	a00d883a 	mov	r6,r20
 400a144:	102d883a 	mov	r22,r2
 400a148:	182b883a 	mov	r21,r3
 400a14c:	400a3f80 	call	400a3f8 <__ashldi3>
 400a150:	1009003a 	cmpeq	r4,r2,zero
 400a154:	1907c83a 	sub	r3,r3,r4
 400a158:	10bfffc4 	addi	r2,r2,-1
 400a15c:	1c20703a 	and	r16,r3,r16
 400a160:	1444703a 	and	r2,r2,r17
 400a164:	1404b03a 	or	r2,r2,r16
 400a168:	1004c03a 	cmpne	r2,r2,zero
 400a16c:	1584b03a 	or	r2,r2,r22
 400a170:	11003fcc 	andi	r4,r2,255
 400a174:	01402004 	movi	r5,128
 400a178:	a807883a 	mov	r3,r21
 400a17c:	2140131e 	bne	r4,r5,400a1cc <__pack_d+0x210>
 400a180:	1140400c 	andi	r5,r2,256
 400a184:	28000426 	beq	r5,zero,400a198 <__pack_d+0x1dc>
 400a188:	1109883a 	add	r4,r2,r4
 400a18c:	2085803a 	cmpltu	r2,r4,r2
 400a190:	1547883a 	add	r3,r2,r21
 400a194:	2005883a 	mov	r2,r4
 400a198:	1808963a 	slli	r4,r3,24
 400a19c:	1004d23a 	srli	r2,r2,8
 400a1a0:	1820913a 	slli	r16,r3,4
 400a1a4:	01440034 	movhi	r5,4096
 400a1a8:	297fffc4 	addi	r5,r5,-1
 400a1ac:	2084b03a 	or	r2,r4,r2
 400a1b0:	8020d33a 	srli	r16,r16,12
 400a1b4:	01000044 	movi	r4,1
 400a1b8:	28ffaf36 	bltu	r5,r3,400a078 <__reset+0xfb009078>
 400a1bc:	0009883a 	mov	r4,zero
 400a1c0:	003fad06 	br	400a078 <__reset+0xfb009078>
 400a1c4:	0005883a 	mov	r2,zero
 400a1c8:	0007883a 	mov	r3,zero
 400a1cc:	11001fc4 	addi	r4,r2,127
 400a1d0:	2085803a 	cmpltu	r2,r4,r2
 400a1d4:	10c7883a 	add	r3,r2,r3
 400a1d8:	2005883a 	mov	r2,r4
 400a1dc:	003fee06 	br	400a198 <__reset+0xfb009198>

0400a1e0 <__unpack_d>:
 400a1e0:	21800117 	ldw	r6,4(r4)
 400a1e4:	20c00017 	ldw	r3,0(r4)
 400a1e8:	3004d7fa 	srli	r2,r6,31
 400a1ec:	3008d53a 	srli	r4,r6,20
 400a1f0:	28800115 	stw	r2,4(r5)
 400a1f4:	2101ffcc 	andi	r4,r4,2047
 400a1f8:	00800434 	movhi	r2,16
 400a1fc:	10bfffc4 	addi	r2,r2,-1
 400a200:	3084703a 	and	r2,r6,r2
 400a204:	20001a1e 	bne	r4,zero,400a270 <__unpack_d+0x90>
 400a208:	1888b03a 	or	r4,r3,r2
 400a20c:	20002626 	beq	r4,zero,400a2a8 <__unpack_d+0xc8>
 400a210:	1808d63a 	srli	r4,r3,24
 400a214:	1004923a 	slli	r2,r2,8
 400a218:	01bf0084 	movi	r6,-1022
 400a21c:	29800215 	stw	r6,8(r5)
 400a220:	2084b03a 	or	r2,r4,r2
 400a224:	010000c4 	movi	r4,3
 400a228:	29000015 	stw	r4,0(r5)
 400a22c:	02040034 	movhi	r8,4096
 400a230:	423fffc4 	addi	r8,r8,-1
 400a234:	1806923a 	slli	r3,r3,8
 400a238:	40801836 	bltu	r8,r2,400a29c <__unpack_d+0xbc>
 400a23c:	013f0044 	movi	r4,-1023
 400a240:	18cd883a 	add	r6,r3,r3
 400a244:	30c7803a 	cmpltu	r3,r6,r3
 400a248:	1085883a 	add	r2,r2,r2
 400a24c:	1885883a 	add	r2,r3,r2
 400a250:	200f883a 	mov	r7,r4
 400a254:	3007883a 	mov	r3,r6
 400a258:	213fffc4 	addi	r4,r4,-1
 400a25c:	40bff82e 	bgeu	r8,r2,400a240 <__reset+0xfb009240>
 400a260:	29c00215 	stw	r7,8(r5)
 400a264:	28c00315 	stw	r3,12(r5)
 400a268:	28800415 	stw	r2,16(r5)
 400a26c:	f800283a 	ret
 400a270:	01c1ffc4 	movi	r7,2047
 400a274:	21c00f26 	beq	r4,r7,400a2b4 <__unpack_d+0xd4>
 400a278:	180cd63a 	srli	r6,r3,24
 400a27c:	1004923a 	slli	r2,r2,8
 400a280:	213f0044 	addi	r4,r4,-1023
 400a284:	1806923a 	slli	r3,r3,8
 400a288:	3084b03a 	or	r2,r6,r2
 400a28c:	29000215 	stw	r4,8(r5)
 400a290:	010000c4 	movi	r4,3
 400a294:	10840034 	orhi	r2,r2,4096
 400a298:	29000015 	stw	r4,0(r5)
 400a29c:	28c00315 	stw	r3,12(r5)
 400a2a0:	28800415 	stw	r2,16(r5)
 400a2a4:	f800283a 	ret
 400a2a8:	00800084 	movi	r2,2
 400a2ac:	28800015 	stw	r2,0(r5)
 400a2b0:	f800283a 	ret
 400a2b4:	1888b03a 	or	r4,r3,r2
 400a2b8:	20000526 	beq	r4,zero,400a2d0 <__unpack_d+0xf0>
 400a2bc:	3180022c 	andhi	r6,r6,8
 400a2c0:	30000626 	beq	r6,zero,400a2dc <__unpack_d+0xfc>
 400a2c4:	01000044 	movi	r4,1
 400a2c8:	29000015 	stw	r4,0(r5)
 400a2cc:	003ff306 	br	400a29c <__reset+0xfb00929c>
 400a2d0:	00800104 	movi	r2,4
 400a2d4:	28800015 	stw	r2,0(r5)
 400a2d8:	f800283a 	ret
 400a2dc:	28000015 	stw	zero,0(r5)
 400a2e0:	003fee06 	br	400a29c <__reset+0xfb00929c>

0400a2e4 <__fpcmp_parts_d>:
 400a2e4:	20c00017 	ldw	r3,0(r4)
 400a2e8:	00800044 	movi	r2,1
 400a2ec:	10c0142e 	bgeu	r2,r3,400a340 <__fpcmp_parts_d+0x5c>
 400a2f0:	29800017 	ldw	r6,0(r5)
 400a2f4:	1180122e 	bgeu	r2,r6,400a340 <__fpcmp_parts_d+0x5c>
 400a2f8:	01c00104 	movi	r7,4
 400a2fc:	19c02826 	beq	r3,r7,400a3a0 <__fpcmp_parts_d+0xbc>
 400a300:	31c00926 	beq	r6,r7,400a328 <__fpcmp_parts_d+0x44>
 400a304:	01c00084 	movi	r7,2
 400a308:	19c00626 	beq	r3,r7,400a324 <__fpcmp_parts_d+0x40>
 400a30c:	31c00a26 	beq	r6,r7,400a338 <__fpcmp_parts_d+0x54>
 400a310:	20c00117 	ldw	r3,4(r4)
 400a314:	29800117 	ldw	r6,4(r5)
 400a318:	19800b26 	beq	r3,r6,400a348 <__fpcmp_parts_d+0x64>
 400a31c:	1800041e 	bne	r3,zero,400a330 <__fpcmp_parts_d+0x4c>
 400a320:	f800283a 	ret
 400a324:	30c01a26 	beq	r6,r3,400a390 <__fpcmp_parts_d+0xac>
 400a328:	28800117 	ldw	r2,4(r5)
 400a32c:	1000041e 	bne	r2,zero,400a340 <__fpcmp_parts_d+0x5c>
 400a330:	00bfffc4 	movi	r2,-1
 400a334:	f800283a 	ret
 400a338:	20800117 	ldw	r2,4(r4)
 400a33c:	103ffc1e 	bne	r2,zero,400a330 <__reset+0xfb009330>
 400a340:	00800044 	movi	r2,1
 400a344:	f800283a 	ret
 400a348:	21c00217 	ldw	r7,8(r4)
 400a34c:	29800217 	ldw	r6,8(r5)
 400a350:	31c0020e 	bge	r6,r7,400a35c <__fpcmp_parts_d+0x78>
 400a354:	183ff61e 	bne	r3,zero,400a330 <__reset+0xfb009330>
 400a358:	f800283a 	ret
 400a35c:	39800a16 	blt	r7,r6,400a388 <__fpcmp_parts_d+0xa4>
 400a360:	20800417 	ldw	r2,16(r4)
 400a364:	29800417 	ldw	r6,16(r5)
 400a368:	21c00317 	ldw	r7,12(r4)
 400a36c:	29000317 	ldw	r4,12(r5)
 400a370:	30800936 	bltu	r6,r2,400a398 <__fpcmp_parts_d+0xb4>
 400a374:	1180011e 	bne	r2,r6,400a37c <__fpcmp_parts_d+0x98>
 400a378:	21c00736 	bltu	r4,r7,400a398 <__fpcmp_parts_d+0xb4>
 400a37c:	11800236 	bltu	r2,r6,400a388 <__fpcmp_parts_d+0xa4>
 400a380:	3080031e 	bne	r6,r2,400a390 <__fpcmp_parts_d+0xac>
 400a384:	3900022e 	bgeu	r7,r4,400a390 <__fpcmp_parts_d+0xac>
 400a388:	183fe926 	beq	r3,zero,400a330 <__reset+0xfb009330>
 400a38c:	003fec06 	br	400a340 <__reset+0xfb009340>
 400a390:	0005883a 	mov	r2,zero
 400a394:	f800283a 	ret
 400a398:	183fe926 	beq	r3,zero,400a340 <__reset+0xfb009340>
 400a39c:	003fe406 	br	400a330 <__reset+0xfb009330>
 400a3a0:	30ffe51e 	bne	r6,r3,400a338 <__reset+0xfb009338>
 400a3a4:	28c00117 	ldw	r3,4(r5)
 400a3a8:	20800117 	ldw	r2,4(r4)
 400a3ac:	1885c83a 	sub	r2,r3,r2
 400a3b0:	f800283a 	ret

0400a3b4 <__lshrdi3>:
 400a3b4:	2005883a 	mov	r2,r4
 400a3b8:	2807883a 	mov	r3,r5
 400a3bc:	30000826 	beq	r6,zero,400a3e0 <__lshrdi3+0x2c>
 400a3c0:	01000804 	movi	r4,32
 400a3c4:	2189c83a 	sub	r4,r4,r6
 400a3c8:	0100060e 	bge	zero,r4,400a3e4 <__lshrdi3+0x30>
 400a3cc:	1184d83a 	srl	r2,r2,r6
 400a3d0:	2908983a 	sll	r4,r5,r4
 400a3d4:	298cd83a 	srl	r6,r5,r6
 400a3d8:	2084b03a 	or	r2,r4,r2
 400a3dc:	3007883a 	mov	r3,r6
 400a3e0:	f800283a 	ret
 400a3e4:	0105c83a 	sub	r2,zero,r4
 400a3e8:	000d883a 	mov	r6,zero
 400a3ec:	2884d83a 	srl	r2,r5,r2
 400a3f0:	3007883a 	mov	r3,r6
 400a3f4:	003ffa06 	br	400a3e0 <__reset+0xfb0093e0>

0400a3f8 <__ashldi3>:
 400a3f8:	2005883a 	mov	r2,r4
 400a3fc:	2807883a 	mov	r3,r5
 400a400:	30000826 	beq	r6,zero,400a424 <__ashldi3+0x2c>
 400a404:	01000804 	movi	r4,32
 400a408:	2189c83a 	sub	r4,r4,r6
 400a40c:	0100060e 	bge	zero,r4,400a428 <__ashldi3+0x30>
 400a410:	1108d83a 	srl	r4,r2,r4
 400a414:	2986983a 	sll	r3,r5,r6
 400a418:	118c983a 	sll	r6,r2,r6
 400a41c:	20c6b03a 	or	r3,r4,r3
 400a420:	3005883a 	mov	r2,r6
 400a424:	f800283a 	ret
 400a428:	0107c83a 	sub	r3,zero,r4
 400a42c:	000d883a 	mov	r6,zero
 400a430:	10c6983a 	sll	r3,r2,r3
 400a434:	3005883a 	mov	r2,r6
 400a438:	003ffa06 	br	400a424 <__reset+0xfb009424>

0400a43c <__errno>:
 400a43c:	00810234 	movhi	r2,1032
 400a440:	10a37104 	addi	r2,r2,-29244
 400a444:	10800017 	ldw	r2,0(r2)
 400a448:	f800283a 	ret

0400a44c <malloc>:
 400a44c:	00810234 	movhi	r2,1032
 400a450:	10a37104 	addi	r2,r2,-29244
 400a454:	200b883a 	mov	r5,r4
 400a458:	11000017 	ldw	r4,0(r2)
 400a45c:	400a4741 	jmpi	400a474 <_malloc_r>

0400a460 <free>:
 400a460:	00810234 	movhi	r2,1032
 400a464:	10a37104 	addi	r2,r2,-29244
 400a468:	200b883a 	mov	r5,r4
 400a46c:	11000017 	ldw	r4,0(r2)
 400a470:	400f14c1 	jmpi	400f14c <_free_r>

0400a474 <_malloc_r>:
 400a474:	defff604 	addi	sp,sp,-40
 400a478:	dc800215 	stw	r18,8(sp)
 400a47c:	dfc00915 	stw	ra,36(sp)
 400a480:	df000815 	stw	fp,32(sp)
 400a484:	ddc00715 	stw	r23,28(sp)
 400a488:	dd800615 	stw	r22,24(sp)
 400a48c:	dd400515 	stw	r21,20(sp)
 400a490:	dd000415 	stw	r20,16(sp)
 400a494:	dcc00315 	stw	r19,12(sp)
 400a498:	dc400115 	stw	r17,4(sp)
 400a49c:	dc000015 	stw	r16,0(sp)
 400a4a0:	288002c4 	addi	r2,r5,11
 400a4a4:	00c00584 	movi	r3,22
 400a4a8:	2025883a 	mov	r18,r4
 400a4ac:	18802b2e 	bgeu	r3,r2,400a55c <_malloc_r+0xe8>
 400a4b0:	047ffe04 	movi	r17,-8
 400a4b4:	1462703a 	and	r17,r2,r17
 400a4b8:	88002a16 	blt	r17,zero,400a564 <_malloc_r+0xf0>
 400a4bc:	89402936 	bltu	r17,r5,400a564 <_malloc_r+0xf0>
 400a4c0:	9009883a 	mov	r4,r18
 400a4c4:	401365c0 	call	401365c <__malloc_lock>
 400a4c8:	00807dc4 	movi	r2,503
 400a4cc:	14402936 	bltu	r2,r17,400a574 <_malloc_r+0x100>
 400a4d0:	8808d0fa 	srli	r4,r17,3
 400a4d4:	04c101f4 	movhi	r19,1031
 400a4d8:	9cddb404 	addi	r19,r19,30416
 400a4dc:	2105883a 	add	r2,r4,r4
 400a4e0:	1085883a 	add	r2,r2,r2
 400a4e4:	1085883a 	add	r2,r2,r2
 400a4e8:	9885883a 	add	r2,r19,r2
 400a4ec:	14000317 	ldw	r16,12(r2)
 400a4f0:	80815526 	beq	r16,r2,400aa48 <_malloc_r+0x5d4>
 400a4f4:	81000117 	ldw	r4,4(r16)
 400a4f8:	00bfff04 	movi	r2,-4
 400a4fc:	80c00317 	ldw	r3,12(r16)
 400a500:	2084703a 	and	r2,r4,r2
 400a504:	8085883a 	add	r2,r16,r2
 400a508:	11800117 	ldw	r6,4(r2)
 400a50c:	81400217 	ldw	r5,8(r16)
 400a510:	9009883a 	mov	r4,r18
 400a514:	31800054 	ori	r6,r6,1
 400a518:	11800115 	stw	r6,4(r2)
 400a51c:	28c00315 	stw	r3,12(r5)
 400a520:	19400215 	stw	r5,8(r3)
 400a524:	401367c0 	call	401367c <__malloc_unlock>
 400a528:	80800204 	addi	r2,r16,8
 400a52c:	dfc00917 	ldw	ra,36(sp)
 400a530:	df000817 	ldw	fp,32(sp)
 400a534:	ddc00717 	ldw	r23,28(sp)
 400a538:	dd800617 	ldw	r22,24(sp)
 400a53c:	dd400517 	ldw	r21,20(sp)
 400a540:	dd000417 	ldw	r20,16(sp)
 400a544:	dcc00317 	ldw	r19,12(sp)
 400a548:	dc800217 	ldw	r18,8(sp)
 400a54c:	dc400117 	ldw	r17,4(sp)
 400a550:	dc000017 	ldw	r16,0(sp)
 400a554:	dec00a04 	addi	sp,sp,40
 400a558:	f800283a 	ret
 400a55c:	04400404 	movi	r17,16
 400a560:	897fd72e 	bgeu	r17,r5,400a4c0 <__reset+0xfb0094c0>
 400a564:	00800304 	movi	r2,12
 400a568:	90800015 	stw	r2,0(r18)
 400a56c:	0005883a 	mov	r2,zero
 400a570:	003fee06 	br	400a52c <__reset+0xfb00952c>
 400a574:	8808d27a 	srli	r4,r17,9
 400a578:	20007126 	beq	r4,zero,400a740 <_malloc_r+0x2cc>
 400a57c:	00800104 	movi	r2,4
 400a580:	1100eb36 	bltu	r2,r4,400a930 <_malloc_r+0x4bc>
 400a584:	8808d1ba 	srli	r4,r17,6
 400a588:	21000e04 	addi	r4,r4,56
 400a58c:	210b883a 	add	r5,r4,r4
 400a590:	294b883a 	add	r5,r5,r5
 400a594:	294b883a 	add	r5,r5,r5
 400a598:	04c101f4 	movhi	r19,1031
 400a59c:	9cddb404 	addi	r19,r19,30416
 400a5a0:	994b883a 	add	r5,r19,r5
 400a5a4:	2c000317 	ldw	r16,12(r5)
 400a5a8:	2c000e26 	beq	r5,r16,400a5e4 <_malloc_r+0x170>
 400a5ac:	80c00117 	ldw	r3,4(r16)
 400a5b0:	01ffff04 	movi	r7,-4
 400a5b4:	018003c4 	movi	r6,15
 400a5b8:	19c6703a 	and	r3,r3,r7
 400a5bc:	1c45c83a 	sub	r2,r3,r17
 400a5c0:	30800716 	blt	r6,r2,400a5e0 <_malloc_r+0x16c>
 400a5c4:	1000610e 	bge	r2,zero,400a74c <_malloc_r+0x2d8>
 400a5c8:	84000317 	ldw	r16,12(r16)
 400a5cc:	2c000526 	beq	r5,r16,400a5e4 <_malloc_r+0x170>
 400a5d0:	80c00117 	ldw	r3,4(r16)
 400a5d4:	19c6703a 	and	r3,r3,r7
 400a5d8:	1c45c83a 	sub	r2,r3,r17
 400a5dc:	30bff90e 	bge	r6,r2,400a5c4 <__reset+0xfb0095c4>
 400a5e0:	213fffc4 	addi	r4,r4,-1
 400a5e4:	21000044 	addi	r4,r4,1
 400a5e8:	9c000417 	ldw	r16,16(r19)
 400a5ec:	00c101f4 	movhi	r3,1031
 400a5f0:	18ddb404 	addi	r3,r3,30416
 400a5f4:	1a400204 	addi	r9,r3,8
 400a5f8:	8240ff26 	beq	r16,r9,400a9f8 <_malloc_r+0x584>
 400a5fc:	81400117 	ldw	r5,4(r16)
 400a600:	00bfff04 	movi	r2,-4
 400a604:	018003c4 	movi	r6,15
 400a608:	2884703a 	and	r2,r5,r2
 400a60c:	144bc83a 	sub	r5,r2,r17
 400a610:	3140ea16 	blt	r6,r5,400a9bc <_malloc_r+0x548>
 400a614:	1a400515 	stw	r9,20(r3)
 400a618:	1a400415 	stw	r9,16(r3)
 400a61c:	2800570e 	bge	r5,zero,400a77c <_malloc_r+0x308>
 400a620:	01407fc4 	movi	r5,511
 400a624:	2880ca36 	bltu	r5,r2,400a950 <_malloc_r+0x4dc>
 400a628:	1004d0fa 	srli	r2,r2,3
 400a62c:	02000044 	movi	r8,1
 400a630:	19c00117 	ldw	r7,4(r3)
 400a634:	108b883a 	add	r5,r2,r2
 400a638:	294b883a 	add	r5,r5,r5
 400a63c:	1005d0ba 	srai	r2,r2,2
 400a640:	294b883a 	add	r5,r5,r5
 400a644:	28cb883a 	add	r5,r5,r3
 400a648:	29800217 	ldw	r6,8(r5)
 400a64c:	4084983a 	sll	r2,r8,r2
 400a650:	81400315 	stw	r5,12(r16)
 400a654:	81800215 	stw	r6,8(r16)
 400a658:	11c4b03a 	or	r2,r2,r7
 400a65c:	18800115 	stw	r2,4(r3)
 400a660:	2c000215 	stw	r16,8(r5)
 400a664:	34000315 	stw	r16,12(r6)
 400a668:	200bd0ba 	srai	r5,r4,2
 400a66c:	00c00044 	movi	r3,1
 400a670:	194a983a 	sll	r5,r3,r5
 400a674:	11404936 	bltu	r2,r5,400a79c <_malloc_r+0x328>
 400a678:	1146703a 	and	r3,r2,r5
 400a67c:	18000a1e 	bne	r3,zero,400a6a8 <_malloc_r+0x234>
 400a680:	00ffff04 	movi	r3,-4
 400a684:	294b883a 	add	r5,r5,r5
 400a688:	20c8703a 	and	r4,r4,r3
 400a68c:	1146703a 	and	r3,r2,r5
 400a690:	21000104 	addi	r4,r4,4
 400a694:	1800041e 	bne	r3,zero,400a6a8 <_malloc_r+0x234>
 400a698:	294b883a 	add	r5,r5,r5
 400a69c:	1146703a 	and	r3,r2,r5
 400a6a0:	21000104 	addi	r4,r4,4
 400a6a4:	183ffc26 	beq	r3,zero,400a698 <__reset+0xfb009698>
 400a6a8:	023fff04 	movi	r8,-4
 400a6ac:	01c003c4 	movi	r7,15
 400a6b0:	2105883a 	add	r2,r4,r4
 400a6b4:	1085883a 	add	r2,r2,r2
 400a6b8:	1085883a 	add	r2,r2,r2
 400a6bc:	9899883a 	add	r12,r19,r2
 400a6c0:	62800304 	addi	r10,r12,12
 400a6c4:	2017883a 	mov	r11,r4
 400a6c8:	54000017 	ldw	r16,0(r10)
 400a6cc:	51bffd04 	addi	r6,r10,-12
 400a6d0:	8180041e 	bne	r16,r6,400a6e4 <_malloc_r+0x270>
 400a6d4:	0000ca06 	br	400aa00 <_malloc_r+0x58c>
 400a6d8:	10001c0e 	bge	r2,zero,400a74c <_malloc_r+0x2d8>
 400a6dc:	84000317 	ldw	r16,12(r16)
 400a6e0:	8180c726 	beq	r16,r6,400aa00 <_malloc_r+0x58c>
 400a6e4:	80c00117 	ldw	r3,4(r16)
 400a6e8:	1a06703a 	and	r3,r3,r8
 400a6ec:	1c45c83a 	sub	r2,r3,r17
 400a6f0:	38bff90e 	bge	r7,r2,400a6d8 <__reset+0xfb0096d8>
 400a6f4:	81000317 	ldw	r4,12(r16)
 400a6f8:	81400217 	ldw	r5,8(r16)
 400a6fc:	8447883a 	add	r3,r16,r17
 400a700:	8c400054 	ori	r17,r17,1
 400a704:	29000315 	stw	r4,12(r5)
 400a708:	21400215 	stw	r5,8(r4)
 400a70c:	84400115 	stw	r17,4(r16)
 400a710:	1889883a 	add	r4,r3,r2
 400a714:	11400054 	ori	r5,r2,1
 400a718:	98c00515 	stw	r3,20(r19)
 400a71c:	98c00415 	stw	r3,16(r19)
 400a720:	20800015 	stw	r2,0(r4)
 400a724:	1a400315 	stw	r9,12(r3)
 400a728:	1a400215 	stw	r9,8(r3)
 400a72c:	19400115 	stw	r5,4(r3)
 400a730:	9009883a 	mov	r4,r18
 400a734:	401367c0 	call	401367c <__malloc_unlock>
 400a738:	80800204 	addi	r2,r16,8
 400a73c:	003f7b06 	br	400a52c <__reset+0xfb00952c>
 400a740:	8808d0fa 	srli	r4,r17,3
 400a744:	210b883a 	add	r5,r4,r4
 400a748:	003f9106 	br	400a590 <__reset+0xfb009590>
 400a74c:	80c7883a 	add	r3,r16,r3
 400a750:	19400117 	ldw	r5,4(r3)
 400a754:	80800317 	ldw	r2,12(r16)
 400a758:	81000217 	ldw	r4,8(r16)
 400a75c:	29400054 	ori	r5,r5,1
 400a760:	19400115 	stw	r5,4(r3)
 400a764:	20800315 	stw	r2,12(r4)
 400a768:	11000215 	stw	r4,8(r2)
 400a76c:	9009883a 	mov	r4,r18
 400a770:	401367c0 	call	401367c <__malloc_unlock>
 400a774:	80800204 	addi	r2,r16,8
 400a778:	003f6c06 	br	400a52c <__reset+0xfb00952c>
 400a77c:	8085883a 	add	r2,r16,r2
 400a780:	10c00117 	ldw	r3,4(r2)
 400a784:	9009883a 	mov	r4,r18
 400a788:	18c00054 	ori	r3,r3,1
 400a78c:	10c00115 	stw	r3,4(r2)
 400a790:	401367c0 	call	401367c <__malloc_unlock>
 400a794:	80800204 	addi	r2,r16,8
 400a798:	003f6406 	br	400a52c <__reset+0xfb00952c>
 400a79c:	9c000217 	ldw	r16,8(r19)
 400a7a0:	00bfff04 	movi	r2,-4
 400a7a4:	85400117 	ldw	r21,4(r16)
 400a7a8:	a8aa703a 	and	r21,r21,r2
 400a7ac:	ac400336 	bltu	r21,r17,400a7bc <_malloc_r+0x348>
 400a7b0:	ac45c83a 	sub	r2,r21,r17
 400a7b4:	00c003c4 	movi	r3,15
 400a7b8:	18805316 	blt	r3,r2,400a908 <_malloc_r+0x494>
 400a7bc:	d5e01717 	ldw	r23,-32676(gp)
 400a7c0:	d0e00517 	ldw	r3,-32748(gp)
 400a7c4:	00bfffc4 	movi	r2,-1
 400a7c8:	8579883a 	add	fp,r16,r21
 400a7cc:	8def883a 	add	r23,r17,r23
 400a7d0:	1880d226 	beq	r3,r2,400ab1c <_malloc_r+0x6a8>
 400a7d4:	bdc403c4 	addi	r23,r23,4111
 400a7d8:	00bc0004 	movi	r2,-4096
 400a7dc:	b8ae703a 	and	r23,r23,r2
 400a7e0:	9009883a 	mov	r4,r18
 400a7e4:	b80b883a 	mov	r5,r23
 400a7e8:	400af380 	call	400af38 <_sbrk_r>
 400a7ec:	1029883a 	mov	r20,r2
 400a7f0:	00bfffc4 	movi	r2,-1
 400a7f4:	a080d126 	beq	r20,r2,400ab3c <_malloc_r+0x6c8>
 400a7f8:	a7009f36 	bltu	r20,fp,400aa78 <_malloc_r+0x604>
 400a7fc:	05810234 	movhi	r22,1032
 400a800:	b5a38f04 	addi	r22,r22,-29124
 400a804:	b0800017 	ldw	r2,0(r22)
 400a808:	b885883a 	add	r2,r23,r2
 400a80c:	b0800015 	stw	r2,0(r22)
 400a810:	e500cf26 	beq	fp,r20,400ab50 <_malloc_r+0x6dc>
 400a814:	d1200517 	ldw	r4,-32748(gp)
 400a818:	00ffffc4 	movi	r3,-1
 400a81c:	20c0e026 	beq	r4,r3,400aba0 <_malloc_r+0x72c>
 400a820:	a739c83a 	sub	fp,r20,fp
 400a824:	1705883a 	add	r2,r2,fp
 400a828:	b0800015 	stw	r2,0(r22)
 400a82c:	a08001cc 	andi	r2,r20,7
 400a830:	1000a526 	beq	r2,zero,400aac8 <_malloc_r+0x654>
 400a834:	a0a9c83a 	sub	r20,r20,r2
 400a838:	00c40204 	movi	r3,4104
 400a83c:	a5000204 	addi	r20,r20,8
 400a840:	1885c83a 	sub	r2,r3,r2
 400a844:	a5c7883a 	add	r3,r20,r23
 400a848:	18c3ffcc 	andi	r3,r3,4095
 400a84c:	10efc83a 	sub	r23,r2,r3
 400a850:	9009883a 	mov	r4,r18
 400a854:	b80b883a 	mov	r5,r23
 400a858:	400af380 	call	400af38 <_sbrk_r>
 400a85c:	00ffffc4 	movi	r3,-1
 400a860:	10c0cc26 	beq	r2,r3,400ab94 <_malloc_r+0x720>
 400a864:	1505c83a 	sub	r2,r2,r20
 400a868:	b887883a 	add	r3,r23,r2
 400a86c:	18c00054 	ori	r3,r3,1
 400a870:	b0800017 	ldw	r2,0(r22)
 400a874:	9d000215 	stw	r20,8(r19)
 400a878:	a0c00115 	stw	r3,4(r20)
 400a87c:	b885883a 	add	r2,r23,r2
 400a880:	b0800015 	stw	r2,0(r22)
 400a884:	84c00e26 	beq	r16,r19,400a8c0 <_malloc_r+0x44c>
 400a888:	00c003c4 	movi	r3,15
 400a88c:	1d40902e 	bgeu	r3,r21,400aad0 <_malloc_r+0x65c>
 400a890:	ad7ffd04 	addi	r21,r21,-12
 400a894:	013ffe04 	movi	r4,-8
 400a898:	a908703a 	and	r4,r21,r4
 400a89c:	810b883a 	add	r5,r16,r4
 400a8a0:	01800144 	movi	r6,5
 400a8a4:	29800115 	stw	r6,4(r5)
 400a8a8:	29800215 	stw	r6,8(r5)
 400a8ac:	81400117 	ldw	r5,4(r16)
 400a8b0:	2940004c 	andi	r5,r5,1
 400a8b4:	214ab03a 	or	r5,r4,r5
 400a8b8:	81400115 	stw	r5,4(r16)
 400a8bc:	1900ae36 	bltu	r3,r4,400ab78 <_malloc_r+0x704>
 400a8c0:	d0e01617 	ldw	r3,-32680(gp)
 400a8c4:	1880012e 	bgeu	r3,r2,400a8cc <_malloc_r+0x458>
 400a8c8:	d0a01615 	stw	r2,-32680(gp)
 400a8cc:	d0e01517 	ldw	r3,-32684(gp)
 400a8d0:	9c000217 	ldw	r16,8(r19)
 400a8d4:	1880012e 	bgeu	r3,r2,400a8dc <_malloc_r+0x468>
 400a8d8:	d0a01515 	stw	r2,-32684(gp)
 400a8dc:	80c00117 	ldw	r3,4(r16)
 400a8e0:	00bfff04 	movi	r2,-4
 400a8e4:	1886703a 	and	r3,r3,r2
 400a8e8:	1c45c83a 	sub	r2,r3,r17
 400a8ec:	1c400236 	bltu	r3,r17,400a8f8 <_malloc_r+0x484>
 400a8f0:	00c003c4 	movi	r3,15
 400a8f4:	18800416 	blt	r3,r2,400a908 <_malloc_r+0x494>
 400a8f8:	9009883a 	mov	r4,r18
 400a8fc:	401367c0 	call	401367c <__malloc_unlock>
 400a900:	0005883a 	mov	r2,zero
 400a904:	003f0906 	br	400a52c <__reset+0xfb00952c>
 400a908:	88c00054 	ori	r3,r17,1
 400a90c:	10800054 	ori	r2,r2,1
 400a910:	80c00115 	stw	r3,4(r16)
 400a914:	8463883a 	add	r17,r16,r17
 400a918:	88800115 	stw	r2,4(r17)
 400a91c:	9009883a 	mov	r4,r18
 400a920:	9c400215 	stw	r17,8(r19)
 400a924:	401367c0 	call	401367c <__malloc_unlock>
 400a928:	80800204 	addi	r2,r16,8
 400a92c:	003eff06 	br	400a52c <__reset+0xfb00952c>
 400a930:	00800504 	movi	r2,20
 400a934:	1100492e 	bgeu	r2,r4,400aa5c <_malloc_r+0x5e8>
 400a938:	00801504 	movi	r2,84
 400a93c:	11005c36 	bltu	r2,r4,400aab0 <_malloc_r+0x63c>
 400a940:	8808d33a 	srli	r4,r17,12
 400a944:	21001b84 	addi	r4,r4,110
 400a948:	210b883a 	add	r5,r4,r4
 400a94c:	003f1006 	br	400a590 <__reset+0xfb009590>
 400a950:	1006d27a 	srli	r3,r2,9
 400a954:	01400104 	movi	r5,4
 400a958:	28c0432e 	bgeu	r5,r3,400aa68 <_malloc_r+0x5f4>
 400a95c:	01400504 	movi	r5,20
 400a960:	28c07036 	bltu	r5,r3,400ab24 <_malloc_r+0x6b0>
 400a964:	194016c4 	addi	r5,r3,91
 400a968:	294d883a 	add	r6,r5,r5
 400a96c:	318d883a 	add	r6,r6,r6
 400a970:	318d883a 	add	r6,r6,r6
 400a974:	998d883a 	add	r6,r19,r6
 400a978:	30c00217 	ldw	r3,8(r6)
 400a97c:	01c101f4 	movhi	r7,1031
 400a980:	39ddb404 	addi	r7,r7,30416
 400a984:	19805726 	beq	r3,r6,400aae4 <_malloc_r+0x670>
 400a988:	01ffff04 	movi	r7,-4
 400a98c:	19400117 	ldw	r5,4(r3)
 400a990:	29ca703a 	and	r5,r5,r7
 400a994:	1140022e 	bgeu	r2,r5,400a9a0 <_malloc_r+0x52c>
 400a998:	18c00217 	ldw	r3,8(r3)
 400a99c:	30fffb1e 	bne	r6,r3,400a98c <__reset+0xfb00998c>
 400a9a0:	19400317 	ldw	r5,12(r3)
 400a9a4:	98800117 	ldw	r2,4(r19)
 400a9a8:	81400315 	stw	r5,12(r16)
 400a9ac:	80c00215 	stw	r3,8(r16)
 400a9b0:	2c000215 	stw	r16,8(r5)
 400a9b4:	1c000315 	stw	r16,12(r3)
 400a9b8:	003f2b06 	br	400a668 <__reset+0xfb009668>
 400a9bc:	8445883a 	add	r2,r16,r17
 400a9c0:	8c400054 	ori	r17,r17,1
 400a9c4:	18800515 	stw	r2,20(r3)
 400a9c8:	18800415 	stw	r2,16(r3)
 400a9cc:	29000054 	ori	r4,r5,1
 400a9d0:	1147883a 	add	r3,r2,r5
 400a9d4:	84400115 	stw	r17,4(r16)
 400a9d8:	11000115 	stw	r4,4(r2)
 400a9dc:	12400315 	stw	r9,12(r2)
 400a9e0:	12400215 	stw	r9,8(r2)
 400a9e4:	19400015 	stw	r5,0(r3)
 400a9e8:	9009883a 	mov	r4,r18
 400a9ec:	401367c0 	call	401367c <__malloc_unlock>
 400a9f0:	80800204 	addi	r2,r16,8
 400a9f4:	003ecd06 	br	400a52c <__reset+0xfb00952c>
 400a9f8:	18800117 	ldw	r2,4(r3)
 400a9fc:	003f1a06 	br	400a668 <__reset+0xfb009668>
 400aa00:	5ac00044 	addi	r11,r11,1
 400aa04:	588000cc 	andi	r2,r11,3
 400aa08:	52800204 	addi	r10,r10,8
 400aa0c:	103f2e1e 	bne	r2,zero,400a6c8 <__reset+0xfb0096c8>
 400aa10:	20c000cc 	andi	r3,r4,3
 400aa14:	60bffe04 	addi	r2,r12,-8
 400aa18:	18006f26 	beq	r3,zero,400abd8 <_malloc_r+0x764>
 400aa1c:	63000017 	ldw	r12,0(r12)
 400aa20:	213fffc4 	addi	r4,r4,-1
 400aa24:	60bffa26 	beq	r12,r2,400aa10 <__reset+0xfb009a10>
 400aa28:	98800117 	ldw	r2,4(r19)
 400aa2c:	294b883a 	add	r5,r5,r5
 400aa30:	117f5a36 	bltu	r2,r5,400a79c <__reset+0xfb00979c>
 400aa34:	283f5926 	beq	r5,zero,400a79c <__reset+0xfb00979c>
 400aa38:	1146703a 	and	r3,r2,r5
 400aa3c:	18001626 	beq	r3,zero,400aa98 <_malloc_r+0x624>
 400aa40:	5809883a 	mov	r4,r11
 400aa44:	003f1a06 	br	400a6b0 <__reset+0xfb0096b0>
 400aa48:	80800204 	addi	r2,r16,8
 400aa4c:	84000517 	ldw	r16,20(r16)
 400aa50:	143ea81e 	bne	r2,r16,400a4f4 <__reset+0xfb0094f4>
 400aa54:	21000084 	addi	r4,r4,2
 400aa58:	003ee306 	br	400a5e8 <__reset+0xfb0095e8>
 400aa5c:	210016c4 	addi	r4,r4,91
 400aa60:	210b883a 	add	r5,r4,r4
 400aa64:	003eca06 	br	400a590 <__reset+0xfb009590>
 400aa68:	100ad1ba 	srli	r5,r2,6
 400aa6c:	29400e04 	addi	r5,r5,56
 400aa70:	294d883a 	add	r6,r5,r5
 400aa74:	003fbd06 	br	400a96c <__reset+0xfb00996c>
 400aa78:	84ff6026 	beq	r16,r19,400a7fc <__reset+0xfb0097fc>
 400aa7c:	008101f4 	movhi	r2,1031
 400aa80:	109db404 	addi	r2,r2,30416
 400aa84:	14000217 	ldw	r16,8(r2)
 400aa88:	00bfff04 	movi	r2,-4
 400aa8c:	80c00117 	ldw	r3,4(r16)
 400aa90:	1886703a 	and	r3,r3,r2
 400aa94:	003f9406 	br	400a8e8 <__reset+0xfb0098e8>
 400aa98:	294b883a 	add	r5,r5,r5
 400aa9c:	1146703a 	and	r3,r2,r5
 400aaa0:	5ac00104 	addi	r11,r11,4
 400aaa4:	183ffc26 	beq	r3,zero,400aa98 <__reset+0xfb009a98>
 400aaa8:	5809883a 	mov	r4,r11
 400aaac:	003f0006 	br	400a6b0 <__reset+0xfb0096b0>
 400aab0:	00805504 	movi	r2,340
 400aab4:	11001336 	bltu	r2,r4,400ab04 <_malloc_r+0x690>
 400aab8:	8808d3fa 	srli	r4,r17,15
 400aabc:	21001dc4 	addi	r4,r4,119
 400aac0:	210b883a 	add	r5,r4,r4
 400aac4:	003eb206 	br	400a590 <__reset+0xfb009590>
 400aac8:	00840004 	movi	r2,4096
 400aacc:	003f5d06 	br	400a844 <__reset+0xfb009844>
 400aad0:	00800044 	movi	r2,1
 400aad4:	a0800115 	stw	r2,4(r20)
 400aad8:	a021883a 	mov	r16,r20
 400aadc:	0007883a 	mov	r3,zero
 400aae0:	003f8106 	br	400a8e8 <__reset+0xfb0098e8>
 400aae4:	280bd0ba 	srai	r5,r5,2
 400aae8:	01800044 	movi	r6,1
 400aaec:	38800117 	ldw	r2,4(r7)
 400aaf0:	314c983a 	sll	r6,r6,r5
 400aaf4:	180b883a 	mov	r5,r3
 400aaf8:	3084b03a 	or	r2,r6,r2
 400aafc:	38800115 	stw	r2,4(r7)
 400ab00:	003fa906 	br	400a9a8 <__reset+0xfb0099a8>
 400ab04:	00815504 	movi	r2,1364
 400ab08:	11001836 	bltu	r2,r4,400ab6c <_malloc_r+0x6f8>
 400ab0c:	8808d4ba 	srli	r4,r17,18
 400ab10:	21001f04 	addi	r4,r4,124
 400ab14:	210b883a 	add	r5,r4,r4
 400ab18:	003e9d06 	br	400a590 <__reset+0xfb009590>
 400ab1c:	bdc00404 	addi	r23,r23,16
 400ab20:	003f2f06 	br	400a7e0 <__reset+0xfb0097e0>
 400ab24:	01401504 	movi	r5,84
 400ab28:	28c01f36 	bltu	r5,r3,400aba8 <_malloc_r+0x734>
 400ab2c:	100ad33a 	srli	r5,r2,12
 400ab30:	29401b84 	addi	r5,r5,110
 400ab34:	294d883a 	add	r6,r5,r5
 400ab38:	003f8c06 	br	400a96c <__reset+0xfb00996c>
 400ab3c:	9c000217 	ldw	r16,8(r19)
 400ab40:	00bfff04 	movi	r2,-4
 400ab44:	80c00117 	ldw	r3,4(r16)
 400ab48:	1886703a 	and	r3,r3,r2
 400ab4c:	003f6606 	br	400a8e8 <__reset+0xfb0098e8>
 400ab50:	e0c3ffcc 	andi	r3,fp,4095
 400ab54:	183f2f1e 	bne	r3,zero,400a814 <__reset+0xfb009814>
 400ab58:	98c00217 	ldw	r3,8(r19)
 400ab5c:	bd49883a 	add	r4,r23,r21
 400ab60:	21000054 	ori	r4,r4,1
 400ab64:	19000115 	stw	r4,4(r3)
 400ab68:	003f5506 	br	400a8c0 <__reset+0xfb0098c0>
 400ab6c:	01403f04 	movi	r5,252
 400ab70:	01001f84 	movi	r4,126
 400ab74:	003e8606 	br	400a590 <__reset+0xfb009590>
 400ab78:	9009883a 	mov	r4,r18
 400ab7c:	81400204 	addi	r5,r16,8
 400ab80:	400f14c0 	call	400f14c <_free_r>
 400ab84:	00810234 	movhi	r2,1032
 400ab88:	10a38f04 	addi	r2,r2,-29124
 400ab8c:	10800017 	ldw	r2,0(r2)
 400ab90:	003f4b06 	br	400a8c0 <__reset+0xfb0098c0>
 400ab94:	00c00044 	movi	r3,1
 400ab98:	002f883a 	mov	r23,zero
 400ab9c:	003f3406 	br	400a870 <__reset+0xfb009870>
 400aba0:	d5200515 	stw	r20,-32748(gp)
 400aba4:	003f2106 	br	400a82c <__reset+0xfb00982c>
 400aba8:	01405504 	movi	r5,340
 400abac:	28c00436 	bltu	r5,r3,400abc0 <_malloc_r+0x74c>
 400abb0:	100ad3fa 	srli	r5,r2,15
 400abb4:	29401dc4 	addi	r5,r5,119
 400abb8:	294d883a 	add	r6,r5,r5
 400abbc:	003f6b06 	br	400a96c <__reset+0xfb00996c>
 400abc0:	01415504 	movi	r5,1364
 400abc4:	28c00936 	bltu	r5,r3,400abec <_malloc_r+0x778>
 400abc8:	100ad4ba 	srli	r5,r2,18
 400abcc:	29401f04 	addi	r5,r5,124
 400abd0:	294d883a 	add	r6,r5,r5
 400abd4:	003f6506 	br	400a96c <__reset+0xfb00996c>
 400abd8:	98800117 	ldw	r2,4(r19)
 400abdc:	0146303a 	nor	r3,zero,r5
 400abe0:	1884703a 	and	r2,r3,r2
 400abe4:	98800115 	stw	r2,4(r19)
 400abe8:	003f9006 	br	400aa2c <__reset+0xfb009a2c>
 400abec:	01803f04 	movi	r6,252
 400abf0:	01401f84 	movi	r5,126
 400abf4:	003f5d06 	br	400a96c <__reset+0xfb00996c>

0400abf8 <memcpy>:
 400abf8:	defffb04 	addi	sp,sp,-20
 400abfc:	dc000015 	stw	r16,0(sp)
 400ac00:	dfc00415 	stw	ra,16(sp)
 400ac04:	dcc00315 	stw	r19,12(sp)
 400ac08:	dc800215 	stw	r18,8(sp)
 400ac0c:	dc400115 	stw	r17,4(sp)
 400ac10:	00c003c4 	movi	r3,15
 400ac14:	2021883a 	mov	r16,r4
 400ac18:	3005883a 	mov	r2,r6
 400ac1c:	1980032e 	bgeu	r3,r6,400ac2c <memcpy+0x34>
 400ac20:	2906b03a 	or	r3,r5,r4
 400ac24:	18c000cc 	andi	r3,r3,3
 400ac28:	18001026 	beq	r3,zero,400ac6c <memcpy+0x74>
 400ac2c:	8007883a 	mov	r3,r16
 400ac30:	288f883a 	add	r7,r5,r2
 400ac34:	10000526 	beq	r2,zero,400ac4c <memcpy+0x54>
 400ac38:	29800003 	ldbu	r6,0(r5)
 400ac3c:	18c00044 	addi	r3,r3,1
 400ac40:	29400044 	addi	r5,r5,1
 400ac44:	19bfffc5 	stb	r6,-1(r3)
 400ac48:	29fffb1e 	bne	r5,r7,400ac38 <__reset+0xfb009c38>
 400ac4c:	8005883a 	mov	r2,r16
 400ac50:	dfc00417 	ldw	ra,16(sp)
 400ac54:	dcc00317 	ldw	r19,12(sp)
 400ac58:	dc800217 	ldw	r18,8(sp)
 400ac5c:	dc400117 	ldw	r17,4(sp)
 400ac60:	dc000017 	ldw	r16,0(sp)
 400ac64:	dec00504 	addi	sp,sp,20
 400ac68:	f800283a 	ret
 400ac6c:	32bffc04 	addi	r10,r6,-16
 400ac70:	5014d13a 	srli	r10,r10,4
 400ac74:	20800404 	addi	r2,r4,16
 400ac78:	2007883a 	mov	r3,r4
 400ac7c:	5008913a 	slli	r4,r10,4
 400ac80:	280f883a 	mov	r7,r5
 400ac84:	1105883a 	add	r2,r2,r4
 400ac88:	3a000017 	ldw	r8,0(r7)
 400ac8c:	18c00404 	addi	r3,r3,16
 400ac90:	39c00404 	addi	r7,r7,16
 400ac94:	1a3ffc15 	stw	r8,-16(r3)
 400ac98:	3a3ffd17 	ldw	r8,-12(r7)
 400ac9c:	1a3ffd15 	stw	r8,-12(r3)
 400aca0:	3a3ffe17 	ldw	r8,-8(r7)
 400aca4:	1a3ffe15 	stw	r8,-8(r3)
 400aca8:	3a3fff17 	ldw	r8,-4(r7)
 400acac:	1a3fff15 	stw	r8,-4(r3)
 400acb0:	18bff51e 	bne	r3,r2,400ac88 <__reset+0xfb009c88>
 400acb4:	52800044 	addi	r10,r10,1
 400acb8:	5014913a 	slli	r10,r10,4
 400acbc:	308003cc 	andi	r2,r6,15
 400acc0:	010000c4 	movi	r4,3
 400acc4:	8287883a 	add	r3,r16,r10
 400acc8:	2a95883a 	add	r10,r5,r10
 400accc:	2080182e 	bgeu	r4,r2,400ad30 <memcpy+0x138>
 400acd0:	147fff04 	addi	r17,r2,-4
 400acd4:	8808d0ba 	srli	r4,r17,2
 400acd8:	1a400104 	addi	r9,r3,4
 400acdc:	180d883a 	mov	r6,r3
 400ace0:	2105883a 	add	r2,r4,r4
 400ace4:	1085883a 	add	r2,r2,r2
 400ace8:	4893883a 	add	r9,r9,r2
 400acec:	500f883a 	mov	r7,r10
 400acf0:	3a000017 	ldw	r8,0(r7)
 400acf4:	31800104 	addi	r6,r6,4
 400acf8:	39c00104 	addi	r7,r7,4
 400acfc:	323fff15 	stw	r8,-4(r6)
 400ad00:	327ffb1e 	bne	r6,r9,400acf0 <__reset+0xfb009cf0>
 400ad04:	20800044 	addi	r2,r4,1
 400ad08:	1085883a 	add	r2,r2,r2
 400ad0c:	1085883a 	add	r2,r2,r2
 400ad10:	017fff04 	movi	r5,-4
 400ad14:	18a5883a 	add	r18,r3,r2
 400ad18:	50a7883a 	add	r19,r10,r2
 400ad1c:	4009dd80 	call	4009dd8 <__mulsi3>
 400ad20:	1445883a 	add	r2,r2,r17
 400ad24:	980b883a 	mov	r5,r19
 400ad28:	9007883a 	mov	r3,r18
 400ad2c:	003fc006 	br	400ac30 <__reset+0xfb009c30>
 400ad30:	500b883a 	mov	r5,r10
 400ad34:	003fbe06 	br	400ac30 <__reset+0xfb009c30>

0400ad38 <memset>:
 400ad38:	00c000c4 	movi	r3,3
 400ad3c:	2005883a 	mov	r2,r4
 400ad40:	29403fcc 	andi	r5,r5,255
 400ad44:	19802d2e 	bgeu	r3,r6,400adfc <memset+0xc4>
 400ad48:	20c6703a 	and	r3,r4,r3
 400ad4c:	18002e1e 	bne	r3,zero,400ae08 <memset+0xd0>
 400ad50:	2806923a 	slli	r3,r5,8
 400ad54:	010003c4 	movi	r4,15
 400ad58:	3011883a 	mov	r8,r6
 400ad5c:	1946b03a 	or	r3,r3,r5
 400ad60:	180e943a 	slli	r7,r3,16
 400ad64:	38ceb03a 	or	r7,r7,r3
 400ad68:	1007883a 	mov	r3,r2
 400ad6c:	21800f2e 	bgeu	r4,r6,400adac <memset+0x74>
 400ad70:	19c00015 	stw	r7,0(r3)
 400ad74:	19c00115 	stw	r7,4(r3)
 400ad78:	19c00215 	stw	r7,8(r3)
 400ad7c:	19c00315 	stw	r7,12(r3)
 400ad80:	423ffc04 	addi	r8,r8,-16
 400ad84:	18c00404 	addi	r3,r3,16
 400ad88:	223ff936 	bltu	r4,r8,400ad70 <__reset+0xfb009d70>
 400ad8c:	30fffc04 	addi	r3,r6,-16
 400ad90:	1806d13a 	srli	r3,r3,4
 400ad94:	318003cc 	andi	r6,r6,15
 400ad98:	010000c4 	movi	r4,3
 400ad9c:	18c00044 	addi	r3,r3,1
 400ada0:	1806913a 	slli	r3,r3,4
 400ada4:	10c7883a 	add	r3,r2,r3
 400ada8:	21800e2e 	bgeu	r4,r6,400ade4 <memset+0xac>
 400adac:	1813883a 	mov	r9,r3
 400adb0:	3011883a 	mov	r8,r6
 400adb4:	010000c4 	movi	r4,3
 400adb8:	49c00015 	stw	r7,0(r9)
 400adbc:	423fff04 	addi	r8,r8,-4
 400adc0:	4a400104 	addi	r9,r9,4
 400adc4:	223ffc36 	bltu	r4,r8,400adb8 <__reset+0xfb009db8>
 400adc8:	313fff04 	addi	r4,r6,-4
 400adcc:	2008d0ba 	srli	r4,r4,2
 400add0:	318000cc 	andi	r6,r6,3
 400add4:	21000044 	addi	r4,r4,1
 400add8:	2109883a 	add	r4,r4,r4
 400addc:	2109883a 	add	r4,r4,r4
 400ade0:	1907883a 	add	r3,r3,r4
 400ade4:	30000a26 	beq	r6,zero,400ae10 <memset+0xd8>
 400ade8:	198d883a 	add	r6,r3,r6
 400adec:	19400005 	stb	r5,0(r3)
 400adf0:	18c00044 	addi	r3,r3,1
 400adf4:	19bffd1e 	bne	r3,r6,400adec <__reset+0xfb009dec>
 400adf8:	f800283a 	ret
 400adfc:	2007883a 	mov	r3,r4
 400ae00:	303ff91e 	bne	r6,zero,400ade8 <__reset+0xfb009de8>
 400ae04:	00000206 	br	400ae10 <memset+0xd8>
 400ae08:	2007883a 	mov	r3,r4
 400ae0c:	003ff606 	br	400ade8 <__reset+0xfb009de8>
 400ae10:	f800283a 	ret

0400ae14 <_printf_r>:
 400ae14:	defffd04 	addi	sp,sp,-12
 400ae18:	dfc00015 	stw	ra,0(sp)
 400ae1c:	d9800115 	stw	r6,4(sp)
 400ae20:	d9c00215 	stw	r7,8(sp)
 400ae24:	280d883a 	mov	r6,r5
 400ae28:	21400217 	ldw	r5,8(r4)
 400ae2c:	d9c00104 	addi	r7,sp,4
 400ae30:	400b1b40 	call	400b1b4 <___vfprintf_internal_r>
 400ae34:	dfc00017 	ldw	ra,0(sp)
 400ae38:	dec00304 	addi	sp,sp,12
 400ae3c:	f800283a 	ret

0400ae40 <printf>:
 400ae40:	defffc04 	addi	sp,sp,-16
 400ae44:	dfc00015 	stw	ra,0(sp)
 400ae48:	d9400115 	stw	r5,4(sp)
 400ae4c:	d9800215 	stw	r6,8(sp)
 400ae50:	d9c00315 	stw	r7,12(sp)
 400ae54:	00810234 	movhi	r2,1032
 400ae58:	10a37104 	addi	r2,r2,-29244
 400ae5c:	10800017 	ldw	r2,0(r2)
 400ae60:	200b883a 	mov	r5,r4
 400ae64:	d9800104 	addi	r6,sp,4
 400ae68:	11000217 	ldw	r4,8(r2)
 400ae6c:	400d0300 	call	400d030 <__vfprintf_internal>
 400ae70:	dfc00017 	ldw	ra,0(sp)
 400ae74:	dec00404 	addi	sp,sp,16
 400ae78:	f800283a 	ret

0400ae7c <_putchar_r>:
 400ae7c:	21800217 	ldw	r6,8(r4)
 400ae80:	4010fb81 	jmpi	4010fb8 <_putc_r>

0400ae84 <putchar>:
 400ae84:	00810234 	movhi	r2,1032
 400ae88:	10a37104 	addi	r2,r2,-29244
 400ae8c:	10800017 	ldw	r2,0(r2)
 400ae90:	200b883a 	mov	r5,r4
 400ae94:	11800217 	ldw	r6,8(r2)
 400ae98:	1009883a 	mov	r4,r2
 400ae9c:	4010fb81 	jmpi	4010fb8 <_putc_r>

0400aea0 <_puts_r>:
 400aea0:	defff604 	addi	sp,sp,-40
 400aea4:	dc400815 	stw	r17,32(sp)
 400aea8:	2023883a 	mov	r17,r4
 400aeac:	2809883a 	mov	r4,r5
 400aeb0:	dc000715 	stw	r16,28(sp)
 400aeb4:	dfc00915 	stw	ra,36(sp)
 400aeb8:	2821883a 	mov	r16,r5
 400aebc:	400b0f40 	call	400b0f4 <strlen>
 400aec0:	10c00044 	addi	r3,r2,1
 400aec4:	d8800115 	stw	r2,4(sp)
 400aec8:	89400217 	ldw	r5,8(r17)
 400aecc:	008101f4 	movhi	r2,1031
 400aed0:	10953b04 	addi	r2,r2,21740
 400aed4:	d8800215 	stw	r2,8(sp)
 400aed8:	00800044 	movi	r2,1
 400aedc:	d8800315 	stw	r2,12(sp)
 400aee0:	8809883a 	mov	r4,r17
 400aee4:	00800084 	movi	r2,2
 400aee8:	d9800404 	addi	r6,sp,16
 400aeec:	dc000015 	stw	r16,0(sp)
 400aef0:	d8c00615 	stw	r3,24(sp)
 400aef4:	dec00415 	stw	sp,16(sp)
 400aef8:	d8800515 	stw	r2,20(sp)
 400aefc:	400f41c0 	call	400f41c <__sfvwrite_r>
 400af00:	1000061e 	bne	r2,zero,400af1c <_puts_r+0x7c>
 400af04:	00800284 	movi	r2,10
 400af08:	dfc00917 	ldw	ra,36(sp)
 400af0c:	dc400817 	ldw	r17,32(sp)
 400af10:	dc000717 	ldw	r16,28(sp)
 400af14:	dec00a04 	addi	sp,sp,40
 400af18:	f800283a 	ret
 400af1c:	00bfffc4 	movi	r2,-1
 400af20:	003ff906 	br	400af08 <__reset+0xfb009f08>

0400af24 <puts>:
 400af24:	00810234 	movhi	r2,1032
 400af28:	10a37104 	addi	r2,r2,-29244
 400af2c:	200b883a 	mov	r5,r4
 400af30:	11000017 	ldw	r4,0(r2)
 400af34:	400aea01 	jmpi	400aea0 <_puts_r>

0400af38 <_sbrk_r>:
 400af38:	defffd04 	addi	sp,sp,-12
 400af3c:	dc400115 	stw	r17,4(sp)
 400af40:	dc000015 	stw	r16,0(sp)
 400af44:	2023883a 	mov	r17,r4
 400af48:	04010234 	movhi	r16,1032
 400af4c:	84238504 	addi	r16,r16,-29164
 400af50:	2809883a 	mov	r4,r5
 400af54:	dfc00215 	stw	ra,8(sp)
 400af58:	80000015 	stw	zero,0(r16)
 400af5c:	40138600 	call	4013860 <sbrk>
 400af60:	00ffffc4 	movi	r3,-1
 400af64:	10c00526 	beq	r2,r3,400af7c <_sbrk_r+0x44>
 400af68:	dfc00217 	ldw	ra,8(sp)
 400af6c:	dc400117 	ldw	r17,4(sp)
 400af70:	dc000017 	ldw	r16,0(sp)
 400af74:	dec00304 	addi	sp,sp,12
 400af78:	f800283a 	ret
 400af7c:	80c00017 	ldw	r3,0(r16)
 400af80:	183ff926 	beq	r3,zero,400af68 <__reset+0xfb009f68>
 400af84:	88c00015 	stw	r3,0(r17)
 400af88:	dfc00217 	ldw	ra,8(sp)
 400af8c:	dc400117 	ldw	r17,4(sp)
 400af90:	dc000017 	ldw	r16,0(sp)
 400af94:	dec00304 	addi	sp,sp,12
 400af98:	f800283a 	ret

0400af9c <_sprintf_r>:
 400af9c:	deffe704 	addi	sp,sp,-100
 400afa0:	2807883a 	mov	r3,r5
 400afa4:	dfc01715 	stw	ra,92(sp)
 400afa8:	d9c01815 	stw	r7,96(sp)
 400afac:	00a00034 	movhi	r2,32768
 400afb0:	10bfffc4 	addi	r2,r2,-1
 400afb4:	02008204 	movi	r8,520
 400afb8:	d8800215 	stw	r2,8(sp)
 400afbc:	d8800515 	stw	r2,20(sp)
 400afc0:	d80b883a 	mov	r5,sp
 400afc4:	d9c01804 	addi	r7,sp,96
 400afc8:	00bfffc4 	movi	r2,-1
 400afcc:	d8c00015 	stw	r3,0(sp)
 400afd0:	d8c00415 	stw	r3,16(sp)
 400afd4:	da00030d 	sth	r8,12(sp)
 400afd8:	d880038d 	sth	r2,14(sp)
 400afdc:	400b1b40 	call	400b1b4 <___vfprintf_internal_r>
 400afe0:	d8c00017 	ldw	r3,0(sp)
 400afe4:	18000005 	stb	zero,0(r3)
 400afe8:	dfc01717 	ldw	ra,92(sp)
 400afec:	dec01904 	addi	sp,sp,100
 400aff0:	f800283a 	ret

0400aff4 <sprintf>:
 400aff4:	deffe604 	addi	sp,sp,-104
 400aff8:	2007883a 	mov	r3,r4
 400affc:	dfc01715 	stw	ra,92(sp)
 400b000:	d9801815 	stw	r6,96(sp)
 400b004:	d9c01915 	stw	r7,100(sp)
 400b008:	00810234 	movhi	r2,1032
 400b00c:	10a37104 	addi	r2,r2,-29244
 400b010:	11000017 	ldw	r4,0(r2)
 400b014:	00a00034 	movhi	r2,32768
 400b018:	10bfffc4 	addi	r2,r2,-1
 400b01c:	280d883a 	mov	r6,r5
 400b020:	02008204 	movi	r8,520
 400b024:	d8800215 	stw	r2,8(sp)
 400b028:	d8800515 	stw	r2,20(sp)
 400b02c:	d80b883a 	mov	r5,sp
 400b030:	d9c01804 	addi	r7,sp,96
 400b034:	00bfffc4 	movi	r2,-1
 400b038:	d8c00015 	stw	r3,0(sp)
 400b03c:	d8c00415 	stw	r3,16(sp)
 400b040:	da00030d 	sth	r8,12(sp)
 400b044:	d880038d 	sth	r2,14(sp)
 400b048:	400b1b40 	call	400b1b4 <___vfprintf_internal_r>
 400b04c:	d8c00017 	ldw	r3,0(sp)
 400b050:	18000005 	stb	zero,0(r3)
 400b054:	dfc01717 	ldw	ra,92(sp)
 400b058:	dec01a04 	addi	sp,sp,104
 400b05c:	f800283a 	ret

0400b060 <strcpy>:
 400b060:	2906b03a 	or	r3,r5,r4
 400b064:	18c000cc 	andi	r3,r3,3
 400b068:	2005883a 	mov	r2,r4
 400b06c:	18001a1e 	bne	r3,zero,400b0d8 <strcpy+0x78>
 400b070:	29800017 	ldw	r6,0(r5)
 400b074:	02bfbff4 	movhi	r10,65279
 400b078:	52bfbfc4 	addi	r10,r10,-257
 400b07c:	02602074 	movhi	r9,32897
 400b080:	4a602004 	addi	r9,r9,-32640
 400b084:	0188303a 	nor	r4,zero,r6
 400b088:	3287883a 	add	r3,r6,r10
 400b08c:	20c6703a 	and	r3,r4,r3
 400b090:	1a46703a 	and	r3,r3,r9
 400b094:	1800101e 	bne	r3,zero,400b0d8 <strcpy+0x78>
 400b098:	1007883a 	mov	r3,r2
 400b09c:	19800015 	stw	r6,0(r3)
 400b0a0:	29400104 	addi	r5,r5,4
 400b0a4:	29800017 	ldw	r6,0(r5)
 400b0a8:	18c00104 	addi	r3,r3,4
 400b0ac:	0190303a 	nor	r8,zero,r6
 400b0b0:	328f883a 	add	r7,r6,r10
 400b0b4:	41ce703a 	and	r7,r8,r7
 400b0b8:	3a4e703a 	and	r7,r7,r9
 400b0bc:	383ff726 	beq	r7,zero,400b09c <__reset+0xfb00a09c>
 400b0c0:	29800007 	ldb	r6,0(r5)
 400b0c4:	18c00044 	addi	r3,r3,1
 400b0c8:	29400044 	addi	r5,r5,1
 400b0cc:	19bfffc5 	stb	r6,-1(r3)
 400b0d0:	3000021e 	bne	r6,zero,400b0dc <strcpy+0x7c>
 400b0d4:	f800283a 	ret
 400b0d8:	1007883a 	mov	r3,r2
 400b0dc:	29800007 	ldb	r6,0(r5)
 400b0e0:	18c00044 	addi	r3,r3,1
 400b0e4:	29400044 	addi	r5,r5,1
 400b0e8:	19bfffc5 	stb	r6,-1(r3)
 400b0ec:	303ffb1e 	bne	r6,zero,400b0dc <__reset+0xfb00a0dc>
 400b0f0:	f800283a 	ret

0400b0f4 <strlen>:
 400b0f4:	208000cc 	andi	r2,r4,3
 400b0f8:	10001f1e 	bne	r2,zero,400b178 <strlen+0x84>
 400b0fc:	20800017 	ldw	r2,0(r4)
 400b100:	01ffbff4 	movhi	r7,65279
 400b104:	39ffbfc4 	addi	r7,r7,-257
 400b108:	01a02074 	movhi	r6,32897
 400b10c:	31a02004 	addi	r6,r6,-32640
 400b110:	11c7883a 	add	r3,r2,r7
 400b114:	0084303a 	nor	r2,zero,r2
 400b118:	1886703a 	and	r3,r3,r2
 400b11c:	1986703a 	and	r3,r3,r6
 400b120:	2005883a 	mov	r2,r4
 400b124:	1800101e 	bne	r3,zero,400b168 <strlen+0x74>
 400b128:	10800104 	addi	r2,r2,4
 400b12c:	10c00017 	ldw	r3,0(r2)
 400b130:	19cb883a 	add	r5,r3,r7
 400b134:	00c6303a 	nor	r3,zero,r3
 400b138:	28c6703a 	and	r3,r5,r3
 400b13c:	1986703a 	and	r3,r3,r6
 400b140:	1800091e 	bne	r3,zero,400b168 <strlen+0x74>
 400b144:	10800104 	addi	r2,r2,4
 400b148:	10c00017 	ldw	r3,0(r2)
 400b14c:	19cb883a 	add	r5,r3,r7
 400b150:	00c6303a 	nor	r3,zero,r3
 400b154:	28c6703a 	and	r3,r5,r3
 400b158:	1986703a 	and	r3,r3,r6
 400b15c:	183ff226 	beq	r3,zero,400b128 <__reset+0xfb00a128>
 400b160:	00000106 	br	400b168 <strlen+0x74>
 400b164:	10800044 	addi	r2,r2,1
 400b168:	10c00007 	ldb	r3,0(r2)
 400b16c:	183ffd1e 	bne	r3,zero,400b164 <__reset+0xfb00a164>
 400b170:	1105c83a 	sub	r2,r2,r4
 400b174:	f800283a 	ret
 400b178:	2005883a 	mov	r2,r4
 400b17c:	003ffa06 	br	400b168 <__reset+0xfb00a168>

0400b180 <__sprint_r>:
 400b180:	30800217 	ldw	r2,8(r6)
 400b184:	defffe04 	addi	sp,sp,-8
 400b188:	dc000015 	stw	r16,0(sp)
 400b18c:	dfc00115 	stw	ra,4(sp)
 400b190:	3021883a 	mov	r16,r6
 400b194:	10000226 	beq	r2,zero,400b1a0 <__sprint_r+0x20>
 400b198:	400f41c0 	call	400f41c <__sfvwrite_r>
 400b19c:	80000215 	stw	zero,8(r16)
 400b1a0:	80000115 	stw	zero,4(r16)
 400b1a4:	dfc00117 	ldw	ra,4(sp)
 400b1a8:	dc000017 	ldw	r16,0(sp)
 400b1ac:	dec00204 	addi	sp,sp,8
 400b1b0:	f800283a 	ret

0400b1b4 <___vfprintf_internal_r>:
 400b1b4:	defeb904 	addi	sp,sp,-1308
 400b1b8:	dc013d15 	stw	r16,1268(sp)
 400b1bc:	d9013015 	stw	r4,1216(sp)
 400b1c0:	dfc14615 	stw	ra,1304(sp)
 400b1c4:	df014515 	stw	fp,1300(sp)
 400b1c8:	ddc14415 	stw	r23,1296(sp)
 400b1cc:	dd814315 	stw	r22,1292(sp)
 400b1d0:	dd414215 	stw	r21,1288(sp)
 400b1d4:	dd014115 	stw	r20,1284(sp)
 400b1d8:	dcc14015 	stw	r19,1280(sp)
 400b1dc:	dc813f15 	stw	r18,1276(sp)
 400b1e0:	dc413e15 	stw	r17,1272(sp)
 400b1e4:	d9412915 	stw	r5,1188(sp)
 400b1e8:	3021883a 	mov	r16,r6
 400b1ec:	d9c12d15 	stw	r7,1204(sp)
 400b1f0:	400fb080 	call	400fb08 <_localeconv_r>
 400b1f4:	10800017 	ldw	r2,0(r2)
 400b1f8:	d9013017 	ldw	r4,1216(sp)
 400b1fc:	d8013315 	stw	zero,1228(sp)
 400b200:	d8813715 	stw	r2,1244(sp)
 400b204:	d8013415 	stw	zero,1232(sp)
 400b208:	20000226 	beq	r4,zero,400b214 <___vfprintf_internal_r+0x60>
 400b20c:	20800e17 	ldw	r2,56(r4)
 400b210:	10014b26 	beq	r2,zero,400b740 <___vfprintf_internal_r+0x58c>
 400b214:	d8c12917 	ldw	r3,1188(sp)
 400b218:	1880030b 	ldhu	r2,12(r3)
 400b21c:	10c0020c 	andi	r3,r2,8
 400b220:	18ffffcc 	andi	r3,r3,65535
 400b224:	18e0001c 	xori	r3,r3,32768
 400b228:	18e00004 	addi	r3,r3,-32768
 400b22c:	1800ed26 	beq	r3,zero,400b5e4 <___vfprintf_internal_r+0x430>
 400b230:	d9012917 	ldw	r4,1188(sp)
 400b234:	20c00417 	ldw	r3,16(r4)
 400b238:	1800ea26 	beq	r3,zero,400b5e4 <___vfprintf_internal_r+0x430>
 400b23c:	1100068c 	andi	r4,r2,26
 400b240:	00c00284 	movi	r3,10
 400b244:	20c0f026 	beq	r4,r3,400b608 <___vfprintf_internal_r+0x454>
 400b248:	d9010dc4 	addi	r4,sp,1079
 400b24c:	d8810e04 	addi	r2,sp,1080
 400b250:	dc413017 	ldw	r17,1216(sp)
 400b254:	d8c00404 	addi	r3,sp,16
 400b258:	d9012615 	stw	r4,1176(sp)
 400b25c:	1109c83a 	sub	r4,r2,r4
 400b260:	d8812715 	stw	r2,1180(sp)
 400b264:	d8c11b15 	stw	r3,1132(sp)
 400b268:	d8011d15 	stw	zero,1140(sp)
 400b26c:	d8011c15 	stw	zero,1136(sp)
 400b270:	802b883a 	mov	r21,r16
 400b274:	d8013215 	stw	zero,1224(sp)
 400b278:	d8013615 	stw	zero,1240(sp)
 400b27c:	d8013515 	stw	zero,1236(sp)
 400b280:	d8012c15 	stw	zero,1200(sp)
 400b284:	1813883a 	mov	r9,r3
 400b288:	d9013915 	stw	r4,1252(sp)
 400b28c:	a8800007 	ldb	r2,0(r21)
 400b290:	1002f326 	beq	r2,zero,400be60 <___vfprintf_internal_r+0xcac>
 400b294:	00c00944 	movi	r3,37
 400b298:	a825883a 	mov	r18,r21
 400b29c:	10c0021e 	bne	r2,r3,400b2a8 <___vfprintf_internal_r+0xf4>
 400b2a0:	00001406 	br	400b2f4 <___vfprintf_internal_r+0x140>
 400b2a4:	10c00326 	beq	r2,r3,400b2b4 <___vfprintf_internal_r+0x100>
 400b2a8:	94800044 	addi	r18,r18,1
 400b2ac:	90800007 	ldb	r2,0(r18)
 400b2b0:	103ffc1e 	bne	r2,zero,400b2a4 <__reset+0xfb00a2a4>
 400b2b4:	9561c83a 	sub	r16,r18,r21
 400b2b8:	80000e26 	beq	r16,zero,400b2f4 <___vfprintf_internal_r+0x140>
 400b2bc:	da011d17 	ldw	r8,1140(sp)
 400b2c0:	d8c11c17 	ldw	r3,1136(sp)
 400b2c4:	4d400015 	stw	r21,0(r9)
 400b2c8:	4c000115 	stw	r16,4(r9)
 400b2cc:	4411883a 	add	r8,r8,r16
 400b2d0:	18c00044 	addi	r3,r3,1
 400b2d4:	da011d15 	stw	r8,1140(sp)
 400b2d8:	d8c11c15 	stw	r3,1136(sp)
 400b2dc:	008001c4 	movi	r2,7
 400b2e0:	10c11016 	blt	r2,r3,400b724 <___vfprintf_internal_r+0x570>
 400b2e4:	4a400204 	addi	r9,r9,8
 400b2e8:	d8812c17 	ldw	r2,1200(sp)
 400b2ec:	1405883a 	add	r2,r2,r16
 400b2f0:	d8812c15 	stw	r2,1200(sp)
 400b2f4:	90800007 	ldb	r2,0(r18)
 400b2f8:	1000ee26 	beq	r2,zero,400b6b4 <___vfprintf_internal_r+0x500>
 400b2fc:	95400044 	addi	r21,r18,1
 400b300:	94800047 	ldb	r18,1(r18)
 400b304:	073fffc4 	movi	fp,-1
 400b308:	e007883a 	mov	r3,fp
 400b30c:	d8012585 	stb	zero,1174(sp)
 400b310:	d8012e15 	stw	zero,1208(sp)
 400b314:	0021883a 	mov	r16,zero
 400b318:	05001604 	movi	r20,88
 400b31c:	04c00244 	movi	r19,9
 400b320:	4839883a 	mov	fp,r9
 400b324:	ad400044 	addi	r21,r21,1
 400b328:	90bff804 	addi	r2,r18,-32
 400b32c:	a080462e 	bgeu	r20,r2,400b448 <___vfprintf_internal_r+0x294>
 400b330:	e013883a 	mov	r9,fp
 400b334:	9000df26 	beq	r18,zero,400b6b4 <___vfprintf_internal_r+0x500>
 400b338:	00c00044 	movi	r3,1
 400b33c:	d8c12815 	stw	r3,1184(sp)
 400b340:	dc810405 	stb	r18,1040(sp)
 400b344:	d8012585 	stb	zero,1174(sp)
 400b348:	d8c12b15 	stw	r3,1196(sp)
 400b34c:	dcc10404 	addi	r19,sp,1040
 400b350:	d8013115 	stw	zero,1220(sp)
 400b354:	80c0008c 	andi	r3,r16,2
 400b358:	d8c12a15 	stw	r3,1192(sp)
 400b35c:	18000326 	beq	r3,zero,400b36c <___vfprintf_internal_r+0x1b8>
 400b360:	d8c12817 	ldw	r3,1184(sp)
 400b364:	18c00084 	addi	r3,r3,2
 400b368:	d8c12815 	stw	r3,1184(sp)
 400b36c:	80c0210c 	andi	r3,r16,132
 400b370:	d8c12f15 	stw	r3,1212(sp)
 400b374:	1802251e 	bne	r3,zero,400bc0c <___vfprintf_internal_r+0xa58>
 400b378:	d9012e17 	ldw	r4,1208(sp)
 400b37c:	d8c12817 	ldw	r3,1184(sp)
 400b380:	20edc83a 	sub	r22,r4,r3
 400b384:	0582210e 	bge	zero,r22,400bc0c <___vfprintf_internal_r+0xa58>
 400b388:	02800404 	movi	r10,16
 400b38c:	da011d17 	ldw	r8,1140(sp)
 400b390:	d8c11c17 	ldw	r3,1136(sp)
 400b394:	05c101f4 	movhi	r23,1031
 400b398:	bdd54c84 	addi	r23,r23,21810
 400b39c:	5580200e 	bge	r10,r22,400b420 <___vfprintf_internal_r+0x26c>
 400b3a0:	dc813815 	stw	r18,1248(sp)
 400b3a4:	5039883a 	mov	fp,r10
 400b3a8:	b825883a 	mov	r18,r23
 400b3ac:	050001c4 	movi	r20,7
 400b3b0:	b02f883a 	mov	r23,r22
 400b3b4:	802d883a 	mov	r22,r16
 400b3b8:	dc012917 	ldw	r16,1188(sp)
 400b3bc:	00000306 	br	400b3cc <___vfprintf_internal_r+0x218>
 400b3c0:	bdfffc04 	addi	r23,r23,-16
 400b3c4:	4a400204 	addi	r9,r9,8
 400b3c8:	e5c0110e 	bge	fp,r23,400b410 <___vfprintf_internal_r+0x25c>
 400b3cc:	4c800015 	stw	r18,0(r9)
 400b3d0:	4f000115 	stw	fp,4(r9)
 400b3d4:	42000404 	addi	r8,r8,16
 400b3d8:	18c00044 	addi	r3,r3,1
 400b3dc:	da011d15 	stw	r8,1140(sp)
 400b3e0:	d8c11c15 	stw	r3,1136(sp)
 400b3e4:	a0fff60e 	bge	r20,r3,400b3c0 <__reset+0xfb00a3c0>
 400b3e8:	8809883a 	mov	r4,r17
 400b3ec:	800b883a 	mov	r5,r16
 400b3f0:	d9811b04 	addi	r6,sp,1132
 400b3f4:	400b1800 	call	400b180 <__sprint_r>
 400b3f8:	1000b41e 	bne	r2,zero,400b6cc <___vfprintf_internal_r+0x518>
 400b3fc:	bdfffc04 	addi	r23,r23,-16
 400b400:	da011d17 	ldw	r8,1140(sp)
 400b404:	d8c11c17 	ldw	r3,1136(sp)
 400b408:	da400404 	addi	r9,sp,16
 400b40c:	e5ffef16 	blt	fp,r23,400b3cc <__reset+0xfb00a3cc>
 400b410:	b021883a 	mov	r16,r22
 400b414:	b82d883a 	mov	r22,r23
 400b418:	902f883a 	mov	r23,r18
 400b41c:	dc813817 	ldw	r18,1248(sp)
 400b420:	4dc00015 	stw	r23,0(r9)
 400b424:	4d800115 	stw	r22,4(r9)
 400b428:	4591883a 	add	r8,r8,r22
 400b42c:	18c00044 	addi	r3,r3,1
 400b430:	da011d15 	stw	r8,1140(sp)
 400b434:	d8c11c15 	stw	r3,1136(sp)
 400b438:	008001c4 	movi	r2,7
 400b43c:	10c3fe16 	blt	r2,r3,400c438 <___vfprintf_internal_r+0x1284>
 400b440:	4a400204 	addi	r9,r9,8
 400b444:	0001f306 	br	400bc14 <___vfprintf_internal_r+0xa60>
 400b448:	1085883a 	add	r2,r2,r2
 400b44c:	1085883a 	add	r2,r2,r2
 400b450:	01010074 	movhi	r4,1025
 400b454:	212d1904 	addi	r4,r4,-19356
 400b458:	1105883a 	add	r2,r2,r4
 400b45c:	10800017 	ldw	r2,0(r2)
 400b460:	1000683a 	jmp	r2
 400b464:	0400bb40 	call	400bb4 <__alt_mem_sdram-0x3bff44c>
 400b468:	0400b330 	cmpltui	r16,zero,716
 400b46c:	0400b330 	cmpltui	r16,zero,716
 400b470:	0400bb58 	cmpnei	r16,zero,749
 400b474:	0400b330 	cmpltui	r16,zero,716
 400b478:	0400b330 	cmpltui	r16,zero,716
 400b47c:	0400b330 	cmpltui	r16,zero,716
 400b480:	0400b330 	cmpltui	r16,zero,716
 400b484:	0400b330 	cmpltui	r16,zero,716
 400b488:	0400b330 	cmpltui	r16,zero,716
 400b48c:	0400ba10 	cmplti	r16,zero,744
 400b490:	0400bba4 	muli	r16,zero,750
 400b494:	0400b330 	cmpltui	r16,zero,716
 400b498:	0400b5d8 	cmpnei	r16,zero,727
 400b49c:	0400b978 	rdprs	r16,zero,741
 400b4a0:	0400b330 	cmpltui	r16,zero,716
 400b4a4:	0400bb64 	muli	r16,zero,749
 400b4a8:	0400bb70 	cmpltui	r16,zero,749
 400b4ac:	0400bb70 	cmpltui	r16,zero,749
 400b4b0:	0400bb70 	cmpltui	r16,zero,749
 400b4b4:	0400bb70 	cmpltui	r16,zero,749
 400b4b8:	0400bb70 	cmpltui	r16,zero,749
 400b4bc:	0400bb70 	cmpltui	r16,zero,749
 400b4c0:	0400bb70 	cmpltui	r16,zero,749
 400b4c4:	0400bb70 	cmpltui	r16,zero,749
 400b4c8:	0400bb70 	cmpltui	r16,zero,749
 400b4cc:	0400b330 	cmpltui	r16,zero,716
 400b4d0:	0400b330 	cmpltui	r16,zero,716
 400b4d4:	0400b330 	cmpltui	r16,zero,716
 400b4d8:	0400b330 	cmpltui	r16,zero,716
 400b4dc:	0400b330 	cmpltui	r16,zero,716
 400b4e0:	0400b330 	cmpltui	r16,zero,716
 400b4e4:	0400b330 	cmpltui	r16,zero,716
 400b4e8:	0400b330 	cmpltui	r16,zero,716
 400b4ec:	0400b330 	cmpltui	r16,zero,716
 400b4f0:	0400b330 	cmpltui	r16,zero,716
 400b4f4:	0400b748 	cmpgei	r16,zero,733
 400b4f8:	0400b808 	cmpgei	r16,zero,736
 400b4fc:	0400b330 	cmpltui	r16,zero,716
 400b500:	0400b808 	cmpgei	r16,zero,736
 400b504:	0400b330 	cmpltui	r16,zero,716
 400b508:	0400b330 	cmpltui	r16,zero,716
 400b50c:	0400b330 	cmpltui	r16,zero,716
 400b510:	0400b330 	cmpltui	r16,zero,716
 400b514:	0400b89c 	xori	r16,zero,738
 400b518:	0400b330 	cmpltui	r16,zero,716
 400b51c:	0400b330 	cmpltui	r16,zero,716
 400b520:	0400b8a8 	cmpgeui	r16,zero,738
 400b524:	0400b330 	cmpltui	r16,zero,716
 400b528:	0400b330 	cmpltui	r16,zero,716
 400b52c:	0400b330 	cmpltui	r16,zero,716
 400b530:	0400b330 	cmpltui	r16,zero,716
 400b534:	0400b330 	cmpltui	r16,zero,716
 400b538:	0400b8e0 	cmpeqi	r16,zero,739
 400b53c:	0400b330 	cmpltui	r16,zero,716
 400b540:	0400b330 	cmpltui	r16,zero,716
 400b544:	0400b91c 	xori	r16,zero,740
 400b548:	0400b330 	cmpltui	r16,zero,716
 400b54c:	0400b330 	cmpltui	r16,zero,716
 400b550:	0400b330 	cmpltui	r16,zero,716
 400b554:	0400b330 	cmpltui	r16,zero,716
 400b558:	0400b330 	cmpltui	r16,zero,716
 400b55c:	0400b330 	cmpltui	r16,zero,716
 400b560:	0400b330 	cmpltui	r16,zero,716
 400b564:	0400b330 	cmpltui	r16,zero,716
 400b568:	0400b330 	cmpltui	r16,zero,716
 400b56c:	0400b330 	cmpltui	r16,zero,716
 400b570:	0400bbb4 	movhi	r16,750
 400b574:	0400bbe8 	cmpgeui	r16,zero,751
 400b578:	0400b808 	cmpgei	r16,zero,736
 400b57c:	0400b808 	cmpgei	r16,zero,736
 400b580:	0400b808 	cmpgei	r16,zero,736
 400b584:	0400bb34 	movhi	r16,748
 400b588:	0400bbe8 	cmpgeui	r16,zero,751
 400b58c:	0400b330 	cmpltui	r16,zero,716
 400b590:	0400b330 	cmpltui	r16,zero,716
 400b594:	0400b9c0 	call	400b9c <__alt_mem_sdram-0x3bff464>
 400b598:	0400b330 	cmpltui	r16,zero,716
 400b59c:	0400b9d8 	cmpnei	r16,zero,743
 400b5a0:	0400bbf4 	movhi	r16,751
 400b5a4:	0400ba38 	rdprs	r16,zero,744
 400b5a8:	0400ba88 	cmpgei	r16,zero,746
 400b5ac:	0400b330 	cmpltui	r16,zero,716
 400b5b0:	0400ba94 	movui	r16,746
 400b5b4:	0400b330 	cmpltui	r16,zero,716
 400b5b8:	0400bc00 	call	400bc0 <__alt_mem_sdram-0x3bff440>
 400b5bc:	0400b330 	cmpltui	r16,zero,716
 400b5c0:	0400b330 	cmpltui	r16,zero,716
 400b5c4:	0400baf8 	rdprs	r16,zero,747
 400b5c8:	d9012e17 	ldw	r4,1208(sp)
 400b5cc:	d8812d15 	stw	r2,1204(sp)
 400b5d0:	0109c83a 	sub	r4,zero,r4
 400b5d4:	d9012e15 	stw	r4,1208(sp)
 400b5d8:	84000114 	ori	r16,r16,4
 400b5dc:	ac800007 	ldb	r18,0(r21)
 400b5e0:	003f5006 	br	400b324 <__reset+0xfb00a324>
 400b5e4:	d9013017 	ldw	r4,1216(sp)
 400b5e8:	d9412917 	ldw	r5,1188(sp)
 400b5ec:	400d1400 	call	400d140 <__swsetup_r>
 400b5f0:	10003d1e 	bne	r2,zero,400b6e8 <___vfprintf_internal_r+0x534>
 400b5f4:	d8c12917 	ldw	r3,1188(sp)
 400b5f8:	1880030b 	ldhu	r2,12(r3)
 400b5fc:	00c00284 	movi	r3,10
 400b600:	1100068c 	andi	r4,r2,26
 400b604:	20ff101e 	bne	r4,r3,400b248 <__reset+0xfb00a248>
 400b608:	d9012917 	ldw	r4,1188(sp)
 400b60c:	20c0038b 	ldhu	r3,14(r4)
 400b610:	193fffcc 	andi	r4,r3,65535
 400b614:	2120001c 	xori	r4,r4,32768
 400b618:	21200004 	addi	r4,r4,-32768
 400b61c:	203f0a16 	blt	r4,zero,400b248 <__reset+0xfb00a248>
 400b620:	d9012917 	ldw	r4,1188(sp)
 400b624:	d9c12d17 	ldw	r7,1204(sp)
 400b628:	10bfff4c 	andi	r2,r2,65533
 400b62c:	22800717 	ldw	r10,28(r4)
 400b630:	22400917 	ldw	r9,36(r4)
 400b634:	d9013017 	ldw	r4,1216(sp)
 400b638:	02010004 	movi	r8,1024
 400b63c:	d881070d 	sth	r2,1052(sp)
 400b640:	d9410404 	addi	r5,sp,1040
 400b644:	d8800404 	addi	r2,sp,16
 400b648:	800d883a 	mov	r6,r16
 400b64c:	d8c1078d 	sth	r3,1054(sp)
 400b650:	da810b15 	stw	r10,1068(sp)
 400b654:	da410d15 	stw	r9,1076(sp)
 400b658:	d8810415 	stw	r2,1040(sp)
 400b65c:	d8810815 	stw	r2,1056(sp)
 400b660:	da010615 	stw	r8,1048(sp)
 400b664:	da010915 	stw	r8,1060(sp)
 400b668:	d8010a15 	stw	zero,1064(sp)
 400b66c:	400b1b40 	call	400b1b4 <___vfprintf_internal_r>
 400b670:	d8812c15 	stw	r2,1200(sp)
 400b674:	10000416 	blt	r2,zero,400b688 <___vfprintf_internal_r+0x4d4>
 400b678:	d9013017 	ldw	r4,1216(sp)
 400b67c:	d9410404 	addi	r5,sp,1040
 400b680:	400eb0c0 	call	400eb0c <_fflush_r>
 400b684:	1006501e 	bne	r2,zero,400cfc8 <___vfprintf_internal_r+0x1e14>
 400b688:	d881070b 	ldhu	r2,1052(sp)
 400b68c:	1080100c 	andi	r2,r2,64
 400b690:	10bfffcc 	andi	r2,r2,65535
 400b694:	10a0001c 	xori	r2,r2,32768
 400b698:	10a00004 	addi	r2,r2,-32768
 400b69c:	10001426 	beq	r2,zero,400b6f0 <___vfprintf_internal_r+0x53c>
 400b6a0:	d8c12917 	ldw	r3,1188(sp)
 400b6a4:	1880030b 	ldhu	r2,12(r3)
 400b6a8:	10801014 	ori	r2,r2,64
 400b6ac:	1880030d 	sth	r2,12(r3)
 400b6b0:	00000f06 	br	400b6f0 <___vfprintf_internal_r+0x53c>
 400b6b4:	d8811d17 	ldw	r2,1140(sp)
 400b6b8:	10000426 	beq	r2,zero,400b6cc <___vfprintf_internal_r+0x518>
 400b6bc:	d9013017 	ldw	r4,1216(sp)
 400b6c0:	d9412917 	ldw	r5,1188(sp)
 400b6c4:	d9811b04 	addi	r6,sp,1132
 400b6c8:	400b1800 	call	400b180 <__sprint_r>
 400b6cc:	d8c12917 	ldw	r3,1188(sp)
 400b6d0:	1880030b 	ldhu	r2,12(r3)
 400b6d4:	1080100c 	andi	r2,r2,64
 400b6d8:	10bfffcc 	andi	r2,r2,65535
 400b6dc:	10a0001c 	xori	r2,r2,32768
 400b6e0:	10a00004 	addi	r2,r2,-32768
 400b6e4:	10000226 	beq	r2,zero,400b6f0 <___vfprintf_internal_r+0x53c>
 400b6e8:	00bfffc4 	movi	r2,-1
 400b6ec:	d8812c15 	stw	r2,1200(sp)
 400b6f0:	d8812c17 	ldw	r2,1200(sp)
 400b6f4:	dfc14617 	ldw	ra,1304(sp)
 400b6f8:	df014517 	ldw	fp,1300(sp)
 400b6fc:	ddc14417 	ldw	r23,1296(sp)
 400b700:	dd814317 	ldw	r22,1292(sp)
 400b704:	dd414217 	ldw	r21,1288(sp)
 400b708:	dd014117 	ldw	r20,1284(sp)
 400b70c:	dcc14017 	ldw	r19,1280(sp)
 400b710:	dc813f17 	ldw	r18,1276(sp)
 400b714:	dc413e17 	ldw	r17,1272(sp)
 400b718:	dc013d17 	ldw	r16,1268(sp)
 400b71c:	dec14704 	addi	sp,sp,1308
 400b720:	f800283a 	ret
 400b724:	d9412917 	ldw	r5,1188(sp)
 400b728:	8809883a 	mov	r4,r17
 400b72c:	d9811b04 	addi	r6,sp,1132
 400b730:	400b1800 	call	400b180 <__sprint_r>
 400b734:	103fe51e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400b738:	da400404 	addi	r9,sp,16
 400b73c:	003eea06 	br	400b2e8 <__reset+0xfb00a2e8>
 400b740:	400edc80 	call	400edc8 <__sinit>
 400b744:	003eb306 	br	400b214 <__reset+0xfb00a214>
 400b748:	e013883a 	mov	r9,fp
 400b74c:	84000414 	ori	r16,r16,16
 400b750:	1839883a 	mov	fp,r3
 400b754:	8080080c 	andi	r2,r16,32
 400b758:	10034426 	beq	r2,zero,400c46c <___vfprintf_internal_r+0x12b8>
 400b75c:	d8c12d17 	ldw	r3,1204(sp)
 400b760:	18800117 	ldw	r2,4(r3)
 400b764:	1dc00017 	ldw	r23,0(r3)
 400b768:	18c00204 	addi	r3,r3,8
 400b76c:	d8c12d15 	stw	r3,1204(sp)
 400b770:	102d883a 	mov	r22,r2
 400b774:	1003020e 	bge	r2,zero,400c380 <___vfprintf_internal_r+0x11cc>
 400b778:	05efc83a 	sub	r23,zero,r23
 400b77c:	b804c03a 	cmpne	r2,r23,zero
 400b780:	05adc83a 	sub	r22,zero,r22
 400b784:	b0adc83a 	sub	r22,r22,r2
 400b788:	00800b44 	movi	r2,45
 400b78c:	d8812585 	stb	r2,1174(sp)
 400b790:	00c00044 	movi	r3,1
 400b794:	bd84b03a 	or	r2,r23,r22
 400b798:	e0000216 	blt	fp,zero,400b7a4 <___vfprintf_internal_r+0x5f0>
 400b79c:	013fdfc4 	movi	r4,-129
 400b7a0:	8120703a 	and	r16,r16,r4
 400b7a4:	1001cc1e 	bne	r2,zero,400bed8 <___vfprintf_internal_r+0xd24>
 400b7a8:	e001cb1e 	bne	fp,zero,400bed8 <___vfprintf_internal_r+0xd24>
 400b7ac:	18c03fcc 	andi	r3,r3,255
 400b7b0:	1802ca1e 	bne	r3,zero,400c2dc <___vfprintf_internal_r+0x1128>
 400b7b4:	8080004c 	andi	r2,r16,1
 400b7b8:	1002c826 	beq	r2,zero,400c2dc <___vfprintf_internal_r+0x1128>
 400b7bc:	d8c13917 	ldw	r3,1252(sp)
 400b7c0:	00800c04 	movi	r2,48
 400b7c4:	d8810dc5 	stb	r2,1079(sp)
 400b7c8:	d8c12b15 	stw	r3,1196(sp)
 400b7cc:	dcc10dc4 	addi	r19,sp,1079
 400b7d0:	d8812b17 	ldw	r2,1196(sp)
 400b7d4:	d8812815 	stw	r2,1184(sp)
 400b7d8:	1700010e 	bge	r2,fp,400b7e0 <___vfprintf_internal_r+0x62c>
 400b7dc:	df012815 	stw	fp,1184(sp)
 400b7e0:	d8812583 	ldbu	r2,1174(sp)
 400b7e4:	df013115 	stw	fp,1220(sp)
 400b7e8:	10803fcc 	andi	r2,r2,255
 400b7ec:	1080201c 	xori	r2,r2,128
 400b7f0:	10bfe004 	addi	r2,r2,-128
 400b7f4:	103ed726 	beq	r2,zero,400b354 <__reset+0xfb00a354>
 400b7f8:	d8c12817 	ldw	r3,1184(sp)
 400b7fc:	18c00044 	addi	r3,r3,1
 400b800:	d8c12815 	stw	r3,1184(sp)
 400b804:	003ed306 	br	400b354 <__reset+0xfb00a354>
 400b808:	8080020c 	andi	r2,r16,8
 400b80c:	e013883a 	mov	r9,fp
 400b810:	1839883a 	mov	fp,r3
 400b814:	1003a626 	beq	r2,zero,400c6b0 <___vfprintf_internal_r+0x14fc>
 400b818:	d9012d17 	ldw	r4,1204(sp)
 400b81c:	25800017 	ldw	r22,0(r4)
 400b820:	25000117 	ldw	r20,4(r4)
 400b824:	21000204 	addi	r4,r4,8
 400b828:	d9012d15 	stw	r4,1204(sp)
 400b82c:	dd813315 	stw	r22,1228(sp)
 400b830:	dd013415 	stw	r20,1232(sp)
 400b834:	b009883a 	mov	r4,r22
 400b838:	a00b883a 	mov	r5,r20
 400b83c:	da413c15 	stw	r9,1264(sp)
 400b840:	40117600 	call	4011760 <__isinfd>
 400b844:	da413c17 	ldw	r9,1264(sp)
 400b848:	b009883a 	mov	r4,r22
 400b84c:	a00b883a 	mov	r5,r20
 400b850:	10041d26 	beq	r2,zero,400c8c8 <___vfprintf_internal_r+0x1714>
 400b854:	000d883a 	mov	r6,zero
 400b858:	000f883a 	mov	r7,zero
 400b85c:	4009ab40 	call	4009ab4 <__ltdf2>
 400b860:	da413c17 	ldw	r9,1264(sp)
 400b864:	1004da16 	blt	r2,zero,400cbd0 <___vfprintf_internal_r+0x1a1c>
 400b868:	d8812583 	ldbu	r2,1174(sp)
 400b86c:	00c011c4 	movi	r3,71
 400b870:	1c83d116 	blt	r3,r18,400c7b8 <___vfprintf_internal_r+0x1604>
 400b874:	04c101f4 	movhi	r19,1031
 400b878:	9cd53c04 	addi	r19,r19,21744
 400b87c:	00c000c4 	movi	r3,3
 400b880:	d8c12815 	stw	r3,1184(sp)
 400b884:	00ffdfc4 	movi	r3,-129
 400b888:	80e0703a 	and	r16,r16,r3
 400b88c:	d8c12817 	ldw	r3,1184(sp)
 400b890:	d8013115 	stw	zero,1220(sp)
 400b894:	d8c12b15 	stw	r3,1196(sp)
 400b898:	003fd306 	br	400b7e8 <__reset+0xfb00a7e8>
 400b89c:	84000214 	ori	r16,r16,8
 400b8a0:	ac800007 	ldb	r18,0(r21)
 400b8a4:	003e9f06 	br	400b324 <__reset+0xfb00a324>
 400b8a8:	e013883a 	mov	r9,fp
 400b8ac:	84000414 	ori	r16,r16,16
 400b8b0:	1839883a 	mov	fp,r3
 400b8b4:	8080080c 	andi	r2,r16,32
 400b8b8:	10031d26 	beq	r2,zero,400c530 <___vfprintf_internal_r+0x137c>
 400b8bc:	d8812d17 	ldw	r2,1204(sp)
 400b8c0:	0007883a 	mov	r3,zero
 400b8c4:	15c00017 	ldw	r23,0(r2)
 400b8c8:	15800117 	ldw	r22,4(r2)
 400b8cc:	10800204 	addi	r2,r2,8
 400b8d0:	d8812d15 	stw	r2,1204(sp)
 400b8d4:	d8012585 	stb	zero,1174(sp)
 400b8d8:	bd84b03a 	or	r2,r23,r22
 400b8dc:	003fae06 	br	400b798 <__reset+0xfb00a798>
 400b8e0:	e013883a 	mov	r9,fp
 400b8e4:	84000414 	ori	r16,r16,16
 400b8e8:	1839883a 	mov	fp,r3
 400b8ec:	8080080c 	andi	r2,r16,32
 400b8f0:	1002e726 	beq	r2,zero,400c490 <___vfprintf_internal_r+0x12dc>
 400b8f4:	d8c12d17 	ldw	r3,1204(sp)
 400b8f8:	d9012d17 	ldw	r4,1204(sp)
 400b8fc:	1dc00017 	ldw	r23,0(r3)
 400b900:	1d800117 	ldw	r22,4(r3)
 400b904:	21000204 	addi	r4,r4,8
 400b908:	00c00044 	movi	r3,1
 400b90c:	d9012d15 	stw	r4,1204(sp)
 400b910:	bd84b03a 	or	r2,r23,r22
 400b914:	d8012585 	stb	zero,1174(sp)
 400b918:	003f9f06 	br	400b798 <__reset+0xfb00a798>
 400b91c:	e013883a 	mov	r9,fp
 400b920:	1839883a 	mov	fp,r3
 400b924:	00c101f4 	movhi	r3,1031
 400b928:	18d54004 	addi	r3,r3,21760
 400b92c:	d8c13615 	stw	r3,1240(sp)
 400b930:	8080080c 	andi	r2,r16,32
 400b934:	10007726 	beq	r2,zero,400bb14 <___vfprintf_internal_r+0x960>
 400b938:	d9012d17 	ldw	r4,1204(sp)
 400b93c:	25c00017 	ldw	r23,0(r4)
 400b940:	25800117 	ldw	r22,4(r4)
 400b944:	21000204 	addi	r4,r4,8
 400b948:	d9012d15 	stw	r4,1204(sp)
 400b94c:	8080004c 	andi	r2,r16,1
 400b950:	1002c226 	beq	r2,zero,400c45c <___vfprintf_internal_r+0x12a8>
 400b954:	bd84b03a 	or	r2,r23,r22
 400b958:	10035d26 	beq	r2,zero,400c6d0 <___vfprintf_internal_r+0x151c>
 400b95c:	00c00c04 	movi	r3,48
 400b960:	d8c12505 	stb	r3,1172(sp)
 400b964:	dc812545 	stb	r18,1173(sp)
 400b968:	84000094 	ori	r16,r16,2
 400b96c:	00c00084 	movi	r3,2
 400b970:	d8012585 	stb	zero,1174(sp)
 400b974:	003f8806 	br	400b798 <__reset+0xfb00a798>
 400b978:	ac800007 	ldb	r18,0(r21)
 400b97c:	00c00a84 	movi	r3,42
 400b980:	adc00044 	addi	r23,r21,1
 400b984:	90c57526 	beq	r18,r3,400cf5c <___vfprintf_internal_r+0x1da8>
 400b988:	95bff404 	addi	r22,r18,-48
 400b98c:	0009883a 	mov	r4,zero
 400b990:	9d84ff36 	bltu	r19,r22,400cd90 <___vfprintf_internal_r+0x1bdc>
 400b994:	01400284 	movi	r5,10
 400b998:	4009dd80 	call	4009dd8 <__mulsi3>
 400b99c:	bc800007 	ldb	r18,0(r23)
 400b9a0:	b089883a 	add	r4,r22,r2
 400b9a4:	bdc00044 	addi	r23,r23,1
 400b9a8:	95bff404 	addi	r22,r18,-48
 400b9ac:	9dbff92e 	bgeu	r19,r22,400b994 <__reset+0xfb00a994>
 400b9b0:	2007883a 	mov	r3,r4
 400b9b4:	20044316 	blt	r4,zero,400cac4 <___vfprintf_internal_r+0x1910>
 400b9b8:	b82b883a 	mov	r21,r23
 400b9bc:	003e5a06 	br	400b328 <__reset+0xfb00a328>
 400b9c0:	ac800007 	ldb	r18,0(r21)
 400b9c4:	01001b04 	movi	r4,108
 400b9c8:	a805883a 	mov	r2,r21
 400b9cc:	91045526 	beq	r18,r4,400cb24 <___vfprintf_internal_r+0x1970>
 400b9d0:	84000414 	ori	r16,r16,16
 400b9d4:	003e5306 	br	400b324 <__reset+0xfb00a324>
 400b9d8:	8080080c 	andi	r2,r16,32
 400b9dc:	e013883a 	mov	r9,fp
 400b9e0:	10034026 	beq	r2,zero,400c6e4 <___vfprintf_internal_r+0x1530>
 400b9e4:	d9012d17 	ldw	r4,1204(sp)
 400b9e8:	20800017 	ldw	r2,0(r4)
 400b9ec:	d9012c17 	ldw	r4,1200(sp)
 400b9f0:	2007d7fa 	srai	r3,r4,31
 400b9f4:	d9012d17 	ldw	r4,1204(sp)
 400b9f8:	10c00115 	stw	r3,4(r2)
 400b9fc:	21000104 	addi	r4,r4,4
 400ba00:	d9012d15 	stw	r4,1204(sp)
 400ba04:	d9012c17 	ldw	r4,1200(sp)
 400ba08:	11000015 	stw	r4,0(r2)
 400ba0c:	003e1f06 	br	400b28c <__reset+0xfb00a28c>
 400ba10:	d9012d17 	ldw	r4,1204(sp)
 400ba14:	21000017 	ldw	r4,0(r4)
 400ba18:	d9012e15 	stw	r4,1208(sp)
 400ba1c:	d9012d17 	ldw	r4,1204(sp)
 400ba20:	20800104 	addi	r2,r4,4
 400ba24:	d9012e17 	ldw	r4,1208(sp)
 400ba28:	203ee716 	blt	r4,zero,400b5c8 <__reset+0xfb00a5c8>
 400ba2c:	d8812d15 	stw	r2,1204(sp)
 400ba30:	ac800007 	ldb	r18,0(r21)
 400ba34:	003e3b06 	br	400b324 <__reset+0xfb00a324>
 400ba38:	e013883a 	mov	r9,fp
 400ba3c:	1839883a 	mov	fp,r3
 400ba40:	d8c12d17 	ldw	r3,1204(sp)
 400ba44:	00800c04 	movi	r2,48
 400ba48:	010101f4 	movhi	r4,1031
 400ba4c:	21154504 	addi	r4,r4,21780
 400ba50:	1dc00017 	ldw	r23,0(r3)
 400ba54:	18c00104 	addi	r3,r3,4
 400ba58:	d8812505 	stb	r2,1172(sp)
 400ba5c:	00801e04 	movi	r2,120
 400ba60:	d8812545 	stb	r2,1173(sp)
 400ba64:	d8c12d15 	stw	r3,1204(sp)
 400ba68:	002d883a 	mov	r22,zero
 400ba6c:	84000094 	ori	r16,r16,2
 400ba70:	d9013615 	stw	r4,1240(sp)
 400ba74:	00c00084 	movi	r3,2
 400ba78:	04801e04 	movi	r18,120
 400ba7c:	b805883a 	mov	r2,r23
 400ba80:	d8012585 	stb	zero,1174(sp)
 400ba84:	003f4406 	br	400b798 <__reset+0xfb00a798>
 400ba88:	84000814 	ori	r16,r16,32
 400ba8c:	ac800007 	ldb	r18,0(r21)
 400ba90:	003e2406 	br	400b324 <__reset+0xfb00a324>
 400ba94:	d8812d17 	ldw	r2,1204(sp)
 400ba98:	d8012585 	stb	zero,1174(sp)
 400ba9c:	e013883a 	mov	r9,fp
 400baa0:	14c00017 	ldw	r19,0(r2)
 400baa4:	1839883a 	mov	fp,r3
 400baa8:	15c00104 	addi	r23,r2,4
 400baac:	98045526 	beq	r19,zero,400cc04 <___vfprintf_internal_r+0x1a50>
 400bab0:	9809883a 	mov	r4,r19
 400bab4:	18043116 	blt	r3,zero,400cb7c <___vfprintf_internal_r+0x19c8>
 400bab8:	000b883a 	mov	r5,zero
 400babc:	180d883a 	mov	r6,r3
 400bac0:	da413c15 	stw	r9,1264(sp)
 400bac4:	400fce40 	call	400fce4 <memchr>
 400bac8:	da413c17 	ldw	r9,1264(sp)
 400bacc:	10047a26 	beq	r2,zero,400ccb8 <___vfprintf_internal_r+0x1b04>
 400bad0:	14c5c83a 	sub	r2,r2,r19
 400bad4:	d8812b15 	stw	r2,1196(sp)
 400bad8:	e083d40e 	bge	fp,r2,400ca2c <___vfprintf_internal_r+0x1878>
 400badc:	df012815 	stw	fp,1184(sp)
 400bae0:	e004e416 	blt	fp,zero,400ce74 <___vfprintf_internal_r+0x1cc0>
 400bae4:	d8812583 	ldbu	r2,1174(sp)
 400bae8:	df012b15 	stw	fp,1196(sp)
 400baec:	ddc12d15 	stw	r23,1204(sp)
 400baf0:	d8013115 	stw	zero,1220(sp)
 400baf4:	003f3c06 	br	400b7e8 <__reset+0xfb00a7e8>
 400baf8:	008101f4 	movhi	r2,1031
 400bafc:	10954504 	addi	r2,r2,21780
 400bb00:	d8813615 	stw	r2,1240(sp)
 400bb04:	8080080c 	andi	r2,r16,32
 400bb08:	e013883a 	mov	r9,fp
 400bb0c:	1839883a 	mov	fp,r3
 400bb10:	103f891e 	bne	r2,zero,400b938 <__reset+0xfb00a938>
 400bb14:	8080040c 	andi	r2,r16,16
 400bb18:	1002c326 	beq	r2,zero,400c628 <___vfprintf_internal_r+0x1474>
 400bb1c:	d8812d17 	ldw	r2,1204(sp)
 400bb20:	002d883a 	mov	r22,zero
 400bb24:	15c00017 	ldw	r23,0(r2)
 400bb28:	10800104 	addi	r2,r2,4
 400bb2c:	d8812d15 	stw	r2,1204(sp)
 400bb30:	003f8606 	br	400b94c <__reset+0xfb00a94c>
 400bb34:	84001014 	ori	r16,r16,64
 400bb38:	ac800007 	ldb	r18,0(r21)
 400bb3c:	003df906 	br	400b324 <__reset+0xfb00a324>
 400bb40:	d8812587 	ldb	r2,1174(sp)
 400bb44:	1002e51e 	bne	r2,zero,400c6dc <___vfprintf_internal_r+0x1528>
 400bb48:	00800804 	movi	r2,32
 400bb4c:	d8812585 	stb	r2,1174(sp)
 400bb50:	ac800007 	ldb	r18,0(r21)
 400bb54:	003df306 	br	400b324 <__reset+0xfb00a324>
 400bb58:	84000054 	ori	r16,r16,1
 400bb5c:	ac800007 	ldb	r18,0(r21)
 400bb60:	003df006 	br	400b324 <__reset+0xfb00a324>
 400bb64:	84002014 	ori	r16,r16,128
 400bb68:	ac800007 	ldb	r18,0(r21)
 400bb6c:	003ded06 	br	400b324 <__reset+0xfb00a324>
 400bb70:	0009883a 	mov	r4,zero
 400bb74:	95bff404 	addi	r22,r18,-48
 400bb78:	182f883a 	mov	r23,r3
 400bb7c:	01400284 	movi	r5,10
 400bb80:	4009dd80 	call	4009dd8 <__mulsi3>
 400bb84:	ac800007 	ldb	r18,0(r21)
 400bb88:	1589883a 	add	r4,r2,r22
 400bb8c:	ad400044 	addi	r21,r21,1
 400bb90:	95bff404 	addi	r22,r18,-48
 400bb94:	9dbff92e 	bgeu	r19,r22,400bb7c <__reset+0xfb00ab7c>
 400bb98:	b807883a 	mov	r3,r23
 400bb9c:	d9012e15 	stw	r4,1208(sp)
 400bba0:	003de106 	br	400b328 <__reset+0xfb00a328>
 400bba4:	00800ac4 	movi	r2,43
 400bba8:	d8812585 	stb	r2,1174(sp)
 400bbac:	ac800007 	ldb	r18,0(r21)
 400bbb0:	003ddc06 	br	400b324 <__reset+0xfb00a324>
 400bbb4:	d8c12d17 	ldw	r3,1204(sp)
 400bbb8:	d9012d17 	ldw	r4,1204(sp)
 400bbbc:	e013883a 	mov	r9,fp
 400bbc0:	18800017 	ldw	r2,0(r3)
 400bbc4:	21000104 	addi	r4,r4,4
 400bbc8:	00c00044 	movi	r3,1
 400bbcc:	d8c12815 	stw	r3,1184(sp)
 400bbd0:	d8012585 	stb	zero,1174(sp)
 400bbd4:	d8810405 	stb	r2,1040(sp)
 400bbd8:	d9012d15 	stw	r4,1204(sp)
 400bbdc:	d8c12b15 	stw	r3,1196(sp)
 400bbe0:	dcc10404 	addi	r19,sp,1040
 400bbe4:	003dda06 	br	400b350 <__reset+0xfb00a350>
 400bbe8:	e013883a 	mov	r9,fp
 400bbec:	1839883a 	mov	fp,r3
 400bbf0:	003ed806 	br	400b754 <__reset+0xfb00a754>
 400bbf4:	e013883a 	mov	r9,fp
 400bbf8:	1839883a 	mov	fp,r3
 400bbfc:	003f2d06 	br	400b8b4 <__reset+0xfb00a8b4>
 400bc00:	e013883a 	mov	r9,fp
 400bc04:	1839883a 	mov	fp,r3
 400bc08:	003f3806 	br	400b8ec <__reset+0xfb00a8ec>
 400bc0c:	da011d17 	ldw	r8,1140(sp)
 400bc10:	d8c11c17 	ldw	r3,1136(sp)
 400bc14:	d8812587 	ldb	r2,1174(sp)
 400bc18:	10000b26 	beq	r2,zero,400bc48 <___vfprintf_internal_r+0xa94>
 400bc1c:	d8812584 	addi	r2,sp,1174
 400bc20:	48800015 	stw	r2,0(r9)
 400bc24:	00800044 	movi	r2,1
 400bc28:	48800115 	stw	r2,4(r9)
 400bc2c:	4091883a 	add	r8,r8,r2
 400bc30:	1887883a 	add	r3,r3,r2
 400bc34:	da011d15 	stw	r8,1140(sp)
 400bc38:	d8c11c15 	stw	r3,1136(sp)
 400bc3c:	008001c4 	movi	r2,7
 400bc40:	10c18e16 	blt	r2,r3,400c27c <___vfprintf_internal_r+0x10c8>
 400bc44:	4a400204 	addi	r9,r9,8
 400bc48:	d9012a17 	ldw	r4,1192(sp)
 400bc4c:	20000b26 	beq	r4,zero,400bc7c <___vfprintf_internal_r+0xac8>
 400bc50:	d8812504 	addi	r2,sp,1172
 400bc54:	48800015 	stw	r2,0(r9)
 400bc58:	00800084 	movi	r2,2
 400bc5c:	48800115 	stw	r2,4(r9)
 400bc60:	4091883a 	add	r8,r8,r2
 400bc64:	18c00044 	addi	r3,r3,1
 400bc68:	da011d15 	stw	r8,1140(sp)
 400bc6c:	d8c11c15 	stw	r3,1136(sp)
 400bc70:	008001c4 	movi	r2,7
 400bc74:	10c17816 	blt	r2,r3,400c258 <___vfprintf_internal_r+0x10a4>
 400bc78:	4a400204 	addi	r9,r9,8
 400bc7c:	d9012f17 	ldw	r4,1212(sp)
 400bc80:	00802004 	movi	r2,128
 400bc84:	2080fc26 	beq	r4,r2,400c078 <___vfprintf_internal_r+0xec4>
 400bc88:	d8813117 	ldw	r2,1220(sp)
 400bc8c:	d9012b17 	ldw	r4,1196(sp)
 400bc90:	112fc83a 	sub	r23,r2,r4
 400bc94:	05c02a0e 	bge	zero,r23,400bd40 <___vfprintf_internal_r+0xb8c>
 400bc98:	07000404 	movi	fp,16
 400bc9c:	050101f4 	movhi	r20,1031
 400bca0:	a5155084 	addi	r20,r20,21826
 400bca4:	e5c01d0e 	bge	fp,r23,400bd1c <___vfprintf_internal_r+0xb68>
 400bca8:	dc812a15 	stw	r18,1192(sp)
 400bcac:	058001c4 	movi	r22,7
 400bcb0:	a025883a 	mov	r18,r20
 400bcb4:	8029883a 	mov	r20,r16
 400bcb8:	dc012917 	ldw	r16,1188(sp)
 400bcbc:	00000306 	br	400bccc <___vfprintf_internal_r+0xb18>
 400bcc0:	bdfffc04 	addi	r23,r23,-16
 400bcc4:	4a400204 	addi	r9,r9,8
 400bcc8:	e5c0110e 	bge	fp,r23,400bd10 <___vfprintf_internal_r+0xb5c>
 400bccc:	4c800015 	stw	r18,0(r9)
 400bcd0:	4f000115 	stw	fp,4(r9)
 400bcd4:	42000404 	addi	r8,r8,16
 400bcd8:	18c00044 	addi	r3,r3,1
 400bcdc:	da011d15 	stw	r8,1140(sp)
 400bce0:	d8c11c15 	stw	r3,1136(sp)
 400bce4:	b0fff60e 	bge	r22,r3,400bcc0 <__reset+0xfb00acc0>
 400bce8:	8809883a 	mov	r4,r17
 400bcec:	800b883a 	mov	r5,r16
 400bcf0:	d9811b04 	addi	r6,sp,1132
 400bcf4:	400b1800 	call	400b180 <__sprint_r>
 400bcf8:	103e741e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400bcfc:	bdfffc04 	addi	r23,r23,-16
 400bd00:	da011d17 	ldw	r8,1140(sp)
 400bd04:	d8c11c17 	ldw	r3,1136(sp)
 400bd08:	da400404 	addi	r9,sp,16
 400bd0c:	e5ffef16 	blt	fp,r23,400bccc <__reset+0xfb00accc>
 400bd10:	a021883a 	mov	r16,r20
 400bd14:	9029883a 	mov	r20,r18
 400bd18:	dc812a17 	ldw	r18,1192(sp)
 400bd1c:	4d000015 	stw	r20,0(r9)
 400bd20:	4dc00115 	stw	r23,4(r9)
 400bd24:	45d1883a 	add	r8,r8,r23
 400bd28:	18c00044 	addi	r3,r3,1
 400bd2c:	da011d15 	stw	r8,1140(sp)
 400bd30:	d8c11c15 	stw	r3,1136(sp)
 400bd34:	008001c4 	movi	r2,7
 400bd38:	10c13e16 	blt	r2,r3,400c234 <___vfprintf_internal_r+0x1080>
 400bd3c:	4a400204 	addi	r9,r9,8
 400bd40:	8080400c 	andi	r2,r16,256
 400bd44:	1000831e 	bne	r2,zero,400bf54 <___vfprintf_internal_r+0xda0>
 400bd48:	d8812b17 	ldw	r2,1196(sp)
 400bd4c:	4cc00015 	stw	r19,0(r9)
 400bd50:	48800115 	stw	r2,4(r9)
 400bd54:	4091883a 	add	r8,r8,r2
 400bd58:	18c00044 	addi	r3,r3,1
 400bd5c:	da011d15 	stw	r8,1140(sp)
 400bd60:	d8c11c15 	stw	r3,1136(sp)
 400bd64:	008001c4 	movi	r2,7
 400bd68:	10c05316 	blt	r2,r3,400beb8 <___vfprintf_internal_r+0xd04>
 400bd6c:	4a400204 	addi	r9,r9,8
 400bd70:	8400010c 	andi	r16,r16,4
 400bd74:	80002e26 	beq	r16,zero,400be30 <___vfprintf_internal_r+0xc7c>
 400bd78:	d8812e17 	ldw	r2,1208(sp)
 400bd7c:	d8c12817 	ldw	r3,1184(sp)
 400bd80:	10e1c83a 	sub	r16,r2,r3
 400bd84:	04002a0e 	bge	zero,r16,400be30 <___vfprintf_internal_r+0xc7c>
 400bd88:	04800404 	movi	r18,16
 400bd8c:	d8c11c17 	ldw	r3,1136(sp)
 400bd90:	05c101f4 	movhi	r23,1031
 400bd94:	bdd54c84 	addi	r23,r23,21810
 400bd98:	9400170e 	bge	r18,r16,400bdf8 <___vfprintf_internal_r+0xc44>
 400bd9c:	04c001c4 	movi	r19,7
 400bda0:	dd012917 	ldw	r20,1188(sp)
 400bda4:	00000306 	br	400bdb4 <___vfprintf_internal_r+0xc00>
 400bda8:	843ffc04 	addi	r16,r16,-16
 400bdac:	4a400204 	addi	r9,r9,8
 400bdb0:	9400110e 	bge	r18,r16,400bdf8 <___vfprintf_internal_r+0xc44>
 400bdb4:	4dc00015 	stw	r23,0(r9)
 400bdb8:	4c800115 	stw	r18,4(r9)
 400bdbc:	42000404 	addi	r8,r8,16
 400bdc0:	18c00044 	addi	r3,r3,1
 400bdc4:	da011d15 	stw	r8,1140(sp)
 400bdc8:	d8c11c15 	stw	r3,1136(sp)
 400bdcc:	98fff60e 	bge	r19,r3,400bda8 <__reset+0xfb00ada8>
 400bdd0:	8809883a 	mov	r4,r17
 400bdd4:	a00b883a 	mov	r5,r20
 400bdd8:	d9811b04 	addi	r6,sp,1132
 400bddc:	400b1800 	call	400b180 <__sprint_r>
 400bde0:	103e3a1e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400bde4:	843ffc04 	addi	r16,r16,-16
 400bde8:	da011d17 	ldw	r8,1140(sp)
 400bdec:	d8c11c17 	ldw	r3,1136(sp)
 400bdf0:	da400404 	addi	r9,sp,16
 400bdf4:	943fef16 	blt	r18,r16,400bdb4 <__reset+0xfb00adb4>
 400bdf8:	4dc00015 	stw	r23,0(r9)
 400bdfc:	4c000115 	stw	r16,4(r9)
 400be00:	8211883a 	add	r8,r16,r8
 400be04:	18c00044 	addi	r3,r3,1
 400be08:	da011d15 	stw	r8,1140(sp)
 400be0c:	d8c11c15 	stw	r3,1136(sp)
 400be10:	008001c4 	movi	r2,7
 400be14:	10c0060e 	bge	r2,r3,400be30 <___vfprintf_internal_r+0xc7c>
 400be18:	d9412917 	ldw	r5,1188(sp)
 400be1c:	8809883a 	mov	r4,r17
 400be20:	d9811b04 	addi	r6,sp,1132
 400be24:	400b1800 	call	400b180 <__sprint_r>
 400be28:	103e281e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400be2c:	da011d17 	ldw	r8,1140(sp)
 400be30:	dd012817 	ldw	r20,1184(sp)
 400be34:	d9012e17 	ldw	r4,1208(sp)
 400be38:	a100010e 	bge	r20,r4,400be40 <___vfprintf_internal_r+0xc8c>
 400be3c:	2029883a 	mov	r20,r4
 400be40:	d8812c17 	ldw	r2,1200(sp)
 400be44:	1505883a 	add	r2,r2,r20
 400be48:	d8812c15 	stw	r2,1200(sp)
 400be4c:	4000b91e 	bne	r8,zero,400c134 <___vfprintf_internal_r+0xf80>
 400be50:	d8011c15 	stw	zero,1136(sp)
 400be54:	a8800007 	ldb	r2,0(r21)
 400be58:	da400404 	addi	r9,sp,16
 400be5c:	103d0d1e 	bne	r2,zero,400b294 <__reset+0xfb00a294>
 400be60:	a825883a 	mov	r18,r21
 400be64:	003d2306 	br	400b2f4 <__reset+0xfb00a2f4>
 400be68:	d9412917 	ldw	r5,1188(sp)
 400be6c:	8809883a 	mov	r4,r17
 400be70:	d9811b04 	addi	r6,sp,1132
 400be74:	400b1800 	call	400b180 <__sprint_r>
 400be78:	103e141e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400be7c:	da011d17 	ldw	r8,1140(sp)
 400be80:	da400404 	addi	r9,sp,16
 400be84:	8080004c 	andi	r2,r16,1
 400be88:	103fb926 	beq	r2,zero,400bd70 <__reset+0xfb00ad70>
 400be8c:	d8c11c17 	ldw	r3,1136(sp)
 400be90:	d9013717 	ldw	r4,1244(sp)
 400be94:	00800044 	movi	r2,1
 400be98:	48800115 	stw	r2,4(r9)
 400be9c:	49000015 	stw	r4,0(r9)
 400bea0:	4091883a 	add	r8,r8,r2
 400bea4:	1887883a 	add	r3,r3,r2
 400bea8:	da011d15 	stw	r8,1140(sp)
 400beac:	d8c11c15 	stw	r3,1136(sp)
 400beb0:	008001c4 	movi	r2,7
 400beb4:	10ffad0e 	bge	r2,r3,400bd6c <__reset+0xfb00ad6c>
 400beb8:	d9412917 	ldw	r5,1188(sp)
 400bebc:	8809883a 	mov	r4,r17
 400bec0:	d9811b04 	addi	r6,sp,1132
 400bec4:	400b1800 	call	400b180 <__sprint_r>
 400bec8:	103e001e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400becc:	da400404 	addi	r9,sp,16
 400bed0:	da011d17 	ldw	r8,1140(sp)
 400bed4:	003fa606 	br	400bd70 <__reset+0xfb00ad70>
 400bed8:	18803fcc 	andi	r2,r3,255
 400bedc:	00c00044 	movi	r3,1
 400bee0:	10c10126 	beq	r2,r3,400c2e8 <___vfprintf_internal_r+0x1134>
 400bee4:	00c00084 	movi	r3,2
 400bee8:	10c0ed26 	beq	r2,r3,400c2a0 <___vfprintf_internal_r+0x10ec>
 400beec:	d8c10dc4 	addi	r3,sp,1079
 400bef0:	b808d0fa 	srli	r4,r23,3
 400bef4:	b00a977a 	slli	r5,r22,29
 400bef8:	b02cd0fa 	srli	r22,r22,3
 400befc:	bdc001cc 	andi	r23,r23,7
 400bf00:	b8800c04 	addi	r2,r23,48
 400bf04:	292eb03a 	or	r23,r5,r4
 400bf08:	18800005 	stb	r2,0(r3)
 400bf0c:	bd88b03a 	or	r4,r23,r22
 400bf10:	1827883a 	mov	r19,r3
 400bf14:	18ffffc4 	addi	r3,r3,-1
 400bf18:	203ff51e 	bne	r4,zero,400bef0 <__reset+0xfb00aef0>
 400bf1c:	8100004c 	andi	r4,r16,1
 400bf20:	980b883a 	mov	r5,r19
 400bf24:	20000726 	beq	r4,zero,400bf44 <___vfprintf_internal_r+0xd90>
 400bf28:	10803fcc 	andi	r2,r2,255
 400bf2c:	1080201c 	xori	r2,r2,128
 400bf30:	10bfe004 	addi	r2,r2,-128
 400bf34:	01000c04 	movi	r4,48
 400bf38:	11000226 	beq	r2,r4,400bf44 <___vfprintf_internal_r+0xd90>
 400bf3c:	1827883a 	mov	r19,r3
 400bf40:	293fffc5 	stb	r4,-1(r5)
 400bf44:	d8812717 	ldw	r2,1180(sp)
 400bf48:	14c5c83a 	sub	r2,r2,r19
 400bf4c:	d8812b15 	stw	r2,1196(sp)
 400bf50:	003e1f06 	br	400b7d0 <__reset+0xfb00a7d0>
 400bf54:	00801944 	movi	r2,101
 400bf58:	14807c0e 	bge	r2,r18,400c14c <___vfprintf_internal_r+0xf98>
 400bf5c:	d9013317 	ldw	r4,1228(sp)
 400bf60:	d9413417 	ldw	r5,1232(sp)
 400bf64:	000d883a 	mov	r6,zero
 400bf68:	000f883a 	mov	r7,zero
 400bf6c:	d8c13b15 	stw	r3,1260(sp)
 400bf70:	da013a15 	stw	r8,1256(sp)
 400bf74:	da413c15 	stw	r9,1264(sp)
 400bf78:	4012c380 	call	4012c38 <__nedf2>
 400bf7c:	d8c13b17 	ldw	r3,1260(sp)
 400bf80:	da013a17 	ldw	r8,1256(sp)
 400bf84:	da413c17 	ldw	r9,1264(sp)
 400bf88:	1001001e 	bne	r2,zero,400c38c <___vfprintf_internal_r+0x11d8>
 400bf8c:	008101f4 	movhi	r2,1031
 400bf90:	10954c04 	addi	r2,r2,21808
 400bf94:	48800015 	stw	r2,0(r9)
 400bf98:	00800044 	movi	r2,1
 400bf9c:	48800115 	stw	r2,4(r9)
 400bfa0:	4091883a 	add	r8,r8,r2
 400bfa4:	1887883a 	add	r3,r3,r2
 400bfa8:	da011d15 	stw	r8,1140(sp)
 400bfac:	d8c11c15 	stw	r3,1136(sp)
 400bfb0:	008001c4 	movi	r2,7
 400bfb4:	10c20316 	blt	r2,r3,400c7c4 <___vfprintf_internal_r+0x1610>
 400bfb8:	4a400204 	addi	r9,r9,8
 400bfbc:	d8812417 	ldw	r2,1168(sp)
 400bfc0:	d8c13217 	ldw	r3,1224(sp)
 400bfc4:	10c00216 	blt	r2,r3,400bfd0 <___vfprintf_internal_r+0xe1c>
 400bfc8:	8080004c 	andi	r2,r16,1
 400bfcc:	103f6826 	beq	r2,zero,400bd70 <__reset+0xfb00ad70>
 400bfd0:	d8c11c17 	ldw	r3,1136(sp)
 400bfd4:	d9013717 	ldw	r4,1244(sp)
 400bfd8:	00800044 	movi	r2,1
 400bfdc:	48800115 	stw	r2,4(r9)
 400bfe0:	49000015 	stw	r4,0(r9)
 400bfe4:	4091883a 	add	r8,r8,r2
 400bfe8:	1887883a 	add	r3,r3,r2
 400bfec:	da011d15 	stw	r8,1140(sp)
 400bff0:	d8c11c15 	stw	r3,1136(sp)
 400bff4:	008001c4 	movi	r2,7
 400bff8:	10c2ce16 	blt	r2,r3,400cb34 <___vfprintf_internal_r+0x1980>
 400bffc:	4a400204 	addi	r9,r9,8
 400c000:	d8813217 	ldw	r2,1224(sp)
 400c004:	14bfffc4 	addi	r18,r2,-1
 400c008:	04bf590e 	bge	zero,r18,400bd70 <__reset+0xfb00ad70>
 400c00c:	04c00404 	movi	r19,16
 400c010:	d8c11c17 	ldw	r3,1136(sp)
 400c014:	050101f4 	movhi	r20,1031
 400c018:	a5155084 	addi	r20,r20,21826
 400c01c:	9c818a0e 	bge	r19,r18,400c648 <___vfprintf_internal_r+0x1494>
 400c020:	058001c4 	movi	r22,7
 400c024:	ddc12917 	ldw	r23,1188(sp)
 400c028:	00000306 	br	400c038 <___vfprintf_internal_r+0xe84>
 400c02c:	4a400204 	addi	r9,r9,8
 400c030:	94bffc04 	addi	r18,r18,-16
 400c034:	9c81840e 	bge	r19,r18,400c648 <___vfprintf_internal_r+0x1494>
 400c038:	4d000015 	stw	r20,0(r9)
 400c03c:	4cc00115 	stw	r19,4(r9)
 400c040:	42000404 	addi	r8,r8,16
 400c044:	18c00044 	addi	r3,r3,1
 400c048:	da011d15 	stw	r8,1140(sp)
 400c04c:	d8c11c15 	stw	r3,1136(sp)
 400c050:	b0fff60e 	bge	r22,r3,400c02c <__reset+0xfb00b02c>
 400c054:	8809883a 	mov	r4,r17
 400c058:	b80b883a 	mov	r5,r23
 400c05c:	d9811b04 	addi	r6,sp,1132
 400c060:	400b1800 	call	400b180 <__sprint_r>
 400c064:	103d991e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c068:	da011d17 	ldw	r8,1140(sp)
 400c06c:	d8c11c17 	ldw	r3,1136(sp)
 400c070:	da400404 	addi	r9,sp,16
 400c074:	003fee06 	br	400c030 <__reset+0xfb00b030>
 400c078:	d8812e17 	ldw	r2,1208(sp)
 400c07c:	d9012817 	ldw	r4,1184(sp)
 400c080:	112fc83a 	sub	r23,r2,r4
 400c084:	05ff000e 	bge	zero,r23,400bc88 <__reset+0xfb00ac88>
 400c088:	07000404 	movi	fp,16
 400c08c:	050101f4 	movhi	r20,1031
 400c090:	a5155084 	addi	r20,r20,21826
 400c094:	e5c01d0e 	bge	fp,r23,400c10c <___vfprintf_internal_r+0xf58>
 400c098:	dc812a15 	stw	r18,1192(sp)
 400c09c:	058001c4 	movi	r22,7
 400c0a0:	a025883a 	mov	r18,r20
 400c0a4:	8029883a 	mov	r20,r16
 400c0a8:	dc012917 	ldw	r16,1188(sp)
 400c0ac:	00000306 	br	400c0bc <___vfprintf_internal_r+0xf08>
 400c0b0:	bdfffc04 	addi	r23,r23,-16
 400c0b4:	4a400204 	addi	r9,r9,8
 400c0b8:	e5c0110e 	bge	fp,r23,400c100 <___vfprintf_internal_r+0xf4c>
 400c0bc:	4c800015 	stw	r18,0(r9)
 400c0c0:	4f000115 	stw	fp,4(r9)
 400c0c4:	42000404 	addi	r8,r8,16
 400c0c8:	18c00044 	addi	r3,r3,1
 400c0cc:	da011d15 	stw	r8,1140(sp)
 400c0d0:	d8c11c15 	stw	r3,1136(sp)
 400c0d4:	b0fff60e 	bge	r22,r3,400c0b0 <__reset+0xfb00b0b0>
 400c0d8:	8809883a 	mov	r4,r17
 400c0dc:	800b883a 	mov	r5,r16
 400c0e0:	d9811b04 	addi	r6,sp,1132
 400c0e4:	400b1800 	call	400b180 <__sprint_r>
 400c0e8:	103d781e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c0ec:	bdfffc04 	addi	r23,r23,-16
 400c0f0:	da011d17 	ldw	r8,1140(sp)
 400c0f4:	d8c11c17 	ldw	r3,1136(sp)
 400c0f8:	da400404 	addi	r9,sp,16
 400c0fc:	e5ffef16 	blt	fp,r23,400c0bc <__reset+0xfb00b0bc>
 400c100:	a021883a 	mov	r16,r20
 400c104:	9029883a 	mov	r20,r18
 400c108:	dc812a17 	ldw	r18,1192(sp)
 400c10c:	4d000015 	stw	r20,0(r9)
 400c110:	4dc00115 	stw	r23,4(r9)
 400c114:	45d1883a 	add	r8,r8,r23
 400c118:	18c00044 	addi	r3,r3,1
 400c11c:	da011d15 	stw	r8,1140(sp)
 400c120:	d8c11c15 	stw	r3,1136(sp)
 400c124:	008001c4 	movi	r2,7
 400c128:	10c13616 	blt	r2,r3,400c604 <___vfprintf_internal_r+0x1450>
 400c12c:	4a400204 	addi	r9,r9,8
 400c130:	003ed506 	br	400bc88 <__reset+0xfb00ac88>
 400c134:	d9412917 	ldw	r5,1188(sp)
 400c138:	8809883a 	mov	r4,r17
 400c13c:	d9811b04 	addi	r6,sp,1132
 400c140:	400b1800 	call	400b180 <__sprint_r>
 400c144:	103f4226 	beq	r2,zero,400be50 <__reset+0xfb00ae50>
 400c148:	003d6006 	br	400b6cc <__reset+0xfb00a6cc>
 400c14c:	d9013217 	ldw	r4,1224(sp)
 400c150:	00800044 	movi	r2,1
 400c154:	4cc00015 	stw	r19,0(r9)
 400c158:	1101000e 	bge	r2,r4,400c55c <___vfprintf_internal_r+0x13a8>
 400c15c:	00800044 	movi	r2,1
 400c160:	48800115 	stw	r2,4(r9)
 400c164:	4091883a 	add	r8,r8,r2
 400c168:	1887883a 	add	r3,r3,r2
 400c16c:	da011d15 	stw	r8,1140(sp)
 400c170:	d8c11c15 	stw	r3,1136(sp)
 400c174:	008001c4 	movi	r2,7
 400c178:	10c10c16 	blt	r2,r3,400c5ac <___vfprintf_internal_r+0x13f8>
 400c17c:	4a400204 	addi	r9,r9,8
 400c180:	d8813717 	ldw	r2,1244(sp)
 400c184:	48800015 	stw	r2,0(r9)
 400c188:	00800044 	movi	r2,1
 400c18c:	48800115 	stw	r2,4(r9)
 400c190:	4091883a 	add	r8,r8,r2
 400c194:	1887883a 	add	r3,r3,r2
 400c198:	da011d15 	stw	r8,1140(sp)
 400c19c:	d8c11c15 	stw	r3,1136(sp)
 400c1a0:	008001c4 	movi	r2,7
 400c1a4:	10c10a16 	blt	r2,r3,400c5d0 <___vfprintf_internal_r+0x141c>
 400c1a8:	4c800204 	addi	r18,r9,8
 400c1ac:	d9013317 	ldw	r4,1228(sp)
 400c1b0:	d9413417 	ldw	r5,1232(sp)
 400c1b4:	000d883a 	mov	r6,zero
 400c1b8:	000f883a 	mov	r7,zero
 400c1bc:	d8c13b15 	stw	r3,1260(sp)
 400c1c0:	da013a15 	stw	r8,1256(sp)
 400c1c4:	4012bdc0 	call	4012bdc <__eqdf2>
 400c1c8:	d8c13b17 	ldw	r3,1260(sp)
 400c1cc:	da013a17 	ldw	r8,1256(sp)
 400c1d0:	1000ba26 	beq	r2,zero,400c4bc <___vfprintf_internal_r+0x1308>
 400c1d4:	d9013217 	ldw	r4,1224(sp)
 400c1d8:	9cc00044 	addi	r19,r19,1
 400c1dc:	94c00015 	stw	r19,0(r18)
 400c1e0:	20bfffc4 	addi	r2,r4,-1
 400c1e4:	90800115 	stw	r2,4(r18)
 400c1e8:	4091883a 	add	r8,r8,r2
 400c1ec:	18c00044 	addi	r3,r3,1
 400c1f0:	da011d15 	stw	r8,1140(sp)
 400c1f4:	d8c11c15 	stw	r3,1136(sp)
 400c1f8:	008001c4 	movi	r2,7
 400c1fc:	10c0e216 	blt	r2,r3,400c588 <___vfprintf_internal_r+0x13d4>
 400c200:	94800204 	addi	r18,r18,8
 400c204:	d9013517 	ldw	r4,1236(sp)
 400c208:	d8811fc4 	addi	r2,sp,1151
 400c20c:	90800015 	stw	r2,0(r18)
 400c210:	91000115 	stw	r4,4(r18)
 400c214:	4111883a 	add	r8,r8,r4
 400c218:	18c00044 	addi	r3,r3,1
 400c21c:	da011d15 	stw	r8,1140(sp)
 400c220:	d8c11c15 	stw	r3,1136(sp)
 400c224:	008001c4 	movi	r2,7
 400c228:	10ff2316 	blt	r2,r3,400beb8 <__reset+0xfb00aeb8>
 400c22c:	92400204 	addi	r9,r18,8
 400c230:	003ecf06 	br	400bd70 <__reset+0xfb00ad70>
 400c234:	d9412917 	ldw	r5,1188(sp)
 400c238:	8809883a 	mov	r4,r17
 400c23c:	d9811b04 	addi	r6,sp,1132
 400c240:	400b1800 	call	400b180 <__sprint_r>
 400c244:	103d211e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c248:	da011d17 	ldw	r8,1140(sp)
 400c24c:	d8c11c17 	ldw	r3,1136(sp)
 400c250:	da400404 	addi	r9,sp,16
 400c254:	003eba06 	br	400bd40 <__reset+0xfb00ad40>
 400c258:	d9412917 	ldw	r5,1188(sp)
 400c25c:	8809883a 	mov	r4,r17
 400c260:	d9811b04 	addi	r6,sp,1132
 400c264:	400b1800 	call	400b180 <__sprint_r>
 400c268:	103d181e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c26c:	da011d17 	ldw	r8,1140(sp)
 400c270:	d8c11c17 	ldw	r3,1136(sp)
 400c274:	da400404 	addi	r9,sp,16
 400c278:	003e8006 	br	400bc7c <__reset+0xfb00ac7c>
 400c27c:	d9412917 	ldw	r5,1188(sp)
 400c280:	8809883a 	mov	r4,r17
 400c284:	d9811b04 	addi	r6,sp,1132
 400c288:	400b1800 	call	400b180 <__sprint_r>
 400c28c:	103d0f1e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c290:	da011d17 	ldw	r8,1140(sp)
 400c294:	d8c11c17 	ldw	r3,1136(sp)
 400c298:	da400404 	addi	r9,sp,16
 400c29c:	003e6a06 	br	400bc48 <__reset+0xfb00ac48>
 400c2a0:	d9413617 	ldw	r5,1240(sp)
 400c2a4:	d8810dc4 	addi	r2,sp,1079
 400c2a8:	b8c003cc 	andi	r3,r23,15
 400c2ac:	b008973a 	slli	r4,r22,28
 400c2b0:	28c7883a 	add	r3,r5,r3
 400c2b4:	b82ed13a 	srli	r23,r23,4
 400c2b8:	18c00003 	ldbu	r3,0(r3)
 400c2bc:	b02cd13a 	srli	r22,r22,4
 400c2c0:	25eeb03a 	or	r23,r4,r23
 400c2c4:	10c00005 	stb	r3,0(r2)
 400c2c8:	bd86b03a 	or	r3,r23,r22
 400c2cc:	1027883a 	mov	r19,r2
 400c2d0:	10bfffc4 	addi	r2,r2,-1
 400c2d4:	183ff41e 	bne	r3,zero,400c2a8 <__reset+0xfb00b2a8>
 400c2d8:	003f1a06 	br	400bf44 <__reset+0xfb00af44>
 400c2dc:	d8012b15 	stw	zero,1196(sp)
 400c2e0:	dcc10e04 	addi	r19,sp,1080
 400c2e4:	003d3a06 	br	400b7d0 <__reset+0xfb00a7d0>
 400c2e8:	b0025426 	beq	r22,zero,400cc3c <___vfprintf_internal_r+0x1a88>
 400c2ec:	b807883a 	mov	r3,r23
 400c2f0:	d8810dc4 	addi	r2,sp,1079
 400c2f4:	882f883a 	mov	r23,r17
 400c2f8:	04c00244 	movi	r19,9
 400c2fc:	8023883a 	mov	r17,r16
 400c300:	da412815 	stw	r9,1184(sp)
 400c304:	1821883a 	mov	r16,r3
 400c308:	8009883a 	mov	r4,r16
 400c30c:	b00b883a 	mov	r5,r22
 400c310:	01800284 	movi	r6,10
 400c314:	000f883a 	mov	r7,zero
 400c318:	1029883a 	mov	r20,r2
 400c31c:	40125b40 	call	40125b4 <__umoddi3>
 400c320:	10800c04 	addi	r2,r2,48
 400c324:	8009883a 	mov	r4,r16
 400c328:	b00b883a 	mov	r5,r22
 400c32c:	a0800005 	stb	r2,0(r20)
 400c330:	01800284 	movi	r6,10
 400c334:	000f883a 	mov	r7,zero
 400c338:	4011f640 	call	4011f64 <__udivdi3>
 400c33c:	1021883a 	mov	r16,r2
 400c340:	182d883a 	mov	r22,r3
 400c344:	a0bfffc4 	addi	r2,r20,-1
 400c348:	183fef1e 	bne	r3,zero,400c308 <__reset+0xfb00b308>
 400c34c:	9c3fee36 	bltu	r19,r16,400c308 <__reset+0xfb00b308>
 400c350:	da412817 	ldw	r9,1184(sp)
 400c354:	8005883a 	mov	r2,r16
 400c358:	8821883a 	mov	r16,r17
 400c35c:	b823883a 	mov	r17,r23
 400c360:	102f883a 	mov	r23,r2
 400c364:	d8812717 	ldw	r2,1180(sp)
 400c368:	a4ffffc4 	addi	r19,r20,-1
 400c36c:	bdc00c04 	addi	r23,r23,48
 400c370:	14c5c83a 	sub	r2,r2,r19
 400c374:	a5ffffc5 	stb	r23,-1(r20)
 400c378:	d8812b15 	stw	r2,1196(sp)
 400c37c:	003d1406 	br	400b7d0 <__reset+0xfb00a7d0>
 400c380:	00c00044 	movi	r3,1
 400c384:	bd84b03a 	or	r2,r23,r22
 400c388:	003d0306 	br	400b798 <__reset+0xfb00a798>
 400c38c:	dc812417 	ldw	r18,1168(sp)
 400c390:	0481140e 	bge	zero,r18,400c7e4 <___vfprintf_internal_r+0x1630>
 400c394:	d9013217 	ldw	r4,1224(sp)
 400c398:	4cc00015 	stw	r19,0(r9)
 400c39c:	9100ec16 	blt	r18,r4,400c750 <___vfprintf_internal_r+0x159c>
 400c3a0:	49000115 	stw	r4,4(r9)
 400c3a4:	4111883a 	add	r8,r8,r4
 400c3a8:	18c00044 	addi	r3,r3,1
 400c3ac:	da011d15 	stw	r8,1140(sp)
 400c3b0:	d8c11c15 	stw	r3,1136(sp)
 400c3b4:	008001c4 	movi	r2,7
 400c3b8:	10c23616 	blt	r2,r3,400cc94 <___vfprintf_internal_r+0x1ae0>
 400c3bc:	4a400204 	addi	r9,r9,8
 400c3c0:	d8813217 	ldw	r2,1224(sp)
 400c3c4:	90a5c83a 	sub	r18,r18,r2
 400c3c8:	04beae0e 	bge	zero,r18,400be84 <__reset+0xfb00ae84>
 400c3cc:	04c00404 	movi	r19,16
 400c3d0:	d8c11c17 	ldw	r3,1136(sp)
 400c3d4:	050101f4 	movhi	r20,1031
 400c3d8:	a5155084 	addi	r20,r20,21826
 400c3dc:	9c81dd0e 	bge	r19,r18,400cb54 <___vfprintf_internal_r+0x19a0>
 400c3e0:	058001c4 	movi	r22,7
 400c3e4:	ddc12917 	ldw	r23,1188(sp)
 400c3e8:	00000306 	br	400c3f8 <___vfprintf_internal_r+0x1244>
 400c3ec:	4a400204 	addi	r9,r9,8
 400c3f0:	94bffc04 	addi	r18,r18,-16
 400c3f4:	9c81d70e 	bge	r19,r18,400cb54 <___vfprintf_internal_r+0x19a0>
 400c3f8:	4d000015 	stw	r20,0(r9)
 400c3fc:	4cc00115 	stw	r19,4(r9)
 400c400:	42000404 	addi	r8,r8,16
 400c404:	18c00044 	addi	r3,r3,1
 400c408:	da011d15 	stw	r8,1140(sp)
 400c40c:	d8c11c15 	stw	r3,1136(sp)
 400c410:	b0fff60e 	bge	r22,r3,400c3ec <__reset+0xfb00b3ec>
 400c414:	8809883a 	mov	r4,r17
 400c418:	b80b883a 	mov	r5,r23
 400c41c:	d9811b04 	addi	r6,sp,1132
 400c420:	400b1800 	call	400b180 <__sprint_r>
 400c424:	103ca91e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c428:	da011d17 	ldw	r8,1140(sp)
 400c42c:	d8c11c17 	ldw	r3,1136(sp)
 400c430:	da400404 	addi	r9,sp,16
 400c434:	003fee06 	br	400c3f0 <__reset+0xfb00b3f0>
 400c438:	d9412917 	ldw	r5,1188(sp)
 400c43c:	8809883a 	mov	r4,r17
 400c440:	d9811b04 	addi	r6,sp,1132
 400c444:	400b1800 	call	400b180 <__sprint_r>
 400c448:	103ca01e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c44c:	da011d17 	ldw	r8,1140(sp)
 400c450:	d8c11c17 	ldw	r3,1136(sp)
 400c454:	da400404 	addi	r9,sp,16
 400c458:	003dee06 	br	400bc14 <__reset+0xfb00ac14>
 400c45c:	00c00084 	movi	r3,2
 400c460:	bd84b03a 	or	r2,r23,r22
 400c464:	d8012585 	stb	zero,1174(sp)
 400c468:	003ccb06 	br	400b798 <__reset+0xfb00a798>
 400c46c:	8080040c 	andi	r2,r16,16
 400c470:	1000ae26 	beq	r2,zero,400c72c <___vfprintf_internal_r+0x1578>
 400c474:	d9012d17 	ldw	r4,1204(sp)
 400c478:	25c00017 	ldw	r23,0(r4)
 400c47c:	21000104 	addi	r4,r4,4
 400c480:	d9012d15 	stw	r4,1204(sp)
 400c484:	b82dd7fa 	srai	r22,r23,31
 400c488:	b005883a 	mov	r2,r22
 400c48c:	003cb906 	br	400b774 <__reset+0xfb00a774>
 400c490:	8080040c 	andi	r2,r16,16
 400c494:	10007026 	beq	r2,zero,400c658 <___vfprintf_internal_r+0x14a4>
 400c498:	d8812d17 	ldw	r2,1204(sp)
 400c49c:	002d883a 	mov	r22,zero
 400c4a0:	00c00044 	movi	r3,1
 400c4a4:	15c00017 	ldw	r23,0(r2)
 400c4a8:	10800104 	addi	r2,r2,4
 400c4ac:	d8812d15 	stw	r2,1204(sp)
 400c4b0:	d8012585 	stb	zero,1174(sp)
 400c4b4:	b805883a 	mov	r2,r23
 400c4b8:	003cb706 	br	400b798 <__reset+0xfb00a798>
 400c4bc:	d8813217 	ldw	r2,1224(sp)
 400c4c0:	14ffffc4 	addi	r19,r2,-1
 400c4c4:	04ff4f0e 	bge	zero,r19,400c204 <__reset+0xfb00b204>
 400c4c8:	05800404 	movi	r22,16
 400c4cc:	050101f4 	movhi	r20,1031
 400c4d0:	a5155084 	addi	r20,r20,21826
 400c4d4:	b4c0470e 	bge	r22,r19,400c5f4 <___vfprintf_internal_r+0x1440>
 400c4d8:	05c001c4 	movi	r23,7
 400c4dc:	df012917 	ldw	fp,1188(sp)
 400c4e0:	00000306 	br	400c4f0 <___vfprintf_internal_r+0x133c>
 400c4e4:	94800204 	addi	r18,r18,8
 400c4e8:	9cfffc04 	addi	r19,r19,-16
 400c4ec:	b4c0410e 	bge	r22,r19,400c5f4 <___vfprintf_internal_r+0x1440>
 400c4f0:	95000015 	stw	r20,0(r18)
 400c4f4:	95800115 	stw	r22,4(r18)
 400c4f8:	42000404 	addi	r8,r8,16
 400c4fc:	18c00044 	addi	r3,r3,1
 400c500:	da011d15 	stw	r8,1140(sp)
 400c504:	d8c11c15 	stw	r3,1136(sp)
 400c508:	b8fff60e 	bge	r23,r3,400c4e4 <__reset+0xfb00b4e4>
 400c50c:	8809883a 	mov	r4,r17
 400c510:	e00b883a 	mov	r5,fp
 400c514:	d9811b04 	addi	r6,sp,1132
 400c518:	400b1800 	call	400b180 <__sprint_r>
 400c51c:	103c6b1e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c520:	da011d17 	ldw	r8,1140(sp)
 400c524:	d8c11c17 	ldw	r3,1136(sp)
 400c528:	dc800404 	addi	r18,sp,16
 400c52c:	003fee06 	br	400c4e8 <__reset+0xfb00b4e8>
 400c530:	8080040c 	andi	r2,r16,16
 400c534:	10005326 	beq	r2,zero,400c684 <___vfprintf_internal_r+0x14d0>
 400c538:	d8c12d17 	ldw	r3,1204(sp)
 400c53c:	002d883a 	mov	r22,zero
 400c540:	1dc00017 	ldw	r23,0(r3)
 400c544:	18c00104 	addi	r3,r3,4
 400c548:	d8c12d15 	stw	r3,1204(sp)
 400c54c:	b805883a 	mov	r2,r23
 400c550:	0007883a 	mov	r3,zero
 400c554:	d8012585 	stb	zero,1174(sp)
 400c558:	003c8f06 	br	400b798 <__reset+0xfb00a798>
 400c55c:	8088703a 	and	r4,r16,r2
 400c560:	203efe1e 	bne	r4,zero,400c15c <__reset+0xfb00b15c>
 400c564:	48800115 	stw	r2,4(r9)
 400c568:	42000044 	addi	r8,r8,1
 400c56c:	18c00044 	addi	r3,r3,1
 400c570:	da011d15 	stw	r8,1140(sp)
 400c574:	d8c11c15 	stw	r3,1136(sp)
 400c578:	008001c4 	movi	r2,7
 400c57c:	10c00216 	blt	r2,r3,400c588 <___vfprintf_internal_r+0x13d4>
 400c580:	4c800204 	addi	r18,r9,8
 400c584:	003f1f06 	br	400c204 <__reset+0xfb00b204>
 400c588:	d9412917 	ldw	r5,1188(sp)
 400c58c:	8809883a 	mov	r4,r17
 400c590:	d9811b04 	addi	r6,sp,1132
 400c594:	400b1800 	call	400b180 <__sprint_r>
 400c598:	103c4c1e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c59c:	dc800404 	addi	r18,sp,16
 400c5a0:	da011d17 	ldw	r8,1140(sp)
 400c5a4:	d8c11c17 	ldw	r3,1136(sp)
 400c5a8:	003f1606 	br	400c204 <__reset+0xfb00b204>
 400c5ac:	d9412917 	ldw	r5,1188(sp)
 400c5b0:	8809883a 	mov	r4,r17
 400c5b4:	d9811b04 	addi	r6,sp,1132
 400c5b8:	400b1800 	call	400b180 <__sprint_r>
 400c5bc:	103c431e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c5c0:	da011d17 	ldw	r8,1140(sp)
 400c5c4:	d8c11c17 	ldw	r3,1136(sp)
 400c5c8:	da400404 	addi	r9,sp,16
 400c5cc:	003eec06 	br	400c180 <__reset+0xfb00b180>
 400c5d0:	d9412917 	ldw	r5,1188(sp)
 400c5d4:	8809883a 	mov	r4,r17
 400c5d8:	d9811b04 	addi	r6,sp,1132
 400c5dc:	400b1800 	call	400b180 <__sprint_r>
 400c5e0:	103c3a1e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c5e4:	da011d17 	ldw	r8,1140(sp)
 400c5e8:	d8c11c17 	ldw	r3,1136(sp)
 400c5ec:	dc800404 	addi	r18,sp,16
 400c5f0:	003eee06 	br	400c1ac <__reset+0xfb00b1ac>
 400c5f4:	95000015 	stw	r20,0(r18)
 400c5f8:	94c00115 	stw	r19,4(r18)
 400c5fc:	44d1883a 	add	r8,r8,r19
 400c600:	003efa06 	br	400c1ec <__reset+0xfb00b1ec>
 400c604:	d9412917 	ldw	r5,1188(sp)
 400c608:	8809883a 	mov	r4,r17
 400c60c:	d9811b04 	addi	r6,sp,1132
 400c610:	400b1800 	call	400b180 <__sprint_r>
 400c614:	103c2d1e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c618:	da011d17 	ldw	r8,1140(sp)
 400c61c:	d8c11c17 	ldw	r3,1136(sp)
 400c620:	da400404 	addi	r9,sp,16
 400c624:	003d9806 	br	400bc88 <__reset+0xfb00ac88>
 400c628:	8080100c 	andi	r2,r16,64
 400c62c:	10011626 	beq	r2,zero,400ca88 <___vfprintf_internal_r+0x18d4>
 400c630:	d8c12d17 	ldw	r3,1204(sp)
 400c634:	002d883a 	mov	r22,zero
 400c638:	1dc0000b 	ldhu	r23,0(r3)
 400c63c:	18c00104 	addi	r3,r3,4
 400c640:	d8c12d15 	stw	r3,1204(sp)
 400c644:	003cc106 	br	400b94c <__reset+0xfb00a94c>
 400c648:	4d000015 	stw	r20,0(r9)
 400c64c:	4c800115 	stw	r18,4(r9)
 400c650:	4491883a 	add	r8,r8,r18
 400c654:	003dc006 	br	400bd58 <__reset+0xfb00ad58>
 400c658:	8080100c 	andi	r2,r16,64
 400c65c:	10010126 	beq	r2,zero,400ca64 <___vfprintf_internal_r+0x18b0>
 400c660:	d8c12d17 	ldw	r3,1204(sp)
 400c664:	002d883a 	mov	r22,zero
 400c668:	1dc0000b 	ldhu	r23,0(r3)
 400c66c:	18c00104 	addi	r3,r3,4
 400c670:	d8c12d15 	stw	r3,1204(sp)
 400c674:	b805883a 	mov	r2,r23
 400c678:	00c00044 	movi	r3,1
 400c67c:	d8012585 	stb	zero,1174(sp)
 400c680:	003c4506 	br	400b798 <__reset+0xfb00a798>
 400c684:	8080100c 	andi	r2,r16,64
 400c688:	10010526 	beq	r2,zero,400caa0 <___vfprintf_internal_r+0x18ec>
 400c68c:	d9012d17 	ldw	r4,1204(sp)
 400c690:	002d883a 	mov	r22,zero
 400c694:	0007883a 	mov	r3,zero
 400c698:	25c0000b 	ldhu	r23,0(r4)
 400c69c:	21000104 	addi	r4,r4,4
 400c6a0:	d9012d15 	stw	r4,1204(sp)
 400c6a4:	b805883a 	mov	r2,r23
 400c6a8:	d8012585 	stb	zero,1174(sp)
 400c6ac:	003c3a06 	br	400b798 <__reset+0xfb00a798>
 400c6b0:	d8812d17 	ldw	r2,1204(sp)
 400c6b4:	15800017 	ldw	r22,0(r2)
 400c6b8:	15000117 	ldw	r20,4(r2)
 400c6bc:	10800204 	addi	r2,r2,8
 400c6c0:	d8812d15 	stw	r2,1204(sp)
 400c6c4:	dd813315 	stw	r22,1228(sp)
 400c6c8:	dd013415 	stw	r20,1232(sp)
 400c6cc:	003c5906 	br	400b834 <__reset+0xfb00a834>
 400c6d0:	00c00084 	movi	r3,2
 400c6d4:	d8012585 	stb	zero,1174(sp)
 400c6d8:	003c2f06 	br	400b798 <__reset+0xfb00a798>
 400c6dc:	ac800007 	ldb	r18,0(r21)
 400c6e0:	003b1006 	br	400b324 <__reset+0xfb00a324>
 400c6e4:	8080040c 	andi	r2,r16,16
 400c6e8:	1000091e 	bne	r2,zero,400c710 <___vfprintf_internal_r+0x155c>
 400c6ec:	8400100c 	andi	r16,r16,64
 400c6f0:	80000726 	beq	r16,zero,400c710 <___vfprintf_internal_r+0x155c>
 400c6f4:	d8c12d17 	ldw	r3,1204(sp)
 400c6f8:	d9012c17 	ldw	r4,1200(sp)
 400c6fc:	18800017 	ldw	r2,0(r3)
 400c700:	18c00104 	addi	r3,r3,4
 400c704:	d8c12d15 	stw	r3,1204(sp)
 400c708:	1100000d 	sth	r4,0(r2)
 400c70c:	003adf06 	br	400b28c <__reset+0xfb00a28c>
 400c710:	d8c12d17 	ldw	r3,1204(sp)
 400c714:	d9012c17 	ldw	r4,1200(sp)
 400c718:	18800017 	ldw	r2,0(r3)
 400c71c:	18c00104 	addi	r3,r3,4
 400c720:	d8c12d15 	stw	r3,1204(sp)
 400c724:	11000015 	stw	r4,0(r2)
 400c728:	003ad806 	br	400b28c <__reset+0xfb00a28c>
 400c72c:	8080100c 	andi	r2,r16,64
 400c730:	1000c526 	beq	r2,zero,400ca48 <___vfprintf_internal_r+0x1894>
 400c734:	d8812d17 	ldw	r2,1204(sp)
 400c738:	15c0000f 	ldh	r23,0(r2)
 400c73c:	10800104 	addi	r2,r2,4
 400c740:	d8812d15 	stw	r2,1204(sp)
 400c744:	b82dd7fa 	srai	r22,r23,31
 400c748:	b005883a 	mov	r2,r22
 400c74c:	003c0906 	br	400b774 <__reset+0xfb00a774>
 400c750:	4c800115 	stw	r18,4(r9)
 400c754:	9211883a 	add	r8,r18,r8
 400c758:	18c00044 	addi	r3,r3,1
 400c75c:	da011d15 	stw	r8,1140(sp)
 400c760:	d8c11c15 	stw	r3,1136(sp)
 400c764:	008001c4 	movi	r2,7
 400c768:	10c14016 	blt	r2,r3,400cc6c <___vfprintf_internal_r+0x1ab8>
 400c76c:	4a400204 	addi	r9,r9,8
 400c770:	d8813717 	ldw	r2,1244(sp)
 400c774:	9ca7883a 	add	r19,r19,r18
 400c778:	48800015 	stw	r2,0(r9)
 400c77c:	00800044 	movi	r2,1
 400c780:	48800115 	stw	r2,4(r9)
 400c784:	4091883a 	add	r8,r8,r2
 400c788:	1887883a 	add	r3,r3,r2
 400c78c:	da011d15 	stw	r8,1140(sp)
 400c790:	d8c11c15 	stw	r3,1136(sp)
 400c794:	008001c4 	movi	r2,7
 400c798:	10c12c16 	blt	r2,r3,400cc4c <___vfprintf_internal_r+0x1a98>
 400c79c:	4a400204 	addi	r9,r9,8
 400c7a0:	d9013217 	ldw	r4,1224(sp)
 400c7a4:	da011d17 	ldw	r8,1140(sp)
 400c7a8:	d8c11c17 	ldw	r3,1136(sp)
 400c7ac:	24a5c83a 	sub	r18,r4,r18
 400c7b0:	4cc00015 	stw	r19,0(r9)
 400c7b4:	003fa506 	br	400c64c <__reset+0xfb00b64c>
 400c7b8:	04c101f4 	movhi	r19,1031
 400c7bc:	9cd53d04 	addi	r19,r19,21748
 400c7c0:	003c2e06 	br	400b87c <__reset+0xfb00a87c>
 400c7c4:	d9412917 	ldw	r5,1188(sp)
 400c7c8:	8809883a 	mov	r4,r17
 400c7cc:	d9811b04 	addi	r6,sp,1132
 400c7d0:	400b1800 	call	400b180 <__sprint_r>
 400c7d4:	103bbd1e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c7d8:	da011d17 	ldw	r8,1140(sp)
 400c7dc:	da400404 	addi	r9,sp,16
 400c7e0:	003df606 	br	400bfbc <__reset+0xfb00afbc>
 400c7e4:	008101f4 	movhi	r2,1031
 400c7e8:	10954c04 	addi	r2,r2,21808
 400c7ec:	48800015 	stw	r2,0(r9)
 400c7f0:	00800044 	movi	r2,1
 400c7f4:	48800115 	stw	r2,4(r9)
 400c7f8:	4091883a 	add	r8,r8,r2
 400c7fc:	1887883a 	add	r3,r3,r2
 400c800:	da011d15 	stw	r8,1140(sp)
 400c804:	d8c11c15 	stw	r3,1136(sp)
 400c808:	008001c4 	movi	r2,7
 400c80c:	10c0bc16 	blt	r2,r3,400cb00 <___vfprintf_internal_r+0x194c>
 400c810:	4a400204 	addi	r9,r9,8
 400c814:	9000041e 	bne	r18,zero,400c828 <___vfprintf_internal_r+0x1674>
 400c818:	d8c13217 	ldw	r3,1224(sp)
 400c81c:	1800021e 	bne	r3,zero,400c828 <___vfprintf_internal_r+0x1674>
 400c820:	8080004c 	andi	r2,r16,1
 400c824:	103d5226 	beq	r2,zero,400bd70 <__reset+0xfb00ad70>
 400c828:	d8c11c17 	ldw	r3,1136(sp)
 400c82c:	d9013717 	ldw	r4,1244(sp)
 400c830:	00800044 	movi	r2,1
 400c834:	48800115 	stw	r2,4(r9)
 400c838:	49000015 	stw	r4,0(r9)
 400c83c:	4091883a 	add	r8,r8,r2
 400c840:	1887883a 	add	r3,r3,r2
 400c844:	da011d15 	stw	r8,1140(sp)
 400c848:	d8c11c15 	stw	r3,1136(sp)
 400c84c:	008001c4 	movi	r2,7
 400c850:	10c14516 	blt	r2,r3,400cd68 <___vfprintf_internal_r+0x1bb4>
 400c854:	4a400204 	addi	r9,r9,8
 400c858:	04a5c83a 	sub	r18,zero,r18
 400c85c:	0480d70e 	bge	zero,r18,400cbbc <___vfprintf_internal_r+0x1a08>
 400c860:	05800404 	movi	r22,16
 400c864:	050101f4 	movhi	r20,1031
 400c868:	a5155084 	addi	r20,r20,21826
 400c86c:	b480db0e 	bge	r22,r18,400cbdc <___vfprintf_internal_r+0x1a28>
 400c870:	05c001c4 	movi	r23,7
 400c874:	df012917 	ldw	fp,1188(sp)
 400c878:	00000306 	br	400c888 <___vfprintf_internal_r+0x16d4>
 400c87c:	4a400204 	addi	r9,r9,8
 400c880:	94bffc04 	addi	r18,r18,-16
 400c884:	b480d50e 	bge	r22,r18,400cbdc <___vfprintf_internal_r+0x1a28>
 400c888:	4d000015 	stw	r20,0(r9)
 400c88c:	4d800115 	stw	r22,4(r9)
 400c890:	42000404 	addi	r8,r8,16
 400c894:	18c00044 	addi	r3,r3,1
 400c898:	da011d15 	stw	r8,1140(sp)
 400c89c:	d8c11c15 	stw	r3,1136(sp)
 400c8a0:	b8fff60e 	bge	r23,r3,400c87c <__reset+0xfb00b87c>
 400c8a4:	8809883a 	mov	r4,r17
 400c8a8:	e00b883a 	mov	r5,fp
 400c8ac:	d9811b04 	addi	r6,sp,1132
 400c8b0:	400b1800 	call	400b180 <__sprint_r>
 400c8b4:	103b851e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400c8b8:	da011d17 	ldw	r8,1140(sp)
 400c8bc:	d8c11c17 	ldw	r3,1136(sp)
 400c8c0:	da400404 	addi	r9,sp,16
 400c8c4:	003fee06 	br	400c880 <__reset+0xfb00b880>
 400c8c8:	da413c15 	stw	r9,1264(sp)
 400c8cc:	40091e00 	call	40091e0 <__isnand>
 400c8d0:	da413c17 	ldw	r9,1264(sp)
 400c8d4:	10007e1e 	bne	r2,zero,400cad0 <___vfprintf_internal_r+0x191c>
 400c8d8:	00bfffc4 	movi	r2,-1
 400c8dc:	e0816a26 	beq	fp,r2,400ce88 <___vfprintf_internal_r+0x1cd4>
 400c8e0:	008019c4 	movi	r2,103
 400c8e4:	90816526 	beq	r18,r2,400ce7c <___vfprintf_internal_r+0x1cc8>
 400c8e8:	008011c4 	movi	r2,71
 400c8ec:	90816326 	beq	r18,r2,400ce7c <___vfprintf_internal_r+0x1cc8>
 400c8f0:	80c04014 	ori	r3,r16,256
 400c8f4:	d8c12a15 	stw	r3,1192(sp)
 400c8f8:	a0016516 	blt	r20,zero,400ce90 <___vfprintf_internal_r+0x1cdc>
 400c8fc:	d8012f05 	stb	zero,1212(sp)
 400c900:	00801984 	movi	r2,102
 400c904:	9080f226 	beq	r18,r2,400ccd0 <___vfprintf_internal_r+0x1b1c>
 400c908:	00801184 	movi	r2,70
 400c90c:	9080f026 	beq	r18,r2,400ccd0 <___vfprintf_internal_r+0x1b1c>
 400c910:	00801944 	movi	r2,101
 400c914:	90818d26 	beq	r18,r2,400cf4c <___vfprintf_internal_r+0x1d98>
 400c918:	00801144 	movi	r2,69
 400c91c:	90818b26 	beq	r18,r2,400cf4c <___vfprintf_internal_r+0x1d98>
 400c920:	e02f883a 	mov	r23,fp
 400c924:	d8812404 	addi	r2,sp,1168
 400c928:	d8800115 	stw	r2,4(sp)
 400c92c:	d8812304 	addi	r2,sp,1164
 400c930:	d8800215 	stw	r2,8(sp)
 400c934:	d8812204 	addi	r2,sp,1160
 400c938:	ddc00015 	stw	r23,0(sp)
 400c93c:	d8800315 	stw	r2,12(sp)
 400c940:	8809883a 	mov	r4,r17
 400c944:	b00b883a 	mov	r5,r22
 400c948:	a00d883a 	mov	r6,r20
 400c94c:	01c00084 	movi	r7,2
 400c950:	da413c15 	stw	r9,1264(sp)
 400c954:	400d4f00 	call	400d4f0 <_dtoa_r>
 400c958:	1027883a 	mov	r19,r2
 400c95c:	008019c4 	movi	r2,103
 400c960:	da413c17 	ldw	r9,1264(sp)
 400c964:	9081951e 	bne	r18,r2,400cfbc <___vfprintf_internal_r+0x1e08>
 400c968:	8080004c 	andi	r2,r16,1
 400c96c:	10017926 	beq	r2,zero,400cf54 <___vfprintf_internal_r+0x1da0>
 400c970:	00801184 	movi	r2,70
 400c974:	9dc7883a 	add	r3,r19,r23
 400c978:	9080e626 	beq	r18,r2,400cd14 <___vfprintf_internal_r+0x1b60>
 400c97c:	b009883a 	mov	r4,r22
 400c980:	a00b883a 	mov	r5,r20
 400c984:	000d883a 	mov	r6,zero
 400c988:	000f883a 	mov	r7,zero
 400c98c:	d8c13b15 	stw	r3,1260(sp)
 400c990:	da413c15 	stw	r9,1264(sp)
 400c994:	4012bdc0 	call	4012bdc <__eqdf2>
 400c998:	d8c13b17 	ldw	r3,1260(sp)
 400c99c:	da413c17 	ldw	r9,1264(sp)
 400c9a0:	10000726 	beq	r2,zero,400c9c0 <___vfprintf_internal_r+0x180c>
 400c9a4:	d8812217 	ldw	r2,1160(sp)
 400c9a8:	10c18a2e 	bgeu	r2,r3,400cfd4 <___vfprintf_internal_r+0x1e20>
 400c9ac:	01000c04 	movi	r4,48
 400c9b0:	11000005 	stb	r4,0(r2)
 400c9b4:	10800044 	addi	r2,r2,1
 400c9b8:	d8812215 	stw	r2,1160(sp)
 400c9bc:	10fffc1e 	bne	r2,r3,400c9b0 <__reset+0xfb00b9b0>
 400c9c0:	1cc7c83a 	sub	r3,r3,r19
 400c9c4:	d8c13215 	stw	r3,1224(sp)
 400c9c8:	008019c4 	movi	r2,103
 400c9cc:	9080fa26 	beq	r18,r2,400cdb8 <___vfprintf_internal_r+0x1c04>
 400c9d0:	008011c4 	movi	r2,71
 400c9d4:	9080f826 	beq	r18,r2,400cdb8 <___vfprintf_internal_r+0x1c04>
 400c9d8:	00801984 	movi	r2,102
 400c9dc:	90818e1e 	bne	r18,r2,400d018 <___vfprintf_internal_r+0x1e64>
 400c9e0:	d8812417 	ldw	r2,1168(sp)
 400c9e4:	d8812b15 	stw	r2,1196(sp)
 400c9e8:	00817c0e 	bge	zero,r2,400cfdc <___vfprintf_internal_r+0x1e28>
 400c9ec:	e000021e 	bne	fp,zero,400c9f8 <___vfprintf_internal_r+0x1844>
 400c9f0:	8400004c 	andi	r16,r16,1
 400c9f4:	80000426 	beq	r16,zero,400ca08 <___vfprintf_internal_r+0x1854>
 400c9f8:	d8812b17 	ldw	r2,1196(sp)
 400c9fc:	e2000044 	addi	r8,fp,1
 400ca00:	1205883a 	add	r2,r2,r8
 400ca04:	d8812b15 	stw	r2,1196(sp)
 400ca08:	d8812815 	stw	r2,1184(sp)
 400ca0c:	10010b16 	blt	r2,zero,400ce3c <___vfprintf_internal_r+0x1c88>
 400ca10:	ddc12f07 	ldb	r23,1212(sp)
 400ca14:	b800e426 	beq	r23,zero,400cda8 <___vfprintf_internal_r+0x1bf4>
 400ca18:	00800b44 	movi	r2,45
 400ca1c:	d8812585 	stb	r2,1174(sp)
 400ca20:	dc012a17 	ldw	r16,1192(sp)
 400ca24:	d8013115 	stw	zero,1220(sp)
 400ca28:	003b7306 	br	400b7f8 <__reset+0xfb00a7f8>
 400ca2c:	d8812b17 	ldw	r2,1196(sp)
 400ca30:	d8812815 	stw	r2,1184(sp)
 400ca34:	10005716 	blt	r2,zero,400cb94 <___vfprintf_internal_r+0x19e0>
 400ca38:	d8812583 	ldbu	r2,1174(sp)
 400ca3c:	ddc12d15 	stw	r23,1204(sp)
 400ca40:	d8013115 	stw	zero,1220(sp)
 400ca44:	003b6806 	br	400b7e8 <__reset+0xfb00a7e8>
 400ca48:	d8c12d17 	ldw	r3,1204(sp)
 400ca4c:	1dc00017 	ldw	r23,0(r3)
 400ca50:	18c00104 	addi	r3,r3,4
 400ca54:	d8c12d15 	stw	r3,1204(sp)
 400ca58:	b82dd7fa 	srai	r22,r23,31
 400ca5c:	b005883a 	mov	r2,r22
 400ca60:	003b4406 	br	400b774 <__reset+0xfb00a774>
 400ca64:	d9012d17 	ldw	r4,1204(sp)
 400ca68:	002d883a 	mov	r22,zero
 400ca6c:	00c00044 	movi	r3,1
 400ca70:	25c00017 	ldw	r23,0(r4)
 400ca74:	21000104 	addi	r4,r4,4
 400ca78:	d9012d15 	stw	r4,1204(sp)
 400ca7c:	b805883a 	mov	r2,r23
 400ca80:	d8012585 	stb	zero,1174(sp)
 400ca84:	003b4406 	br	400b798 <__reset+0xfb00a798>
 400ca88:	d9012d17 	ldw	r4,1204(sp)
 400ca8c:	002d883a 	mov	r22,zero
 400ca90:	25c00017 	ldw	r23,0(r4)
 400ca94:	21000104 	addi	r4,r4,4
 400ca98:	d9012d15 	stw	r4,1204(sp)
 400ca9c:	003bab06 	br	400b94c <__reset+0xfb00a94c>
 400caa0:	d8812d17 	ldw	r2,1204(sp)
 400caa4:	002d883a 	mov	r22,zero
 400caa8:	0007883a 	mov	r3,zero
 400caac:	15c00017 	ldw	r23,0(r2)
 400cab0:	10800104 	addi	r2,r2,4
 400cab4:	d8812d15 	stw	r2,1204(sp)
 400cab8:	d8012585 	stb	zero,1174(sp)
 400cabc:	b805883a 	mov	r2,r23
 400cac0:	003b3506 	br	400b798 <__reset+0xfb00a798>
 400cac4:	00ffffc4 	movi	r3,-1
 400cac8:	b82b883a 	mov	r21,r23
 400cacc:	003a1606 	br	400b328 <__reset+0xfb00a328>
 400cad0:	008011c4 	movi	r2,71
 400cad4:	1480b116 	blt	r2,r18,400cd9c <___vfprintf_internal_r+0x1be8>
 400cad8:	04c101f4 	movhi	r19,1031
 400cadc:	9cd53e04 	addi	r19,r19,21752
 400cae0:	00c000c4 	movi	r3,3
 400cae4:	00bfdfc4 	movi	r2,-129
 400cae8:	80a0703a 	and	r16,r16,r2
 400caec:	d8c12815 	stw	r3,1184(sp)
 400caf0:	d8812583 	ldbu	r2,1174(sp)
 400caf4:	d8c12b15 	stw	r3,1196(sp)
 400caf8:	d8013115 	stw	zero,1220(sp)
 400cafc:	003b3a06 	br	400b7e8 <__reset+0xfb00a7e8>
 400cb00:	d9412917 	ldw	r5,1188(sp)
 400cb04:	8809883a 	mov	r4,r17
 400cb08:	d9811b04 	addi	r6,sp,1132
 400cb0c:	400b1800 	call	400b180 <__sprint_r>
 400cb10:	103aee1e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400cb14:	dc812417 	ldw	r18,1168(sp)
 400cb18:	da011d17 	ldw	r8,1140(sp)
 400cb1c:	da400404 	addi	r9,sp,16
 400cb20:	003f3c06 	br	400c814 <__reset+0xfb00b814>
 400cb24:	ad400044 	addi	r21,r21,1
 400cb28:	84000814 	ori	r16,r16,32
 400cb2c:	14800047 	ldb	r18,1(r2)
 400cb30:	0039fc06 	br	400b324 <__reset+0xfb00a324>
 400cb34:	d9412917 	ldw	r5,1188(sp)
 400cb38:	8809883a 	mov	r4,r17
 400cb3c:	d9811b04 	addi	r6,sp,1132
 400cb40:	400b1800 	call	400b180 <__sprint_r>
 400cb44:	103ae11e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400cb48:	da011d17 	ldw	r8,1140(sp)
 400cb4c:	da400404 	addi	r9,sp,16
 400cb50:	003d2b06 	br	400c000 <__reset+0xfb00b000>
 400cb54:	4d000015 	stw	r20,0(r9)
 400cb58:	4c800115 	stw	r18,4(r9)
 400cb5c:	4491883a 	add	r8,r8,r18
 400cb60:	18c00044 	addi	r3,r3,1
 400cb64:	da011d15 	stw	r8,1140(sp)
 400cb68:	d8c11c15 	stw	r3,1136(sp)
 400cb6c:	008001c4 	movi	r2,7
 400cb70:	10fcbd16 	blt	r2,r3,400be68 <__reset+0xfb00ae68>
 400cb74:	4a400204 	addi	r9,r9,8
 400cb78:	003cc206 	br	400be84 <__reset+0xfb00ae84>
 400cb7c:	da413c15 	stw	r9,1264(sp)
 400cb80:	400b0f40 	call	400b0f4 <strlen>
 400cb84:	d8812b15 	stw	r2,1196(sp)
 400cb88:	d8812815 	stw	r2,1184(sp)
 400cb8c:	da413c17 	ldw	r9,1264(sp)
 400cb90:	103fa90e 	bge	r2,zero,400ca38 <__reset+0xfb00ba38>
 400cb94:	d8012815 	stw	zero,1184(sp)
 400cb98:	003fa706 	br	400ca38 <__reset+0xfb00ba38>
 400cb9c:	d9412917 	ldw	r5,1188(sp)
 400cba0:	8809883a 	mov	r4,r17
 400cba4:	d9811b04 	addi	r6,sp,1132
 400cba8:	400b1800 	call	400b180 <__sprint_r>
 400cbac:	103ac71e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400cbb0:	da011d17 	ldw	r8,1140(sp)
 400cbb4:	d8c11c17 	ldw	r3,1136(sp)
 400cbb8:	da400404 	addi	r9,sp,16
 400cbbc:	d8813217 	ldw	r2,1224(sp)
 400cbc0:	4cc00015 	stw	r19,0(r9)
 400cbc4:	48800115 	stw	r2,4(r9)
 400cbc8:	4091883a 	add	r8,r8,r2
 400cbcc:	003c6206 	br	400bd58 <__reset+0xfb00ad58>
 400cbd0:	00800b44 	movi	r2,45
 400cbd4:	d8812585 	stb	r2,1174(sp)
 400cbd8:	003b2406 	br	400b86c <__reset+0xfb00a86c>
 400cbdc:	4d000015 	stw	r20,0(r9)
 400cbe0:	4c800115 	stw	r18,4(r9)
 400cbe4:	4491883a 	add	r8,r8,r18
 400cbe8:	18c00044 	addi	r3,r3,1
 400cbec:	da011d15 	stw	r8,1140(sp)
 400cbf0:	d8c11c15 	stw	r3,1136(sp)
 400cbf4:	008001c4 	movi	r2,7
 400cbf8:	10ffe816 	blt	r2,r3,400cb9c <__reset+0xfb00bb9c>
 400cbfc:	4a400204 	addi	r9,r9,8
 400cc00:	003fee06 	br	400cbbc <__reset+0xfb00bbbc>
 400cc04:	d8c12b15 	stw	r3,1196(sp)
 400cc08:	00800184 	movi	r2,6
 400cc0c:	10c0062e 	bgeu	r2,r3,400cc28 <___vfprintf_internal_r+0x1a74>
 400cc10:	d8812b15 	stw	r2,1196(sp)
 400cc14:	d8812815 	stw	r2,1184(sp)
 400cc18:	ddc12d15 	stw	r23,1204(sp)
 400cc1c:	04c101f4 	movhi	r19,1031
 400cc20:	9cd54a04 	addi	r19,r19,21800
 400cc24:	0039ca06 	br	400b350 <__reset+0xfb00a350>
 400cc28:	d8812b17 	ldw	r2,1196(sp)
 400cc2c:	d8812815 	stw	r2,1184(sp)
 400cc30:	103ff90e 	bge	r2,zero,400cc18 <__reset+0xfb00bc18>
 400cc34:	d8012815 	stw	zero,1184(sp)
 400cc38:	003ff706 	br	400cc18 <__reset+0xfb00bc18>
 400cc3c:	00800244 	movi	r2,9
 400cc40:	15fdaa36 	bltu	r2,r23,400c2ec <__reset+0xfb00b2ec>
 400cc44:	dd010e04 	addi	r20,sp,1080
 400cc48:	003dc606 	br	400c364 <__reset+0xfb00b364>
 400cc4c:	d9412917 	ldw	r5,1188(sp)
 400cc50:	8809883a 	mov	r4,r17
 400cc54:	d9811b04 	addi	r6,sp,1132
 400cc58:	400b1800 	call	400b180 <__sprint_r>
 400cc5c:	103a9b1e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400cc60:	dc812417 	ldw	r18,1168(sp)
 400cc64:	da400404 	addi	r9,sp,16
 400cc68:	003ecd06 	br	400c7a0 <__reset+0xfb00b7a0>
 400cc6c:	d9412917 	ldw	r5,1188(sp)
 400cc70:	8809883a 	mov	r4,r17
 400cc74:	d9811b04 	addi	r6,sp,1132
 400cc78:	400b1800 	call	400b180 <__sprint_r>
 400cc7c:	103a931e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400cc80:	dc812417 	ldw	r18,1168(sp)
 400cc84:	da011d17 	ldw	r8,1140(sp)
 400cc88:	d8c11c17 	ldw	r3,1136(sp)
 400cc8c:	da400404 	addi	r9,sp,16
 400cc90:	003eb706 	br	400c770 <__reset+0xfb00b770>
 400cc94:	d9412917 	ldw	r5,1188(sp)
 400cc98:	8809883a 	mov	r4,r17
 400cc9c:	d9811b04 	addi	r6,sp,1132
 400cca0:	400b1800 	call	400b180 <__sprint_r>
 400cca4:	103a891e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400cca8:	dc812417 	ldw	r18,1168(sp)
 400ccac:	da011d17 	ldw	r8,1140(sp)
 400ccb0:	da400404 	addi	r9,sp,16
 400ccb4:	003dc206 	br	400c3c0 <__reset+0xfb00b3c0>
 400ccb8:	df012815 	stw	fp,1184(sp)
 400ccbc:	d8812583 	ldbu	r2,1174(sp)
 400ccc0:	df012b15 	stw	fp,1196(sp)
 400ccc4:	ddc12d15 	stw	r23,1204(sp)
 400ccc8:	d8013115 	stw	zero,1220(sp)
 400cccc:	003ac606 	br	400b7e8 <__reset+0xfb00a7e8>
 400ccd0:	d8812404 	addi	r2,sp,1168
 400ccd4:	d8800115 	stw	r2,4(sp)
 400ccd8:	d8812304 	addi	r2,sp,1164
 400ccdc:	d8800215 	stw	r2,8(sp)
 400cce0:	d8812204 	addi	r2,sp,1160
 400cce4:	df000015 	stw	fp,0(sp)
 400cce8:	d8800315 	stw	r2,12(sp)
 400ccec:	8809883a 	mov	r4,r17
 400ccf0:	b00b883a 	mov	r5,r22
 400ccf4:	a00d883a 	mov	r6,r20
 400ccf8:	01c000c4 	movi	r7,3
 400ccfc:	da413c15 	stw	r9,1264(sp)
 400cd00:	400d4f00 	call	400d4f0 <_dtoa_r>
 400cd04:	da413c17 	ldw	r9,1264(sp)
 400cd08:	1027883a 	mov	r19,r2
 400cd0c:	1707883a 	add	r3,r2,fp
 400cd10:	e02f883a 	mov	r23,fp
 400cd14:	99000007 	ldb	r4,0(r19)
 400cd18:	00800c04 	movi	r2,48
 400cd1c:	20800326 	beq	r4,r2,400cd2c <___vfprintf_internal_r+0x1b78>
 400cd20:	da812417 	ldw	r10,1168(sp)
 400cd24:	1a87883a 	add	r3,r3,r10
 400cd28:	003f1406 	br	400c97c <__reset+0xfb00b97c>
 400cd2c:	b009883a 	mov	r4,r22
 400cd30:	a00b883a 	mov	r5,r20
 400cd34:	000d883a 	mov	r6,zero
 400cd38:	000f883a 	mov	r7,zero
 400cd3c:	d8c13b15 	stw	r3,1260(sp)
 400cd40:	da413c15 	stw	r9,1264(sp)
 400cd44:	4012c380 	call	4012c38 <__nedf2>
 400cd48:	d8c13b17 	ldw	r3,1260(sp)
 400cd4c:	da413c17 	ldw	r9,1264(sp)
 400cd50:	103ff326 	beq	r2,zero,400cd20 <__reset+0xfb00bd20>
 400cd54:	00800044 	movi	r2,1
 400cd58:	15d5c83a 	sub	r10,r2,r23
 400cd5c:	da812415 	stw	r10,1168(sp)
 400cd60:	1a87883a 	add	r3,r3,r10
 400cd64:	003f0506 	br	400c97c <__reset+0xfb00b97c>
 400cd68:	d9412917 	ldw	r5,1188(sp)
 400cd6c:	8809883a 	mov	r4,r17
 400cd70:	d9811b04 	addi	r6,sp,1132
 400cd74:	400b1800 	call	400b180 <__sprint_r>
 400cd78:	103a541e 	bne	r2,zero,400b6cc <__reset+0xfb00a6cc>
 400cd7c:	dc812417 	ldw	r18,1168(sp)
 400cd80:	da011d17 	ldw	r8,1140(sp)
 400cd84:	d8c11c17 	ldw	r3,1136(sp)
 400cd88:	da400404 	addi	r9,sp,16
 400cd8c:	003eb206 	br	400c858 <__reset+0xfb00b858>
 400cd90:	b82b883a 	mov	r21,r23
 400cd94:	0007883a 	mov	r3,zero
 400cd98:	00396306 	br	400b328 <__reset+0xfb00a328>
 400cd9c:	04c101f4 	movhi	r19,1031
 400cda0:	9cd53f04 	addi	r19,r19,21756
 400cda4:	003f4e06 	br	400cae0 <__reset+0xfb00bae0>
 400cda8:	d8812583 	ldbu	r2,1174(sp)
 400cdac:	dc012a17 	ldw	r16,1192(sp)
 400cdb0:	d8013115 	stw	zero,1220(sp)
 400cdb4:	003a8c06 	br	400b7e8 <__reset+0xfb00a7e8>
 400cdb8:	d8812417 	ldw	r2,1168(sp)
 400cdbc:	d8812b15 	stw	r2,1196(sp)
 400cdc0:	1029883a 	mov	r20,r2
 400cdc4:	00bfff44 	movi	r2,-3
 400cdc8:	a0800116 	blt	r20,r2,400cdd0 <___vfprintf_internal_r+0x1c1c>
 400cdcc:	e5001d0e 	bge	fp,r20,400ce44 <___vfprintf_internal_r+0x1c90>
 400cdd0:	94bfff84 	addi	r18,r18,-2
 400cdd4:	a53fffc4 	addi	r20,r20,-1
 400cdd8:	dd012415 	stw	r20,1168(sp)
 400cddc:	dc811fc5 	stb	r18,1151(sp)
 400cde0:	a0007216 	blt	r20,zero,400cfac <___vfprintf_internal_r+0x1df8>
 400cde4:	00800ac4 	movi	r2,43
 400cde8:	d8812005 	stb	r2,1152(sp)
 400cdec:	00800244 	movi	r2,9
 400cdf0:	15003516 	blt	r2,r20,400cec8 <___vfprintf_internal_r+0x1d14>
 400cdf4:	00800c04 	movi	r2,48
 400cdf8:	a5000c04 	addi	r20,r20,48
 400cdfc:	d8812045 	stb	r2,1153(sp)
 400ce00:	dd012085 	stb	r20,1154(sp)
 400ce04:	d8c120c4 	addi	r3,sp,1155
 400ce08:	d8811fc4 	addi	r2,sp,1151
 400ce0c:	1885c83a 	sub	r2,r3,r2
 400ce10:	d8c13217 	ldw	r3,1224(sp)
 400ce14:	d8813515 	stw	r2,1236(sp)
 400ce18:	1885883a 	add	r2,r3,r2
 400ce1c:	d8812b15 	stw	r2,1196(sp)
 400ce20:	00800044 	movi	r2,1
 400ce24:	10c0580e 	bge	r2,r3,400cf88 <___vfprintf_internal_r+0x1dd4>
 400ce28:	d8812b17 	ldw	r2,1196(sp)
 400ce2c:	10800044 	addi	r2,r2,1
 400ce30:	d8812b15 	stw	r2,1196(sp)
 400ce34:	d8812815 	stw	r2,1184(sp)
 400ce38:	103ef50e 	bge	r2,zero,400ca10 <__reset+0xfb00ba10>
 400ce3c:	d8012815 	stw	zero,1184(sp)
 400ce40:	003ef306 	br	400ca10 <__reset+0xfb00ba10>
 400ce44:	d8812b17 	ldw	r2,1196(sp)
 400ce48:	d8c13217 	ldw	r3,1224(sp)
 400ce4c:	10c01416 	blt	r2,r3,400cea0 <___vfprintf_internal_r+0x1cec>
 400ce50:	8400004c 	andi	r16,r16,1
 400ce54:	80000326 	beq	r16,zero,400ce64 <___vfprintf_internal_r+0x1cb0>
 400ce58:	d8812b17 	ldw	r2,1196(sp)
 400ce5c:	10800044 	addi	r2,r2,1
 400ce60:	d8812b15 	stw	r2,1196(sp)
 400ce64:	d8812815 	stw	r2,1184(sp)
 400ce68:	10001416 	blt	r2,zero,400cebc <___vfprintf_internal_r+0x1d08>
 400ce6c:	048019c4 	movi	r18,103
 400ce70:	003ee706 	br	400ca10 <__reset+0xfb00ba10>
 400ce74:	d8012815 	stw	zero,1184(sp)
 400ce78:	003b1a06 	br	400bae4 <__reset+0xfb00aae4>
 400ce7c:	e03e9c1e 	bne	fp,zero,400c8f0 <__reset+0xfb00b8f0>
 400ce80:	07000044 	movi	fp,1
 400ce84:	003e9a06 	br	400c8f0 <__reset+0xfb00b8f0>
 400ce88:	07000184 	movi	fp,6
 400ce8c:	003e9806 	br	400c8f0 <__reset+0xfb00b8f0>
 400ce90:	00c00b44 	movi	r3,45
 400ce94:	a520003c 	xorhi	r20,r20,32768
 400ce98:	d8c12f05 	stb	r3,1212(sp)
 400ce9c:	003e9806 	br	400c900 <__reset+0xfb00b900>
 400cea0:	05003f0e 	bge	zero,r20,400cfa0 <___vfprintf_internal_r+0x1dec>
 400cea4:	05000044 	movi	r20,1
 400cea8:	d8c13217 	ldw	r3,1224(sp)
 400ceac:	a0e9883a 	add	r20,r20,r3
 400ceb0:	dd012b15 	stw	r20,1196(sp)
 400ceb4:	dd012815 	stw	r20,1184(sp)
 400ceb8:	a03fec0e 	bge	r20,zero,400ce6c <__reset+0xfb00be6c>
 400cebc:	d8012815 	stw	zero,1184(sp)
 400cec0:	048019c4 	movi	r18,103
 400cec4:	003ed206 	br	400ca10 <__reset+0xfb00ba10>
 400cec8:	d8c11f84 	addi	r3,sp,1150
 400cecc:	102f883a 	mov	r23,r2
 400ced0:	4839883a 	mov	fp,r9
 400ced4:	a009883a 	mov	r4,r20
 400ced8:	01400284 	movi	r5,10
 400cedc:	182d883a 	mov	r22,r3
 400cee0:	4009d6c0 	call	4009d6c <__modsi3>
 400cee4:	10800c04 	addi	r2,r2,48
 400cee8:	a009883a 	mov	r4,r20
 400ceec:	b0800005 	stb	r2,0(r22)
 400cef0:	01400284 	movi	r5,10
 400cef4:	4009d1c0 	call	4009d1c <__divsi3>
 400cef8:	1029883a 	mov	r20,r2
 400cefc:	b0ffffc4 	addi	r3,r22,-1
 400cf00:	b8bff416 	blt	r23,r2,400ced4 <__reset+0xfb00bed4>
 400cf04:	11400c04 	addi	r5,r2,48
 400cf08:	b17fffc5 	stb	r5,-1(r22)
 400cf0c:	d8811fc4 	addi	r2,sp,1151
 400cf10:	e013883a 	mov	r9,fp
 400cf14:	18803e2e 	bgeu	r3,r2,400d010 <___vfprintf_internal_r+0x1e5c>
 400cf18:	b007883a 	mov	r3,r22
 400cf1c:	d9012044 	addi	r4,sp,1153
 400cf20:	00000206 	br	400cf2c <___vfprintf_internal_r+0x1d78>
 400cf24:	19400003 	ldbu	r5,0(r3)
 400cf28:	18c00044 	addi	r3,r3,1
 400cf2c:	21400005 	stb	r5,0(r4)
 400cf30:	21000044 	addi	r4,r4,1
 400cf34:	10fffb1e 	bne	r2,r3,400cf24 <__reset+0xfb00bf24>
 400cf38:	d8c12004 	addi	r3,sp,1152
 400cf3c:	1d87c83a 	sub	r3,r3,r22
 400cf40:	d9012044 	addi	r4,sp,1153
 400cf44:	20c7883a 	add	r3,r4,r3
 400cf48:	003fb006 	br	400ce0c <__reset+0xfb00be0c>
 400cf4c:	e5c00044 	addi	r23,fp,1
 400cf50:	003e7406 	br	400c924 <__reset+0xfb00b924>
 400cf54:	d8c12217 	ldw	r3,1160(sp)
 400cf58:	003e9906 	br	400c9c0 <__reset+0xfb00b9c0>
 400cf5c:	d9012d17 	ldw	r4,1204(sp)
 400cf60:	ac800043 	ldbu	r18,1(r21)
 400cf64:	b82b883a 	mov	r21,r23
 400cf68:	20c00017 	ldw	r3,0(r4)
 400cf6c:	20800104 	addi	r2,r4,4
 400cf70:	d8812d15 	stw	r2,1204(sp)
 400cf74:	18002116 	blt	r3,zero,400cffc <___vfprintf_internal_r+0x1e48>
 400cf78:	94803fcc 	andi	r18,r18,255
 400cf7c:	9480201c 	xori	r18,r18,128
 400cf80:	94bfe004 	addi	r18,r18,-128
 400cf84:	0038e706 	br	400b324 <__reset+0xfb00a324>
 400cf88:	80a0703a 	and	r16,r16,r2
 400cf8c:	803fa61e 	bne	r16,zero,400ce28 <__reset+0xfb00be28>
 400cf90:	d8812b17 	ldw	r2,1196(sp)
 400cf94:	d8812815 	stw	r2,1184(sp)
 400cf98:	103e9d0e 	bge	r2,zero,400ca10 <__reset+0xfb00ba10>
 400cf9c:	003fa706 	br	400ce3c <__reset+0xfb00be3c>
 400cfa0:	00800084 	movi	r2,2
 400cfa4:	1529c83a 	sub	r20,r2,r20
 400cfa8:	003fbf06 	br	400cea8 <__reset+0xfb00bea8>
 400cfac:	00800b44 	movi	r2,45
 400cfb0:	0529c83a 	sub	r20,zero,r20
 400cfb4:	d8812005 	stb	r2,1152(sp)
 400cfb8:	003f8c06 	br	400cdec <__reset+0xfb00bdec>
 400cfbc:	008011c4 	movi	r2,71
 400cfc0:	90be6926 	beq	r18,r2,400c968 <__reset+0xfb00b968>
 400cfc4:	003e6a06 	br	400c970 <__reset+0xfb00b970>
 400cfc8:	00bfffc4 	movi	r2,-1
 400cfcc:	d8812c15 	stw	r2,1200(sp)
 400cfd0:	0039ad06 	br	400b688 <__reset+0xfb00a688>
 400cfd4:	1007883a 	mov	r3,r2
 400cfd8:	003e7906 	br	400c9c0 <__reset+0xfb00b9c0>
 400cfdc:	e000021e 	bne	fp,zero,400cfe8 <___vfprintf_internal_r+0x1e34>
 400cfe0:	8400004c 	andi	r16,r16,1
 400cfe4:	80000e26 	beq	r16,zero,400d020 <___vfprintf_internal_r+0x1e6c>
 400cfe8:	e7000084 	addi	fp,fp,2
 400cfec:	df012b15 	stw	fp,1196(sp)
 400cff0:	df012815 	stw	fp,1184(sp)
 400cff4:	e03e860e 	bge	fp,zero,400ca10 <__reset+0xfb00ba10>
 400cff8:	003f9006 	br	400ce3c <__reset+0xfb00be3c>
 400cffc:	94803fcc 	andi	r18,r18,255
 400d000:	9480201c 	xori	r18,r18,128
 400d004:	00ffffc4 	movi	r3,-1
 400d008:	94bfe004 	addi	r18,r18,-128
 400d00c:	0038c506 	br	400b324 <__reset+0xfb00a324>
 400d010:	d8c12044 	addi	r3,sp,1153
 400d014:	003f7d06 	br	400ce0c <__reset+0xfb00be0c>
 400d018:	dd012417 	ldw	r20,1168(sp)
 400d01c:	003f6d06 	br	400cdd4 <__reset+0xfb00bdd4>
 400d020:	00c00044 	movi	r3,1
 400d024:	d8c12815 	stw	r3,1184(sp)
 400d028:	d8c12b15 	stw	r3,1196(sp)
 400d02c:	003e7806 	br	400ca10 <__reset+0xfb00ba10>

0400d030 <__vfprintf_internal>:
 400d030:	00810234 	movhi	r2,1032
 400d034:	10a37104 	addi	r2,r2,-29244
 400d038:	2007883a 	mov	r3,r4
 400d03c:	11000017 	ldw	r4,0(r2)
 400d040:	2805883a 	mov	r2,r5
 400d044:	300f883a 	mov	r7,r6
 400d048:	180b883a 	mov	r5,r3
 400d04c:	100d883a 	mov	r6,r2
 400d050:	400b1b41 	jmpi	400b1b4 <___vfprintf_internal_r>

0400d054 <_vsnprintf_r>:
 400d054:	deffe604 	addi	sp,sp,-104
 400d058:	dc401815 	stw	r17,96(sp)
 400d05c:	dc001715 	stw	r16,92(sp)
 400d060:	dfc01915 	stw	ra,100(sp)
 400d064:	3021883a 	mov	r16,r6
 400d068:	2023883a 	mov	r17,r4
 400d06c:	30002016 	blt	r6,zero,400d0f0 <_vsnprintf_r+0x9c>
 400d070:	00808204 	movi	r2,520
 400d074:	d880030d 	sth	r2,12(sp)
 400d078:	d9400015 	stw	r5,0(sp)
 400d07c:	d9400415 	stw	r5,16(sp)
 400d080:	3000161e 	bne	r6,zero,400d0dc <_vsnprintf_r+0x88>
 400d084:	0005883a 	mov	r2,zero
 400d088:	00c10234 	movhi	r3,1032
 400d08c:	18e37104 	addi	r3,r3,-29244
 400d090:	19000017 	ldw	r4,0(r3)
 400d094:	380d883a 	mov	r6,r7
 400d098:	d9c01a17 	ldw	r7,104(sp)
 400d09c:	d8800215 	stw	r2,8(sp)
 400d0a0:	d8800515 	stw	r2,20(sp)
 400d0a4:	d80b883a 	mov	r5,sp
 400d0a8:	00bfffc4 	movi	r2,-1
 400d0ac:	d880038d 	sth	r2,14(sp)
 400d0b0:	400b1b40 	call	400b1b4 <___vfprintf_internal_r>
 400d0b4:	00ffffc4 	movi	r3,-1
 400d0b8:	10c00a16 	blt	r2,r3,400d0e4 <_vsnprintf_r+0x90>
 400d0bc:	80000226 	beq	r16,zero,400d0c8 <_vsnprintf_r+0x74>
 400d0c0:	d8c00017 	ldw	r3,0(sp)
 400d0c4:	18000005 	stb	zero,0(r3)
 400d0c8:	dfc01917 	ldw	ra,100(sp)
 400d0cc:	dc401817 	ldw	r17,96(sp)
 400d0d0:	dc001717 	ldw	r16,92(sp)
 400d0d4:	dec01a04 	addi	sp,sp,104
 400d0d8:	f800283a 	ret
 400d0dc:	30bfffc4 	addi	r2,r6,-1
 400d0e0:	003fe906 	br	400d088 <__reset+0xfb00c088>
 400d0e4:	00c022c4 	movi	r3,139
 400d0e8:	88c00015 	stw	r3,0(r17)
 400d0ec:	003ff306 	br	400d0bc <__reset+0xfb00c0bc>
 400d0f0:	008022c4 	movi	r2,139
 400d0f4:	20800015 	stw	r2,0(r4)
 400d0f8:	00bfffc4 	movi	r2,-1
 400d0fc:	003ff206 	br	400d0c8 <__reset+0xfb00c0c8>

0400d100 <vsnprintf>:
 400d100:	00810234 	movhi	r2,1032
 400d104:	10a37104 	addi	r2,r2,-29244
 400d108:	2011883a 	mov	r8,r4
 400d10c:	11000017 	ldw	r4,0(r2)
 400d110:	defffe04 	addi	sp,sp,-8
 400d114:	2807883a 	mov	r3,r5
 400d118:	3005883a 	mov	r2,r6
 400d11c:	d9c00015 	stw	r7,0(sp)
 400d120:	400b883a 	mov	r5,r8
 400d124:	180d883a 	mov	r6,r3
 400d128:	100f883a 	mov	r7,r2
 400d12c:	dfc00115 	stw	ra,4(sp)
 400d130:	400d0540 	call	400d054 <_vsnprintf_r>
 400d134:	dfc00117 	ldw	ra,4(sp)
 400d138:	dec00204 	addi	sp,sp,8
 400d13c:	f800283a 	ret

0400d140 <__swsetup_r>:
 400d140:	00810234 	movhi	r2,1032
 400d144:	10a37104 	addi	r2,r2,-29244
 400d148:	10800017 	ldw	r2,0(r2)
 400d14c:	defffd04 	addi	sp,sp,-12
 400d150:	dc400115 	stw	r17,4(sp)
 400d154:	dc000015 	stw	r16,0(sp)
 400d158:	dfc00215 	stw	ra,8(sp)
 400d15c:	2023883a 	mov	r17,r4
 400d160:	2821883a 	mov	r16,r5
 400d164:	10000226 	beq	r2,zero,400d170 <__swsetup_r+0x30>
 400d168:	10c00e17 	ldw	r3,56(r2)
 400d16c:	18003d26 	beq	r3,zero,400d264 <__swsetup_r+0x124>
 400d170:	8080030b 	ldhu	r2,12(r16)
 400d174:	10c0020c 	andi	r3,r2,8
 400d178:	18ffffcc 	andi	r3,r3,65535
 400d17c:	18e0001c 	xori	r3,r3,32768
 400d180:	18e00004 	addi	r3,r3,-32768
 400d184:	18001226 	beq	r3,zero,400d1d0 <__swsetup_r+0x90>
 400d188:	80c00417 	ldw	r3,16(r16)
 400d18c:	18001f26 	beq	r3,zero,400d20c <__swsetup_r+0xcc>
 400d190:	1100004c 	andi	r4,r2,1
 400d194:	2000261e 	bne	r4,zero,400d230 <__swsetup_r+0xf0>
 400d198:	1080008c 	andi	r2,r2,2
 400d19c:	10bfffcc 	andi	r2,r2,65535
 400d1a0:	10a0001c 	xori	r2,r2,32768
 400d1a4:	10a00004 	addi	r2,r2,-32768
 400d1a8:	1000311e 	bne	r2,zero,400d270 <__swsetup_r+0x130>
 400d1ac:	80800517 	ldw	r2,20(r16)
 400d1b0:	80800215 	stw	r2,8(r16)
 400d1b4:	18002326 	beq	r3,zero,400d244 <__swsetup_r+0x104>
 400d1b8:	0005883a 	mov	r2,zero
 400d1bc:	dfc00217 	ldw	ra,8(sp)
 400d1c0:	dc400117 	ldw	r17,4(sp)
 400d1c4:	dc000017 	ldw	r16,0(sp)
 400d1c8:	dec00304 	addi	sp,sp,12
 400d1cc:	f800283a 	ret
 400d1d0:	10c0040c 	andi	r3,r2,16
 400d1d4:	18ffffcc 	andi	r3,r3,65535
 400d1d8:	18e0001c 	xori	r3,r3,32768
 400d1dc:	18e00004 	addi	r3,r3,-32768
 400d1e0:	18001e26 	beq	r3,zero,400d25c <__swsetup_r+0x11c>
 400d1e4:	10c0010c 	andi	r3,r2,4
 400d1e8:	18ffffcc 	andi	r3,r3,65535
 400d1ec:	18e0001c 	xori	r3,r3,32768
 400d1f0:	18e00004 	addi	r3,r3,-32768
 400d1f4:	1800211e 	bne	r3,zero,400d27c <__swsetup_r+0x13c>
 400d1f8:	80c00417 	ldw	r3,16(r16)
 400d1fc:	11400214 	ori	r5,r2,8
 400d200:	8140030d 	sth	r5,12(r16)
 400d204:	2805883a 	mov	r2,r5
 400d208:	183fe11e 	bne	r3,zero,400d190 <__reset+0xfb00c190>
 400d20c:	1140a00c 	andi	r5,r2,640
 400d210:	01008004 	movi	r4,512
 400d214:	293fde26 	beq	r5,r4,400d190 <__reset+0xfb00c190>
 400d218:	8809883a 	mov	r4,r17
 400d21c:	800b883a 	mov	r5,r16
 400d220:	400fb3c0 	call	400fb3c <__smakebuf_r>
 400d224:	8080030b 	ldhu	r2,12(r16)
 400d228:	80c00417 	ldw	r3,16(r16)
 400d22c:	003fd806 	br	400d190 <__reset+0xfb00c190>
 400d230:	80800517 	ldw	r2,20(r16)
 400d234:	80000215 	stw	zero,8(r16)
 400d238:	0085c83a 	sub	r2,zero,r2
 400d23c:	80800615 	stw	r2,24(r16)
 400d240:	183fdd1e 	bne	r3,zero,400d1b8 <__reset+0xfb00c1b8>
 400d244:	8080030b 	ldhu	r2,12(r16)
 400d248:	1080200c 	andi	r2,r2,128
 400d24c:	10bfffcc 	andi	r2,r2,65535
 400d250:	10a0001c 	xori	r2,r2,32768
 400d254:	10a00004 	addi	r2,r2,-32768
 400d258:	103fd826 	beq	r2,zero,400d1bc <__reset+0xfb00c1bc>
 400d25c:	00bfffc4 	movi	r2,-1
 400d260:	003fd606 	br	400d1bc <__reset+0xfb00c1bc>
 400d264:	1009883a 	mov	r4,r2
 400d268:	400edc80 	call	400edc8 <__sinit>
 400d26c:	003fc006 	br	400d170 <__reset+0xfb00c170>
 400d270:	0005883a 	mov	r2,zero
 400d274:	80800215 	stw	r2,8(r16)
 400d278:	003fce06 	br	400d1b4 <__reset+0xfb00c1b4>
 400d27c:	81400c17 	ldw	r5,48(r16)
 400d280:	28000626 	beq	r5,zero,400d29c <__swsetup_r+0x15c>
 400d284:	80c01004 	addi	r3,r16,64
 400d288:	28c00326 	beq	r5,r3,400d298 <__swsetup_r+0x158>
 400d28c:	8809883a 	mov	r4,r17
 400d290:	400f14c0 	call	400f14c <_free_r>
 400d294:	8080030b 	ldhu	r2,12(r16)
 400d298:	80000c15 	stw	zero,48(r16)
 400d29c:	80c00417 	ldw	r3,16(r16)
 400d2a0:	013ff6c4 	movi	r4,-37
 400d2a4:	2084703a 	and	r2,r4,r2
 400d2a8:	80000115 	stw	zero,4(r16)
 400d2ac:	80c00015 	stw	r3,0(r16)
 400d2b0:	003fd206 	br	400d1fc <__reset+0xfb00c1fc>

0400d2b4 <quorem>:
 400d2b4:	defff204 	addi	sp,sp,-56
 400d2b8:	dd000815 	stw	r20,32(sp)
 400d2bc:	20800417 	ldw	r2,16(r4)
 400d2c0:	2d000417 	ldw	r20,16(r5)
 400d2c4:	dcc00715 	stw	r19,28(sp)
 400d2c8:	dfc00d15 	stw	ra,52(sp)
 400d2cc:	df000c15 	stw	fp,48(sp)
 400d2d0:	ddc00b15 	stw	r23,44(sp)
 400d2d4:	dd800a15 	stw	r22,40(sp)
 400d2d8:	dd400915 	stw	r21,36(sp)
 400d2dc:	dc800615 	stw	r18,24(sp)
 400d2e0:	dc400515 	stw	r17,20(sp)
 400d2e4:	dc000415 	stw	r16,16(sp)
 400d2e8:	d9400015 	stw	r5,0(sp)
 400d2ec:	2027883a 	mov	r19,r4
 400d2f0:	15007d16 	blt	r2,r20,400d4e8 <quorem+0x234>
 400d2f4:	a0800104 	addi	r2,r20,4
 400d2f8:	1085883a 	add	r2,r2,r2
 400d2fc:	1085883a 	add	r2,r2,r2
 400d300:	28ad883a 	add	r22,r5,r2
 400d304:	2085883a 	add	r2,r4,r2
 400d308:	10800017 	ldw	r2,0(r2)
 400d30c:	b1400017 	ldw	r5,0(r22)
 400d310:	a53fffc4 	addi	r20,r20,-1
 400d314:	1009883a 	mov	r4,r2
 400d318:	29400044 	addi	r5,r5,1
 400d31c:	d8800115 	stw	r2,4(sp)
 400d320:	4009dc80 	call	4009dc8 <__udivsi3>
 400d324:	1025883a 	mov	r18,r2
 400d328:	d8800017 	ldw	r2,0(sp)
 400d32c:	9f000504 	addi	fp,r19,20
 400d330:	14000504 	addi	r16,r2,20
 400d334:	90003626 	beq	r18,zero,400d410 <quorem+0x15c>
 400d338:	802b883a 	mov	r21,r16
 400d33c:	e023883a 	mov	r17,fp
 400d340:	0007883a 	mov	r3,zero
 400d344:	002f883a 	mov	r23,zero
 400d348:	a9800017 	ldw	r6,0(r21)
 400d34c:	900b883a 	mov	r5,r18
 400d350:	d8c00315 	stw	r3,12(sp)
 400d354:	313fffcc 	andi	r4,r6,65535
 400d358:	d9800215 	stw	r6,8(sp)
 400d35c:	4009dd80 	call	4009dd8 <__mulsi3>
 400d360:	d9800217 	ldw	r6,8(sp)
 400d364:	d8c00317 	ldw	r3,12(sp)
 400d368:	900b883a 	mov	r5,r18
 400d36c:	3008d43a 	srli	r4,r6,16
 400d370:	1887883a 	add	r3,r3,r2
 400d374:	d8c00315 	stw	r3,12(sp)
 400d378:	4009dd80 	call	4009dd8 <__mulsi3>
 400d37c:	89400017 	ldw	r5,0(r17)
 400d380:	d8c00317 	ldw	r3,12(sp)
 400d384:	ad400104 	addi	r21,r21,4
 400d388:	293fffcc 	andi	r4,r5,65535
 400d38c:	1810d43a 	srli	r8,r3,16
 400d390:	25c9883a 	add	r4,r4,r23
 400d394:	18ffffcc 	andi	r3,r3,65535
 400d398:	20c9c83a 	sub	r4,r4,r3
 400d39c:	280cd43a 	srli	r6,r5,16
 400d3a0:	4085883a 	add	r2,r8,r2
 400d3a4:	2007d43a 	srai	r3,r4,16
 400d3a8:	117fffcc 	andi	r5,r2,65535
 400d3ac:	314bc83a 	sub	r5,r6,r5
 400d3b0:	28cb883a 	add	r5,r5,r3
 400d3b4:	8940008d 	sth	r5,2(r17)
 400d3b8:	8900000d 	sth	r4,0(r17)
 400d3bc:	1006d43a 	srli	r3,r2,16
 400d3c0:	282fd43a 	srai	r23,r5,16
 400d3c4:	8c400104 	addi	r17,r17,4
 400d3c8:	b57fdf2e 	bgeu	r22,r21,400d348 <__reset+0xfb00c348>
 400d3cc:	d8c00117 	ldw	r3,4(sp)
 400d3d0:	18000f1e 	bne	r3,zero,400d410 <quorem+0x15c>
 400d3d4:	a0800144 	addi	r2,r20,5
 400d3d8:	1085883a 	add	r2,r2,r2
 400d3dc:	1085883a 	add	r2,r2,r2
 400d3e0:	9887883a 	add	r3,r19,r2
 400d3e4:	18bfff04 	addi	r2,r3,-4
 400d3e8:	e080082e 	bgeu	fp,r2,400d40c <quorem+0x158>
 400d3ec:	18ffff17 	ldw	r3,-4(r3)
 400d3f0:	18000326 	beq	r3,zero,400d400 <quorem+0x14c>
 400d3f4:	00000506 	br	400d40c <quorem+0x158>
 400d3f8:	10c00017 	ldw	r3,0(r2)
 400d3fc:	1800031e 	bne	r3,zero,400d40c <quorem+0x158>
 400d400:	10bfff04 	addi	r2,r2,-4
 400d404:	a53fffc4 	addi	r20,r20,-1
 400d408:	e0bffb36 	bltu	fp,r2,400d3f8 <__reset+0xfb00c3f8>
 400d40c:	9d000415 	stw	r20,16(r19)
 400d410:	d9400017 	ldw	r5,0(sp)
 400d414:	9809883a 	mov	r4,r19
 400d418:	40108b40 	call	40108b4 <__mcmp>
 400d41c:	10002516 	blt	r2,zero,400d4b4 <quorem+0x200>
 400d420:	94800044 	addi	r18,r18,1
 400d424:	e007883a 	mov	r3,fp
 400d428:	000d883a 	mov	r6,zero
 400d42c:	18800017 	ldw	r2,0(r3)
 400d430:	82000017 	ldw	r8,0(r16)
 400d434:	84000104 	addi	r16,r16,4
 400d438:	11ffffcc 	andi	r7,r2,65535
 400d43c:	413fffcc 	andi	r4,r8,65535
 400d440:	398d883a 	add	r6,r7,r6
 400d444:	310fc83a 	sub	r7,r6,r4
 400d448:	4010d43a 	srli	r8,r8,16
 400d44c:	100cd43a 	srli	r6,r2,16
 400d450:	3809d43a 	srai	r4,r7,16
 400d454:	19c0000d 	sth	r7,0(r3)
 400d458:	320dc83a 	sub	r6,r6,r8
 400d45c:	310d883a 	add	r6,r6,r4
 400d460:	1980008d 	sth	r6,2(r3)
 400d464:	300dd43a 	srai	r6,r6,16
 400d468:	18c00104 	addi	r3,r3,4
 400d46c:	b43fef2e 	bgeu	r22,r16,400d42c <__reset+0xfb00c42c>
 400d470:	a0800144 	addi	r2,r20,5
 400d474:	1085883a 	add	r2,r2,r2
 400d478:	1085883a 	add	r2,r2,r2
 400d47c:	9885883a 	add	r2,r19,r2
 400d480:	10c00017 	ldw	r3,0(r2)
 400d484:	18000b1e 	bne	r3,zero,400d4b4 <quorem+0x200>
 400d488:	10ffff04 	addi	r3,r2,-4
 400d48c:	e0c0082e 	bgeu	fp,r3,400d4b0 <quorem+0x1fc>
 400d490:	10bfff17 	ldw	r2,-4(r2)
 400d494:	10000326 	beq	r2,zero,400d4a4 <quorem+0x1f0>
 400d498:	00000506 	br	400d4b0 <quorem+0x1fc>
 400d49c:	18800017 	ldw	r2,0(r3)
 400d4a0:	1000031e 	bne	r2,zero,400d4b0 <quorem+0x1fc>
 400d4a4:	18ffff04 	addi	r3,r3,-4
 400d4a8:	a53fffc4 	addi	r20,r20,-1
 400d4ac:	e0fffb36 	bltu	fp,r3,400d49c <__reset+0xfb00c49c>
 400d4b0:	9d000415 	stw	r20,16(r19)
 400d4b4:	9005883a 	mov	r2,r18
 400d4b8:	dfc00d17 	ldw	ra,52(sp)
 400d4bc:	df000c17 	ldw	fp,48(sp)
 400d4c0:	ddc00b17 	ldw	r23,44(sp)
 400d4c4:	dd800a17 	ldw	r22,40(sp)
 400d4c8:	dd400917 	ldw	r21,36(sp)
 400d4cc:	dd000817 	ldw	r20,32(sp)
 400d4d0:	dcc00717 	ldw	r19,28(sp)
 400d4d4:	dc800617 	ldw	r18,24(sp)
 400d4d8:	dc400517 	ldw	r17,20(sp)
 400d4dc:	dc000417 	ldw	r16,16(sp)
 400d4e0:	dec00e04 	addi	sp,sp,56
 400d4e4:	f800283a 	ret
 400d4e8:	0005883a 	mov	r2,zero
 400d4ec:	003ff206 	br	400d4b8 <__reset+0xfb00c4b8>

0400d4f0 <_dtoa_r>:
 400d4f0:	20801017 	ldw	r2,64(r4)
 400d4f4:	deffdf04 	addi	sp,sp,-132
 400d4f8:	dcc01a15 	stw	r19,104(sp)
 400d4fc:	dc801915 	stw	r18,100(sp)
 400d500:	dc401815 	stw	r17,96(sp)
 400d504:	dc001715 	stw	r16,92(sp)
 400d508:	dfc02015 	stw	ra,128(sp)
 400d50c:	df001f15 	stw	fp,124(sp)
 400d510:	ddc01e15 	stw	r23,120(sp)
 400d514:	dd801d15 	stw	r22,116(sp)
 400d518:	dd401c15 	stw	r21,112(sp)
 400d51c:	dd001b15 	stw	r20,108(sp)
 400d520:	d9400315 	stw	r5,12(sp)
 400d524:	d9c00415 	stw	r7,16(sp)
 400d528:	2021883a 	mov	r16,r4
 400d52c:	3025883a 	mov	r18,r6
 400d530:	dcc02317 	ldw	r19,140(sp)
 400d534:	3023883a 	mov	r17,r6
 400d538:	10000826 	beq	r2,zero,400d55c <_dtoa_r+0x6c>
 400d53c:	20c01117 	ldw	r3,68(r4)
 400d540:	01800044 	movi	r6,1
 400d544:	100b883a 	mov	r5,r2
 400d548:	30cc983a 	sll	r6,r6,r3
 400d54c:	10c00115 	stw	r3,4(r2)
 400d550:	11800215 	stw	r6,8(r2)
 400d554:	40100100 	call	4010010 <_Bfree>
 400d558:	80001015 	stw	zero,64(r16)
 400d55c:	90002f16 	blt	r18,zero,400d61c <_dtoa_r+0x12c>
 400d560:	98000015 	stw	zero,0(r19)
 400d564:	90dffc2c 	andhi	r3,r18,32752
 400d568:	009ffc34 	movhi	r2,32752
 400d56c:	18801c26 	beq	r3,r2,400d5e0 <_dtoa_r+0xf0>
 400d570:	d9000317 	ldw	r4,12(sp)
 400d574:	880b883a 	mov	r5,r17
 400d578:	000d883a 	mov	r6,zero
 400d57c:	000f883a 	mov	r7,zero
 400d580:	4012c380 	call	4012c38 <__nedf2>
 400d584:	10002c1e 	bne	r2,zero,400d638 <_dtoa_r+0x148>
 400d588:	d9002217 	ldw	r4,136(sp)
 400d58c:	d9c02417 	ldw	r7,144(sp)
 400d590:	00800044 	movi	r2,1
 400d594:	20800015 	stw	r2,0(r4)
 400d598:	38019426 	beq	r7,zero,400dbec <_dtoa_r+0x6fc>
 400d59c:	008101f4 	movhi	r2,1031
 400d5a0:	10954c44 	addi	r2,r2,21809
 400d5a4:	38800015 	stw	r2,0(r7)
 400d5a8:	15ffffc4 	addi	r23,r2,-1
 400d5ac:	b805883a 	mov	r2,r23
 400d5b0:	dfc02017 	ldw	ra,128(sp)
 400d5b4:	df001f17 	ldw	fp,124(sp)
 400d5b8:	ddc01e17 	ldw	r23,120(sp)
 400d5bc:	dd801d17 	ldw	r22,116(sp)
 400d5c0:	dd401c17 	ldw	r21,112(sp)
 400d5c4:	dd001b17 	ldw	r20,108(sp)
 400d5c8:	dcc01a17 	ldw	r19,104(sp)
 400d5cc:	dc801917 	ldw	r18,100(sp)
 400d5d0:	dc401817 	ldw	r17,96(sp)
 400d5d4:	dc001717 	ldw	r16,92(sp)
 400d5d8:	dec02104 	addi	sp,sp,132
 400d5dc:	f800283a 	ret
 400d5e0:	d8c02217 	ldw	r3,136(sp)
 400d5e4:	d9000317 	ldw	r4,12(sp)
 400d5e8:	0089c3c4 	movi	r2,9999
 400d5ec:	18800015 	stw	r2,0(r3)
 400d5f0:	20016c26 	beq	r4,zero,400dba4 <_dtoa_r+0x6b4>
 400d5f4:	05c101f4 	movhi	r23,1031
 400d5f8:	bdd55804 	addi	r23,r23,21856
 400d5fc:	d9c02417 	ldw	r7,144(sp)
 400d600:	383fea26 	beq	r7,zero,400d5ac <__reset+0xfb00c5ac>
 400d604:	b88000c7 	ldb	r2,3(r23)
 400d608:	10016d1e 	bne	r2,zero,400dbc0 <_dtoa_r+0x6d0>
 400d60c:	b88000c4 	addi	r2,r23,3
 400d610:	d8c02417 	ldw	r3,144(sp)
 400d614:	18800015 	stw	r2,0(r3)
 400d618:	003fe406 	br	400d5ac <__reset+0xfb00c5ac>
 400d61c:	04600034 	movhi	r17,32768
 400d620:	8c7fffc4 	addi	r17,r17,-1
 400d624:	9462703a 	and	r17,r18,r17
 400d628:	00800044 	movi	r2,1
 400d62c:	98800015 	stw	r2,0(r19)
 400d630:	8825883a 	mov	r18,r17
 400d634:	003fcb06 	br	400d564 <__reset+0xfb00c564>
 400d638:	d9400317 	ldw	r5,12(sp)
 400d63c:	9028d53a 	srli	r20,r18,20
 400d640:	d8800204 	addi	r2,sp,8
 400d644:	d8800015 	stw	r2,0(sp)
 400d648:	8009883a 	mov	r4,r16
 400d64c:	880d883a 	mov	r6,r17
 400d650:	d9c00104 	addi	r7,sp,4
 400d654:	4010c5c0 	call	4010c5c <__d2b>
 400d658:	a501ffcc 	andi	r20,r20,2047
 400d65c:	1039883a 	mov	fp,r2
 400d660:	a001591e 	bne	r20,zero,400dbc8 <_dtoa_r+0x6d8>
 400d664:	dd400217 	ldw	r21,8(sp)
 400d668:	dd000117 	ldw	r20,4(sp)
 400d66c:	00befbc4 	movi	r2,-1041
 400d670:	ad29883a 	add	r20,r21,r20
 400d674:	a082d216 	blt	r20,r2,400e1c0 <_dtoa_r+0xcd0>
 400d678:	d8c00317 	ldw	r3,12(sp)
 400d67c:	013f0384 	movi	r4,-1010
 400d680:	2509c83a 	sub	r4,r4,r20
 400d684:	a0810484 	addi	r2,r20,1042
 400d688:	9124983a 	sll	r18,r18,r4
 400d68c:	1884d83a 	srl	r2,r3,r2
 400d690:	9088b03a 	or	r4,r18,r2
 400d694:	4012d5c0 	call	4012d5c <__floatunsidf>
 400d698:	1009883a 	mov	r4,r2
 400d69c:	017f8434 	movhi	r5,65040
 400d6a0:	00800044 	movi	r2,1
 400d6a4:	194b883a 	add	r5,r3,r5
 400d6a8:	a53fffc4 	addi	r20,r20,-1
 400d6ac:	d8800f15 	stw	r2,60(sp)
 400d6b0:	000d883a 	mov	r6,zero
 400d6b4:	01cffe34 	movhi	r7,16376
 400d6b8:	40095bc0 	call	40095bc <__subdf3>
 400d6bc:	1009883a 	mov	r4,r2
 400d6c0:	180b883a 	mov	r5,r3
 400d6c4:	0198dbf4 	movhi	r6,25455
 400d6c8:	3190d844 	addi	r6,r6,17249
 400d6cc:	01cff4f4 	movhi	r7,16339
 400d6d0:	39e1e9c4 	addi	r7,r7,-30809
 400d6d4:	400961c0 	call	400961c <__muldf3>
 400d6d8:	180b883a 	mov	r5,r3
 400d6dc:	01a2d874 	movhi	r6,35681
 400d6e0:	31b22cc4 	addi	r6,r6,-14157
 400d6e4:	01cff1f4 	movhi	r7,16327
 400d6e8:	39e28a04 	addi	r7,r7,-30168
 400d6ec:	1009883a 	mov	r4,r2
 400d6f0:	40095680 	call	4009568 <__adddf3>
 400d6f4:	a009883a 	mov	r4,r20
 400d6f8:	1027883a 	mov	r19,r2
 400d6fc:	1825883a 	mov	r18,r3
 400d700:	4009b100 	call	4009b10 <__floatsidf>
 400d704:	1009883a 	mov	r4,r2
 400d708:	180b883a 	mov	r5,r3
 400d70c:	019427f4 	movhi	r6,20639
 400d710:	319e7ec4 	addi	r6,r6,31227
 400d714:	01cff4f4 	movhi	r7,16339
 400d718:	39d104c4 	addi	r7,r7,17427
 400d71c:	400961c0 	call	400961c <__muldf3>
 400d720:	9809883a 	mov	r4,r19
 400d724:	900b883a 	mov	r5,r18
 400d728:	100d883a 	mov	r6,r2
 400d72c:	180f883a 	mov	r7,r3
 400d730:	40095680 	call	4009568 <__adddf3>
 400d734:	1009883a 	mov	r4,r2
 400d738:	180b883a 	mov	r5,r3
 400d73c:	1027883a 	mov	r19,r2
 400d740:	1825883a 	mov	r18,r3
 400d744:	4009be40 	call	4009be4 <__fixdfsi>
 400d748:	9809883a 	mov	r4,r19
 400d74c:	900b883a 	mov	r5,r18
 400d750:	000d883a 	mov	r6,zero
 400d754:	000f883a 	mov	r7,zero
 400d758:	d8800615 	stw	r2,24(sp)
 400d75c:	4009ab40 	call	4009ab4 <__ltdf2>
 400d760:	10027e16 	blt	r2,zero,400e15c <_dtoa_r+0xc6c>
 400d764:	d8c00617 	ldw	r3,24(sp)
 400d768:	00800584 	movi	r2,22
 400d76c:	10c26c36 	bltu	r2,r3,400e120 <_dtoa_r+0xc30>
 400d770:	180490fa 	slli	r2,r3,3
 400d774:	00c101f4 	movhi	r3,1031
 400d778:	18d57d04 	addi	r3,r3,22004
 400d77c:	d9800317 	ldw	r6,12(sp)
 400d780:	1885883a 	add	r2,r3,r2
 400d784:	11000017 	ldw	r4,0(r2)
 400d788:	11400117 	ldw	r5,4(r2)
 400d78c:	880f883a 	mov	r7,r17
 400d790:	4012c940 	call	4012c94 <__gtdf2>
 400d794:	00828f0e 	bge	zero,r2,400e1d4 <_dtoa_r+0xce4>
 400d798:	d8800617 	ldw	r2,24(sp)
 400d79c:	d8000d15 	stw	zero,52(sp)
 400d7a0:	10bfffc4 	addi	r2,r2,-1
 400d7a4:	d8800615 	stw	r2,24(sp)
 400d7a8:	ad29c83a 	sub	r20,r21,r20
 400d7ac:	a53fffc4 	addi	r20,r20,-1
 400d7b0:	a0026616 	blt	r20,zero,400e14c <_dtoa_r+0xc5c>
 400d7b4:	dd000715 	stw	r20,28(sp)
 400d7b8:	d8000815 	stw	zero,32(sp)
 400d7bc:	d8800617 	ldw	r2,24(sp)
 400d7c0:	10025a16 	blt	r2,zero,400e12c <_dtoa_r+0xc3c>
 400d7c4:	d8c00717 	ldw	r3,28(sp)
 400d7c8:	d8800b15 	stw	r2,44(sp)
 400d7cc:	d8000a15 	stw	zero,40(sp)
 400d7d0:	1887883a 	add	r3,r3,r2
 400d7d4:	d8c00715 	stw	r3,28(sp)
 400d7d8:	d9c00417 	ldw	r7,16(sp)
 400d7dc:	00800244 	movi	r2,9
 400d7e0:	11c10536 	bltu	r2,r7,400dbf8 <_dtoa_r+0x708>
 400d7e4:	00800144 	movi	r2,5
 400d7e8:	11c4c60e 	bge	r2,r7,400eb04 <_dtoa_r+0x1614>
 400d7ec:	39ffff04 	addi	r7,r7,-4
 400d7f0:	d9c00415 	stw	r7,16(sp)
 400d7f4:	0027883a 	mov	r19,zero
 400d7f8:	d9c00417 	ldw	r7,16(sp)
 400d7fc:	008000c4 	movi	r2,3
 400d800:	3883a226 	beq	r7,r2,400e68c <_dtoa_r+0x119c>
 400d804:	11c2bc16 	blt	r2,r7,400e2f8 <_dtoa_r+0xe08>
 400d808:	00800084 	movi	r2,2
 400d80c:	3880fb1e 	bne	r7,r2,400dbfc <_dtoa_r+0x70c>
 400d810:	d8000c15 	stw	zero,48(sp)
 400d814:	d9002117 	ldw	r4,132(sp)
 400d818:	0103ae0e 	bge	zero,r4,400e6d4 <_dtoa_r+0x11e4>
 400d81c:	2025883a 	mov	r18,r4
 400d820:	d9000e15 	stw	r4,56(sp)
 400d824:	d9000915 	stw	r4,36(sp)
 400d828:	80001115 	stw	zero,68(r16)
 400d82c:	008005c4 	movi	r2,23
 400d830:	1484b22e 	bgeu	r2,r18,400eafc <_dtoa_r+0x160c>
 400d834:	00c00044 	movi	r3,1
 400d838:	00800104 	movi	r2,4
 400d83c:	1085883a 	add	r2,r2,r2
 400d840:	11000504 	addi	r4,r2,20
 400d844:	180b883a 	mov	r5,r3
 400d848:	18c00044 	addi	r3,r3,1
 400d84c:	913ffb2e 	bgeu	r18,r4,400d83c <__reset+0xfb00c83c>
 400d850:	81401115 	stw	r5,68(r16)
 400d854:	8009883a 	mov	r4,r16
 400d858:	400ff680 	call	400ff68 <_Balloc>
 400d85c:	102f883a 	mov	r23,r2
 400d860:	80801015 	stw	r2,64(r16)
 400d864:	00800384 	movi	r2,14
 400d868:	1480f036 	bltu	r2,r18,400dc2c <_dtoa_r+0x73c>
 400d86c:	9800ef26 	beq	r19,zero,400dc2c <_dtoa_r+0x73c>
 400d870:	d8800617 	ldw	r2,24(sp)
 400d874:	00839c0e 	bge	zero,r2,400e6e8 <_dtoa_r+0x11f8>
 400d878:	d8c00617 	ldw	r3,24(sp)
 400d87c:	108003cc 	andi	r2,r2,15
 400d880:	100490fa 	slli	r2,r2,3
 400d884:	182bd13a 	srai	r21,r3,4
 400d888:	00c101f4 	movhi	r3,1031
 400d88c:	18d57d04 	addi	r3,r3,22004
 400d890:	1885883a 	add	r2,r3,r2
 400d894:	a8c0040c 	andi	r3,r21,16
 400d898:	12800017 	ldw	r10,0(r2)
 400d89c:	15800117 	ldw	r22,4(r2)
 400d8a0:	18038726 	beq	r3,zero,400e6c0 <_dtoa_r+0x11d0>
 400d8a4:	008101f4 	movhi	r2,1031
 400d8a8:	10957304 	addi	r2,r2,21964
 400d8ac:	11800817 	ldw	r6,32(r2)
 400d8b0:	11c00917 	ldw	r7,36(r2)
 400d8b4:	d9000317 	ldw	r4,12(sp)
 400d8b8:	880b883a 	mov	r5,r17
 400d8bc:	da801515 	stw	r10,84(sp)
 400d8c0:	40099000 	call	4009900 <__divdf3>
 400d8c4:	da801517 	ldw	r10,84(sp)
 400d8c8:	d8801015 	stw	r2,64(sp)
 400d8cc:	1829883a 	mov	r20,r3
 400d8d0:	ad4003cc 	andi	r21,r21,15
 400d8d4:	048000c4 	movi	r18,3
 400d8d8:	a8001126 	beq	r21,zero,400d920 <_dtoa_r+0x430>
 400d8dc:	04c101f4 	movhi	r19,1031
 400d8e0:	9cd57304 	addi	r19,r19,21964
 400d8e4:	5005883a 	mov	r2,r10
 400d8e8:	b007883a 	mov	r3,r22
 400d8ec:	a980004c 	andi	r6,r21,1
 400d8f0:	1009883a 	mov	r4,r2
 400d8f4:	a82bd07a 	srai	r21,r21,1
 400d8f8:	180b883a 	mov	r5,r3
 400d8fc:	30000426 	beq	r6,zero,400d910 <_dtoa_r+0x420>
 400d900:	99800017 	ldw	r6,0(r19)
 400d904:	99c00117 	ldw	r7,4(r19)
 400d908:	94800044 	addi	r18,r18,1
 400d90c:	400961c0 	call	400961c <__muldf3>
 400d910:	9cc00204 	addi	r19,r19,8
 400d914:	a83ff51e 	bne	r21,zero,400d8ec <__reset+0xfb00c8ec>
 400d918:	1015883a 	mov	r10,r2
 400d91c:	182d883a 	mov	r22,r3
 400d920:	d9001017 	ldw	r4,64(sp)
 400d924:	a00b883a 	mov	r5,r20
 400d928:	500d883a 	mov	r6,r10
 400d92c:	b00f883a 	mov	r7,r22
 400d930:	40099000 	call	4009900 <__divdf3>
 400d934:	1027883a 	mov	r19,r2
 400d938:	1829883a 	mov	r20,r3
 400d93c:	d8c00d17 	ldw	r3,52(sp)
 400d940:	18000626 	beq	r3,zero,400d95c <_dtoa_r+0x46c>
 400d944:	9809883a 	mov	r4,r19
 400d948:	a00b883a 	mov	r5,r20
 400d94c:	000d883a 	mov	r6,zero
 400d950:	01cffc34 	movhi	r7,16368
 400d954:	4009ab40 	call	4009ab4 <__ltdf2>
 400d958:	10040e16 	blt	r2,zero,400e994 <_dtoa_r+0x14a4>
 400d95c:	9009883a 	mov	r4,r18
 400d960:	4009b100 	call	4009b10 <__floatsidf>
 400d964:	1009883a 	mov	r4,r2
 400d968:	180b883a 	mov	r5,r3
 400d96c:	980d883a 	mov	r6,r19
 400d970:	a00f883a 	mov	r7,r20
 400d974:	400961c0 	call	400961c <__muldf3>
 400d978:	1009883a 	mov	r4,r2
 400d97c:	180b883a 	mov	r5,r3
 400d980:	000d883a 	mov	r6,zero
 400d984:	01d00734 	movhi	r7,16412
 400d988:	40095680 	call	4009568 <__adddf3>
 400d98c:	057f3034 	movhi	r21,64704
 400d990:	1d6b883a 	add	r21,r3,r21
 400d994:	d8c00917 	ldw	r3,36(sp)
 400d998:	1025883a 	mov	r18,r2
 400d99c:	18031f26 	beq	r3,zero,400e61c <_dtoa_r+0x112c>
 400d9a0:	d8800617 	ldw	r2,24(sp)
 400d9a4:	dac00917 	ldw	r11,36(sp)
 400d9a8:	d8801315 	stw	r2,76(sp)
 400d9ac:	d8c00c17 	ldw	r3,48(sp)
 400d9b0:	18039026 	beq	r3,zero,400e7f4 <_dtoa_r+0x1304>
 400d9b4:	58bfffc4 	addi	r2,r11,-1
 400d9b8:	100490fa 	slli	r2,r2,3
 400d9bc:	00c101f4 	movhi	r3,1031
 400d9c0:	18d57d04 	addi	r3,r3,22004
 400d9c4:	0009883a 	mov	r4,zero
 400d9c8:	1885883a 	add	r2,r3,r2
 400d9cc:	11800017 	ldw	r6,0(r2)
 400d9d0:	11c00117 	ldw	r7,4(r2)
 400d9d4:	014ff834 	movhi	r5,16352
 400d9d8:	dac01615 	stw	r11,88(sp)
 400d9dc:	40099000 	call	4009900 <__divdf3>
 400d9e0:	900d883a 	mov	r6,r18
 400d9e4:	a80f883a 	mov	r7,r21
 400d9e8:	1009883a 	mov	r4,r2
 400d9ec:	180b883a 	mov	r5,r3
 400d9f0:	40095bc0 	call	40095bc <__subdf3>
 400d9f4:	a00b883a 	mov	r5,r20
 400d9f8:	9809883a 	mov	r4,r19
 400d9fc:	182b883a 	mov	r21,r3
 400da00:	d8801015 	stw	r2,64(sp)
 400da04:	4009be40 	call	4009be4 <__fixdfsi>
 400da08:	1009883a 	mov	r4,r2
 400da0c:	d8801515 	stw	r2,84(sp)
 400da10:	4009b100 	call	4009b10 <__floatsidf>
 400da14:	9809883a 	mov	r4,r19
 400da18:	a00b883a 	mov	r5,r20
 400da1c:	100d883a 	mov	r6,r2
 400da20:	180f883a 	mov	r7,r3
 400da24:	40095bc0 	call	40095bc <__subdf3>
 400da28:	da401517 	ldw	r9,84(sp)
 400da2c:	d9001017 	ldw	r4,64(sp)
 400da30:	a80b883a 	mov	r5,r21
 400da34:	4d000c04 	addi	r20,r9,48
 400da38:	bd000005 	stb	r20,0(r23)
 400da3c:	100d883a 	mov	r6,r2
 400da40:	180f883a 	mov	r7,r3
 400da44:	bd800044 	addi	r22,r23,1
 400da48:	1025883a 	mov	r18,r2
 400da4c:	1827883a 	mov	r19,r3
 400da50:	4012c940 	call	4012c94 <__gtdf2>
 400da54:	00842216 	blt	zero,r2,400eae0 <_dtoa_r+0x15f0>
 400da58:	0009883a 	mov	r4,zero
 400da5c:	014ffc34 	movhi	r5,16368
 400da60:	900d883a 	mov	r6,r18
 400da64:	980f883a 	mov	r7,r19
 400da68:	40095bc0 	call	40095bc <__subdf3>
 400da6c:	d9001017 	ldw	r4,64(sp)
 400da70:	a80b883a 	mov	r5,r21
 400da74:	100d883a 	mov	r6,r2
 400da78:	180f883a 	mov	r7,r3
 400da7c:	4012c940 	call	4012c94 <__gtdf2>
 400da80:	dac01617 	ldw	r11,88(sp)
 400da84:	00841316 	blt	zero,r2,400ead4 <_dtoa_r+0x15e4>
 400da88:	00800044 	movi	r2,1
 400da8c:	12c0670e 	bge	r2,r11,400dc2c <_dtoa_r+0x73c>
 400da90:	bad7883a 	add	r11,r23,r11
 400da94:	df001115 	stw	fp,68(sp)
 400da98:	dc401215 	stw	r17,72(sp)
 400da9c:	5839883a 	mov	fp,r11
 400daa0:	dc401017 	ldw	r17,64(sp)
 400daa4:	00000806 	br	400dac8 <_dtoa_r+0x5d8>
 400daa8:	40095bc0 	call	40095bc <__subdf3>
 400daac:	1009883a 	mov	r4,r2
 400dab0:	180b883a 	mov	r5,r3
 400dab4:	880d883a 	mov	r6,r17
 400dab8:	a80f883a 	mov	r7,r21
 400dabc:	4009ab40 	call	4009ab4 <__ltdf2>
 400dac0:	1003ee16 	blt	r2,zero,400ea7c <_dtoa_r+0x158c>
 400dac4:	b703f126 	beq	r22,fp,400ea8c <_dtoa_r+0x159c>
 400dac8:	8809883a 	mov	r4,r17
 400dacc:	a80b883a 	mov	r5,r21
 400dad0:	000d883a 	mov	r6,zero
 400dad4:	01d00934 	movhi	r7,16420
 400dad8:	400961c0 	call	400961c <__muldf3>
 400dadc:	000d883a 	mov	r6,zero
 400dae0:	01d00934 	movhi	r7,16420
 400dae4:	9009883a 	mov	r4,r18
 400dae8:	980b883a 	mov	r5,r19
 400daec:	1023883a 	mov	r17,r2
 400daf0:	182b883a 	mov	r21,r3
 400daf4:	400961c0 	call	400961c <__muldf3>
 400daf8:	180b883a 	mov	r5,r3
 400dafc:	1009883a 	mov	r4,r2
 400db00:	1825883a 	mov	r18,r3
 400db04:	1027883a 	mov	r19,r2
 400db08:	4009be40 	call	4009be4 <__fixdfsi>
 400db0c:	1009883a 	mov	r4,r2
 400db10:	1029883a 	mov	r20,r2
 400db14:	4009b100 	call	4009b10 <__floatsidf>
 400db18:	9809883a 	mov	r4,r19
 400db1c:	900b883a 	mov	r5,r18
 400db20:	100d883a 	mov	r6,r2
 400db24:	180f883a 	mov	r7,r3
 400db28:	40095bc0 	call	40095bc <__subdf3>
 400db2c:	a5000c04 	addi	r20,r20,48
 400db30:	b5000005 	stb	r20,0(r22)
 400db34:	1009883a 	mov	r4,r2
 400db38:	180b883a 	mov	r5,r3
 400db3c:	880d883a 	mov	r6,r17
 400db40:	a80f883a 	mov	r7,r21
 400db44:	1025883a 	mov	r18,r2
 400db48:	1827883a 	mov	r19,r3
 400db4c:	4009ab40 	call	4009ab4 <__ltdf2>
 400db50:	b5800044 	addi	r22,r22,1
 400db54:	0009883a 	mov	r4,zero
 400db58:	014ffc34 	movhi	r5,16368
 400db5c:	900d883a 	mov	r6,r18
 400db60:	980f883a 	mov	r7,r19
 400db64:	103fd00e 	bge	r2,zero,400daa8 <__reset+0xfb00caa8>
 400db68:	d9001317 	ldw	r4,76(sp)
 400db6c:	df001117 	ldw	fp,68(sp)
 400db70:	d9000615 	stw	r4,24(sp)
 400db74:	8009883a 	mov	r4,r16
 400db78:	e00b883a 	mov	r5,fp
 400db7c:	40100100 	call	4010010 <_Bfree>
 400db80:	d9c00617 	ldw	r7,24(sp)
 400db84:	d8c02217 	ldw	r3,136(sp)
 400db88:	d9002417 	ldw	r4,144(sp)
 400db8c:	b0000005 	stb	zero,0(r22)
 400db90:	38800044 	addi	r2,r7,1
 400db94:	18800015 	stw	r2,0(r3)
 400db98:	203e8426 	beq	r4,zero,400d5ac <__reset+0xfb00c5ac>
 400db9c:	25800015 	stw	r22,0(r4)
 400dba0:	003e8206 	br	400d5ac <__reset+0xfb00c5ac>
 400dba4:	00800434 	movhi	r2,16
 400dba8:	10bfffc4 	addi	r2,r2,-1
 400dbac:	90a4703a 	and	r18,r18,r2
 400dbb0:	903e901e 	bne	r18,zero,400d5f4 <__reset+0xfb00c5f4>
 400dbb4:	05c101f4 	movhi	r23,1031
 400dbb8:	bdd55504 	addi	r23,r23,21844
 400dbbc:	003e8f06 	br	400d5fc <__reset+0xfb00c5fc>
 400dbc0:	b8800204 	addi	r2,r23,8
 400dbc4:	003e9206 	br	400d610 <__reset+0xfb00c610>
 400dbc8:	01400434 	movhi	r5,16
 400dbcc:	297fffc4 	addi	r5,r5,-1
 400dbd0:	894a703a 	and	r5,r17,r5
 400dbd4:	d9000317 	ldw	r4,12(sp)
 400dbd8:	294ffc34 	orhi	r5,r5,16368
 400dbdc:	a53f0044 	addi	r20,r20,-1023
 400dbe0:	dd400217 	ldw	r21,8(sp)
 400dbe4:	d8000f15 	stw	zero,60(sp)
 400dbe8:	003eb106 	br	400d6b0 <__reset+0xfb00c6b0>
 400dbec:	05c101f4 	movhi	r23,1031
 400dbf0:	bdd54c04 	addi	r23,r23,21808
 400dbf4:	003e6d06 	br	400d5ac <__reset+0xfb00c5ac>
 400dbf8:	d8000415 	stw	zero,16(sp)
 400dbfc:	80001115 	stw	zero,68(r16)
 400dc00:	8009883a 	mov	r4,r16
 400dc04:	000b883a 	mov	r5,zero
 400dc08:	400ff680 	call	400ff68 <_Balloc>
 400dc0c:	01ffffc4 	movi	r7,-1
 400dc10:	102f883a 	mov	r23,r2
 400dc14:	80801015 	stw	r2,64(r16)
 400dc18:	00800044 	movi	r2,1
 400dc1c:	d9c00915 	stw	r7,36(sp)
 400dc20:	d8002115 	stw	zero,132(sp)
 400dc24:	d9c00e15 	stw	r7,56(sp)
 400dc28:	d8800c15 	stw	r2,48(sp)
 400dc2c:	d8800117 	ldw	r2,4(sp)
 400dc30:	10008b16 	blt	r2,zero,400de60 <_dtoa_r+0x970>
 400dc34:	d9000617 	ldw	r4,24(sp)
 400dc38:	00c00384 	movi	r3,14
 400dc3c:	19008816 	blt	r3,r4,400de60 <_dtoa_r+0x970>
 400dc40:	200490fa 	slli	r2,r4,3
 400dc44:	d9c02117 	ldw	r7,132(sp)
 400dc48:	00c101f4 	movhi	r3,1031
 400dc4c:	18d57d04 	addi	r3,r3,22004
 400dc50:	1885883a 	add	r2,r3,r2
 400dc54:	14800017 	ldw	r18,0(r2)
 400dc58:	14c00117 	ldw	r19,4(r2)
 400dc5c:	3801c916 	blt	r7,zero,400e384 <_dtoa_r+0xe94>
 400dc60:	d9000317 	ldw	r4,12(sp)
 400dc64:	900d883a 	mov	r6,r18
 400dc68:	980f883a 	mov	r7,r19
 400dc6c:	880b883a 	mov	r5,r17
 400dc70:	40099000 	call	4009900 <__divdf3>
 400dc74:	180b883a 	mov	r5,r3
 400dc78:	1009883a 	mov	r4,r2
 400dc7c:	4009be40 	call	4009be4 <__fixdfsi>
 400dc80:	1009883a 	mov	r4,r2
 400dc84:	102b883a 	mov	r21,r2
 400dc88:	4009b100 	call	4009b10 <__floatsidf>
 400dc8c:	1009883a 	mov	r4,r2
 400dc90:	180b883a 	mov	r5,r3
 400dc94:	900d883a 	mov	r6,r18
 400dc98:	980f883a 	mov	r7,r19
 400dc9c:	400961c0 	call	400961c <__muldf3>
 400dca0:	d9000317 	ldw	r4,12(sp)
 400dca4:	880b883a 	mov	r5,r17
 400dca8:	100d883a 	mov	r6,r2
 400dcac:	180f883a 	mov	r7,r3
 400dcb0:	40095bc0 	call	40095bc <__subdf3>
 400dcb4:	d9c00917 	ldw	r7,36(sp)
 400dcb8:	1009883a 	mov	r4,r2
 400dcbc:	a8800c04 	addi	r2,r21,48
 400dcc0:	b8800005 	stb	r2,0(r23)
 400dcc4:	01800044 	movi	r6,1
 400dcc8:	180b883a 	mov	r5,r3
 400dccc:	2005883a 	mov	r2,r4
 400dcd0:	bd800044 	addi	r22,r23,1
 400dcd4:	39803726 	beq	r7,r6,400ddb4 <_dtoa_r+0x8c4>
 400dcd8:	000d883a 	mov	r6,zero
 400dcdc:	01d00934 	movhi	r7,16420
 400dce0:	400961c0 	call	400961c <__muldf3>
 400dce4:	1009883a 	mov	r4,r2
 400dce8:	180b883a 	mov	r5,r3
 400dcec:	000d883a 	mov	r6,zero
 400dcf0:	000f883a 	mov	r7,zero
 400dcf4:	1029883a 	mov	r20,r2
 400dcf8:	1823883a 	mov	r17,r3
 400dcfc:	4012bdc0 	call	4012bdc <__eqdf2>
 400dd00:	103f9c26 	beq	r2,zero,400db74 <__reset+0xfb00cb74>
 400dd04:	dd400917 	ldw	r21,36(sp)
 400dd08:	dc000415 	stw	r16,16(sp)
 400dd0c:	00000906 	br	400dd34 <_dtoa_r+0x844>
 400dd10:	400961c0 	call	400961c <__muldf3>
 400dd14:	1009883a 	mov	r4,r2
 400dd18:	180b883a 	mov	r5,r3
 400dd1c:	000d883a 	mov	r6,zero
 400dd20:	000f883a 	mov	r7,zero
 400dd24:	1029883a 	mov	r20,r2
 400dd28:	1823883a 	mov	r17,r3
 400dd2c:	4012bdc0 	call	4012bdc <__eqdf2>
 400dd30:	10022926 	beq	r2,zero,400e5d8 <_dtoa_r+0x10e8>
 400dd34:	900d883a 	mov	r6,r18
 400dd38:	980f883a 	mov	r7,r19
 400dd3c:	a009883a 	mov	r4,r20
 400dd40:	880b883a 	mov	r5,r17
 400dd44:	40099000 	call	4009900 <__divdf3>
 400dd48:	180b883a 	mov	r5,r3
 400dd4c:	1009883a 	mov	r4,r2
 400dd50:	4009be40 	call	4009be4 <__fixdfsi>
 400dd54:	1009883a 	mov	r4,r2
 400dd58:	1021883a 	mov	r16,r2
 400dd5c:	4009b100 	call	4009b10 <__floatsidf>
 400dd60:	1009883a 	mov	r4,r2
 400dd64:	180b883a 	mov	r5,r3
 400dd68:	900d883a 	mov	r6,r18
 400dd6c:	980f883a 	mov	r7,r19
 400dd70:	400961c0 	call	400961c <__muldf3>
 400dd74:	a009883a 	mov	r4,r20
 400dd78:	880b883a 	mov	r5,r17
 400dd7c:	100d883a 	mov	r6,r2
 400dd80:	180f883a 	mov	r7,r3
 400dd84:	40095bc0 	call	40095bc <__subdf3>
 400dd88:	82400c04 	addi	r9,r16,48
 400dd8c:	b2400005 	stb	r9,0(r22)
 400dd90:	b5800044 	addi	r22,r22,1
 400dd94:	b5d3c83a 	sub	r9,r22,r23
 400dd98:	000d883a 	mov	r6,zero
 400dd9c:	01d00934 	movhi	r7,16420
 400dda0:	1009883a 	mov	r4,r2
 400dda4:	180b883a 	mov	r5,r3
 400dda8:	aa7fd91e 	bne	r21,r9,400dd10 <__reset+0xfb00cd10>
 400ddac:	802b883a 	mov	r21,r16
 400ddb0:	dc000417 	ldw	r16,16(sp)
 400ddb4:	1009883a 	mov	r4,r2
 400ddb8:	180b883a 	mov	r5,r3
 400ddbc:	100d883a 	mov	r6,r2
 400ddc0:	180f883a 	mov	r7,r3
 400ddc4:	40095680 	call	4009568 <__adddf3>
 400ddc8:	9009883a 	mov	r4,r18
 400ddcc:	980b883a 	mov	r5,r19
 400ddd0:	100d883a 	mov	r6,r2
 400ddd4:	180f883a 	mov	r7,r3
 400ddd8:	1023883a 	mov	r17,r2
 400dddc:	1829883a 	mov	r20,r3
 400dde0:	4009ab40 	call	4009ab4 <__ltdf2>
 400dde4:	10000816 	blt	r2,zero,400de08 <_dtoa_r+0x918>
 400dde8:	9009883a 	mov	r4,r18
 400ddec:	980b883a 	mov	r5,r19
 400ddf0:	880d883a 	mov	r6,r17
 400ddf4:	a00f883a 	mov	r7,r20
 400ddf8:	4012c380 	call	4012c38 <__nedf2>
 400ddfc:	103f5d1e 	bne	r2,zero,400db74 <__reset+0xfb00cb74>
 400de00:	ad40004c 	andi	r21,r21,1
 400de04:	a83f5b26 	beq	r21,zero,400db74 <__reset+0xfb00cb74>
 400de08:	b53fffc3 	ldbu	r20,-1(r22)
 400de0c:	b0ffff84 	addi	r3,r22,-2
 400de10:	01400e44 	movi	r5,57
 400de14:	00000306 	br	400de24 <_dtoa_r+0x934>
 400de18:	1d000003 	ldbu	r20,0(r3)
 400de1c:	102d883a 	mov	r22,r2
 400de20:	18ffffc4 	addi	r3,r3,-1
 400de24:	a1003fcc 	andi	r4,r20,255
 400de28:	2100201c 	xori	r4,r4,128
 400de2c:	213fe004 	addi	r4,r4,-128
 400de30:	b0bfffc4 	addi	r2,r22,-1
 400de34:	2142ca1e 	bne	r4,r5,400e960 <_dtoa_r+0x1470>
 400de38:	b8bff71e 	bne	r23,r2,400de18 <__reset+0xfb00ce18>
 400de3c:	d8800617 	ldw	r2,24(sp)
 400de40:	05000c44 	movi	r20,49
 400de44:	10800044 	addi	r2,r2,1
 400de48:	d8800615 	stw	r2,24(sp)
 400de4c:	00800c04 	movi	r2,48
 400de50:	b8800005 	stb	r2,0(r23)
 400de54:	b805883a 	mov	r2,r23
 400de58:	15000005 	stb	r20,0(r2)
 400de5c:	003f4506 	br	400db74 <__reset+0xfb00cb74>
 400de60:	d9c00c17 	ldw	r7,48(sp)
 400de64:	3800c926 	beq	r7,zero,400e18c <_dtoa_r+0xc9c>
 400de68:	d9c00417 	ldw	r7,16(sp)
 400de6c:	00c00044 	movi	r3,1
 400de70:	19c16c0e 	bge	r3,r7,400e424 <_dtoa_r+0xf34>
 400de74:	d9000917 	ldw	r4,36(sp)
 400de78:	d9c00a17 	ldw	r7,40(sp)
 400de7c:	24ffffc4 	addi	r19,r4,-1
 400de80:	3cc20716 	blt	r7,r19,400e6a0 <_dtoa_r+0x11b0>
 400de84:	3ce7c83a 	sub	r19,r7,r19
 400de88:	d9c00917 	ldw	r7,36(sp)
 400de8c:	3802ae16 	blt	r7,zero,400e948 <_dtoa_r+0x1458>
 400de90:	dc800817 	ldw	r18,32(sp)
 400de94:	d8800917 	ldw	r2,36(sp)
 400de98:	d8c00817 	ldw	r3,32(sp)
 400de9c:	d9c00717 	ldw	r7,28(sp)
 400dea0:	8009883a 	mov	r4,r16
 400dea4:	1887883a 	add	r3,r3,r2
 400dea8:	388f883a 	add	r7,r7,r2
 400deac:	01400044 	movi	r5,1
 400deb0:	d8c00815 	stw	r3,32(sp)
 400deb4:	d9c00715 	stw	r7,28(sp)
 400deb8:	40103980 	call	4010398 <__i2b>
 400debc:	102b883a 	mov	r21,r2
 400dec0:	90000a26 	beq	r18,zero,400deec <_dtoa_r+0x9fc>
 400dec4:	d8800717 	ldw	r2,28(sp)
 400dec8:	0080080e 	bge	zero,r2,400deec <_dtoa_r+0x9fc>
 400decc:	90812b16 	blt	r18,r2,400e37c <_dtoa_r+0xe8c>
 400ded0:	d8c00817 	ldw	r3,32(sp)
 400ded4:	d9000717 	ldw	r4,28(sp)
 400ded8:	90a5c83a 	sub	r18,r18,r2
 400dedc:	1887c83a 	sub	r3,r3,r2
 400dee0:	2089c83a 	sub	r4,r4,r2
 400dee4:	d8c00815 	stw	r3,32(sp)
 400dee8:	d9000715 	stw	r4,28(sp)
 400deec:	d9c00a17 	ldw	r7,40(sp)
 400def0:	01c0140e 	bge	zero,r7,400df44 <_dtoa_r+0xa54>
 400def4:	d8800c17 	ldw	r2,48(sp)
 400def8:	1001de26 	beq	r2,zero,400e674 <_dtoa_r+0x1184>
 400defc:	04c00e0e 	bge	zero,r19,400df38 <_dtoa_r+0xa48>
 400df00:	a80b883a 	mov	r5,r21
 400df04:	8009883a 	mov	r4,r16
 400df08:	980d883a 	mov	r6,r19
 400df0c:	401062c0 	call	401062c <__pow5mult>
 400df10:	e00d883a 	mov	r6,fp
 400df14:	8009883a 	mov	r4,r16
 400df18:	100b883a 	mov	r5,r2
 400df1c:	102b883a 	mov	r21,r2
 400df20:	40103d40 	call	40103d4 <__multiply>
 400df24:	1029883a 	mov	r20,r2
 400df28:	e00b883a 	mov	r5,fp
 400df2c:	8009883a 	mov	r4,r16
 400df30:	40100100 	call	4010010 <_Bfree>
 400df34:	a039883a 	mov	fp,r20
 400df38:	d8c00a17 	ldw	r3,40(sp)
 400df3c:	1ccdc83a 	sub	r6,r3,r19
 400df40:	3001291e 	bne	r6,zero,400e3e8 <_dtoa_r+0xef8>
 400df44:	8009883a 	mov	r4,r16
 400df48:	01400044 	movi	r5,1
 400df4c:	40103980 	call	4010398 <__i2b>
 400df50:	d9000b17 	ldw	r4,44(sp)
 400df54:	1029883a 	mov	r20,r2
 400df58:	0100050e 	bge	zero,r4,400df70 <_dtoa_r+0xa80>
 400df5c:	d9800b17 	ldw	r6,44(sp)
 400df60:	8009883a 	mov	r4,r16
 400df64:	100b883a 	mov	r5,r2
 400df68:	401062c0 	call	401062c <__pow5mult>
 400df6c:	1029883a 	mov	r20,r2
 400df70:	d9c00417 	ldw	r7,16(sp)
 400df74:	00800044 	movi	r2,1
 400df78:	11c0f00e 	bge	r2,r7,400e33c <_dtoa_r+0xe4c>
 400df7c:	0023883a 	mov	r17,zero
 400df80:	d8800b17 	ldw	r2,44(sp)
 400df84:	1001741e 	bne	r2,zero,400e558 <_dtoa_r+0x1068>
 400df88:	00800044 	movi	r2,1
 400df8c:	d8c00717 	ldw	r3,28(sp)
 400df90:	10c5883a 	add	r2,r2,r3
 400df94:	108007cc 	andi	r2,r2,31
 400df98:	10008026 	beq	r2,zero,400e19c <_dtoa_r+0xcac>
 400df9c:	01000804 	movi	r4,32
 400dfa0:	2089c83a 	sub	r4,r4,r2
 400dfa4:	00c00104 	movi	r3,4
 400dfa8:	1902d00e 	bge	r3,r4,400eaec <_dtoa_r+0x15fc>
 400dfac:	d9000817 	ldw	r4,32(sp)
 400dfb0:	d9c00717 	ldw	r7,28(sp)
 400dfb4:	00c00704 	movi	r3,28
 400dfb8:	1885c83a 	sub	r2,r3,r2
 400dfbc:	2089883a 	add	r4,r4,r2
 400dfc0:	388f883a 	add	r7,r7,r2
 400dfc4:	d9000815 	stw	r4,32(sp)
 400dfc8:	90a5883a 	add	r18,r18,r2
 400dfcc:	d9c00715 	stw	r7,28(sp)
 400dfd0:	d9c00817 	ldw	r7,32(sp)
 400dfd4:	01c0050e 	bge	zero,r7,400dfec <_dtoa_r+0xafc>
 400dfd8:	e00b883a 	mov	r5,fp
 400dfdc:	8009883a 	mov	r4,r16
 400dfe0:	380d883a 	mov	r6,r7
 400dfe4:	40107580 	call	4010758 <__lshift>
 400dfe8:	1039883a 	mov	fp,r2
 400dfec:	d8800717 	ldw	r2,28(sp)
 400dff0:	0080050e 	bge	zero,r2,400e008 <_dtoa_r+0xb18>
 400dff4:	a00b883a 	mov	r5,r20
 400dff8:	8009883a 	mov	r4,r16
 400dffc:	100d883a 	mov	r6,r2
 400e000:	40107580 	call	4010758 <__lshift>
 400e004:	1029883a 	mov	r20,r2
 400e008:	d8c00d17 	ldw	r3,52(sp)
 400e00c:	1801401e 	bne	r3,zero,400e510 <_dtoa_r+0x1020>
 400e010:	d8800917 	ldw	r2,36(sp)
 400e014:	00815a0e 	bge	zero,r2,400e580 <_dtoa_r+0x1090>
 400e018:	d8c00c17 	ldw	r3,48(sp)
 400e01c:	18006f1e 	bne	r3,zero,400e1dc <_dtoa_r+0xcec>
 400e020:	b823883a 	mov	r17,r23
 400e024:	dc800917 	ldw	r18,36(sp)
 400e028:	00000206 	br	400e034 <_dtoa_r+0xb44>
 400e02c:	40100380 	call	4010038 <__multadd>
 400e030:	1039883a 	mov	fp,r2
 400e034:	e009883a 	mov	r4,fp
 400e038:	a00b883a 	mov	r5,r20
 400e03c:	400d2b40 	call	400d2b4 <quorem>
 400e040:	10800c04 	addi	r2,r2,48
 400e044:	88800005 	stb	r2,0(r17)
 400e048:	8c400044 	addi	r17,r17,1
 400e04c:	8dc7c83a 	sub	r3,r17,r23
 400e050:	8009883a 	mov	r4,r16
 400e054:	e00b883a 	mov	r5,fp
 400e058:	01800284 	movi	r6,10
 400e05c:	000f883a 	mov	r7,zero
 400e060:	1cbff216 	blt	r3,r18,400e02c <__reset+0xfb00d02c>
 400e064:	dd800917 	ldw	r22,36(sp)
 400e068:	1007883a 	mov	r3,r2
 400e06c:	05823a0e 	bge	zero,r22,400e958 <_dtoa_r+0x1468>
 400e070:	bdad883a 	add	r22,r23,r22
 400e074:	0023883a 	mov	r17,zero
 400e078:	e00b883a 	mov	r5,fp
 400e07c:	01800044 	movi	r6,1
 400e080:	8009883a 	mov	r4,r16
 400e084:	d8c01515 	stw	r3,84(sp)
 400e088:	40107580 	call	4010758 <__lshift>
 400e08c:	1009883a 	mov	r4,r2
 400e090:	a00b883a 	mov	r5,r20
 400e094:	1039883a 	mov	fp,r2
 400e098:	40108b40 	call	40108b4 <__mcmp>
 400e09c:	d8c01517 	ldw	r3,84(sp)
 400e0a0:	0080d60e 	bge	zero,r2,400e3fc <_dtoa_r+0xf0c>
 400e0a4:	b13fffc3 	ldbu	r4,-1(r22)
 400e0a8:	b0ffff84 	addi	r3,r22,-2
 400e0ac:	01800e44 	movi	r6,57
 400e0b0:	00000306 	br	400e0c0 <_dtoa_r+0xbd0>
 400e0b4:	19000003 	ldbu	r4,0(r3)
 400e0b8:	102d883a 	mov	r22,r2
 400e0bc:	18ffffc4 	addi	r3,r3,-1
 400e0c0:	21403fcc 	andi	r5,r4,255
 400e0c4:	2940201c 	xori	r5,r5,128
 400e0c8:	297fe004 	addi	r5,r5,-128
 400e0cc:	b0bfffc4 	addi	r2,r22,-1
 400e0d0:	2981a71e 	bne	r5,r6,400e770 <_dtoa_r+0x1280>
 400e0d4:	b8bff71e 	bne	r23,r2,400e0b4 <__reset+0xfb00d0b4>
 400e0d8:	d8800617 	ldw	r2,24(sp)
 400e0dc:	10800044 	addi	r2,r2,1
 400e0e0:	d8800615 	stw	r2,24(sp)
 400e0e4:	00800c44 	movi	r2,49
 400e0e8:	b8800005 	stb	r2,0(r23)
 400e0ec:	8009883a 	mov	r4,r16
 400e0f0:	a00b883a 	mov	r5,r20
 400e0f4:	40100100 	call	4010010 <_Bfree>
 400e0f8:	a83e9e26 	beq	r21,zero,400db74 <__reset+0xfb00cb74>
 400e0fc:	88000426 	beq	r17,zero,400e110 <_dtoa_r+0xc20>
 400e100:	8d400326 	beq	r17,r21,400e110 <_dtoa_r+0xc20>
 400e104:	8009883a 	mov	r4,r16
 400e108:	880b883a 	mov	r5,r17
 400e10c:	40100100 	call	4010010 <_Bfree>
 400e110:	8009883a 	mov	r4,r16
 400e114:	a80b883a 	mov	r5,r21
 400e118:	40100100 	call	4010010 <_Bfree>
 400e11c:	003e9506 	br	400db74 <__reset+0xfb00cb74>
 400e120:	00c00044 	movi	r3,1
 400e124:	d8c00d15 	stw	r3,52(sp)
 400e128:	003d9f06 	br	400d7a8 <__reset+0xfb00c7a8>
 400e12c:	d9000817 	ldw	r4,32(sp)
 400e130:	d8800617 	ldw	r2,24(sp)
 400e134:	d8000b15 	stw	zero,44(sp)
 400e138:	2089c83a 	sub	r4,r4,r2
 400e13c:	0087c83a 	sub	r3,zero,r2
 400e140:	d9000815 	stw	r4,32(sp)
 400e144:	d8c00a15 	stw	r3,40(sp)
 400e148:	003da306 	br	400d7d8 <__reset+0xfb00c7d8>
 400e14c:	0529c83a 	sub	r20,zero,r20
 400e150:	dd000815 	stw	r20,32(sp)
 400e154:	d8000715 	stw	zero,28(sp)
 400e158:	003d9806 	br	400d7bc <__reset+0xfb00c7bc>
 400e15c:	d9000617 	ldw	r4,24(sp)
 400e160:	4009b100 	call	4009b10 <__floatsidf>
 400e164:	1009883a 	mov	r4,r2
 400e168:	180b883a 	mov	r5,r3
 400e16c:	980d883a 	mov	r6,r19
 400e170:	900f883a 	mov	r7,r18
 400e174:	4012bdc0 	call	4012bdc <__eqdf2>
 400e178:	103d7a26 	beq	r2,zero,400d764 <__reset+0xfb00c764>
 400e17c:	d8800617 	ldw	r2,24(sp)
 400e180:	10bfffc4 	addi	r2,r2,-1
 400e184:	d8800615 	stw	r2,24(sp)
 400e188:	003d7606 	br	400d764 <__reset+0xfb00c764>
 400e18c:	dcc00a17 	ldw	r19,40(sp)
 400e190:	dc800817 	ldw	r18,32(sp)
 400e194:	002b883a 	mov	r21,zero
 400e198:	003f4906 	br	400dec0 <__reset+0xfb00cec0>
 400e19c:	00800704 	movi	r2,28
 400e1a0:	d8c00817 	ldw	r3,32(sp)
 400e1a4:	d9000717 	ldw	r4,28(sp)
 400e1a8:	90a5883a 	add	r18,r18,r2
 400e1ac:	1887883a 	add	r3,r3,r2
 400e1b0:	2089883a 	add	r4,r4,r2
 400e1b4:	d8c00815 	stw	r3,32(sp)
 400e1b8:	d9000715 	stw	r4,28(sp)
 400e1bc:	003f8406 	br	400dfd0 <__reset+0xfb00cfd0>
 400e1c0:	d9c00317 	ldw	r7,12(sp)
 400e1c4:	013efb84 	movi	r4,-1042
 400e1c8:	2509c83a 	sub	r4,r4,r20
 400e1cc:	3908983a 	sll	r4,r7,r4
 400e1d0:	003d3006 	br	400d694 <__reset+0xfb00c694>
 400e1d4:	d8000d15 	stw	zero,52(sp)
 400e1d8:	003d7306 	br	400d7a8 <__reset+0xfb00c7a8>
 400e1dc:	0480050e 	bge	zero,r18,400e1f4 <_dtoa_r+0xd04>
 400e1e0:	a80b883a 	mov	r5,r21
 400e1e4:	8009883a 	mov	r4,r16
 400e1e8:	900d883a 	mov	r6,r18
 400e1ec:	40107580 	call	4010758 <__lshift>
 400e1f0:	102b883a 	mov	r21,r2
 400e1f4:	8801611e 	bne	r17,zero,400e77c <_dtoa_r+0x128c>
 400e1f8:	a827883a 	mov	r19,r21
 400e1fc:	d8c00317 	ldw	r3,12(sp)
 400e200:	d9000917 	ldw	r4,36(sp)
 400e204:	b8bfffc4 	addi	r2,r23,-1
 400e208:	18c0004c 	andi	r3,r3,1
 400e20c:	1105883a 	add	r2,r2,r4
 400e210:	b825883a 	mov	r18,r23
 400e214:	d8800515 	stw	r2,20(sp)
 400e218:	a823883a 	mov	r17,r21
 400e21c:	d8c00315 	stw	r3,12(sp)
 400e220:	ddc00715 	stw	r23,28(sp)
 400e224:	e009883a 	mov	r4,fp
 400e228:	a00b883a 	mov	r5,r20
 400e22c:	400d2b40 	call	400d2b4 <quorem>
 400e230:	e009883a 	mov	r4,fp
 400e234:	880b883a 	mov	r5,r17
 400e238:	102d883a 	mov	r22,r2
 400e23c:	40108b40 	call	40108b4 <__mcmp>
 400e240:	980d883a 	mov	r6,r19
 400e244:	8009883a 	mov	r4,r16
 400e248:	a00b883a 	mov	r5,r20
 400e24c:	102b883a 	mov	r21,r2
 400e250:	401090c0 	call	401090c <__mdiff>
 400e254:	100d883a 	mov	r6,r2
 400e258:	10800317 	ldw	r2,12(r2)
 400e25c:	b5c00c04 	addi	r23,r22,48
 400e260:	10008c26 	beq	r2,zero,400e494 <_dtoa_r+0xfa4>
 400e264:	8009883a 	mov	r4,r16
 400e268:	300b883a 	mov	r5,r6
 400e26c:	40100100 	call	4010010 <_Bfree>
 400e270:	00800044 	movi	r2,1
 400e274:	a8007116 	blt	r21,zero,400e43c <_dtoa_r+0xf4c>
 400e278:	a800041e 	bne	r21,zero,400e28c <_dtoa_r+0xd9c>
 400e27c:	d9c00417 	ldw	r7,16(sp)
 400e280:	3800021e 	bne	r7,zero,400e28c <_dtoa_r+0xd9c>
 400e284:	d8c00317 	ldw	r3,12(sp)
 400e288:	18006c26 	beq	r3,zero,400e43c <_dtoa_r+0xf4c>
 400e28c:	00814c16 	blt	zero,r2,400e7c0 <_dtoa_r+0x12d0>
 400e290:	d8c00517 	ldw	r3,20(sp)
 400e294:	95400044 	addi	r21,r18,1
 400e298:	95c00005 	stb	r23,0(r18)
 400e29c:	a82d883a 	mov	r22,r21
 400e2a0:	90c14d26 	beq	r18,r3,400e7d8 <_dtoa_r+0x12e8>
 400e2a4:	e00b883a 	mov	r5,fp
 400e2a8:	8009883a 	mov	r4,r16
 400e2ac:	01800284 	movi	r6,10
 400e2b0:	000f883a 	mov	r7,zero
 400e2b4:	40100380 	call	4010038 <__multadd>
 400e2b8:	1039883a 	mov	fp,r2
 400e2bc:	8cc08b26 	beq	r17,r19,400e4ec <_dtoa_r+0xffc>
 400e2c0:	880b883a 	mov	r5,r17
 400e2c4:	01800284 	movi	r6,10
 400e2c8:	000f883a 	mov	r7,zero
 400e2cc:	8009883a 	mov	r4,r16
 400e2d0:	40100380 	call	4010038 <__multadd>
 400e2d4:	980b883a 	mov	r5,r19
 400e2d8:	8009883a 	mov	r4,r16
 400e2dc:	01800284 	movi	r6,10
 400e2e0:	000f883a 	mov	r7,zero
 400e2e4:	1023883a 	mov	r17,r2
 400e2e8:	40100380 	call	4010038 <__multadd>
 400e2ec:	1027883a 	mov	r19,r2
 400e2f0:	a825883a 	mov	r18,r21
 400e2f4:	003fcb06 	br	400e224 <__reset+0xfb00d224>
 400e2f8:	d9c00417 	ldw	r7,16(sp)
 400e2fc:	00800104 	movi	r2,4
 400e300:	3880e426 	beq	r7,r2,400e694 <_dtoa_r+0x11a4>
 400e304:	00800144 	movi	r2,5
 400e308:	38be3c1e 	bne	r7,r2,400dbfc <__reset+0xfb00cbfc>
 400e30c:	00c00044 	movi	r3,1
 400e310:	d8c00c15 	stw	r3,48(sp)
 400e314:	d9c02117 	ldw	r7,132(sp)
 400e318:	d8800617 	ldw	r2,24(sp)
 400e31c:	388f883a 	add	r7,r7,r2
 400e320:	3c800044 	addi	r18,r7,1
 400e324:	d9c00e15 	stw	r7,56(sp)
 400e328:	dc800915 	stw	r18,36(sp)
 400e32c:	04bd3e16 	blt	zero,r18,400d828 <__reset+0xfb00c828>
 400e330:	80001115 	stw	zero,68(r16)
 400e334:	000b883a 	mov	r5,zero
 400e338:	003d4606 	br	400d854 <__reset+0xfb00c854>
 400e33c:	d8c00317 	ldw	r3,12(sp)
 400e340:	183f0e1e 	bne	r3,zero,400df7c <__reset+0xfb00cf7c>
 400e344:	00c00434 	movhi	r3,16
 400e348:	18ffffc4 	addi	r3,r3,-1
 400e34c:	88c6703a 	and	r3,r17,r3
 400e350:	183f0a1e 	bne	r3,zero,400df7c <__reset+0xfb00cf7c>
 400e354:	8c5ffc2c 	andhi	r17,r17,32752
 400e358:	883f0826 	beq	r17,zero,400df7c <__reset+0xfb00cf7c>
 400e35c:	d9000817 	ldw	r4,32(sp)
 400e360:	d9c00717 	ldw	r7,28(sp)
 400e364:	1023883a 	mov	r17,r2
 400e368:	2089883a 	add	r4,r4,r2
 400e36c:	388f883a 	add	r7,r7,r2
 400e370:	d9000815 	stw	r4,32(sp)
 400e374:	d9c00715 	stw	r7,28(sp)
 400e378:	003f0106 	br	400df80 <__reset+0xfb00cf80>
 400e37c:	9005883a 	mov	r2,r18
 400e380:	003ed306 	br	400ded0 <__reset+0xfb00ced0>
 400e384:	d8800917 	ldw	r2,36(sp)
 400e388:	00be3516 	blt	zero,r2,400dc60 <__reset+0xfb00cc60>
 400e38c:	1000b61e 	bne	r2,zero,400e668 <_dtoa_r+0x1178>
 400e390:	9009883a 	mov	r4,r18
 400e394:	980b883a 	mov	r5,r19
 400e398:	000d883a 	mov	r6,zero
 400e39c:	01d00534 	movhi	r7,16404
 400e3a0:	400961c0 	call	400961c <__muldf3>
 400e3a4:	d9800317 	ldw	r6,12(sp)
 400e3a8:	1009883a 	mov	r4,r2
 400e3ac:	180b883a 	mov	r5,r3
 400e3b0:	880f883a 	mov	r7,r17
 400e3b4:	4012cf80 	call	4012cf8 <__gedf2>
 400e3b8:	0029883a 	mov	r20,zero
 400e3bc:	002b883a 	mov	r21,zero
 400e3c0:	10007e16 	blt	r2,zero,400e5bc <_dtoa_r+0x10cc>
 400e3c4:	d8802117 	ldw	r2,132(sp)
 400e3c8:	b82d883a 	mov	r22,r23
 400e3cc:	0084303a 	nor	r2,zero,r2
 400e3d0:	d8800615 	stw	r2,24(sp)
 400e3d4:	8009883a 	mov	r4,r16
 400e3d8:	a00b883a 	mov	r5,r20
 400e3dc:	40100100 	call	4010010 <_Bfree>
 400e3e0:	a83f4b1e 	bne	r21,zero,400e110 <__reset+0xfb00d110>
 400e3e4:	003de306 	br	400db74 <__reset+0xfb00cb74>
 400e3e8:	e00b883a 	mov	r5,fp
 400e3ec:	8009883a 	mov	r4,r16
 400e3f0:	401062c0 	call	401062c <__pow5mult>
 400e3f4:	1039883a 	mov	fp,r2
 400e3f8:	003ed206 	br	400df44 <__reset+0xfb00cf44>
 400e3fc:	1000021e 	bne	r2,zero,400e408 <_dtoa_r+0xf18>
 400e400:	18c0004c 	andi	r3,r3,1
 400e404:	183f271e 	bne	r3,zero,400e0a4 <__reset+0xfb00d0a4>
 400e408:	01000c04 	movi	r4,48
 400e40c:	00000106 	br	400e414 <_dtoa_r+0xf24>
 400e410:	102d883a 	mov	r22,r2
 400e414:	b0bfffc4 	addi	r2,r22,-1
 400e418:	10c00007 	ldb	r3,0(r2)
 400e41c:	193ffc26 	beq	r3,r4,400e410 <__reset+0xfb00d410>
 400e420:	003f3206 	br	400e0ec <__reset+0xfb00d0ec>
 400e424:	d8c00f17 	ldw	r3,60(sp)
 400e428:	18015026 	beq	r3,zero,400e96c <_dtoa_r+0x147c>
 400e42c:	10810cc4 	addi	r2,r2,1075
 400e430:	dcc00a17 	ldw	r19,40(sp)
 400e434:	dc800817 	ldw	r18,32(sp)
 400e438:	003e9706 	br	400de98 <__reset+0xfb00ce98>
 400e43c:	b807883a 	mov	r3,r23
 400e440:	182b883a 	mov	r21,r3
 400e444:	ddc00717 	ldw	r23,28(sp)
 400e448:	00800e0e 	bge	zero,r2,400e484 <_dtoa_r+0xf94>
 400e44c:	e00b883a 	mov	r5,fp
 400e450:	01800044 	movi	r6,1
 400e454:	8009883a 	mov	r4,r16
 400e458:	d8c01515 	stw	r3,84(sp)
 400e45c:	40107580 	call	4010758 <__lshift>
 400e460:	1009883a 	mov	r4,r2
 400e464:	a00b883a 	mov	r5,r20
 400e468:	1039883a 	mov	fp,r2
 400e46c:	40108b40 	call	40108b4 <__mcmp>
 400e470:	d8c01517 	ldw	r3,84(sp)
 400e474:	0081880e 	bge	zero,r2,400ea98 <_dtoa_r+0x15a8>
 400e478:	00800e44 	movi	r2,57
 400e47c:	b0c00c44 	addi	r3,r22,49
 400e480:	a8816326 	beq	r21,r2,400ea10 <_dtoa_r+0x1520>
 400e484:	90c00005 	stb	r3,0(r18)
 400e488:	95800044 	addi	r22,r18,1
 400e48c:	982b883a 	mov	r21,r19
 400e490:	003f1606 	br	400e0ec <__reset+0xfb00d0ec>
 400e494:	300b883a 	mov	r5,r6
 400e498:	e009883a 	mov	r4,fp
 400e49c:	d9801515 	stw	r6,84(sp)
 400e4a0:	40108b40 	call	40108b4 <__mcmp>
 400e4a4:	d9801517 	ldw	r6,84(sp)
 400e4a8:	8009883a 	mov	r4,r16
 400e4ac:	d8801515 	stw	r2,84(sp)
 400e4b0:	300b883a 	mov	r5,r6
 400e4b4:	40100100 	call	4010010 <_Bfree>
 400e4b8:	d8801517 	ldw	r2,84(sp)
 400e4bc:	103f6d1e 	bne	r2,zero,400e274 <__reset+0xfb00d274>
 400e4c0:	d9c00417 	ldw	r7,16(sp)
 400e4c4:	383f6b1e 	bne	r7,zero,400e274 <__reset+0xfb00d274>
 400e4c8:	d8c00317 	ldw	r3,12(sp)
 400e4cc:	183f691e 	bne	r3,zero,400e274 <__reset+0xfb00d274>
 400e4d0:	b807883a 	mov	r3,r23
 400e4d4:	00800e44 	movi	r2,57
 400e4d8:	ddc00717 	ldw	r23,28(sp)
 400e4dc:	18814c26 	beq	r3,r2,400ea10 <_dtoa_r+0x1520>
 400e4e0:	057fe80e 	bge	zero,r21,400e484 <__reset+0xfb00d484>
 400e4e4:	b0c00c44 	addi	r3,r22,49
 400e4e8:	003fe606 	br	400e484 <__reset+0xfb00d484>
 400e4ec:	880b883a 	mov	r5,r17
 400e4f0:	8009883a 	mov	r4,r16
 400e4f4:	01800284 	movi	r6,10
 400e4f8:	000f883a 	mov	r7,zero
 400e4fc:	40100380 	call	4010038 <__multadd>
 400e500:	1023883a 	mov	r17,r2
 400e504:	1027883a 	mov	r19,r2
 400e508:	a825883a 	mov	r18,r21
 400e50c:	003f4506 	br	400e224 <__reset+0xfb00d224>
 400e510:	e009883a 	mov	r4,fp
 400e514:	a00b883a 	mov	r5,r20
 400e518:	40108b40 	call	40108b4 <__mcmp>
 400e51c:	103ebc0e 	bge	r2,zero,400e010 <__reset+0xfb00d010>
 400e520:	e00b883a 	mov	r5,fp
 400e524:	8009883a 	mov	r4,r16
 400e528:	01800284 	movi	r6,10
 400e52c:	000f883a 	mov	r7,zero
 400e530:	40100380 	call	4010038 <__multadd>
 400e534:	1039883a 	mov	fp,r2
 400e538:	d8800617 	ldw	r2,24(sp)
 400e53c:	d8c00c17 	ldw	r3,48(sp)
 400e540:	10bfffc4 	addi	r2,r2,-1
 400e544:	d8800615 	stw	r2,24(sp)
 400e548:	1801571e 	bne	r3,zero,400eaa8 <_dtoa_r+0x15b8>
 400e54c:	d9c00e17 	ldw	r7,56(sp)
 400e550:	d9c00915 	stw	r7,36(sp)
 400e554:	003eae06 	br	400e010 <__reset+0xfb00d010>
 400e558:	a0800417 	ldw	r2,16(r20)
 400e55c:	10800104 	addi	r2,r2,4
 400e560:	1085883a 	add	r2,r2,r2
 400e564:	1085883a 	add	r2,r2,r2
 400e568:	a085883a 	add	r2,r20,r2
 400e56c:	11000017 	ldw	r4,0(r2)
 400e570:	40102800 	call	4010280 <__hi0bits>
 400e574:	00c00804 	movi	r3,32
 400e578:	1885c83a 	sub	r2,r3,r2
 400e57c:	003e8306 	br	400df8c <__reset+0xfb00cf8c>
 400e580:	d9c00417 	ldw	r7,16(sp)
 400e584:	00800084 	movi	r2,2
 400e588:	11fea30e 	bge	r2,r7,400e018 <__reset+0xfb00d018>
 400e58c:	d8800917 	ldw	r2,36(sp)
 400e590:	103f8c1e 	bne	r2,zero,400e3c4 <__reset+0xfb00d3c4>
 400e594:	a00b883a 	mov	r5,r20
 400e598:	8009883a 	mov	r4,r16
 400e59c:	01800144 	movi	r6,5
 400e5a0:	000f883a 	mov	r7,zero
 400e5a4:	40100380 	call	4010038 <__multadd>
 400e5a8:	e009883a 	mov	r4,fp
 400e5ac:	100b883a 	mov	r5,r2
 400e5b0:	1029883a 	mov	r20,r2
 400e5b4:	40108b40 	call	40108b4 <__mcmp>
 400e5b8:	00bf820e 	bge	zero,r2,400e3c4 <__reset+0xfb00d3c4>
 400e5bc:	00800c44 	movi	r2,49
 400e5c0:	b8800005 	stb	r2,0(r23)
 400e5c4:	d8800617 	ldw	r2,24(sp)
 400e5c8:	bd800044 	addi	r22,r23,1
 400e5cc:	10800044 	addi	r2,r2,1
 400e5d0:	d8800615 	stw	r2,24(sp)
 400e5d4:	003f7f06 	br	400e3d4 <__reset+0xfb00d3d4>
 400e5d8:	dc000417 	ldw	r16,16(sp)
 400e5dc:	003d6506 	br	400db74 <__reset+0xfb00cb74>
 400e5e0:	9009883a 	mov	r4,r18
 400e5e4:	4009b100 	call	4009b10 <__floatsidf>
 400e5e8:	1009883a 	mov	r4,r2
 400e5ec:	180b883a 	mov	r5,r3
 400e5f0:	980d883a 	mov	r6,r19
 400e5f4:	a00f883a 	mov	r7,r20
 400e5f8:	400961c0 	call	400961c <__muldf3>
 400e5fc:	1009883a 	mov	r4,r2
 400e600:	180b883a 	mov	r5,r3
 400e604:	000d883a 	mov	r6,zero
 400e608:	01d00734 	movhi	r7,16412
 400e60c:	40095680 	call	4009568 <__adddf3>
 400e610:	057f3034 	movhi	r21,64704
 400e614:	1025883a 	mov	r18,r2
 400e618:	1d6b883a 	add	r21,r3,r21
 400e61c:	9809883a 	mov	r4,r19
 400e620:	a00b883a 	mov	r5,r20
 400e624:	000d883a 	mov	r6,zero
 400e628:	01d00534 	movhi	r7,16404
 400e62c:	40095bc0 	call	40095bc <__subdf3>
 400e630:	1009883a 	mov	r4,r2
 400e634:	180b883a 	mov	r5,r3
 400e638:	900d883a 	mov	r6,r18
 400e63c:	a80f883a 	mov	r7,r21
 400e640:	1027883a 	mov	r19,r2
 400e644:	1829883a 	mov	r20,r3
 400e648:	4012c940 	call	4012c94 <__gtdf2>
 400e64c:	00806616 	blt	zero,r2,400e7e8 <_dtoa_r+0x12f8>
 400e650:	a9e0003c 	xorhi	r7,r21,32768
 400e654:	9809883a 	mov	r4,r19
 400e658:	a00b883a 	mov	r5,r20
 400e65c:	900d883a 	mov	r6,r18
 400e660:	4009ab40 	call	4009ab4 <__ltdf2>
 400e664:	103d710e 	bge	r2,zero,400dc2c <__reset+0xfb00cc2c>
 400e668:	0029883a 	mov	r20,zero
 400e66c:	002b883a 	mov	r21,zero
 400e670:	003f5406 	br	400e3c4 <__reset+0xfb00d3c4>
 400e674:	d9800a17 	ldw	r6,40(sp)
 400e678:	e00b883a 	mov	r5,fp
 400e67c:	8009883a 	mov	r4,r16
 400e680:	401062c0 	call	401062c <__pow5mult>
 400e684:	1039883a 	mov	fp,r2
 400e688:	003e2e06 	br	400df44 <__reset+0xfb00cf44>
 400e68c:	d8000c15 	stw	zero,48(sp)
 400e690:	003f2006 	br	400e314 <__reset+0xfb00d314>
 400e694:	00800044 	movi	r2,1
 400e698:	d8800c15 	stw	r2,48(sp)
 400e69c:	003c5d06 	br	400d814 <__reset+0xfb00c814>
 400e6a0:	d8c00a17 	ldw	r3,40(sp)
 400e6a4:	d9000b17 	ldw	r4,44(sp)
 400e6a8:	dcc00a15 	stw	r19,40(sp)
 400e6ac:	98c5c83a 	sub	r2,r19,r3
 400e6b0:	2089883a 	add	r4,r4,r2
 400e6b4:	d9000b15 	stw	r4,44(sp)
 400e6b8:	0027883a 	mov	r19,zero
 400e6bc:	003df206 	br	400de88 <__reset+0xfb00ce88>
 400e6c0:	d9000317 	ldw	r4,12(sp)
 400e6c4:	8829883a 	mov	r20,r17
 400e6c8:	04800084 	movi	r18,2
 400e6cc:	d9001015 	stw	r4,64(sp)
 400e6d0:	003c8106 	br	400d8d8 <__reset+0xfb00c8d8>
 400e6d4:	04800044 	movi	r18,1
 400e6d8:	dc800e15 	stw	r18,56(sp)
 400e6dc:	dc800915 	stw	r18,36(sp)
 400e6e0:	dc802115 	stw	r18,132(sp)
 400e6e4:	003f1206 	br	400e330 <__reset+0xfb00d330>
 400e6e8:	d8800617 	ldw	r2,24(sp)
 400e6ec:	00abc83a 	sub	r21,zero,r2
 400e6f0:	a800a426 	beq	r21,zero,400e984 <_dtoa_r+0x1494>
 400e6f4:	a88003cc 	andi	r2,r21,15
 400e6f8:	100490fa 	slli	r2,r2,3
 400e6fc:	00c101f4 	movhi	r3,1031
 400e700:	18d57d04 	addi	r3,r3,22004
 400e704:	d9000317 	ldw	r4,12(sp)
 400e708:	1885883a 	add	r2,r3,r2
 400e70c:	11800017 	ldw	r6,0(r2)
 400e710:	11c00117 	ldw	r7,4(r2)
 400e714:	a82bd13a 	srai	r21,r21,4
 400e718:	880b883a 	mov	r5,r17
 400e71c:	400961c0 	call	400961c <__muldf3>
 400e720:	1027883a 	mov	r19,r2
 400e724:	1829883a 	mov	r20,r3
 400e728:	a800e826 	beq	r21,zero,400eacc <_dtoa_r+0x15dc>
 400e72c:	058101f4 	movhi	r22,1031
 400e730:	b5957304 	addi	r22,r22,21964
 400e734:	04800084 	movi	r18,2
 400e738:	a980004c 	andi	r6,r21,1
 400e73c:	1009883a 	mov	r4,r2
 400e740:	a82bd07a 	srai	r21,r21,1
 400e744:	180b883a 	mov	r5,r3
 400e748:	30000426 	beq	r6,zero,400e75c <_dtoa_r+0x126c>
 400e74c:	b1800017 	ldw	r6,0(r22)
 400e750:	b1c00117 	ldw	r7,4(r22)
 400e754:	94800044 	addi	r18,r18,1
 400e758:	400961c0 	call	400961c <__muldf3>
 400e75c:	b5800204 	addi	r22,r22,8
 400e760:	a83ff51e 	bne	r21,zero,400e738 <__reset+0xfb00d738>
 400e764:	1027883a 	mov	r19,r2
 400e768:	1829883a 	mov	r20,r3
 400e76c:	003c7306 	br	400d93c <__reset+0xfb00c93c>
 400e770:	21000044 	addi	r4,r4,1
 400e774:	11000005 	stb	r4,0(r2)
 400e778:	003e5c06 	br	400e0ec <__reset+0xfb00d0ec>
 400e77c:	a9400117 	ldw	r5,4(r21)
 400e780:	8009883a 	mov	r4,r16
 400e784:	400ff680 	call	400ff68 <_Balloc>
 400e788:	a9800417 	ldw	r6,16(r21)
 400e78c:	11000304 	addi	r4,r2,12
 400e790:	a9400304 	addi	r5,r21,12
 400e794:	31800084 	addi	r6,r6,2
 400e798:	318d883a 	add	r6,r6,r6
 400e79c:	318d883a 	add	r6,r6,r6
 400e7a0:	1023883a 	mov	r17,r2
 400e7a4:	400abf80 	call	400abf8 <memcpy>
 400e7a8:	8009883a 	mov	r4,r16
 400e7ac:	880b883a 	mov	r5,r17
 400e7b0:	01800044 	movi	r6,1
 400e7b4:	40107580 	call	4010758 <__lshift>
 400e7b8:	1027883a 	mov	r19,r2
 400e7bc:	003e8f06 	br	400e1fc <__reset+0xfb00d1fc>
 400e7c0:	b807883a 	mov	r3,r23
 400e7c4:	00800e44 	movi	r2,57
 400e7c8:	ddc00717 	ldw	r23,28(sp)
 400e7cc:	18809026 	beq	r3,r2,400ea10 <_dtoa_r+0x1520>
 400e7d0:	18c00044 	addi	r3,r3,1
 400e7d4:	003f2b06 	br	400e484 <__reset+0xfb00d484>
 400e7d8:	b807883a 	mov	r3,r23
 400e7dc:	982b883a 	mov	r21,r19
 400e7e0:	ddc00717 	ldw	r23,28(sp)
 400e7e4:	003e2406 	br	400e078 <__reset+0xfb00d078>
 400e7e8:	0029883a 	mov	r20,zero
 400e7ec:	002b883a 	mov	r21,zero
 400e7f0:	003f7206 	br	400e5bc <__reset+0xfb00d5bc>
 400e7f4:	593fffc4 	addi	r4,r11,-1
 400e7f8:	200490fa 	slli	r2,r4,3
 400e7fc:	00c101f4 	movhi	r3,1031
 400e800:	18d57d04 	addi	r3,r3,22004
 400e804:	d9001015 	stw	r4,64(sp)
 400e808:	1885883a 	add	r2,r3,r2
 400e80c:	11000017 	ldw	r4,0(r2)
 400e810:	11400117 	ldw	r5,4(r2)
 400e814:	900d883a 	mov	r6,r18
 400e818:	a80f883a 	mov	r7,r21
 400e81c:	dac01615 	stw	r11,88(sp)
 400e820:	400961c0 	call	400961c <__muldf3>
 400e824:	a00b883a 	mov	r5,r20
 400e828:	9809883a 	mov	r4,r19
 400e82c:	d8c01215 	stw	r3,72(sp)
 400e830:	d8801115 	stw	r2,68(sp)
 400e834:	4009be40 	call	4009be4 <__fixdfsi>
 400e838:	1009883a 	mov	r4,r2
 400e83c:	1025883a 	mov	r18,r2
 400e840:	4009b100 	call	4009b10 <__floatsidf>
 400e844:	9809883a 	mov	r4,r19
 400e848:	a00b883a 	mov	r5,r20
 400e84c:	100d883a 	mov	r6,r2
 400e850:	180f883a 	mov	r7,r3
 400e854:	94800c04 	addi	r18,r18,48
 400e858:	40095bc0 	call	40095bc <__subdf3>
 400e85c:	bc800005 	stb	r18,0(r23)
 400e860:	dac01617 	ldw	r11,88(sp)
 400e864:	102b883a 	mov	r21,r2
 400e868:	00800044 	movi	r2,1
 400e86c:	bd800044 	addi	r22,r23,1
 400e870:	1815883a 	mov	r10,r3
 400e874:	58802226 	beq	r11,r2,400e900 <_dtoa_r+0x1410>
 400e878:	bad7883a 	add	r11,r23,r11
 400e87c:	dc001415 	stw	r16,80(sp)
 400e880:	a805883a 	mov	r2,r21
 400e884:	b027883a 	mov	r19,r22
 400e888:	5821883a 	mov	r16,r11
 400e88c:	882b883a 	mov	r21,r17
 400e890:	000d883a 	mov	r6,zero
 400e894:	01d00934 	movhi	r7,16420
 400e898:	1009883a 	mov	r4,r2
 400e89c:	180b883a 	mov	r5,r3
 400e8a0:	400961c0 	call	400961c <__muldf3>
 400e8a4:	180b883a 	mov	r5,r3
 400e8a8:	1009883a 	mov	r4,r2
 400e8ac:	1829883a 	mov	r20,r3
 400e8b0:	1023883a 	mov	r17,r2
 400e8b4:	4009be40 	call	4009be4 <__fixdfsi>
 400e8b8:	1009883a 	mov	r4,r2
 400e8bc:	1025883a 	mov	r18,r2
 400e8c0:	4009b100 	call	4009b10 <__floatsidf>
 400e8c4:	8809883a 	mov	r4,r17
 400e8c8:	a00b883a 	mov	r5,r20
 400e8cc:	100d883a 	mov	r6,r2
 400e8d0:	180f883a 	mov	r7,r3
 400e8d4:	94800c04 	addi	r18,r18,48
 400e8d8:	40095bc0 	call	40095bc <__subdf3>
 400e8dc:	9cc00044 	addi	r19,r19,1
 400e8e0:	9cbfffc5 	stb	r18,-1(r19)
 400e8e4:	9c3fea1e 	bne	r19,r16,400e890 <__reset+0xfb00d890>
 400e8e8:	1815883a 	mov	r10,r3
 400e8ec:	d8c01017 	ldw	r3,64(sp)
 400e8f0:	dc001417 	ldw	r16,80(sp)
 400e8f4:	a823883a 	mov	r17,r21
 400e8f8:	b0ed883a 	add	r22,r22,r3
 400e8fc:	102b883a 	mov	r21,r2
 400e900:	d9001117 	ldw	r4,68(sp)
 400e904:	d9401217 	ldw	r5,72(sp)
 400e908:	000d883a 	mov	r6,zero
 400e90c:	01cff834 	movhi	r7,16352
 400e910:	da801515 	stw	r10,84(sp)
 400e914:	40095680 	call	4009568 <__adddf3>
 400e918:	da801517 	ldw	r10,84(sp)
 400e91c:	1009883a 	mov	r4,r2
 400e920:	180b883a 	mov	r5,r3
 400e924:	500f883a 	mov	r7,r10
 400e928:	a80d883a 	mov	r6,r21
 400e92c:	4009ab40 	call	4009ab4 <__ltdf2>
 400e930:	da801517 	ldw	r10,84(sp)
 400e934:	10003b0e 	bge	r2,zero,400ea24 <_dtoa_r+0x1534>
 400e938:	d9c01317 	ldw	r7,76(sp)
 400e93c:	b53fffc3 	ldbu	r20,-1(r22)
 400e940:	d9c00615 	stw	r7,24(sp)
 400e944:	003d3106 	br	400de0c <__reset+0xfb00ce0c>
 400e948:	d8800817 	ldw	r2,32(sp)
 400e94c:	11e5c83a 	sub	r18,r2,r7
 400e950:	0005883a 	mov	r2,zero
 400e954:	003d5006 	br	400de98 <__reset+0xfb00ce98>
 400e958:	05800044 	movi	r22,1
 400e95c:	003dc406 	br	400e070 <__reset+0xfb00d070>
 400e960:	a5000044 	addi	r20,r20,1
 400e964:	15000005 	stb	r20,0(r2)
 400e968:	003c8206 	br	400db74 <__reset+0xfb00cb74>
 400e96c:	d8800217 	ldw	r2,8(sp)
 400e970:	00c00d84 	movi	r3,54
 400e974:	dcc00a17 	ldw	r19,40(sp)
 400e978:	1885c83a 	sub	r2,r3,r2
 400e97c:	dc800817 	ldw	r18,32(sp)
 400e980:	003d4506 	br	400de98 <__reset+0xfb00ce98>
 400e984:	dcc00317 	ldw	r19,12(sp)
 400e988:	8829883a 	mov	r20,r17
 400e98c:	04800084 	movi	r18,2
 400e990:	003bea06 	br	400d93c <__reset+0xfb00c93c>
 400e994:	d9000917 	ldw	r4,36(sp)
 400e998:	203f1126 	beq	r4,zero,400e5e0 <__reset+0xfb00d5e0>
 400e99c:	d9c00e17 	ldw	r7,56(sp)
 400e9a0:	01fca20e 	bge	zero,r7,400dc2c <__reset+0xfb00cc2c>
 400e9a4:	a00b883a 	mov	r5,r20
 400e9a8:	9809883a 	mov	r4,r19
 400e9ac:	000d883a 	mov	r6,zero
 400e9b0:	01d00934 	movhi	r7,16420
 400e9b4:	400961c0 	call	400961c <__muldf3>
 400e9b8:	91000044 	addi	r4,r18,1
 400e9bc:	1027883a 	mov	r19,r2
 400e9c0:	1829883a 	mov	r20,r3
 400e9c4:	4009b100 	call	4009b10 <__floatsidf>
 400e9c8:	9809883a 	mov	r4,r19
 400e9cc:	a00b883a 	mov	r5,r20
 400e9d0:	100d883a 	mov	r6,r2
 400e9d4:	180f883a 	mov	r7,r3
 400e9d8:	400961c0 	call	400961c <__muldf3>
 400e9dc:	1009883a 	mov	r4,r2
 400e9e0:	180b883a 	mov	r5,r3
 400e9e4:	000d883a 	mov	r6,zero
 400e9e8:	01d00734 	movhi	r7,16412
 400e9ec:	40095680 	call	4009568 <__adddf3>
 400e9f0:	1025883a 	mov	r18,r2
 400e9f4:	d8800617 	ldw	r2,24(sp)
 400e9f8:	057f3034 	movhi	r21,64704
 400e9fc:	1d6b883a 	add	r21,r3,r21
 400ea00:	10bfffc4 	addi	r2,r2,-1
 400ea04:	d8801315 	stw	r2,76(sp)
 400ea08:	dac00e17 	ldw	r11,56(sp)
 400ea0c:	003be706 	br	400d9ac <__reset+0xfb00c9ac>
 400ea10:	01000e44 	movi	r4,57
 400ea14:	91000005 	stb	r4,0(r18)
 400ea18:	95800044 	addi	r22,r18,1
 400ea1c:	982b883a 	mov	r21,r19
 400ea20:	003da106 	br	400e0a8 <__reset+0xfb00d0a8>
 400ea24:	d9801117 	ldw	r6,68(sp)
 400ea28:	d9c01217 	ldw	r7,72(sp)
 400ea2c:	0009883a 	mov	r4,zero
 400ea30:	014ff834 	movhi	r5,16352
 400ea34:	da801515 	stw	r10,84(sp)
 400ea38:	40095bc0 	call	40095bc <__subdf3>
 400ea3c:	da801517 	ldw	r10,84(sp)
 400ea40:	1009883a 	mov	r4,r2
 400ea44:	180b883a 	mov	r5,r3
 400ea48:	a80d883a 	mov	r6,r21
 400ea4c:	500f883a 	mov	r7,r10
 400ea50:	4012c940 	call	4012c94 <__gtdf2>
 400ea54:	00bc750e 	bge	zero,r2,400dc2c <__reset+0xfb00cc2c>
 400ea58:	01000c04 	movi	r4,48
 400ea5c:	00000106 	br	400ea64 <_dtoa_r+0x1574>
 400ea60:	102d883a 	mov	r22,r2
 400ea64:	b0bfffc4 	addi	r2,r22,-1
 400ea68:	10c00007 	ldb	r3,0(r2)
 400ea6c:	193ffc26 	beq	r3,r4,400ea60 <__reset+0xfb00da60>
 400ea70:	d8801317 	ldw	r2,76(sp)
 400ea74:	d8800615 	stw	r2,24(sp)
 400ea78:	003c3e06 	br	400db74 <__reset+0xfb00cb74>
 400ea7c:	d9001317 	ldw	r4,76(sp)
 400ea80:	df001117 	ldw	fp,68(sp)
 400ea84:	d9000615 	stw	r4,24(sp)
 400ea88:	003ce006 	br	400de0c <__reset+0xfb00ce0c>
 400ea8c:	df001117 	ldw	fp,68(sp)
 400ea90:	dc401217 	ldw	r17,72(sp)
 400ea94:	003c6506 	br	400dc2c <__reset+0xfb00cc2c>
 400ea98:	103e7a1e 	bne	r2,zero,400e484 <__reset+0xfb00d484>
 400ea9c:	1880004c 	andi	r2,r3,1
 400eaa0:	103e7826 	beq	r2,zero,400e484 <__reset+0xfb00d484>
 400eaa4:	003e7406 	br	400e478 <__reset+0xfb00d478>
 400eaa8:	8009883a 	mov	r4,r16
 400eaac:	a80b883a 	mov	r5,r21
 400eab0:	01800284 	movi	r6,10
 400eab4:	000f883a 	mov	r7,zero
 400eab8:	40100380 	call	4010038 <__multadd>
 400eabc:	d9000e17 	ldw	r4,56(sp)
 400eac0:	102b883a 	mov	r21,r2
 400eac4:	d9000915 	stw	r4,36(sp)
 400eac8:	003d5106 	br	400e010 <__reset+0xfb00d010>
 400eacc:	04800084 	movi	r18,2
 400ead0:	003b9a06 	br	400d93c <__reset+0xfb00c93c>
 400ead4:	d8c01317 	ldw	r3,76(sp)
 400ead8:	d8c00615 	stw	r3,24(sp)
 400eadc:	003ccb06 	br	400de0c <__reset+0xfb00ce0c>
 400eae0:	d8c01317 	ldw	r3,76(sp)
 400eae4:	d8c00615 	stw	r3,24(sp)
 400eae8:	003c2206 	br	400db74 <__reset+0xfb00cb74>
 400eaec:	20fd3826 	beq	r4,r3,400dfd0 <__reset+0xfb00cfd0>
 400eaf0:	00c00f04 	movi	r3,60
 400eaf4:	1885c83a 	sub	r2,r3,r2
 400eaf8:	003da906 	br	400e1a0 <__reset+0xfb00d1a0>
 400eafc:	000b883a 	mov	r5,zero
 400eb00:	003b5406 	br	400d854 <__reset+0xfb00c854>
 400eb04:	04c00044 	movi	r19,1
 400eb08:	003b3b06 	br	400d7f8 <__reset+0xfb00c7f8>

0400eb0c <_fflush_r>:
 400eb0c:	defffb04 	addi	sp,sp,-20
 400eb10:	dcc00315 	stw	r19,12(sp)
 400eb14:	dc400115 	stw	r17,4(sp)
 400eb18:	dfc00415 	stw	ra,16(sp)
 400eb1c:	dc800215 	stw	r18,8(sp)
 400eb20:	dc000015 	stw	r16,0(sp)
 400eb24:	2027883a 	mov	r19,r4
 400eb28:	2823883a 	mov	r17,r5
 400eb2c:	20000226 	beq	r4,zero,400eb38 <_fflush_r+0x2c>
 400eb30:	20800e17 	ldw	r2,56(r4)
 400eb34:	10005726 	beq	r2,zero,400ec94 <_fflush_r+0x188>
 400eb38:	8880030b 	ldhu	r2,12(r17)
 400eb3c:	10c0020c 	andi	r3,r2,8
 400eb40:	18ffffcc 	andi	r3,r3,65535
 400eb44:	18e0001c 	xori	r3,r3,32768
 400eb48:	18e00004 	addi	r3,r3,-32768
 400eb4c:	1800311e 	bne	r3,zero,400ec14 <_fflush_r+0x108>
 400eb50:	89000117 	ldw	r4,4(r17)
 400eb54:	10c20014 	ori	r3,r2,2048
 400eb58:	88c0030d 	sth	r3,12(r17)
 400eb5c:	180b883a 	mov	r5,r3
 400eb60:	0100520e 	bge	zero,r4,400ecac <_fflush_r+0x1a0>
 400eb64:	88c00a17 	ldw	r3,40(r17)
 400eb68:	18002226 	beq	r3,zero,400ebf4 <_fflush_r+0xe8>
 400eb6c:	1084000c 	andi	r2,r2,4096
 400eb70:	10bfffcc 	andi	r2,r2,65535
 400eb74:	10a0001c 	xori	r2,r2,32768
 400eb78:	10a00004 	addi	r2,r2,-32768
 400eb7c:	10004e26 	beq	r2,zero,400ecb8 <_fflush_r+0x1ac>
 400eb80:	8c001417 	ldw	r16,80(r17)
 400eb84:	2940010c 	andi	r5,r5,4
 400eb88:	297fffcc 	andi	r5,r5,65535
 400eb8c:	2960001c 	xori	r5,r5,32768
 400eb90:	29600004 	addi	r5,r5,-32768
 400eb94:	28000626 	beq	r5,zero,400ebb0 <_fflush_r+0xa4>
 400eb98:	89000117 	ldw	r4,4(r17)
 400eb9c:	88800c17 	ldw	r2,48(r17)
 400eba0:	8121c83a 	sub	r16,r16,r4
 400eba4:	10000226 	beq	r2,zero,400ebb0 <_fflush_r+0xa4>
 400eba8:	88800f17 	ldw	r2,60(r17)
 400ebac:	80a1c83a 	sub	r16,r16,r2
 400ebb0:	89400717 	ldw	r5,28(r17)
 400ebb4:	9809883a 	mov	r4,r19
 400ebb8:	800d883a 	mov	r6,r16
 400ebbc:	000f883a 	mov	r7,zero
 400ebc0:	183ee83a 	callr	r3
 400ebc4:	8080281e 	bne	r16,r2,400ec68 <_fflush_r+0x15c>
 400ebc8:	8880030b 	ldhu	r2,12(r17)
 400ebcc:	88c00417 	ldw	r3,16(r17)
 400ebd0:	88000115 	stw	zero,4(r17)
 400ebd4:	113dffcc 	andi	r4,r2,63487
 400ebd8:	1084000c 	andi	r2,r2,4096
 400ebdc:	10bfffcc 	andi	r2,r2,65535
 400ebe0:	10a0001c 	xori	r2,r2,32768
 400ebe4:	8900030d 	sth	r4,12(r17)
 400ebe8:	88c00015 	stw	r3,0(r17)
 400ebec:	10a00004 	addi	r2,r2,-32768
 400ebf0:	10002c1e 	bne	r2,zero,400eca4 <_fflush_r+0x198>
 400ebf4:	0005883a 	mov	r2,zero
 400ebf8:	dfc00417 	ldw	ra,16(sp)
 400ebfc:	dcc00317 	ldw	r19,12(sp)
 400ec00:	dc800217 	ldw	r18,8(sp)
 400ec04:	dc400117 	ldw	r17,4(sp)
 400ec08:	dc000017 	ldw	r16,0(sp)
 400ec0c:	dec00504 	addi	sp,sp,20
 400ec10:	f800283a 	ret
 400ec14:	8c800417 	ldw	r18,16(r17)
 400ec18:	903ff626 	beq	r18,zero,400ebf4 <__reset+0xfb00dbf4>
 400ec1c:	8c000017 	ldw	r16,0(r17)
 400ec20:	108000cc 	andi	r2,r2,3
 400ec24:	8c800015 	stw	r18,0(r17)
 400ec28:	84a1c83a 	sub	r16,r16,r18
 400ec2c:	10001b1e 	bne	r2,zero,400ec9c <_fflush_r+0x190>
 400ec30:	88800517 	ldw	r2,20(r17)
 400ec34:	88800215 	stw	r2,8(r17)
 400ec38:	04000316 	blt	zero,r16,400ec48 <_fflush_r+0x13c>
 400ec3c:	003fed06 	br	400ebf4 <__reset+0xfb00dbf4>
 400ec40:	90a5883a 	add	r18,r18,r2
 400ec44:	043feb0e 	bge	zero,r16,400ebf4 <__reset+0xfb00dbf4>
 400ec48:	88800917 	ldw	r2,36(r17)
 400ec4c:	89400717 	ldw	r5,28(r17)
 400ec50:	800f883a 	mov	r7,r16
 400ec54:	900d883a 	mov	r6,r18
 400ec58:	9809883a 	mov	r4,r19
 400ec5c:	103ee83a 	callr	r2
 400ec60:	80a1c83a 	sub	r16,r16,r2
 400ec64:	00bff616 	blt	zero,r2,400ec40 <__reset+0xfb00dc40>
 400ec68:	88c0030b 	ldhu	r3,12(r17)
 400ec6c:	00bfffc4 	movi	r2,-1
 400ec70:	18c01014 	ori	r3,r3,64
 400ec74:	88c0030d 	sth	r3,12(r17)
 400ec78:	dfc00417 	ldw	ra,16(sp)
 400ec7c:	dcc00317 	ldw	r19,12(sp)
 400ec80:	dc800217 	ldw	r18,8(sp)
 400ec84:	dc400117 	ldw	r17,4(sp)
 400ec88:	dc000017 	ldw	r16,0(sp)
 400ec8c:	dec00504 	addi	sp,sp,20
 400ec90:	f800283a 	ret
 400ec94:	400edc80 	call	400edc8 <__sinit>
 400ec98:	003fa706 	br	400eb38 <__reset+0xfb00db38>
 400ec9c:	0005883a 	mov	r2,zero
 400eca0:	003fe406 	br	400ec34 <__reset+0xfb00dc34>
 400eca4:	8c001415 	stw	r16,80(r17)
 400eca8:	003fd206 	br	400ebf4 <__reset+0xfb00dbf4>
 400ecac:	88c00f17 	ldw	r3,60(r17)
 400ecb0:	00ffac16 	blt	zero,r3,400eb64 <__reset+0xfb00db64>
 400ecb4:	003fcf06 	br	400ebf4 <__reset+0xfb00dbf4>
 400ecb8:	89400717 	ldw	r5,28(r17)
 400ecbc:	9809883a 	mov	r4,r19
 400ecc0:	000d883a 	mov	r6,zero
 400ecc4:	01c00044 	movi	r7,1
 400ecc8:	183ee83a 	callr	r3
 400eccc:	1021883a 	mov	r16,r2
 400ecd0:	00bfffc4 	movi	r2,-1
 400ecd4:	80800326 	beq	r16,r2,400ece4 <_fflush_r+0x1d8>
 400ecd8:	8940030b 	ldhu	r5,12(r17)
 400ecdc:	88c00a17 	ldw	r3,40(r17)
 400ece0:	003fa806 	br	400eb84 <__reset+0xfb00db84>
 400ece4:	98c00017 	ldw	r3,0(r19)
 400ece8:	00800744 	movi	r2,29
 400ecec:	18bfde1e 	bne	r3,r2,400ec68 <__reset+0xfb00dc68>
 400ecf0:	003fc006 	br	400ebf4 <__reset+0xfb00dbf4>

0400ecf4 <fflush>:
 400ecf4:	200b883a 	mov	r5,r4
 400ecf8:	20000426 	beq	r4,zero,400ed0c <fflush+0x18>
 400ecfc:	00810234 	movhi	r2,1032
 400ed00:	10a37104 	addi	r2,r2,-29244
 400ed04:	11000017 	ldw	r4,0(r2)
 400ed08:	400eb0c1 	jmpi	400eb0c <_fflush_r>
 400ed0c:	00810234 	movhi	r2,1032
 400ed10:	10a37004 	addi	r2,r2,-29248
 400ed14:	11000017 	ldw	r4,0(r2)
 400ed18:	01410074 	movhi	r5,1025
 400ed1c:	297ac304 	addi	r5,r5,-5364
 400ed20:	400f9a81 	jmpi	400f9a8 <_fwalk_reent>

0400ed24 <__fp_lock>:
 400ed24:	0005883a 	mov	r2,zero
 400ed28:	f800283a 	ret

0400ed2c <__fp_unlock>:
 400ed2c:	0005883a 	mov	r2,zero
 400ed30:	f800283a 	ret

0400ed34 <_cleanup_r>:
 400ed34:	01410074 	movhi	r5,1025
 400ed38:	29476b04 	addi	r5,r5,7596
 400ed3c:	400f9001 	jmpi	400f900 <_fwalk>

0400ed40 <__sfmoreglue>:
 400ed40:	defffc04 	addi	sp,sp,-16
 400ed44:	dc800215 	stw	r18,8(sp)
 400ed48:	2825883a 	mov	r18,r5
 400ed4c:	dc000015 	stw	r16,0(sp)
 400ed50:	01401704 	movi	r5,92
 400ed54:	2021883a 	mov	r16,r4
 400ed58:	9009883a 	mov	r4,r18
 400ed5c:	dfc00315 	stw	ra,12(sp)
 400ed60:	dc400115 	stw	r17,4(sp)
 400ed64:	4009dd80 	call	4009dd8 <__mulsi3>
 400ed68:	8009883a 	mov	r4,r16
 400ed6c:	11400304 	addi	r5,r2,12
 400ed70:	1023883a 	mov	r17,r2
 400ed74:	400a4740 	call	400a474 <_malloc_r>
 400ed78:	1021883a 	mov	r16,r2
 400ed7c:	10000726 	beq	r2,zero,400ed9c <__sfmoreglue+0x5c>
 400ed80:	11000304 	addi	r4,r2,12
 400ed84:	10000015 	stw	zero,0(r2)
 400ed88:	14800115 	stw	r18,4(r2)
 400ed8c:	11000215 	stw	r4,8(r2)
 400ed90:	000b883a 	mov	r5,zero
 400ed94:	880d883a 	mov	r6,r17
 400ed98:	400ad380 	call	400ad38 <memset>
 400ed9c:	8005883a 	mov	r2,r16
 400eda0:	dfc00317 	ldw	ra,12(sp)
 400eda4:	dc800217 	ldw	r18,8(sp)
 400eda8:	dc400117 	ldw	r17,4(sp)
 400edac:	dc000017 	ldw	r16,0(sp)
 400edb0:	dec00404 	addi	sp,sp,16
 400edb4:	f800283a 	ret

0400edb8 <_cleanup>:
 400edb8:	00810234 	movhi	r2,1032
 400edbc:	10a37004 	addi	r2,r2,-29248
 400edc0:	11000017 	ldw	r4,0(r2)
 400edc4:	400ed341 	jmpi	400ed34 <_cleanup_r>

0400edc8 <__sinit>:
 400edc8:	20800e17 	ldw	r2,56(r4)
 400edcc:	1000401e 	bne	r2,zero,400eed0 <__sinit+0x108>
 400edd0:	21400117 	ldw	r5,4(r4)
 400edd4:	01810074 	movhi	r6,1025
 400edd8:	31bb4d04 	addi	r6,r6,-4812
 400eddc:	20c00217 	ldw	r3,8(r4)
 400ede0:	21800f15 	stw	r6,60(r4)
 400ede4:	2080bb04 	addi	r2,r4,748
 400ede8:	02400044 	movi	r9,1
 400edec:	018000c4 	movi	r6,3
 400edf0:	2180b915 	stw	r6,740(r4)
 400edf4:	2080ba15 	stw	r2,744(r4)
 400edf8:	22400e15 	stw	r9,56(r4)
 400edfc:	20800317 	ldw	r2,12(r4)
 400ee00:	2000b815 	stw	zero,736(r4)
 400ee04:	02010074 	movhi	r8,1025
 400ee08:	4205e604 	addi	r8,r8,6040
 400ee0c:	01c10074 	movhi	r7,1025
 400ee10:	39c5fb04 	addi	r7,r7,6124
 400ee14:	01810074 	movhi	r6,1025
 400ee18:	31861d04 	addi	r6,r6,6260
 400ee1c:	01010074 	movhi	r4,1025
 400ee20:	21063404 	addi	r4,r4,6352
 400ee24:	02800104 	movi	r10,4
 400ee28:	28000015 	stw	zero,0(r5)
 400ee2c:	28000115 	stw	zero,4(r5)
 400ee30:	28000215 	stw	zero,8(r5)
 400ee34:	2a80030d 	sth	r10,12(r5)
 400ee38:	2800038d 	sth	zero,14(r5)
 400ee3c:	28000415 	stw	zero,16(r5)
 400ee40:	28000515 	stw	zero,20(r5)
 400ee44:	28000615 	stw	zero,24(r5)
 400ee48:	29400715 	stw	r5,28(r5)
 400ee4c:	2a000815 	stw	r8,32(r5)
 400ee50:	29c00915 	stw	r7,36(r5)
 400ee54:	29800a15 	stw	r6,40(r5)
 400ee58:	29000b15 	stw	r4,44(r5)
 400ee5c:	01400284 	movi	r5,10
 400ee60:	18000015 	stw	zero,0(r3)
 400ee64:	18000115 	stw	zero,4(r3)
 400ee68:	18000215 	stw	zero,8(r3)
 400ee6c:	1940030d 	sth	r5,12(r3)
 400ee70:	1a40038d 	sth	r9,14(r3)
 400ee74:	18000415 	stw	zero,16(r3)
 400ee78:	18000515 	stw	zero,20(r3)
 400ee7c:	18000615 	stw	zero,24(r3)
 400ee80:	18c00715 	stw	r3,28(r3)
 400ee84:	1a000815 	stw	r8,32(r3)
 400ee88:	19c00915 	stw	r7,36(r3)
 400ee8c:	19800a15 	stw	r6,40(r3)
 400ee90:	19000b15 	stw	r4,44(r3)
 400ee94:	00c00484 	movi	r3,18
 400ee98:	10c0030d 	sth	r3,12(r2)
 400ee9c:	00c00084 	movi	r3,2
 400eea0:	10000015 	stw	zero,0(r2)
 400eea4:	10000115 	stw	zero,4(r2)
 400eea8:	10000215 	stw	zero,8(r2)
 400eeac:	10c0038d 	sth	r3,14(r2)
 400eeb0:	10000415 	stw	zero,16(r2)
 400eeb4:	10000515 	stw	zero,20(r2)
 400eeb8:	10000615 	stw	zero,24(r2)
 400eebc:	10800715 	stw	r2,28(r2)
 400eec0:	12000815 	stw	r8,32(r2)
 400eec4:	11c00915 	stw	r7,36(r2)
 400eec8:	11800a15 	stw	r6,40(r2)
 400eecc:	11000b15 	stw	r4,44(r2)
 400eed0:	f800283a 	ret

0400eed4 <__sfp>:
 400eed4:	defffc04 	addi	sp,sp,-16
 400eed8:	00810234 	movhi	r2,1032
 400eedc:	10a37004 	addi	r2,r2,-29248
 400eee0:	dc400115 	stw	r17,4(sp)
 400eee4:	14400017 	ldw	r17,0(r2)
 400eee8:	dc800215 	stw	r18,8(sp)
 400eeec:	dfc00315 	stw	ra,12(sp)
 400eef0:	88800e17 	ldw	r2,56(r17)
 400eef4:	dc000015 	stw	r16,0(sp)
 400eef8:	2025883a 	mov	r18,r4
 400eefc:	10002826 	beq	r2,zero,400efa0 <__sfp+0xcc>
 400ef00:	8c40b804 	addi	r17,r17,736
 400ef04:	043fffc4 	movi	r16,-1
 400ef08:	89400117 	ldw	r5,4(r17)
 400ef0c:	88800217 	ldw	r2,8(r17)
 400ef10:	297fffc4 	addi	r5,r5,-1
 400ef14:	28000a16 	blt	r5,zero,400ef40 <__sfp+0x6c>
 400ef18:	10c0030f 	ldh	r3,12(r2)
 400ef1c:	18000c26 	beq	r3,zero,400ef50 <__sfp+0x7c>
 400ef20:	10c01a04 	addi	r3,r2,104
 400ef24:	00000206 	br	400ef30 <__sfp+0x5c>
 400ef28:	19bfe90f 	ldh	r6,-92(r3)
 400ef2c:	30000826 	beq	r6,zero,400ef50 <__sfp+0x7c>
 400ef30:	297fffc4 	addi	r5,r5,-1
 400ef34:	18bffd04 	addi	r2,r3,-12
 400ef38:	18c01704 	addi	r3,r3,92
 400ef3c:	2c3ffa1e 	bne	r5,r16,400ef28 <__reset+0xfb00df28>
 400ef40:	88800017 	ldw	r2,0(r17)
 400ef44:	10001926 	beq	r2,zero,400efac <__sfp+0xd8>
 400ef48:	1023883a 	mov	r17,r2
 400ef4c:	003fee06 	br	400ef08 <__reset+0xfb00df08>
 400ef50:	00ffffc4 	movi	r3,-1
 400ef54:	10c0038d 	sth	r3,14(r2)
 400ef58:	00c00044 	movi	r3,1
 400ef5c:	10c0030d 	sth	r3,12(r2)
 400ef60:	10000015 	stw	zero,0(r2)
 400ef64:	10000215 	stw	zero,8(r2)
 400ef68:	10000115 	stw	zero,4(r2)
 400ef6c:	10000415 	stw	zero,16(r2)
 400ef70:	10000515 	stw	zero,20(r2)
 400ef74:	10000615 	stw	zero,24(r2)
 400ef78:	10000c15 	stw	zero,48(r2)
 400ef7c:	10000d15 	stw	zero,52(r2)
 400ef80:	10001115 	stw	zero,68(r2)
 400ef84:	10001215 	stw	zero,72(r2)
 400ef88:	dfc00317 	ldw	ra,12(sp)
 400ef8c:	dc800217 	ldw	r18,8(sp)
 400ef90:	dc400117 	ldw	r17,4(sp)
 400ef94:	dc000017 	ldw	r16,0(sp)
 400ef98:	dec00404 	addi	sp,sp,16
 400ef9c:	f800283a 	ret
 400efa0:	8809883a 	mov	r4,r17
 400efa4:	400edc80 	call	400edc8 <__sinit>
 400efa8:	003fd506 	br	400ef00 <__reset+0xfb00df00>
 400efac:	9009883a 	mov	r4,r18
 400efb0:	01400104 	movi	r5,4
 400efb4:	400ed400 	call	400ed40 <__sfmoreglue>
 400efb8:	88800015 	stw	r2,0(r17)
 400efbc:	103fe21e 	bne	r2,zero,400ef48 <__reset+0xfb00df48>
 400efc0:	00800304 	movi	r2,12
 400efc4:	90800015 	stw	r2,0(r18)
 400efc8:	0005883a 	mov	r2,zero
 400efcc:	003fee06 	br	400ef88 <__reset+0xfb00df88>

0400efd0 <__sfp_lock_acquire>:
 400efd0:	f800283a 	ret

0400efd4 <__sfp_lock_release>:
 400efd4:	f800283a 	ret

0400efd8 <__sinit_lock_acquire>:
 400efd8:	f800283a 	ret

0400efdc <__sinit_lock_release>:
 400efdc:	f800283a 	ret

0400efe0 <__fp_lock_all>:
 400efe0:	00810234 	movhi	r2,1032
 400efe4:	10a37104 	addi	r2,r2,-29244
 400efe8:	11000017 	ldw	r4,0(r2)
 400efec:	01410074 	movhi	r5,1025
 400eff0:	297b4904 	addi	r5,r5,-4828
 400eff4:	400f9001 	jmpi	400f900 <_fwalk>

0400eff8 <__fp_unlock_all>:
 400eff8:	00810234 	movhi	r2,1032
 400effc:	10a37104 	addi	r2,r2,-29244
 400f000:	11000017 	ldw	r4,0(r2)
 400f004:	01410074 	movhi	r5,1025
 400f008:	297b4b04 	addi	r5,r5,-4820
 400f00c:	400f9001 	jmpi	400f900 <_fwalk>

0400f010 <_malloc_trim_r>:
 400f010:	defffb04 	addi	sp,sp,-20
 400f014:	dcc00315 	stw	r19,12(sp)
 400f018:	dc800215 	stw	r18,8(sp)
 400f01c:	dc400115 	stw	r17,4(sp)
 400f020:	dc000015 	stw	r16,0(sp)
 400f024:	2827883a 	mov	r19,r5
 400f028:	dfc00415 	stw	ra,16(sp)
 400f02c:	044101f4 	movhi	r17,1031
 400f030:	8c5db404 	addi	r17,r17,30416
 400f034:	2021883a 	mov	r16,r4
 400f038:	401365c0 	call	401365c <__malloc_lock>
 400f03c:	88800217 	ldw	r2,8(r17)
 400f040:	14800117 	ldw	r18,4(r2)
 400f044:	00bfff04 	movi	r2,-4
 400f048:	90a4703a 	and	r18,r18,r2
 400f04c:	9083fbc4 	addi	r2,r18,4079
 400f050:	14e7c83a 	sub	r19,r2,r19
 400f054:	9826d33a 	srli	r19,r19,12
 400f058:	0083ffc4 	movi	r2,4095
 400f05c:	9cffffc4 	addi	r19,r19,-1
 400f060:	9826933a 	slli	r19,r19,12
 400f064:	14c0060e 	bge	r2,r19,400f080 <_malloc_trim_r+0x70>
 400f068:	8009883a 	mov	r4,r16
 400f06c:	000b883a 	mov	r5,zero
 400f070:	400af380 	call	400af38 <_sbrk_r>
 400f074:	88c00217 	ldw	r3,8(r17)
 400f078:	1c87883a 	add	r3,r3,r18
 400f07c:	10c00a26 	beq	r2,r3,400f0a8 <_malloc_trim_r+0x98>
 400f080:	8009883a 	mov	r4,r16
 400f084:	401367c0 	call	401367c <__malloc_unlock>
 400f088:	0005883a 	mov	r2,zero
 400f08c:	dfc00417 	ldw	ra,16(sp)
 400f090:	dcc00317 	ldw	r19,12(sp)
 400f094:	dc800217 	ldw	r18,8(sp)
 400f098:	dc400117 	ldw	r17,4(sp)
 400f09c:	dc000017 	ldw	r16,0(sp)
 400f0a0:	dec00504 	addi	sp,sp,20
 400f0a4:	f800283a 	ret
 400f0a8:	8009883a 	mov	r4,r16
 400f0ac:	04cbc83a 	sub	r5,zero,r19
 400f0b0:	400af380 	call	400af38 <_sbrk_r>
 400f0b4:	00ffffc4 	movi	r3,-1
 400f0b8:	10c01326 	beq	r2,r3,400f108 <_malloc_trim_r+0xf8>
 400f0bc:	00810234 	movhi	r2,1032
 400f0c0:	10a38f04 	addi	r2,r2,-29124
 400f0c4:	11000017 	ldw	r4,0(r2)
 400f0c8:	88c00217 	ldw	r3,8(r17)
 400f0cc:	94e5c83a 	sub	r18,r18,r19
 400f0d0:	94800054 	ori	r18,r18,1
 400f0d4:	24e7c83a 	sub	r19,r4,r19
 400f0d8:	1c800115 	stw	r18,4(r3)
 400f0dc:	8009883a 	mov	r4,r16
 400f0e0:	14c00015 	stw	r19,0(r2)
 400f0e4:	401367c0 	call	401367c <__malloc_unlock>
 400f0e8:	00800044 	movi	r2,1
 400f0ec:	dfc00417 	ldw	ra,16(sp)
 400f0f0:	dcc00317 	ldw	r19,12(sp)
 400f0f4:	dc800217 	ldw	r18,8(sp)
 400f0f8:	dc400117 	ldw	r17,4(sp)
 400f0fc:	dc000017 	ldw	r16,0(sp)
 400f100:	dec00504 	addi	sp,sp,20
 400f104:	f800283a 	ret
 400f108:	8009883a 	mov	r4,r16
 400f10c:	000b883a 	mov	r5,zero
 400f110:	400af380 	call	400af38 <_sbrk_r>
 400f114:	88c00217 	ldw	r3,8(r17)
 400f118:	014003c4 	movi	r5,15
 400f11c:	10c9c83a 	sub	r4,r2,r3
 400f120:	293fd70e 	bge	r5,r4,400f080 <__reset+0xfb00e080>
 400f124:	01410234 	movhi	r5,1032
 400f128:	29637204 	addi	r5,r5,-29240
 400f12c:	29400017 	ldw	r5,0(r5)
 400f130:	21000054 	ori	r4,r4,1
 400f134:	19000115 	stw	r4,4(r3)
 400f138:	1145c83a 	sub	r2,r2,r5
 400f13c:	01410234 	movhi	r5,1032
 400f140:	29638f04 	addi	r5,r5,-29124
 400f144:	28800015 	stw	r2,0(r5)
 400f148:	003fcd06 	br	400f080 <__reset+0xfb00e080>

0400f14c <_free_r>:
 400f14c:	defffd04 	addi	sp,sp,-12
 400f150:	dc400115 	stw	r17,4(sp)
 400f154:	dc000015 	stw	r16,0(sp)
 400f158:	dfc00215 	stw	ra,8(sp)
 400f15c:	2821883a 	mov	r16,r5
 400f160:	2023883a 	mov	r17,r4
 400f164:	28004b26 	beq	r5,zero,400f294 <_free_r+0x148>
 400f168:	401365c0 	call	401365c <__malloc_lock>
 400f16c:	823fff17 	ldw	r8,-4(r16)
 400f170:	00bfff84 	movi	r2,-2
 400f174:	81bffe04 	addi	r6,r16,-8
 400f178:	4084703a 	and	r2,r8,r2
 400f17c:	3087883a 	add	r3,r6,r2
 400f180:	014101f4 	movhi	r5,1031
 400f184:	295db404 	addi	r5,r5,30416
 400f188:	1a400117 	ldw	r9,4(r3)
 400f18c:	29000217 	ldw	r4,8(r5)
 400f190:	01ffff04 	movi	r7,-4
 400f194:	49ce703a 	and	r7,r9,r7
 400f198:	20c06526 	beq	r4,r3,400f330 <_free_r+0x1e4>
 400f19c:	19c00115 	stw	r7,4(r3)
 400f1a0:	4200004c 	andi	r8,r8,1
 400f1a4:	40003026 	beq	r8,zero,400f268 <_free_r+0x11c>
 400f1a8:	0009883a 	mov	r4,zero
 400f1ac:	19d1883a 	add	r8,r3,r7
 400f1b0:	42000117 	ldw	r8,4(r8)
 400f1b4:	4200004c 	andi	r8,r8,1
 400f1b8:	4000061e 	bne	r8,zero,400f1d4 <_free_r+0x88>
 400f1bc:	11c5883a 	add	r2,r2,r7
 400f1c0:	19c00217 	ldw	r7,8(r3)
 400f1c4:	20004e26 	beq	r4,zero,400f300 <_free_r+0x1b4>
 400f1c8:	18c00317 	ldw	r3,12(r3)
 400f1cc:	38c00315 	stw	r3,12(r7)
 400f1d0:	19c00215 	stw	r7,8(r3)
 400f1d4:	11c00054 	ori	r7,r2,1
 400f1d8:	3087883a 	add	r3,r6,r2
 400f1dc:	31c00115 	stw	r7,4(r6)
 400f1e0:	18800015 	stw	r2,0(r3)
 400f1e4:	20001a1e 	bne	r4,zero,400f250 <_free_r+0x104>
 400f1e8:	00c07fc4 	movi	r3,511
 400f1ec:	18802e2e 	bgeu	r3,r2,400f2a8 <_free_r+0x15c>
 400f1f0:	1006d27a 	srli	r3,r2,9
 400f1f4:	01000104 	movi	r4,4
 400f1f8:	20c06636 	bltu	r4,r3,400f394 <_free_r+0x248>
 400f1fc:	1008d1ba 	srli	r4,r2,6
 400f200:	21000e04 	addi	r4,r4,56
 400f204:	210f883a 	add	r7,r4,r4
 400f208:	39cf883a 	add	r7,r7,r7
 400f20c:	39cf883a 	add	r7,r7,r7
 400f210:	29cf883a 	add	r7,r5,r7
 400f214:	38c00217 	ldw	r3,8(r7)
 400f218:	014101f4 	movhi	r5,1031
 400f21c:	295db404 	addi	r5,r5,30416
 400f220:	19c06126 	beq	r3,r7,400f3a8 <_free_r+0x25c>
 400f224:	013fff04 	movi	r4,-4
 400f228:	19400117 	ldw	r5,4(r3)
 400f22c:	290a703a 	and	r5,r5,r4
 400f230:	1140022e 	bgeu	r2,r5,400f23c <_free_r+0xf0>
 400f234:	18c00217 	ldw	r3,8(r3)
 400f238:	38fffb1e 	bne	r7,r3,400f228 <__reset+0xfb00e228>
 400f23c:	18800317 	ldw	r2,12(r3)
 400f240:	30800315 	stw	r2,12(r6)
 400f244:	30c00215 	stw	r3,8(r6)
 400f248:	11800215 	stw	r6,8(r2)
 400f24c:	19800315 	stw	r6,12(r3)
 400f250:	8809883a 	mov	r4,r17
 400f254:	dfc00217 	ldw	ra,8(sp)
 400f258:	dc400117 	ldw	r17,4(sp)
 400f25c:	dc000017 	ldw	r16,0(sp)
 400f260:	dec00304 	addi	sp,sp,12
 400f264:	401367c1 	jmpi	401367c <__malloc_unlock>
 400f268:	813ffe17 	ldw	r4,-8(r16)
 400f26c:	2a400204 	addi	r9,r5,8
 400f270:	310dc83a 	sub	r6,r6,r4
 400f274:	32000217 	ldw	r8,8(r6)
 400f278:	1105883a 	add	r2,r2,r4
 400f27c:	42404326 	beq	r8,r9,400f38c <_free_r+0x240>
 400f280:	32400317 	ldw	r9,12(r6)
 400f284:	0009883a 	mov	r4,zero
 400f288:	42400315 	stw	r9,12(r8)
 400f28c:	4a000215 	stw	r8,8(r9)
 400f290:	003fc606 	br	400f1ac <__reset+0xfb00e1ac>
 400f294:	dfc00217 	ldw	ra,8(sp)
 400f298:	dc400117 	ldw	r17,4(sp)
 400f29c:	dc000017 	ldw	r16,0(sp)
 400f2a0:	dec00304 	addi	sp,sp,12
 400f2a4:	f800283a 	ret
 400f2a8:	1004d0fa 	srli	r2,r2,3
 400f2ac:	02000044 	movi	r8,1
 400f2b0:	29c00117 	ldw	r7,4(r5)
 400f2b4:	1087883a 	add	r3,r2,r2
 400f2b8:	18c7883a 	add	r3,r3,r3
 400f2bc:	1005d0ba 	srai	r2,r2,2
 400f2c0:	18c7883a 	add	r3,r3,r3
 400f2c4:	28c7883a 	add	r3,r5,r3
 400f2c8:	19000217 	ldw	r4,8(r3)
 400f2cc:	4084983a 	sll	r2,r8,r2
 400f2d0:	30c00315 	stw	r3,12(r6)
 400f2d4:	31000215 	stw	r4,8(r6)
 400f2d8:	11c4b03a 	or	r2,r2,r7
 400f2dc:	21800315 	stw	r6,12(r4)
 400f2e0:	8809883a 	mov	r4,r17
 400f2e4:	28800115 	stw	r2,4(r5)
 400f2e8:	19800215 	stw	r6,8(r3)
 400f2ec:	dfc00217 	ldw	ra,8(sp)
 400f2f0:	dc400117 	ldw	r17,4(sp)
 400f2f4:	dc000017 	ldw	r16,0(sp)
 400f2f8:	dec00304 	addi	sp,sp,12
 400f2fc:	401367c1 	jmpi	401367c <__malloc_unlock>
 400f300:	020101f4 	movhi	r8,1031
 400f304:	421db604 	addi	r8,r8,30424
 400f308:	3a3faf1e 	bne	r7,r8,400f1c8 <__reset+0xfb00e1c8>
 400f30c:	29800515 	stw	r6,20(r5)
 400f310:	29800415 	stw	r6,16(r5)
 400f314:	11000054 	ori	r4,r2,1
 400f318:	3087883a 	add	r3,r6,r2
 400f31c:	31c00315 	stw	r7,12(r6)
 400f320:	31c00215 	stw	r7,8(r6)
 400f324:	31000115 	stw	r4,4(r6)
 400f328:	18800015 	stw	r2,0(r3)
 400f32c:	003fc806 	br	400f250 <__reset+0xfb00e250>
 400f330:	4200004c 	andi	r8,r8,1
 400f334:	3885883a 	add	r2,r7,r2
 400f338:	4000071e 	bne	r8,zero,400f358 <_free_r+0x20c>
 400f33c:	81fffe17 	ldw	r7,-8(r16)
 400f340:	31cdc83a 	sub	r6,r6,r7
 400f344:	30c00317 	ldw	r3,12(r6)
 400f348:	31000217 	ldw	r4,8(r6)
 400f34c:	11c5883a 	add	r2,r2,r7
 400f350:	20c00315 	stw	r3,12(r4)
 400f354:	19000215 	stw	r4,8(r3)
 400f358:	00c10234 	movhi	r3,1032
 400f35c:	18e37304 	addi	r3,r3,-29236
 400f360:	18c00017 	ldw	r3,0(r3)
 400f364:	11000054 	ori	r4,r2,1
 400f368:	31000115 	stw	r4,4(r6)
 400f36c:	29800215 	stw	r6,8(r5)
 400f370:	10ffb736 	bltu	r2,r3,400f250 <__reset+0xfb00e250>
 400f374:	00810234 	movhi	r2,1032
 400f378:	10a38404 	addi	r2,r2,-29168
 400f37c:	11400017 	ldw	r5,0(r2)
 400f380:	8809883a 	mov	r4,r17
 400f384:	400f0100 	call	400f010 <_malloc_trim_r>
 400f388:	003fb106 	br	400f250 <__reset+0xfb00e250>
 400f38c:	01000044 	movi	r4,1
 400f390:	003f8606 	br	400f1ac <__reset+0xfb00e1ac>
 400f394:	01000504 	movi	r4,20
 400f398:	20c00b36 	bltu	r4,r3,400f3c8 <_free_r+0x27c>
 400f39c:	190016c4 	addi	r4,r3,91
 400f3a0:	210f883a 	add	r7,r4,r4
 400f3a4:	003f9806 	br	400f208 <__reset+0xfb00e208>
 400f3a8:	2009d0ba 	srai	r4,r4,2
 400f3ac:	00800044 	movi	r2,1
 400f3b0:	29c00117 	ldw	r7,4(r5)
 400f3b4:	1108983a 	sll	r4,r2,r4
 400f3b8:	1805883a 	mov	r2,r3
 400f3bc:	21c8b03a 	or	r4,r4,r7
 400f3c0:	29000115 	stw	r4,4(r5)
 400f3c4:	003f9e06 	br	400f240 <__reset+0xfb00e240>
 400f3c8:	01001504 	movi	r4,84
 400f3cc:	20c00436 	bltu	r4,r3,400f3e0 <_free_r+0x294>
 400f3d0:	1008d33a 	srli	r4,r2,12
 400f3d4:	21001b84 	addi	r4,r4,110
 400f3d8:	210f883a 	add	r7,r4,r4
 400f3dc:	003f8a06 	br	400f208 <__reset+0xfb00e208>
 400f3e0:	01005504 	movi	r4,340
 400f3e4:	20c00436 	bltu	r4,r3,400f3f8 <_free_r+0x2ac>
 400f3e8:	1008d3fa 	srli	r4,r2,15
 400f3ec:	21001dc4 	addi	r4,r4,119
 400f3f0:	210f883a 	add	r7,r4,r4
 400f3f4:	003f8406 	br	400f208 <__reset+0xfb00e208>
 400f3f8:	01015504 	movi	r4,1364
 400f3fc:	20c00436 	bltu	r4,r3,400f410 <_free_r+0x2c4>
 400f400:	1008d4ba 	srli	r4,r2,18
 400f404:	21001f04 	addi	r4,r4,124
 400f408:	210f883a 	add	r7,r4,r4
 400f40c:	003f7e06 	br	400f208 <__reset+0xfb00e208>
 400f410:	01c03f04 	movi	r7,252
 400f414:	01001f84 	movi	r4,126
 400f418:	003f7b06 	br	400f208 <__reset+0xfb00e208>

0400f41c <__sfvwrite_r>:
 400f41c:	30800217 	ldw	r2,8(r6)
 400f420:	defff504 	addi	sp,sp,-44
 400f424:	dd400615 	stw	r21,24(sp)
 400f428:	dd000515 	stw	r20,20(sp)
 400f42c:	dc000115 	stw	r16,4(sp)
 400f430:	dfc00a15 	stw	ra,40(sp)
 400f434:	df000915 	stw	fp,36(sp)
 400f438:	ddc00815 	stw	r23,32(sp)
 400f43c:	dd800715 	stw	r22,28(sp)
 400f440:	dcc00415 	stw	r19,16(sp)
 400f444:	dc800315 	stw	r18,12(sp)
 400f448:	dc400215 	stw	r17,8(sp)
 400f44c:	3029883a 	mov	r20,r6
 400f450:	202b883a 	mov	r21,r4
 400f454:	2821883a 	mov	r16,r5
 400f458:	10002126 	beq	r2,zero,400f4e0 <__sfvwrite_r+0xc4>
 400f45c:	2880030b 	ldhu	r2,12(r5)
 400f460:	10c0020c 	andi	r3,r2,8
 400f464:	18ffffcc 	andi	r3,r3,65535
 400f468:	18e0001c 	xori	r3,r3,32768
 400f46c:	18e00004 	addi	r3,r3,-32768
 400f470:	18002826 	beq	r3,zero,400f514 <__sfvwrite_r+0xf8>
 400f474:	28c00417 	ldw	r3,16(r5)
 400f478:	18002626 	beq	r3,zero,400f514 <__sfvwrite_r+0xf8>
 400f47c:	10c0008c 	andi	r3,r2,2
 400f480:	18ffffcc 	andi	r3,r3,65535
 400f484:	18e0001c 	xori	r3,r3,32768
 400f488:	18e00004 	addi	r3,r3,-32768
 400f48c:	a4400017 	ldw	r17,0(r20)
 400f490:	18002b26 	beq	r3,zero,400f540 <__sfvwrite_r+0x124>
 400f494:	0027883a 	mov	r19,zero
 400f498:	0025883a 	mov	r18,zero
 400f49c:	05810004 	movi	r22,1024
 400f4a0:	980d883a 	mov	r6,r19
 400f4a4:	a809883a 	mov	r4,r21
 400f4a8:	90004f26 	beq	r18,zero,400f5e8 <__sfvwrite_r+0x1cc>
 400f4ac:	900f883a 	mov	r7,r18
 400f4b0:	81400717 	ldw	r5,28(r16)
 400f4b4:	b480012e 	bgeu	r22,r18,400f4bc <__sfvwrite_r+0xa0>
 400f4b8:	01c10004 	movi	r7,1024
 400f4bc:	80800917 	ldw	r2,36(r16)
 400f4c0:	103ee83a 	callr	r2
 400f4c4:	0080540e 	bge	zero,r2,400f618 <__sfvwrite_r+0x1fc>
 400f4c8:	a0c00217 	ldw	r3,8(r20)
 400f4cc:	98a7883a 	add	r19,r19,r2
 400f4d0:	90a5c83a 	sub	r18,r18,r2
 400f4d4:	1885c83a 	sub	r2,r3,r2
 400f4d8:	a0800215 	stw	r2,8(r20)
 400f4dc:	103ff01e 	bne	r2,zero,400f4a0 <__reset+0xfb00e4a0>
 400f4e0:	0005883a 	mov	r2,zero
 400f4e4:	dfc00a17 	ldw	ra,40(sp)
 400f4e8:	df000917 	ldw	fp,36(sp)
 400f4ec:	ddc00817 	ldw	r23,32(sp)
 400f4f0:	dd800717 	ldw	r22,28(sp)
 400f4f4:	dd400617 	ldw	r21,24(sp)
 400f4f8:	dd000517 	ldw	r20,20(sp)
 400f4fc:	dcc00417 	ldw	r19,16(sp)
 400f500:	dc800317 	ldw	r18,12(sp)
 400f504:	dc400217 	ldw	r17,8(sp)
 400f508:	dc000117 	ldw	r16,4(sp)
 400f50c:	dec00b04 	addi	sp,sp,44
 400f510:	f800283a 	ret
 400f514:	a809883a 	mov	r4,r21
 400f518:	800b883a 	mov	r5,r16
 400f51c:	400d1400 	call	400d140 <__swsetup_r>
 400f520:	1000f01e 	bne	r2,zero,400f8e4 <__sfvwrite_r+0x4c8>
 400f524:	8080030b 	ldhu	r2,12(r16)
 400f528:	a4400017 	ldw	r17,0(r20)
 400f52c:	10c0008c 	andi	r3,r2,2
 400f530:	18ffffcc 	andi	r3,r3,65535
 400f534:	18e0001c 	xori	r3,r3,32768
 400f538:	18e00004 	addi	r3,r3,-32768
 400f53c:	183fd51e 	bne	r3,zero,400f494 <__reset+0xfb00e494>
 400f540:	10c0004c 	andi	r3,r2,1
 400f544:	002d883a 	mov	r22,zero
 400f548:	1800381e 	bne	r3,zero,400f62c <__sfvwrite_r+0x210>
 400f54c:	0025883a 	mov	r18,zero
 400f550:	90002126 	beq	r18,zero,400f5d8 <__sfvwrite_r+0x1bc>
 400f554:	10c0800c 	andi	r3,r2,512
 400f558:	18ffffcc 	andi	r3,r3,65535
 400f55c:	18e0001c 	xori	r3,r3,32768
 400f560:	18e00004 	addi	r3,r3,-32768
 400f564:	84c00217 	ldw	r19,8(r16)
 400f568:	18006b26 	beq	r3,zero,400f718 <__sfvwrite_r+0x2fc>
 400f56c:	980f883a 	mov	r7,r19
 400f570:	94c08636 	bltu	r18,r19,400f78c <__sfvwrite_r+0x370>
 400f574:	10c1200c 	andi	r3,r2,1152
 400f578:	18009f1e 	bne	r3,zero,400f7f8 <__sfvwrite_r+0x3dc>
 400f57c:	81000017 	ldw	r4,0(r16)
 400f580:	982f883a 	mov	r23,r19
 400f584:	9039883a 	mov	fp,r18
 400f588:	9027883a 	mov	r19,r18
 400f58c:	380d883a 	mov	r6,r7
 400f590:	b00b883a 	mov	r5,r22
 400f594:	d9c00015 	stw	r7,0(sp)
 400f598:	400fddc0 	call	400fddc <memmove>
 400f59c:	d9c00017 	ldw	r7,0(sp)
 400f5a0:	81000217 	ldw	r4,8(r16)
 400f5a4:	80800017 	ldw	r2,0(r16)
 400f5a8:	25efc83a 	sub	r23,r4,r23
 400f5ac:	11cf883a 	add	r7,r2,r7
 400f5b0:	85c00215 	stw	r23,8(r16)
 400f5b4:	81c00015 	stw	r7,0(r16)
 400f5b8:	a0800217 	ldw	r2,8(r20)
 400f5bc:	b72d883a 	add	r22,r22,fp
 400f5c0:	9725c83a 	sub	r18,r18,fp
 400f5c4:	14e7c83a 	sub	r19,r2,r19
 400f5c8:	a4c00215 	stw	r19,8(r20)
 400f5cc:	983fc426 	beq	r19,zero,400f4e0 <__reset+0xfb00e4e0>
 400f5d0:	8080030b 	ldhu	r2,12(r16)
 400f5d4:	903fdf1e 	bne	r18,zero,400f554 <__reset+0xfb00e554>
 400f5d8:	8d800017 	ldw	r22,0(r17)
 400f5dc:	8c800117 	ldw	r18,4(r17)
 400f5e0:	8c400204 	addi	r17,r17,8
 400f5e4:	003fda06 	br	400f550 <__reset+0xfb00e550>
 400f5e8:	8cc00017 	ldw	r19,0(r17)
 400f5ec:	8c800117 	ldw	r18,4(r17)
 400f5f0:	8c400204 	addi	r17,r17,8
 400f5f4:	003faa06 	br	400f4a0 <__reset+0xfb00e4a0>
 400f5f8:	40111640 	call	4011164 <_realloc_r>
 400f5fc:	102f883a 	mov	r23,r2
 400f600:	10009f1e 	bne	r2,zero,400f880 <__sfvwrite_r+0x464>
 400f604:	81400417 	ldw	r5,16(r16)
 400f608:	a809883a 	mov	r4,r21
 400f60c:	400f14c0 	call	400f14c <_free_r>
 400f610:	00800304 	movi	r2,12
 400f614:	a8800015 	stw	r2,0(r21)
 400f618:	80c0030b 	ldhu	r3,12(r16)
 400f61c:	00bfffc4 	movi	r2,-1
 400f620:	18c01014 	ori	r3,r3,64
 400f624:	80c0030d 	sth	r3,12(r16)
 400f628:	003fae06 	br	400f4e4 <__reset+0xfb00e4e4>
 400f62c:	0007883a 	mov	r3,zero
 400f630:	0039883a 	mov	fp,zero
 400f634:	0025883a 	mov	r18,zero
 400f638:	90001e26 	beq	r18,zero,400f6b4 <__sfvwrite_r+0x298>
 400f63c:	18006526 	beq	r3,zero,400f7d4 <__sfvwrite_r+0x3b8>
 400f640:	b02f883a 	mov	r23,r22
 400f644:	9580012e 	bgeu	r18,r22,400f64c <__sfvwrite_r+0x230>
 400f648:	902f883a 	mov	r23,r18
 400f64c:	81000017 	ldw	r4,0(r16)
 400f650:	80800417 	ldw	r2,16(r16)
 400f654:	84c00217 	ldw	r19,8(r16)
 400f658:	81c00517 	ldw	r7,20(r16)
 400f65c:	1100022e 	bgeu	r2,r4,400f668 <__sfvwrite_r+0x24c>
 400f660:	99e7883a 	add	r19,r19,r7
 400f664:	9dc01816 	blt	r19,r23,400f6c8 <__sfvwrite_r+0x2ac>
 400f668:	b9c03b16 	blt	r23,r7,400f758 <__sfvwrite_r+0x33c>
 400f66c:	80800917 	ldw	r2,36(r16)
 400f670:	81400717 	ldw	r5,28(r16)
 400f674:	a809883a 	mov	r4,r21
 400f678:	d8c00015 	stw	r3,0(sp)
 400f67c:	e00d883a 	mov	r6,fp
 400f680:	103ee83a 	callr	r2
 400f684:	1027883a 	mov	r19,r2
 400f688:	d8c00017 	ldw	r3,0(sp)
 400f68c:	00bfe20e 	bge	zero,r2,400f618 <__reset+0xfb00e618>
 400f690:	b4edc83a 	sub	r22,r22,r19
 400f694:	b0001a26 	beq	r22,zero,400f700 <__sfvwrite_r+0x2e4>
 400f698:	a0800217 	ldw	r2,8(r20)
 400f69c:	e4f9883a 	add	fp,fp,r19
 400f6a0:	94e5c83a 	sub	r18,r18,r19
 400f6a4:	14e7c83a 	sub	r19,r2,r19
 400f6a8:	a4c00215 	stw	r19,8(r20)
 400f6ac:	983f8c26 	beq	r19,zero,400f4e0 <__reset+0xfb00e4e0>
 400f6b0:	903fe21e 	bne	r18,zero,400f63c <__reset+0xfb00e63c>
 400f6b4:	8f000017 	ldw	fp,0(r17)
 400f6b8:	8c800117 	ldw	r18,4(r17)
 400f6bc:	0007883a 	mov	r3,zero
 400f6c0:	8c400204 	addi	r17,r17,8
 400f6c4:	003fdc06 	br	400f638 <__reset+0xfb00e638>
 400f6c8:	e00b883a 	mov	r5,fp
 400f6cc:	980d883a 	mov	r6,r19
 400f6d0:	d8c00015 	stw	r3,0(sp)
 400f6d4:	400fddc0 	call	400fddc <memmove>
 400f6d8:	80800017 	ldw	r2,0(r16)
 400f6dc:	a809883a 	mov	r4,r21
 400f6e0:	800b883a 	mov	r5,r16
 400f6e4:	14c5883a 	add	r2,r2,r19
 400f6e8:	80800015 	stw	r2,0(r16)
 400f6ec:	400eb0c0 	call	400eb0c <_fflush_r>
 400f6f0:	d8c00017 	ldw	r3,0(sp)
 400f6f4:	103fc81e 	bne	r2,zero,400f618 <__reset+0xfb00e618>
 400f6f8:	b4edc83a 	sub	r22,r22,r19
 400f6fc:	b03fe61e 	bne	r22,zero,400f698 <__reset+0xfb00e698>
 400f700:	a809883a 	mov	r4,r21
 400f704:	800b883a 	mov	r5,r16
 400f708:	400eb0c0 	call	400eb0c <_fflush_r>
 400f70c:	103fc21e 	bne	r2,zero,400f618 <__reset+0xfb00e618>
 400f710:	0007883a 	mov	r3,zero
 400f714:	003fe006 	br	400f698 <__reset+0xfb00e698>
 400f718:	81000017 	ldw	r4,0(r16)
 400f71c:	80800417 	ldw	r2,16(r16)
 400f720:	1100022e 	bgeu	r2,r4,400f72c <__sfvwrite_r+0x310>
 400f724:	9839883a 	mov	fp,r19
 400f728:	9c806036 	bltu	r19,r18,400f8ac <__sfvwrite_r+0x490>
 400f72c:	81c00517 	ldw	r7,20(r16)
 400f730:	91c01c36 	bltu	r18,r7,400f7a4 <__sfvwrite_r+0x388>
 400f734:	80800917 	ldw	r2,36(r16)
 400f738:	81400717 	ldw	r5,28(r16)
 400f73c:	a809883a 	mov	r4,r21
 400f740:	b00d883a 	mov	r6,r22
 400f744:	103ee83a 	callr	r2
 400f748:	1027883a 	mov	r19,r2
 400f74c:	00bfb20e 	bge	zero,r2,400f618 <__reset+0xfb00e618>
 400f750:	1039883a 	mov	fp,r2
 400f754:	003f9806 	br	400f5b8 <__reset+0xfb00e5b8>
 400f758:	b80d883a 	mov	r6,r23
 400f75c:	e00b883a 	mov	r5,fp
 400f760:	d8c00015 	stw	r3,0(sp)
 400f764:	400fddc0 	call	400fddc <memmove>
 400f768:	80800217 	ldw	r2,8(r16)
 400f76c:	81000017 	ldw	r4,0(r16)
 400f770:	b827883a 	mov	r19,r23
 400f774:	15c5c83a 	sub	r2,r2,r23
 400f778:	25ef883a 	add	r23,r4,r23
 400f77c:	80800215 	stw	r2,8(r16)
 400f780:	85c00015 	stw	r23,0(r16)
 400f784:	d8c00017 	ldw	r3,0(sp)
 400f788:	003fc106 	br	400f690 <__reset+0xfb00e690>
 400f78c:	81000017 	ldw	r4,0(r16)
 400f790:	902f883a 	mov	r23,r18
 400f794:	9039883a 	mov	fp,r18
 400f798:	9027883a 	mov	r19,r18
 400f79c:	900f883a 	mov	r7,r18
 400f7a0:	003f7a06 	br	400f58c <__reset+0xfb00e58c>
 400f7a4:	b00b883a 	mov	r5,r22
 400f7a8:	900d883a 	mov	r6,r18
 400f7ac:	400fddc0 	call	400fddc <memmove>
 400f7b0:	80c00217 	ldw	r3,8(r16)
 400f7b4:	80800017 	ldw	r2,0(r16)
 400f7b8:	9027883a 	mov	r19,r18
 400f7bc:	1c87c83a 	sub	r3,r3,r18
 400f7c0:	1485883a 	add	r2,r2,r18
 400f7c4:	80c00215 	stw	r3,8(r16)
 400f7c8:	80800015 	stw	r2,0(r16)
 400f7cc:	9039883a 	mov	fp,r18
 400f7d0:	003f7906 	br	400f5b8 <__reset+0xfb00e5b8>
 400f7d4:	e009883a 	mov	r4,fp
 400f7d8:	01400284 	movi	r5,10
 400f7dc:	900d883a 	mov	r6,r18
 400f7e0:	400fce40 	call	400fce4 <memchr>
 400f7e4:	10003c26 	beq	r2,zero,400f8d8 <__sfvwrite_r+0x4bc>
 400f7e8:	15800044 	addi	r22,r2,1
 400f7ec:	b72dc83a 	sub	r22,r22,fp
 400f7f0:	00c00044 	movi	r3,1
 400f7f4:	003f9206 	br	400f640 <__reset+0xfb00e640>
 400f7f8:	81000517 	ldw	r4,20(r16)
 400f7fc:	81400417 	ldw	r5,16(r16)
 400f800:	80c00017 	ldw	r3,0(r16)
 400f804:	210d883a 	add	r6,r4,r4
 400f808:	3109883a 	add	r4,r6,r4
 400f80c:	2026d7fa 	srli	r19,r4,31
 400f810:	1979c83a 	sub	fp,r3,r5
 400f814:	e1800044 	addi	r6,fp,1
 400f818:	9909883a 	add	r4,r19,r4
 400f81c:	2027d07a 	srai	r19,r4,1
 400f820:	3489883a 	add	r4,r6,r18
 400f824:	980d883a 	mov	r6,r19
 400f828:	9900022e 	bgeu	r19,r4,400f834 <__sfvwrite_r+0x418>
 400f82c:	2027883a 	mov	r19,r4
 400f830:	200d883a 	mov	r6,r4
 400f834:	1081000c 	andi	r2,r2,1024
 400f838:	10bfffcc 	andi	r2,r2,65535
 400f83c:	10a0001c 	xori	r2,r2,32768
 400f840:	10a00004 	addi	r2,r2,-32768
 400f844:	a809883a 	mov	r4,r21
 400f848:	103f6b26 	beq	r2,zero,400f5f8 <__reset+0xfb00e5f8>
 400f84c:	300b883a 	mov	r5,r6
 400f850:	400a4740 	call	400a474 <_malloc_r>
 400f854:	102f883a 	mov	r23,r2
 400f858:	103f6d26 	beq	r2,zero,400f610 <__reset+0xfb00e610>
 400f85c:	81400417 	ldw	r5,16(r16)
 400f860:	1009883a 	mov	r4,r2
 400f864:	e00d883a 	mov	r6,fp
 400f868:	400abf80 	call	400abf8 <memcpy>
 400f86c:	8080030b 	ldhu	r2,12(r16)
 400f870:	00fedfc4 	movi	r3,-1153
 400f874:	10c4703a 	and	r2,r2,r3
 400f878:	10802014 	ori	r2,r2,128
 400f87c:	8080030d 	sth	r2,12(r16)
 400f880:	bf09883a 	add	r4,r23,fp
 400f884:	9f07c83a 	sub	r3,r19,fp
 400f888:	85c00415 	stw	r23,16(r16)
 400f88c:	84c00515 	stw	r19,20(r16)
 400f890:	81000015 	stw	r4,0(r16)
 400f894:	902f883a 	mov	r23,r18
 400f898:	80c00215 	stw	r3,8(r16)
 400f89c:	9039883a 	mov	fp,r18
 400f8a0:	9027883a 	mov	r19,r18
 400f8a4:	900f883a 	mov	r7,r18
 400f8a8:	003f3806 	br	400f58c <__reset+0xfb00e58c>
 400f8ac:	b00b883a 	mov	r5,r22
 400f8b0:	980d883a 	mov	r6,r19
 400f8b4:	400fddc0 	call	400fddc <memmove>
 400f8b8:	80800017 	ldw	r2,0(r16)
 400f8bc:	a809883a 	mov	r4,r21
 400f8c0:	800b883a 	mov	r5,r16
 400f8c4:	14c5883a 	add	r2,r2,r19
 400f8c8:	80800015 	stw	r2,0(r16)
 400f8cc:	400eb0c0 	call	400eb0c <_fflush_r>
 400f8d0:	103f3926 	beq	r2,zero,400f5b8 <__reset+0xfb00e5b8>
 400f8d4:	003f5006 	br	400f618 <__reset+0xfb00e618>
 400f8d8:	95800044 	addi	r22,r18,1
 400f8dc:	00c00044 	movi	r3,1
 400f8e0:	003f5706 	br	400f640 <__reset+0xfb00e640>
 400f8e4:	80c0030b 	ldhu	r3,12(r16)
 400f8e8:	00bfffc4 	movi	r2,-1
 400f8ec:	18c01014 	ori	r3,r3,64
 400f8f0:	80c0030d 	sth	r3,12(r16)
 400f8f4:	00c00244 	movi	r3,9
 400f8f8:	a8c00015 	stw	r3,0(r21)
 400f8fc:	003ef906 	br	400f4e4 <__reset+0xfb00e4e4>

0400f900 <_fwalk>:
 400f900:	defff904 	addi	sp,sp,-28
 400f904:	dcc00315 	stw	r19,12(sp)
 400f908:	24c0b804 	addi	r19,r4,736
 400f90c:	dd400515 	stw	r21,20(sp)
 400f910:	dd000415 	stw	r20,16(sp)
 400f914:	dfc00615 	stw	ra,24(sp)
 400f918:	dc800215 	stw	r18,8(sp)
 400f91c:	dc400115 	stw	r17,4(sp)
 400f920:	dc000015 	stw	r16,0(sp)
 400f924:	282b883a 	mov	r21,r5
 400f928:	0029883a 	mov	r20,zero
 400f92c:	400efd00 	call	400efd0 <__sfp_lock_acquire>
 400f930:	98001226 	beq	r19,zero,400f97c <_fwalk+0x7c>
 400f934:	04bfffc4 	movi	r18,-1
 400f938:	9c400117 	ldw	r17,4(r19)
 400f93c:	9c000217 	ldw	r16,8(r19)
 400f940:	8c7fffc4 	addi	r17,r17,-1
 400f944:	88000b16 	blt	r17,zero,400f974 <_fwalk+0x74>
 400f948:	84000304 	addi	r16,r16,12
 400f94c:	80c0000f 	ldh	r3,0(r16)
 400f950:	8c7fffc4 	addi	r17,r17,-1
 400f954:	813ffd04 	addi	r4,r16,-12
 400f958:	18000426 	beq	r3,zero,400f96c <_fwalk+0x6c>
 400f95c:	80c0008f 	ldh	r3,2(r16)
 400f960:	1c800226 	beq	r3,r18,400f96c <_fwalk+0x6c>
 400f964:	a83ee83a 	callr	r21
 400f968:	a0a8b03a 	or	r20,r20,r2
 400f96c:	84001704 	addi	r16,r16,92
 400f970:	8cbff61e 	bne	r17,r18,400f94c <__reset+0xfb00e94c>
 400f974:	9cc00017 	ldw	r19,0(r19)
 400f978:	983fef1e 	bne	r19,zero,400f938 <__reset+0xfb00e938>
 400f97c:	400efd40 	call	400efd4 <__sfp_lock_release>
 400f980:	a005883a 	mov	r2,r20
 400f984:	dfc00617 	ldw	ra,24(sp)
 400f988:	dd400517 	ldw	r21,20(sp)
 400f98c:	dd000417 	ldw	r20,16(sp)
 400f990:	dcc00317 	ldw	r19,12(sp)
 400f994:	dc800217 	ldw	r18,8(sp)
 400f998:	dc400117 	ldw	r17,4(sp)
 400f99c:	dc000017 	ldw	r16,0(sp)
 400f9a0:	dec00704 	addi	sp,sp,28
 400f9a4:	f800283a 	ret

0400f9a8 <_fwalk_reent>:
 400f9a8:	defff804 	addi	sp,sp,-32
 400f9ac:	dcc00315 	stw	r19,12(sp)
 400f9b0:	24c0b804 	addi	r19,r4,736
 400f9b4:	dd800615 	stw	r22,24(sp)
 400f9b8:	dd400515 	stw	r21,20(sp)
 400f9bc:	dd000415 	stw	r20,16(sp)
 400f9c0:	dfc00715 	stw	ra,28(sp)
 400f9c4:	dc800215 	stw	r18,8(sp)
 400f9c8:	dc400115 	stw	r17,4(sp)
 400f9cc:	dc000015 	stw	r16,0(sp)
 400f9d0:	2029883a 	mov	r20,r4
 400f9d4:	282b883a 	mov	r21,r5
 400f9d8:	002d883a 	mov	r22,zero
 400f9dc:	400efd00 	call	400efd0 <__sfp_lock_acquire>
 400f9e0:	98001326 	beq	r19,zero,400fa30 <_fwalk_reent+0x88>
 400f9e4:	04bfffc4 	movi	r18,-1
 400f9e8:	9c400117 	ldw	r17,4(r19)
 400f9ec:	9c000217 	ldw	r16,8(r19)
 400f9f0:	8c7fffc4 	addi	r17,r17,-1
 400f9f4:	88000c16 	blt	r17,zero,400fa28 <_fwalk_reent+0x80>
 400f9f8:	84000304 	addi	r16,r16,12
 400f9fc:	80c0000f 	ldh	r3,0(r16)
 400fa00:	8c7fffc4 	addi	r17,r17,-1
 400fa04:	817ffd04 	addi	r5,r16,-12
 400fa08:	18000526 	beq	r3,zero,400fa20 <_fwalk_reent+0x78>
 400fa0c:	80c0008f 	ldh	r3,2(r16)
 400fa10:	a009883a 	mov	r4,r20
 400fa14:	1c800226 	beq	r3,r18,400fa20 <_fwalk_reent+0x78>
 400fa18:	a83ee83a 	callr	r21
 400fa1c:	b0acb03a 	or	r22,r22,r2
 400fa20:	84001704 	addi	r16,r16,92
 400fa24:	8cbff51e 	bne	r17,r18,400f9fc <__reset+0xfb00e9fc>
 400fa28:	9cc00017 	ldw	r19,0(r19)
 400fa2c:	983fee1e 	bne	r19,zero,400f9e8 <__reset+0xfb00e9e8>
 400fa30:	400efd40 	call	400efd4 <__sfp_lock_release>
 400fa34:	b005883a 	mov	r2,r22
 400fa38:	dfc00717 	ldw	ra,28(sp)
 400fa3c:	dd800617 	ldw	r22,24(sp)
 400fa40:	dd400517 	ldw	r21,20(sp)
 400fa44:	dd000417 	ldw	r20,16(sp)
 400fa48:	dcc00317 	ldw	r19,12(sp)
 400fa4c:	dc800217 	ldw	r18,8(sp)
 400fa50:	dc400117 	ldw	r17,4(sp)
 400fa54:	dc000017 	ldw	r16,0(sp)
 400fa58:	dec00804 	addi	sp,sp,32
 400fa5c:	f800283a 	ret

0400fa60 <_setlocale_r>:
 400fa60:	defffc04 	addi	sp,sp,-16
 400fa64:	dc800215 	stw	r18,8(sp)
 400fa68:	dc400115 	stw	r17,4(sp)
 400fa6c:	dc000015 	stw	r16,0(sp)
 400fa70:	dfc00315 	stw	ra,12(sp)
 400fa74:	3021883a 	mov	r16,r6
 400fa78:	2023883a 	mov	r17,r4
 400fa7c:	2825883a 	mov	r18,r5
 400fa80:	30001626 	beq	r6,zero,400fadc <_setlocale_r+0x7c>
 400fa84:	3009883a 	mov	r4,r6
 400fa88:	014101f4 	movhi	r5,1031
 400fa8c:	29553a04 	addi	r5,r5,21736
 400fa90:	40118d80 	call	40118d8 <strcmp>
 400fa94:	10000a1e 	bne	r2,zero,400fac0 <_setlocale_r+0x60>
 400fa98:	8c800c15 	stw	r18,48(r17)
 400fa9c:	8c000d15 	stw	r16,52(r17)
 400faa0:	008101f4 	movhi	r2,1031
 400faa4:	10953a04 	addi	r2,r2,21736
 400faa8:	dfc00317 	ldw	ra,12(sp)
 400faac:	dc800217 	ldw	r18,8(sp)
 400fab0:	dc400117 	ldw	r17,4(sp)
 400fab4:	dc000017 	ldw	r16,0(sp)
 400fab8:	dec00404 	addi	sp,sp,16
 400fabc:	f800283a 	ret
 400fac0:	8009883a 	mov	r4,r16
 400fac4:	014101f4 	movhi	r5,1031
 400fac8:	29554404 	addi	r5,r5,21776
 400facc:	40118d80 	call	40118d8 <strcmp>
 400fad0:	103ff126 	beq	r2,zero,400fa98 <__reset+0xfb00ea98>
 400fad4:	0005883a 	mov	r2,zero
 400fad8:	003ff306 	br	400faa8 <__reset+0xfb00eaa8>
 400fadc:	008101f4 	movhi	r2,1031
 400fae0:	10953a04 	addi	r2,r2,21736
 400fae4:	dfc00317 	ldw	ra,12(sp)
 400fae8:	dc800217 	ldw	r18,8(sp)
 400faec:	dc400117 	ldw	r17,4(sp)
 400faf0:	dc000017 	ldw	r16,0(sp)
 400faf4:	dec00404 	addi	sp,sp,16
 400faf8:	f800283a 	ret

0400fafc <__locale_charset>:
 400fafc:	008101f4 	movhi	r2,1031
 400fb00:	10955904 	addi	r2,r2,21860
 400fb04:	f800283a 	ret

0400fb08 <_localeconv_r>:
 400fb08:	008101f4 	movhi	r2,1031
 400fb0c:	10955d04 	addi	r2,r2,21876
 400fb10:	f800283a 	ret

0400fb14 <setlocale>:
 400fb14:	00c10234 	movhi	r3,1032
 400fb18:	18e37104 	addi	r3,r3,-29244
 400fb1c:	2005883a 	mov	r2,r4
 400fb20:	19000017 	ldw	r4,0(r3)
 400fb24:	280d883a 	mov	r6,r5
 400fb28:	100b883a 	mov	r5,r2
 400fb2c:	400fa601 	jmpi	400fa60 <_setlocale_r>

0400fb30 <localeconv>:
 400fb30:	008101f4 	movhi	r2,1031
 400fb34:	10955d04 	addi	r2,r2,21876
 400fb38:	f800283a 	ret

0400fb3c <__smakebuf_r>:
 400fb3c:	2880030b 	ldhu	r2,12(r5)
 400fb40:	deffed04 	addi	sp,sp,-76
 400fb44:	dc401015 	stw	r17,64(sp)
 400fb48:	10c0008c 	andi	r3,r2,2
 400fb4c:	18ffffcc 	andi	r3,r3,65535
 400fb50:	18e0001c 	xori	r3,r3,32768
 400fb54:	dc000f15 	stw	r16,60(sp)
 400fb58:	dfc01215 	stw	ra,72(sp)
 400fb5c:	dc801115 	stw	r18,68(sp)
 400fb60:	18e00004 	addi	r3,r3,-32768
 400fb64:	2821883a 	mov	r16,r5
 400fb68:	2023883a 	mov	r17,r4
 400fb6c:	1800381e 	bne	r3,zero,400fc50 <__smakebuf_r+0x114>
 400fb70:	2940038f 	ldh	r5,14(r5)
 400fb74:	28002d16 	blt	r5,zero,400fc2c <__smakebuf_r+0xf0>
 400fb78:	d80d883a 	mov	r6,sp
 400fb7c:	4011dc00 	call	4011dc0 <_fstat_r>
 400fb80:	10002916 	blt	r2,zero,400fc28 <__smakebuf_r+0xec>
 400fb84:	d8800117 	ldw	r2,4(sp)
 400fb88:	00e00014 	movui	r3,32768
 400fb8c:	10bc000c 	andi	r2,r2,61440
 400fb90:	10c03c26 	beq	r2,r3,400fc84 <__smakebuf_r+0x148>
 400fb94:	80c0030b 	ldhu	r3,12(r16)
 400fb98:	18c20014 	ori	r3,r3,2048
 400fb9c:	80c0030d 	sth	r3,12(r16)
 400fba0:	00c80004 	movi	r3,8192
 400fba4:	10c00c1e 	bne	r2,r3,400fbd8 <__smakebuf_r+0x9c>
 400fba8:	8140038f 	ldh	r5,14(r16)
 400fbac:	8809883a 	mov	r4,r17
 400fbb0:	4011e280 	call	4011e28 <_isatty_r>
 400fbb4:	10000826 	beq	r2,zero,400fbd8 <__smakebuf_r+0x9c>
 400fbb8:	80c0030b 	ldhu	r3,12(r16)
 400fbbc:	808010c4 	addi	r2,r16,67
 400fbc0:	80800015 	stw	r2,0(r16)
 400fbc4:	18c00054 	ori	r3,r3,1
 400fbc8:	80800415 	stw	r2,16(r16)
 400fbcc:	00800044 	movi	r2,1
 400fbd0:	80c0030d 	sth	r3,12(r16)
 400fbd4:	80800515 	stw	r2,20(r16)
 400fbd8:	04810004 	movi	r18,1024
 400fbdc:	8809883a 	mov	r4,r17
 400fbe0:	900b883a 	mov	r5,r18
 400fbe4:	400a4740 	call	400a474 <_malloc_r>
 400fbe8:	10003026 	beq	r2,zero,400fcac <__smakebuf_r+0x170>
 400fbec:	80c0030b 	ldhu	r3,12(r16)
 400fbf0:	01010074 	movhi	r4,1025
 400fbf4:	213b4d04 	addi	r4,r4,-4812
 400fbf8:	89000f15 	stw	r4,60(r17)
 400fbfc:	18c02014 	ori	r3,r3,128
 400fc00:	80c0030d 	sth	r3,12(r16)
 400fc04:	80800015 	stw	r2,0(r16)
 400fc08:	80800415 	stw	r2,16(r16)
 400fc0c:	84800515 	stw	r18,20(r16)
 400fc10:	dfc01217 	ldw	ra,72(sp)
 400fc14:	dc801117 	ldw	r18,68(sp)
 400fc18:	dc401017 	ldw	r17,64(sp)
 400fc1c:	dc000f17 	ldw	r16,60(sp)
 400fc20:	dec01304 	addi	sp,sp,76
 400fc24:	f800283a 	ret
 400fc28:	8080030b 	ldhu	r2,12(r16)
 400fc2c:	10c0200c 	andi	r3,r2,128
 400fc30:	18ffffcc 	andi	r3,r3,65535
 400fc34:	18e0001c 	xori	r3,r3,32768
 400fc38:	18e00004 	addi	r3,r3,-32768
 400fc3c:	18000f1e 	bne	r3,zero,400fc7c <__smakebuf_r+0x140>
 400fc40:	04810004 	movi	r18,1024
 400fc44:	10820014 	ori	r2,r2,2048
 400fc48:	8080030d 	sth	r2,12(r16)
 400fc4c:	003fe306 	br	400fbdc <__reset+0xfb00ebdc>
 400fc50:	288010c4 	addi	r2,r5,67
 400fc54:	28800015 	stw	r2,0(r5)
 400fc58:	28800415 	stw	r2,16(r5)
 400fc5c:	00800044 	movi	r2,1
 400fc60:	28800515 	stw	r2,20(r5)
 400fc64:	dfc01217 	ldw	ra,72(sp)
 400fc68:	dc801117 	ldw	r18,68(sp)
 400fc6c:	dc401017 	ldw	r17,64(sp)
 400fc70:	dc000f17 	ldw	r16,60(sp)
 400fc74:	dec01304 	addi	sp,sp,76
 400fc78:	f800283a 	ret
 400fc7c:	04801004 	movi	r18,64
 400fc80:	003ff006 	br	400fc44 <__reset+0xfb00ec44>
 400fc84:	81000a17 	ldw	r4,40(r16)
 400fc88:	00c10074 	movhi	r3,1025
 400fc8c:	18c61d04 	addi	r3,r3,6260
 400fc90:	20ffc01e 	bne	r4,r3,400fb94 <__reset+0xfb00eb94>
 400fc94:	8080030b 	ldhu	r2,12(r16)
 400fc98:	00c10004 	movi	r3,1024
 400fc9c:	80c01315 	stw	r3,76(r16)
 400fca0:	10c4b03a 	or	r2,r2,r3
 400fca4:	8080030d 	sth	r2,12(r16)
 400fca8:	003fcb06 	br	400fbd8 <__reset+0xfb00ebd8>
 400fcac:	8080030b 	ldhu	r2,12(r16)
 400fcb0:	10c0800c 	andi	r3,r2,512
 400fcb4:	18ffffcc 	andi	r3,r3,65535
 400fcb8:	18e0001c 	xori	r3,r3,32768
 400fcbc:	18e00004 	addi	r3,r3,-32768
 400fcc0:	183fd31e 	bne	r3,zero,400fc10 <__reset+0xfb00ec10>
 400fcc4:	10800094 	ori	r2,r2,2
 400fcc8:	80c010c4 	addi	r3,r16,67
 400fccc:	8080030d 	sth	r2,12(r16)
 400fcd0:	00800044 	movi	r2,1
 400fcd4:	80c00015 	stw	r3,0(r16)
 400fcd8:	80c00415 	stw	r3,16(r16)
 400fcdc:	80800515 	stw	r2,20(r16)
 400fce0:	003fcb06 	br	400fc10 <__reset+0xfb00ec10>

0400fce4 <memchr>:
 400fce4:	008000c4 	movi	r2,3
 400fce8:	29403fcc 	andi	r5,r5,255
 400fcec:	1180282e 	bgeu	r2,r6,400fd90 <memchr+0xac>
 400fcf0:	2086703a 	and	r3,r4,r2
 400fcf4:	1800351e 	bne	r3,zero,400fdcc <memchr+0xe8>
 400fcf8:	2816923a 	slli	r11,r5,8
 400fcfc:	2093883a 	add	r9,r4,r2
 400fd00:	22000084 	addi	r8,r4,2
 400fd04:	5957883a 	add	r11,r11,r5
 400fd08:	5816923a 	slli	r11,r11,8
 400fd0c:	20c00044 	addi	r3,r4,1
 400fd10:	037fbff4 	movhi	r13,65279
 400fd14:	6b7fbfc4 	addi	r13,r13,-257
 400fd18:	5957883a 	add	r11,r11,r5
 400fd1c:	5816923a 	slli	r11,r11,8
 400fd20:	03202074 	movhi	r12,32897
 400fd24:	63202004 	addi	r12,r12,-32640
 400fd28:	101d883a 	mov	r14,r2
 400fd2c:	5957883a 	add	r11,r11,r5
 400fd30:	21c00017 	ldw	r7,0(r4)
 400fd34:	31bfff04 	addi	r6,r6,-4
 400fd38:	1805883a 	mov	r2,r3
 400fd3c:	3acef03a 	xor	r7,r7,r11
 400fd40:	3b55883a 	add	r10,r7,r13
 400fd44:	01ce303a 	nor	r7,zero,r7
 400fd48:	51ce703a 	and	r7,r10,r7
 400fd4c:	3b0e703a 	and	r7,r7,r12
 400fd50:	38000a26 	beq	r7,zero,400fd7c <memchr+0x98>
 400fd54:	21c00003 	ldbu	r7,0(r4)
 400fd58:	39401e26 	beq	r7,r5,400fdd4 <memchr+0xf0>
 400fd5c:	19c00003 	ldbu	r7,0(r3)
 400fd60:	39401926 	beq	r7,r5,400fdc8 <memchr+0xe4>
 400fd64:	41c00003 	ldbu	r7,0(r8)
 400fd68:	4005883a 	mov	r2,r8
 400fd6c:	39401626 	beq	r7,r5,400fdc8 <memchr+0xe4>
 400fd70:	49c00003 	ldbu	r7,0(r9)
 400fd74:	4805883a 	mov	r2,r9
 400fd78:	39401326 	beq	r7,r5,400fdc8 <memchr+0xe4>
 400fd7c:	21000104 	addi	r4,r4,4
 400fd80:	4a400104 	addi	r9,r9,4
 400fd84:	42000104 	addi	r8,r8,4
 400fd88:	18c00104 	addi	r3,r3,4
 400fd8c:	71bfe836 	bltu	r14,r6,400fd30 <__reset+0xfb00ed30>
 400fd90:	2005883a 	mov	r2,r4
 400fd94:	30000a26 	beq	r6,zero,400fdc0 <memchr+0xdc>
 400fd98:	10c00003 	ldbu	r3,0(r2)
 400fd9c:	19400a26 	beq	r3,r5,400fdc8 <memchr+0xe4>
 400fda0:	10c00044 	addi	r3,r2,1
 400fda4:	118d883a 	add	r6,r2,r6
 400fda8:	00000306 	br	400fdb8 <memchr+0xd4>
 400fdac:	11000003 	ldbu	r4,0(r2)
 400fdb0:	18c00044 	addi	r3,r3,1
 400fdb4:	21400426 	beq	r4,r5,400fdc8 <memchr+0xe4>
 400fdb8:	1805883a 	mov	r2,r3
 400fdbc:	19bffb1e 	bne	r3,r6,400fdac <__reset+0xfb00edac>
 400fdc0:	0005883a 	mov	r2,zero
 400fdc4:	f800283a 	ret
 400fdc8:	f800283a 	ret
 400fdcc:	2005883a 	mov	r2,r4
 400fdd0:	003ff106 	br	400fd98 <__reset+0xfb00ed98>
 400fdd4:	2005883a 	mov	r2,r4
 400fdd8:	f800283a 	ret

0400fddc <memmove>:
 400fddc:	defffb04 	addi	sp,sp,-20
 400fde0:	dc000015 	stw	r16,0(sp)
 400fde4:	dfc00415 	stw	ra,16(sp)
 400fde8:	dcc00315 	stw	r19,12(sp)
 400fdec:	dc800215 	stw	r18,8(sp)
 400fdf0:	dc400115 	stw	r17,4(sp)
 400fdf4:	2021883a 	mov	r16,r4
 400fdf8:	300f883a 	mov	r7,r6
 400fdfc:	2900122e 	bgeu	r5,r4,400fe48 <memmove+0x6c>
 400fe00:	2987883a 	add	r3,r5,r6
 400fe04:	20c0102e 	bgeu	r4,r3,400fe48 <memmove+0x6c>
 400fe08:	218b883a 	add	r5,r4,r6
 400fe0c:	1989c83a 	sub	r4,r3,r6
 400fe10:	30000526 	beq	r6,zero,400fe28 <memmove+0x4c>
 400fe14:	18ffffc4 	addi	r3,r3,-1
 400fe18:	18800003 	ldbu	r2,0(r3)
 400fe1c:	297fffc4 	addi	r5,r5,-1
 400fe20:	28800005 	stb	r2,0(r5)
 400fe24:	193ffb1e 	bne	r3,r4,400fe14 <__reset+0xfb00ee14>
 400fe28:	8005883a 	mov	r2,r16
 400fe2c:	dfc00417 	ldw	ra,16(sp)
 400fe30:	dcc00317 	ldw	r19,12(sp)
 400fe34:	dc800217 	ldw	r18,8(sp)
 400fe38:	dc400117 	ldw	r17,4(sp)
 400fe3c:	dc000017 	ldw	r16,0(sp)
 400fe40:	dec00504 	addi	sp,sp,20
 400fe44:	f800283a 	ret
 400fe48:	008003c4 	movi	r2,15
 400fe4c:	1180422e 	bgeu	r2,r6,400ff58 <memmove+0x17c>
 400fe50:	2c04b03a 	or	r2,r5,r16
 400fe54:	108000cc 	andi	r2,r2,3
 400fe58:	10003f1e 	bne	r2,zero,400ff58 <memmove+0x17c>
 400fe5c:	32bffc04 	addi	r10,r6,-16
 400fe60:	5014d13a 	srli	r10,r10,4
 400fe64:	81000404 	addi	r4,r16,16
 400fe68:	8007883a 	mov	r3,r16
 400fe6c:	5004913a 	slli	r2,r10,4
 400fe70:	280f883a 	mov	r7,r5
 400fe74:	2089883a 	add	r4,r4,r2
 400fe78:	38800017 	ldw	r2,0(r7)
 400fe7c:	18c00404 	addi	r3,r3,16
 400fe80:	39c00404 	addi	r7,r7,16
 400fe84:	18bffc15 	stw	r2,-16(r3)
 400fe88:	38bffd17 	ldw	r2,-12(r7)
 400fe8c:	18bffd15 	stw	r2,-12(r3)
 400fe90:	38bffe17 	ldw	r2,-8(r7)
 400fe94:	18bffe15 	stw	r2,-8(r3)
 400fe98:	38bfff17 	ldw	r2,-4(r7)
 400fe9c:	18bfff15 	stw	r2,-4(r3)
 400fea0:	193ff51e 	bne	r3,r4,400fe78 <__reset+0xfb00ee78>
 400fea4:	52800044 	addi	r10,r10,1
 400fea8:	5014913a 	slli	r10,r10,4
 400feac:	31c003cc 	andi	r7,r6,15
 400feb0:	008000c4 	movi	r2,3
 400feb4:	8287883a 	add	r3,r16,r10
 400feb8:	2a95883a 	add	r10,r5,r10
 400febc:	11c0282e 	bgeu	r2,r7,400ff60 <memmove+0x184>
 400fec0:	3c7fff04 	addi	r17,r7,-4
 400fec4:	8808d0ba 	srli	r4,r17,2
 400fec8:	1a400104 	addi	r9,r3,4
 400fecc:	180d883a 	mov	r6,r3
 400fed0:	2105883a 	add	r2,r4,r4
 400fed4:	1085883a 	add	r2,r2,r2
 400fed8:	4893883a 	add	r9,r9,r2
 400fedc:	5005883a 	mov	r2,r10
 400fee0:	12000017 	ldw	r8,0(r2)
 400fee4:	31800104 	addi	r6,r6,4
 400fee8:	10800104 	addi	r2,r2,4
 400feec:	323fff15 	stw	r8,-4(r6)
 400fef0:	327ffb1e 	bne	r6,r9,400fee0 <__reset+0xfb00eee0>
 400fef4:	20800044 	addi	r2,r4,1
 400fef8:	1085883a 	add	r2,r2,r2
 400fefc:	1085883a 	add	r2,r2,r2
 400ff00:	017fff04 	movi	r5,-4
 400ff04:	18a5883a 	add	r18,r3,r2
 400ff08:	50a7883a 	add	r19,r10,r2
 400ff0c:	4009dd80 	call	4009dd8 <__mulsi3>
 400ff10:	144f883a 	add	r7,r2,r17
 400ff14:	980b883a 	mov	r5,r19
 400ff18:	9007883a 	mov	r3,r18
 400ff1c:	383fc226 	beq	r7,zero,400fe28 <__reset+0xfb00ee28>
 400ff20:	19cf883a 	add	r7,r3,r7
 400ff24:	29800003 	ldbu	r6,0(r5)
 400ff28:	18c00044 	addi	r3,r3,1
 400ff2c:	29400044 	addi	r5,r5,1
 400ff30:	19bfffc5 	stb	r6,-1(r3)
 400ff34:	19fffb1e 	bne	r3,r7,400ff24 <__reset+0xfb00ef24>
 400ff38:	8005883a 	mov	r2,r16
 400ff3c:	dfc00417 	ldw	ra,16(sp)
 400ff40:	dcc00317 	ldw	r19,12(sp)
 400ff44:	dc800217 	ldw	r18,8(sp)
 400ff48:	dc400117 	ldw	r17,4(sp)
 400ff4c:	dc000017 	ldw	r16,0(sp)
 400ff50:	dec00504 	addi	sp,sp,20
 400ff54:	f800283a 	ret
 400ff58:	8007883a 	mov	r3,r16
 400ff5c:	003fef06 	br	400ff1c <__reset+0xfb00ef1c>
 400ff60:	500b883a 	mov	r5,r10
 400ff64:	003fed06 	br	400ff1c <__reset+0xfb00ef1c>

0400ff68 <_Balloc>:
 400ff68:	20801317 	ldw	r2,76(r4)
 400ff6c:	defffc04 	addi	sp,sp,-16
 400ff70:	dc400115 	stw	r17,4(sp)
 400ff74:	dc000015 	stw	r16,0(sp)
 400ff78:	dfc00315 	stw	ra,12(sp)
 400ff7c:	dc800215 	stw	r18,8(sp)
 400ff80:	2023883a 	mov	r17,r4
 400ff84:	2821883a 	mov	r16,r5
 400ff88:	10000f26 	beq	r2,zero,400ffc8 <_Balloc+0x60>
 400ff8c:	8407883a 	add	r3,r16,r16
 400ff90:	18c7883a 	add	r3,r3,r3
 400ff94:	10c7883a 	add	r3,r2,r3
 400ff98:	18800017 	ldw	r2,0(r3)
 400ff9c:	10001126 	beq	r2,zero,400ffe4 <_Balloc+0x7c>
 400ffa0:	11000017 	ldw	r4,0(r2)
 400ffa4:	19000015 	stw	r4,0(r3)
 400ffa8:	10000415 	stw	zero,16(r2)
 400ffac:	10000315 	stw	zero,12(r2)
 400ffb0:	dfc00317 	ldw	ra,12(sp)
 400ffb4:	dc800217 	ldw	r18,8(sp)
 400ffb8:	dc400117 	ldw	r17,4(sp)
 400ffbc:	dc000017 	ldw	r16,0(sp)
 400ffc0:	dec00404 	addi	sp,sp,16
 400ffc4:	f800283a 	ret
 400ffc8:	01400104 	movi	r5,4
 400ffcc:	01800404 	movi	r6,16
 400ffd0:	4011b400 	call	4011b40 <_calloc_r>
 400ffd4:	88801315 	stw	r2,76(r17)
 400ffd8:	103fec1e 	bne	r2,zero,400ff8c <__reset+0xfb00ef8c>
 400ffdc:	0005883a 	mov	r2,zero
 400ffe0:	003ff306 	br	400ffb0 <__reset+0xfb00efb0>
 400ffe4:	01400044 	movi	r5,1
 400ffe8:	2c24983a 	sll	r18,r5,r16
 400ffec:	8809883a 	mov	r4,r17
 400fff0:	91800144 	addi	r6,r18,5
 400fff4:	318d883a 	add	r6,r6,r6
 400fff8:	318d883a 	add	r6,r6,r6
 400fffc:	4011b400 	call	4011b40 <_calloc_r>
 4010000:	103ff626 	beq	r2,zero,400ffdc <__reset+0xfb00efdc>
 4010004:	14000115 	stw	r16,4(r2)
 4010008:	14800215 	stw	r18,8(r2)
 401000c:	003fe606 	br	400ffa8 <__reset+0xfb00efa8>

04010010 <_Bfree>:
 4010010:	28000826 	beq	r5,zero,4010034 <_Bfree+0x24>
 4010014:	28c00117 	ldw	r3,4(r5)
 4010018:	20801317 	ldw	r2,76(r4)
 401001c:	18c7883a 	add	r3,r3,r3
 4010020:	18c7883a 	add	r3,r3,r3
 4010024:	10c5883a 	add	r2,r2,r3
 4010028:	10c00017 	ldw	r3,0(r2)
 401002c:	28c00015 	stw	r3,0(r5)
 4010030:	11400015 	stw	r5,0(r2)
 4010034:	f800283a 	ret

04010038 <__multadd>:
 4010038:	defff604 	addi	sp,sp,-40
 401003c:	dd400515 	stw	r21,20(sp)
 4010040:	2d400417 	ldw	r21,16(r5)
 4010044:	df000815 	stw	fp,32(sp)
 4010048:	ddc00715 	stw	r23,28(sp)
 401004c:	dd800615 	stw	r22,24(sp)
 4010050:	dd000415 	stw	r20,16(sp)
 4010054:	dc400115 	stw	r17,4(sp)
 4010058:	dc000015 	stw	r16,0(sp)
 401005c:	dfc00915 	stw	ra,36(sp)
 4010060:	dcc00315 	stw	r19,12(sp)
 4010064:	dc800215 	stw	r18,8(sp)
 4010068:	282d883a 	mov	r22,r5
 401006c:	202f883a 	mov	r23,r4
 4010070:	3029883a 	mov	r20,r6
 4010074:	3839883a 	mov	fp,r7
 4010078:	2c000504 	addi	r16,r5,20
 401007c:	0023883a 	mov	r17,zero
 4010080:	84c00017 	ldw	r19,0(r16)
 4010084:	a00b883a 	mov	r5,r20
 4010088:	8c400044 	addi	r17,r17,1
 401008c:	993fffcc 	andi	r4,r19,65535
 4010090:	4009dd80 	call	4009dd8 <__mulsi3>
 4010094:	1725883a 	add	r18,r2,fp
 4010098:	9808d43a 	srli	r4,r19,16
 401009c:	9026d43a 	srli	r19,r18,16
 40100a0:	a00b883a 	mov	r5,r20
 40100a4:	4009dd80 	call	4009dd8 <__mulsi3>
 40100a8:	988f883a 	add	r7,r19,r2
 40100ac:	3804943a 	slli	r2,r7,16
 40100b0:	94bfffcc 	andi	r18,r18,65535
 40100b4:	3838d43a 	srli	fp,r7,16
 40100b8:	14a5883a 	add	r18,r2,r18
 40100bc:	84800015 	stw	r18,0(r16)
 40100c0:	84000104 	addi	r16,r16,4
 40100c4:	8d7fee16 	blt	r17,r21,4010080 <__reset+0xfb00f080>
 40100c8:	e0000926 	beq	fp,zero,40100f0 <__multadd+0xb8>
 40100cc:	b0800217 	ldw	r2,8(r22)
 40100d0:	a880140e 	bge	r21,r2,4010124 <__multadd+0xec>
 40100d4:	a8800144 	addi	r2,r21,5
 40100d8:	1085883a 	add	r2,r2,r2
 40100dc:	1085883a 	add	r2,r2,r2
 40100e0:	b085883a 	add	r2,r22,r2
 40100e4:	ad400044 	addi	r21,r21,1
 40100e8:	17000015 	stw	fp,0(r2)
 40100ec:	b5400415 	stw	r21,16(r22)
 40100f0:	b005883a 	mov	r2,r22
 40100f4:	dfc00917 	ldw	ra,36(sp)
 40100f8:	df000817 	ldw	fp,32(sp)
 40100fc:	ddc00717 	ldw	r23,28(sp)
 4010100:	dd800617 	ldw	r22,24(sp)
 4010104:	dd400517 	ldw	r21,20(sp)
 4010108:	dd000417 	ldw	r20,16(sp)
 401010c:	dcc00317 	ldw	r19,12(sp)
 4010110:	dc800217 	ldw	r18,8(sp)
 4010114:	dc400117 	ldw	r17,4(sp)
 4010118:	dc000017 	ldw	r16,0(sp)
 401011c:	dec00a04 	addi	sp,sp,40
 4010120:	f800283a 	ret
 4010124:	b1400117 	ldw	r5,4(r22)
 4010128:	b809883a 	mov	r4,r23
 401012c:	29400044 	addi	r5,r5,1
 4010130:	400ff680 	call	400ff68 <_Balloc>
 4010134:	b1800417 	ldw	r6,16(r22)
 4010138:	b1400304 	addi	r5,r22,12
 401013c:	11000304 	addi	r4,r2,12
 4010140:	31800084 	addi	r6,r6,2
 4010144:	318d883a 	add	r6,r6,r6
 4010148:	318d883a 	add	r6,r6,r6
 401014c:	1021883a 	mov	r16,r2
 4010150:	400abf80 	call	400abf8 <memcpy>
 4010154:	b0c00117 	ldw	r3,4(r22)
 4010158:	b8801317 	ldw	r2,76(r23)
 401015c:	18c7883a 	add	r3,r3,r3
 4010160:	18c7883a 	add	r3,r3,r3
 4010164:	10c5883a 	add	r2,r2,r3
 4010168:	10c00017 	ldw	r3,0(r2)
 401016c:	b0c00015 	stw	r3,0(r22)
 4010170:	15800015 	stw	r22,0(r2)
 4010174:	802d883a 	mov	r22,r16
 4010178:	003fd606 	br	40100d4 <__reset+0xfb00f0d4>

0401017c <__s2b>:
 401017c:	defff904 	addi	sp,sp,-28
 4010180:	dd000415 	stw	r20,16(sp)
 4010184:	dc400115 	stw	r17,4(sp)
 4010188:	2829883a 	mov	r20,r5
 401018c:	2023883a 	mov	r17,r4
 4010190:	01400244 	movi	r5,9
 4010194:	39000204 	addi	r4,r7,8
 4010198:	dcc00315 	stw	r19,12(sp)
 401019c:	dc800215 	stw	r18,8(sp)
 40101a0:	dfc00615 	stw	ra,24(sp)
 40101a4:	dd400515 	stw	r21,20(sp)
 40101a8:	dc000015 	stw	r16,0(sp)
 40101ac:	3825883a 	mov	r18,r7
 40101b0:	3027883a 	mov	r19,r6
 40101b4:	4009d1c0 	call	4009d1c <__divsi3>
 40101b8:	00c00044 	movi	r3,1
 40101bc:	000b883a 	mov	r5,zero
 40101c0:	1880030e 	bge	r3,r2,40101d0 <__s2b+0x54>
 40101c4:	18c7883a 	add	r3,r3,r3
 40101c8:	29400044 	addi	r5,r5,1
 40101cc:	18bffd16 	blt	r3,r2,40101c4 <__reset+0xfb00f1c4>
 40101d0:	8809883a 	mov	r4,r17
 40101d4:	400ff680 	call	400ff68 <_Balloc>
 40101d8:	d8c00717 	ldw	r3,28(sp)
 40101dc:	10c00515 	stw	r3,20(r2)
 40101e0:	00c00044 	movi	r3,1
 40101e4:	10c00415 	stw	r3,16(r2)
 40101e8:	00c00244 	movi	r3,9
 40101ec:	1cc0210e 	bge	r3,r19,4010274 <__s2b+0xf8>
 40101f0:	a0eb883a 	add	r21,r20,r3
 40101f4:	a821883a 	mov	r16,r21
 40101f8:	a4e9883a 	add	r20,r20,r19
 40101fc:	81c00007 	ldb	r7,0(r16)
 4010200:	8809883a 	mov	r4,r17
 4010204:	84000044 	addi	r16,r16,1
 4010208:	100b883a 	mov	r5,r2
 401020c:	01800284 	movi	r6,10
 4010210:	39fff404 	addi	r7,r7,-48
 4010214:	40100380 	call	4010038 <__multadd>
 4010218:	853ff81e 	bne	r16,r20,40101fc <__reset+0xfb00f1fc>
 401021c:	ace1883a 	add	r16,r21,r19
 4010220:	843ffe04 	addi	r16,r16,-8
 4010224:	9c800a0e 	bge	r19,r18,4010250 <__s2b+0xd4>
 4010228:	94e5c83a 	sub	r18,r18,r19
 401022c:	84a5883a 	add	r18,r16,r18
 4010230:	81c00007 	ldb	r7,0(r16)
 4010234:	8809883a 	mov	r4,r17
 4010238:	84000044 	addi	r16,r16,1
 401023c:	100b883a 	mov	r5,r2
 4010240:	01800284 	movi	r6,10
 4010244:	39fff404 	addi	r7,r7,-48
 4010248:	40100380 	call	4010038 <__multadd>
 401024c:	84bff81e 	bne	r16,r18,4010230 <__reset+0xfb00f230>
 4010250:	dfc00617 	ldw	ra,24(sp)
 4010254:	dd400517 	ldw	r21,20(sp)
 4010258:	dd000417 	ldw	r20,16(sp)
 401025c:	dcc00317 	ldw	r19,12(sp)
 4010260:	dc800217 	ldw	r18,8(sp)
 4010264:	dc400117 	ldw	r17,4(sp)
 4010268:	dc000017 	ldw	r16,0(sp)
 401026c:	dec00704 	addi	sp,sp,28
 4010270:	f800283a 	ret
 4010274:	a4000284 	addi	r16,r20,10
 4010278:	1827883a 	mov	r19,r3
 401027c:	003fe906 	br	4010224 <__reset+0xfb00f224>

04010280 <__hi0bits>:
 4010280:	20bfffec 	andhi	r2,r4,65535
 4010284:	1000141e 	bne	r2,zero,40102d8 <__hi0bits+0x58>
 4010288:	2008943a 	slli	r4,r4,16
 401028c:	00800404 	movi	r2,16
 4010290:	20ffc02c 	andhi	r3,r4,65280
 4010294:	1800021e 	bne	r3,zero,40102a0 <__hi0bits+0x20>
 4010298:	2008923a 	slli	r4,r4,8
 401029c:	10800204 	addi	r2,r2,8
 40102a0:	20fc002c 	andhi	r3,r4,61440
 40102a4:	1800021e 	bne	r3,zero,40102b0 <__hi0bits+0x30>
 40102a8:	2008913a 	slli	r4,r4,4
 40102ac:	10800104 	addi	r2,r2,4
 40102b0:	20f0002c 	andhi	r3,r4,49152
 40102b4:	1800031e 	bne	r3,zero,40102c4 <__hi0bits+0x44>
 40102b8:	2109883a 	add	r4,r4,r4
 40102bc:	10800084 	addi	r2,r2,2
 40102c0:	2109883a 	add	r4,r4,r4
 40102c4:	20000316 	blt	r4,zero,40102d4 <__hi0bits+0x54>
 40102c8:	2110002c 	andhi	r4,r4,16384
 40102cc:	2000041e 	bne	r4,zero,40102e0 <__hi0bits+0x60>
 40102d0:	00800804 	movi	r2,32
 40102d4:	f800283a 	ret
 40102d8:	0005883a 	mov	r2,zero
 40102dc:	003fec06 	br	4010290 <__reset+0xfb00f290>
 40102e0:	10800044 	addi	r2,r2,1
 40102e4:	f800283a 	ret

040102e8 <__lo0bits>:
 40102e8:	20c00017 	ldw	r3,0(r4)
 40102ec:	188001cc 	andi	r2,r3,7
 40102f0:	10000826 	beq	r2,zero,4010314 <__lo0bits+0x2c>
 40102f4:	1880004c 	andi	r2,r3,1
 40102f8:	1000211e 	bne	r2,zero,4010380 <__lo0bits+0x98>
 40102fc:	1880008c 	andi	r2,r3,2
 4010300:	1000211e 	bne	r2,zero,4010388 <__lo0bits+0xa0>
 4010304:	1806d0ba 	srli	r3,r3,2
 4010308:	00800084 	movi	r2,2
 401030c:	20c00015 	stw	r3,0(r4)
 4010310:	f800283a 	ret
 4010314:	18bfffcc 	andi	r2,r3,65535
 4010318:	10001326 	beq	r2,zero,4010368 <__lo0bits+0x80>
 401031c:	0005883a 	mov	r2,zero
 4010320:	19403fcc 	andi	r5,r3,255
 4010324:	2800021e 	bne	r5,zero,4010330 <__lo0bits+0x48>
 4010328:	1806d23a 	srli	r3,r3,8
 401032c:	10800204 	addi	r2,r2,8
 4010330:	194003cc 	andi	r5,r3,15
 4010334:	2800021e 	bne	r5,zero,4010340 <__lo0bits+0x58>
 4010338:	1806d13a 	srli	r3,r3,4
 401033c:	10800104 	addi	r2,r2,4
 4010340:	194000cc 	andi	r5,r3,3
 4010344:	2800021e 	bne	r5,zero,4010350 <__lo0bits+0x68>
 4010348:	1806d0ba 	srli	r3,r3,2
 401034c:	10800084 	addi	r2,r2,2
 4010350:	1940004c 	andi	r5,r3,1
 4010354:	2800081e 	bne	r5,zero,4010378 <__lo0bits+0x90>
 4010358:	1806d07a 	srli	r3,r3,1
 401035c:	1800051e 	bne	r3,zero,4010374 <__lo0bits+0x8c>
 4010360:	00800804 	movi	r2,32
 4010364:	f800283a 	ret
 4010368:	1806d43a 	srli	r3,r3,16
 401036c:	00800404 	movi	r2,16
 4010370:	003feb06 	br	4010320 <__reset+0xfb00f320>
 4010374:	10800044 	addi	r2,r2,1
 4010378:	20c00015 	stw	r3,0(r4)
 401037c:	f800283a 	ret
 4010380:	0005883a 	mov	r2,zero
 4010384:	f800283a 	ret
 4010388:	1806d07a 	srli	r3,r3,1
 401038c:	00800044 	movi	r2,1
 4010390:	20c00015 	stw	r3,0(r4)
 4010394:	f800283a 	ret

04010398 <__i2b>:
 4010398:	defffd04 	addi	sp,sp,-12
 401039c:	dc000015 	stw	r16,0(sp)
 40103a0:	04000044 	movi	r16,1
 40103a4:	dc400115 	stw	r17,4(sp)
 40103a8:	2823883a 	mov	r17,r5
 40103ac:	800b883a 	mov	r5,r16
 40103b0:	dfc00215 	stw	ra,8(sp)
 40103b4:	400ff680 	call	400ff68 <_Balloc>
 40103b8:	14400515 	stw	r17,20(r2)
 40103bc:	14000415 	stw	r16,16(r2)
 40103c0:	dfc00217 	ldw	ra,8(sp)
 40103c4:	dc400117 	ldw	r17,4(sp)
 40103c8:	dc000017 	ldw	r16,0(sp)
 40103cc:	dec00304 	addi	sp,sp,12
 40103d0:	f800283a 	ret

040103d4 <__multiply>:
 40103d4:	defff004 	addi	sp,sp,-64
 40103d8:	dc800815 	stw	r18,32(sp)
 40103dc:	dc400715 	stw	r17,28(sp)
 40103e0:	34800417 	ldw	r18,16(r6)
 40103e4:	2c400417 	ldw	r17,16(r5)
 40103e8:	ddc00d15 	stw	r23,52(sp)
 40103ec:	dc000615 	stw	r16,24(sp)
 40103f0:	dfc00f15 	stw	ra,60(sp)
 40103f4:	df000e15 	stw	fp,56(sp)
 40103f8:	dd800c15 	stw	r22,48(sp)
 40103fc:	dd400b15 	stw	r21,44(sp)
 4010400:	dd000a15 	stw	r20,40(sp)
 4010404:	dcc00915 	stw	r19,36(sp)
 4010408:	2821883a 	mov	r16,r5
 401040c:	302f883a 	mov	r23,r6
 4010410:	8c80050e 	bge	r17,r18,4010428 <__multiply+0x54>
 4010414:	8807883a 	mov	r3,r17
 4010418:	3021883a 	mov	r16,r6
 401041c:	9023883a 	mov	r17,r18
 4010420:	282f883a 	mov	r23,r5
 4010424:	1825883a 	mov	r18,r3
 4010428:	80800217 	ldw	r2,8(r16)
 401042c:	8c87883a 	add	r3,r17,r18
 4010430:	d8c00115 	stw	r3,4(sp)
 4010434:	81400117 	ldw	r5,4(r16)
 4010438:	10c0010e 	bge	r2,r3,4010440 <__multiply+0x6c>
 401043c:	29400044 	addi	r5,r5,1
 4010440:	400ff680 	call	400ff68 <_Balloc>
 4010444:	d8c00117 	ldw	r3,4(sp)
 4010448:	d8800515 	stw	r2,20(sp)
 401044c:	14c00504 	addi	r19,r2,20
 4010450:	1d400144 	addi	r21,r3,5
 4010454:	ad6b883a 	add	r21,r21,r21
 4010458:	ad6b883a 	add	r21,r21,r21
 401045c:	156b883a 	add	r21,r2,r21
 4010460:	dd400215 	stw	r21,8(sp)
 4010464:	9805883a 	mov	r2,r19
 4010468:	9d40042e 	bgeu	r19,r21,401047c <__multiply+0xa8>
 401046c:	d8c00217 	ldw	r3,8(sp)
 4010470:	10000015 	stw	zero,0(r2)
 4010474:	10800104 	addi	r2,r2,4
 4010478:	10fffc36 	bltu	r2,r3,401046c <__reset+0xfb00f46c>
 401047c:	94800144 	addi	r18,r18,5
 4010480:	94a5883a 	add	r18,r18,r18
 4010484:	94ad883a 	add	r22,r18,r18
 4010488:	8c400144 	addi	r17,r17,5
 401048c:	8c63883a 	add	r17,r17,r17
 4010490:	bdad883a 	add	r22,r23,r22
 4010494:	80c00504 	addi	r3,r16,20
 4010498:	8c63883a 	add	r17,r17,r17
 401049c:	bc800504 	addi	r18,r23,20
 40104a0:	dd800315 	stw	r22,12(sp)
 40104a4:	d8c00415 	stw	r3,16(sp)
 40104a8:	dcc00015 	stw	r19,0(sp)
 40104ac:	8463883a 	add	r17,r16,r17
 40104b0:	9580412e 	bgeu	r18,r22,40105b8 <__multiply+0x1e4>
 40104b4:	90800017 	ldw	r2,0(r18)
 40104b8:	173fffcc 	andi	fp,r2,65535
 40104bc:	e0001a26 	beq	fp,zero,4010528 <__multiply+0x154>
 40104c0:	dd000017 	ldw	r20,0(sp)
 40104c4:	dd800417 	ldw	r22,16(sp)
 40104c8:	002b883a 	mov	r21,zero
 40104cc:	b4c00017 	ldw	r19,0(r22)
 40104d0:	a4000017 	ldw	r16,0(r20)
 40104d4:	e00b883a 	mov	r5,fp
 40104d8:	993fffcc 	andi	r4,r19,65535
 40104dc:	4009dd80 	call	4009dd8 <__mulsi3>
 40104e0:	9808d43a 	srli	r4,r19,16
 40104e4:	817fffcc 	andi	r5,r16,65535
 40104e8:	1145883a 	add	r2,r2,r5
 40104ec:	e00b883a 	mov	r5,fp
 40104f0:	1567883a 	add	r19,r2,r21
 40104f4:	8020d43a 	srli	r16,r16,16
 40104f8:	4009dd80 	call	4009dd8 <__mulsi3>
 40104fc:	9808d43a 	srli	r4,r19,16
 4010500:	1405883a 	add	r2,r2,r16
 4010504:	a4c0000d 	sth	r19,0(r20)
 4010508:	110f883a 	add	r7,r2,r4
 401050c:	a1c0008d 	sth	r7,2(r20)
 4010510:	b5800104 	addi	r22,r22,4
 4010514:	382ad43a 	srli	r21,r7,16
 4010518:	a5000104 	addi	r20,r20,4
 401051c:	b47feb36 	bltu	r22,r17,40104cc <__reset+0xfb00f4cc>
 4010520:	a5400015 	stw	r21,0(r20)
 4010524:	90800017 	ldw	r2,0(r18)
 4010528:	1038d43a 	srli	fp,r2,16
 401052c:	e0001c26 	beq	fp,zero,40105a0 <__multiply+0x1cc>
 4010530:	d8c00017 	ldw	r3,0(sp)
 4010534:	dd000417 	ldw	r20,16(sp)
 4010538:	002b883a 	mov	r21,zero
 401053c:	1d800017 	ldw	r22,0(r3)
 4010540:	182f883a 	mov	r23,r3
 4010544:	b021883a 	mov	r16,r22
 4010548:	a4c00017 	ldw	r19,0(r20)
 401054c:	8020d43a 	srli	r16,r16,16
 4010550:	e00b883a 	mov	r5,fp
 4010554:	993fffcc 	andi	r4,r19,65535
 4010558:	4009dd80 	call	4009dd8 <__mulsi3>
 401055c:	1405883a 	add	r2,r2,r16
 4010560:	9808d43a 	srli	r4,r19,16
 4010564:	156b883a 	add	r21,r2,r21
 4010568:	bdc00104 	addi	r23,r23,4
 401056c:	bdbfff0d 	sth	r22,-4(r23)
 4010570:	bd7fff8d 	sth	r21,-2(r23)
 4010574:	bc000017 	ldw	r16,0(r23)
 4010578:	e00b883a 	mov	r5,fp
 401057c:	4009dd80 	call	4009dd8 <__mulsi3>
 4010580:	a80ed43a 	srli	r7,r21,16
 4010584:	813fffcc 	andi	r4,r16,65535
 4010588:	2085883a 	add	r2,r4,r2
 401058c:	11ed883a 	add	r22,r2,r7
 4010590:	a5000104 	addi	r20,r20,4
 4010594:	b02ad43a 	srli	r21,r22,16
 4010598:	a47feb36 	bltu	r20,r17,4010548 <__reset+0xfb00f548>
 401059c:	bd800015 	stw	r22,0(r23)
 40105a0:	d8c00017 	ldw	r3,0(sp)
 40105a4:	94800104 	addi	r18,r18,4
 40105a8:	18c00104 	addi	r3,r3,4
 40105ac:	d8c00015 	stw	r3,0(sp)
 40105b0:	d8c00317 	ldw	r3,12(sp)
 40105b4:	90ffbf36 	bltu	r18,r3,40104b4 <__reset+0xfb00f4b4>
 40105b8:	d8c00117 	ldw	r3,4(sp)
 40105bc:	00c00c0e 	bge	zero,r3,40105f0 <__multiply+0x21c>
 40105c0:	d8c00217 	ldw	r3,8(sp)
 40105c4:	18bfff17 	ldw	r2,-4(r3)
 40105c8:	1d7fff04 	addi	r21,r3,-4
 40105cc:	10000326 	beq	r2,zero,40105dc <__multiply+0x208>
 40105d0:	00000706 	br	40105f0 <__multiply+0x21c>
 40105d4:	a8800017 	ldw	r2,0(r21)
 40105d8:	1000051e 	bne	r2,zero,40105f0 <__multiply+0x21c>
 40105dc:	d8c00117 	ldw	r3,4(sp)
 40105e0:	ad7fff04 	addi	r21,r21,-4
 40105e4:	18ffffc4 	addi	r3,r3,-1
 40105e8:	d8c00115 	stw	r3,4(sp)
 40105ec:	183ff91e 	bne	r3,zero,40105d4 <__reset+0xfb00f5d4>
 40105f0:	d8800517 	ldw	r2,20(sp)
 40105f4:	d8c00117 	ldw	r3,4(sp)
 40105f8:	10c00415 	stw	r3,16(r2)
 40105fc:	dfc00f17 	ldw	ra,60(sp)
 4010600:	df000e17 	ldw	fp,56(sp)
 4010604:	ddc00d17 	ldw	r23,52(sp)
 4010608:	dd800c17 	ldw	r22,48(sp)
 401060c:	dd400b17 	ldw	r21,44(sp)
 4010610:	dd000a17 	ldw	r20,40(sp)
 4010614:	dcc00917 	ldw	r19,36(sp)
 4010618:	dc800817 	ldw	r18,32(sp)
 401061c:	dc400717 	ldw	r17,28(sp)
 4010620:	dc000617 	ldw	r16,24(sp)
 4010624:	dec01004 	addi	sp,sp,64
 4010628:	f800283a 	ret

0401062c <__pow5mult>:
 401062c:	defffb04 	addi	sp,sp,-20
 4010630:	dcc00315 	stw	r19,12(sp)
 4010634:	dc800215 	stw	r18,8(sp)
 4010638:	dc000015 	stw	r16,0(sp)
 401063c:	dfc00415 	stw	ra,16(sp)
 4010640:	dc400115 	stw	r17,4(sp)
 4010644:	308000cc 	andi	r2,r6,3
 4010648:	3021883a 	mov	r16,r6
 401064c:	2027883a 	mov	r19,r4
 4010650:	2825883a 	mov	r18,r5
 4010654:	10002e1e 	bne	r2,zero,4010710 <__pow5mult+0xe4>
 4010658:	8021d0ba 	srai	r16,r16,2
 401065c:	80001a26 	beq	r16,zero,40106c8 <__pow5mult+0x9c>
 4010660:	9c401217 	ldw	r17,72(r19)
 4010664:	8800061e 	bne	r17,zero,4010680 <__pow5mult+0x54>
 4010668:	00003406 	br	401073c <__pow5mult+0x110>
 401066c:	8021d07a 	srai	r16,r16,1
 4010670:	80001526 	beq	r16,zero,40106c8 <__pow5mult+0x9c>
 4010674:	88c00017 	ldw	r3,0(r17)
 4010678:	18001b26 	beq	r3,zero,40106e8 <__pow5mult+0xbc>
 401067c:	1823883a 	mov	r17,r3
 4010680:	80c0004c 	andi	r3,r16,1
 4010684:	183ff926 	beq	r3,zero,401066c <__reset+0xfb00f66c>
 4010688:	900b883a 	mov	r5,r18
 401068c:	880d883a 	mov	r6,r17
 4010690:	9809883a 	mov	r4,r19
 4010694:	40103d40 	call	40103d4 <__multiply>
 4010698:	90001b26 	beq	r18,zero,4010708 <__pow5mult+0xdc>
 401069c:	91000117 	ldw	r4,4(r18)
 40106a0:	98c01317 	ldw	r3,76(r19)
 40106a4:	8021d07a 	srai	r16,r16,1
 40106a8:	2109883a 	add	r4,r4,r4
 40106ac:	2109883a 	add	r4,r4,r4
 40106b0:	1907883a 	add	r3,r3,r4
 40106b4:	19000017 	ldw	r4,0(r3)
 40106b8:	91000015 	stw	r4,0(r18)
 40106bc:	1c800015 	stw	r18,0(r3)
 40106c0:	1025883a 	mov	r18,r2
 40106c4:	803feb1e 	bne	r16,zero,4010674 <__reset+0xfb00f674>
 40106c8:	9005883a 	mov	r2,r18
 40106cc:	dfc00417 	ldw	ra,16(sp)
 40106d0:	dcc00317 	ldw	r19,12(sp)
 40106d4:	dc800217 	ldw	r18,8(sp)
 40106d8:	dc400117 	ldw	r17,4(sp)
 40106dc:	dc000017 	ldw	r16,0(sp)
 40106e0:	dec00504 	addi	sp,sp,20
 40106e4:	f800283a 	ret
 40106e8:	880b883a 	mov	r5,r17
 40106ec:	880d883a 	mov	r6,r17
 40106f0:	9809883a 	mov	r4,r19
 40106f4:	40103d40 	call	40103d4 <__multiply>
 40106f8:	88800015 	stw	r2,0(r17)
 40106fc:	10000015 	stw	zero,0(r2)
 4010700:	1023883a 	mov	r17,r2
 4010704:	003fde06 	br	4010680 <__reset+0xfb00f680>
 4010708:	1025883a 	mov	r18,r2
 401070c:	003fd706 	br	401066c <__reset+0xfb00f66c>
 4010710:	10bfffc4 	addi	r2,r2,-1
 4010714:	1085883a 	add	r2,r2,r2
 4010718:	00c101f4 	movhi	r3,1031
 401071c:	18d5af04 	addi	r3,r3,22204
 4010720:	1085883a 	add	r2,r2,r2
 4010724:	1885883a 	add	r2,r3,r2
 4010728:	11800017 	ldw	r6,0(r2)
 401072c:	000f883a 	mov	r7,zero
 4010730:	40100380 	call	4010038 <__multadd>
 4010734:	1025883a 	mov	r18,r2
 4010738:	003fc706 	br	4010658 <__reset+0xfb00f658>
 401073c:	9809883a 	mov	r4,r19
 4010740:	01409c44 	movi	r5,625
 4010744:	40103980 	call	4010398 <__i2b>
 4010748:	98801215 	stw	r2,72(r19)
 401074c:	1023883a 	mov	r17,r2
 4010750:	10000015 	stw	zero,0(r2)
 4010754:	003fca06 	br	4010680 <__reset+0xfb00f680>

04010758 <__lshift>:
 4010758:	defff904 	addi	sp,sp,-28
 401075c:	dd400515 	stw	r21,20(sp)
 4010760:	dc400115 	stw	r17,4(sp)
 4010764:	2d400417 	ldw	r21,16(r5)
 4010768:	3023d17a 	srai	r17,r6,5
 401076c:	28800217 	ldw	r2,8(r5)
 4010770:	dd000415 	stw	r20,16(sp)
 4010774:	8d6b883a 	add	r21,r17,r21
 4010778:	dcc00315 	stw	r19,12(sp)
 401077c:	dc800215 	stw	r18,8(sp)
 4010780:	dc000015 	stw	r16,0(sp)
 4010784:	dfc00615 	stw	ra,24(sp)
 4010788:	ac000044 	addi	r16,r21,1
 401078c:	2825883a 	mov	r18,r5
 4010790:	3029883a 	mov	r20,r6
 4010794:	2027883a 	mov	r19,r4
 4010798:	29400117 	ldw	r5,4(r5)
 401079c:	1400030e 	bge	r2,r16,40107ac <__lshift+0x54>
 40107a0:	1085883a 	add	r2,r2,r2
 40107a4:	29400044 	addi	r5,r5,1
 40107a8:	143ffd16 	blt	r2,r16,40107a0 <__reset+0xfb00f7a0>
 40107ac:	9809883a 	mov	r4,r19
 40107b0:	400ff680 	call	400ff68 <_Balloc>
 40107b4:	10c00504 	addi	r3,r2,20
 40107b8:	0440090e 	bge	zero,r17,40107e0 <__lshift+0x88>
 40107bc:	000f883a 	mov	r7,zero
 40107c0:	18000015 	stw	zero,0(r3)
 40107c4:	39c00044 	addi	r7,r7,1
 40107c8:	18c00104 	addi	r3,r3,4
 40107cc:	3c7ffc1e 	bne	r7,r17,40107c0 <__reset+0xfb00f7c0>
 40107d0:	38c00144 	addi	r3,r7,5
 40107d4:	18c7883a 	add	r3,r3,r3
 40107d8:	18c7883a 	add	r3,r3,r3
 40107dc:	10c7883a 	add	r3,r2,r3
 40107e0:	92000417 	ldw	r8,16(r18)
 40107e4:	a18007cc 	andi	r6,r20,31
 40107e8:	91c00504 	addi	r7,r18,20
 40107ec:	42000144 	addi	r8,r8,5
 40107f0:	4211883a 	add	r8,r8,r8
 40107f4:	4211883a 	add	r8,r8,r8
 40107f8:	9211883a 	add	r8,r18,r8
 40107fc:	30002226 	beq	r6,zero,4010888 <__lshift+0x130>
 4010800:	02800804 	movi	r10,32
 4010804:	5195c83a 	sub	r10,r10,r6
 4010808:	000b883a 	mov	r5,zero
 401080c:	3a400017 	ldw	r9,0(r7)
 4010810:	18c00104 	addi	r3,r3,4
 4010814:	39c00104 	addi	r7,r7,4
 4010818:	4992983a 	sll	r9,r9,r6
 401081c:	2a4ab03a 	or	r5,r5,r9
 4010820:	197fff15 	stw	r5,-4(r3)
 4010824:	397fff17 	ldw	r5,-4(r7)
 4010828:	2a8ad83a 	srl	r5,r5,r10
 401082c:	3a3ff736 	bltu	r7,r8,401080c <__reset+0xfb00f80c>
 4010830:	19400015 	stw	r5,0(r3)
 4010834:	28000126 	beq	r5,zero,401083c <__lshift+0xe4>
 4010838:	ac000084 	addi	r16,r21,2
 401083c:	91000117 	ldw	r4,4(r18)
 4010840:	98c01317 	ldw	r3,76(r19)
 4010844:	843fffc4 	addi	r16,r16,-1
 4010848:	2109883a 	add	r4,r4,r4
 401084c:	2109883a 	add	r4,r4,r4
 4010850:	1907883a 	add	r3,r3,r4
 4010854:	19000017 	ldw	r4,0(r3)
 4010858:	14000415 	stw	r16,16(r2)
 401085c:	91000015 	stw	r4,0(r18)
 4010860:	1c800015 	stw	r18,0(r3)
 4010864:	dfc00617 	ldw	ra,24(sp)
 4010868:	dd400517 	ldw	r21,20(sp)
 401086c:	dd000417 	ldw	r20,16(sp)
 4010870:	dcc00317 	ldw	r19,12(sp)
 4010874:	dc800217 	ldw	r18,8(sp)
 4010878:	dc400117 	ldw	r17,4(sp)
 401087c:	dc000017 	ldw	r16,0(sp)
 4010880:	dec00704 	addi	sp,sp,28
 4010884:	f800283a 	ret
 4010888:	39400017 	ldw	r5,0(r7)
 401088c:	18c00104 	addi	r3,r3,4
 4010890:	39c00104 	addi	r7,r7,4
 4010894:	197fff15 	stw	r5,-4(r3)
 4010898:	3a3fe82e 	bgeu	r7,r8,401083c <__reset+0xfb00f83c>
 401089c:	39400017 	ldw	r5,0(r7)
 40108a0:	18c00104 	addi	r3,r3,4
 40108a4:	39c00104 	addi	r7,r7,4
 40108a8:	197fff15 	stw	r5,-4(r3)
 40108ac:	3a3ff636 	bltu	r7,r8,4010888 <__reset+0xfb00f888>
 40108b0:	003fe206 	br	401083c <__reset+0xfb00f83c>

040108b4 <__mcmp>:
 40108b4:	20800417 	ldw	r2,16(r4)
 40108b8:	28c00417 	ldw	r3,16(r5)
 40108bc:	10c5c83a 	sub	r2,r2,r3
 40108c0:	10000f1e 	bne	r2,zero,4010900 <__mcmp+0x4c>
 40108c4:	18c00144 	addi	r3,r3,5
 40108c8:	18c7883a 	add	r3,r3,r3
 40108cc:	18c7883a 	add	r3,r3,r3
 40108d0:	21c00504 	addi	r7,r4,20
 40108d4:	28cb883a 	add	r5,r5,r3
 40108d8:	20c9883a 	add	r4,r4,r3
 40108dc:	213fff04 	addi	r4,r4,-4
 40108e0:	297fff04 	addi	r5,r5,-4
 40108e4:	21800017 	ldw	r6,0(r4)
 40108e8:	28c00017 	ldw	r3,0(r5)
 40108ec:	30c0021e 	bne	r6,r3,40108f8 <__mcmp+0x44>
 40108f0:	393ffa36 	bltu	r7,r4,40108dc <__reset+0xfb00f8dc>
 40108f4:	f800283a 	ret
 40108f8:	30c00236 	bltu	r6,r3,4010904 <__mcmp+0x50>
 40108fc:	00800044 	movi	r2,1
 4010900:	f800283a 	ret
 4010904:	00bfffc4 	movi	r2,-1
 4010908:	f800283a 	ret

0401090c <__mdiff>:
 401090c:	defffb04 	addi	sp,sp,-20
 4010910:	dc000015 	stw	r16,0(sp)
 4010914:	2821883a 	mov	r16,r5
 4010918:	dc800215 	stw	r18,8(sp)
 401091c:	300b883a 	mov	r5,r6
 4010920:	2025883a 	mov	r18,r4
 4010924:	8009883a 	mov	r4,r16
 4010928:	dc400115 	stw	r17,4(sp)
 401092c:	dfc00415 	stw	ra,16(sp)
 4010930:	dcc00315 	stw	r19,12(sp)
 4010934:	3023883a 	mov	r17,r6
 4010938:	40108b40 	call	40108b4 <__mcmp>
 401093c:	10005026 	beq	r2,zero,4010a80 <__mdiff+0x174>
 4010940:	10004a16 	blt	r2,zero,4010a6c <__mdiff+0x160>
 4010944:	0027883a 	mov	r19,zero
 4010948:	81400117 	ldw	r5,4(r16)
 401094c:	9009883a 	mov	r4,r18
 4010950:	400ff680 	call	400ff68 <_Balloc>
 4010954:	82400417 	ldw	r9,16(r16)
 4010958:	89800417 	ldw	r6,16(r17)
 401095c:	14c00315 	stw	r19,12(r2)
 4010960:	4b800144 	addi	r14,r9,5
 4010964:	31800144 	addi	r6,r6,5
 4010968:	739d883a 	add	r14,r14,r14
 401096c:	318d883a 	add	r6,r6,r6
 4010970:	739d883a 	add	r14,r14,r14
 4010974:	318d883a 	add	r6,r6,r6
 4010978:	81c00504 	addi	r7,r16,20
 401097c:	839d883a 	add	r14,r16,r14
 4010980:	8a000504 	addi	r8,r17,20
 4010984:	898d883a 	add	r6,r17,r6
 4010988:	10c00504 	addi	r3,r2,20
 401098c:	0009883a 	mov	r4,zero
 4010990:	3b000017 	ldw	r12,0(r7)
 4010994:	42c00017 	ldw	r11,0(r8)
 4010998:	42000104 	addi	r8,r8,4
 401099c:	62bfffcc 	andi	r10,r12,65535
 40109a0:	5b7fffcc 	andi	r13,r11,65535
 40109a4:	5109883a 	add	r4,r10,r4
 40109a8:	2355c83a 	sub	r10,r4,r13
 40109ac:	5816d43a 	srli	r11,r11,16
 40109b0:	6008d43a 	srli	r4,r12,16
 40109b4:	501bd43a 	srai	r13,r10,16
 40109b8:	1a80000d 	sth	r10,0(r3)
 40109bc:	22c9c83a 	sub	r4,r4,r11
 40109c0:	2349883a 	add	r4,r4,r13
 40109c4:	1900008d 	sth	r4,2(r3)
 40109c8:	39c00104 	addi	r7,r7,4
 40109cc:	2009d43a 	srai	r4,r4,16
 40109d0:	18c00104 	addi	r3,r3,4
 40109d4:	41bfee36 	bltu	r8,r6,4010990 <__reset+0xfb00f990>
 40109d8:	180b883a 	mov	r5,r3
 40109dc:	3815883a 	mov	r10,r7
 40109e0:	3b80132e 	bgeu	r7,r14,4010a30 <__mdiff+0x124>
 40109e4:	3a000017 	ldw	r8,0(r7)
 40109e8:	18c00104 	addi	r3,r3,4
 40109ec:	39c00104 	addi	r7,r7,4
 40109f0:	41bfffcc 	andi	r6,r8,65535
 40109f4:	310d883a 	add	r6,r6,r4
 40109f8:	3009d43a 	srai	r4,r6,16
 40109fc:	4010d43a 	srli	r8,r8,16
 4010a00:	19bfff0d 	sth	r6,-4(r3)
 4010a04:	2209883a 	add	r4,r4,r8
 4010a08:	193fff8d 	sth	r4,-2(r3)
 4010a0c:	2009d43a 	srai	r4,r4,16
 4010a10:	3bbff436 	bltu	r7,r14,40109e4 <__reset+0xfb00f9e4>
 4010a14:	0286303a 	nor	r3,zero,r10
 4010a18:	1b87883a 	add	r3,r3,r14
 4010a1c:	1806d0ba 	srli	r3,r3,2
 4010a20:	18c00044 	addi	r3,r3,1
 4010a24:	18c7883a 	add	r3,r3,r3
 4010a28:	18c7883a 	add	r3,r3,r3
 4010a2c:	28c7883a 	add	r3,r5,r3
 4010a30:	193fff17 	ldw	r4,-4(r3)
 4010a34:	18ffff04 	addi	r3,r3,-4
 4010a38:	2000041e 	bne	r4,zero,4010a4c <__mdiff+0x140>
 4010a3c:	18ffff04 	addi	r3,r3,-4
 4010a40:	19000017 	ldw	r4,0(r3)
 4010a44:	4a7fffc4 	addi	r9,r9,-1
 4010a48:	203ffc26 	beq	r4,zero,4010a3c <__reset+0xfb00fa3c>
 4010a4c:	12400415 	stw	r9,16(r2)
 4010a50:	dfc00417 	ldw	ra,16(sp)
 4010a54:	dcc00317 	ldw	r19,12(sp)
 4010a58:	dc800217 	ldw	r18,8(sp)
 4010a5c:	dc400117 	ldw	r17,4(sp)
 4010a60:	dc000017 	ldw	r16,0(sp)
 4010a64:	dec00504 	addi	sp,sp,20
 4010a68:	f800283a 	ret
 4010a6c:	8005883a 	mov	r2,r16
 4010a70:	04c00044 	movi	r19,1
 4010a74:	8821883a 	mov	r16,r17
 4010a78:	1023883a 	mov	r17,r2
 4010a7c:	003fb206 	br	4010948 <__reset+0xfb00f948>
 4010a80:	9009883a 	mov	r4,r18
 4010a84:	000b883a 	mov	r5,zero
 4010a88:	400ff680 	call	400ff68 <_Balloc>
 4010a8c:	00c00044 	movi	r3,1
 4010a90:	10c00415 	stw	r3,16(r2)
 4010a94:	10000515 	stw	zero,20(r2)
 4010a98:	dfc00417 	ldw	ra,16(sp)
 4010a9c:	dcc00317 	ldw	r19,12(sp)
 4010aa0:	dc800217 	ldw	r18,8(sp)
 4010aa4:	dc400117 	ldw	r17,4(sp)
 4010aa8:	dc000017 	ldw	r16,0(sp)
 4010aac:	dec00504 	addi	sp,sp,20
 4010ab0:	f800283a 	ret

04010ab4 <__ulp>:
 4010ab4:	295ffc2c 	andhi	r5,r5,32752
 4010ab8:	00bf3034 	movhi	r2,64704
 4010abc:	2887883a 	add	r3,r5,r2
 4010ac0:	00c0020e 	bge	zero,r3,4010acc <__ulp+0x18>
 4010ac4:	0005883a 	mov	r2,zero
 4010ac8:	f800283a 	ret
 4010acc:	00c7c83a 	sub	r3,zero,r3
 4010ad0:	1805d53a 	srai	r2,r3,20
 4010ad4:	00c004c4 	movi	r3,19
 4010ad8:	18800a0e 	bge	r3,r2,4010b04 <__ulp+0x50>
 4010adc:	01000c84 	movi	r4,50
 4010ae0:	0007883a 	mov	r3,zero
 4010ae4:	20800516 	blt	r4,r2,4010afc <__ulp+0x48>
 4010ae8:	01000cc4 	movi	r4,51
 4010aec:	2085c83a 	sub	r2,r4,r2
 4010af0:	01000044 	movi	r4,1
 4010af4:	2084983a 	sll	r2,r4,r2
 4010af8:	f800283a 	ret
 4010afc:	00800044 	movi	r2,1
 4010b00:	f800283a 	ret
 4010b04:	00c00234 	movhi	r3,8
 4010b08:	1887d83a 	sra	r3,r3,r2
 4010b0c:	0005883a 	mov	r2,zero
 4010b10:	f800283a 	ret

04010b14 <__b2d>:
 4010b14:	defffa04 	addi	sp,sp,-24
 4010b18:	dc000015 	stw	r16,0(sp)
 4010b1c:	24000417 	ldw	r16,16(r4)
 4010b20:	dc400115 	stw	r17,4(sp)
 4010b24:	dcc00315 	stw	r19,12(sp)
 4010b28:	84000144 	addi	r16,r16,5
 4010b2c:	8421883a 	add	r16,r16,r16
 4010b30:	8421883a 	add	r16,r16,r16
 4010b34:	2421883a 	add	r16,r4,r16
 4010b38:	847fff17 	ldw	r17,-4(r16)
 4010b3c:	24c00504 	addi	r19,r4,20
 4010b40:	dd000415 	stw	r20,16(sp)
 4010b44:	8809883a 	mov	r4,r17
 4010b48:	dc800215 	stw	r18,8(sp)
 4010b4c:	2829883a 	mov	r20,r5
 4010b50:	dfc00515 	stw	ra,20(sp)
 4010b54:	40102800 	call	4010280 <__hi0bits>
 4010b58:	00c00804 	movi	r3,32
 4010b5c:	1887c83a 	sub	r3,r3,r2
 4010b60:	a0c00015 	stw	r3,0(r20)
 4010b64:	00c00284 	movi	r3,10
 4010b68:	84bfff04 	addi	r18,r16,-4
 4010b6c:	18801216 	blt	r3,r2,4010bb8 <__b2d+0xa4>
 4010b70:	010002c4 	movi	r4,11
 4010b74:	2089c83a 	sub	r4,r4,r2
 4010b78:	8906d83a 	srl	r3,r17,r4
 4010b7c:	18cffc34 	orhi	r3,r3,16368
 4010b80:	9c80322e 	bgeu	r19,r18,4010c4c <__b2d+0x138>
 4010b84:	817ffe17 	ldw	r5,-8(r16)
 4010b88:	2908d83a 	srl	r4,r5,r4
 4010b8c:	10800544 	addi	r2,r2,21
 4010b90:	88a2983a 	sll	r17,r17,r2
 4010b94:	2444b03a 	or	r2,r4,r17
 4010b98:	dfc00517 	ldw	ra,20(sp)
 4010b9c:	dd000417 	ldw	r20,16(sp)
 4010ba0:	dcc00317 	ldw	r19,12(sp)
 4010ba4:	dc800217 	ldw	r18,8(sp)
 4010ba8:	dc400117 	ldw	r17,4(sp)
 4010bac:	dc000017 	ldw	r16,0(sp)
 4010bb0:	dec00604 	addi	sp,sp,24
 4010bb4:	f800283a 	ret
 4010bb8:	9c801636 	bltu	r19,r18,4010c14 <__b2d+0x100>
 4010bbc:	113ffd44 	addi	r4,r2,-11
 4010bc0:	000b883a 	mov	r5,zero
 4010bc4:	20001726 	beq	r4,zero,4010c24 <__b2d+0x110>
 4010bc8:	00c00ac4 	movi	r3,43
 4010bcc:	1885c83a 	sub	r2,r3,r2
 4010bd0:	8906983a 	sll	r3,r17,r4
 4010bd4:	288cd83a 	srl	r6,r5,r2
 4010bd8:	18cffc34 	orhi	r3,r3,16368
 4010bdc:	1986b03a 	or	r3,r3,r6
 4010be0:	9c801c2e 	bgeu	r19,r18,4010c54 <__b2d+0x140>
 4010be4:	91bfff17 	ldw	r6,-4(r18)
 4010be8:	3084d83a 	srl	r2,r6,r2
 4010bec:	2908983a 	sll	r4,r5,r4
 4010bf0:	1104b03a 	or	r2,r2,r4
 4010bf4:	dfc00517 	ldw	ra,20(sp)
 4010bf8:	dd000417 	ldw	r20,16(sp)
 4010bfc:	dcc00317 	ldw	r19,12(sp)
 4010c00:	dc800217 	ldw	r18,8(sp)
 4010c04:	dc400117 	ldw	r17,4(sp)
 4010c08:	dc000017 	ldw	r16,0(sp)
 4010c0c:	dec00604 	addi	sp,sp,24
 4010c10:	f800283a 	ret
 4010c14:	113ffd44 	addi	r4,r2,-11
 4010c18:	84bffe04 	addi	r18,r16,-8
 4010c1c:	817ffe17 	ldw	r5,-8(r16)
 4010c20:	203fe91e 	bne	r4,zero,4010bc8 <__reset+0xfb00fbc8>
 4010c24:	88cffc34 	orhi	r3,r17,16368
 4010c28:	2805883a 	mov	r2,r5
 4010c2c:	dfc00517 	ldw	ra,20(sp)
 4010c30:	dd000417 	ldw	r20,16(sp)
 4010c34:	dcc00317 	ldw	r19,12(sp)
 4010c38:	dc800217 	ldw	r18,8(sp)
 4010c3c:	dc400117 	ldw	r17,4(sp)
 4010c40:	dc000017 	ldw	r16,0(sp)
 4010c44:	dec00604 	addi	sp,sp,24
 4010c48:	f800283a 	ret
 4010c4c:	0009883a 	mov	r4,zero
 4010c50:	003fce06 	br	4010b8c <__reset+0xfb00fb8c>
 4010c54:	0005883a 	mov	r2,zero
 4010c58:	003fe406 	br	4010bec <__reset+0xfb00fbec>

04010c5c <__d2b>:
 4010c5c:	defff804 	addi	sp,sp,-32
 4010c60:	dc400315 	stw	r17,12(sp)
 4010c64:	3023883a 	mov	r17,r6
 4010c68:	dc800415 	stw	r18,16(sp)
 4010c6c:	8824907a 	slli	r18,r17,1
 4010c70:	dcc00515 	stw	r19,20(sp)
 4010c74:	2827883a 	mov	r19,r5
 4010c78:	9024d57a 	srli	r18,r18,21
 4010c7c:	01400044 	movi	r5,1
 4010c80:	dd000615 	stw	r20,24(sp)
 4010c84:	dc000215 	stw	r16,8(sp)
 4010c88:	dfc00715 	stw	ra,28(sp)
 4010c8c:	3829883a 	mov	r20,r7
 4010c90:	400ff680 	call	400ff68 <_Balloc>
 4010c94:	1021883a 	mov	r16,r2
 4010c98:	00800434 	movhi	r2,16
 4010c9c:	10bfffc4 	addi	r2,r2,-1
 4010ca0:	88a2703a 	and	r17,r17,r2
 4010ca4:	90000126 	beq	r18,zero,4010cac <__d2b+0x50>
 4010ca8:	8c400434 	orhi	r17,r17,16
 4010cac:	dc400015 	stw	r17,0(sp)
 4010cb0:	98002226 	beq	r19,zero,4010d3c <__d2b+0xe0>
 4010cb4:	d9000104 	addi	r4,sp,4
 4010cb8:	dcc00115 	stw	r19,4(sp)
 4010cbc:	40102e80 	call	40102e8 <__lo0bits>
 4010cc0:	d8c00017 	ldw	r3,0(sp)
 4010cc4:	10002d1e 	bne	r2,zero,4010d7c <__d2b+0x120>
 4010cc8:	d9000117 	ldw	r4,4(sp)
 4010ccc:	81000515 	stw	r4,20(r16)
 4010cd0:	1823003a 	cmpeq	r17,r3,zero
 4010cd4:	01000084 	movi	r4,2
 4010cd8:	2463c83a 	sub	r17,r4,r17
 4010cdc:	80c00615 	stw	r3,24(r16)
 4010ce0:	84400415 	stw	r17,16(r16)
 4010ce4:	90001d1e 	bne	r18,zero,4010d5c <__d2b+0x100>
 4010ce8:	88c00104 	addi	r3,r17,4
 4010cec:	18c7883a 	add	r3,r3,r3
 4010cf0:	18c7883a 	add	r3,r3,r3
 4010cf4:	80c7883a 	add	r3,r16,r3
 4010cf8:	19000017 	ldw	r4,0(r3)
 4010cfc:	10bef384 	addi	r2,r2,-1074
 4010d00:	a0800015 	stw	r2,0(r20)
 4010d04:	40102800 	call	4010280 <__hi0bits>
 4010d08:	8822917a 	slli	r17,r17,5
 4010d0c:	d8c00817 	ldw	r3,32(sp)
 4010d10:	8885c83a 	sub	r2,r17,r2
 4010d14:	18800015 	stw	r2,0(r3)
 4010d18:	8005883a 	mov	r2,r16
 4010d1c:	dfc00717 	ldw	ra,28(sp)
 4010d20:	dd000617 	ldw	r20,24(sp)
 4010d24:	dcc00517 	ldw	r19,20(sp)
 4010d28:	dc800417 	ldw	r18,16(sp)
 4010d2c:	dc400317 	ldw	r17,12(sp)
 4010d30:	dc000217 	ldw	r16,8(sp)
 4010d34:	dec00804 	addi	sp,sp,32
 4010d38:	f800283a 	ret
 4010d3c:	d809883a 	mov	r4,sp
 4010d40:	40102e80 	call	40102e8 <__lo0bits>
 4010d44:	d8c00017 	ldw	r3,0(sp)
 4010d48:	04400044 	movi	r17,1
 4010d4c:	84400415 	stw	r17,16(r16)
 4010d50:	80c00515 	stw	r3,20(r16)
 4010d54:	10800804 	addi	r2,r2,32
 4010d58:	903fe326 	beq	r18,zero,4010ce8 <__reset+0xfb00fce8>
 4010d5c:	00c00d44 	movi	r3,53
 4010d60:	94bef344 	addi	r18,r18,-1075
 4010d64:	90a5883a 	add	r18,r18,r2
 4010d68:	1885c83a 	sub	r2,r3,r2
 4010d6c:	d8c00817 	ldw	r3,32(sp)
 4010d70:	a4800015 	stw	r18,0(r20)
 4010d74:	18800015 	stw	r2,0(r3)
 4010d78:	003fe706 	br	4010d18 <__reset+0xfb00fd18>
 4010d7c:	01000804 	movi	r4,32
 4010d80:	2089c83a 	sub	r4,r4,r2
 4010d84:	1908983a 	sll	r4,r3,r4
 4010d88:	d9400117 	ldw	r5,4(sp)
 4010d8c:	1886d83a 	srl	r3,r3,r2
 4010d90:	2148b03a 	or	r4,r4,r5
 4010d94:	81000515 	stw	r4,20(r16)
 4010d98:	d8c00015 	stw	r3,0(sp)
 4010d9c:	003fcc06 	br	4010cd0 <__reset+0xfb00fcd0>

04010da0 <__ratio>:
 4010da0:	defff904 	addi	sp,sp,-28
 4010da4:	dc400315 	stw	r17,12(sp)
 4010da8:	2823883a 	mov	r17,r5
 4010dac:	d9400104 	addi	r5,sp,4
 4010db0:	dfc00615 	stw	ra,24(sp)
 4010db4:	dcc00515 	stw	r19,20(sp)
 4010db8:	dc800415 	stw	r18,16(sp)
 4010dbc:	2027883a 	mov	r19,r4
 4010dc0:	dc000215 	stw	r16,8(sp)
 4010dc4:	4010b140 	call	4010b14 <__b2d>
 4010dc8:	8809883a 	mov	r4,r17
 4010dcc:	d80b883a 	mov	r5,sp
 4010dd0:	1025883a 	mov	r18,r2
 4010dd4:	1821883a 	mov	r16,r3
 4010dd8:	4010b140 	call	4010b14 <__b2d>
 4010ddc:	99400417 	ldw	r5,16(r19)
 4010de0:	89000417 	ldw	r4,16(r17)
 4010de4:	d9800117 	ldw	r6,4(sp)
 4010de8:	2909c83a 	sub	r4,r5,r4
 4010dec:	d9400017 	ldw	r5,0(sp)
 4010df0:	2008917a 	slli	r4,r4,5
 4010df4:	314bc83a 	sub	r5,r6,r5
 4010df8:	290b883a 	add	r5,r5,r4
 4010dfc:	01400e0e 	bge	zero,r5,4010e38 <__ratio+0x98>
 4010e00:	280a953a 	slli	r5,r5,20
 4010e04:	2c21883a 	add	r16,r5,r16
 4010e08:	9009883a 	mov	r4,r18
 4010e0c:	800b883a 	mov	r5,r16
 4010e10:	100d883a 	mov	r6,r2
 4010e14:	180f883a 	mov	r7,r3
 4010e18:	40099000 	call	4009900 <__divdf3>
 4010e1c:	dfc00617 	ldw	ra,24(sp)
 4010e20:	dcc00517 	ldw	r19,20(sp)
 4010e24:	dc800417 	ldw	r18,16(sp)
 4010e28:	dc400317 	ldw	r17,12(sp)
 4010e2c:	dc000217 	ldw	r16,8(sp)
 4010e30:	dec00704 	addi	sp,sp,28
 4010e34:	f800283a 	ret
 4010e38:	280a953a 	slli	r5,r5,20
 4010e3c:	1947c83a 	sub	r3,r3,r5
 4010e40:	003ff106 	br	4010e08 <__reset+0xfb00fe08>

04010e44 <_mprec_log10>:
 4010e44:	defffe04 	addi	sp,sp,-8
 4010e48:	dc000015 	stw	r16,0(sp)
 4010e4c:	dfc00115 	stw	ra,4(sp)
 4010e50:	008005c4 	movi	r2,23
 4010e54:	2021883a 	mov	r16,r4
 4010e58:	11000d0e 	bge	r2,r4,4010e90 <_mprec_log10+0x4c>
 4010e5c:	0005883a 	mov	r2,zero
 4010e60:	00cffc34 	movhi	r3,16368
 4010e64:	843fffc4 	addi	r16,r16,-1
 4010e68:	1009883a 	mov	r4,r2
 4010e6c:	180b883a 	mov	r5,r3
 4010e70:	000d883a 	mov	r6,zero
 4010e74:	01d00934 	movhi	r7,16420
 4010e78:	400961c0 	call	400961c <__muldf3>
 4010e7c:	803ff91e 	bne	r16,zero,4010e64 <__reset+0xfb00fe64>
 4010e80:	dfc00117 	ldw	ra,4(sp)
 4010e84:	dc000017 	ldw	r16,0(sp)
 4010e88:	dec00204 	addi	sp,sp,8
 4010e8c:	f800283a 	ret
 4010e90:	202090fa 	slli	r16,r4,3
 4010e94:	008101f4 	movhi	r2,1031
 4010e98:	10957d04 	addi	r2,r2,22004
 4010e9c:	1421883a 	add	r16,r2,r16
 4010ea0:	80800017 	ldw	r2,0(r16)
 4010ea4:	80c00117 	ldw	r3,4(r16)
 4010ea8:	dfc00117 	ldw	ra,4(sp)
 4010eac:	dc000017 	ldw	r16,0(sp)
 4010eb0:	dec00204 	addi	sp,sp,8
 4010eb4:	f800283a 	ret

04010eb8 <__copybits>:
 4010eb8:	297fffc4 	addi	r5,r5,-1
 4010ebc:	31c00417 	ldw	r7,16(r6)
 4010ec0:	2811d17a 	srai	r8,r5,5
 4010ec4:	30800504 	addi	r2,r6,20
 4010ec8:	39c00144 	addi	r7,r7,5
 4010ecc:	42000044 	addi	r8,r8,1
 4010ed0:	39cf883a 	add	r7,r7,r7
 4010ed4:	4211883a 	add	r8,r8,r8
 4010ed8:	39cf883a 	add	r7,r7,r7
 4010edc:	4211883a 	add	r8,r8,r8
 4010ee0:	31cf883a 	add	r7,r6,r7
 4010ee4:	2211883a 	add	r8,r4,r8
 4010ee8:	11c00d2e 	bgeu	r2,r7,4010f20 <__copybits+0x68>
 4010eec:	2007883a 	mov	r3,r4
 4010ef0:	11400017 	ldw	r5,0(r2)
 4010ef4:	18c00104 	addi	r3,r3,4
 4010ef8:	10800104 	addi	r2,r2,4
 4010efc:	197fff15 	stw	r5,-4(r3)
 4010f00:	11fffb36 	bltu	r2,r7,4010ef0 <__reset+0xfb00fef0>
 4010f04:	3985c83a 	sub	r2,r7,r6
 4010f08:	10bffac4 	addi	r2,r2,-21
 4010f0c:	1004d0ba 	srli	r2,r2,2
 4010f10:	10800044 	addi	r2,r2,1
 4010f14:	1085883a 	add	r2,r2,r2
 4010f18:	1085883a 	add	r2,r2,r2
 4010f1c:	2089883a 	add	r4,r4,r2
 4010f20:	2200032e 	bgeu	r4,r8,4010f30 <__copybits+0x78>
 4010f24:	20000015 	stw	zero,0(r4)
 4010f28:	21000104 	addi	r4,r4,4
 4010f2c:	223ffd36 	bltu	r4,r8,4010f24 <__reset+0xfb00ff24>
 4010f30:	f800283a 	ret

04010f34 <__any_on>:
 4010f34:	21800417 	ldw	r6,16(r4)
 4010f38:	2805d17a 	srai	r2,r5,5
 4010f3c:	20c00504 	addi	r3,r4,20
 4010f40:	30800f0e 	bge	r6,r2,4010f80 <__any_on+0x4c>
 4010f44:	3005883a 	mov	r2,r6
 4010f48:	10800144 	addi	r2,r2,5
 4010f4c:	1085883a 	add	r2,r2,r2
 4010f50:	1085883a 	add	r2,r2,r2
 4010f54:	2089883a 	add	r4,r4,r2
 4010f58:	1900152e 	bgeu	r3,r4,4010fb0 <__any_on+0x7c>
 4010f5c:	20bfff17 	ldw	r2,-4(r4)
 4010f60:	213fff04 	addi	r4,r4,-4
 4010f64:	1000041e 	bne	r2,zero,4010f78 <__any_on+0x44>
 4010f68:	1900112e 	bgeu	r3,r4,4010fb0 <__any_on+0x7c>
 4010f6c:	213fff04 	addi	r4,r4,-4
 4010f70:	20800017 	ldw	r2,0(r4)
 4010f74:	103ffc26 	beq	r2,zero,4010f68 <__reset+0xfb00ff68>
 4010f78:	00800044 	movi	r2,1
 4010f7c:	f800283a 	ret
 4010f80:	11bff10e 	bge	r2,r6,4010f48 <__reset+0xfb00ff48>
 4010f84:	294007cc 	andi	r5,r5,31
 4010f88:	283fef26 	beq	r5,zero,4010f48 <__reset+0xfb00ff48>
 4010f8c:	11800144 	addi	r6,r2,5
 4010f90:	318d883a 	add	r6,r6,r6
 4010f94:	318d883a 	add	r6,r6,r6
 4010f98:	218d883a 	add	r6,r4,r6
 4010f9c:	31800017 	ldw	r6,0(r6)
 4010fa0:	314ed83a 	srl	r7,r6,r5
 4010fa4:	394a983a 	sll	r5,r7,r5
 4010fa8:	29bff31e 	bne	r5,r6,4010f78 <__reset+0xfb00ff78>
 4010fac:	003fe606 	br	4010f48 <__reset+0xfb00ff48>
 4010fb0:	0005883a 	mov	r2,zero
 4010fb4:	f800283a 	ret

04010fb8 <_putc_r>:
 4010fb8:	defffc04 	addi	sp,sp,-16
 4010fbc:	dc000215 	stw	r16,8(sp)
 4010fc0:	dfc00315 	stw	ra,12(sp)
 4010fc4:	2021883a 	mov	r16,r4
 4010fc8:	20000226 	beq	r4,zero,4010fd4 <_putc_r+0x1c>
 4010fcc:	20800e17 	ldw	r2,56(r4)
 4010fd0:	10001d26 	beq	r2,zero,4011048 <_putc_r+0x90>
 4010fd4:	30800217 	ldw	r2,8(r6)
 4010fd8:	10bfffc4 	addi	r2,r2,-1
 4010fdc:	30800215 	stw	r2,8(r6)
 4010fe0:	10000a16 	blt	r2,zero,401100c <_putc_r+0x54>
 4010fe4:	30800017 	ldw	r2,0(r6)
 4010fe8:	11400005 	stb	r5,0(r2)
 4010fec:	30800017 	ldw	r2,0(r6)
 4010ff0:	10c00044 	addi	r3,r2,1
 4010ff4:	10800003 	ldbu	r2,0(r2)
 4010ff8:	30c00015 	stw	r3,0(r6)
 4010ffc:	dfc00317 	ldw	ra,12(sp)
 4011000:	dc000217 	ldw	r16,8(sp)
 4011004:	dec00404 	addi	sp,sp,16
 4011008:	f800283a 	ret
 401100c:	30c00617 	ldw	r3,24(r6)
 4011010:	10c01316 	blt	r2,r3,4011060 <_putc_r+0xa8>
 4011014:	30800017 	ldw	r2,0(r6)
 4011018:	01000284 	movi	r4,10
 401101c:	11400005 	stb	r5,0(r2)
 4011020:	30c00017 	ldw	r3,0(r6)
 4011024:	19400003 	ldbu	r5,0(r3)
 4011028:	29000d26 	beq	r5,r4,4011060 <_putc_r+0xa8>
 401102c:	18c00044 	addi	r3,r3,1
 4011030:	2805883a 	mov	r2,r5
 4011034:	30c00015 	stw	r3,0(r6)
 4011038:	dfc00317 	ldw	ra,12(sp)
 401103c:	dc000217 	ldw	r16,8(sp)
 4011040:	dec00404 	addi	sp,sp,16
 4011044:	f800283a 	ret
 4011048:	d9400015 	stw	r5,0(sp)
 401104c:	d9800115 	stw	r6,4(sp)
 4011050:	400edc80 	call	400edc8 <__sinit>
 4011054:	d9800117 	ldw	r6,4(sp)
 4011058:	d9400017 	ldw	r5,0(sp)
 401105c:	003fdd06 	br	4010fd4 <__reset+0xfb00ffd4>
 4011060:	8009883a 	mov	r4,r16
 4011064:	dfc00317 	ldw	ra,12(sp)
 4011068:	dc000217 	ldw	r16,8(sp)
 401106c:	dec00404 	addi	sp,sp,16
 4011070:	401197c1 	jmpi	401197c <__swbuf_r>

04011074 <putc>:
 4011074:	defffc04 	addi	sp,sp,-16
 4011078:	dc400115 	stw	r17,4(sp)
 401107c:	04410234 	movhi	r17,1032
 4011080:	8c637104 	addi	r17,r17,-29244
 4011084:	88800017 	ldw	r2,0(r17)
 4011088:	dc800215 	stw	r18,8(sp)
 401108c:	dc000015 	stw	r16,0(sp)
 4011090:	dfc00315 	stw	ra,12(sp)
 4011094:	2025883a 	mov	r18,r4
 4011098:	2821883a 	mov	r16,r5
 401109c:	10000226 	beq	r2,zero,40110a8 <putc+0x34>
 40110a0:	10c00e17 	ldw	r3,56(r2)
 40110a4:	18002126 	beq	r3,zero,401112c <putc+0xb8>
 40110a8:	80800217 	ldw	r2,8(r16)
 40110ac:	10bfffc4 	addi	r2,r2,-1
 40110b0:	80800215 	stw	r2,8(r16)
 40110b4:	10000c16 	blt	r2,zero,40110e8 <putc+0x74>
 40110b8:	80800017 	ldw	r2,0(r16)
 40110bc:	14800005 	stb	r18,0(r2)
 40110c0:	80800017 	ldw	r2,0(r16)
 40110c4:	10c00044 	addi	r3,r2,1
 40110c8:	10800003 	ldbu	r2,0(r2)
 40110cc:	80c00015 	stw	r3,0(r16)
 40110d0:	dfc00317 	ldw	ra,12(sp)
 40110d4:	dc800217 	ldw	r18,8(sp)
 40110d8:	dc400117 	ldw	r17,4(sp)
 40110dc:	dc000017 	ldw	r16,0(sp)
 40110e0:	dec00404 	addi	sp,sp,16
 40110e4:	f800283a 	ret
 40110e8:	80c00617 	ldw	r3,24(r16)
 40110ec:	10c01216 	blt	r2,r3,4011138 <putc+0xc4>
 40110f0:	80800017 	ldw	r2,0(r16)
 40110f4:	01000284 	movi	r4,10
 40110f8:	14800005 	stb	r18,0(r2)
 40110fc:	80c00017 	ldw	r3,0(r16)
 4011100:	19400003 	ldbu	r5,0(r3)
 4011104:	29001526 	beq	r5,r4,401115c <putc+0xe8>
 4011108:	18c00044 	addi	r3,r3,1
 401110c:	2805883a 	mov	r2,r5
 4011110:	80c00015 	stw	r3,0(r16)
 4011114:	dfc00317 	ldw	ra,12(sp)
 4011118:	dc800217 	ldw	r18,8(sp)
 401111c:	dc400117 	ldw	r17,4(sp)
 4011120:	dc000017 	ldw	r16,0(sp)
 4011124:	dec00404 	addi	sp,sp,16
 4011128:	f800283a 	ret
 401112c:	1009883a 	mov	r4,r2
 4011130:	400edc80 	call	400edc8 <__sinit>
 4011134:	003fdc06 	br	40110a8 <__reset+0xfb0100a8>
 4011138:	89000017 	ldw	r4,0(r17)
 401113c:	900b883a 	mov	r5,r18
 4011140:	800d883a 	mov	r6,r16
 4011144:	dfc00317 	ldw	ra,12(sp)
 4011148:	dc800217 	ldw	r18,8(sp)
 401114c:	dc400117 	ldw	r17,4(sp)
 4011150:	dc000017 	ldw	r16,0(sp)
 4011154:	dec00404 	addi	sp,sp,16
 4011158:	401197c1 	jmpi	401197c <__swbuf_r>
 401115c:	89000017 	ldw	r4,0(r17)
 4011160:	003ff706 	br	4011140 <__reset+0xfb010140>

04011164 <_realloc_r>:
 4011164:	defff504 	addi	sp,sp,-44
 4011168:	dd400615 	stw	r21,24(sp)
 401116c:	dc800315 	stw	r18,12(sp)
 4011170:	dc000115 	stw	r16,4(sp)
 4011174:	dfc00a15 	stw	ra,40(sp)
 4011178:	df000915 	stw	fp,36(sp)
 401117c:	ddc00815 	stw	r23,32(sp)
 4011180:	dd800715 	stw	r22,28(sp)
 4011184:	dd000515 	stw	r20,20(sp)
 4011188:	dcc00415 	stw	r19,16(sp)
 401118c:	dc400215 	stw	r17,8(sp)
 4011190:	2821883a 	mov	r16,r5
 4011194:	202b883a 	mov	r21,r4
 4011198:	3025883a 	mov	r18,r6
 401119c:	28009626 	beq	r5,zero,40113f8 <_realloc_r+0x294>
 40111a0:	401365c0 	call	401365c <__malloc_lock>
 40111a4:	80bfff17 	ldw	r2,-4(r16)
 40111a8:	04ffff04 	movi	r19,-4
 40111ac:	90c002c4 	addi	r3,r18,11
 40111b0:	01000584 	movi	r4,22
 40111b4:	85bffe04 	addi	r22,r16,-8
 40111b8:	14e6703a 	and	r19,r2,r19
 40111bc:	20c0372e 	bgeu	r4,r3,401129c <_realloc_r+0x138>
 40111c0:	047ffe04 	movi	r17,-8
 40111c4:	1c62703a 	and	r17,r3,r17
 40111c8:	8807883a 	mov	r3,r17
 40111cc:	88005a16 	blt	r17,zero,4011338 <_realloc_r+0x1d4>
 40111d0:	8c805936 	bltu	r17,r18,4011338 <_realloc_r+0x1d4>
 40111d4:	98c0340e 	bge	r19,r3,40112a8 <_realloc_r+0x144>
 40111d8:	070101f4 	movhi	fp,1031
 40111dc:	e71db404 	addi	fp,fp,30416
 40111e0:	e1400217 	ldw	r5,8(fp)
 40111e4:	b4c9883a 	add	r4,r22,r19
 40111e8:	29009026 	beq	r5,r4,401142c <_realloc_r+0x2c8>
 40111ec:	21800117 	ldw	r6,4(r4)
 40111f0:	01ffff84 	movi	r7,-2
 40111f4:	31ce703a 	and	r7,r6,r7
 40111f8:	21cf883a 	add	r7,r4,r7
 40111fc:	39c00117 	ldw	r7,4(r7)
 4011200:	39c0004c 	andi	r7,r7,1
 4011204:	38004326 	beq	r7,zero,4011314 <_realloc_r+0x1b0>
 4011208:	000d883a 	mov	r6,zero
 401120c:	0009883a 	mov	r4,zero
 4011210:	1080004c 	andi	r2,r2,1
 4011214:	10005a1e 	bne	r2,zero,4011380 <_realloc_r+0x21c>
 4011218:	85fffe17 	ldw	r23,-8(r16)
 401121c:	00bfff04 	movi	r2,-4
 4011220:	b5efc83a 	sub	r23,r22,r23
 4011224:	b9c00117 	ldw	r7,4(r23)
 4011228:	388e703a 	and	r7,r7,r2
 401122c:	3ccf883a 	add	r7,r7,r19
 4011230:	20005226 	beq	r4,zero,401137c <_realloc_r+0x218>
 4011234:	31e9883a 	add	r20,r6,r7
 4011238:	2140c726 	beq	r4,r5,4011558 <_realloc_r+0x3f4>
 401123c:	a0c04f16 	blt	r20,r3,401137c <_realloc_r+0x218>
 4011240:	20800317 	ldw	r2,12(r4)
 4011244:	20c00217 	ldw	r3,8(r4)
 4011248:	99bfff04 	addi	r6,r19,-4
 401124c:	01000904 	movi	r4,36
 4011250:	18800315 	stw	r2,12(r3)
 4011254:	10c00215 	stw	r3,8(r2)
 4011258:	b8c00217 	ldw	r3,8(r23)
 401125c:	b8800317 	ldw	r2,12(r23)
 4011260:	bc800204 	addi	r18,r23,8
 4011264:	18800315 	stw	r2,12(r3)
 4011268:	10c00215 	stw	r3,8(r2)
 401126c:	2180ed36 	bltu	r4,r6,4011624 <_realloc_r+0x4c0>
 4011270:	008004c4 	movi	r2,19
 4011274:	11809b2e 	bgeu	r2,r6,40114e4 <_realloc_r+0x380>
 4011278:	80800017 	ldw	r2,0(r16)
 401127c:	b8800215 	stw	r2,8(r23)
 4011280:	80800117 	ldw	r2,4(r16)
 4011284:	b8800315 	stw	r2,12(r23)
 4011288:	008006c4 	movi	r2,27
 401128c:	1180f936 	bltu	r2,r6,4011674 <_realloc_r+0x510>
 4011290:	b8800404 	addi	r2,r23,16
 4011294:	80c00204 	addi	r3,r16,8
 4011298:	00009406 	br	40114ec <_realloc_r+0x388>
 401129c:	00c00404 	movi	r3,16
 40112a0:	1823883a 	mov	r17,r3
 40112a4:	003fca06 	br	40111d0 <__reset+0xfb0101d0>
 40112a8:	9829883a 	mov	r20,r19
 40112ac:	a447c83a 	sub	r3,r20,r17
 40112b0:	010003c4 	movi	r4,15
 40112b4:	1080004c 	andi	r2,r2,1
 40112b8:	20c02336 	bltu	r4,r3,4011348 <_realloc_r+0x1e4>
 40112bc:	1504b03a 	or	r2,r2,r20
 40112c0:	b0800115 	stw	r2,4(r22)
 40112c4:	b52d883a 	add	r22,r22,r20
 40112c8:	b0800117 	ldw	r2,4(r22)
 40112cc:	10800054 	ori	r2,r2,1
 40112d0:	b0800115 	stw	r2,4(r22)
 40112d4:	a809883a 	mov	r4,r21
 40112d8:	401367c0 	call	401367c <__malloc_unlock>
 40112dc:	8025883a 	mov	r18,r16
 40112e0:	9005883a 	mov	r2,r18
 40112e4:	dfc00a17 	ldw	ra,40(sp)
 40112e8:	df000917 	ldw	fp,36(sp)
 40112ec:	ddc00817 	ldw	r23,32(sp)
 40112f0:	dd800717 	ldw	r22,28(sp)
 40112f4:	dd400617 	ldw	r21,24(sp)
 40112f8:	dd000517 	ldw	r20,20(sp)
 40112fc:	dcc00417 	ldw	r19,16(sp)
 4011300:	dc800317 	ldw	r18,12(sp)
 4011304:	dc400217 	ldw	r17,8(sp)
 4011308:	dc000117 	ldw	r16,4(sp)
 401130c:	dec00b04 	addi	sp,sp,44
 4011310:	f800283a 	ret
 4011314:	01ffff04 	movi	r7,-4
 4011318:	31cc703a 	and	r6,r6,r7
 401131c:	34e9883a 	add	r20,r6,r19
 4011320:	a0ffbb16 	blt	r20,r3,4011210 <__reset+0xfb010210>
 4011324:	20c00317 	ldw	r3,12(r4)
 4011328:	21000217 	ldw	r4,8(r4)
 401132c:	20c00315 	stw	r3,12(r4)
 4011330:	19000215 	stw	r4,8(r3)
 4011334:	003fdd06 	br	40112ac <__reset+0xfb0102ac>
 4011338:	00800304 	movi	r2,12
 401133c:	a8800015 	stw	r2,0(r21)
 4011340:	0025883a 	mov	r18,zero
 4011344:	003fe606 	br	40112e0 <__reset+0xfb0102e0>
 4011348:	1444b03a 	or	r2,r2,r17
 401134c:	b0800115 	stw	r2,4(r22)
 4011350:	b44b883a 	add	r5,r22,r17
 4011354:	18800054 	ori	r2,r3,1
 4011358:	28800115 	stw	r2,4(r5)
 401135c:	28c7883a 	add	r3,r5,r3
 4011360:	18800117 	ldw	r2,4(r3)
 4011364:	a809883a 	mov	r4,r21
 4011368:	29400204 	addi	r5,r5,8
 401136c:	10800054 	ori	r2,r2,1
 4011370:	18800115 	stw	r2,4(r3)
 4011374:	400f14c0 	call	400f14c <_free_r>
 4011378:	003fd606 	br	40112d4 <__reset+0xfb0102d4>
 401137c:	38c0330e 	bge	r7,r3,401144c <_realloc_r+0x2e8>
 4011380:	900b883a 	mov	r5,r18
 4011384:	a809883a 	mov	r4,r21
 4011388:	400a4740 	call	400a474 <_malloc_r>
 401138c:	1025883a 	mov	r18,r2
 4011390:	10001626 	beq	r2,zero,40113ec <_realloc_r+0x288>
 4011394:	80bfff17 	ldw	r2,-4(r16)
 4011398:	00ffff84 	movi	r3,-2
 401139c:	913ffe04 	addi	r4,r18,-8
 40113a0:	10c6703a 	and	r3,r2,r3
 40113a4:	b0c7883a 	add	r3,r22,r3
 40113a8:	20c09926 	beq	r4,r3,4011610 <_realloc_r+0x4ac>
 40113ac:	99bfff04 	addi	r6,r19,-4
 40113b0:	00800904 	movi	r2,36
 40113b4:	11806436 	bltu	r2,r6,4011548 <_realloc_r+0x3e4>
 40113b8:	00c004c4 	movi	r3,19
 40113bc:	19804036 	bltu	r3,r6,40114c0 <_realloc_r+0x35c>
 40113c0:	9005883a 	mov	r2,r18
 40113c4:	8007883a 	mov	r3,r16
 40113c8:	19000017 	ldw	r4,0(r3)
 40113cc:	11000015 	stw	r4,0(r2)
 40113d0:	19000117 	ldw	r4,4(r3)
 40113d4:	11000115 	stw	r4,4(r2)
 40113d8:	18c00217 	ldw	r3,8(r3)
 40113dc:	10c00215 	stw	r3,8(r2)
 40113e0:	a809883a 	mov	r4,r21
 40113e4:	800b883a 	mov	r5,r16
 40113e8:	400f14c0 	call	400f14c <_free_r>
 40113ec:	a809883a 	mov	r4,r21
 40113f0:	401367c0 	call	401367c <__malloc_unlock>
 40113f4:	003fba06 	br	40112e0 <__reset+0xfb0102e0>
 40113f8:	300b883a 	mov	r5,r6
 40113fc:	dfc00a17 	ldw	ra,40(sp)
 4011400:	df000917 	ldw	fp,36(sp)
 4011404:	ddc00817 	ldw	r23,32(sp)
 4011408:	dd800717 	ldw	r22,28(sp)
 401140c:	dd400617 	ldw	r21,24(sp)
 4011410:	dd000517 	ldw	r20,20(sp)
 4011414:	dcc00417 	ldw	r19,16(sp)
 4011418:	dc800317 	ldw	r18,12(sp)
 401141c:	dc400217 	ldw	r17,8(sp)
 4011420:	dc000117 	ldw	r16,4(sp)
 4011424:	dec00b04 	addi	sp,sp,44
 4011428:	400a4741 	jmpi	400a474 <_malloc_r>
 401142c:	29800117 	ldw	r6,4(r5)
 4011430:	013fff04 	movi	r4,-4
 4011434:	89c00404 	addi	r7,r17,16
 4011438:	310c703a 	and	r6,r6,r4
 401143c:	34c9883a 	add	r4,r6,r19
 4011440:	21c0340e 	bge	r4,r7,4011514 <_realloc_r+0x3b0>
 4011444:	2809883a 	mov	r4,r5
 4011448:	003f7106 	br	4011210 <__reset+0xfb010210>
 401144c:	b8800317 	ldw	r2,12(r23)
 4011450:	b8c00217 	ldw	r3,8(r23)
 4011454:	99bfff04 	addi	r6,r19,-4
 4011458:	01000904 	movi	r4,36
 401145c:	18800315 	stw	r2,12(r3)
 4011460:	10c00215 	stw	r3,8(r2)
 4011464:	bc800204 	addi	r18,r23,8
 4011468:	21807836 	bltu	r4,r6,401164c <_realloc_r+0x4e8>
 401146c:	008004c4 	movi	r2,19
 4011470:	1180732e 	bgeu	r2,r6,4011640 <_realloc_r+0x4dc>
 4011474:	80800017 	ldw	r2,0(r16)
 4011478:	b8800215 	stw	r2,8(r23)
 401147c:	80800117 	ldw	r2,4(r16)
 4011480:	b8800315 	stw	r2,12(r23)
 4011484:	008006c4 	movi	r2,27
 4011488:	11808936 	bltu	r2,r6,40116b0 <_realloc_r+0x54c>
 401148c:	b8800404 	addi	r2,r23,16
 4011490:	80c00204 	addi	r3,r16,8
 4011494:	19000017 	ldw	r4,0(r3)
 4011498:	9021883a 	mov	r16,r18
 401149c:	3829883a 	mov	r20,r7
 40114a0:	11000015 	stw	r4,0(r2)
 40114a4:	19000117 	ldw	r4,4(r3)
 40114a8:	b82d883a 	mov	r22,r23
 40114ac:	11000115 	stw	r4,4(r2)
 40114b0:	18c00217 	ldw	r3,8(r3)
 40114b4:	10c00215 	stw	r3,8(r2)
 40114b8:	b8800117 	ldw	r2,4(r23)
 40114bc:	003f7b06 	br	40112ac <__reset+0xfb0102ac>
 40114c0:	80c00017 	ldw	r3,0(r16)
 40114c4:	90c00015 	stw	r3,0(r18)
 40114c8:	80c00117 	ldw	r3,4(r16)
 40114cc:	90c00115 	stw	r3,4(r18)
 40114d0:	00c006c4 	movi	r3,27
 40114d4:	19804636 	bltu	r3,r6,40115f0 <_realloc_r+0x48c>
 40114d8:	90800204 	addi	r2,r18,8
 40114dc:	80c00204 	addi	r3,r16,8
 40114e0:	003fb906 	br	40113c8 <__reset+0xfb0103c8>
 40114e4:	9005883a 	mov	r2,r18
 40114e8:	8007883a 	mov	r3,r16
 40114ec:	19000017 	ldw	r4,0(r3)
 40114f0:	9021883a 	mov	r16,r18
 40114f4:	b82d883a 	mov	r22,r23
 40114f8:	11000015 	stw	r4,0(r2)
 40114fc:	19000117 	ldw	r4,4(r3)
 4011500:	11000115 	stw	r4,4(r2)
 4011504:	18c00217 	ldw	r3,8(r3)
 4011508:	10c00215 	stw	r3,8(r2)
 401150c:	b8800117 	ldw	r2,4(r23)
 4011510:	003f6606 	br	40112ac <__reset+0xfb0102ac>
 4011514:	2445c83a 	sub	r2,r4,r17
 4011518:	b46d883a 	add	r22,r22,r17
 401151c:	10800054 	ori	r2,r2,1
 4011520:	b0800115 	stw	r2,4(r22)
 4011524:	80bfff17 	ldw	r2,-4(r16)
 4011528:	a809883a 	mov	r4,r21
 401152c:	e5800215 	stw	r22,8(fp)
 4011530:	1080004c 	andi	r2,r2,1
 4011534:	88a2b03a 	or	r17,r17,r2
 4011538:	847fff15 	stw	r17,-4(r16)
 401153c:	401367c0 	call	401367c <__malloc_unlock>
 4011540:	8025883a 	mov	r18,r16
 4011544:	003f6606 	br	40112e0 <__reset+0xfb0102e0>
 4011548:	9009883a 	mov	r4,r18
 401154c:	800b883a 	mov	r5,r16
 4011550:	400fddc0 	call	400fddc <memmove>
 4011554:	003fa206 	br	40113e0 <__reset+0xfb0103e0>
 4011558:	88800404 	addi	r2,r17,16
 401155c:	a0bf8716 	blt	r20,r2,401137c <__reset+0xfb01037c>
 4011560:	b8800317 	ldw	r2,12(r23)
 4011564:	b8c00217 	ldw	r3,8(r23)
 4011568:	99bfff04 	addi	r6,r19,-4
 401156c:	01000904 	movi	r4,36
 4011570:	18800315 	stw	r2,12(r3)
 4011574:	10c00215 	stw	r3,8(r2)
 4011578:	bc800204 	addi	r18,r23,8
 401157c:	21806536 	bltu	r4,r6,4011714 <_realloc_r+0x5b0>
 4011580:	008004c4 	movi	r2,19
 4011584:	1180592e 	bgeu	r2,r6,40116ec <_realloc_r+0x588>
 4011588:	80800017 	ldw	r2,0(r16)
 401158c:	b8800215 	stw	r2,8(r23)
 4011590:	80800117 	ldw	r2,4(r16)
 4011594:	b8800315 	stw	r2,12(r23)
 4011598:	008006c4 	movi	r2,27
 401159c:	11806136 	bltu	r2,r6,4011724 <_realloc_r+0x5c0>
 40115a0:	b8800404 	addi	r2,r23,16
 40115a4:	80c00204 	addi	r3,r16,8
 40115a8:	19000017 	ldw	r4,0(r3)
 40115ac:	11000015 	stw	r4,0(r2)
 40115b0:	19000117 	ldw	r4,4(r3)
 40115b4:	11000115 	stw	r4,4(r2)
 40115b8:	18c00217 	ldw	r3,8(r3)
 40115bc:	10c00215 	stw	r3,8(r2)
 40115c0:	a447c83a 	sub	r3,r20,r17
 40115c4:	bc45883a 	add	r2,r23,r17
 40115c8:	18c00054 	ori	r3,r3,1
 40115cc:	10c00115 	stw	r3,4(r2)
 40115d0:	b8c00117 	ldw	r3,4(r23)
 40115d4:	e0800215 	stw	r2,8(fp)
 40115d8:	a809883a 	mov	r4,r21
 40115dc:	1880004c 	andi	r2,r3,1
 40115e0:	88a2b03a 	or	r17,r17,r2
 40115e4:	bc400115 	stw	r17,4(r23)
 40115e8:	401367c0 	call	401367c <__malloc_unlock>
 40115ec:	003f3c06 	br	40112e0 <__reset+0xfb0102e0>
 40115f0:	80c00217 	ldw	r3,8(r16)
 40115f4:	90c00215 	stw	r3,8(r18)
 40115f8:	80c00317 	ldw	r3,12(r16)
 40115fc:	90c00315 	stw	r3,12(r18)
 4011600:	30802426 	beq	r6,r2,4011694 <_realloc_r+0x530>
 4011604:	90800404 	addi	r2,r18,16
 4011608:	80c00404 	addi	r3,r16,16
 401160c:	003f6e06 	br	40113c8 <__reset+0xfb0103c8>
 4011610:	953fff17 	ldw	r20,-4(r18)
 4011614:	00ffff04 	movi	r3,-4
 4011618:	a0e8703a 	and	r20,r20,r3
 401161c:	a4e9883a 	add	r20,r20,r19
 4011620:	003f2206 	br	40112ac <__reset+0xfb0102ac>
 4011624:	800b883a 	mov	r5,r16
 4011628:	9009883a 	mov	r4,r18
 401162c:	400fddc0 	call	400fddc <memmove>
 4011630:	9021883a 	mov	r16,r18
 4011634:	b8800117 	ldw	r2,4(r23)
 4011638:	b82d883a 	mov	r22,r23
 401163c:	003f1b06 	br	40112ac <__reset+0xfb0102ac>
 4011640:	9005883a 	mov	r2,r18
 4011644:	8007883a 	mov	r3,r16
 4011648:	003f9206 	br	4011494 <__reset+0xfb010494>
 401164c:	800b883a 	mov	r5,r16
 4011650:	9009883a 	mov	r4,r18
 4011654:	d9c00015 	stw	r7,0(sp)
 4011658:	400fddc0 	call	400fddc <memmove>
 401165c:	d9c00017 	ldw	r7,0(sp)
 4011660:	9021883a 	mov	r16,r18
 4011664:	b8800117 	ldw	r2,4(r23)
 4011668:	3829883a 	mov	r20,r7
 401166c:	b82d883a 	mov	r22,r23
 4011670:	003f0e06 	br	40112ac <__reset+0xfb0102ac>
 4011674:	80800217 	ldw	r2,8(r16)
 4011678:	b8800415 	stw	r2,16(r23)
 401167c:	80800317 	ldw	r2,12(r16)
 4011680:	b8800515 	stw	r2,20(r23)
 4011684:	31001226 	beq	r6,r4,40116d0 <_realloc_r+0x56c>
 4011688:	b8800604 	addi	r2,r23,24
 401168c:	80c00404 	addi	r3,r16,16
 4011690:	003f9606 	br	40114ec <__reset+0xfb0104ec>
 4011694:	81000417 	ldw	r4,16(r16)
 4011698:	90800604 	addi	r2,r18,24
 401169c:	80c00604 	addi	r3,r16,24
 40116a0:	91000415 	stw	r4,16(r18)
 40116a4:	81000517 	ldw	r4,20(r16)
 40116a8:	91000515 	stw	r4,20(r18)
 40116ac:	003f4606 	br	40113c8 <__reset+0xfb0103c8>
 40116b0:	80800217 	ldw	r2,8(r16)
 40116b4:	b8800415 	stw	r2,16(r23)
 40116b8:	80800317 	ldw	r2,12(r16)
 40116bc:	b8800515 	stw	r2,20(r23)
 40116c0:	31000d26 	beq	r6,r4,40116f8 <_realloc_r+0x594>
 40116c4:	b8800604 	addi	r2,r23,24
 40116c8:	80c00404 	addi	r3,r16,16
 40116cc:	003f7106 	br	4011494 <__reset+0xfb010494>
 40116d0:	81000417 	ldw	r4,16(r16)
 40116d4:	b8800804 	addi	r2,r23,32
 40116d8:	80c00604 	addi	r3,r16,24
 40116dc:	b9000615 	stw	r4,24(r23)
 40116e0:	81000517 	ldw	r4,20(r16)
 40116e4:	b9000715 	stw	r4,28(r23)
 40116e8:	003f8006 	br	40114ec <__reset+0xfb0104ec>
 40116ec:	9005883a 	mov	r2,r18
 40116f0:	8007883a 	mov	r3,r16
 40116f4:	003fac06 	br	40115a8 <__reset+0xfb0105a8>
 40116f8:	81000417 	ldw	r4,16(r16)
 40116fc:	b8800804 	addi	r2,r23,32
 4011700:	80c00604 	addi	r3,r16,24
 4011704:	b9000615 	stw	r4,24(r23)
 4011708:	81000517 	ldw	r4,20(r16)
 401170c:	b9000715 	stw	r4,28(r23)
 4011710:	003f6006 	br	4011494 <__reset+0xfb010494>
 4011714:	9009883a 	mov	r4,r18
 4011718:	800b883a 	mov	r5,r16
 401171c:	400fddc0 	call	400fddc <memmove>
 4011720:	003fa706 	br	40115c0 <__reset+0xfb0105c0>
 4011724:	80800217 	ldw	r2,8(r16)
 4011728:	b8800415 	stw	r2,16(r23)
 401172c:	80800317 	ldw	r2,12(r16)
 4011730:	b8800515 	stw	r2,20(r23)
 4011734:	31000326 	beq	r6,r4,4011744 <_realloc_r+0x5e0>
 4011738:	b8800604 	addi	r2,r23,24
 401173c:	80c00404 	addi	r3,r16,16
 4011740:	003f9906 	br	40115a8 <__reset+0xfb0105a8>
 4011744:	81000417 	ldw	r4,16(r16)
 4011748:	b8800804 	addi	r2,r23,32
 401174c:	80c00604 	addi	r3,r16,24
 4011750:	b9000615 	stw	r4,24(r23)
 4011754:	81000517 	ldw	r4,20(r16)
 4011758:	b9000715 	stw	r4,28(r23)
 401175c:	003f9206 	br	40115a8 <__reset+0xfb0105a8>

04011760 <__isinfd>:
 4011760:	0105c83a 	sub	r2,zero,r4
 4011764:	1108b03a 	or	r4,r2,r4
 4011768:	2004d7fa 	srli	r2,r4,31
 401176c:	00e00034 	movhi	r3,32768
 4011770:	18ffffc4 	addi	r3,r3,-1
 4011774:	28ca703a 	and	r5,r5,r3
 4011778:	1144b03a 	or	r2,r2,r5
 401177c:	00dffc34 	movhi	r3,32752
 4011780:	1885c83a 	sub	r2,r3,r2
 4011784:	0087c83a 	sub	r3,zero,r2
 4011788:	1884b03a 	or	r2,r3,r2
 401178c:	1005d7fa 	srai	r2,r2,31
 4011790:	10800044 	addi	r2,r2,1
 4011794:	f800283a 	ret

04011798 <__sread>:
 4011798:	defffe04 	addi	sp,sp,-8
 401179c:	dc000015 	stw	r16,0(sp)
 40117a0:	2821883a 	mov	r16,r5
 40117a4:	2940038f 	ldh	r5,14(r5)
 40117a8:	dfc00115 	stw	ra,4(sp)
 40117ac:	4011ef80 	call	4011ef8 <_read_r>
 40117b0:	10000716 	blt	r2,zero,40117d0 <__sread+0x38>
 40117b4:	80c01417 	ldw	r3,80(r16)
 40117b8:	1887883a 	add	r3,r3,r2
 40117bc:	80c01415 	stw	r3,80(r16)
 40117c0:	dfc00117 	ldw	ra,4(sp)
 40117c4:	dc000017 	ldw	r16,0(sp)
 40117c8:	dec00204 	addi	sp,sp,8
 40117cc:	f800283a 	ret
 40117d0:	80c0030b 	ldhu	r3,12(r16)
 40117d4:	18fbffcc 	andi	r3,r3,61439
 40117d8:	80c0030d 	sth	r3,12(r16)
 40117dc:	dfc00117 	ldw	ra,4(sp)
 40117e0:	dc000017 	ldw	r16,0(sp)
 40117e4:	dec00204 	addi	sp,sp,8
 40117e8:	f800283a 	ret

040117ec <__swrite>:
 40117ec:	2880030b 	ldhu	r2,12(r5)
 40117f0:	defffb04 	addi	sp,sp,-20
 40117f4:	dcc00315 	stw	r19,12(sp)
 40117f8:	10c0400c 	andi	r3,r2,256
 40117fc:	18ffffcc 	andi	r3,r3,65535
 4011800:	18e0001c 	xori	r3,r3,32768
 4011804:	dc800215 	stw	r18,8(sp)
 4011808:	dc400115 	stw	r17,4(sp)
 401180c:	dc000015 	stw	r16,0(sp)
 4011810:	dfc00415 	stw	ra,16(sp)
 4011814:	18e00004 	addi	r3,r3,-32768
 4011818:	2821883a 	mov	r16,r5
 401181c:	2027883a 	mov	r19,r4
 4011820:	3025883a 	mov	r18,r6
 4011824:	3823883a 	mov	r17,r7
 4011828:	18000526 	beq	r3,zero,4011840 <__swrite+0x54>
 401182c:	2940038f 	ldh	r5,14(r5)
 4011830:	000d883a 	mov	r6,zero
 4011834:	01c00084 	movi	r7,2
 4011838:	4011e8c0 	call	4011e8c <_lseek_r>
 401183c:	8080030b 	ldhu	r2,12(r16)
 4011840:	8140038f 	ldh	r5,14(r16)
 4011844:	10bbffcc 	andi	r2,r2,61439
 4011848:	9809883a 	mov	r4,r19
 401184c:	900d883a 	mov	r6,r18
 4011850:	880f883a 	mov	r7,r17
 4011854:	8080030d 	sth	r2,12(r16)
 4011858:	dfc00417 	ldw	ra,16(sp)
 401185c:	dcc00317 	ldw	r19,12(sp)
 4011860:	dc800217 	ldw	r18,8(sp)
 4011864:	dc400117 	ldw	r17,4(sp)
 4011868:	dc000017 	ldw	r16,0(sp)
 401186c:	dec00504 	addi	sp,sp,20
 4011870:	4011ad41 	jmpi	4011ad4 <_write_r>

04011874 <__sseek>:
 4011874:	defffe04 	addi	sp,sp,-8
 4011878:	dc000015 	stw	r16,0(sp)
 401187c:	2821883a 	mov	r16,r5
 4011880:	2940038f 	ldh	r5,14(r5)
 4011884:	dfc00115 	stw	ra,4(sp)
 4011888:	4011e8c0 	call	4011e8c <_lseek_r>
 401188c:	00ffffc4 	movi	r3,-1
 4011890:	10c00826 	beq	r2,r3,40118b4 <__sseek+0x40>
 4011894:	80c0030b 	ldhu	r3,12(r16)
 4011898:	80801415 	stw	r2,80(r16)
 401189c:	18c40014 	ori	r3,r3,4096
 40118a0:	80c0030d 	sth	r3,12(r16)
 40118a4:	dfc00117 	ldw	ra,4(sp)
 40118a8:	dc000017 	ldw	r16,0(sp)
 40118ac:	dec00204 	addi	sp,sp,8
 40118b0:	f800283a 	ret
 40118b4:	80c0030b 	ldhu	r3,12(r16)
 40118b8:	18fbffcc 	andi	r3,r3,61439
 40118bc:	80c0030d 	sth	r3,12(r16)
 40118c0:	dfc00117 	ldw	ra,4(sp)
 40118c4:	dc000017 	ldw	r16,0(sp)
 40118c8:	dec00204 	addi	sp,sp,8
 40118cc:	f800283a 	ret

040118d0 <__sclose>:
 40118d0:	2940038f 	ldh	r5,14(r5)
 40118d4:	4011c0c1 	jmpi	4011c0c <_close_r>

040118d8 <strcmp>:
 40118d8:	2904b03a 	or	r2,r5,r4
 40118dc:	108000cc 	andi	r2,r2,3
 40118e0:	1000171e 	bne	r2,zero,4011940 <strcmp+0x68>
 40118e4:	20800017 	ldw	r2,0(r4)
 40118e8:	28c00017 	ldw	r3,0(r5)
 40118ec:	10c0141e 	bne	r2,r3,4011940 <strcmp+0x68>
 40118f0:	027fbff4 	movhi	r9,65279
 40118f4:	4a7fbfc4 	addi	r9,r9,-257
 40118f8:	1247883a 	add	r3,r2,r9
 40118fc:	0084303a 	nor	r2,zero,r2
 4011900:	1884703a 	and	r2,r3,r2
 4011904:	02202074 	movhi	r8,32897
 4011908:	42202004 	addi	r8,r8,-32640
 401190c:	1204703a 	and	r2,r2,r8
 4011910:	10000226 	beq	r2,zero,401191c <strcmp+0x44>
 4011914:	00001706 	br	4011974 <strcmp+0x9c>
 4011918:	3000161e 	bne	r6,zero,4011974 <strcmp+0x9c>
 401191c:	21000104 	addi	r4,r4,4
 4011920:	20800017 	ldw	r2,0(r4)
 4011924:	29400104 	addi	r5,r5,4
 4011928:	28c00017 	ldw	r3,0(r5)
 401192c:	124f883a 	add	r7,r2,r9
 4011930:	008c303a 	nor	r6,zero,r2
 4011934:	398c703a 	and	r6,r7,r6
 4011938:	320c703a 	and	r6,r6,r8
 401193c:	10fff626 	beq	r2,r3,4011918 <__reset+0xfb010918>
 4011940:	20800007 	ldb	r2,0(r4)
 4011944:	1000051e 	bne	r2,zero,401195c <strcmp+0x84>
 4011948:	00000606 	br	4011964 <strcmp+0x8c>
 401194c:	21000044 	addi	r4,r4,1
 4011950:	20800007 	ldb	r2,0(r4)
 4011954:	29400044 	addi	r5,r5,1
 4011958:	10000226 	beq	r2,zero,4011964 <strcmp+0x8c>
 401195c:	28c00007 	ldb	r3,0(r5)
 4011960:	10fffa26 	beq	r2,r3,401194c <__reset+0xfb01094c>
 4011964:	20c00003 	ldbu	r3,0(r4)
 4011968:	28800003 	ldbu	r2,0(r5)
 401196c:	1885c83a 	sub	r2,r3,r2
 4011970:	f800283a 	ret
 4011974:	0005883a 	mov	r2,zero
 4011978:	f800283a 	ret

0401197c <__swbuf_r>:
 401197c:	defffc04 	addi	sp,sp,-16
 4011980:	dc800215 	stw	r18,8(sp)
 4011984:	dc400115 	stw	r17,4(sp)
 4011988:	dc000015 	stw	r16,0(sp)
 401198c:	dfc00315 	stw	ra,12(sp)
 4011990:	2023883a 	mov	r17,r4
 4011994:	2825883a 	mov	r18,r5
 4011998:	3021883a 	mov	r16,r6
 401199c:	20000226 	beq	r4,zero,40119a8 <__swbuf_r+0x2c>
 40119a0:	20800e17 	ldw	r2,56(r4)
 40119a4:	10003b26 	beq	r2,zero,4011a94 <__swbuf_r+0x118>
 40119a8:	8080030b 	ldhu	r2,12(r16)
 40119ac:	80c00617 	ldw	r3,24(r16)
 40119b0:	1080020c 	andi	r2,r2,8
 40119b4:	10bfffcc 	andi	r2,r2,65535
 40119b8:	10a0001c 	xori	r2,r2,32768
 40119bc:	80c00215 	stw	r3,8(r16)
 40119c0:	10a00004 	addi	r2,r2,-32768
 40119c4:	10002226 	beq	r2,zero,4011a50 <__swbuf_r+0xd4>
 40119c8:	80800417 	ldw	r2,16(r16)
 40119cc:	10002026 	beq	r2,zero,4011a50 <__swbuf_r+0xd4>
 40119d0:	80c00017 	ldw	r3,0(r16)
 40119d4:	81000517 	ldw	r4,20(r16)
 40119d8:	94803fcc 	andi	r18,r18,255
 40119dc:	1885c83a 	sub	r2,r3,r2
 40119e0:	1100250e 	bge	r2,r4,4011a78 <__swbuf_r+0xfc>
 40119e4:	10800044 	addi	r2,r2,1
 40119e8:	81400217 	ldw	r5,8(r16)
 40119ec:	19000044 	addi	r4,r3,1
 40119f0:	297fffc4 	addi	r5,r5,-1
 40119f4:	81400215 	stw	r5,8(r16)
 40119f8:	1c800005 	stb	r18,0(r3)
 40119fc:	80c00517 	ldw	r3,20(r16)
 4011a00:	81000015 	stw	r4,0(r16)
 4011a04:	18800c26 	beq	r3,r2,4011a38 <__swbuf_r+0xbc>
 4011a08:	8080030b 	ldhu	r2,12(r16)
 4011a0c:	1080004c 	andi	r2,r2,1
 4011a10:	10000226 	beq	r2,zero,4011a1c <__swbuf_r+0xa0>
 4011a14:	00800284 	movi	r2,10
 4011a18:	90800726 	beq	r18,r2,4011a38 <__swbuf_r+0xbc>
 4011a1c:	9005883a 	mov	r2,r18
 4011a20:	dfc00317 	ldw	ra,12(sp)
 4011a24:	dc800217 	ldw	r18,8(sp)
 4011a28:	dc400117 	ldw	r17,4(sp)
 4011a2c:	dc000017 	ldw	r16,0(sp)
 4011a30:	dec00404 	addi	sp,sp,16
 4011a34:	f800283a 	ret
 4011a38:	8809883a 	mov	r4,r17
 4011a3c:	800b883a 	mov	r5,r16
 4011a40:	400eb0c0 	call	400eb0c <_fflush_r>
 4011a44:	103ff526 	beq	r2,zero,4011a1c <__reset+0xfb010a1c>
 4011a48:	04bfffc4 	movi	r18,-1
 4011a4c:	003ff306 	br	4011a1c <__reset+0xfb010a1c>
 4011a50:	8809883a 	mov	r4,r17
 4011a54:	800b883a 	mov	r5,r16
 4011a58:	400d1400 	call	400d140 <__swsetup_r>
 4011a5c:	10000f1e 	bne	r2,zero,4011a9c <__swbuf_r+0x120>
 4011a60:	80800417 	ldw	r2,16(r16)
 4011a64:	80c00017 	ldw	r3,0(r16)
 4011a68:	81000517 	ldw	r4,20(r16)
 4011a6c:	94803fcc 	andi	r18,r18,255
 4011a70:	1885c83a 	sub	r2,r3,r2
 4011a74:	113fdb16 	blt	r2,r4,40119e4 <__reset+0xfb0109e4>
 4011a78:	8809883a 	mov	r4,r17
 4011a7c:	800b883a 	mov	r5,r16
 4011a80:	400eb0c0 	call	400eb0c <_fflush_r>
 4011a84:	103ff01e 	bne	r2,zero,4011a48 <__reset+0xfb010a48>
 4011a88:	80c00017 	ldw	r3,0(r16)
 4011a8c:	00800044 	movi	r2,1
 4011a90:	003fd506 	br	40119e8 <__reset+0xfb0109e8>
 4011a94:	400edc80 	call	400edc8 <__sinit>
 4011a98:	003fc306 	br	40119a8 <__reset+0xfb0109a8>
 4011a9c:	8080030b 	ldhu	r2,12(r16)
 4011aa0:	04bfffc4 	movi	r18,-1
 4011aa4:	10801014 	ori	r2,r2,64
 4011aa8:	8080030d 	sth	r2,12(r16)
 4011aac:	00800244 	movi	r2,9
 4011ab0:	88800015 	stw	r2,0(r17)
 4011ab4:	003fd906 	br	4011a1c <__reset+0xfb010a1c>

04011ab8 <__swbuf>:
 4011ab8:	00c10234 	movhi	r3,1032
 4011abc:	18e37104 	addi	r3,r3,-29244
 4011ac0:	2005883a 	mov	r2,r4
 4011ac4:	19000017 	ldw	r4,0(r3)
 4011ac8:	280d883a 	mov	r6,r5
 4011acc:	100b883a 	mov	r5,r2
 4011ad0:	401197c1 	jmpi	401197c <__swbuf_r>

04011ad4 <_write_r>:
 4011ad4:	defffd04 	addi	sp,sp,-12
 4011ad8:	dc400115 	stw	r17,4(sp)
 4011adc:	dc000015 	stw	r16,0(sp)
 4011ae0:	2023883a 	mov	r17,r4
 4011ae4:	04010234 	movhi	r16,1032
 4011ae8:	84238504 	addi	r16,r16,-29164
 4011aec:	2809883a 	mov	r4,r5
 4011af0:	300b883a 	mov	r5,r6
 4011af4:	380d883a 	mov	r6,r7
 4011af8:	dfc00215 	stw	ra,8(sp)
 4011afc:	80000015 	stw	zero,0(r16)
 4011b00:	4013b2c0 	call	4013b2c <write>
 4011b04:	00ffffc4 	movi	r3,-1
 4011b08:	10c00526 	beq	r2,r3,4011b20 <_write_r+0x4c>
 4011b0c:	dfc00217 	ldw	ra,8(sp)
 4011b10:	dc400117 	ldw	r17,4(sp)
 4011b14:	dc000017 	ldw	r16,0(sp)
 4011b18:	dec00304 	addi	sp,sp,12
 4011b1c:	f800283a 	ret
 4011b20:	80c00017 	ldw	r3,0(r16)
 4011b24:	183ff926 	beq	r3,zero,4011b0c <__reset+0xfb010b0c>
 4011b28:	88c00015 	stw	r3,0(r17)
 4011b2c:	dfc00217 	ldw	ra,8(sp)
 4011b30:	dc400117 	ldw	r17,4(sp)
 4011b34:	dc000017 	ldw	r16,0(sp)
 4011b38:	dec00304 	addi	sp,sp,12
 4011b3c:	f800283a 	ret

04011b40 <_calloc_r>:
 4011b40:	defffe04 	addi	sp,sp,-8
 4011b44:	dc000015 	stw	r16,0(sp)
 4011b48:	2021883a 	mov	r16,r4
 4011b4c:	3009883a 	mov	r4,r6
 4011b50:	dfc00115 	stw	ra,4(sp)
 4011b54:	4009dd80 	call	4009dd8 <__mulsi3>
 4011b58:	8009883a 	mov	r4,r16
 4011b5c:	100b883a 	mov	r5,r2
 4011b60:	400a4740 	call	400a474 <_malloc_r>
 4011b64:	1021883a 	mov	r16,r2
 4011b68:	10000c26 	beq	r2,zero,4011b9c <_calloc_r+0x5c>
 4011b6c:	11bfff17 	ldw	r6,-4(r2)
 4011b70:	00ffff04 	movi	r3,-4
 4011b74:	00800904 	movi	r2,36
 4011b78:	30cc703a 	and	r6,r6,r3
 4011b7c:	30cd883a 	add	r6,r6,r3
 4011b80:	11801436 	bltu	r2,r6,4011bd4 <_calloc_r+0x94>
 4011b84:	00c004c4 	movi	r3,19
 4011b88:	19800936 	bltu	r3,r6,4011bb0 <_calloc_r+0x70>
 4011b8c:	8005883a 	mov	r2,r16
 4011b90:	10000015 	stw	zero,0(r2)
 4011b94:	10000115 	stw	zero,4(r2)
 4011b98:	10000215 	stw	zero,8(r2)
 4011b9c:	8005883a 	mov	r2,r16
 4011ba0:	dfc00117 	ldw	ra,4(sp)
 4011ba4:	dc000017 	ldw	r16,0(sp)
 4011ba8:	dec00204 	addi	sp,sp,8
 4011bac:	f800283a 	ret
 4011bb0:	80000015 	stw	zero,0(r16)
 4011bb4:	80000115 	stw	zero,4(r16)
 4011bb8:	00c006c4 	movi	r3,27
 4011bbc:	19800d2e 	bgeu	r3,r6,4011bf4 <_calloc_r+0xb4>
 4011bc0:	80000215 	stw	zero,8(r16)
 4011bc4:	80000315 	stw	zero,12(r16)
 4011bc8:	30800c26 	beq	r6,r2,4011bfc <_calloc_r+0xbc>
 4011bcc:	80800404 	addi	r2,r16,16
 4011bd0:	003fef06 	br	4011b90 <__reset+0xfb010b90>
 4011bd4:	8009883a 	mov	r4,r16
 4011bd8:	000b883a 	mov	r5,zero
 4011bdc:	400ad380 	call	400ad38 <memset>
 4011be0:	8005883a 	mov	r2,r16
 4011be4:	dfc00117 	ldw	ra,4(sp)
 4011be8:	dc000017 	ldw	r16,0(sp)
 4011bec:	dec00204 	addi	sp,sp,8
 4011bf0:	f800283a 	ret
 4011bf4:	80800204 	addi	r2,r16,8
 4011bf8:	003fe506 	br	4011b90 <__reset+0xfb010b90>
 4011bfc:	80000415 	stw	zero,16(r16)
 4011c00:	80000515 	stw	zero,20(r16)
 4011c04:	80800604 	addi	r2,r16,24
 4011c08:	003fe106 	br	4011b90 <__reset+0xfb010b90>

04011c0c <_close_r>:
 4011c0c:	defffd04 	addi	sp,sp,-12
 4011c10:	dc400115 	stw	r17,4(sp)
 4011c14:	dc000015 	stw	r16,0(sp)
 4011c18:	2023883a 	mov	r17,r4
 4011c1c:	04010234 	movhi	r16,1032
 4011c20:	84238504 	addi	r16,r16,-29164
 4011c24:	2809883a 	mov	r4,r5
 4011c28:	dfc00215 	stw	ra,8(sp)
 4011c2c:	80000015 	stw	zero,0(r16)
 4011c30:	4012ec80 	call	4012ec8 <close>
 4011c34:	00ffffc4 	movi	r3,-1
 4011c38:	10c00526 	beq	r2,r3,4011c50 <_close_r+0x44>
 4011c3c:	dfc00217 	ldw	ra,8(sp)
 4011c40:	dc400117 	ldw	r17,4(sp)
 4011c44:	dc000017 	ldw	r16,0(sp)
 4011c48:	dec00304 	addi	sp,sp,12
 4011c4c:	f800283a 	ret
 4011c50:	80c00017 	ldw	r3,0(r16)
 4011c54:	183ff926 	beq	r3,zero,4011c3c <__reset+0xfb010c3c>
 4011c58:	88c00015 	stw	r3,0(r17)
 4011c5c:	dfc00217 	ldw	ra,8(sp)
 4011c60:	dc400117 	ldw	r17,4(sp)
 4011c64:	dc000017 	ldw	r16,0(sp)
 4011c68:	dec00304 	addi	sp,sp,12
 4011c6c:	f800283a 	ret

04011c70 <_fclose_r>:
 4011c70:	defffc04 	addi	sp,sp,-16
 4011c74:	dc400115 	stw	r17,4(sp)
 4011c78:	dc000015 	stw	r16,0(sp)
 4011c7c:	dfc00315 	stw	ra,12(sp)
 4011c80:	dc800215 	stw	r18,8(sp)
 4011c84:	2821883a 	mov	r16,r5
 4011c88:	2023883a 	mov	r17,r4
 4011c8c:	28003426 	beq	r5,zero,4011d60 <_fclose_r+0xf0>
 4011c90:	400efd00 	call	400efd0 <__sfp_lock_acquire>
 4011c94:	88000226 	beq	r17,zero,4011ca0 <_fclose_r+0x30>
 4011c98:	88800e17 	ldw	r2,56(r17)
 4011c9c:	10003826 	beq	r2,zero,4011d80 <_fclose_r+0x110>
 4011ca0:	8080030f 	ldh	r2,12(r16)
 4011ca4:	10002526 	beq	r2,zero,4011d3c <_fclose_r+0xcc>
 4011ca8:	8809883a 	mov	r4,r17
 4011cac:	800b883a 	mov	r5,r16
 4011cb0:	400eb0c0 	call	400eb0c <_fflush_r>
 4011cb4:	1025883a 	mov	r18,r2
 4011cb8:	80800b17 	ldw	r2,44(r16)
 4011cbc:	10000426 	beq	r2,zero,4011cd0 <_fclose_r+0x60>
 4011cc0:	81400717 	ldw	r5,28(r16)
 4011cc4:	8809883a 	mov	r4,r17
 4011cc8:	103ee83a 	callr	r2
 4011ccc:	10003516 	blt	r2,zero,4011da4 <_fclose_r+0x134>
 4011cd0:	8080030b 	ldhu	r2,12(r16)
 4011cd4:	1080200c 	andi	r2,r2,128
 4011cd8:	10bfffcc 	andi	r2,r2,65535
 4011cdc:	10a0001c 	xori	r2,r2,32768
 4011ce0:	10a00004 	addi	r2,r2,-32768
 4011ce4:	10002b1e 	bne	r2,zero,4011d94 <_fclose_r+0x124>
 4011ce8:	81400c17 	ldw	r5,48(r16)
 4011cec:	28000526 	beq	r5,zero,4011d04 <_fclose_r+0x94>
 4011cf0:	80801004 	addi	r2,r16,64
 4011cf4:	28800226 	beq	r5,r2,4011d00 <_fclose_r+0x90>
 4011cf8:	8809883a 	mov	r4,r17
 4011cfc:	400f14c0 	call	400f14c <_free_r>
 4011d00:	80000c15 	stw	zero,48(r16)
 4011d04:	81401117 	ldw	r5,68(r16)
 4011d08:	28000326 	beq	r5,zero,4011d18 <_fclose_r+0xa8>
 4011d0c:	8809883a 	mov	r4,r17
 4011d10:	400f14c0 	call	400f14c <_free_r>
 4011d14:	80001115 	stw	zero,68(r16)
 4011d18:	8000030d 	sth	zero,12(r16)
 4011d1c:	400efd40 	call	400efd4 <__sfp_lock_release>
 4011d20:	9005883a 	mov	r2,r18
 4011d24:	dfc00317 	ldw	ra,12(sp)
 4011d28:	dc800217 	ldw	r18,8(sp)
 4011d2c:	dc400117 	ldw	r17,4(sp)
 4011d30:	dc000017 	ldw	r16,0(sp)
 4011d34:	dec00404 	addi	sp,sp,16
 4011d38:	f800283a 	ret
 4011d3c:	400efd40 	call	400efd4 <__sfp_lock_release>
 4011d40:	0025883a 	mov	r18,zero
 4011d44:	9005883a 	mov	r2,r18
 4011d48:	dfc00317 	ldw	ra,12(sp)
 4011d4c:	dc800217 	ldw	r18,8(sp)
 4011d50:	dc400117 	ldw	r17,4(sp)
 4011d54:	dc000017 	ldw	r16,0(sp)
 4011d58:	dec00404 	addi	sp,sp,16
 4011d5c:	f800283a 	ret
 4011d60:	0025883a 	mov	r18,zero
 4011d64:	9005883a 	mov	r2,r18
 4011d68:	dfc00317 	ldw	ra,12(sp)
 4011d6c:	dc800217 	ldw	r18,8(sp)
 4011d70:	dc400117 	ldw	r17,4(sp)
 4011d74:	dc000017 	ldw	r16,0(sp)
 4011d78:	dec00404 	addi	sp,sp,16
 4011d7c:	f800283a 	ret
 4011d80:	8809883a 	mov	r4,r17
 4011d84:	400edc80 	call	400edc8 <__sinit>
 4011d88:	8080030f 	ldh	r2,12(r16)
 4011d8c:	103fc61e 	bne	r2,zero,4011ca8 <__reset+0xfb010ca8>
 4011d90:	003fea06 	br	4011d3c <__reset+0xfb010d3c>
 4011d94:	81400417 	ldw	r5,16(r16)
 4011d98:	8809883a 	mov	r4,r17
 4011d9c:	400f14c0 	call	400f14c <_free_r>
 4011da0:	003fd106 	br	4011ce8 <__reset+0xfb010ce8>
 4011da4:	04bfffc4 	movi	r18,-1
 4011da8:	003fc906 	br	4011cd0 <__reset+0xfb010cd0>

04011dac <fclose>:
 4011dac:	00810234 	movhi	r2,1032
 4011db0:	10a37104 	addi	r2,r2,-29244
 4011db4:	200b883a 	mov	r5,r4
 4011db8:	11000017 	ldw	r4,0(r2)
 4011dbc:	4011c701 	jmpi	4011c70 <_fclose_r>

04011dc0 <_fstat_r>:
 4011dc0:	defffd04 	addi	sp,sp,-12
 4011dc4:	dc400115 	stw	r17,4(sp)
 4011dc8:	dc000015 	stw	r16,0(sp)
 4011dcc:	2023883a 	mov	r17,r4
 4011dd0:	04010234 	movhi	r16,1032
 4011dd4:	84238504 	addi	r16,r16,-29164
 4011dd8:	2809883a 	mov	r4,r5
 4011ddc:	300b883a 	mov	r5,r6
 4011de0:	dfc00215 	stw	ra,8(sp)
 4011de4:	80000015 	stw	zero,0(r16)
 4011de8:	40130540 	call	4013054 <fstat>
 4011dec:	00ffffc4 	movi	r3,-1
 4011df0:	10c00526 	beq	r2,r3,4011e08 <_fstat_r+0x48>
 4011df4:	dfc00217 	ldw	ra,8(sp)
 4011df8:	dc400117 	ldw	r17,4(sp)
 4011dfc:	dc000017 	ldw	r16,0(sp)
 4011e00:	dec00304 	addi	sp,sp,12
 4011e04:	f800283a 	ret
 4011e08:	80c00017 	ldw	r3,0(r16)
 4011e0c:	183ff926 	beq	r3,zero,4011df4 <__reset+0xfb010df4>
 4011e10:	88c00015 	stw	r3,0(r17)
 4011e14:	dfc00217 	ldw	ra,8(sp)
 4011e18:	dc400117 	ldw	r17,4(sp)
 4011e1c:	dc000017 	ldw	r16,0(sp)
 4011e20:	dec00304 	addi	sp,sp,12
 4011e24:	f800283a 	ret

04011e28 <_isatty_r>:
 4011e28:	defffd04 	addi	sp,sp,-12
 4011e2c:	dc400115 	stw	r17,4(sp)
 4011e30:	dc000015 	stw	r16,0(sp)
 4011e34:	2023883a 	mov	r17,r4
 4011e38:	04010234 	movhi	r16,1032
 4011e3c:	84238504 	addi	r16,r16,-29164
 4011e40:	2809883a 	mov	r4,r5
 4011e44:	dfc00215 	stw	ra,8(sp)
 4011e48:	80000015 	stw	zero,0(r16)
 4011e4c:	401341c0 	call	401341c <isatty>
 4011e50:	00ffffc4 	movi	r3,-1
 4011e54:	10c00526 	beq	r2,r3,4011e6c <_isatty_r+0x44>
 4011e58:	dfc00217 	ldw	ra,8(sp)
 4011e5c:	dc400117 	ldw	r17,4(sp)
 4011e60:	dc000017 	ldw	r16,0(sp)
 4011e64:	dec00304 	addi	sp,sp,12
 4011e68:	f800283a 	ret
 4011e6c:	80c00017 	ldw	r3,0(r16)
 4011e70:	183ff926 	beq	r3,zero,4011e58 <__reset+0xfb010e58>
 4011e74:	88c00015 	stw	r3,0(r17)
 4011e78:	dfc00217 	ldw	ra,8(sp)
 4011e7c:	dc400117 	ldw	r17,4(sp)
 4011e80:	dc000017 	ldw	r16,0(sp)
 4011e84:	dec00304 	addi	sp,sp,12
 4011e88:	f800283a 	ret

04011e8c <_lseek_r>:
 4011e8c:	defffd04 	addi	sp,sp,-12
 4011e90:	dc400115 	stw	r17,4(sp)
 4011e94:	dc000015 	stw	r16,0(sp)
 4011e98:	2023883a 	mov	r17,r4
 4011e9c:	04010234 	movhi	r16,1032
 4011ea0:	84238504 	addi	r16,r16,-29164
 4011ea4:	2809883a 	mov	r4,r5
 4011ea8:	300b883a 	mov	r5,r6
 4011eac:	380d883a 	mov	r6,r7
 4011eb0:	dfc00215 	stw	ra,8(sp)
 4011eb4:	80000015 	stw	zero,0(r16)
 4011eb8:	40135100 	call	4013510 <lseek>
 4011ebc:	00ffffc4 	movi	r3,-1
 4011ec0:	10c00526 	beq	r2,r3,4011ed8 <_lseek_r+0x4c>
 4011ec4:	dfc00217 	ldw	ra,8(sp)
 4011ec8:	dc400117 	ldw	r17,4(sp)
 4011ecc:	dc000017 	ldw	r16,0(sp)
 4011ed0:	dec00304 	addi	sp,sp,12
 4011ed4:	f800283a 	ret
 4011ed8:	80c00017 	ldw	r3,0(r16)
 4011edc:	183ff926 	beq	r3,zero,4011ec4 <__reset+0xfb010ec4>
 4011ee0:	88c00015 	stw	r3,0(r17)
 4011ee4:	dfc00217 	ldw	ra,8(sp)
 4011ee8:	dc400117 	ldw	r17,4(sp)
 4011eec:	dc000017 	ldw	r16,0(sp)
 4011ef0:	dec00304 	addi	sp,sp,12
 4011ef4:	f800283a 	ret

04011ef8 <_read_r>:
 4011ef8:	defffd04 	addi	sp,sp,-12
 4011efc:	dc400115 	stw	r17,4(sp)
 4011f00:	dc000015 	stw	r16,0(sp)
 4011f04:	2023883a 	mov	r17,r4
 4011f08:	04010234 	movhi	r16,1032
 4011f0c:	84238504 	addi	r16,r16,-29164
 4011f10:	2809883a 	mov	r4,r5
 4011f14:	300b883a 	mov	r5,r6
 4011f18:	380d883a 	mov	r6,r7
 4011f1c:	dfc00215 	stw	ra,8(sp)
 4011f20:	80000015 	stw	zero,0(r16)
 4011f24:	40136ec0 	call	40136ec <read>
 4011f28:	00ffffc4 	movi	r3,-1
 4011f2c:	10c00526 	beq	r2,r3,4011f44 <_read_r+0x4c>
 4011f30:	dfc00217 	ldw	ra,8(sp)
 4011f34:	dc400117 	ldw	r17,4(sp)
 4011f38:	dc000017 	ldw	r16,0(sp)
 4011f3c:	dec00304 	addi	sp,sp,12
 4011f40:	f800283a 	ret
 4011f44:	80c00017 	ldw	r3,0(r16)
 4011f48:	183ff926 	beq	r3,zero,4011f30 <__reset+0xfb010f30>
 4011f4c:	88c00015 	stw	r3,0(r17)
 4011f50:	dfc00217 	ldw	ra,8(sp)
 4011f54:	dc400117 	ldw	r17,4(sp)
 4011f58:	dc000017 	ldw	r16,0(sp)
 4011f5c:	dec00304 	addi	sp,sp,12
 4011f60:	f800283a 	ret

04011f64 <__udivdi3>:
 4011f64:	defff504 	addi	sp,sp,-44
 4011f68:	dd000515 	stw	r20,20(sp)
 4011f6c:	dcc00415 	stw	r19,16(sp)
 4011f70:	dc800315 	stw	r18,12(sp)
 4011f74:	dc400215 	stw	r17,8(sp)
 4011f78:	dc000115 	stw	r16,4(sp)
 4011f7c:	dfc00a15 	stw	ra,40(sp)
 4011f80:	df000915 	stw	fp,36(sp)
 4011f84:	ddc00815 	stw	r23,32(sp)
 4011f88:	dd800715 	stw	r22,28(sp)
 4011f8c:	dd400615 	stw	r21,24(sp)
 4011f90:	2025883a 	mov	r18,r4
 4011f94:	2823883a 	mov	r17,r5
 4011f98:	3021883a 	mov	r16,r6
 4011f9c:	2027883a 	mov	r19,r4
 4011fa0:	2829883a 	mov	r20,r5
 4011fa4:	3800451e 	bne	r7,zero,40120bc <__udivdi3+0x158>
 4011fa8:	2980652e 	bgeu	r5,r6,4012140 <__udivdi3+0x1dc>
 4011fac:	00bfffd4 	movui	r2,65535
 4011fb0:	1180b436 	bltu	r2,r6,4012284 <__udivdi3+0x320>
 4011fb4:	00803fc4 	movi	r2,255
 4011fb8:	11816636 	bltu	r2,r6,4012554 <__udivdi3+0x5f0>
 4011fbc:	0005883a 	mov	r2,zero
 4011fc0:	0007883a 	mov	r3,zero
 4011fc4:	3084d83a 	srl	r2,r6,r2
 4011fc8:	010101f4 	movhi	r4,1031
 4011fcc:	2114fa04 	addi	r4,r4,21480
 4011fd0:	2085883a 	add	r2,r4,r2
 4011fd4:	10800003 	ldbu	r2,0(r2)
 4011fd8:	10c7883a 	add	r3,r2,r3
 4011fdc:	00800804 	movi	r2,32
 4011fe0:	10c5c83a 	sub	r2,r2,r3
 4011fe4:	10000526 	beq	r2,zero,4011ffc <__udivdi3+0x98>
 4011fe8:	88a2983a 	sll	r17,r17,r2
 4011fec:	90c6d83a 	srl	r3,r18,r3
 4011ff0:	30a0983a 	sll	r16,r6,r2
 4011ff4:	90a6983a 	sll	r19,r18,r2
 4011ff8:	88e8b03a 	or	r20,r17,r3
 4011ffc:	8022d43a 	srli	r17,r16,16
 4012000:	a009883a 	mov	r4,r20
 4012004:	857fffcc 	andi	r21,r16,65535
 4012008:	880b883a 	mov	r5,r17
 401200c:	4009dd00 	call	4009dd0 <__umodsi3>
 4012010:	a009883a 	mov	r4,r20
 4012014:	880b883a 	mov	r5,r17
 4012018:	102d883a 	mov	r22,r2
 401201c:	4009dc80 	call	4009dc8 <__udivsi3>
 4012020:	1009883a 	mov	r4,r2
 4012024:	a80b883a 	mov	r5,r21
 4012028:	1025883a 	mov	r18,r2
 401202c:	4009dd80 	call	4009dd8 <__mulsi3>
 4012030:	1009883a 	mov	r4,r2
 4012034:	b006943a 	slli	r3,r22,16
 4012038:	9804d43a 	srli	r2,r19,16
 401203c:	1886b03a 	or	r3,r3,r2
 4012040:	1900052e 	bgeu	r3,r4,4012058 <__udivdi3+0xf4>
 4012044:	1c07883a 	add	r3,r3,r16
 4012048:	90bfffc4 	addi	r2,r18,-1
 401204c:	1c000136 	bltu	r3,r16,4012054 <__udivdi3+0xf0>
 4012050:	19015536 	bltu	r3,r4,40125a8 <__udivdi3+0x644>
 4012054:	1025883a 	mov	r18,r2
 4012058:	1929c83a 	sub	r20,r3,r4
 401205c:	880b883a 	mov	r5,r17
 4012060:	a009883a 	mov	r4,r20
 4012064:	4009dd00 	call	4009dd0 <__umodsi3>
 4012068:	102d883a 	mov	r22,r2
 401206c:	880b883a 	mov	r5,r17
 4012070:	a009883a 	mov	r4,r20
 4012074:	b02c943a 	slli	r22,r22,16
 4012078:	4009dc80 	call	4009dc8 <__udivsi3>
 401207c:	1009883a 	mov	r4,r2
 4012080:	a80b883a 	mov	r5,r21
 4012084:	9cffffcc 	andi	r19,r19,65535
 4012088:	1023883a 	mov	r17,r2
 401208c:	b4e6b03a 	or	r19,r22,r19
 4012090:	4009dd80 	call	4009dd8 <__mulsi3>
 4012094:	9880052e 	bgeu	r19,r2,40120ac <__udivdi3+0x148>
 4012098:	9c27883a 	add	r19,r19,r16
 401209c:	88ffffc4 	addi	r3,r17,-1
 40120a0:	9c011436 	bltu	r19,r16,40124f4 <__udivdi3+0x590>
 40120a4:	9881132e 	bgeu	r19,r2,40124f4 <__udivdi3+0x590>
 40120a8:	8c7fff84 	addi	r17,r17,-2
 40120ac:	9004943a 	slli	r2,r18,16
 40120b0:	0007883a 	mov	r3,zero
 40120b4:	8884b03a 	or	r2,r17,r2
 40120b8:	00001506 	br	4012110 <__udivdi3+0x1ac>
 40120bc:	29c06a36 	bltu	r5,r7,4012268 <__udivdi3+0x304>
 40120c0:	00bfffd4 	movui	r2,65535
 40120c4:	11c06a2e 	bgeu	r2,r7,4012270 <__udivdi3+0x30c>
 40120c8:	00804034 	movhi	r2,256
 40120cc:	10bfffc4 	addi	r2,r2,-1
 40120d0:	11c11436 	bltu	r2,r7,4012524 <__udivdi3+0x5c0>
 40120d4:	00c00404 	movi	r3,16
 40120d8:	180b883a 	mov	r5,r3
 40120dc:	38c6d83a 	srl	r3,r7,r3
 40120e0:	010101f4 	movhi	r4,1031
 40120e4:	2114fa04 	addi	r4,r4,21480
 40120e8:	04000804 	movi	r16,32
 40120ec:	20c7883a 	add	r3,r4,r3
 40120f0:	18800003 	ldbu	r2,0(r3)
 40120f4:	1145883a 	add	r2,r2,r5
 40120f8:	80a1c83a 	sub	r16,r16,r2
 40120fc:	80006e1e 	bne	r16,zero,40122b8 <__udivdi3+0x354>
 4012100:	0007883a 	mov	r3,zero
 4012104:	3c406a36 	bltu	r7,r17,40122b0 <__udivdi3+0x34c>
 4012108:	9180692e 	bgeu	r18,r6,40122b0 <__udivdi3+0x34c>
 401210c:	0005883a 	mov	r2,zero
 4012110:	dfc00a17 	ldw	ra,40(sp)
 4012114:	df000917 	ldw	fp,36(sp)
 4012118:	ddc00817 	ldw	r23,32(sp)
 401211c:	dd800717 	ldw	r22,28(sp)
 4012120:	dd400617 	ldw	r21,24(sp)
 4012124:	dd000517 	ldw	r20,20(sp)
 4012128:	dcc00417 	ldw	r19,16(sp)
 401212c:	dc800317 	ldw	r18,12(sp)
 4012130:	dc400217 	ldw	r17,8(sp)
 4012134:	dc000117 	ldw	r16,4(sp)
 4012138:	dec00b04 	addi	sp,sp,44
 401213c:	f800283a 	ret
 4012140:	3000041e 	bne	r6,zero,4012154 <__udivdi3+0x1f0>
 4012144:	01000044 	movi	r4,1
 4012148:	000b883a 	mov	r5,zero
 401214c:	4009dc80 	call	4009dc8 <__udivsi3>
 4012150:	1021883a 	mov	r16,r2
 4012154:	00bfffd4 	movui	r2,65535
 4012158:	1400502e 	bgeu	r2,r16,401229c <__udivdi3+0x338>
 401215c:	00804034 	movhi	r2,256
 4012160:	10bfffc4 	addi	r2,r2,-1
 4012164:	1400f536 	bltu	r2,r16,401253c <__udivdi3+0x5d8>
 4012168:	00800404 	movi	r2,16
 401216c:	1007883a 	mov	r3,r2
 4012170:	8084d83a 	srl	r2,r16,r2
 4012174:	010101f4 	movhi	r4,1031
 4012178:	2114fa04 	addi	r4,r4,21480
 401217c:	2085883a 	add	r2,r4,r2
 4012180:	10800003 	ldbu	r2,0(r2)
 4012184:	10c7883a 	add	r3,r2,r3
 4012188:	00800804 	movi	r2,32
 401218c:	10c5c83a 	sub	r2,r2,r3
 4012190:	1000a01e 	bne	r2,zero,4012414 <__udivdi3+0x4b0>
 4012194:	8028d43a 	srli	r20,r16,16
 4012198:	8c23c83a 	sub	r17,r17,r16
 401219c:	857fffcc 	andi	r21,r16,65535
 40121a0:	00c00044 	movi	r3,1
 40121a4:	8809883a 	mov	r4,r17
 40121a8:	a00b883a 	mov	r5,r20
 40121ac:	d8c00015 	stw	r3,0(sp)
 40121b0:	4009dd00 	call	4009dd0 <__umodsi3>
 40121b4:	8809883a 	mov	r4,r17
 40121b8:	a00b883a 	mov	r5,r20
 40121bc:	102d883a 	mov	r22,r2
 40121c0:	4009dc80 	call	4009dc8 <__udivsi3>
 40121c4:	1009883a 	mov	r4,r2
 40121c8:	a80b883a 	mov	r5,r21
 40121cc:	1025883a 	mov	r18,r2
 40121d0:	4009dd80 	call	4009dd8 <__mulsi3>
 40121d4:	1009883a 	mov	r4,r2
 40121d8:	b00c943a 	slli	r6,r22,16
 40121dc:	9804d43a 	srli	r2,r19,16
 40121e0:	d8c00017 	ldw	r3,0(sp)
 40121e4:	308cb03a 	or	r6,r6,r2
 40121e8:	3100052e 	bgeu	r6,r4,4012200 <__udivdi3+0x29c>
 40121ec:	340d883a 	add	r6,r6,r16
 40121f0:	90bfffc4 	addi	r2,r18,-1
 40121f4:	34000136 	bltu	r6,r16,40121fc <__udivdi3+0x298>
 40121f8:	3100e836 	bltu	r6,r4,401259c <__udivdi3+0x638>
 40121fc:	1025883a 	mov	r18,r2
 4012200:	3123c83a 	sub	r17,r6,r4
 4012204:	8809883a 	mov	r4,r17
 4012208:	a00b883a 	mov	r5,r20
 401220c:	d8c00015 	stw	r3,0(sp)
 4012210:	4009dd00 	call	4009dd0 <__umodsi3>
 4012214:	102d883a 	mov	r22,r2
 4012218:	8809883a 	mov	r4,r17
 401221c:	a00b883a 	mov	r5,r20
 4012220:	b02c943a 	slli	r22,r22,16
 4012224:	4009dc80 	call	4009dc8 <__udivsi3>
 4012228:	1009883a 	mov	r4,r2
 401222c:	a80b883a 	mov	r5,r21
 4012230:	9cffffcc 	andi	r19,r19,65535
 4012234:	1023883a 	mov	r17,r2
 4012238:	b4e6b03a 	or	r19,r22,r19
 401223c:	4009dd80 	call	4009dd8 <__mulsi3>
 4012240:	d8c00017 	ldw	r3,0(sp)
 4012244:	9880052e 	bgeu	r19,r2,401225c <__udivdi3+0x2f8>
 4012248:	9c27883a 	add	r19,r19,r16
 401224c:	893fffc4 	addi	r4,r17,-1
 4012250:	9c00aa36 	bltu	r19,r16,40124fc <__udivdi3+0x598>
 4012254:	9880a92e 	bgeu	r19,r2,40124fc <__udivdi3+0x598>
 4012258:	8c7fff84 	addi	r17,r17,-2
 401225c:	9004943a 	slli	r2,r18,16
 4012260:	8884b03a 	or	r2,r17,r2
 4012264:	003faa06 	br	4012110 <__reset+0xfb011110>
 4012268:	0007883a 	mov	r3,zero
 401226c:	003fa706 	br	401210c <__reset+0xfb01110c>
 4012270:	00803fc4 	movi	r2,255
 4012274:	11c0ae36 	bltu	r2,r7,4012530 <__udivdi3+0x5cc>
 4012278:	0007883a 	mov	r3,zero
 401227c:	000b883a 	mov	r5,zero
 4012280:	003f9606 	br	40120dc <__reset+0xfb0110dc>
 4012284:	00804034 	movhi	r2,256
 4012288:	10bfffc4 	addi	r2,r2,-1
 401228c:	1180ae36 	bltu	r2,r6,4012548 <__udivdi3+0x5e4>
 4012290:	00800404 	movi	r2,16
 4012294:	1007883a 	mov	r3,r2
 4012298:	003f4a06 	br	4011fc4 <__reset+0xfb010fc4>
 401229c:	00803fc4 	movi	r2,255
 40122a0:	1400af36 	bltu	r2,r16,4012560 <__udivdi3+0x5fc>
 40122a4:	0005883a 	mov	r2,zero
 40122a8:	0007883a 	mov	r3,zero
 40122ac:	003fb006 	br	4012170 <__reset+0xfb011170>
 40122b0:	00800044 	movi	r2,1
 40122b4:	003f9606 	br	4012110 <__reset+0xfb011110>
 40122b8:	3c0e983a 	sll	r7,r7,r16
 40122bc:	3086d83a 	srl	r3,r6,r2
 40122c0:	88aed83a 	srl	r23,r17,r2
 40122c4:	9084d83a 	srl	r2,r18,r2
 40122c8:	38e6b03a 	or	r19,r7,r3
 40122cc:	9828d43a 	srli	r20,r19,16
 40122d0:	8c22983a 	sll	r17,r17,r16
 40122d4:	b809883a 	mov	r4,r23
 40122d8:	a00b883a 	mov	r5,r20
 40122dc:	342a983a 	sll	r21,r6,r16
 40122e0:	88a2b03a 	or	r17,r17,r2
 40122e4:	4009dd00 	call	4009dd0 <__umodsi3>
 40122e8:	b809883a 	mov	r4,r23
 40122ec:	a00b883a 	mov	r5,r20
 40122f0:	1039883a 	mov	fp,r2
 40122f4:	9dbfffcc 	andi	r22,r19,65535
 40122f8:	4009dc80 	call	4009dc8 <__udivsi3>
 40122fc:	1009883a 	mov	r4,r2
 4012300:	b00b883a 	mov	r5,r22
 4012304:	102f883a 	mov	r23,r2
 4012308:	4009dd80 	call	4009dd8 <__mulsi3>
 401230c:	1009883a 	mov	r4,r2
 4012310:	e00e943a 	slli	r7,fp,16
 4012314:	8804d43a 	srli	r2,r17,16
 4012318:	388eb03a 	or	r7,r7,r2
 401231c:	3900042e 	bgeu	r7,r4,4012330 <__udivdi3+0x3cc>
 4012320:	3ccf883a 	add	r7,r7,r19
 4012324:	b8bfffc4 	addi	r2,r23,-1
 4012328:	3cc0942e 	bgeu	r7,r19,401257c <__udivdi3+0x618>
 401232c:	102f883a 	mov	r23,r2
 4012330:	3939c83a 	sub	fp,r7,r4
 4012334:	a00b883a 	mov	r5,r20
 4012338:	e009883a 	mov	r4,fp
 401233c:	4009dd00 	call	4009dd0 <__umodsi3>
 4012340:	a00b883a 	mov	r5,r20
 4012344:	e009883a 	mov	r4,fp
 4012348:	d8800015 	stw	r2,0(sp)
 401234c:	4009dc80 	call	4009dc8 <__udivsi3>
 4012350:	1009883a 	mov	r4,r2
 4012354:	b00b883a 	mov	r5,r22
 4012358:	1029883a 	mov	r20,r2
 401235c:	4009dd80 	call	4009dd8 <__mulsi3>
 4012360:	d8c00017 	ldw	r3,0(sp)
 4012364:	8c7fffcc 	andi	r17,r17,65535
 4012368:	1806943a 	slli	r3,r3,16
 401236c:	1c46b03a 	or	r3,r3,r17
 4012370:	1880042e 	bgeu	r3,r2,4012384 <__udivdi3+0x420>
 4012374:	1cc7883a 	add	r3,r3,r19
 4012378:	a13fffc4 	addi	r4,r20,-1
 401237c:	1cc07b2e 	bgeu	r3,r19,401256c <__udivdi3+0x608>
 4012380:	2029883a 	mov	r20,r4
 4012384:	b82e943a 	slli	r23,r23,16
 4012388:	a822d43a 	srli	r17,r21,16
 401238c:	ad7fffcc 	andi	r21,r21,65535
 4012390:	a5e8b03a 	or	r20,r20,r23
 4012394:	a5bfffcc 	andi	r22,r20,65535
 4012398:	b009883a 	mov	r4,r22
 401239c:	a80b883a 	mov	r5,r21
 40123a0:	18afc83a 	sub	r23,r3,r2
 40123a4:	a026d43a 	srli	r19,r20,16
 40123a8:	4009dd80 	call	4009dd8 <__mulsi3>
 40123ac:	b009883a 	mov	r4,r22
 40123b0:	880b883a 	mov	r5,r17
 40123b4:	1039883a 	mov	fp,r2
 40123b8:	4009dd80 	call	4009dd8 <__mulsi3>
 40123bc:	a80b883a 	mov	r5,r21
 40123c0:	9809883a 	mov	r4,r19
 40123c4:	102d883a 	mov	r22,r2
 40123c8:	4009dd80 	call	4009dd8 <__mulsi3>
 40123cc:	9809883a 	mov	r4,r19
 40123d0:	880b883a 	mov	r5,r17
 40123d4:	102b883a 	mov	r21,r2
 40123d8:	4009dd80 	call	4009dd8 <__mulsi3>
 40123dc:	100b883a 	mov	r5,r2
 40123e0:	e004d43a 	srli	r2,fp,16
 40123e4:	ad89883a 	add	r4,r21,r22
 40123e8:	2089883a 	add	r4,r4,r2
 40123ec:	2540022e 	bgeu	r4,r21,40123f8 <__udivdi3+0x494>
 40123f0:	00800074 	movhi	r2,1
 40123f4:	288b883a 	add	r5,r5,r2
 40123f8:	2004d43a 	srli	r2,r4,16
 40123fc:	288b883a 	add	r5,r5,r2
 4012400:	b9404536 	bltu	r23,r5,4012518 <__udivdi3+0x5b4>
 4012404:	b9403f26 	beq	r23,r5,4012504 <__udivdi3+0x5a0>
 4012408:	a005883a 	mov	r2,r20
 401240c:	0007883a 	mov	r3,zero
 4012410:	003f3f06 	br	4012110 <__reset+0xfb011110>
 4012414:	80a0983a 	sll	r16,r16,r2
 4012418:	88eed83a 	srl	r23,r17,r3
 401241c:	90c6d83a 	srl	r3,r18,r3
 4012420:	8028d43a 	srli	r20,r16,16
 4012424:	88a2983a 	sll	r17,r17,r2
 4012428:	b809883a 	mov	r4,r23
 401242c:	a00b883a 	mov	r5,r20
 4012430:	88ecb03a 	or	r22,r17,r3
 4012434:	90a6983a 	sll	r19,r18,r2
 4012438:	4009dd00 	call	4009dd0 <__umodsi3>
 401243c:	b809883a 	mov	r4,r23
 4012440:	a00b883a 	mov	r5,r20
 4012444:	1023883a 	mov	r17,r2
 4012448:	857fffcc 	andi	r21,r16,65535
 401244c:	4009dc80 	call	4009dc8 <__udivsi3>
 4012450:	1009883a 	mov	r4,r2
 4012454:	a80b883a 	mov	r5,r21
 4012458:	102f883a 	mov	r23,r2
 401245c:	4009dd80 	call	4009dd8 <__mulsi3>
 4012460:	1009883a 	mov	r4,r2
 4012464:	880a943a 	slli	r5,r17,16
 4012468:	b004d43a 	srli	r2,r22,16
 401246c:	288ab03a 	or	r5,r5,r2
 4012470:	2900062e 	bgeu	r5,r4,401248c <__udivdi3+0x528>
 4012474:	2c0b883a 	add	r5,r5,r16
 4012478:	b8bfffc4 	addi	r2,r23,-1
 401247c:	2c004536 	bltu	r5,r16,4012594 <__udivdi3+0x630>
 4012480:	2900442e 	bgeu	r5,r4,4012594 <__udivdi3+0x630>
 4012484:	bdffff84 	addi	r23,r23,-2
 4012488:	2c0b883a 	add	r5,r5,r16
 401248c:	2925c83a 	sub	r18,r5,r4
 4012490:	9009883a 	mov	r4,r18
 4012494:	a00b883a 	mov	r5,r20
 4012498:	4009dd00 	call	4009dd0 <__umodsi3>
 401249c:	1023883a 	mov	r17,r2
 40124a0:	9009883a 	mov	r4,r18
 40124a4:	a00b883a 	mov	r5,r20
 40124a8:	8822943a 	slli	r17,r17,16
 40124ac:	4009dc80 	call	4009dc8 <__udivsi3>
 40124b0:	1009883a 	mov	r4,r2
 40124b4:	a80b883a 	mov	r5,r21
 40124b8:	b5bfffcc 	andi	r22,r22,65535
 40124bc:	1025883a 	mov	r18,r2
 40124c0:	8da2b03a 	or	r17,r17,r22
 40124c4:	4009dd80 	call	4009dd8 <__mulsi3>
 40124c8:	8880062e 	bgeu	r17,r2,40124e4 <__udivdi3+0x580>
 40124cc:	8c23883a 	add	r17,r17,r16
 40124d0:	90ffffc4 	addi	r3,r18,-1
 40124d4:	8c002d36 	bltu	r17,r16,401258c <__udivdi3+0x628>
 40124d8:	88802c2e 	bgeu	r17,r2,401258c <__udivdi3+0x628>
 40124dc:	94bfff84 	addi	r18,r18,-2
 40124e0:	8c23883a 	add	r17,r17,r16
 40124e4:	b806943a 	slli	r3,r23,16
 40124e8:	88a3c83a 	sub	r17,r17,r2
 40124ec:	90c6b03a 	or	r3,r18,r3
 40124f0:	003f2c06 	br	40121a4 <__reset+0xfb0111a4>
 40124f4:	1823883a 	mov	r17,r3
 40124f8:	003eec06 	br	40120ac <__reset+0xfb0110ac>
 40124fc:	2023883a 	mov	r17,r4
 4012500:	003f5606 	br	401225c <__reset+0xfb01125c>
 4012504:	2008943a 	slli	r4,r4,16
 4012508:	9420983a 	sll	r16,r18,r16
 401250c:	e73fffcc 	andi	fp,fp,65535
 4012510:	2709883a 	add	r4,r4,fp
 4012514:	813fbc2e 	bgeu	r16,r4,4012408 <__reset+0xfb011408>
 4012518:	a0bfffc4 	addi	r2,r20,-1
 401251c:	0007883a 	mov	r3,zero
 4012520:	003efb06 	br	4012110 <__reset+0xfb011110>
 4012524:	00c00604 	movi	r3,24
 4012528:	180b883a 	mov	r5,r3
 401252c:	003eeb06 	br	40120dc <__reset+0xfb0110dc>
 4012530:	00c00204 	movi	r3,8
 4012534:	180b883a 	mov	r5,r3
 4012538:	003ee806 	br	40120dc <__reset+0xfb0110dc>
 401253c:	00800604 	movi	r2,24
 4012540:	1007883a 	mov	r3,r2
 4012544:	003f0a06 	br	4012170 <__reset+0xfb011170>
 4012548:	00800604 	movi	r2,24
 401254c:	1007883a 	mov	r3,r2
 4012550:	003e9c06 	br	4011fc4 <__reset+0xfb010fc4>
 4012554:	00800204 	movi	r2,8
 4012558:	1007883a 	mov	r3,r2
 401255c:	003e9906 	br	4011fc4 <__reset+0xfb010fc4>
 4012560:	00800204 	movi	r2,8
 4012564:	1007883a 	mov	r3,r2
 4012568:	003f0106 	br	4012170 <__reset+0xfb011170>
 401256c:	18bf842e 	bgeu	r3,r2,4012380 <__reset+0xfb011380>
 4012570:	a53fff84 	addi	r20,r20,-2
 4012574:	1cc7883a 	add	r3,r3,r19
 4012578:	003f8206 	br	4012384 <__reset+0xfb011384>
 401257c:	393f6b2e 	bgeu	r7,r4,401232c <__reset+0xfb01132c>
 4012580:	bdffff84 	addi	r23,r23,-2
 4012584:	3ccf883a 	add	r7,r7,r19
 4012588:	003f6906 	br	4012330 <__reset+0xfb011330>
 401258c:	1825883a 	mov	r18,r3
 4012590:	003fd406 	br	40124e4 <__reset+0xfb0114e4>
 4012594:	102f883a 	mov	r23,r2
 4012598:	003fbc06 	br	401248c <__reset+0xfb01148c>
 401259c:	94bfff84 	addi	r18,r18,-2
 40125a0:	340d883a 	add	r6,r6,r16
 40125a4:	003f1606 	br	4012200 <__reset+0xfb011200>
 40125a8:	94bfff84 	addi	r18,r18,-2
 40125ac:	1c07883a 	add	r3,r3,r16
 40125b0:	003ea906 	br	4012058 <__reset+0xfb011058>

040125b4 <__umoddi3>:
 40125b4:	defff304 	addi	sp,sp,-52
 40125b8:	dd000715 	stw	r20,28(sp)
 40125bc:	dcc00615 	stw	r19,24(sp)
 40125c0:	dc800515 	stw	r18,20(sp)
 40125c4:	dc400415 	stw	r17,16(sp)
 40125c8:	dc000315 	stw	r16,12(sp)
 40125cc:	dfc00c15 	stw	ra,48(sp)
 40125d0:	df000b15 	stw	fp,44(sp)
 40125d4:	ddc00a15 	stw	r23,40(sp)
 40125d8:	dd800915 	stw	r22,36(sp)
 40125dc:	dd400815 	stw	r21,32(sp)
 40125e0:	2025883a 	mov	r18,r4
 40125e4:	2823883a 	mov	r17,r5
 40125e8:	3021883a 	mov	r16,r6
 40125ec:	2027883a 	mov	r19,r4
 40125f0:	2829883a 	mov	r20,r5
 40125f4:	38003a1e 	bne	r7,zero,40126e0 <__umoddi3+0x12c>
 40125f8:	2980522e 	bgeu	r5,r6,4012744 <__umoddi3+0x190>
 40125fc:	00bfffd4 	movui	r2,65535
 4012600:	1180a436 	bltu	r2,r6,4012894 <__umoddi3+0x2e0>
 4012604:	00803fc4 	movi	r2,255
 4012608:	11816036 	bltu	r2,r6,4012b8c <__umoddi3+0x5d8>
 401260c:	0005883a 	mov	r2,zero
 4012610:	0009883a 	mov	r4,zero
 4012614:	3084d83a 	srl	r2,r6,r2
 4012618:	00c101f4 	movhi	r3,1031
 401261c:	18d4fa04 	addi	r3,r3,21480
 4012620:	05400804 	movi	r21,32
 4012624:	1885883a 	add	r2,r3,r2
 4012628:	10800003 	ldbu	r2,0(r2)
 401262c:	1109883a 	add	r4,r2,r4
 4012630:	a92bc83a 	sub	r21,r21,r4
 4012634:	a8010e26 	beq	r21,zero,4012a70 <__umoddi3+0x4bc>
 4012638:	8d62983a 	sll	r17,r17,r21
 401263c:	9108d83a 	srl	r4,r18,r4
 4012640:	3560983a 	sll	r16,r6,r21
 4012644:	9566983a 	sll	r19,r18,r21
 4012648:	8928b03a 	or	r20,r17,r4
 401264c:	8022d43a 	srli	r17,r16,16
 4012650:	a009883a 	mov	r4,r20
 4012654:	84bfffcc 	andi	r18,r16,65535
 4012658:	880b883a 	mov	r5,r17
 401265c:	4009dd00 	call	4009dd0 <__umodsi3>
 4012660:	a009883a 	mov	r4,r20
 4012664:	880b883a 	mov	r5,r17
 4012668:	102d883a 	mov	r22,r2
 401266c:	4009dc80 	call	4009dc8 <__udivsi3>
 4012670:	1009883a 	mov	r4,r2
 4012674:	900b883a 	mov	r5,r18
 4012678:	4009dd80 	call	4009dd8 <__mulsi3>
 401267c:	1009883a 	mov	r4,r2
 4012680:	b006943a 	slli	r3,r22,16
 4012684:	9804d43a 	srli	r2,r19,16
 4012688:	1886b03a 	or	r3,r3,r2
 401268c:	1900042e 	bgeu	r3,r4,40126a0 <__umoddi3+0xec>
 4012690:	1c07883a 	add	r3,r3,r16
 4012694:	1c000236 	bltu	r3,r16,40126a0 <__umoddi3+0xec>
 4012698:	1900012e 	bgeu	r3,r4,40126a0 <__umoddi3+0xec>
 401269c:	1c07883a 	add	r3,r3,r16
 40126a0:	1929c83a 	sub	r20,r3,r4
 40126a4:	a009883a 	mov	r4,r20
 40126a8:	880b883a 	mov	r5,r17
 40126ac:	4009dd00 	call	4009dd0 <__umodsi3>
 40126b0:	102d883a 	mov	r22,r2
 40126b4:	a009883a 	mov	r4,r20
 40126b8:	880b883a 	mov	r5,r17
 40126bc:	b02c943a 	slli	r22,r22,16
 40126c0:	4009dc80 	call	4009dc8 <__udivsi3>
 40126c4:	1009883a 	mov	r4,r2
 40126c8:	900b883a 	mov	r5,r18
 40126cc:	9cffffcc 	andi	r19,r19,65535
 40126d0:	4009dd80 	call	4009dd8 <__mulsi3>
 40126d4:	b4e6b03a 	or	r19,r22,r19
 40126d8:	9880572e 	bgeu	r19,r2,4012838 <__umoddi3+0x284>
 40126dc:	00005206 	br	4012828 <__umoddi3+0x274>
 40126e0:	29c05936 	bltu	r5,r7,4012848 <__umoddi3+0x294>
 40126e4:	00bfffd4 	movui	r2,65535
 40126e8:	11c0652e 	bgeu	r2,r7,4012880 <__umoddi3+0x2cc>
 40126ec:	00804034 	movhi	r2,256
 40126f0:	10bfffc4 	addi	r2,r2,-1
 40126f4:	11c11936 	bltu	r2,r7,4012b5c <__umoddi3+0x5a8>
 40126f8:	00c00404 	movi	r3,16
 40126fc:	1827883a 	mov	r19,r3
 4012700:	38c6d83a 	srl	r3,r7,r3
 4012704:	010101f4 	movhi	r4,1031
 4012708:	2114fa04 	addi	r4,r4,21480
 401270c:	04000804 	movi	r16,32
 4012710:	20c7883a 	add	r3,r4,r3
 4012714:	18800003 	ldbu	r2,0(r3)
 4012718:	14e7883a 	add	r19,r2,r19
 401271c:	84e1c83a 	sub	r16,r16,r19
 4012720:	8000671e 	bne	r16,zero,40128c0 <__umoddi3+0x30c>
 4012724:	3c400136 	bltu	r7,r17,401272c <__umoddi3+0x178>
 4012728:	91812536 	bltu	r18,r6,4012bc0 <__umoddi3+0x60c>
 401272c:	9185c83a 	sub	r2,r18,r6
 4012730:	89e3c83a 	sub	r17,r17,r7
 4012734:	90a5803a 	cmpltu	r18,r18,r2
 4012738:	8ca9c83a 	sub	r20,r17,r18
 401273c:	a007883a 	mov	r3,r20
 4012740:	00004306 	br	4012850 <__umoddi3+0x29c>
 4012744:	3000041e 	bne	r6,zero,4012758 <__umoddi3+0x1a4>
 4012748:	01000044 	movi	r4,1
 401274c:	000b883a 	mov	r5,zero
 4012750:	4009dc80 	call	4009dc8 <__udivsi3>
 4012754:	1021883a 	mov	r16,r2
 4012758:	00bfffd4 	movui	r2,65535
 401275c:	1400532e 	bgeu	r2,r16,40128ac <__umoddi3+0x2f8>
 4012760:	00804034 	movhi	r2,256
 4012764:	10bfffc4 	addi	r2,r2,-1
 4012768:	14010536 	bltu	r2,r16,4012b80 <__umoddi3+0x5cc>
 401276c:	00800404 	movi	r2,16
 4012770:	1007883a 	mov	r3,r2
 4012774:	8084d83a 	srl	r2,r16,r2
 4012778:	010101f4 	movhi	r4,1031
 401277c:	2114fa04 	addi	r4,r4,21480
 4012780:	05400804 	movi	r21,32
 4012784:	2085883a 	add	r2,r4,r2
 4012788:	10800003 	ldbu	r2,0(r2)
 401278c:	10c7883a 	add	r3,r2,r3
 4012790:	a8ebc83a 	sub	r21,r21,r3
 4012794:	a800b81e 	bne	r21,zero,4012a78 <__umoddi3+0x4c4>
 4012798:	8028d43a 	srli	r20,r16,16
 401279c:	8c23c83a 	sub	r17,r17,r16
 40127a0:	85bfffcc 	andi	r22,r16,65535
 40127a4:	8809883a 	mov	r4,r17
 40127a8:	a00b883a 	mov	r5,r20
 40127ac:	4009dd00 	call	4009dd0 <__umodsi3>
 40127b0:	8809883a 	mov	r4,r17
 40127b4:	a00b883a 	mov	r5,r20
 40127b8:	1025883a 	mov	r18,r2
 40127bc:	4009dc80 	call	4009dc8 <__udivsi3>
 40127c0:	1009883a 	mov	r4,r2
 40127c4:	b00b883a 	mov	r5,r22
 40127c8:	4009dd80 	call	4009dd8 <__mulsi3>
 40127cc:	1009883a 	mov	r4,r2
 40127d0:	9006943a 	slli	r3,r18,16
 40127d4:	9804d43a 	srli	r2,r19,16
 40127d8:	1886b03a 	or	r3,r3,r2
 40127dc:	1900032e 	bgeu	r3,r4,40127ec <__umoddi3+0x238>
 40127e0:	1c07883a 	add	r3,r3,r16
 40127e4:	1c000136 	bltu	r3,r16,40127ec <__umoddi3+0x238>
 40127e8:	1900f336 	bltu	r3,r4,4012bb8 <__umoddi3+0x604>
 40127ec:	1923c83a 	sub	r17,r3,r4
 40127f0:	8809883a 	mov	r4,r17
 40127f4:	a00b883a 	mov	r5,r20
 40127f8:	4009dd00 	call	4009dd0 <__umodsi3>
 40127fc:	102f883a 	mov	r23,r2
 4012800:	8809883a 	mov	r4,r17
 4012804:	a00b883a 	mov	r5,r20
 4012808:	b82e943a 	slli	r23,r23,16
 401280c:	4009dc80 	call	4009dc8 <__udivsi3>
 4012810:	1009883a 	mov	r4,r2
 4012814:	b00b883a 	mov	r5,r22
 4012818:	9cffffcc 	andi	r19,r19,65535
 401281c:	4009dd80 	call	4009dd8 <__mulsi3>
 4012820:	bce6b03a 	or	r19,r23,r19
 4012824:	9880042e 	bgeu	r19,r2,4012838 <__umoddi3+0x284>
 4012828:	9c27883a 	add	r19,r19,r16
 401282c:	9c000236 	bltu	r19,r16,4012838 <__umoddi3+0x284>
 4012830:	9880012e 	bgeu	r19,r2,4012838 <__umoddi3+0x284>
 4012834:	9c27883a 	add	r19,r19,r16
 4012838:	9885c83a 	sub	r2,r19,r2
 401283c:	1544d83a 	srl	r2,r2,r21
 4012840:	0007883a 	mov	r3,zero
 4012844:	00000206 	br	4012850 <__umoddi3+0x29c>
 4012848:	2005883a 	mov	r2,r4
 401284c:	2807883a 	mov	r3,r5
 4012850:	dfc00c17 	ldw	ra,48(sp)
 4012854:	df000b17 	ldw	fp,44(sp)
 4012858:	ddc00a17 	ldw	r23,40(sp)
 401285c:	dd800917 	ldw	r22,36(sp)
 4012860:	dd400817 	ldw	r21,32(sp)
 4012864:	dd000717 	ldw	r20,28(sp)
 4012868:	dcc00617 	ldw	r19,24(sp)
 401286c:	dc800517 	ldw	r18,20(sp)
 4012870:	dc400417 	ldw	r17,16(sp)
 4012874:	dc000317 	ldw	r16,12(sp)
 4012878:	dec00d04 	addi	sp,sp,52
 401287c:	f800283a 	ret
 4012880:	00803fc4 	movi	r2,255
 4012884:	11c0b236 	bltu	r2,r7,4012b50 <__umoddi3+0x59c>
 4012888:	0007883a 	mov	r3,zero
 401288c:	0027883a 	mov	r19,zero
 4012890:	003f9b06 	br	4012700 <__reset+0xfb011700>
 4012894:	00804034 	movhi	r2,256
 4012898:	10bfffc4 	addi	r2,r2,-1
 401289c:	1180b236 	bltu	r2,r6,4012b68 <__umoddi3+0x5b4>
 40128a0:	00800404 	movi	r2,16
 40128a4:	1009883a 	mov	r4,r2
 40128a8:	003f5a06 	br	4012614 <__reset+0xfb011614>
 40128ac:	00803fc4 	movi	r2,255
 40128b0:	1400b036 	bltu	r2,r16,4012b74 <__umoddi3+0x5c0>
 40128b4:	0005883a 	mov	r2,zero
 40128b8:	0007883a 	mov	r3,zero
 40128bc:	003fad06 	br	4012774 <__reset+0xfb011774>
 40128c0:	34c4d83a 	srl	r2,r6,r19
 40128c4:	3c0e983a 	sll	r7,r7,r16
 40128c8:	8cf8d83a 	srl	fp,r17,r19
 40128cc:	8c22983a 	sll	r17,r17,r16
 40128d0:	38a8b03a 	or	r20,r7,r2
 40128d4:	a02ad43a 	srli	r21,r20,16
 40128d8:	94c4d83a 	srl	r2,r18,r19
 40128dc:	e009883a 	mov	r4,fp
 40128e0:	a80b883a 	mov	r5,r21
 40128e4:	342c983a 	sll	r22,r6,r16
 40128e8:	88a2b03a 	or	r17,r17,r2
 40128ec:	4009dd00 	call	4009dd0 <__umodsi3>
 40128f0:	e009883a 	mov	r4,fp
 40128f4:	a80b883a 	mov	r5,r21
 40128f8:	a5ffffcc 	andi	r23,r20,65535
 40128fc:	d8800215 	stw	r2,8(sp)
 4012900:	4009dc80 	call	4009dc8 <__udivsi3>
 4012904:	1009883a 	mov	r4,r2
 4012908:	b80b883a 	mov	r5,r23
 401290c:	1039883a 	mov	fp,r2
 4012910:	4009dd80 	call	4009dd8 <__mulsi3>
 4012914:	d8c00217 	ldw	r3,8(sp)
 4012918:	1009883a 	mov	r4,r2
 401291c:	8804d43a 	srli	r2,r17,16
 4012920:	1806943a 	slli	r3,r3,16
 4012924:	9424983a 	sll	r18,r18,r16
 4012928:	1886b03a 	or	r3,r3,r2
 401292c:	1900042e 	bgeu	r3,r4,4012940 <__umoddi3+0x38c>
 4012930:	1d07883a 	add	r3,r3,r20
 4012934:	e0bfffc4 	addi	r2,fp,-1
 4012938:	1d009b2e 	bgeu	r3,r20,4012ba8 <__umoddi3+0x5f4>
 401293c:	1039883a 	mov	fp,r2
 4012940:	1907c83a 	sub	r3,r3,r4
 4012944:	1809883a 	mov	r4,r3
 4012948:	a80b883a 	mov	r5,r21
 401294c:	d8c00215 	stw	r3,8(sp)
 4012950:	4009dd00 	call	4009dd0 <__umodsi3>
 4012954:	d8c00217 	ldw	r3,8(sp)
 4012958:	a80b883a 	mov	r5,r21
 401295c:	d8800015 	stw	r2,0(sp)
 4012960:	1809883a 	mov	r4,r3
 4012964:	4009dc80 	call	4009dc8 <__udivsi3>
 4012968:	1009883a 	mov	r4,r2
 401296c:	b80b883a 	mov	r5,r23
 4012970:	102b883a 	mov	r21,r2
 4012974:	4009dd80 	call	4009dd8 <__mulsi3>
 4012978:	d9c00017 	ldw	r7,0(sp)
 401297c:	8c7fffcc 	andi	r17,r17,65535
 4012980:	380e943a 	slli	r7,r7,16
 4012984:	3c4eb03a 	or	r7,r7,r17
 4012988:	3880042e 	bgeu	r7,r2,401299c <__umoddi3+0x3e8>
 401298c:	3d0f883a 	add	r7,r7,r20
 4012990:	a8ffffc4 	addi	r3,r21,-1
 4012994:	3d00802e 	bgeu	r7,r20,4012b98 <__umoddi3+0x5e4>
 4012998:	182b883a 	mov	r21,r3
 401299c:	e038943a 	slli	fp,fp,16
 40129a0:	b010d43a 	srli	r8,r22,16
 40129a4:	b1bfffcc 	andi	r6,r22,65535
 40129a8:	af2ab03a 	or	r21,r21,fp
 40129ac:	a82ed43a 	srli	r23,r21,16
 40129b0:	ad7fffcc 	andi	r21,r21,65535
 40129b4:	300b883a 	mov	r5,r6
 40129b8:	a809883a 	mov	r4,r21
 40129bc:	38a3c83a 	sub	r17,r7,r2
 40129c0:	d9800115 	stw	r6,4(sp)
 40129c4:	da000015 	stw	r8,0(sp)
 40129c8:	4009dd80 	call	4009dd8 <__mulsi3>
 40129cc:	da000017 	ldw	r8,0(sp)
 40129d0:	a809883a 	mov	r4,r21
 40129d4:	1039883a 	mov	fp,r2
 40129d8:	400b883a 	mov	r5,r8
 40129dc:	da000215 	stw	r8,8(sp)
 40129e0:	4009dd80 	call	4009dd8 <__mulsi3>
 40129e4:	d9800117 	ldw	r6,4(sp)
 40129e8:	b809883a 	mov	r4,r23
 40129ec:	d8800015 	stw	r2,0(sp)
 40129f0:	300b883a 	mov	r5,r6
 40129f4:	4009dd80 	call	4009dd8 <__mulsi3>
 40129f8:	d8c00217 	ldw	r3,8(sp)
 40129fc:	b809883a 	mov	r4,r23
 4012a00:	102b883a 	mov	r21,r2
 4012a04:	180b883a 	mov	r5,r3
 4012a08:	4009dd80 	call	4009dd8 <__mulsi3>
 4012a0c:	d9c00017 	ldw	r7,0(sp)
 4012a10:	1007883a 	mov	r3,r2
 4012a14:	e004d43a 	srli	r2,fp,16
 4012a18:	a9c9883a 	add	r4,r21,r7
 4012a1c:	2089883a 	add	r4,r4,r2
 4012a20:	2540022e 	bgeu	r4,r21,4012a2c <__umoddi3+0x478>
 4012a24:	00800074 	movhi	r2,1
 4012a28:	1887883a 	add	r3,r3,r2
 4012a2c:	2004d43a 	srli	r2,r4,16
 4012a30:	2008943a 	slli	r4,r4,16
 4012a34:	e73fffcc 	andi	fp,fp,65535
 4012a38:	1887883a 	add	r3,r3,r2
 4012a3c:	2709883a 	add	r4,r4,fp
 4012a40:	88c03d36 	bltu	r17,r3,4012b38 <__umoddi3+0x584>
 4012a44:	88c06126 	beq	r17,r3,4012bcc <__umoddi3+0x618>
 4012a48:	88c7c83a 	sub	r3,r17,r3
 4012a4c:	202d883a 	mov	r22,r4
 4012a50:	95adc83a 	sub	r22,r18,r22
 4012a54:	95a5803a 	cmpltu	r18,r18,r22
 4012a58:	1c87c83a 	sub	r3,r3,r18
 4012a5c:	1cc4983a 	sll	r2,r3,r19
 4012a60:	b42cd83a 	srl	r22,r22,r16
 4012a64:	1c06d83a 	srl	r3,r3,r16
 4012a68:	1584b03a 	or	r2,r2,r22
 4012a6c:	003f7806 	br	4012850 <__reset+0xfb011850>
 4012a70:	002b883a 	mov	r21,zero
 4012a74:	003ef506 	br	401264c <__reset+0xfb01164c>
 4012a78:	8560983a 	sll	r16,r16,r21
 4012a7c:	88e6d83a 	srl	r19,r17,r3
 4012a80:	90c6d83a 	srl	r3,r18,r3
 4012a84:	8028d43a 	srli	r20,r16,16
 4012a88:	8d62983a 	sll	r17,r17,r21
 4012a8c:	9809883a 	mov	r4,r19
 4012a90:	a00b883a 	mov	r5,r20
 4012a94:	88eeb03a 	or	r23,r17,r3
 4012a98:	4009dd00 	call	4009dd0 <__umodsi3>
 4012a9c:	9809883a 	mov	r4,r19
 4012aa0:	a00b883a 	mov	r5,r20
 4012aa4:	1023883a 	mov	r17,r2
 4012aa8:	85bfffcc 	andi	r22,r16,65535
 4012aac:	4009dc80 	call	4009dc8 <__udivsi3>
 4012ab0:	1009883a 	mov	r4,r2
 4012ab4:	b00b883a 	mov	r5,r22
 4012ab8:	4009dd80 	call	4009dd8 <__mulsi3>
 4012abc:	1007883a 	mov	r3,r2
 4012ac0:	8808943a 	slli	r4,r17,16
 4012ac4:	b804d43a 	srli	r2,r23,16
 4012ac8:	9566983a 	sll	r19,r18,r21
 4012acc:	2088b03a 	or	r4,r4,r2
 4012ad0:	20c0042e 	bgeu	r4,r3,4012ae4 <__umoddi3+0x530>
 4012ad4:	2409883a 	add	r4,r4,r16
 4012ad8:	24000236 	bltu	r4,r16,4012ae4 <__umoddi3+0x530>
 4012adc:	20c0012e 	bgeu	r4,r3,4012ae4 <__umoddi3+0x530>
 4012ae0:	2409883a 	add	r4,r4,r16
 4012ae4:	20e5c83a 	sub	r18,r4,r3
 4012ae8:	9009883a 	mov	r4,r18
 4012aec:	a00b883a 	mov	r5,r20
 4012af0:	4009dd00 	call	4009dd0 <__umodsi3>
 4012af4:	1023883a 	mov	r17,r2
 4012af8:	9009883a 	mov	r4,r18
 4012afc:	a00b883a 	mov	r5,r20
 4012b00:	8822943a 	slli	r17,r17,16
 4012b04:	4009dc80 	call	4009dc8 <__udivsi3>
 4012b08:	1009883a 	mov	r4,r2
 4012b0c:	b00b883a 	mov	r5,r22
 4012b10:	bdffffcc 	andi	r23,r23,65535
 4012b14:	4009dd80 	call	4009dd8 <__mulsi3>
 4012b18:	8de2b03a 	or	r17,r17,r23
 4012b1c:	8880042e 	bgeu	r17,r2,4012b30 <__umoddi3+0x57c>
 4012b20:	8c23883a 	add	r17,r17,r16
 4012b24:	8c000236 	bltu	r17,r16,4012b30 <__umoddi3+0x57c>
 4012b28:	8880012e 	bgeu	r17,r2,4012b30 <__umoddi3+0x57c>
 4012b2c:	8c23883a 	add	r17,r17,r16
 4012b30:	88a3c83a 	sub	r17,r17,r2
 4012b34:	003f1b06 	br	40127a4 <__reset+0xfb0117a4>
 4012b38:	25adc83a 	sub	r22,r4,r22
 4012b3c:	1d07c83a 	sub	r3,r3,r20
 4012b40:	2589803a 	cmpltu	r4,r4,r22
 4012b44:	1907c83a 	sub	r3,r3,r4
 4012b48:	88c7c83a 	sub	r3,r17,r3
 4012b4c:	003fc006 	br	4012a50 <__reset+0xfb011a50>
 4012b50:	00c00204 	movi	r3,8
 4012b54:	1827883a 	mov	r19,r3
 4012b58:	003ee906 	br	4012700 <__reset+0xfb011700>
 4012b5c:	00c00604 	movi	r3,24
 4012b60:	1827883a 	mov	r19,r3
 4012b64:	003ee606 	br	4012700 <__reset+0xfb011700>
 4012b68:	00800604 	movi	r2,24
 4012b6c:	1009883a 	mov	r4,r2
 4012b70:	003ea806 	br	4012614 <__reset+0xfb011614>
 4012b74:	00800204 	movi	r2,8
 4012b78:	1007883a 	mov	r3,r2
 4012b7c:	003efd06 	br	4012774 <__reset+0xfb011774>
 4012b80:	00800604 	movi	r2,24
 4012b84:	1007883a 	mov	r3,r2
 4012b88:	003efa06 	br	4012774 <__reset+0xfb011774>
 4012b8c:	00800204 	movi	r2,8
 4012b90:	1009883a 	mov	r4,r2
 4012b94:	003e9f06 	br	4012614 <__reset+0xfb011614>
 4012b98:	38bf7f2e 	bgeu	r7,r2,4012998 <__reset+0xfb011998>
 4012b9c:	ad7fff84 	addi	r21,r21,-2
 4012ba0:	3d0f883a 	add	r7,r7,r20
 4012ba4:	003f7d06 	br	401299c <__reset+0xfb01199c>
 4012ba8:	193f642e 	bgeu	r3,r4,401293c <__reset+0xfb01193c>
 4012bac:	e73fff84 	addi	fp,fp,-2
 4012bb0:	1d07883a 	add	r3,r3,r20
 4012bb4:	003f6206 	br	4012940 <__reset+0xfb011940>
 4012bb8:	1c07883a 	add	r3,r3,r16
 4012bbc:	003f0b06 	br	40127ec <__reset+0xfb0117ec>
 4012bc0:	9005883a 	mov	r2,r18
 4012bc4:	a007883a 	mov	r3,r20
 4012bc8:	003f2106 	br	4012850 <__reset+0xfb011850>
 4012bcc:	913fda36 	bltu	r18,r4,4012b38 <__reset+0xfb011b38>
 4012bd0:	202d883a 	mov	r22,r4
 4012bd4:	0007883a 	mov	r3,zero
 4012bd8:	003f9d06 	br	4012a50 <__reset+0xfb011a50>

04012bdc <__eqdf2>:
 4012bdc:	defff104 	addi	sp,sp,-60
 4012be0:	d9000c15 	stw	r4,48(sp)
 4012be4:	d9400d15 	stw	r5,52(sp)
 4012be8:	d9000c04 	addi	r4,sp,48
 4012bec:	d9400504 	addi	r5,sp,20
 4012bf0:	dfc00e15 	stw	ra,56(sp)
 4012bf4:	d9800a15 	stw	r6,40(sp)
 4012bf8:	d9c00b15 	stw	r7,44(sp)
 4012bfc:	400a1e00 	call	400a1e0 <__unpack_d>
 4012c00:	d9000a04 	addi	r4,sp,40
 4012c04:	d80b883a 	mov	r5,sp
 4012c08:	400a1e00 	call	400a1e0 <__unpack_d>
 4012c0c:	d8c00517 	ldw	r3,20(sp)
 4012c10:	00800044 	movi	r2,1
 4012c14:	10c0052e 	bgeu	r2,r3,4012c2c <__eqdf2+0x50>
 4012c18:	d8c00017 	ldw	r3,0(sp)
 4012c1c:	10c0032e 	bgeu	r2,r3,4012c2c <__eqdf2+0x50>
 4012c20:	d9000504 	addi	r4,sp,20
 4012c24:	d80b883a 	mov	r5,sp
 4012c28:	400a2e40 	call	400a2e4 <__fpcmp_parts_d>
 4012c2c:	dfc00e17 	ldw	ra,56(sp)
 4012c30:	dec00f04 	addi	sp,sp,60
 4012c34:	f800283a 	ret

04012c38 <__nedf2>:
 4012c38:	defff104 	addi	sp,sp,-60
 4012c3c:	d9000c15 	stw	r4,48(sp)
 4012c40:	d9400d15 	stw	r5,52(sp)
 4012c44:	d9000c04 	addi	r4,sp,48
 4012c48:	d9400504 	addi	r5,sp,20
 4012c4c:	dfc00e15 	stw	ra,56(sp)
 4012c50:	d9800a15 	stw	r6,40(sp)
 4012c54:	d9c00b15 	stw	r7,44(sp)
 4012c58:	400a1e00 	call	400a1e0 <__unpack_d>
 4012c5c:	d9000a04 	addi	r4,sp,40
 4012c60:	d80b883a 	mov	r5,sp
 4012c64:	400a1e00 	call	400a1e0 <__unpack_d>
 4012c68:	d8c00517 	ldw	r3,20(sp)
 4012c6c:	00800044 	movi	r2,1
 4012c70:	10c0052e 	bgeu	r2,r3,4012c88 <__nedf2+0x50>
 4012c74:	d8c00017 	ldw	r3,0(sp)
 4012c78:	10c0032e 	bgeu	r2,r3,4012c88 <__nedf2+0x50>
 4012c7c:	d9000504 	addi	r4,sp,20
 4012c80:	d80b883a 	mov	r5,sp
 4012c84:	400a2e40 	call	400a2e4 <__fpcmp_parts_d>
 4012c88:	dfc00e17 	ldw	ra,56(sp)
 4012c8c:	dec00f04 	addi	sp,sp,60
 4012c90:	f800283a 	ret

04012c94 <__gtdf2>:
 4012c94:	defff104 	addi	sp,sp,-60
 4012c98:	d9000c15 	stw	r4,48(sp)
 4012c9c:	d9400d15 	stw	r5,52(sp)
 4012ca0:	d9000c04 	addi	r4,sp,48
 4012ca4:	d9400504 	addi	r5,sp,20
 4012ca8:	dfc00e15 	stw	ra,56(sp)
 4012cac:	d9800a15 	stw	r6,40(sp)
 4012cb0:	d9c00b15 	stw	r7,44(sp)
 4012cb4:	400a1e00 	call	400a1e0 <__unpack_d>
 4012cb8:	d9000a04 	addi	r4,sp,40
 4012cbc:	d80b883a 	mov	r5,sp
 4012cc0:	400a1e00 	call	400a1e0 <__unpack_d>
 4012cc4:	d8c00517 	ldw	r3,20(sp)
 4012cc8:	00800044 	movi	r2,1
 4012ccc:	10c0082e 	bgeu	r2,r3,4012cf0 <__gtdf2+0x5c>
 4012cd0:	d8c00017 	ldw	r3,0(sp)
 4012cd4:	10c0062e 	bgeu	r2,r3,4012cf0 <__gtdf2+0x5c>
 4012cd8:	d9000504 	addi	r4,sp,20
 4012cdc:	d80b883a 	mov	r5,sp
 4012ce0:	400a2e40 	call	400a2e4 <__fpcmp_parts_d>
 4012ce4:	dfc00e17 	ldw	ra,56(sp)
 4012ce8:	dec00f04 	addi	sp,sp,60
 4012cec:	f800283a 	ret
 4012cf0:	00bfffc4 	movi	r2,-1
 4012cf4:	003ffb06 	br	4012ce4 <__reset+0xfb011ce4>

04012cf8 <__gedf2>:
 4012cf8:	defff104 	addi	sp,sp,-60
 4012cfc:	d9000c15 	stw	r4,48(sp)
 4012d00:	d9400d15 	stw	r5,52(sp)
 4012d04:	d9000c04 	addi	r4,sp,48
 4012d08:	d9400504 	addi	r5,sp,20
 4012d0c:	dfc00e15 	stw	ra,56(sp)
 4012d10:	d9800a15 	stw	r6,40(sp)
 4012d14:	d9c00b15 	stw	r7,44(sp)
 4012d18:	400a1e00 	call	400a1e0 <__unpack_d>
 4012d1c:	d9000a04 	addi	r4,sp,40
 4012d20:	d80b883a 	mov	r5,sp
 4012d24:	400a1e00 	call	400a1e0 <__unpack_d>
 4012d28:	d8c00517 	ldw	r3,20(sp)
 4012d2c:	00800044 	movi	r2,1
 4012d30:	10c0082e 	bgeu	r2,r3,4012d54 <__gedf2+0x5c>
 4012d34:	d8c00017 	ldw	r3,0(sp)
 4012d38:	10c0062e 	bgeu	r2,r3,4012d54 <__gedf2+0x5c>
 4012d3c:	d9000504 	addi	r4,sp,20
 4012d40:	d80b883a 	mov	r5,sp
 4012d44:	400a2e40 	call	400a2e4 <__fpcmp_parts_d>
 4012d48:	dfc00e17 	ldw	ra,56(sp)
 4012d4c:	dec00f04 	addi	sp,sp,60
 4012d50:	f800283a 	ret
 4012d54:	00bfffc4 	movi	r2,-1
 4012d58:	003ffb06 	br	4012d48 <__reset+0xfb011d48>

04012d5c <__floatunsidf>:
 4012d5c:	defff904 	addi	sp,sp,-28
 4012d60:	dc000515 	stw	r16,20(sp)
 4012d64:	dfc00615 	stw	ra,24(sp)
 4012d68:	d8000115 	stw	zero,4(sp)
 4012d6c:	2021883a 	mov	r16,r4
 4012d70:	20001726 	beq	r4,zero,4012dd0 <__floatunsidf+0x74>
 4012d74:	008000c4 	movi	r2,3
 4012d78:	d8800015 	stw	r2,0(sp)
 4012d7c:	00800f04 	movi	r2,60
 4012d80:	d8800215 	stw	r2,8(sp)
 4012d84:	4009f100 	call	4009f10 <__clzsi2>
 4012d88:	10c00744 	addi	r3,r2,29
 4012d8c:	18001816 	blt	r3,zero,4012df0 <__floatunsidf+0x94>
 4012d90:	18002d26 	beq	r3,zero,4012e48 <__floatunsidf+0xec>
 4012d94:	113fff44 	addi	r4,r2,-3
 4012d98:	20002e16 	blt	r4,zero,4012e54 <__floatunsidf+0xf8>
 4012d9c:	8108983a 	sll	r4,r16,r4
 4012da0:	0021883a 	mov	r16,zero
 4012da4:	014007c4 	movi	r5,31
 4012da8:	2885c83a 	sub	r2,r5,r2
 4012dac:	dc000315 	stw	r16,12(sp)
 4012db0:	d9000415 	stw	r4,16(sp)
 4012db4:	d8800215 	stw	r2,8(sp)
 4012db8:	d809883a 	mov	r4,sp
 4012dbc:	4009fbc0 	call	4009fbc <__pack_d>
 4012dc0:	dfc00617 	ldw	ra,24(sp)
 4012dc4:	dc000517 	ldw	r16,20(sp)
 4012dc8:	dec00704 	addi	sp,sp,28
 4012dcc:	f800283a 	ret
 4012dd0:	00800084 	movi	r2,2
 4012dd4:	d809883a 	mov	r4,sp
 4012dd8:	d8800015 	stw	r2,0(sp)
 4012ddc:	4009fbc0 	call	4009fbc <__pack_d>
 4012de0:	dfc00617 	ldw	ra,24(sp)
 4012de4:	dc000517 	ldw	r16,20(sp)
 4012de8:	dec00704 	addi	sp,sp,28
 4012dec:	f800283a 	ret
 4012df0:	00c7c83a 	sub	r3,zero,r3
 4012df4:	193ff804 	addi	r4,r3,-32
 4012df8:	20001c16 	blt	r4,zero,4012e6c <__floatunsidf+0x110>
 4012dfc:	000b883a 	mov	r5,zero
 4012e00:	2009d7fa 	srai	r4,r4,31
 4012e04:	80c6d83a 	srl	r3,r16,r3
 4012e08:	297fffc4 	addi	r5,r5,-1
 4012e0c:	2c20703a 	and	r16,r5,r16
 4012e10:	8020c03a 	cmpne	r16,r16,zero
 4012e14:	1906703a 	and	r3,r3,r4
 4012e18:	010007c4 	movi	r4,31
 4012e1c:	80c6b03a 	or	r3,r16,r3
 4012e20:	2085c83a 	sub	r2,r4,r2
 4012e24:	d809883a 	mov	r4,sp
 4012e28:	d8c00315 	stw	r3,12(sp)
 4012e2c:	d8000415 	stw	zero,16(sp)
 4012e30:	d8800215 	stw	r2,8(sp)
 4012e34:	4009fbc0 	call	4009fbc <__pack_d>
 4012e38:	dfc00617 	ldw	ra,24(sp)
 4012e3c:	dc000517 	ldw	r16,20(sp)
 4012e40:	dec00704 	addi	sp,sp,28
 4012e44:	f800283a 	ret
 4012e48:	dc000315 	stw	r16,12(sp)
 4012e4c:	d8000415 	stw	zero,16(sp)
 4012e50:	003fd906 	br	4012db8 <__reset+0xfb011db8>
 4012e54:	800ad07a 	srli	r5,r16,1
 4012e58:	010007c4 	movi	r4,31
 4012e5c:	20c9c83a 	sub	r4,r4,r3
 4012e60:	2908d83a 	srl	r4,r5,r4
 4012e64:	80e0983a 	sll	r16,r16,r3
 4012e68:	003fce06 	br	4012da4 <__reset+0xfb011da4>
 4012e6c:	01400044 	movi	r5,1
 4012e70:	28ca983a 	sll	r5,r5,r3
 4012e74:	003fe206 	br	4012e00 <__reset+0xfb011e00>

04012e78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4012e78:	defffe04 	addi	sp,sp,-8
 4012e7c:	dfc00115 	stw	ra,4(sp)
 4012e80:	df000015 	stw	fp,0(sp)
 4012e84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012e88:	00810234 	movhi	r2,1032
 4012e8c:	10a37a04 	addi	r2,r2,-29208
 4012e90:	10800017 	ldw	r2,0(r2)
 4012e94:	10000526 	beq	r2,zero,4012eac <alt_get_errno+0x34>
 4012e98:	00810234 	movhi	r2,1032
 4012e9c:	10a37a04 	addi	r2,r2,-29208
 4012ea0:	10800017 	ldw	r2,0(r2)
 4012ea4:	103ee83a 	callr	r2
 4012ea8:	00000206 	br	4012eb4 <alt_get_errno+0x3c>
 4012eac:	00810234 	movhi	r2,1032
 4012eb0:	10a38504 	addi	r2,r2,-29164
}
 4012eb4:	e037883a 	mov	sp,fp
 4012eb8:	dfc00117 	ldw	ra,4(sp)
 4012ebc:	df000017 	ldw	fp,0(sp)
 4012ec0:	dec00204 	addi	sp,sp,8
 4012ec4:	f800283a 	ret

04012ec8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4012ec8:	defffb04 	addi	sp,sp,-20
 4012ecc:	dfc00415 	stw	ra,16(sp)
 4012ed0:	df000315 	stw	fp,12(sp)
 4012ed4:	df000304 	addi	fp,sp,12
 4012ed8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4012edc:	e0bfff17 	ldw	r2,-4(fp)
 4012ee0:	10000716 	blt	r2,zero,4012f00 <close+0x38>
 4012ee4:	e13fff17 	ldw	r4,-4(fp)
 4012ee8:	01400304 	movi	r5,12
 4012eec:	4009dd80 	call	4009dd8 <__mulsi3>
 4012ef0:	00c101f4 	movhi	r3,1031
 4012ef4:	18dec304 	addi	r3,r3,31500
 4012ef8:	10c5883a 	add	r2,r2,r3
 4012efc:	00000106 	br	4012f04 <close+0x3c>
 4012f00:	0005883a 	mov	r2,zero
 4012f04:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4012f08:	e0bffd17 	ldw	r2,-12(fp)
 4012f0c:	10001826 	beq	r2,zero,4012f70 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4012f10:	e0bffd17 	ldw	r2,-12(fp)
 4012f14:	10800017 	ldw	r2,0(r2)
 4012f18:	10800417 	ldw	r2,16(r2)
 4012f1c:	10000626 	beq	r2,zero,4012f38 <close+0x70>
 4012f20:	e0bffd17 	ldw	r2,-12(fp)
 4012f24:	10800017 	ldw	r2,0(r2)
 4012f28:	10800417 	ldw	r2,16(r2)
 4012f2c:	e13ffd17 	ldw	r4,-12(fp)
 4012f30:	103ee83a 	callr	r2
 4012f34:	00000106 	br	4012f3c <close+0x74>
 4012f38:	0005883a 	mov	r2,zero
 4012f3c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4012f40:	e13fff17 	ldw	r4,-4(fp)
 4012f44:	40137e00 	call	40137e0 <alt_release_fd>
    if (rval < 0)
 4012f48:	e0bffe17 	ldw	r2,-8(fp)
 4012f4c:	1000060e 	bge	r2,zero,4012f68 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4012f50:	4012e780 	call	4012e78 <alt_get_errno>
 4012f54:	e0fffe17 	ldw	r3,-8(fp)
 4012f58:	00c7c83a 	sub	r3,zero,r3
 4012f5c:	10c00015 	stw	r3,0(r2)
      return -1;
 4012f60:	00bfffc4 	movi	r2,-1
 4012f64:	00000606 	br	4012f80 <close+0xb8>
    }
    return 0;
 4012f68:	0005883a 	mov	r2,zero
 4012f6c:	00000406 	br	4012f80 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4012f70:	4012e780 	call	4012e78 <alt_get_errno>
 4012f74:	00c01444 	movi	r3,81
 4012f78:	10c00015 	stw	r3,0(r2)
    return -1;
 4012f7c:	00bfffc4 	movi	r2,-1
  }
}
 4012f80:	e037883a 	mov	sp,fp
 4012f84:	dfc00117 	ldw	ra,4(sp)
 4012f88:	df000017 	ldw	fp,0(sp)
 4012f8c:	dec00204 	addi	sp,sp,8
 4012f90:	f800283a 	ret

04012f94 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4012f94:	defffe04 	addi	sp,sp,-8
 4012f98:	df000115 	stw	fp,4(sp)
 4012f9c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4012fa0:	e03fff15 	stw	zero,-4(fp)
 4012fa4:	00000506 	br	4012fbc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4012fa8:	e0bfff17 	ldw	r2,-4(fp)
 4012fac:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4012fb0:	e0bfff17 	ldw	r2,-4(fp)
 4012fb4:	10800804 	addi	r2,r2,32
 4012fb8:	e0bfff15 	stw	r2,-4(fp)
 4012fbc:	e0bfff17 	ldw	r2,-4(fp)
 4012fc0:	10820030 	cmpltui	r2,r2,2048
 4012fc4:	103ff81e 	bne	r2,zero,4012fa8 <__reset+0xfb011fa8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4012fc8:	e037883a 	mov	sp,fp
 4012fcc:	df000017 	ldw	fp,0(sp)
 4012fd0:	dec00104 	addi	sp,sp,4
 4012fd4:	f800283a 	ret

04012fd8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4012fd8:	defffc04 	addi	sp,sp,-16
 4012fdc:	df000315 	stw	fp,12(sp)
 4012fe0:	df000304 	addi	fp,sp,12
 4012fe4:	e13ffd15 	stw	r4,-12(fp)
 4012fe8:	e17ffe15 	stw	r5,-8(fp)
 4012fec:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4012ff0:	e0bfff17 	ldw	r2,-4(fp)
}
 4012ff4:	e037883a 	mov	sp,fp
 4012ff8:	df000017 	ldw	fp,0(sp)
 4012ffc:	dec00104 	addi	sp,sp,4
 4013000:	f800283a 	ret

04013004 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4013004:	defffe04 	addi	sp,sp,-8
 4013008:	dfc00115 	stw	ra,4(sp)
 401300c:	df000015 	stw	fp,0(sp)
 4013010:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4013014:	00810234 	movhi	r2,1032
 4013018:	10a37a04 	addi	r2,r2,-29208
 401301c:	10800017 	ldw	r2,0(r2)
 4013020:	10000526 	beq	r2,zero,4013038 <alt_get_errno+0x34>
 4013024:	00810234 	movhi	r2,1032
 4013028:	10a37a04 	addi	r2,r2,-29208
 401302c:	10800017 	ldw	r2,0(r2)
 4013030:	103ee83a 	callr	r2
 4013034:	00000206 	br	4013040 <alt_get_errno+0x3c>
 4013038:	00810234 	movhi	r2,1032
 401303c:	10a38504 	addi	r2,r2,-29164
}
 4013040:	e037883a 	mov	sp,fp
 4013044:	dfc00117 	ldw	ra,4(sp)
 4013048:	df000017 	ldw	fp,0(sp)
 401304c:	dec00204 	addi	sp,sp,8
 4013050:	f800283a 	ret

04013054 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4013054:	defffb04 	addi	sp,sp,-20
 4013058:	dfc00415 	stw	ra,16(sp)
 401305c:	df000315 	stw	fp,12(sp)
 4013060:	df000304 	addi	fp,sp,12
 4013064:	e13ffe15 	stw	r4,-8(fp)
 4013068:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401306c:	e0bffe17 	ldw	r2,-8(fp)
 4013070:	10000716 	blt	r2,zero,4013090 <fstat+0x3c>
 4013074:	e13ffe17 	ldw	r4,-8(fp)
 4013078:	01400304 	movi	r5,12
 401307c:	4009dd80 	call	4009dd8 <__mulsi3>
 4013080:	00c101f4 	movhi	r3,1031
 4013084:	18dec304 	addi	r3,r3,31500
 4013088:	10c5883a 	add	r2,r2,r3
 401308c:	00000106 	br	4013094 <fstat+0x40>
 4013090:	0005883a 	mov	r2,zero
 4013094:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4013098:	e0bffd17 	ldw	r2,-12(fp)
 401309c:	10001026 	beq	r2,zero,40130e0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40130a0:	e0bffd17 	ldw	r2,-12(fp)
 40130a4:	10800017 	ldw	r2,0(r2)
 40130a8:	10800817 	ldw	r2,32(r2)
 40130ac:	10000726 	beq	r2,zero,40130cc <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 40130b0:	e0bffd17 	ldw	r2,-12(fp)
 40130b4:	10800017 	ldw	r2,0(r2)
 40130b8:	10800817 	ldw	r2,32(r2)
 40130bc:	e13ffd17 	ldw	r4,-12(fp)
 40130c0:	e17fff17 	ldw	r5,-4(fp)
 40130c4:	103ee83a 	callr	r2
 40130c8:	00000906 	br	40130f0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 40130cc:	e0bfff17 	ldw	r2,-4(fp)
 40130d0:	00c80004 	movi	r3,8192
 40130d4:	10c00115 	stw	r3,4(r2)
      return 0;
 40130d8:	0005883a 	mov	r2,zero
 40130dc:	00000406 	br	40130f0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40130e0:	40130040 	call	4013004 <alt_get_errno>
 40130e4:	00c01444 	movi	r3,81
 40130e8:	10c00015 	stw	r3,0(r2)
    return -1;
 40130ec:	00bfffc4 	movi	r2,-1
  }
}
 40130f0:	e037883a 	mov	sp,fp
 40130f4:	dfc00117 	ldw	ra,4(sp)
 40130f8:	df000017 	ldw	fp,0(sp)
 40130fc:	dec00204 	addi	sp,sp,8
 4013100:	f800283a 	ret

04013104 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4013104:	defff904 	addi	sp,sp,-28
 4013108:	dfc00615 	stw	ra,24(sp)
 401310c:	df000515 	stw	fp,20(sp)
 4013110:	df000504 	addi	fp,sp,20
 4013114:	e13ffc15 	stw	r4,-16(fp)
 4013118:	e17ffd15 	stw	r5,-12(fp)
 401311c:	e1bffe15 	stw	r6,-8(fp)
 4013120:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4013124:	e0800217 	ldw	r2,8(fp)
 4013128:	d8800015 	stw	r2,0(sp)
 401312c:	e13ffc17 	ldw	r4,-16(fp)
 4013130:	e17ffd17 	ldw	r5,-12(fp)
 4013134:	e1bffe17 	ldw	r6,-8(fp)
 4013138:	e1ffff17 	ldw	r7,-4(fp)
 401313c:	40132dc0 	call	40132dc <alt_iic_isr_register>
}  
 4013140:	e037883a 	mov	sp,fp
 4013144:	dfc00117 	ldw	ra,4(sp)
 4013148:	df000017 	ldw	fp,0(sp)
 401314c:	dec00204 	addi	sp,sp,8
 4013150:	f800283a 	ret

04013154 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4013154:	defff904 	addi	sp,sp,-28
 4013158:	df000615 	stw	fp,24(sp)
 401315c:	df000604 	addi	fp,sp,24
 4013160:	e13ffe15 	stw	r4,-8(fp)
 4013164:	e17fff15 	stw	r5,-4(fp)
 4013168:	e0bfff17 	ldw	r2,-4(fp)
 401316c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013170:	0005303a 	rdctl	r2,status
 4013174:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013178:	e0fffb17 	ldw	r3,-20(fp)
 401317c:	00bfff84 	movi	r2,-2
 4013180:	1884703a 	and	r2,r3,r2
 4013184:	1001703a 	wrctl	status,r2
  
  return context;
 4013188:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401318c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4013190:	e0bffa17 	ldw	r2,-24(fp)
 4013194:	00c00044 	movi	r3,1
 4013198:	1884983a 	sll	r2,r3,r2
 401319c:	1007883a 	mov	r3,r2
 40131a0:	00810234 	movhi	r2,1032
 40131a4:	10a38904 	addi	r2,r2,-29148
 40131a8:	10800017 	ldw	r2,0(r2)
 40131ac:	1886b03a 	or	r3,r3,r2
 40131b0:	00810234 	movhi	r2,1032
 40131b4:	10a38904 	addi	r2,r2,-29148
 40131b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40131bc:	00810234 	movhi	r2,1032
 40131c0:	10a38904 	addi	r2,r2,-29148
 40131c4:	10800017 	ldw	r2,0(r2)
 40131c8:	100170fa 	wrctl	ienable,r2
 40131cc:	e0bffc17 	ldw	r2,-16(fp)
 40131d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40131d4:	e0bffd17 	ldw	r2,-12(fp)
 40131d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40131dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 40131e0:	e037883a 	mov	sp,fp
 40131e4:	df000017 	ldw	fp,0(sp)
 40131e8:	dec00104 	addi	sp,sp,4
 40131ec:	f800283a 	ret

040131f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40131f0:	defff904 	addi	sp,sp,-28
 40131f4:	df000615 	stw	fp,24(sp)
 40131f8:	df000604 	addi	fp,sp,24
 40131fc:	e13ffe15 	stw	r4,-8(fp)
 4013200:	e17fff15 	stw	r5,-4(fp)
 4013204:	e0bfff17 	ldw	r2,-4(fp)
 4013208:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401320c:	0005303a 	rdctl	r2,status
 4013210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013214:	e0fffb17 	ldw	r3,-20(fp)
 4013218:	00bfff84 	movi	r2,-2
 401321c:	1884703a 	and	r2,r3,r2
 4013220:	1001703a 	wrctl	status,r2
  
  return context;
 4013224:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4013228:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401322c:	e0bffa17 	ldw	r2,-24(fp)
 4013230:	00c00044 	movi	r3,1
 4013234:	1884983a 	sll	r2,r3,r2
 4013238:	0084303a 	nor	r2,zero,r2
 401323c:	1007883a 	mov	r3,r2
 4013240:	00810234 	movhi	r2,1032
 4013244:	10a38904 	addi	r2,r2,-29148
 4013248:	10800017 	ldw	r2,0(r2)
 401324c:	1886703a 	and	r3,r3,r2
 4013250:	00810234 	movhi	r2,1032
 4013254:	10a38904 	addi	r2,r2,-29148
 4013258:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401325c:	00810234 	movhi	r2,1032
 4013260:	10a38904 	addi	r2,r2,-29148
 4013264:	10800017 	ldw	r2,0(r2)
 4013268:	100170fa 	wrctl	ienable,r2
 401326c:	e0bffc17 	ldw	r2,-16(fp)
 4013270:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013274:	e0bffd17 	ldw	r2,-12(fp)
 4013278:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401327c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4013280:	e037883a 	mov	sp,fp
 4013284:	df000017 	ldw	fp,0(sp)
 4013288:	dec00104 	addi	sp,sp,4
 401328c:	f800283a 	ret

04013290 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4013290:	defffc04 	addi	sp,sp,-16
 4013294:	df000315 	stw	fp,12(sp)
 4013298:	df000304 	addi	fp,sp,12
 401329c:	e13ffe15 	stw	r4,-8(fp)
 40132a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40132a4:	000530fa 	rdctl	r2,ienable
 40132a8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40132ac:	e0bfff17 	ldw	r2,-4(fp)
 40132b0:	00c00044 	movi	r3,1
 40132b4:	1884983a 	sll	r2,r3,r2
 40132b8:	1007883a 	mov	r3,r2
 40132bc:	e0bffd17 	ldw	r2,-12(fp)
 40132c0:	1884703a 	and	r2,r3,r2
 40132c4:	1004c03a 	cmpne	r2,r2,zero
 40132c8:	10803fcc 	andi	r2,r2,255
}
 40132cc:	e037883a 	mov	sp,fp
 40132d0:	df000017 	ldw	fp,0(sp)
 40132d4:	dec00104 	addi	sp,sp,4
 40132d8:	f800283a 	ret

040132dc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40132dc:	defff504 	addi	sp,sp,-44
 40132e0:	dfc00a15 	stw	ra,40(sp)
 40132e4:	df000915 	stw	fp,36(sp)
 40132e8:	df000904 	addi	fp,sp,36
 40132ec:	e13ffc15 	stw	r4,-16(fp)
 40132f0:	e17ffd15 	stw	r5,-12(fp)
 40132f4:	e1bffe15 	stw	r6,-8(fp)
 40132f8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40132fc:	00bffa84 	movi	r2,-22
 4013300:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4013304:	e0bffd17 	ldw	r2,-12(fp)
 4013308:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401330c:	e0bff817 	ldw	r2,-32(fp)
 4013310:	10800808 	cmpgei	r2,r2,32
 4013314:	1000271e 	bne	r2,zero,40133b4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013318:	0005303a 	rdctl	r2,status
 401331c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013320:	e0fffa17 	ldw	r3,-24(fp)
 4013324:	00bfff84 	movi	r2,-2
 4013328:	1884703a 	and	r2,r3,r2
 401332c:	1001703a 	wrctl	status,r2
  
  return context;
 4013330:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4013334:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 4013338:	00c10234 	movhi	r3,1032
 401333c:	18e39904 	addi	r3,r3,-29084
 4013340:	e0bff817 	ldw	r2,-32(fp)
 4013344:	100490fa 	slli	r2,r2,3
 4013348:	1885883a 	add	r2,r3,r2
 401334c:	e0fffe17 	ldw	r3,-8(fp)
 4013350:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4013354:	00c10234 	movhi	r3,1032
 4013358:	18e39904 	addi	r3,r3,-29084
 401335c:	e0bff817 	ldw	r2,-32(fp)
 4013360:	100490fa 	slli	r2,r2,3
 4013364:	1885883a 	add	r2,r3,r2
 4013368:	10800104 	addi	r2,r2,4
 401336c:	e0ffff17 	ldw	r3,-4(fp)
 4013370:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4013374:	e0bffe17 	ldw	r2,-8(fp)
 4013378:	10000526 	beq	r2,zero,4013390 <alt_iic_isr_register+0xb4>
 401337c:	e0bff817 	ldw	r2,-32(fp)
 4013380:	e13ffc17 	ldw	r4,-16(fp)
 4013384:	100b883a 	mov	r5,r2
 4013388:	40131540 	call	4013154 <alt_ic_irq_enable>
 401338c:	00000406 	br	40133a0 <alt_iic_isr_register+0xc4>
 4013390:	e0bff817 	ldw	r2,-32(fp)
 4013394:	e13ffc17 	ldw	r4,-16(fp)
 4013398:	100b883a 	mov	r5,r2
 401339c:	40131f00 	call	40131f0 <alt_ic_irq_disable>
 40133a0:	e0bff715 	stw	r2,-36(fp)
 40133a4:	e0bff917 	ldw	r2,-28(fp)
 40133a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40133ac:	e0bffb17 	ldw	r2,-20(fp)
 40133b0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40133b4:	e0bff717 	ldw	r2,-36(fp)
}
 40133b8:	e037883a 	mov	sp,fp
 40133bc:	dfc00117 	ldw	ra,4(sp)
 40133c0:	df000017 	ldw	fp,0(sp)
 40133c4:	dec00204 	addi	sp,sp,8
 40133c8:	f800283a 	ret

040133cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40133cc:	defffe04 	addi	sp,sp,-8
 40133d0:	dfc00115 	stw	ra,4(sp)
 40133d4:	df000015 	stw	fp,0(sp)
 40133d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40133dc:	00810234 	movhi	r2,1032
 40133e0:	10a37a04 	addi	r2,r2,-29208
 40133e4:	10800017 	ldw	r2,0(r2)
 40133e8:	10000526 	beq	r2,zero,4013400 <alt_get_errno+0x34>
 40133ec:	00810234 	movhi	r2,1032
 40133f0:	10a37a04 	addi	r2,r2,-29208
 40133f4:	10800017 	ldw	r2,0(r2)
 40133f8:	103ee83a 	callr	r2
 40133fc:	00000206 	br	4013408 <alt_get_errno+0x3c>
 4013400:	00810234 	movhi	r2,1032
 4013404:	10a38504 	addi	r2,r2,-29164
}
 4013408:	e037883a 	mov	sp,fp
 401340c:	dfc00117 	ldw	ra,4(sp)
 4013410:	df000017 	ldw	fp,0(sp)
 4013414:	dec00204 	addi	sp,sp,8
 4013418:	f800283a 	ret

0401341c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401341c:	deffed04 	addi	sp,sp,-76
 4013420:	dfc01215 	stw	ra,72(sp)
 4013424:	df001115 	stw	fp,68(sp)
 4013428:	df001104 	addi	fp,sp,68
 401342c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4013430:	e0bfff17 	ldw	r2,-4(fp)
 4013434:	10000716 	blt	r2,zero,4013454 <isatty+0x38>
 4013438:	e13fff17 	ldw	r4,-4(fp)
 401343c:	01400304 	movi	r5,12
 4013440:	4009dd80 	call	4009dd8 <__mulsi3>
 4013444:	00c101f4 	movhi	r3,1031
 4013448:	18dec304 	addi	r3,r3,31500
 401344c:	10c5883a 	add	r2,r2,r3
 4013450:	00000106 	br	4013458 <isatty+0x3c>
 4013454:	0005883a 	mov	r2,zero
 4013458:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401345c:	e0bfef17 	ldw	r2,-68(fp)
 4013460:	10000e26 	beq	r2,zero,401349c <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4013464:	e0bfef17 	ldw	r2,-68(fp)
 4013468:	10800017 	ldw	r2,0(r2)
 401346c:	10800817 	ldw	r2,32(r2)
 4013470:	1000021e 	bne	r2,zero,401347c <isatty+0x60>
    {
      return 1;
 4013474:	00800044 	movi	r2,1
 4013478:	00000c06 	br	40134ac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401347c:	e0bff004 	addi	r2,fp,-64
 4013480:	e13fff17 	ldw	r4,-4(fp)
 4013484:	100b883a 	mov	r5,r2
 4013488:	40130540 	call	4013054 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401348c:	e0bff117 	ldw	r2,-60(fp)
 4013490:	10880020 	cmpeqi	r2,r2,8192
 4013494:	10803fcc 	andi	r2,r2,255
 4013498:	00000406 	br	40134ac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401349c:	40133cc0 	call	40133cc <alt_get_errno>
 40134a0:	00c01444 	movi	r3,81
 40134a4:	10c00015 	stw	r3,0(r2)
    return 0;
 40134a8:	0005883a 	mov	r2,zero
  }
}
 40134ac:	e037883a 	mov	sp,fp
 40134b0:	dfc00117 	ldw	ra,4(sp)
 40134b4:	df000017 	ldw	fp,0(sp)
 40134b8:	dec00204 	addi	sp,sp,8
 40134bc:	f800283a 	ret

040134c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40134c0:	defffe04 	addi	sp,sp,-8
 40134c4:	dfc00115 	stw	ra,4(sp)
 40134c8:	df000015 	stw	fp,0(sp)
 40134cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40134d0:	00810234 	movhi	r2,1032
 40134d4:	10a37a04 	addi	r2,r2,-29208
 40134d8:	10800017 	ldw	r2,0(r2)
 40134dc:	10000526 	beq	r2,zero,40134f4 <alt_get_errno+0x34>
 40134e0:	00810234 	movhi	r2,1032
 40134e4:	10a37a04 	addi	r2,r2,-29208
 40134e8:	10800017 	ldw	r2,0(r2)
 40134ec:	103ee83a 	callr	r2
 40134f0:	00000206 	br	40134fc <alt_get_errno+0x3c>
 40134f4:	00810234 	movhi	r2,1032
 40134f8:	10a38504 	addi	r2,r2,-29164
}
 40134fc:	e037883a 	mov	sp,fp
 4013500:	dfc00117 	ldw	ra,4(sp)
 4013504:	df000017 	ldw	fp,0(sp)
 4013508:	dec00204 	addi	sp,sp,8
 401350c:	f800283a 	ret

04013510 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4013510:	defff904 	addi	sp,sp,-28
 4013514:	dfc00615 	stw	ra,24(sp)
 4013518:	df000515 	stw	fp,20(sp)
 401351c:	df000504 	addi	fp,sp,20
 4013520:	e13ffd15 	stw	r4,-12(fp)
 4013524:	e17ffe15 	stw	r5,-8(fp)
 4013528:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401352c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4013530:	e0bffd17 	ldw	r2,-12(fp)
 4013534:	10000716 	blt	r2,zero,4013554 <lseek+0x44>
 4013538:	e13ffd17 	ldw	r4,-12(fp)
 401353c:	01400304 	movi	r5,12
 4013540:	4009dd80 	call	4009dd8 <__mulsi3>
 4013544:	00c101f4 	movhi	r3,1031
 4013548:	18dec304 	addi	r3,r3,31500
 401354c:	10c5883a 	add	r2,r2,r3
 4013550:	00000106 	br	4013558 <lseek+0x48>
 4013554:	0005883a 	mov	r2,zero
 4013558:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401355c:	e0bffc17 	ldw	r2,-16(fp)
 4013560:	10001026 	beq	r2,zero,40135a4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4013564:	e0bffc17 	ldw	r2,-16(fp)
 4013568:	10800017 	ldw	r2,0(r2)
 401356c:	10800717 	ldw	r2,28(r2)
 4013570:	10000926 	beq	r2,zero,4013598 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4013574:	e0bffc17 	ldw	r2,-16(fp)
 4013578:	10800017 	ldw	r2,0(r2)
 401357c:	10800717 	ldw	r2,28(r2)
 4013580:	e13ffc17 	ldw	r4,-16(fp)
 4013584:	e17ffe17 	ldw	r5,-8(fp)
 4013588:	e1bfff17 	ldw	r6,-4(fp)
 401358c:	103ee83a 	callr	r2
 4013590:	e0bffb15 	stw	r2,-20(fp)
 4013594:	00000506 	br	40135ac <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4013598:	00bfde84 	movi	r2,-134
 401359c:	e0bffb15 	stw	r2,-20(fp)
 40135a0:	00000206 	br	40135ac <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 40135a4:	00bfebc4 	movi	r2,-81
 40135a8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 40135ac:	e0bffb17 	ldw	r2,-20(fp)
 40135b0:	1000060e 	bge	r2,zero,40135cc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 40135b4:	40134c00 	call	40134c0 <alt_get_errno>
 40135b8:	e0fffb17 	ldw	r3,-20(fp)
 40135bc:	00c7c83a 	sub	r3,zero,r3
 40135c0:	10c00015 	stw	r3,0(r2)
    rc = -1;
 40135c4:	00bfffc4 	movi	r2,-1
 40135c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 40135cc:	e0bffb17 	ldw	r2,-20(fp)
}
 40135d0:	e037883a 	mov	sp,fp
 40135d4:	dfc00117 	ldw	ra,4(sp)
 40135d8:	df000017 	ldw	fp,0(sp)
 40135dc:	dec00204 	addi	sp,sp,8
 40135e0:	f800283a 	ret

040135e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40135e4:	defffd04 	addi	sp,sp,-12
 40135e8:	dfc00215 	stw	ra,8(sp)
 40135ec:	df000115 	stw	fp,4(sp)
 40135f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40135f4:	0009883a 	mov	r4,zero
 40135f8:	4013c540 	call	4013c54 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40135fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4013600:	4013c880 	call	4013c88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4013604:	010101f4 	movhi	r4,1031
 4013608:	2115b504 	addi	r4,r4,22228
 401360c:	014101f4 	movhi	r5,1031
 4013610:	2955b504 	addi	r5,r5,22228
 4013614:	018101f4 	movhi	r6,1031
 4013618:	3195b504 	addi	r6,r6,22228
 401361c:	4015dd40 	call	4015dd4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4013620:	4015b840 	call	4015b84 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4013624:	01010074 	movhi	r4,1025
 4013628:	2116f804 	addi	r4,r4,23520
 401362c:	40165840 	call	4016584 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4013630:	d1201d17 	ldw	r4,-32652(gp)
 4013634:	d0e01e17 	ldw	r3,-32648(gp)
 4013638:	d0a01f17 	ldw	r2,-32644(gp)
 401363c:	180b883a 	mov	r5,r3
 4013640:	100d883a 	mov	r6,r2
 4013644:	40060680 	call	4006068 <main>
 4013648:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 401364c:	01000044 	movi	r4,1
 4013650:	4012ec80 	call	4012ec8 <close>
  exit (result);
 4013654:	e13fff17 	ldw	r4,-4(fp)
 4013658:	40165980 	call	4016598 <exit>

0401365c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 401365c:	defffe04 	addi	sp,sp,-8
 4013660:	df000115 	stw	fp,4(sp)
 4013664:	df000104 	addi	fp,sp,4
 4013668:	e13fff15 	stw	r4,-4(fp)
}
 401366c:	e037883a 	mov	sp,fp
 4013670:	df000017 	ldw	fp,0(sp)
 4013674:	dec00104 	addi	sp,sp,4
 4013678:	f800283a 	ret

0401367c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 401367c:	defffe04 	addi	sp,sp,-8
 4013680:	df000115 	stw	fp,4(sp)
 4013684:	df000104 	addi	fp,sp,4
 4013688:	e13fff15 	stw	r4,-4(fp)
}
 401368c:	e037883a 	mov	sp,fp
 4013690:	df000017 	ldw	fp,0(sp)
 4013694:	dec00104 	addi	sp,sp,4
 4013698:	f800283a 	ret

0401369c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401369c:	defffe04 	addi	sp,sp,-8
 40136a0:	dfc00115 	stw	ra,4(sp)
 40136a4:	df000015 	stw	fp,0(sp)
 40136a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40136ac:	00810234 	movhi	r2,1032
 40136b0:	10a37a04 	addi	r2,r2,-29208
 40136b4:	10800017 	ldw	r2,0(r2)
 40136b8:	10000526 	beq	r2,zero,40136d0 <alt_get_errno+0x34>
 40136bc:	00810234 	movhi	r2,1032
 40136c0:	10a37a04 	addi	r2,r2,-29208
 40136c4:	10800017 	ldw	r2,0(r2)
 40136c8:	103ee83a 	callr	r2
 40136cc:	00000206 	br	40136d8 <alt_get_errno+0x3c>
 40136d0:	00810234 	movhi	r2,1032
 40136d4:	10a38504 	addi	r2,r2,-29164
}
 40136d8:	e037883a 	mov	sp,fp
 40136dc:	dfc00117 	ldw	ra,4(sp)
 40136e0:	df000017 	ldw	fp,0(sp)
 40136e4:	dec00204 	addi	sp,sp,8
 40136e8:	f800283a 	ret

040136ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40136ec:	defff904 	addi	sp,sp,-28
 40136f0:	dfc00615 	stw	ra,24(sp)
 40136f4:	df000515 	stw	fp,20(sp)
 40136f8:	df000504 	addi	fp,sp,20
 40136fc:	e13ffd15 	stw	r4,-12(fp)
 4013700:	e17ffe15 	stw	r5,-8(fp)
 4013704:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4013708:	e0bffd17 	ldw	r2,-12(fp)
 401370c:	10000716 	blt	r2,zero,401372c <read+0x40>
 4013710:	e13ffd17 	ldw	r4,-12(fp)
 4013714:	01400304 	movi	r5,12
 4013718:	4009dd80 	call	4009dd8 <__mulsi3>
 401371c:	00c101f4 	movhi	r3,1031
 4013720:	18dec304 	addi	r3,r3,31500
 4013724:	10c5883a 	add	r2,r2,r3
 4013728:	00000106 	br	4013730 <read+0x44>
 401372c:	0005883a 	mov	r2,zero
 4013730:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4013734:	e0bffb17 	ldw	r2,-20(fp)
 4013738:	10002026 	beq	r2,zero,40137bc <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401373c:	e0bffb17 	ldw	r2,-20(fp)
 4013740:	10800217 	ldw	r2,8(r2)
 4013744:	108000cc 	andi	r2,r2,3
 4013748:	10800060 	cmpeqi	r2,r2,1
 401374c:	1000171e 	bne	r2,zero,40137ac <read+0xc0>
        (fd->dev->read))
 4013750:	e0bffb17 	ldw	r2,-20(fp)
 4013754:	10800017 	ldw	r2,0(r2)
 4013758:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401375c:	10001326 	beq	r2,zero,40137ac <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4013760:	e0bffb17 	ldw	r2,-20(fp)
 4013764:	10800017 	ldw	r2,0(r2)
 4013768:	10c00517 	ldw	r3,20(r2)
 401376c:	e0bfff17 	ldw	r2,-4(fp)
 4013770:	e13ffb17 	ldw	r4,-20(fp)
 4013774:	e17ffe17 	ldw	r5,-8(fp)
 4013778:	100d883a 	mov	r6,r2
 401377c:	183ee83a 	callr	r3
 4013780:	e0bffc15 	stw	r2,-16(fp)
 4013784:	e0bffc17 	ldw	r2,-16(fp)
 4013788:	1000060e 	bge	r2,zero,40137a4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 401378c:	401369c0 	call	401369c <alt_get_errno>
 4013790:	e0fffc17 	ldw	r3,-16(fp)
 4013794:	00c7c83a 	sub	r3,zero,r3
 4013798:	10c00015 	stw	r3,0(r2)
          return -1;
 401379c:	00bfffc4 	movi	r2,-1
 40137a0:	00000a06 	br	40137cc <read+0xe0>
        }
        return rval;
 40137a4:	e0bffc17 	ldw	r2,-16(fp)
 40137a8:	00000806 	br	40137cc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40137ac:	401369c0 	call	401369c <alt_get_errno>
 40137b0:	00c00344 	movi	r3,13
 40137b4:	10c00015 	stw	r3,0(r2)
 40137b8:	00000306 	br	40137c8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40137bc:	401369c0 	call	401369c <alt_get_errno>
 40137c0:	00c01444 	movi	r3,81
 40137c4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 40137c8:	00bfffc4 	movi	r2,-1
}
 40137cc:	e037883a 	mov	sp,fp
 40137d0:	dfc00117 	ldw	ra,4(sp)
 40137d4:	df000017 	ldw	fp,0(sp)
 40137d8:	dec00204 	addi	sp,sp,8
 40137dc:	f800283a 	ret

040137e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40137e0:	defffc04 	addi	sp,sp,-16
 40137e4:	dfc00315 	stw	ra,12(sp)
 40137e8:	df000215 	stw	fp,8(sp)
 40137ec:	dc000115 	stw	r16,4(sp)
 40137f0:	df000104 	addi	fp,sp,4
 40137f4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40137f8:	e0bfff17 	ldw	r2,-4(fp)
 40137fc:	108000d0 	cmplti	r2,r2,3
 4013800:	1000111e 	bne	r2,zero,4013848 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4013804:	040101f4 	movhi	r16,1031
 4013808:	841ec304 	addi	r16,r16,31500
 401380c:	e0bfff17 	ldw	r2,-4(fp)
 4013810:	1009883a 	mov	r4,r2
 4013814:	01400304 	movi	r5,12
 4013818:	4009dd80 	call	4009dd8 <__mulsi3>
 401381c:	8085883a 	add	r2,r16,r2
 4013820:	10800204 	addi	r2,r2,8
 4013824:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4013828:	040101f4 	movhi	r16,1031
 401382c:	841ec304 	addi	r16,r16,31500
 4013830:	e0bfff17 	ldw	r2,-4(fp)
 4013834:	1009883a 	mov	r4,r2
 4013838:	01400304 	movi	r5,12
 401383c:	4009dd80 	call	4009dd8 <__mulsi3>
 4013840:	8085883a 	add	r2,r16,r2
 4013844:	10000015 	stw	zero,0(r2)
  }
}
 4013848:	e037883a 	mov	sp,fp
 401384c:	dfc00217 	ldw	ra,8(sp)
 4013850:	df000117 	ldw	fp,4(sp)
 4013854:	dc000017 	ldw	r16,0(sp)
 4013858:	dec00304 	addi	sp,sp,12
 401385c:	f800283a 	ret

04013860 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4013860:	defff904 	addi	sp,sp,-28
 4013864:	df000615 	stw	fp,24(sp)
 4013868:	df000604 	addi	fp,sp,24
 401386c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013870:	0005303a 	rdctl	r2,status
 4013874:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013878:	e0fffc17 	ldw	r3,-16(fp)
 401387c:	00bfff84 	movi	r2,-2
 4013880:	1884703a 	and	r2,r3,r2
 4013884:	1001703a 	wrctl	status,r2
  
  return context;
 4013888:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 401388c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4013890:	d0a00f17 	ldw	r2,-32708(gp)
 4013894:	10c000c4 	addi	r3,r2,3
 4013898:	00bfff04 	movi	r2,-4
 401389c:	1884703a 	and	r2,r3,r2
 40138a0:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40138a4:	d0e00f17 	ldw	r3,-32708(gp)
 40138a8:	e0bfff17 	ldw	r2,-4(fp)
 40138ac:	1885883a 	add	r2,r3,r2
 40138b0:	00c20034 	movhi	r3,2048
 40138b4:	18c00004 	addi	r3,r3,0
 40138b8:	1880062e 	bgeu	r3,r2,40138d4 <sbrk+0x74>
 40138bc:	e0bffa17 	ldw	r2,-24(fp)
 40138c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40138c4:	e0bffd17 	ldw	r2,-12(fp)
 40138c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 40138cc:	00bfffc4 	movi	r2,-1
 40138d0:	00000b06 	br	4013900 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 40138d4:	d0a00f17 	ldw	r2,-32708(gp)
 40138d8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 40138dc:	d0e00f17 	ldw	r3,-32708(gp)
 40138e0:	e0bfff17 	ldw	r2,-4(fp)
 40138e4:	1885883a 	add	r2,r3,r2
 40138e8:	d0a00f15 	stw	r2,-32708(gp)
 40138ec:	e0bffa17 	ldw	r2,-24(fp)
 40138f0:	e0bffe15 	stw	r2,-8(fp)
 40138f4:	e0bffe17 	ldw	r2,-8(fp)
 40138f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 40138fc:	e0bffb17 	ldw	r2,-20(fp)
} 
 4013900:	e037883a 	mov	sp,fp
 4013904:	df000017 	ldw	fp,0(sp)
 4013908:	dec00104 	addi	sp,sp,4
 401390c:	f800283a 	ret

04013910 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4013910:	defffa04 	addi	sp,sp,-24
 4013914:	df000515 	stw	fp,20(sp)
 4013918:	df000504 	addi	fp,sp,20
 401391c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013920:	0005303a 	rdctl	r2,status
 4013924:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013928:	e0fffc17 	ldw	r3,-16(fp)
 401392c:	00bfff84 	movi	r2,-2
 4013930:	1884703a 	and	r2,r3,r2
 4013934:	1001703a 	wrctl	status,r2
  
  return context;
 4013938:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401393c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4013940:	e0bfff17 	ldw	r2,-4(fp)
 4013944:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4013948:	e0bffd17 	ldw	r2,-12(fp)
 401394c:	10800017 	ldw	r2,0(r2)
 4013950:	e0fffd17 	ldw	r3,-12(fp)
 4013954:	18c00117 	ldw	r3,4(r3)
 4013958:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401395c:	e0bffd17 	ldw	r2,-12(fp)
 4013960:	10800117 	ldw	r2,4(r2)
 4013964:	e0fffd17 	ldw	r3,-12(fp)
 4013968:	18c00017 	ldw	r3,0(r3)
 401396c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4013970:	e0bffd17 	ldw	r2,-12(fp)
 4013974:	e0fffd17 	ldw	r3,-12(fp)
 4013978:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401397c:	e0bffd17 	ldw	r2,-12(fp)
 4013980:	e0fffd17 	ldw	r3,-12(fp)
 4013984:	10c00015 	stw	r3,0(r2)
 4013988:	e0bffb17 	ldw	r2,-20(fp)
 401398c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013990:	e0bffe17 	ldw	r2,-8(fp)
 4013994:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4013998:	e037883a 	mov	sp,fp
 401399c:	df000017 	ldw	fp,0(sp)
 40139a0:	dec00104 	addi	sp,sp,4
 40139a4:	f800283a 	ret

040139a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40139a8:	defffb04 	addi	sp,sp,-20
 40139ac:	dfc00415 	stw	ra,16(sp)
 40139b0:	df000315 	stw	fp,12(sp)
 40139b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40139b8:	d0a01017 	ldw	r2,-32704(gp)
 40139bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40139c0:	d0a02117 	ldw	r2,-32636(gp)
 40139c4:	10800044 	addi	r2,r2,1
 40139c8:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40139cc:	00002e06 	br	4013a88 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40139d0:	e0bffd17 	ldw	r2,-12(fp)
 40139d4:	10800017 	ldw	r2,0(r2)
 40139d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40139dc:	e0bffd17 	ldw	r2,-12(fp)
 40139e0:	10800403 	ldbu	r2,16(r2)
 40139e4:	10803fcc 	andi	r2,r2,255
 40139e8:	10000426 	beq	r2,zero,40139fc <alt_tick+0x54>
 40139ec:	d0a02117 	ldw	r2,-32636(gp)
 40139f0:	1000021e 	bne	r2,zero,40139fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 40139f4:	e0bffd17 	ldw	r2,-12(fp)
 40139f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 40139fc:	e0bffd17 	ldw	r2,-12(fp)
 4013a00:	10800217 	ldw	r2,8(r2)
 4013a04:	d0e02117 	ldw	r3,-32636(gp)
 4013a08:	18801d36 	bltu	r3,r2,4013a80 <alt_tick+0xd8>
 4013a0c:	e0bffd17 	ldw	r2,-12(fp)
 4013a10:	10800403 	ldbu	r2,16(r2)
 4013a14:	10803fcc 	andi	r2,r2,255
 4013a18:	1000191e 	bne	r2,zero,4013a80 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4013a1c:	e0bffd17 	ldw	r2,-12(fp)
 4013a20:	10c00317 	ldw	r3,12(r2)
 4013a24:	e0bffd17 	ldw	r2,-12(fp)
 4013a28:	10800517 	ldw	r2,20(r2)
 4013a2c:	1009883a 	mov	r4,r2
 4013a30:	183ee83a 	callr	r3
 4013a34:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4013a38:	e0bfff17 	ldw	r2,-4(fp)
 4013a3c:	1000031e 	bne	r2,zero,4013a4c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4013a40:	e13ffd17 	ldw	r4,-12(fp)
 4013a44:	40139100 	call	4013910 <alt_alarm_stop>
 4013a48:	00000d06 	br	4013a80 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4013a4c:	e0bffd17 	ldw	r2,-12(fp)
 4013a50:	10c00217 	ldw	r3,8(r2)
 4013a54:	e0bfff17 	ldw	r2,-4(fp)
 4013a58:	1887883a 	add	r3,r3,r2
 4013a5c:	e0bffd17 	ldw	r2,-12(fp)
 4013a60:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4013a64:	e0bffd17 	ldw	r2,-12(fp)
 4013a68:	10c00217 	ldw	r3,8(r2)
 4013a6c:	d0a02117 	ldw	r2,-32636(gp)
 4013a70:	1880032e 	bgeu	r3,r2,4013a80 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4013a74:	e0bffd17 	ldw	r2,-12(fp)
 4013a78:	00c00044 	movi	r3,1
 4013a7c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4013a80:	e0bffe17 	ldw	r2,-8(fp)
 4013a84:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4013a88:	e0fffd17 	ldw	r3,-12(fp)
 4013a8c:	d0a01004 	addi	r2,gp,-32704
 4013a90:	18bfcf1e 	bne	r3,r2,40139d0 <__reset+0xfb0129d0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4013a94:	0001883a 	nop
}
 4013a98:	e037883a 	mov	sp,fp
 4013a9c:	dfc00117 	ldw	ra,4(sp)
 4013aa0:	df000017 	ldw	fp,0(sp)
 4013aa4:	dec00204 	addi	sp,sp,8
 4013aa8:	f800283a 	ret

04013aac <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4013aac:	defffd04 	addi	sp,sp,-12
 4013ab0:	dfc00215 	stw	ra,8(sp)
 4013ab4:	df000115 	stw	fp,4(sp)
 4013ab8:	df000104 	addi	fp,sp,4
 4013abc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4013ac0:	e13fff17 	ldw	r4,-4(fp)
 4013ac4:	40159400 	call	4015940 <alt_busy_sleep>
}
 4013ac8:	e037883a 	mov	sp,fp
 4013acc:	dfc00117 	ldw	ra,4(sp)
 4013ad0:	df000017 	ldw	fp,0(sp)
 4013ad4:	dec00204 	addi	sp,sp,8
 4013ad8:	f800283a 	ret

04013adc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4013adc:	defffe04 	addi	sp,sp,-8
 4013ae0:	dfc00115 	stw	ra,4(sp)
 4013ae4:	df000015 	stw	fp,0(sp)
 4013ae8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4013aec:	00810234 	movhi	r2,1032
 4013af0:	10a37a04 	addi	r2,r2,-29208
 4013af4:	10800017 	ldw	r2,0(r2)
 4013af8:	10000526 	beq	r2,zero,4013b10 <alt_get_errno+0x34>
 4013afc:	00810234 	movhi	r2,1032
 4013b00:	10a37a04 	addi	r2,r2,-29208
 4013b04:	10800017 	ldw	r2,0(r2)
 4013b08:	103ee83a 	callr	r2
 4013b0c:	00000206 	br	4013b18 <alt_get_errno+0x3c>
 4013b10:	00810234 	movhi	r2,1032
 4013b14:	10a38504 	addi	r2,r2,-29164
}
 4013b18:	e037883a 	mov	sp,fp
 4013b1c:	dfc00117 	ldw	ra,4(sp)
 4013b20:	df000017 	ldw	fp,0(sp)
 4013b24:	dec00204 	addi	sp,sp,8
 4013b28:	f800283a 	ret

04013b2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4013b2c:	defff904 	addi	sp,sp,-28
 4013b30:	dfc00615 	stw	ra,24(sp)
 4013b34:	df000515 	stw	fp,20(sp)
 4013b38:	df000504 	addi	fp,sp,20
 4013b3c:	e13ffd15 	stw	r4,-12(fp)
 4013b40:	e17ffe15 	stw	r5,-8(fp)
 4013b44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4013b48:	e0bffd17 	ldw	r2,-12(fp)
 4013b4c:	10000716 	blt	r2,zero,4013b6c <write+0x40>
 4013b50:	e13ffd17 	ldw	r4,-12(fp)
 4013b54:	01400304 	movi	r5,12
 4013b58:	4009dd80 	call	4009dd8 <__mulsi3>
 4013b5c:	00c101f4 	movhi	r3,1031
 4013b60:	18dec304 	addi	r3,r3,31500
 4013b64:	10c5883a 	add	r2,r2,r3
 4013b68:	00000106 	br	4013b70 <write+0x44>
 4013b6c:	0005883a 	mov	r2,zero
 4013b70:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4013b74:	e0bffb17 	ldw	r2,-20(fp)
 4013b78:	10001f26 	beq	r2,zero,4013bf8 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4013b7c:	e0bffb17 	ldw	r2,-20(fp)
 4013b80:	10800217 	ldw	r2,8(r2)
 4013b84:	108000cc 	andi	r2,r2,3
 4013b88:	10001726 	beq	r2,zero,4013be8 <write+0xbc>
 4013b8c:	e0bffb17 	ldw	r2,-20(fp)
 4013b90:	10800017 	ldw	r2,0(r2)
 4013b94:	10800617 	ldw	r2,24(r2)
 4013b98:	10001326 	beq	r2,zero,4013be8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4013b9c:	e0bffb17 	ldw	r2,-20(fp)
 4013ba0:	10800017 	ldw	r2,0(r2)
 4013ba4:	10c00617 	ldw	r3,24(r2)
 4013ba8:	e0bfff17 	ldw	r2,-4(fp)
 4013bac:	e13ffb17 	ldw	r4,-20(fp)
 4013bb0:	e17ffe17 	ldw	r5,-8(fp)
 4013bb4:	100d883a 	mov	r6,r2
 4013bb8:	183ee83a 	callr	r3
 4013bbc:	e0bffc15 	stw	r2,-16(fp)
 4013bc0:	e0bffc17 	ldw	r2,-16(fp)
 4013bc4:	1000060e 	bge	r2,zero,4013be0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4013bc8:	4013adc0 	call	4013adc <alt_get_errno>
 4013bcc:	e0fffc17 	ldw	r3,-16(fp)
 4013bd0:	00c7c83a 	sub	r3,zero,r3
 4013bd4:	10c00015 	stw	r3,0(r2)
        return -1;
 4013bd8:	00bfffc4 	movi	r2,-1
 4013bdc:	00000a06 	br	4013c08 <write+0xdc>
      }
      return rval;
 4013be0:	e0bffc17 	ldw	r2,-16(fp)
 4013be4:	00000806 	br	4013c08 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4013be8:	4013adc0 	call	4013adc <alt_get_errno>
 4013bec:	00c00344 	movi	r3,13
 4013bf0:	10c00015 	stw	r3,0(r2)
 4013bf4:	00000306 	br	4013c04 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4013bf8:	4013adc0 	call	4013adc <alt_get_errno>
 4013bfc:	00c01444 	movi	r3,81
 4013c00:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 4013c04:	00bfffc4 	movi	r2,-1
}
 4013c08:	e037883a 	mov	sp,fp
 4013c0c:	dfc00117 	ldw	ra,4(sp)
 4013c10:	df000017 	ldw	fp,0(sp)
 4013c14:	dec00204 	addi	sp,sp,8
 4013c18:	f800283a 	ret

04013c1c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4013c1c:	defffd04 	addi	sp,sp,-12
 4013c20:	dfc00215 	stw	ra,8(sp)
 4013c24:	df000115 	stw	fp,4(sp)
 4013c28:	df000104 	addi	fp,sp,4
 4013c2c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4013c30:	e13fff17 	ldw	r4,-4(fp)
 4013c34:	01410234 	movhi	r5,1032
 4013c38:	29637704 	addi	r5,r5,-29220
 4013c3c:	4015ae40 	call	4015ae4 <alt_dev_llist_insert>
}
 4013c40:	e037883a 	mov	sp,fp
 4013c44:	dfc00117 	ldw	ra,4(sp)
 4013c48:	df000017 	ldw	fp,0(sp)
 4013c4c:	dec00204 	addi	sp,sp,8
 4013c50:	f800283a 	ret

04013c54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4013c54:	defffd04 	addi	sp,sp,-12
 4013c58:	dfc00215 	stw	ra,8(sp)
 4013c5c:	df000115 	stw	fp,4(sp)
 4013c60:	df000104 	addi	fp,sp,4
 4013c64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 4013c68:	40160e40 	call	40160e4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4013c6c:	00800044 	movi	r2,1
 4013c70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4013c74:	e037883a 	mov	sp,fp
 4013c78:	dfc00117 	ldw	ra,4(sp)
 4013c7c:	df000017 	ldw	fp,0(sp)
 4013c80:	dec00204 	addi	sp,sp,8
 4013c84:	f800283a 	ret

04013c88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4013c88:	defffe04 	addi	sp,sp,-8
 4013c8c:	dfc00115 	stw	ra,4(sp)
 4013c90:	df000015 	stw	fp,0(sp)
 4013c94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4013c98:	01020034 	movhi	r4,2048
 4013c9c:	000b883a 	mov	r5,zero
 4013ca0:	01800044 	movi	r6,1
 4013ca4:	01c0fa04 	movi	r7,1000
 4013ca8:	40151540 	call	4015154 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
 4013cac:	010101f4 	movhi	r4,1031
 4013cb0:	211f2304 	addi	r4,r4,31884
 4013cb4:	4013d280 	call	4013d28 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4013cb8:	010101f4 	movhi	r4,1031
 4013cbc:	211f5f04 	addi	r4,r4,32124
 4013cc0:	000b883a 	mov	r5,zero
 4013cc4:	000d883a 	mov	r6,zero
 4013cc8:	40147e40 	call	40147e4 <altera_avalon_jtag_uart_init>
 4013ccc:	010101f4 	movhi	r4,1031
 4013cd0:	211f5504 	addi	r4,r4,32084
 4013cd4:	4013c1c0 	call	4013c1c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4013cd8:	0001883a 	nop
}
 4013cdc:	e037883a 	mov	sp,fp
 4013ce0:	dfc00117 	ldw	ra,4(sp)
 4013ce4:	df000017 	ldw	fp,0(sp)
 4013ce8:	dec00204 	addi	sp,sp,8
 4013cec:	f800283a 	ret

04013cf0 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 4013cf0:	defffd04 	addi	sp,sp,-12
 4013cf4:	dfc00215 	stw	ra,8(sp)
 4013cf8:	df000115 	stw	fp,4(sp)
 4013cfc:	df000104 	addi	fp,sp,4
 4013d00:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 4013d04:	e13fff17 	ldw	r4,-4(fp)
 4013d08:	01410234 	movhi	r5,1032
 4013d0c:	29637f04 	addi	r5,r5,-29188
 4013d10:	4015ae40 	call	4015ae4 <alt_dev_llist_insert>
}
 4013d14:	e037883a 	mov	sp,fp
 4013d18:	dfc00117 	ldw	ra,4(sp)
 4013d1c:	df000017 	ldw	fp,0(sp)
 4013d20:	dec00204 	addi	sp,sp,8
 4013d24:	f800283a 	ret

04013d28 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 4013d28:	defffc04 	addi	sp,sp,-16
 4013d2c:	dfc00315 	stw	ra,12(sp)
 4013d30:	df000215 	stw	fp,8(sp)
 4013d34:	df000204 	addi	fp,sp,8
 4013d38:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 4013d3c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 4013d40:	e13fff17 	ldw	r4,-4(fp)
 4013d44:	4013d7c0 	call	4013d7c <alt_epcs_flash_query>
 4013d48:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 4013d4c:	e0bffe17 	ldw	r2,-8(fp)
 4013d50:	1000041e 	bne	r2,zero,4013d64 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 4013d54:	e0bfff17 	ldw	r2,-4(fp)
 4013d58:	1009883a 	mov	r4,r2
 4013d5c:	4013cf00 	call	4013cf0 <alt_flash_device_register>
 4013d60:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 4013d64:	e0bffe17 	ldw	r2,-8(fp)
}
 4013d68:	e037883a 	mov	sp,fp
 4013d6c:	dfc00117 	ldw	ra,4(sp)
 4013d70:	df000017 	ldw	fp,0(sp)
 4013d74:	dec00204 	addi	sp,sp,8
 4013d78:	f800283a 	ret

04013d7c <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 4013d7c:	defffc04 	addi	sp,sp,-16
 4013d80:	dfc00315 	stw	ra,12(sp)
 4013d84:	df000215 	stw	fp,8(sp)
 4013d88:	df000204 	addi	fp,sp,8
 4013d8c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 4013d90:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 4013d94:	e0bfff17 	ldw	r2,-4(fp)
 4013d98:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 4013d9c:	e0bfff17 	ldw	r2,-4(fp)
 4013da0:	10802d17 	ldw	r2,180(r2)
 4013da4:	1009883a 	mov	r4,r2
 4013da8:	40156680 	call	4015668 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 4013dac:	10c03fcc 	andi	r3,r2,255
 4013db0:	e0bfff17 	ldw	r2,-4(fp)
 4013db4:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 4013db8:	e0bfff17 	ldw	r2,-4(fp)
 4013dbc:	10802f17 	ldw	r2,188(r2)
 4013dc0:	10800598 	cmpnei	r2,r2,22
 4013dc4:	10000a1e 	bne	r2,zero,4013df0 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 4013dc8:	e0bfff17 	ldw	r2,-4(fp)
 4013dcc:	00c02034 	movhi	r3,128
 4013dd0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 4013dd4:	e0bfff17 	ldw	r2,-4(fp)
 4013dd8:	00c02004 	movi	r3,128
 4013ddc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 4013de0:	e0bfff17 	ldw	r2,-4(fp)
 4013de4:	00c00074 	movhi	r3,1
 4013de8:	10c01015 	stw	r3,64(r2)
 4013dec:	00007306 	br	4013fbc <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 4013df0:	e0bfff17 	ldw	r2,-4(fp)
 4013df4:	10802f17 	ldw	r2,188(r2)
 4013df8:	10800518 	cmpnei	r2,r2,20
 4013dfc:	10000a1e 	bne	r2,zero,4013e28 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 4013e00:	e0bfff17 	ldw	r2,-4(fp)
 4013e04:	00c00834 	movhi	r3,32
 4013e08:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 4013e0c:	e0bfff17 	ldw	r2,-4(fp)
 4013e10:	00c00804 	movi	r3,32
 4013e14:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 4013e18:	e0bfff17 	ldw	r2,-4(fp)
 4013e1c:	00c00074 	movhi	r3,1
 4013e20:	10c01015 	stw	r3,64(r2)
 4013e24:	00006506 	br	4013fbc <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 4013e28:	e0bfff17 	ldw	r2,-4(fp)
 4013e2c:	10802f17 	ldw	r2,188(r2)
 4013e30:	108004d8 	cmpnei	r2,r2,19
 4013e34:	10000a1e 	bne	r2,zero,4013e60 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 4013e38:	e0bfff17 	ldw	r2,-4(fp)
 4013e3c:	00c00434 	movhi	r3,16
 4013e40:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 4013e44:	e0bfff17 	ldw	r2,-4(fp)
 4013e48:	00c00404 	movi	r3,16
 4013e4c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 4013e50:	e0bfff17 	ldw	r2,-4(fp)
 4013e54:	00c00074 	movhi	r3,1
 4013e58:	10c01015 	stw	r3,64(r2)
 4013e5c:	00005706 	br	4013fbc <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 4013e60:	e0bfff17 	ldw	r2,-4(fp)
 4013e64:	10802f17 	ldw	r2,188(r2)
 4013e68:	10800498 	cmpnei	r2,r2,18
 4013e6c:	10000a1e 	bne	r2,zero,4013e98 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 4013e70:	e0bfff17 	ldw	r2,-4(fp)
 4013e74:	00c00234 	movhi	r3,8
 4013e78:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 4013e7c:	e0bfff17 	ldw	r2,-4(fp)
 4013e80:	00c00204 	movi	r3,8
 4013e84:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 4013e88:	e0bfff17 	ldw	r2,-4(fp)
 4013e8c:	00c00074 	movhi	r3,1
 4013e90:	10c01015 	stw	r3,64(r2)
 4013e94:	00004906 	br	4013fbc <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 4013e98:	e0bfff17 	ldw	r2,-4(fp)
 4013e9c:	10802f17 	ldw	r2,188(r2)
 4013ea0:	10800418 	cmpnei	r2,r2,16
 4013ea4:	10000a1e 	bne	r2,zero,4013ed0 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 4013ea8:	e0bfff17 	ldw	r2,-4(fp)
 4013eac:	00c000b4 	movhi	r3,2
 4013eb0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 4013eb4:	e0bfff17 	ldw	r2,-4(fp)
 4013eb8:	00c00104 	movi	r3,4
 4013ebc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 4013ec0:	e0bfff17 	ldw	r2,-4(fp)
 4013ec4:	00e00014 	movui	r3,32768
 4013ec8:	10c01015 	stw	r3,64(r2)
 4013ecc:	00003b06 	br	4013fbc <alt_epcs_flash_query+0x240>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 4013ed0:	e0bfff17 	ldw	r2,-4(fp)
 4013ed4:	10802d17 	ldw	r2,180(r2)
 4013ed8:	1009883a 	mov	r4,r2
 4013edc:	40156d00 	call	40156d0 <epcs_read_device_id>
 4013ee0:	e0ffff17 	ldw	r3,-4(fp)
 4013ee4:	18802f15 	stw	r2,188(r3)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 4013ee8:	e0bfff17 	ldw	r2,-4(fp)
 4013eec:	10c02f17 	ldw	r3,188(r2)
 4013ef0:	00804034 	movhi	r2,256
 4013ef4:	10bfffc4 	addi	r2,r2,-1
 4013ef8:	1886703a 	and	r3,r3,r2
 4013efc:	00800874 	movhi	r2,33
 4013f00:	10ae8604 	addi	r2,r2,-17896
 4013f04:	18800a1e 	bne	r3,r2,4013f30 <alt_epcs_flash_query+0x1b4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 4013f08:	e0bfff17 	ldw	r2,-4(fp)
 4013f0c:	00c04034 	movhi	r3,256
 4013f10:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 4013f14:	e0bfff17 	ldw	r2,-4(fp)
 4013f18:	00c04004 	movi	r3,256
 4013f1c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 4013f20:	e0bfff17 	ldw	r2,-4(fp)
 4013f24:	00c00074 	movhi	r3,1
 4013f28:	10c01015 	stw	r3,64(r2)
 4013f2c:	00002306 	br	4013fbc <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 4013f30:	e0bfff17 	ldw	r2,-4(fp)
 4013f34:	10802f17 	ldw	r2,188(r2)
 4013f38:	10803fcc 	andi	r2,r2,255
 4013f3c:	10800618 	cmpnei	r2,r2,24
 4013f40:	10000a1e 	bne	r2,zero,4013f6c <alt_epcs_flash_query+0x1f0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 4013f44:	e0bfff17 	ldw	r2,-4(fp)
 4013f48:	00c04034 	movhi	r3,256
 4013f4c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 4013f50:	e0bfff17 	ldw	r2,-4(fp)
 4013f54:	00c01004 	movi	r3,64
 4013f58:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 4013f5c:	e0bfff17 	ldw	r2,-4(fp)
 4013f60:	00c00134 	movhi	r3,4
 4013f64:	10c01015 	stw	r3,64(r2)
 4013f68:	00001406 	br	4013fbc <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 4013f6c:	e0bfff17 	ldw	r2,-4(fp)
 4013f70:	10802f17 	ldw	r2,188(r2)
 4013f74:	10803fcc 	andi	r2,r2,255
 4013f78:	10800658 	cmpnei	r2,r2,25
 4013f7c:	10000d1e 	bne	r2,zero,4013fb4 <alt_epcs_flash_query+0x238>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 4013f80:	e0bfff17 	ldw	r2,-4(fp)
 4013f84:	00c08034 	movhi	r3,512
 4013f88:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 4013f8c:	e0bfff17 	ldw	r2,-4(fp)
 4013f90:	00c08004 	movi	r3,512
 4013f94:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 4013f98:	e0bfff17 	ldw	r2,-4(fp)
 4013f9c:	00c00074 	movhi	r3,1
 4013fa0:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 4013fa4:	e0bfff17 	ldw	r2,-4(fp)
 4013fa8:	00c00044 	movi	r3,1
 4013fac:	10c03115 	stw	r3,196(r2)
 4013fb0:	00000206 	br	4013fbc <alt_epcs_flash_query+0x240>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 4013fb4:	00bffb44 	movi	r2,-19
 4013fb8:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 4013fbc:	e0bfff17 	ldw	r2,-4(fp)
 4013fc0:	10800e17 	ldw	r2,56(r2)
 4013fc4:	1007883a 	mov	r3,r2
 4013fc8:	e0bfff17 	ldw	r2,-4(fp)
 4013fcc:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 4013fd0:	e0bfff17 	ldw	r2,-4(fp)
 4013fd4:	00c00044 	movi	r3,1
 4013fd8:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 4013fdc:	e0bfff17 	ldw	r2,-4(fp)
 4013fe0:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 4013fe4:	e0bfff17 	ldw	r2,-4(fp)
 4013fe8:	00c04004 	movi	r3,256
 4013fec:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 4013ff0:	e0bffe17 	ldw	r2,-8(fp)
}
 4013ff4:	e037883a 	mov	sp,fp
 4013ff8:	dfc00117 	ldw	ra,4(sp)
 4013ffc:	df000017 	ldw	fp,0(sp)
 4014000:	dec00204 	addi	sp,sp,8
 4014004:	f800283a 	ret

04014008 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 4014008:	deffee04 	addi	sp,sp,-72
 401400c:	dfc01115 	stw	ra,68(sp)
 4014010:	df001015 	stw	fp,64(sp)
 4014014:	df001004 	addi	fp,sp,64
 4014018:	e13ffc15 	stw	r4,-16(fp)
 401401c:	e17ffd15 	stw	r5,-12(fp)
 4014020:	e1bffe15 	stw	r6,-8(fp)
 4014024:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 4014028:	00800804 	movi	r2,32
 401402c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 4014030:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 4014034:	00002606 	br	40140d0 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 4014038:	e0bff117 	ldw	r2,-60(fp)
 401403c:	e0ffff17 	ldw	r3,-4(fp)
 4014040:	1880012e 	bgeu	r3,r2,4014048 <alt_epcs_flash_memcmp+0x40>
 4014044:	1805883a 	mov	r2,r3
 4014048:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 401404c:	e0fffe17 	ldw	r3,-8(fp)
 4014050:	e0bff017 	ldw	r2,-64(fp)
 4014054:	1887883a 	add	r3,r3,r2
 4014058:	e0bff404 	addi	r2,fp,-48
 401405c:	e13ffc17 	ldw	r4,-16(fp)
 4014060:	180b883a 	mov	r5,r3
 4014064:	100d883a 	mov	r6,r2
 4014068:	e1fff217 	ldw	r7,-56(fp)
 401406c:	40145e80 	call	40145e8 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 4014070:	1000020e 	bge	r2,zero,401407c <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 4014074:	00bfffc4 	movi	r2,-1
 4014078:	00001806 	br	40140dc <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 401407c:	e0bff017 	ldw	r2,-64(fp)
 4014080:	e0fffd17 	ldw	r3,-12(fp)
 4014084:	1889883a 	add	r4,r3,r2
 4014088:	e0bff217 	ldw	r2,-56(fp)
 401408c:	e0fff404 	addi	r3,fp,-48
 4014090:	180b883a 	mov	r5,r3
 4014094:	100d883a 	mov	r6,r2
 4014098:	40165d00 	call	40165d0 <memcmp>
 401409c:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 40140a0:	e0bff317 	ldw	r2,-52(fp)
 40140a4:	10000226 	beq	r2,zero,40140b0 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 40140a8:	e0bff317 	ldw	r2,-52(fp)
 40140ac:	00000b06 	br	40140dc <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 40140b0:	e0bff217 	ldw	r2,-56(fp)
 40140b4:	e0ffff17 	ldw	r3,-4(fp)
 40140b8:	1885c83a 	sub	r2,r3,r2
 40140bc:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 40140c0:	e0fff017 	ldw	r3,-64(fp)
 40140c4:	e0bff217 	ldw	r2,-56(fp)
 40140c8:	1885883a 	add	r2,r3,r2
 40140cc:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 40140d0:	e0bfff17 	ldw	r2,-4(fp)
 40140d4:	103fd81e 	bne	r2,zero,4014038 <__reset+0xfb013038>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 40140d8:	0005883a 	mov	r2,zero
}
 40140dc:	e037883a 	mov	sp,fp
 40140e0:	dfc00117 	ldw	ra,4(sp)
 40140e4:	df000017 	ldw	fp,0(sp)
 40140e8:	dec00204 	addi	sp,sp,8
 40140ec:	f800283a 	ret

040140f0 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 40140f0:	defff404 	addi	sp,sp,-48
 40140f4:	dfc00b15 	stw	ra,44(sp)
 40140f8:	df000a15 	stw	fp,40(sp)
 40140fc:	df000a04 	addi	fp,sp,40
 4014100:	e13ffc15 	stw	r4,-16(fp)
 4014104:	e17ffd15 	stw	r5,-12(fp)
 4014108:	e1bffe15 	stw	r6,-8(fp)
 401410c:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 4014110:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 4014114:	e03ff815 	stw	zero,-32(fp)
 4014118:	00008306 	br	4014328 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 401411c:	e0fffc17 	ldw	r3,-16(fp)
 4014120:	e0bff817 	ldw	r2,-32(fp)
 4014124:	1004913a 	slli	r2,r2,4
 4014128:	1885883a 	add	r2,r3,r2
 401412c:	10800d04 	addi	r2,r2,52
 4014130:	10800017 	ldw	r2,0(r2)
 4014134:	e0fffd17 	ldw	r3,-12(fp)
 4014138:	18807816 	blt	r3,r2,401431c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 401413c:	e0fffc17 	ldw	r3,-16(fp)
 4014140:	e0bff817 	ldw	r2,-32(fp)
 4014144:	1004913a 	slli	r2,r2,4
 4014148:	1885883a 	add	r2,r3,r2
 401414c:	10800d04 	addi	r2,r2,52
 4014150:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 4014154:	e13ffc17 	ldw	r4,-16(fp)
 4014158:	e0bff817 	ldw	r2,-32(fp)
 401415c:	1004913a 	slli	r2,r2,4
 4014160:	2085883a 	add	r2,r4,r2
 4014164:	10800e04 	addi	r2,r2,56
 4014168:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 401416c:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 4014170:	e0fffd17 	ldw	r3,-12(fp)
 4014174:	1880690e 	bge	r3,r2,401431c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 4014178:	e0fffc17 	ldw	r3,-16(fp)
 401417c:	e0bff817 	ldw	r2,-32(fp)
 4014180:	1004913a 	slli	r2,r2,4
 4014184:	1885883a 	add	r2,r3,r2
 4014188:	10800d04 	addi	r2,r2,52
 401418c:	10800017 	ldw	r2,0(r2)
 4014190:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 4014194:	e03ff915 	stw	zero,-28(fp)
 4014198:	00005806 	br	40142fc <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 401419c:	e0fffd17 	ldw	r3,-12(fp)
 40141a0:	e0bffa17 	ldw	r2,-24(fp)
 40141a4:	18804916 	blt	r3,r2,40142cc <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 40141a8:	e0fffc17 	ldw	r3,-16(fp)
 40141ac:	e0bff817 	ldw	r2,-32(fp)
 40141b0:	10800104 	addi	r2,r2,4
 40141b4:	1004913a 	slli	r2,r2,4
 40141b8:	1885883a 	add	r2,r3,r2
 40141bc:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 40141c0:	e0bffa17 	ldw	r2,-24(fp)
 40141c4:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 40141c8:	e0fffd17 	ldw	r3,-12(fp)
 40141cc:	18803f0e 	bge	r3,r2,40142cc <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 40141d0:	e0fffc17 	ldw	r3,-16(fp)
 40141d4:	e0bff817 	ldw	r2,-32(fp)
 40141d8:	10800104 	addi	r2,r2,4
 40141dc:	1004913a 	slli	r2,r2,4
 40141e0:	1885883a 	add	r2,r3,r2
 40141e4:	10c00017 	ldw	r3,0(r2)
 40141e8:	e0bffa17 	ldw	r2,-24(fp)
 40141ec:	1887883a 	add	r3,r3,r2
 40141f0:	e0bffd17 	ldw	r2,-12(fp)
 40141f4:	1885c83a 	sub	r2,r3,r2
 40141f8:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 40141fc:	e0fffb17 	ldw	r3,-20(fp)
 4014200:	e0bfff17 	ldw	r2,-4(fp)
 4014204:	1880010e 	bge	r3,r2,401420c <alt_epcs_flash_write+0x11c>
 4014208:	1805883a 	mov	r2,r3
 401420c:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 4014210:	e0bffb17 	ldw	r2,-20(fp)
 4014214:	e13ffc17 	ldw	r4,-16(fp)
 4014218:	e17ffe17 	ldw	r5,-8(fp)
 401421c:	e1bffd17 	ldw	r6,-12(fp)
 4014220:	100f883a 	mov	r7,r2
 4014224:	40140080 	call	4014008 <alt_epcs_flash_memcmp>
 4014228:	10001226 	beq	r2,zero,4014274 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 401422c:	e0bffc17 	ldw	r2,-16(fp)
 4014230:	10800817 	ldw	r2,32(r2)
 4014234:	e13ffc17 	ldw	r4,-16(fp)
 4014238:	e17ffa17 	ldw	r5,-24(fp)
 401423c:	103ee83a 	callr	r2
 4014240:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 4014244:	e0bff717 	ldw	r2,-36(fp)
 4014248:	10000a1e 	bne	r2,zero,4014274 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 401424c:	e0bffc17 	ldw	r2,-16(fp)
 4014250:	10800917 	ldw	r2,36(r2)
 4014254:	e0fffb17 	ldw	r3,-20(fp)
 4014258:	d8c00015 	stw	r3,0(sp)
 401425c:	e13ffc17 	ldw	r4,-16(fp)
 4014260:	e17ffa17 	ldw	r5,-24(fp)
 4014264:	e1bffd17 	ldw	r6,-12(fp)
 4014268:	e1fffe17 	ldw	r7,-8(fp)
 401426c:	103ee83a 	callr	r2
 4014270:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 4014274:	e0ffff17 	ldw	r3,-4(fp)
 4014278:	e0bffb17 	ldw	r2,-20(fp)
 401427c:	18802e26 	beq	r3,r2,4014338 <alt_epcs_flash_write+0x248>
 4014280:	e0bff717 	ldw	r2,-36(fp)
 4014284:	10002c1e 	bne	r2,zero,4014338 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 4014288:	e0ffff17 	ldw	r3,-4(fp)
 401428c:	e0bffb17 	ldw	r2,-20(fp)
 4014290:	1885c83a 	sub	r2,r3,r2
 4014294:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 4014298:	e0fffc17 	ldw	r3,-16(fp)
 401429c:	e0bff817 	ldw	r2,-32(fp)
 40142a0:	10800104 	addi	r2,r2,4
 40142a4:	1004913a 	slli	r2,r2,4
 40142a8:	1885883a 	add	r2,r3,r2
 40142ac:	10c00017 	ldw	r3,0(r2)
 40142b0:	e0bffa17 	ldw	r2,-24(fp)
 40142b4:	1885883a 	add	r2,r3,r2
 40142b8:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 40142bc:	e0bffb17 	ldw	r2,-20(fp)
 40142c0:	e0fffe17 	ldw	r3,-8(fp)
 40142c4:	1885883a 	add	r2,r3,r2
 40142c8:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 40142cc:	e0fffc17 	ldw	r3,-16(fp)
 40142d0:	e0bff817 	ldw	r2,-32(fp)
 40142d4:	10800104 	addi	r2,r2,4
 40142d8:	1004913a 	slli	r2,r2,4
 40142dc:	1885883a 	add	r2,r3,r2
 40142e0:	10800017 	ldw	r2,0(r2)
 40142e4:	e0fffa17 	ldw	r3,-24(fp)
 40142e8:	1885883a 	add	r2,r3,r2
 40142ec:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 40142f0:	e0bff917 	ldw	r2,-28(fp)
 40142f4:	10800044 	addi	r2,r2,1
 40142f8:	e0bff915 	stw	r2,-28(fp)
 40142fc:	e0fffc17 	ldw	r3,-16(fp)
 4014300:	e0bff817 	ldw	r2,-32(fp)
 4014304:	1004913a 	slli	r2,r2,4
 4014308:	1885883a 	add	r2,r3,r2
 401430c:	10800f04 	addi	r2,r2,60
 4014310:	10800017 	ldw	r2,0(r2)
 4014314:	e0fff917 	ldw	r3,-28(fp)
 4014318:	18bfa016 	blt	r3,r2,401419c <__reset+0xfb01319c>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 401431c:	e0bff817 	ldw	r2,-32(fp)
 4014320:	10800044 	addi	r2,r2,1
 4014324:	e0bff815 	stw	r2,-32(fp)
 4014328:	e0bffc17 	ldw	r2,-16(fp)
 401432c:	10800c17 	ldw	r2,48(r2)
 4014330:	e0fff817 	ldw	r3,-32(fp)
 4014334:	18bf7916 	blt	r3,r2,401411c <__reset+0xfb01311c>
      }
    }
  }

finished:
  return ret_code;
 4014338:	e0bff717 	ldw	r2,-36(fp)
}
 401433c:	e037883a 	mov	sp,fp
 4014340:	dfc00117 	ldw	ra,4(sp)
 4014344:	df000017 	ldw	fp,0(sp)
 4014348:	dec00204 	addi	sp,sp,8
 401434c:	f800283a 	ret

04014350 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 4014350:	defffa04 	addi	sp,sp,-24
 4014354:	df000515 	stw	fp,20(sp)
 4014358:	df000504 	addi	fp,sp,20
 401435c:	e13ffd15 	stw	r4,-12(fp)
 4014360:	e17ffe15 	stw	r5,-8(fp)
 4014364:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 4014368:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 401436c:	e0bffd17 	ldw	r2,-12(fp)
 4014370:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 4014374:	e0bffc17 	ldw	r2,-16(fp)
 4014378:	10c00c17 	ldw	r3,48(r2)
 401437c:	e0bfff17 	ldw	r2,-4(fp)
 4014380:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 4014384:	e0bffc17 	ldw	r2,-16(fp)
 4014388:	10800c17 	ldw	r2,48(r2)
 401438c:	1000031e 	bne	r2,zero,401439c <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 4014390:	00bffec4 	movi	r2,-5
 4014394:	e0bffb15 	stw	r2,-20(fp)
 4014398:	00000b06 	br	40143c8 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 401439c:	e0bffc17 	ldw	r2,-16(fp)
 40143a0:	10800c17 	ldw	r2,48(r2)
 40143a4:	10800250 	cmplti	r2,r2,9
 40143a8:	1000031e 	bne	r2,zero,40143b8 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 40143ac:	00bffd04 	movi	r2,-12
 40143b0:	e0bffb15 	stw	r2,-20(fp)
 40143b4:	00000406 	br	40143c8 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 40143b8:	e0bffc17 	ldw	r2,-16(fp)
 40143bc:	10c00d04 	addi	r3,r2,52
 40143c0:	e0bffe17 	ldw	r2,-8(fp)
 40143c4:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 40143c8:	e0bffb17 	ldw	r2,-20(fp)
}
 40143cc:	e037883a 	mov	sp,fp
 40143d0:	df000017 	ldw	fp,0(sp)
 40143d4:	dec00104 	addi	sp,sp,4
 40143d8:	f800283a 	ret

040143dc <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 40143dc:	defff904 	addi	sp,sp,-28
 40143e0:	df000615 	stw	fp,24(sp)
 40143e4:	df000604 	addi	fp,sp,24
 40143e8:	e13ffe15 	stw	r4,-8(fp)
 40143ec:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 40143f0:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 40143f4:	e0bffe17 	ldw	r2,-8(fp)
 40143f8:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 40143fc:	e0bffb17 	ldw	r2,-20(fp)
 4014400:	10800c17 	ldw	r2,48(r2)
 4014404:	10bfffc4 	addi	r2,r2,-1
 4014408:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 401440c:	e0fffb17 	ldw	r3,-20(fp)
 4014410:	e0bffc17 	ldw	r2,-16(fp)
 4014414:	1004913a 	slli	r2,r2,4
 4014418:	1885883a 	add	r2,r3,r2
 401441c:	10800d04 	addi	r2,r2,52
 4014420:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 4014424:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 4014428:	e13ffb17 	ldw	r4,-20(fp)
 401442c:	e0bffc17 	ldw	r2,-16(fp)
 4014430:	1004913a 	slli	r2,r2,4
 4014434:	2085883a 	add	r2,r4,r2
 4014438:	10800e04 	addi	r2,r2,56
 401443c:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 4014440:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 4014444:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 4014448:	e0bfff17 	ldw	r2,-4(fp)
 401444c:	e0fffd17 	ldw	r3,-12(fp)
 4014450:	1880022e 	bgeu	r3,r2,401445c <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 4014454:	00bffec4 	movi	r2,-5
 4014458:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 401445c:	e0bffa17 	ldw	r2,-24(fp)
}
 4014460:	e037883a 	mov	sp,fp
 4014464:	df000017 	ldw	fp,0(sp)
 4014468:	dec00104 	addi	sp,sp,4
 401446c:	f800283a 	ret

04014470 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 4014470:	defffa04 	addi	sp,sp,-24
 4014474:	dfc00515 	stw	ra,20(sp)
 4014478:	df000415 	stw	fp,16(sp)
 401447c:	df000404 	addi	fp,sp,16
 4014480:	e13ffe15 	stw	r4,-8(fp)
 4014484:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 4014488:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401448c:	e0bffe17 	ldw	r2,-8(fp)
 4014490:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 4014494:	e13ffe17 	ldw	r4,-8(fp)
 4014498:	e17fff17 	ldw	r5,-4(fp)
 401449c:	40143dc0 	call	40143dc <alt_epcs_test_address>
 40144a0:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 40144a4:	e0bffc17 	ldw	r2,-16(fp)
 40144a8:	10000816 	blt	r2,zero,40144cc <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 40144ac:	e0bffd17 	ldw	r2,-12(fp)
 40144b0:	11002d17 	ldw	r4,180(r2)
 40144b4:	e0ffff17 	ldw	r3,-4(fp)
 40144b8:	e0bffd17 	ldw	r2,-12(fp)
 40144bc:	10803117 	ldw	r2,196(r2)
 40144c0:	180b883a 	mov	r5,r3
 40144c4:	100d883a 	mov	r6,r2
 40144c8:	40152a80 	call	40152a8 <epcs_sector_erase>
  }
  return ret_code;
 40144cc:	e0bffc17 	ldw	r2,-16(fp)
}
 40144d0:	e037883a 	mov	sp,fp
 40144d4:	dfc00117 	ldw	ra,4(sp)
 40144d8:	df000017 	ldw	fp,0(sp)
 40144dc:	dec00204 	addi	sp,sp,8
 40144e0:	f800283a 	ret

040144e4 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 40144e4:	defff404 	addi	sp,sp,-48
 40144e8:	dfc00b15 	stw	ra,44(sp)
 40144ec:	df000a15 	stw	fp,40(sp)
 40144f0:	df000a04 	addi	fp,sp,40
 40144f4:	e13ffc15 	stw	r4,-16(fp)
 40144f8:	e17ffd15 	stw	r5,-12(fp)
 40144fc:	e1bffe15 	stw	r6,-8(fp)
 4014500:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4014504:	e0bffc17 	ldw	r2,-16(fp)
 4014508:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 401450c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 4014510:	e13ffc17 	ldw	r4,-16(fp)
 4014514:	e17ffe17 	ldw	r5,-8(fp)
 4014518:	40143dc0 	call	40143dc <alt_epcs_test_address>
 401451c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 4014520:	e0bff917 	ldw	r2,-28(fp)
 4014524:	10002a16 	blt	r2,zero,40145d0 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 4014528:	00002706 	br	40145c8 <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 401452c:	e0bff817 	ldw	r2,-32(fp)
 4014530:	10c03017 	ldw	r3,192(r2)
 4014534:	e0bffe17 	ldw	r2,-8(fp)
 4014538:	1887883a 	add	r3,r3,r2
 401453c:	e0bff817 	ldw	r2,-32(fp)
 4014540:	10803017 	ldw	r2,192(r2)
 4014544:	0085c83a 	sub	r2,zero,r2
 4014548:	1884703a 	and	r2,r3,r2
 401454c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 4014550:	e0fffa17 	ldw	r3,-24(fp)
 4014554:	e0bffe17 	ldw	r2,-8(fp)
 4014558:	1885c83a 	sub	r2,r3,r2
 401455c:	e0c00217 	ldw	r3,8(fp)
 4014560:	1880010e 	bge	r3,r2,4014568 <alt_epcs_flash_write_block+0x84>
 4014564:	1805883a 	mov	r2,r3
 4014568:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 401456c:	e0bff817 	ldw	r2,-32(fp)
 4014570:	10c02d17 	ldw	r3,180(r2)
 4014574:	e0bff717 	ldw	r2,-36(fp)
 4014578:	e13fff17 	ldw	r4,-4(fp)
 401457c:	2085883a 	add	r2,r4,r2
          f->four_bytes_mode);
 4014580:	e13ff817 	ldw	r4,-32(fp)
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 4014584:	21003117 	ldw	r4,196(r4)
 4014588:	d9000015 	stw	r4,0(sp)
 401458c:	1809883a 	mov	r4,r3
 4014590:	e17ffe17 	ldw	r5,-8(fp)
 4014594:	100d883a 	mov	r6,r2
 4014598:	e1fffb17 	ldw	r7,-20(fp)
 401459c:	401554c0 	call	401554c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 40145a0:	e0c00217 	ldw	r3,8(fp)
 40145a4:	e0bffb17 	ldw	r2,-20(fp)
 40145a8:	1885c83a 	sub	r2,r3,r2
 40145ac:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 40145b0:	e0fff717 	ldw	r3,-36(fp)
 40145b4:	e0bffb17 	ldw	r2,-20(fp)
 40145b8:	1885883a 	add	r2,r3,r2
 40145bc:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 40145c0:	e0bffa17 	ldw	r2,-24(fp)
 40145c4:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 40145c8:	e0800217 	ldw	r2,8(fp)
 40145cc:	103fd71e 	bne	r2,zero,401452c <__reset+0xfb01352c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 40145d0:	e0bff917 	ldw	r2,-28(fp)
}
 40145d4:	e037883a 	mov	sp,fp
 40145d8:	dfc00117 	ldw	ra,4(sp)
 40145dc:	df000017 	ldw	fp,0(sp)
 40145e0:	dec00204 	addi	sp,sp,8
 40145e4:	f800283a 	ret

040145e8 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 40145e8:	defff704 	addi	sp,sp,-36
 40145ec:	dfc00815 	stw	ra,32(sp)
 40145f0:	df000715 	stw	fp,28(sp)
 40145f4:	df000704 	addi	fp,sp,28
 40145f8:	e13ffc15 	stw	r4,-16(fp)
 40145fc:	e17ffd15 	stw	r5,-12(fp)
 4014600:	e1bffe15 	stw	r6,-8(fp)
 4014604:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 4014608:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401460c:	e0bffc17 	ldw	r2,-16(fp)
 4014610:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 4014614:	e13ffc17 	ldw	r4,-16(fp)
 4014618:	e17ffd17 	ldw	r5,-12(fp)
 401461c:	40143dc0 	call	40143dc <alt_epcs_test_address>
 4014620:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 4014624:	e0bffa17 	ldw	r2,-24(fp)
 4014628:	10000f16 	blt	r2,zero,4014668 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 401462c:	e0bffb17 	ldw	r2,-20(fp)
 4014630:	10802d17 	ldw	r2,180(r2)
                                f->four_bytes_mode);
 4014634:	e0fffb17 	ldw	r3,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 4014638:	18c03117 	ldw	r3,196(r3)
 401463c:	d8c00015 	stw	r3,0(sp)
 4014640:	1009883a 	mov	r4,r2
 4014644:	e17ffd17 	ldw	r5,-12(fp)
 4014648:	e1bffe17 	ldw	r6,-8(fp)
 401464c:	e1ffff17 	ldw	r7,-4(fp)
 4014650:	40153a00 	call	40153a0 <epcs_read_buffer>
 4014654:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 4014658:	e0fffa17 	ldw	r3,-24(fp)
 401465c:	e0bfff17 	ldw	r2,-4(fp)
 4014660:	1880011e 	bne	r3,r2,4014668 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 4014664:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 4014668:	e0bffa17 	ldw	r2,-24(fp)
}
 401466c:	e037883a 	mov	sp,fp
 4014670:	dfc00117 	ldw	ra,4(sp)
 4014674:	df000017 	ldw	fp,0(sp)
 4014678:	dec00204 	addi	sp,sp,8
 401467c:	f800283a 	ret

04014680 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4014680:	defffa04 	addi	sp,sp,-24
 4014684:	dfc00515 	stw	ra,20(sp)
 4014688:	df000415 	stw	fp,16(sp)
 401468c:	df000404 	addi	fp,sp,16
 4014690:	e13ffd15 	stw	r4,-12(fp)
 4014694:	e17ffe15 	stw	r5,-8(fp)
 4014698:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401469c:	e0bffd17 	ldw	r2,-12(fp)
 40146a0:	10800017 	ldw	r2,0(r2)
 40146a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40146a8:	e0bffc17 	ldw	r2,-16(fp)
 40146ac:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 40146b0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40146b4:	10800217 	ldw	r2,8(r2)
 40146b8:	1809883a 	mov	r4,r3
 40146bc:	e17ffe17 	ldw	r5,-8(fp)
 40146c0:	e1bfff17 	ldw	r6,-4(fp)
 40146c4:	100f883a 	mov	r7,r2
 40146c8:	4014ca80 	call	4014ca8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 40146cc:	e037883a 	mov	sp,fp
 40146d0:	dfc00117 	ldw	ra,4(sp)
 40146d4:	df000017 	ldw	fp,0(sp)
 40146d8:	dec00204 	addi	sp,sp,8
 40146dc:	f800283a 	ret

040146e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40146e0:	defffa04 	addi	sp,sp,-24
 40146e4:	dfc00515 	stw	ra,20(sp)
 40146e8:	df000415 	stw	fp,16(sp)
 40146ec:	df000404 	addi	fp,sp,16
 40146f0:	e13ffd15 	stw	r4,-12(fp)
 40146f4:	e17ffe15 	stw	r5,-8(fp)
 40146f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40146fc:	e0bffd17 	ldw	r2,-12(fp)
 4014700:	10800017 	ldw	r2,0(r2)
 4014704:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4014708:	e0bffc17 	ldw	r2,-16(fp)
 401470c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4014710:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4014714:	10800217 	ldw	r2,8(r2)
 4014718:	1809883a 	mov	r4,r3
 401471c:	e17ffe17 	ldw	r5,-8(fp)
 4014720:	e1bfff17 	ldw	r6,-4(fp)
 4014724:	100f883a 	mov	r7,r2
 4014728:	4014ec00 	call	4014ec0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401472c:	e037883a 	mov	sp,fp
 4014730:	dfc00117 	ldw	ra,4(sp)
 4014734:	df000017 	ldw	fp,0(sp)
 4014738:	dec00204 	addi	sp,sp,8
 401473c:	f800283a 	ret

04014740 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4014740:	defffc04 	addi	sp,sp,-16
 4014744:	dfc00315 	stw	ra,12(sp)
 4014748:	df000215 	stw	fp,8(sp)
 401474c:	df000204 	addi	fp,sp,8
 4014750:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4014754:	e0bfff17 	ldw	r2,-4(fp)
 4014758:	10800017 	ldw	r2,0(r2)
 401475c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4014760:	e0bffe17 	ldw	r2,-8(fp)
 4014764:	10c00a04 	addi	r3,r2,40
 4014768:	e0bfff17 	ldw	r2,-4(fp)
 401476c:	10800217 	ldw	r2,8(r2)
 4014770:	1809883a 	mov	r4,r3
 4014774:	100b883a 	mov	r5,r2
 4014778:	4014b4c0 	call	4014b4c <altera_avalon_jtag_uart_close>
}
 401477c:	e037883a 	mov	sp,fp
 4014780:	dfc00117 	ldw	ra,4(sp)
 4014784:	df000017 	ldw	fp,0(sp)
 4014788:	dec00204 	addi	sp,sp,8
 401478c:	f800283a 	ret

04014790 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4014790:	defffa04 	addi	sp,sp,-24
 4014794:	dfc00515 	stw	ra,20(sp)
 4014798:	df000415 	stw	fp,16(sp)
 401479c:	df000404 	addi	fp,sp,16
 40147a0:	e13ffd15 	stw	r4,-12(fp)
 40147a4:	e17ffe15 	stw	r5,-8(fp)
 40147a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40147ac:	e0bffd17 	ldw	r2,-12(fp)
 40147b0:	10800017 	ldw	r2,0(r2)
 40147b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40147b8:	e0bffc17 	ldw	r2,-16(fp)
 40147bc:	10800a04 	addi	r2,r2,40
 40147c0:	1009883a 	mov	r4,r2
 40147c4:	e17ffe17 	ldw	r5,-8(fp)
 40147c8:	e1bfff17 	ldw	r6,-4(fp)
 40147cc:	4014bb40 	call	4014bb4 <altera_avalon_jtag_uart_ioctl>
}
 40147d0:	e037883a 	mov	sp,fp
 40147d4:	dfc00117 	ldw	ra,4(sp)
 40147d8:	df000017 	ldw	fp,0(sp)
 40147dc:	dec00204 	addi	sp,sp,8
 40147e0:	f800283a 	ret

040147e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40147e4:	defffa04 	addi	sp,sp,-24
 40147e8:	dfc00515 	stw	ra,20(sp)
 40147ec:	df000415 	stw	fp,16(sp)
 40147f0:	df000404 	addi	fp,sp,16
 40147f4:	e13ffd15 	stw	r4,-12(fp)
 40147f8:	e17ffe15 	stw	r5,-8(fp)
 40147fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4014800:	e0bffd17 	ldw	r2,-12(fp)
 4014804:	00c00044 	movi	r3,1
 4014808:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401480c:	e0bffd17 	ldw	r2,-12(fp)
 4014810:	10800017 	ldw	r2,0(r2)
 4014814:	10800104 	addi	r2,r2,4
 4014818:	e0fffd17 	ldw	r3,-12(fp)
 401481c:	18c00817 	ldw	r3,32(r3)
 4014820:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4014824:	e0fffe17 	ldw	r3,-8(fp)
 4014828:	e0bfff17 	ldw	r2,-4(fp)
 401482c:	d8000015 	stw	zero,0(sp)
 4014830:	1809883a 	mov	r4,r3
 4014834:	100b883a 	mov	r5,r2
 4014838:	01810074 	movhi	r6,1025
 401483c:	31922904 	addi	r6,r6,18596
 4014840:	e1fffd17 	ldw	r7,-12(fp)
 4014844:	40131040 	call	4013104 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4014848:	e0bffd17 	ldw	r2,-12(fp)
 401484c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4014850:	e0bffd17 	ldw	r2,-12(fp)
 4014854:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4014858:	00810234 	movhi	r2,1032
 401485c:	10a38d04 	addi	r2,r2,-29132
 4014860:	10800017 	ldw	r2,0(r2)
 4014864:	1809883a 	mov	r4,r3
 4014868:	100b883a 	mov	r5,r2
 401486c:	01810074 	movhi	r6,1025
 4014870:	3192aa04 	addi	r6,r6,19112
 4014874:	e1fffd17 	ldw	r7,-12(fp)
 4014878:	40158000 	call	4015800 <alt_alarm_start>
 401487c:	1000040e 	bge	r2,zero,4014890 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4014880:	e0bffd17 	ldw	r2,-12(fp)
 4014884:	00e00034 	movhi	r3,32768
 4014888:	18ffffc4 	addi	r3,r3,-1
 401488c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4014890:	e037883a 	mov	sp,fp
 4014894:	dfc00117 	ldw	ra,4(sp)
 4014898:	df000017 	ldw	fp,0(sp)
 401489c:	dec00204 	addi	sp,sp,8
 40148a0:	f800283a 	ret

040148a4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40148a4:	defff804 	addi	sp,sp,-32
 40148a8:	df000715 	stw	fp,28(sp)
 40148ac:	df000704 	addi	fp,sp,28
 40148b0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 40148b4:	e0bfff17 	ldw	r2,-4(fp)
 40148b8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 40148bc:	e0bffb17 	ldw	r2,-20(fp)
 40148c0:	10800017 	ldw	r2,0(r2)
 40148c4:	e0bffc15 	stw	r2,-16(fp)
 40148c8:	00000106 	br	40148d0 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 40148cc:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40148d0:	e0bffc17 	ldw	r2,-16(fp)
 40148d4:	10800104 	addi	r2,r2,4
 40148d8:	10800037 	ldwio	r2,0(r2)
 40148dc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40148e0:	e0bffd17 	ldw	r2,-12(fp)
 40148e4:	1080c00c 	andi	r2,r2,768
 40148e8:	10006a26 	beq	r2,zero,4014a94 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40148ec:	e0bffd17 	ldw	r2,-12(fp)
 40148f0:	1080400c 	andi	r2,r2,256
 40148f4:	10003326 	beq	r2,zero,40149c4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40148f8:	00800074 	movhi	r2,1
 40148fc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4014900:	e0bffb17 	ldw	r2,-20(fp)
 4014904:	10800a17 	ldw	r2,40(r2)
 4014908:	10800044 	addi	r2,r2,1
 401490c:	1081ffcc 	andi	r2,r2,2047
 4014910:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4014914:	e0bffb17 	ldw	r2,-20(fp)
 4014918:	10c00b17 	ldw	r3,44(r2)
 401491c:	e0bffe17 	ldw	r2,-8(fp)
 4014920:	18801426 	beq	r3,r2,4014974 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4014924:	e0bffc17 	ldw	r2,-16(fp)
 4014928:	10800037 	ldwio	r2,0(r2)
 401492c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4014930:	e0bff917 	ldw	r2,-28(fp)
 4014934:	10a0000c 	andi	r2,r2,32768
 4014938:	10001026 	beq	r2,zero,401497c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401493c:	e0bffb17 	ldw	r2,-20(fp)
 4014940:	10800a17 	ldw	r2,40(r2)
 4014944:	e0fff917 	ldw	r3,-28(fp)
 4014948:	e13ffb17 	ldw	r4,-20(fp)
 401494c:	2085883a 	add	r2,r4,r2
 4014950:	10800e04 	addi	r2,r2,56
 4014954:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4014958:	e0bffb17 	ldw	r2,-20(fp)
 401495c:	10800a17 	ldw	r2,40(r2)
 4014960:	10800044 	addi	r2,r2,1
 4014964:	10c1ffcc 	andi	r3,r2,2047
 4014968:	e0bffb17 	ldw	r2,-20(fp)
 401496c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4014970:	003fe306 	br	4014900 <__reset+0xfb013900>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4014974:	0001883a 	nop
 4014978:	00000106 	br	4014980 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401497c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4014980:	e0bff917 	ldw	r2,-28(fp)
 4014984:	10bfffec 	andhi	r2,r2,65535
 4014988:	10000e26 	beq	r2,zero,40149c4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401498c:	e0bffb17 	ldw	r2,-20(fp)
 4014990:	10c00817 	ldw	r3,32(r2)
 4014994:	00bfff84 	movi	r2,-2
 4014998:	1886703a 	and	r3,r3,r2
 401499c:	e0bffb17 	ldw	r2,-20(fp)
 40149a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40149a4:	e0bffc17 	ldw	r2,-16(fp)
 40149a8:	10800104 	addi	r2,r2,4
 40149ac:	e0fffb17 	ldw	r3,-20(fp)
 40149b0:	18c00817 	ldw	r3,32(r3)
 40149b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40149b8:	e0bffc17 	ldw	r2,-16(fp)
 40149bc:	10800104 	addi	r2,r2,4
 40149c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40149c4:	e0bffd17 	ldw	r2,-12(fp)
 40149c8:	1080800c 	andi	r2,r2,512
 40149cc:	103fbf26 	beq	r2,zero,40148cc <__reset+0xfb0138cc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40149d0:	e0bffd17 	ldw	r2,-12(fp)
 40149d4:	1004d43a 	srli	r2,r2,16
 40149d8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40149dc:	00001406 	br	4014a30 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40149e0:	e0bffc17 	ldw	r2,-16(fp)
 40149e4:	e0fffb17 	ldw	r3,-20(fp)
 40149e8:	18c00d17 	ldw	r3,52(r3)
 40149ec:	e13ffb17 	ldw	r4,-20(fp)
 40149f0:	20c7883a 	add	r3,r4,r3
 40149f4:	18c20e04 	addi	r3,r3,2104
 40149f8:	18c00003 	ldbu	r3,0(r3)
 40149fc:	18c03fcc 	andi	r3,r3,255
 4014a00:	18c0201c 	xori	r3,r3,128
 4014a04:	18ffe004 	addi	r3,r3,-128
 4014a08:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4014a0c:	e0bffb17 	ldw	r2,-20(fp)
 4014a10:	10800d17 	ldw	r2,52(r2)
 4014a14:	10800044 	addi	r2,r2,1
 4014a18:	10c1ffcc 	andi	r3,r2,2047
 4014a1c:	e0bffb17 	ldw	r2,-20(fp)
 4014a20:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4014a24:	e0bffa17 	ldw	r2,-24(fp)
 4014a28:	10bfffc4 	addi	r2,r2,-1
 4014a2c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4014a30:	e0bffa17 	ldw	r2,-24(fp)
 4014a34:	10000526 	beq	r2,zero,4014a4c <altera_avalon_jtag_uart_irq+0x1a8>
 4014a38:	e0bffb17 	ldw	r2,-20(fp)
 4014a3c:	10c00d17 	ldw	r3,52(r2)
 4014a40:	e0bffb17 	ldw	r2,-20(fp)
 4014a44:	10800c17 	ldw	r2,48(r2)
 4014a48:	18bfe51e 	bne	r3,r2,40149e0 <__reset+0xfb0139e0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4014a4c:	e0bffa17 	ldw	r2,-24(fp)
 4014a50:	103f9e26 	beq	r2,zero,40148cc <__reset+0xfb0138cc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4014a54:	e0bffb17 	ldw	r2,-20(fp)
 4014a58:	10c00817 	ldw	r3,32(r2)
 4014a5c:	00bfff44 	movi	r2,-3
 4014a60:	1886703a 	and	r3,r3,r2
 4014a64:	e0bffb17 	ldw	r2,-20(fp)
 4014a68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4014a6c:	e0bffb17 	ldw	r2,-20(fp)
 4014a70:	10800017 	ldw	r2,0(r2)
 4014a74:	10800104 	addi	r2,r2,4
 4014a78:	e0fffb17 	ldw	r3,-20(fp)
 4014a7c:	18c00817 	ldw	r3,32(r3)
 4014a80:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4014a84:	e0bffc17 	ldw	r2,-16(fp)
 4014a88:	10800104 	addi	r2,r2,4
 4014a8c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4014a90:	003f8e06 	br	40148cc <__reset+0xfb0138cc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4014a94:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4014a98:	e037883a 	mov	sp,fp
 4014a9c:	df000017 	ldw	fp,0(sp)
 4014aa0:	dec00104 	addi	sp,sp,4
 4014aa4:	f800283a 	ret

04014aa8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4014aa8:	defffc04 	addi	sp,sp,-16
 4014aac:	df000315 	stw	fp,12(sp)
 4014ab0:	df000304 	addi	fp,sp,12
 4014ab4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4014ab8:	e0bfff17 	ldw	r2,-4(fp)
 4014abc:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4014ac0:	e0bffd17 	ldw	r2,-12(fp)
 4014ac4:	10800017 	ldw	r2,0(r2)
 4014ac8:	10800104 	addi	r2,r2,4
 4014acc:	10800037 	ldwio	r2,0(r2)
 4014ad0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4014ad4:	e0bffe17 	ldw	r2,-8(fp)
 4014ad8:	1081000c 	andi	r2,r2,1024
 4014adc:	10000a26 	beq	r2,zero,4014b08 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4014ae0:	e0bffd17 	ldw	r2,-12(fp)
 4014ae4:	10800017 	ldw	r2,0(r2)
 4014ae8:	10800104 	addi	r2,r2,4
 4014aec:	e0fffd17 	ldw	r3,-12(fp)
 4014af0:	18c00817 	ldw	r3,32(r3)
 4014af4:	18c10014 	ori	r3,r3,1024
 4014af8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 4014afc:	e0bffd17 	ldw	r2,-12(fp)
 4014b00:	10000915 	stw	zero,36(r2)
 4014b04:	00000a06 	br	4014b30 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4014b08:	e0bffd17 	ldw	r2,-12(fp)
 4014b0c:	10800917 	ldw	r2,36(r2)
 4014b10:	00e00034 	movhi	r3,32768
 4014b14:	18ffff04 	addi	r3,r3,-4
 4014b18:	18800536 	bltu	r3,r2,4014b30 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 4014b1c:	e0bffd17 	ldw	r2,-12(fp)
 4014b20:	10800917 	ldw	r2,36(r2)
 4014b24:	10c00044 	addi	r3,r2,1
 4014b28:	e0bffd17 	ldw	r2,-12(fp)
 4014b2c:	10c00915 	stw	r3,36(r2)
 4014b30:	00810234 	movhi	r2,1032
 4014b34:	10a38d04 	addi	r2,r2,-29132
 4014b38:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4014b3c:	e037883a 	mov	sp,fp
 4014b40:	df000017 	ldw	fp,0(sp)
 4014b44:	dec00104 	addi	sp,sp,4
 4014b48:	f800283a 	ret

04014b4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4014b4c:	defffd04 	addi	sp,sp,-12
 4014b50:	df000215 	stw	fp,8(sp)
 4014b54:	df000204 	addi	fp,sp,8
 4014b58:	e13ffe15 	stw	r4,-8(fp)
 4014b5c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4014b60:	00000506 	br	4014b78 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4014b64:	e0bfff17 	ldw	r2,-4(fp)
 4014b68:	1090000c 	andi	r2,r2,16384
 4014b6c:	10000226 	beq	r2,zero,4014b78 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4014b70:	00bffd44 	movi	r2,-11
 4014b74:	00000b06 	br	4014ba4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4014b78:	e0bffe17 	ldw	r2,-8(fp)
 4014b7c:	10c00d17 	ldw	r3,52(r2)
 4014b80:	e0bffe17 	ldw	r2,-8(fp)
 4014b84:	10800c17 	ldw	r2,48(r2)
 4014b88:	18800526 	beq	r3,r2,4014ba0 <altera_avalon_jtag_uart_close+0x54>
 4014b8c:	e0bffe17 	ldw	r2,-8(fp)
 4014b90:	10c00917 	ldw	r3,36(r2)
 4014b94:	e0bffe17 	ldw	r2,-8(fp)
 4014b98:	10800117 	ldw	r2,4(r2)
 4014b9c:	18bff136 	bltu	r3,r2,4014b64 <__reset+0xfb013b64>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4014ba0:	0005883a 	mov	r2,zero
}
 4014ba4:	e037883a 	mov	sp,fp
 4014ba8:	df000017 	ldw	fp,0(sp)
 4014bac:	dec00104 	addi	sp,sp,4
 4014bb0:	f800283a 	ret

04014bb4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4014bb4:	defffa04 	addi	sp,sp,-24
 4014bb8:	df000515 	stw	fp,20(sp)
 4014bbc:	df000504 	addi	fp,sp,20
 4014bc0:	e13ffd15 	stw	r4,-12(fp)
 4014bc4:	e17ffe15 	stw	r5,-8(fp)
 4014bc8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4014bcc:	00bff9c4 	movi	r2,-25
 4014bd0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4014bd4:	e0bffe17 	ldw	r2,-8(fp)
 4014bd8:	10da8060 	cmpeqi	r3,r2,27137
 4014bdc:	1800031e 	bne	r3,zero,4014bec <altera_avalon_jtag_uart_ioctl+0x38>
 4014be0:	109a80a0 	cmpeqi	r2,r2,27138
 4014be4:	1000181e 	bne	r2,zero,4014c48 <altera_avalon_jtag_uart_ioctl+0x94>
 4014be8:	00002606 	br	4014c84 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4014bec:	e0bffd17 	ldw	r2,-12(fp)
 4014bf0:	10c00117 	ldw	r3,4(r2)
 4014bf4:	00a00034 	movhi	r2,32768
 4014bf8:	10bfffc4 	addi	r2,r2,-1
 4014bfc:	18802226 	beq	r3,r2,4014c88 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 4014c00:	e0bfff17 	ldw	r2,-4(fp)
 4014c04:	10800017 	ldw	r2,0(r2)
 4014c08:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4014c0c:	e0bffc17 	ldw	r2,-16(fp)
 4014c10:	10800090 	cmplti	r2,r2,2
 4014c14:	1000061e 	bne	r2,zero,4014c30 <altera_avalon_jtag_uart_ioctl+0x7c>
 4014c18:	e0fffc17 	ldw	r3,-16(fp)
 4014c1c:	00a00034 	movhi	r2,32768
 4014c20:	10bfffc4 	addi	r2,r2,-1
 4014c24:	18800226 	beq	r3,r2,4014c30 <altera_avalon_jtag_uart_ioctl+0x7c>
 4014c28:	e0bffc17 	ldw	r2,-16(fp)
 4014c2c:	00000206 	br	4014c38 <altera_avalon_jtag_uart_ioctl+0x84>
 4014c30:	00a00034 	movhi	r2,32768
 4014c34:	10bfff84 	addi	r2,r2,-2
 4014c38:	e0fffd17 	ldw	r3,-12(fp)
 4014c3c:	18800115 	stw	r2,4(r3)
      rc = 0;
 4014c40:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4014c44:	00001006 	br	4014c88 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4014c48:	e0bffd17 	ldw	r2,-12(fp)
 4014c4c:	10c00117 	ldw	r3,4(r2)
 4014c50:	00a00034 	movhi	r2,32768
 4014c54:	10bfffc4 	addi	r2,r2,-1
 4014c58:	18800d26 	beq	r3,r2,4014c90 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4014c5c:	e0bffd17 	ldw	r2,-12(fp)
 4014c60:	10c00917 	ldw	r3,36(r2)
 4014c64:	e0bffd17 	ldw	r2,-12(fp)
 4014c68:	10800117 	ldw	r2,4(r2)
 4014c6c:	1885803a 	cmpltu	r2,r3,r2
 4014c70:	10c03fcc 	andi	r3,r2,255
 4014c74:	e0bfff17 	ldw	r2,-4(fp)
 4014c78:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4014c7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4014c80:	00000306 	br	4014c90 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 4014c84:	00000306 	br	4014c94 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4014c88:	0001883a 	nop
 4014c8c:	00000106 	br	4014c94 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4014c90:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4014c94:	e0bffb17 	ldw	r2,-20(fp)
}
 4014c98:	e037883a 	mov	sp,fp
 4014c9c:	df000017 	ldw	fp,0(sp)
 4014ca0:	dec00104 	addi	sp,sp,4
 4014ca4:	f800283a 	ret

04014ca8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4014ca8:	defff304 	addi	sp,sp,-52
 4014cac:	dfc00c15 	stw	ra,48(sp)
 4014cb0:	df000b15 	stw	fp,44(sp)
 4014cb4:	df000b04 	addi	fp,sp,44
 4014cb8:	e13ffc15 	stw	r4,-16(fp)
 4014cbc:	e17ffd15 	stw	r5,-12(fp)
 4014cc0:	e1bffe15 	stw	r6,-8(fp)
 4014cc4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4014cc8:	e0bffd17 	ldw	r2,-12(fp)
 4014ccc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4014cd0:	00004706 	br	4014df0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4014cd4:	e0bffc17 	ldw	r2,-16(fp)
 4014cd8:	10800a17 	ldw	r2,40(r2)
 4014cdc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4014ce0:	e0bffc17 	ldw	r2,-16(fp)
 4014ce4:	10800b17 	ldw	r2,44(r2)
 4014ce8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4014cec:	e0fff717 	ldw	r3,-36(fp)
 4014cf0:	e0bff817 	ldw	r2,-32(fp)
 4014cf4:	18800536 	bltu	r3,r2,4014d0c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4014cf8:	e0fff717 	ldw	r3,-36(fp)
 4014cfc:	e0bff817 	ldw	r2,-32(fp)
 4014d00:	1885c83a 	sub	r2,r3,r2
 4014d04:	e0bff615 	stw	r2,-40(fp)
 4014d08:	00000406 	br	4014d1c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4014d0c:	00c20004 	movi	r3,2048
 4014d10:	e0bff817 	ldw	r2,-32(fp)
 4014d14:	1885c83a 	sub	r2,r3,r2
 4014d18:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4014d1c:	e0bff617 	ldw	r2,-40(fp)
 4014d20:	10001e26 	beq	r2,zero,4014d9c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4014d24:	e0fffe17 	ldw	r3,-8(fp)
 4014d28:	e0bff617 	ldw	r2,-40(fp)
 4014d2c:	1880022e 	bgeu	r3,r2,4014d38 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4014d30:	e0bffe17 	ldw	r2,-8(fp)
 4014d34:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4014d38:	e0bff817 	ldw	r2,-32(fp)
 4014d3c:	10800e04 	addi	r2,r2,56
 4014d40:	e0fffc17 	ldw	r3,-16(fp)
 4014d44:	1885883a 	add	r2,r3,r2
 4014d48:	e13ff517 	ldw	r4,-44(fp)
 4014d4c:	100b883a 	mov	r5,r2
 4014d50:	e1bff617 	ldw	r6,-40(fp)
 4014d54:	400abf80 	call	400abf8 <memcpy>
      ptr   += n;
 4014d58:	e0fff517 	ldw	r3,-44(fp)
 4014d5c:	e0bff617 	ldw	r2,-40(fp)
 4014d60:	1885883a 	add	r2,r3,r2
 4014d64:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4014d68:	e0fffe17 	ldw	r3,-8(fp)
 4014d6c:	e0bff617 	ldw	r2,-40(fp)
 4014d70:	1885c83a 	sub	r2,r3,r2
 4014d74:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4014d78:	e0fff817 	ldw	r3,-32(fp)
 4014d7c:	e0bff617 	ldw	r2,-40(fp)
 4014d80:	1885883a 	add	r2,r3,r2
 4014d84:	10c1ffcc 	andi	r3,r2,2047
 4014d88:	e0bffc17 	ldw	r2,-16(fp)
 4014d8c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4014d90:	e0bffe17 	ldw	r2,-8(fp)
 4014d94:	00bfcf16 	blt	zero,r2,4014cd4 <__reset+0xfb013cd4>
 4014d98:	00000106 	br	4014da0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4014d9c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4014da0:	e0fff517 	ldw	r3,-44(fp)
 4014da4:	e0bffd17 	ldw	r2,-12(fp)
 4014da8:	1880141e 	bne	r3,r2,4014dfc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4014dac:	e0bfff17 	ldw	r2,-4(fp)
 4014db0:	1090000c 	andi	r2,r2,16384
 4014db4:	1000131e 	bne	r2,zero,4014e04 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4014db8:	0001883a 	nop
 4014dbc:	e0bffc17 	ldw	r2,-16(fp)
 4014dc0:	10c00a17 	ldw	r3,40(r2)
 4014dc4:	e0bff717 	ldw	r2,-36(fp)
 4014dc8:	1880051e 	bne	r3,r2,4014de0 <altera_avalon_jtag_uart_read+0x138>
 4014dcc:	e0bffc17 	ldw	r2,-16(fp)
 4014dd0:	10c00917 	ldw	r3,36(r2)
 4014dd4:	e0bffc17 	ldw	r2,-16(fp)
 4014dd8:	10800117 	ldw	r2,4(r2)
 4014ddc:	18bff736 	bltu	r3,r2,4014dbc <__reset+0xfb013dbc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4014de0:	e0bffc17 	ldw	r2,-16(fp)
 4014de4:	10c00a17 	ldw	r3,40(r2)
 4014de8:	e0bff717 	ldw	r2,-36(fp)
 4014dec:	18800726 	beq	r3,r2,4014e0c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4014df0:	e0bffe17 	ldw	r2,-8(fp)
 4014df4:	00bfb716 	blt	zero,r2,4014cd4 <__reset+0xfb013cd4>
 4014df8:	00000506 	br	4014e10 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4014dfc:	0001883a 	nop
 4014e00:	00000306 	br	4014e10 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4014e04:	0001883a 	nop
 4014e08:	00000106 	br	4014e10 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4014e0c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4014e10:	e0fff517 	ldw	r3,-44(fp)
 4014e14:	e0bffd17 	ldw	r2,-12(fp)
 4014e18:	18801726 	beq	r3,r2,4014e78 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014e1c:	0005303a 	rdctl	r2,status
 4014e20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014e24:	e0fffa17 	ldw	r3,-24(fp)
 4014e28:	00bfff84 	movi	r2,-2
 4014e2c:	1884703a 	and	r2,r3,r2
 4014e30:	1001703a 	wrctl	status,r2
  
  return context;
 4014e34:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4014e38:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4014e3c:	e0bffc17 	ldw	r2,-16(fp)
 4014e40:	10800817 	ldw	r2,32(r2)
 4014e44:	10c00054 	ori	r3,r2,1
 4014e48:	e0bffc17 	ldw	r2,-16(fp)
 4014e4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4014e50:	e0bffc17 	ldw	r2,-16(fp)
 4014e54:	10800017 	ldw	r2,0(r2)
 4014e58:	10800104 	addi	r2,r2,4
 4014e5c:	e0fffc17 	ldw	r3,-16(fp)
 4014e60:	18c00817 	ldw	r3,32(r3)
 4014e64:	10c00035 	stwio	r3,0(r2)
 4014e68:	e0bff917 	ldw	r2,-28(fp)
 4014e6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014e70:	e0bffb17 	ldw	r2,-20(fp)
 4014e74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4014e78:	e0fff517 	ldw	r3,-44(fp)
 4014e7c:	e0bffd17 	ldw	r2,-12(fp)
 4014e80:	18800426 	beq	r3,r2,4014e94 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 4014e84:	e0fff517 	ldw	r3,-44(fp)
 4014e88:	e0bffd17 	ldw	r2,-12(fp)
 4014e8c:	1885c83a 	sub	r2,r3,r2
 4014e90:	00000606 	br	4014eac <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 4014e94:	e0bfff17 	ldw	r2,-4(fp)
 4014e98:	1090000c 	andi	r2,r2,16384
 4014e9c:	10000226 	beq	r2,zero,4014ea8 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 4014ea0:	00bffd44 	movi	r2,-11
 4014ea4:	00000106 	br	4014eac <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 4014ea8:	00bffec4 	movi	r2,-5
}
 4014eac:	e037883a 	mov	sp,fp
 4014eb0:	dfc00117 	ldw	ra,4(sp)
 4014eb4:	df000017 	ldw	fp,0(sp)
 4014eb8:	dec00204 	addi	sp,sp,8
 4014ebc:	f800283a 	ret

04014ec0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4014ec0:	defff304 	addi	sp,sp,-52
 4014ec4:	dfc00c15 	stw	ra,48(sp)
 4014ec8:	df000b15 	stw	fp,44(sp)
 4014ecc:	df000b04 	addi	fp,sp,44
 4014ed0:	e13ffc15 	stw	r4,-16(fp)
 4014ed4:	e17ffd15 	stw	r5,-12(fp)
 4014ed8:	e1bffe15 	stw	r6,-8(fp)
 4014edc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4014ee0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4014ee4:	e0bffd17 	ldw	r2,-12(fp)
 4014ee8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4014eec:	00003706 	br	4014fcc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4014ef0:	e0bffc17 	ldw	r2,-16(fp)
 4014ef4:	10800c17 	ldw	r2,48(r2)
 4014ef8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 4014efc:	e0bffc17 	ldw	r2,-16(fp)
 4014f00:	10800d17 	ldw	r2,52(r2)
 4014f04:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4014f08:	e0fff817 	ldw	r3,-32(fp)
 4014f0c:	e0bff517 	ldw	r2,-44(fp)
 4014f10:	1880062e 	bgeu	r3,r2,4014f2c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4014f14:	e0fff517 	ldw	r3,-44(fp)
 4014f18:	e0bff817 	ldw	r2,-32(fp)
 4014f1c:	1885c83a 	sub	r2,r3,r2
 4014f20:	10bfffc4 	addi	r2,r2,-1
 4014f24:	e0bff615 	stw	r2,-40(fp)
 4014f28:	00000b06 	br	4014f58 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4014f2c:	e0bff517 	ldw	r2,-44(fp)
 4014f30:	10000526 	beq	r2,zero,4014f48 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4014f34:	00c20004 	movi	r3,2048
 4014f38:	e0bff817 	ldw	r2,-32(fp)
 4014f3c:	1885c83a 	sub	r2,r3,r2
 4014f40:	e0bff615 	stw	r2,-40(fp)
 4014f44:	00000406 	br	4014f58 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4014f48:	00c1ffc4 	movi	r3,2047
 4014f4c:	e0bff817 	ldw	r2,-32(fp)
 4014f50:	1885c83a 	sub	r2,r3,r2
 4014f54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4014f58:	e0bff617 	ldw	r2,-40(fp)
 4014f5c:	10001e26 	beq	r2,zero,4014fd8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4014f60:	e0fffe17 	ldw	r3,-8(fp)
 4014f64:	e0bff617 	ldw	r2,-40(fp)
 4014f68:	1880022e 	bgeu	r3,r2,4014f74 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4014f6c:	e0bffe17 	ldw	r2,-8(fp)
 4014f70:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4014f74:	e0bff817 	ldw	r2,-32(fp)
 4014f78:	10820e04 	addi	r2,r2,2104
 4014f7c:	e0fffc17 	ldw	r3,-16(fp)
 4014f80:	1885883a 	add	r2,r3,r2
 4014f84:	1009883a 	mov	r4,r2
 4014f88:	e17ffd17 	ldw	r5,-12(fp)
 4014f8c:	e1bff617 	ldw	r6,-40(fp)
 4014f90:	400abf80 	call	400abf8 <memcpy>
      ptr   += n;
 4014f94:	e0fffd17 	ldw	r3,-12(fp)
 4014f98:	e0bff617 	ldw	r2,-40(fp)
 4014f9c:	1885883a 	add	r2,r3,r2
 4014fa0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4014fa4:	e0fffe17 	ldw	r3,-8(fp)
 4014fa8:	e0bff617 	ldw	r2,-40(fp)
 4014fac:	1885c83a 	sub	r2,r3,r2
 4014fb0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4014fb4:	e0fff817 	ldw	r3,-32(fp)
 4014fb8:	e0bff617 	ldw	r2,-40(fp)
 4014fbc:	1885883a 	add	r2,r3,r2
 4014fc0:	10c1ffcc 	andi	r3,r2,2047
 4014fc4:	e0bffc17 	ldw	r2,-16(fp)
 4014fc8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4014fcc:	e0bffe17 	ldw	r2,-8(fp)
 4014fd0:	00bfc716 	blt	zero,r2,4014ef0 <__reset+0xfb013ef0>
 4014fd4:	00000106 	br	4014fdc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4014fd8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014fdc:	0005303a 	rdctl	r2,status
 4014fe0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014fe4:	e0fffa17 	ldw	r3,-24(fp)
 4014fe8:	00bfff84 	movi	r2,-2
 4014fec:	1884703a 	and	r2,r3,r2
 4014ff0:	1001703a 	wrctl	status,r2
  
  return context;
 4014ff4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4014ff8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4014ffc:	e0bffc17 	ldw	r2,-16(fp)
 4015000:	10800817 	ldw	r2,32(r2)
 4015004:	10c00094 	ori	r3,r2,2
 4015008:	e0bffc17 	ldw	r2,-16(fp)
 401500c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4015010:	e0bffc17 	ldw	r2,-16(fp)
 4015014:	10800017 	ldw	r2,0(r2)
 4015018:	10800104 	addi	r2,r2,4
 401501c:	e0fffc17 	ldw	r3,-16(fp)
 4015020:	18c00817 	ldw	r3,32(r3)
 4015024:	10c00035 	stwio	r3,0(r2)
 4015028:	e0bff917 	ldw	r2,-28(fp)
 401502c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015030:	e0bffb17 	ldw	r2,-20(fp)
 4015034:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4015038:	e0bffe17 	ldw	r2,-8(fp)
 401503c:	0080100e 	bge	zero,r2,4015080 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
 4015040:	e0bfff17 	ldw	r2,-4(fp)
 4015044:	1090000c 	andi	r2,r2,16384
 4015048:	1000101e 	bne	r2,zero,401508c <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401504c:	0001883a 	nop
 4015050:	e0bffc17 	ldw	r2,-16(fp)
 4015054:	10c00d17 	ldw	r3,52(r2)
 4015058:	e0bff517 	ldw	r2,-44(fp)
 401505c:	1880051e 	bne	r3,r2,4015074 <altera_avalon_jtag_uart_write+0x1b4>
 4015060:	e0bffc17 	ldw	r2,-16(fp)
 4015064:	10c00917 	ldw	r3,36(r2)
 4015068:	e0bffc17 	ldw	r2,-16(fp)
 401506c:	10800117 	ldw	r2,4(r2)
 4015070:	18bff736 	bltu	r3,r2,4015050 <__reset+0xfb014050>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4015074:	e0bffc17 	ldw	r2,-16(fp)
 4015078:	10800917 	ldw	r2,36(r2)
 401507c:	1000051e 	bne	r2,zero,4015094 <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
 4015080:	e0bffe17 	ldw	r2,-8(fp)
 4015084:	00bfd116 	blt	zero,r2,4014fcc <__reset+0xfb013fcc>
 4015088:	00000306 	br	4015098 <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401508c:	0001883a 	nop
 4015090:	00000106 	br	4015098 <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4015094:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4015098:	e0fffd17 	ldw	r3,-12(fp)
 401509c:	e0bff717 	ldw	r2,-36(fp)
 40150a0:	18800426 	beq	r3,r2,40150b4 <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
 40150a4:	e0fffd17 	ldw	r3,-12(fp)
 40150a8:	e0bff717 	ldw	r2,-36(fp)
 40150ac:	1885c83a 	sub	r2,r3,r2
 40150b0:	00000606 	br	40150cc <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
 40150b4:	e0bfff17 	ldw	r2,-4(fp)
 40150b8:	1090000c 	andi	r2,r2,16384
 40150bc:	10000226 	beq	r2,zero,40150c8 <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
 40150c0:	00bffd44 	movi	r2,-11
 40150c4:	00000106 	br	40150cc <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40150c8:	00bffec4 	movi	r2,-5
}
 40150cc:	e037883a 	mov	sp,fp
 40150d0:	dfc00117 	ldw	ra,4(sp)
 40150d4:	df000017 	ldw	fp,0(sp)
 40150d8:	dec00204 	addi	sp,sp,8
 40150dc:	f800283a 	ret

040150e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 40150e0:	defffa04 	addi	sp,sp,-24
 40150e4:	dfc00515 	stw	ra,20(sp)
 40150e8:	df000415 	stw	fp,16(sp)
 40150ec:	df000404 	addi	fp,sp,16
 40150f0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40150f4:	0007883a 	mov	r3,zero
 40150f8:	e0bfff17 	ldw	r2,-4(fp)
 40150fc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4015100:	e0bfff17 	ldw	r2,-4(fp)
 4015104:	10800104 	addi	r2,r2,4
 4015108:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401510c:	0005303a 	rdctl	r2,status
 4015110:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015114:	e0fffd17 	ldw	r3,-12(fp)
 4015118:	00bfff84 	movi	r2,-2
 401511c:	1884703a 	and	r2,r3,r2
 4015120:	1001703a 	wrctl	status,r2
  
  return context;
 4015124:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4015128:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401512c:	40139a80 	call	40139a8 <alt_tick>
 4015130:	e0bffc17 	ldw	r2,-16(fp)
 4015134:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015138:	e0bffe17 	ldw	r2,-8(fp)
 401513c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4015140:	e037883a 	mov	sp,fp
 4015144:	dfc00117 	ldw	ra,4(sp)
 4015148:	df000017 	ldw	fp,0(sp)
 401514c:	dec00204 	addi	sp,sp,8
 4015150:	f800283a 	ret

04015154 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4015154:	defff804 	addi	sp,sp,-32
 4015158:	dfc00715 	stw	ra,28(sp)
 401515c:	df000615 	stw	fp,24(sp)
 4015160:	df000604 	addi	fp,sp,24
 4015164:	e13ffc15 	stw	r4,-16(fp)
 4015168:	e17ffd15 	stw	r5,-12(fp)
 401516c:	e1bffe15 	stw	r6,-8(fp)
 4015170:	e1ffff15 	stw	r7,-4(fp)
 4015174:	e0bfff17 	ldw	r2,-4(fp)
 4015178:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401517c:	00810234 	movhi	r2,1032
 4015180:	10a38d04 	addi	r2,r2,-29132
 4015184:	10800017 	ldw	r2,0(r2)
 4015188:	1000041e 	bne	r2,zero,401519c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 401518c:	00810234 	movhi	r2,1032
 4015190:	10a38d04 	addi	r2,r2,-29132
 4015194:	e0fffb17 	ldw	r3,-20(fp)
 4015198:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401519c:	e0bffc17 	ldw	r2,-16(fp)
 40151a0:	10800104 	addi	r2,r2,4
 40151a4:	00c001c4 	movi	r3,7
 40151a8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 40151ac:	d8000015 	stw	zero,0(sp)
 40151b0:	e13ffd17 	ldw	r4,-12(fp)
 40151b4:	e17ffe17 	ldw	r5,-8(fp)
 40151b8:	01810074 	movhi	r6,1025
 40151bc:	31943804 	addi	r6,r6,20704
 40151c0:	e1fffc17 	ldw	r7,-16(fp)
 40151c4:	40131040 	call	4013104 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 40151c8:	e037883a 	mov	sp,fp
 40151cc:	dfc00117 	ldw	ra,4(sp)
 40151d0:	df000017 	ldw	fp,0(sp)
 40151d4:	dec00204 	addi	sp,sp,8
 40151d8:	f800283a 	ret

040151dc <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 40151dc:	defff904 	addi	sp,sp,-28
 40151e0:	dfc00615 	stw	ra,24(sp)
 40151e4:	df000515 	stw	fp,20(sp)
 40151e8:	df000504 	addi	fp,sp,20
 40151ec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 40151f0:	00800144 	movi	r2,5
 40151f4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 40151f8:	00800044 	movi	r2,1
 40151fc:	d8800015 	stw	r2,0(sp)
 4015200:	e0bffe44 	addi	r2,fp,-7
 4015204:	d8800115 	stw	r2,4(sp)
 4015208:	d8000215 	stw	zero,8(sp)
 401520c:	e13fff17 	ldw	r4,-4(fp)
 4015210:	000b883a 	mov	r5,zero
 4015214:	01800044 	movi	r6,1
 4015218:	e1fffe04 	addi	r7,fp,-8
 401521c:	40161040 	call	4016104 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 4015220:	e0bffe43 	ldbu	r2,-7(fp)
}
 4015224:	e037883a 	mov	sp,fp
 4015228:	dfc00117 	ldw	ra,4(sp)
 401522c:	df000017 	ldw	fp,0(sp)
 4015230:	dec00204 	addi	sp,sp,8
 4015234:	f800283a 	ret

04015238 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 4015238:	defffd04 	addi	sp,sp,-12
 401523c:	dfc00215 	stw	ra,8(sp)
 4015240:	df000115 	stw	fp,4(sp)
 4015244:	df000104 	addi	fp,sp,4
 4015248:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 401524c:	e13fff17 	ldw	r4,-4(fp)
 4015250:	40151dc0 	call	40151dc <epcs_read_status_register>
 4015254:	10803fcc 	andi	r2,r2,255
 4015258:	1080004c 	andi	r2,r2,1
}
 401525c:	e037883a 	mov	sp,fp
 4015260:	dfc00117 	ldw	ra,4(sp)
 4015264:	df000017 	ldw	fp,0(sp)
 4015268:	dec00204 	addi	sp,sp,8
 401526c:	f800283a 	ret

04015270 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 4015270:	defffd04 	addi	sp,sp,-12
 4015274:	dfc00215 	stw	ra,8(sp)
 4015278:	df000115 	stw	fp,4(sp)
 401527c:	df000104 	addi	fp,sp,4
 4015280:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 4015284:	0001883a 	nop
 4015288:	e13fff17 	ldw	r4,-4(fp)
 401528c:	40152380 	call	4015238 <epcs_test_wip>
 4015290:	103ffd1e 	bne	r2,zero,4015288 <__reset+0xfb014288>
  {
  }
}
 4015294:	e037883a 	mov	sp,fp
 4015298:	dfc00117 	ldw	ra,4(sp)
 401529c:	df000017 	ldw	fp,0(sp)
 40152a0:	dec00204 	addi	sp,sp,8
 40152a4:	f800283a 	ret

040152a8 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 40152a8:	defff604 	addi	sp,sp,-40
 40152ac:	dfc00915 	stw	ra,36(sp)
 40152b0:	df000815 	stw	fp,32(sp)
 40152b4:	df000804 	addi	fp,sp,32
 40152b8:	e13ffd15 	stw	r4,-12(fp)
 40152bc:	e17ffe15 	stw	r5,-8(fp)
 40152c0:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 40152c4:	e0bfff17 	ldw	r2,-4(fp)
 40152c8:	10001226 	beq	r2,zero,4015314 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 40152cc:	00bff604 	movi	r2,-40
 40152d0:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 40152d4:	e0bffe17 	ldw	r2,-8(fp)
 40152d8:	1004d63a 	srli	r2,r2,24
 40152dc:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 40152e0:	e0bffe17 	ldw	r2,-8(fp)
 40152e4:	1004d43a 	srli	r2,r2,16
 40152e8:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 40152ec:	e0bffe17 	ldw	r2,-8(fp)
 40152f0:	1004d23a 	srli	r2,r2,8
 40152f4:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 40152f8:	e0bffe17 	ldw	r2,-8(fp)
 40152fc:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 4015300:	00800144 	movi	r2,5
 4015304:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 4015308:	e13ffd17 	ldw	r4,-12(fp)
 401530c:	40157500 	call	4015750 <epcs_enter_4_bytes_mode>
 4015310:	00000c06 	br	4015344 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 4015314:	00bff604 	movi	r2,-40
 4015318:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 401531c:	e0bffe17 	ldw	r2,-8(fp)
 4015320:	1004d43a 	srli	r2,r2,16
 4015324:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 4015328:	e0bffe17 	ldw	r2,-8(fp)
 401532c:	1004d23a 	srli	r2,r2,8
 4015330:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 4015334:	e0bffe17 	ldw	r2,-8(fp)
 4015338:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 401533c:	00800104 	movi	r2,4
 4015340:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 4015344:	e13ffd17 	ldw	r4,-12(fp)
 4015348:	40154940 	call	4015494 <epcs_write_enable>

  alt_avalon_spi_command(
 401534c:	e0fffb03 	ldbu	r3,-20(fp)
    base,
    0,
    len,
    se,
 4015350:	e0bffb44 	addi	r2,fp,-19
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);

  alt_avalon_spi_command(
 4015354:	d8000015 	stw	zero,0(sp)
 4015358:	d8000115 	stw	zero,4(sp)
 401535c:	d8000215 	stw	zero,8(sp)
 4015360:	e13ffd17 	ldw	r4,-12(fp)
 4015364:	000b883a 	mov	r5,zero
 4015368:	180d883a 	mov	r6,r3
 401536c:	100f883a 	mov	r7,r2
 4015370:	40161040 	call	4016104 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 4015374:	e13ffd17 	ldw	r4,-12(fp)
 4015378:	40152700 	call	4015270 <epcs_await_wip_released>

  if(four_bytes_mode)
 401537c:	e0bfff17 	ldw	r2,-4(fp)
 4015380:	10000226 	beq	r2,zero,401538c <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 4015384:	e13ffd17 	ldw	r4,-12(fp)
 4015388:	40157a80 	call	40157a8 <epcs_exit_4_bytes_mode>
  }
}
 401538c:	e037883a 	mov	sp,fp
 4015390:	dfc00117 	ldw	ra,4(sp)
 4015394:	df000017 	ldw	fp,0(sp)
 4015398:	dec00204 	addi	sp,sp,8
 401539c:	f800283a 	ret

040153a0 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 40153a0:	defff404 	addi	sp,sp,-48
 40153a4:	dfc00b15 	stw	ra,44(sp)
 40153a8:	df000a15 	stw	fp,40(sp)
 40153ac:	df000a04 	addi	fp,sp,40
 40153b0:	e13ffc15 	stw	r4,-16(fp)
 40153b4:	e17ffd15 	stw	r5,-12(fp)
 40153b8:	e1bffe15 	stw	r6,-8(fp)
 40153bc:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 40153c0:	008000c4 	movi	r2,3
 40153c4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 40153c8:	e0800217 	ldw	r2,8(fp)
 40153cc:	10001026 	beq	r2,zero,4015410 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 40153d0:	e0bffd17 	ldw	r2,-12(fp)
 40153d4:	1004d63a 	srli	r2,r2,24
 40153d8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 40153dc:	e0bffd17 	ldw	r2,-12(fp)
 40153e0:	1005d43a 	srai	r2,r2,16
 40153e4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 40153e8:	e0bffd17 	ldw	r2,-12(fp)
 40153ec:	1005d23a 	srai	r2,r2,8
 40153f0:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 40153f4:	e0bffd17 	ldw	r2,-12(fp)
 40153f8:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 40153fc:	00800144 	movi	r2,5
 4015400:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 4015404:	e13ffc17 	ldw	r4,-16(fp)
 4015408:	40157500 	call	4015750 <epcs_enter_4_bytes_mode>
 401540c:	00000a06 	br	4015438 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 4015410:	e0bffd17 	ldw	r2,-12(fp)
 4015414:	1005d43a 	srai	r2,r2,16
 4015418:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 401541c:	e0bffd17 	ldw	r2,-12(fp)
 4015420:	1005d23a 	srai	r2,r2,8
 4015424:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 4015428:	e0bffd17 	ldw	r2,-12(fp)
 401542c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 4015430:	00800104 	movi	r2,4
 4015434:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 4015438:	e13ffc17 	ldw	r4,-16(fp)
 401543c:	40152700 	call	4015270 <epcs_await_wip_released>

  alt_avalon_spi_command(
 4015440:	e0ffff17 	ldw	r3,-4(fp)
    base,
    0,
    cmd_len,
    read_command,
 4015444:	e0bffa04 	addi	r2,fp,-24
        cmd_len = 4;
  }

  epcs_await_wip_released(base);

  alt_avalon_spi_command(
 4015448:	d8c00015 	stw	r3,0(sp)
 401544c:	e0fffe17 	ldw	r3,-8(fp)
 4015450:	d8c00115 	stw	r3,4(sp)
 4015454:	d8000215 	stw	zero,8(sp)
 4015458:	e13ffc17 	ldw	r4,-16(fp)
 401545c:	000b883a 	mov	r5,zero
 4015460:	e1bff917 	ldw	r6,-28(fp)
 4015464:	100f883a 	mov	r7,r2
 4015468:	40161040 	call	4016104 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 401546c:	e0800217 	ldw	r2,8(fp)
 4015470:	10000226 	beq	r2,zero,401547c <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 4015474:	e13ffc17 	ldw	r4,-16(fp)
 4015478:	40157a80 	call	40157a8 <epcs_exit_4_bytes_mode>
  }

  return length;
 401547c:	e0bfff17 	ldw	r2,-4(fp)
}
 4015480:	e037883a 	mov	sp,fp
 4015484:	dfc00117 	ldw	ra,4(sp)
 4015488:	df000017 	ldw	fp,0(sp)
 401548c:	dec00204 	addi	sp,sp,8
 4015490:	f800283a 	ret

04015494 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 4015494:	defff904 	addi	sp,sp,-28
 4015498:	dfc00615 	stw	ra,24(sp)
 401549c:	df000515 	stw	fp,20(sp)
 40154a0:	df000504 	addi	fp,sp,20
 40154a4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 40154a8:	00800184 	movi	r2,6
 40154ac:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 40154b0:	d8000015 	stw	zero,0(sp)
 40154b4:	d8000115 	stw	zero,4(sp)
 40154b8:	d8000215 	stw	zero,8(sp)
 40154bc:	e13fff17 	ldw	r4,-4(fp)
 40154c0:	000b883a 	mov	r5,zero
 40154c4:	01800044 	movi	r6,1
 40154c8:	e1fffe04 	addi	r7,fp,-8
 40154cc:	40161040 	call	4016104 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 40154d0:	e037883a 	mov	sp,fp
 40154d4:	dfc00117 	ldw	ra,4(sp)
 40154d8:	df000017 	ldw	fp,0(sp)
 40154dc:	dec00204 	addi	sp,sp,8
 40154e0:	f800283a 	ret

040154e4 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 40154e4:	defff804 	addi	sp,sp,-32
 40154e8:	dfc00715 	stw	ra,28(sp)
 40154ec:	df000615 	stw	fp,24(sp)
 40154f0:	df000604 	addi	fp,sp,24
 40154f4:	e13ffe15 	stw	r4,-8(fp)
 40154f8:	2805883a 	mov	r2,r5
 40154fc:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 4015500:	00800044 	movi	r2,1
 4015504:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 4015508:	e0bfff03 	ldbu	r2,-4(fp)
 401550c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 4015510:	d8000015 	stw	zero,0(sp)
 4015514:	d8000115 	stw	zero,4(sp)
 4015518:	d8000215 	stw	zero,8(sp)
 401551c:	e13ffe17 	ldw	r4,-8(fp)
 4015520:	000b883a 	mov	r5,zero
 4015524:	01800084 	movi	r6,2
 4015528:	e1fffd04 	addi	r7,fp,-12
 401552c:	40161040 	call	4016104 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 4015530:	e13ffe17 	ldw	r4,-8(fp)
 4015534:	40152700 	call	4015270 <epcs_await_wip_released>
}
 4015538:	e037883a 	mov	sp,fp
 401553c:	dfc00117 	ldw	ra,4(sp)
 4015540:	df000017 	ldw	fp,0(sp)
 4015544:	dec00204 	addi	sp,sp,8
 4015548:	f800283a 	ret

0401554c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 401554c:	defff404 	addi	sp,sp,-48
 4015550:	dfc00b15 	stw	ra,44(sp)
 4015554:	df000a15 	stw	fp,40(sp)
 4015558:	df000a04 	addi	fp,sp,40
 401555c:	e13ffc15 	stw	r4,-16(fp)
 4015560:	e17ffd15 	stw	r5,-12(fp)
 4015564:	e1bffe15 	stw	r6,-8(fp)
 4015568:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 401556c:	00800084 	movi	r2,2
 4015570:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 4015574:	e0800217 	ldw	r2,8(fp)
 4015578:	10001026 	beq	r2,zero,40155bc <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 401557c:	e0bffd17 	ldw	r2,-12(fp)
 4015580:	1004d63a 	srli	r2,r2,24
 4015584:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 4015588:	e0bffd17 	ldw	r2,-12(fp)
 401558c:	1005d43a 	srai	r2,r2,16
 4015590:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 4015594:	e0bffd17 	ldw	r2,-12(fp)
 4015598:	1005d23a 	srai	r2,r2,8
 401559c:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 40155a0:	e0bffd17 	ldw	r2,-12(fp)
 40155a4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 40155a8:	00800144 	movi	r2,5
 40155ac:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 40155b0:	e13ffc17 	ldw	r4,-16(fp)
 40155b4:	40157500 	call	4015750 <epcs_enter_4_bytes_mode>
 40155b8:	00000a06 	br	40155e4 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 40155bc:	e0bffd17 	ldw	r2,-12(fp)
 40155c0:	1005d43a 	srai	r2,r2,16
 40155c4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 40155c8:	e0bffd17 	ldw	r2,-12(fp)
 40155cc:	1005d23a 	srai	r2,r2,8
 40155d0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 40155d4:	e0bffd17 	ldw	r2,-12(fp)
 40155d8:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 40155dc:	00800104 	movi	r2,4
 40155e0:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 40155e4:	e13ffc17 	ldw	r4,-16(fp)
 40155e8:	40154940 	call	4015494 <epcs_write_enable>
  /* Send the PP command */
  alt_avalon_spi_command(
    base,
    0,
    cmd_len,
    pp,
 40155ec:	e0bffa04 	addi	r2,fp,-24

  /* First, WREN */
  epcs_write_enable(base);

  /* Send the PP command */
  alt_avalon_spi_command(
 40155f0:	d8000015 	stw	zero,0(sp)
 40155f4:	d8000115 	stw	zero,4(sp)
 40155f8:	00c00044 	movi	r3,1
 40155fc:	d8c00215 	stw	r3,8(sp)
 4015600:	e13ffc17 	ldw	r4,-16(fp)
 4015604:	000b883a 	mov	r5,zero
 4015608:	e1bff917 	ldw	r6,-28(fp)
 401560c:	100f883a 	mov	r7,r2
 4015610:	40161040 	call	4016104 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 4015614:	e0bfff17 	ldw	r2,-4(fp)
 4015618:	d8000015 	stw	zero,0(sp)
 401561c:	d8000115 	stw	zero,4(sp)
 4015620:	d8000215 	stw	zero,8(sp)
 4015624:	e13ffc17 	ldw	r4,-16(fp)
 4015628:	000b883a 	mov	r5,zero
 401562c:	100d883a 	mov	r6,r2
 4015630:	e1fffe17 	ldw	r7,-8(fp)
 4015634:	40161040 	call	4016104 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 4015638:	e13ffc17 	ldw	r4,-16(fp)
 401563c:	40152700 	call	4015270 <epcs_await_wip_released>

  if(four_bytes_mode)
 4015640:	e0800217 	ldw	r2,8(fp)
 4015644:	10000226 	beq	r2,zero,4015650 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 4015648:	e13ffc17 	ldw	r4,-16(fp)
 401564c:	40157a80 	call	40157a8 <epcs_exit_4_bytes_mode>
  }

  return length;
 4015650:	e0bfff17 	ldw	r2,-4(fp)
}
 4015654:	e037883a 	mov	sp,fp
 4015658:	dfc00117 	ldw	ra,4(sp)
 401565c:	df000017 	ldw	fp,0(sp)
 4015660:	dec00204 	addi	sp,sp,8
 4015664:	f800283a 	ret

04015668 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 4015668:	defff804 	addi	sp,sp,-32
 401566c:	dfc00715 	stw	ra,28(sp)
 4015670:	df000615 	stw	fp,24(sp)
 4015674:	df000604 	addi	fp,sp,24
 4015678:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 401567c:	00bfeac4 	movi	r2,-85
 4015680:	e0bffd05 	stb	r2,-12(fp)
 4015684:	e03ffd45 	stb	zero,-11(fp)
 4015688:	e03ffd85 	stb	zero,-10(fp)
 401568c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 4015690:	00800044 	movi	r2,1
 4015694:	d8800015 	stw	r2,0(sp)
 4015698:	e0bffe04 	addi	r2,fp,-8
 401569c:	d8800115 	stw	r2,4(sp)
 40156a0:	d8000215 	stw	zero,8(sp)
 40156a4:	e13fff17 	ldw	r4,-4(fp)
 40156a8:	000b883a 	mov	r5,zero
 40156ac:	01800104 	movi	r6,4
 40156b0:	e1fffd04 	addi	r7,fp,-12
 40156b4:	40161040 	call	4016104 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 40156b8:	e0bffe03 	ldbu	r2,-8(fp)
}
 40156bc:	e037883a 	mov	sp,fp
 40156c0:	dfc00117 	ldw	ra,4(sp)
 40156c4:	df000017 	ldw	fp,0(sp)
 40156c8:	dec00204 	addi	sp,sp,8
 40156cc:	f800283a 	ret

040156d0 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 40156d0:	defff904 	addi	sp,sp,-28
 40156d4:	dfc00615 	stw	ra,24(sp)
 40156d8:	df000515 	stw	fp,20(sp)
 40156dc:	df000504 	addi	fp,sp,20
 40156e0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 40156e4:	00bfe7c4 	movi	r2,-97
 40156e8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 40156ec:	008000c4 	movi	r2,3
 40156f0:	d8800015 	stw	r2,0(sp)
    base,
    0,
    sizeof(rd_id_cmd) / sizeof(*rd_id_cmd),
    rd_id_cmd,
    3,
    id,
 40156f4:	e0bffe44 	addi	r2,fp,-7
alt_u32 epcs_read_device_id(alt_u32 base)
{
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
 40156f8:	d8800115 	stw	r2,4(sp)
 40156fc:	d8000215 	stw	zero,8(sp)
 4015700:	e13fff17 	ldw	r4,-4(fp)
 4015704:	000b883a 	mov	r5,zero
 4015708:	01800044 	movi	r6,1
 401570c:	e1fffe04 	addi	r7,fp,-8
 4015710:	40161040 	call	4016104 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 4015714:	e0bffe43 	ldbu	r2,-7(fp)
 4015718:	10803fcc 	andi	r2,r2,255
 401571c:	1006943a 	slli	r3,r2,16
 4015720:	e0bffe83 	ldbu	r2,-6(fp)
 4015724:	10803fcc 	andi	r2,r2,255
 4015728:	1004923a 	slli	r2,r2,8
 401572c:	1886b03a 	or	r3,r3,r2
 4015730:	e0bffec3 	ldbu	r2,-5(fp)
 4015734:	10803fcc 	andi	r2,r2,255
 4015738:	1884b03a 	or	r2,r3,r2
}
 401573c:	e037883a 	mov	sp,fp
 4015740:	dfc00117 	ldw	ra,4(sp)
 4015744:	df000017 	ldw	fp,0(sp)
 4015748:	dec00204 	addi	sp,sp,8
 401574c:	f800283a 	ret

04015750 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 4015750:	defff904 	addi	sp,sp,-28
 4015754:	dfc00615 	stw	ra,24(sp)
 4015758:	df000515 	stw	fp,20(sp)
 401575c:	df000504 	addi	fp,sp,20
 4015760:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 4015764:	00bfedc4 	movi	r2,-73
 4015768:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 401576c:	e13fff17 	ldw	r4,-4(fp)
 4015770:	40154940 	call	4015494 <epcs_write_enable>

  alt_avalon_spi_command(
 4015774:	d8000015 	stw	zero,0(sp)
 4015778:	d8000115 	stw	zero,4(sp)
 401577c:	d8000215 	stw	zero,8(sp)
 4015780:	e13fff17 	ldw	r4,-4(fp)
 4015784:	000b883a 	mov	r5,zero
 4015788:	01800044 	movi	r6,1
 401578c:	e1fffe04 	addi	r7,fp,-8
 4015790:	40161040 	call	4016104 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 4015794:	e037883a 	mov	sp,fp
 4015798:	dfc00117 	ldw	ra,4(sp)
 401579c:	df000017 	ldw	fp,0(sp)
 40157a0:	dec00204 	addi	sp,sp,8
 40157a4:	f800283a 	ret

040157a8 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 40157a8:	defff904 	addi	sp,sp,-28
 40157ac:	dfc00615 	stw	ra,24(sp)
 40157b0:	df000515 	stw	fp,20(sp)
 40157b4:	df000504 	addi	fp,sp,20
 40157b8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 40157bc:	00bffa44 	movi	r2,-23
 40157c0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 40157c4:	e13fff17 	ldw	r4,-4(fp)
 40157c8:	40154940 	call	4015494 <epcs_write_enable>

  alt_avalon_spi_command(
 40157cc:	d8000015 	stw	zero,0(sp)
 40157d0:	d8000115 	stw	zero,4(sp)
 40157d4:	d8000215 	stw	zero,8(sp)
 40157d8:	e13fff17 	ldw	r4,-4(fp)
 40157dc:	000b883a 	mov	r5,zero
 40157e0:	01800044 	movi	r6,1
 40157e4:	e1fffe04 	addi	r7,fp,-8
 40157e8:	40161040 	call	4016104 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 40157ec:	e037883a 	mov	sp,fp
 40157f0:	dfc00117 	ldw	ra,4(sp)
 40157f4:	df000017 	ldw	fp,0(sp)
 40157f8:	dec00204 	addi	sp,sp,8
 40157fc:	f800283a 	ret

04015800 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4015800:	defff504 	addi	sp,sp,-44
 4015804:	df000a15 	stw	fp,40(sp)
 4015808:	df000a04 	addi	fp,sp,40
 401580c:	e13ffc15 	stw	r4,-16(fp)
 4015810:	e17ffd15 	stw	r5,-12(fp)
 4015814:	e1bffe15 	stw	r6,-8(fp)
 4015818:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401581c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4015820:	00810234 	movhi	r2,1032
 4015824:	10a38d04 	addi	r2,r2,-29132
 4015828:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 401582c:	10003f26 	beq	r2,zero,401592c <alt_alarm_start+0x12c>
  {
    if (alarm)
 4015830:	e0bffc17 	ldw	r2,-16(fp)
 4015834:	10003b26 	beq	r2,zero,4015924 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 4015838:	e0bffc17 	ldw	r2,-16(fp)
 401583c:	e0fffe17 	ldw	r3,-8(fp)
 4015840:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4015844:	e0bffc17 	ldw	r2,-16(fp)
 4015848:	e0ffff17 	ldw	r3,-4(fp)
 401584c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015850:	0005303a 	rdctl	r2,status
 4015854:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015858:	e0fff817 	ldw	r3,-32(fp)
 401585c:	00bfff84 	movi	r2,-2
 4015860:	1884703a 	and	r2,r3,r2
 4015864:	1001703a 	wrctl	status,r2
  
  return context;
 4015868:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 401586c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4015870:	00810234 	movhi	r2,1032
 4015874:	10a38e04 	addi	r2,r2,-29128
 4015878:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 401587c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4015880:	e0fffd17 	ldw	r3,-12(fp)
 4015884:	e0bff617 	ldw	r2,-40(fp)
 4015888:	1885883a 	add	r2,r3,r2
 401588c:	10c00044 	addi	r3,r2,1
 4015890:	e0bffc17 	ldw	r2,-16(fp)
 4015894:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4015898:	e0bffc17 	ldw	r2,-16(fp)
 401589c:	10c00217 	ldw	r3,8(r2)
 40158a0:	e0bff617 	ldw	r2,-40(fp)
 40158a4:	1880042e 	bgeu	r3,r2,40158b8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 40158a8:	e0bffc17 	ldw	r2,-16(fp)
 40158ac:	00c00044 	movi	r3,1
 40158b0:	10c00405 	stb	r3,16(r2)
 40158b4:	00000206 	br	40158c0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 40158b8:	e0bffc17 	ldw	r2,-16(fp)
 40158bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 40158c0:	e0bffc17 	ldw	r2,-16(fp)
 40158c4:	00c10234 	movhi	r3,1032
 40158c8:	18e37d04 	addi	r3,r3,-29196
 40158cc:	e0fff915 	stw	r3,-28(fp)
 40158d0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40158d4:	e0bffa17 	ldw	r2,-24(fp)
 40158d8:	e0fff917 	ldw	r3,-28(fp)
 40158dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40158e0:	e0bff917 	ldw	r2,-28(fp)
 40158e4:	10c00017 	ldw	r3,0(r2)
 40158e8:	e0bffa17 	ldw	r2,-24(fp)
 40158ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40158f0:	e0bff917 	ldw	r2,-28(fp)
 40158f4:	10800017 	ldw	r2,0(r2)
 40158f8:	e0fffa17 	ldw	r3,-24(fp)
 40158fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4015900:	e0bff917 	ldw	r2,-28(fp)
 4015904:	e0fffa17 	ldw	r3,-24(fp)
 4015908:	10c00015 	stw	r3,0(r2)
 401590c:	e0bff717 	ldw	r2,-36(fp)
 4015910:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015914:	e0bffb17 	ldw	r2,-20(fp)
 4015918:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401591c:	0005883a 	mov	r2,zero
 4015920:	00000306 	br	4015930 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 4015924:	00bffa84 	movi	r2,-22
 4015928:	00000106 	br	4015930 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 401592c:	00bfde84 	movi	r2,-134
  }
}
 4015930:	e037883a 	mov	sp,fp
 4015934:	df000017 	ldw	fp,0(sp)
 4015938:	dec00104 	addi	sp,sp,4
 401593c:	f800283a 	ret

04015940 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4015940:	defffa04 	addi	sp,sp,-24
 4015944:	dfc00515 	stw	ra,20(sp)
 4015948:	df000415 	stw	fp,16(sp)
 401594c:	df000404 	addi	fp,sp,16
 4015950:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4015954:	008000c4 	movi	r2,3
 4015958:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401595c:	e13ffd17 	ldw	r4,-12(fp)
 4015960:	014003f4 	movhi	r5,15
 4015964:	29509004 	addi	r5,r5,16960
 4015968:	4009dd80 	call	4009dd8 <__mulsi3>
 401596c:	0101c9f4 	movhi	r4,1831
 4015970:	21038004 	addi	r4,r4,3584
 4015974:	100b883a 	mov	r5,r2
 4015978:	4009dc80 	call	4009dc8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401597c:	01200034 	movhi	r4,32768
 4015980:	213fffc4 	addi	r4,r4,-1
 4015984:	100b883a 	mov	r5,r2
 4015988:	4009dc80 	call	4009dc8 <__udivsi3>
 401598c:	e13fff17 	ldw	r4,-4(fp)
 4015990:	100b883a 	mov	r5,r2
 4015994:	4009dc80 	call	4009dc8 <__udivsi3>
 4015998:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401599c:	e0bffe17 	ldw	r2,-8(fp)
 40159a0:	10002926 	beq	r2,zero,4015a48 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 40159a4:	e03ffc15 	stw	zero,-16(fp)
 40159a8:	00001606 	br	4015a04 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40159ac:	00a00034 	movhi	r2,32768
 40159b0:	10bfffc4 	addi	r2,r2,-1
 40159b4:	10bfffc4 	addi	r2,r2,-1
 40159b8:	103ffe1e 	bne	r2,zero,40159b4 <__reset+0xfb0149b4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40159bc:	e13ffd17 	ldw	r4,-12(fp)
 40159c0:	014003f4 	movhi	r5,15
 40159c4:	29509004 	addi	r5,r5,16960
 40159c8:	4009dd80 	call	4009dd8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40159cc:	0101c9f4 	movhi	r4,1831
 40159d0:	21038004 	addi	r4,r4,3584
 40159d4:	100b883a 	mov	r5,r2
 40159d8:	4009dc80 	call	4009dc8 <__udivsi3>
 40159dc:	01200034 	movhi	r4,32768
 40159e0:	213fffc4 	addi	r4,r4,-1
 40159e4:	100b883a 	mov	r5,r2
 40159e8:	4009dc80 	call	4009dc8 <__udivsi3>
 40159ec:	e0ffff17 	ldw	r3,-4(fp)
 40159f0:	1885c83a 	sub	r2,r3,r2
 40159f4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 40159f8:	e0bffc17 	ldw	r2,-16(fp)
 40159fc:	10800044 	addi	r2,r2,1
 4015a00:	e0bffc15 	stw	r2,-16(fp)
 4015a04:	e0fffc17 	ldw	r3,-16(fp)
 4015a08:	e0bffe17 	ldw	r2,-8(fp)
 4015a0c:	18bfe716 	blt	r3,r2,40159ac <__reset+0xfb0149ac>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4015a10:	e13ffd17 	ldw	r4,-12(fp)
 4015a14:	014003f4 	movhi	r5,15
 4015a18:	29509004 	addi	r5,r5,16960
 4015a1c:	4009dd80 	call	4009dd8 <__mulsi3>
 4015a20:	0101c9f4 	movhi	r4,1831
 4015a24:	21038004 	addi	r4,r4,3584
 4015a28:	100b883a 	mov	r5,r2
 4015a2c:	4009dc80 	call	4009dc8 <__udivsi3>
 4015a30:	1009883a 	mov	r4,r2
 4015a34:	e17fff17 	ldw	r5,-4(fp)
 4015a38:	4009dd80 	call	4009dd8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4015a3c:	10bfffc4 	addi	r2,r2,-1
 4015a40:	103ffe1e 	bne	r2,zero,4015a3c <__reset+0xfb014a3c>
 4015a44:	00000d06 	br	4015a7c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4015a48:	e13ffd17 	ldw	r4,-12(fp)
 4015a4c:	014003f4 	movhi	r5,15
 4015a50:	29509004 	addi	r5,r5,16960
 4015a54:	4009dd80 	call	4009dd8 <__mulsi3>
 4015a58:	0101c9f4 	movhi	r4,1831
 4015a5c:	21038004 	addi	r4,r4,3584
 4015a60:	100b883a 	mov	r5,r2
 4015a64:	4009dc80 	call	4009dc8 <__udivsi3>
 4015a68:	1009883a 	mov	r4,r2
 4015a6c:	e17fff17 	ldw	r5,-4(fp)
 4015a70:	4009dd80 	call	4009dd8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4015a74:	10bfffc4 	addi	r2,r2,-1
 4015a78:	00bffe16 	blt	zero,r2,4015a74 <__reset+0xfb014a74>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4015a7c:	0005883a 	mov	r2,zero
}
 4015a80:	e037883a 	mov	sp,fp
 4015a84:	dfc00117 	ldw	ra,4(sp)
 4015a88:	df000017 	ldw	fp,0(sp)
 4015a8c:	dec00204 	addi	sp,sp,8
 4015a90:	f800283a 	ret

04015a94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4015a94:	defffe04 	addi	sp,sp,-8
 4015a98:	dfc00115 	stw	ra,4(sp)
 4015a9c:	df000015 	stw	fp,0(sp)
 4015aa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4015aa4:	00810234 	movhi	r2,1032
 4015aa8:	10a37a04 	addi	r2,r2,-29208
 4015aac:	10800017 	ldw	r2,0(r2)
 4015ab0:	10000526 	beq	r2,zero,4015ac8 <alt_get_errno+0x34>
 4015ab4:	00810234 	movhi	r2,1032
 4015ab8:	10a37a04 	addi	r2,r2,-29208
 4015abc:	10800017 	ldw	r2,0(r2)
 4015ac0:	103ee83a 	callr	r2
 4015ac4:	00000206 	br	4015ad0 <alt_get_errno+0x3c>
 4015ac8:	00810234 	movhi	r2,1032
 4015acc:	10a38504 	addi	r2,r2,-29164
}
 4015ad0:	e037883a 	mov	sp,fp
 4015ad4:	dfc00117 	ldw	ra,4(sp)
 4015ad8:	df000017 	ldw	fp,0(sp)
 4015adc:	dec00204 	addi	sp,sp,8
 4015ae0:	f800283a 	ret

04015ae4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4015ae4:	defffa04 	addi	sp,sp,-24
 4015ae8:	dfc00515 	stw	ra,20(sp)
 4015aec:	df000415 	stw	fp,16(sp)
 4015af0:	df000404 	addi	fp,sp,16
 4015af4:	e13ffe15 	stw	r4,-8(fp)
 4015af8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4015afc:	e0bffe17 	ldw	r2,-8(fp)
 4015b00:	10000326 	beq	r2,zero,4015b10 <alt_dev_llist_insert+0x2c>
 4015b04:	e0bffe17 	ldw	r2,-8(fp)
 4015b08:	10800217 	ldw	r2,8(r2)
 4015b0c:	1000051e 	bne	r2,zero,4015b24 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 4015b10:	4015a940 	call	4015a94 <alt_get_errno>
 4015b14:	00c00584 	movi	r3,22
 4015b18:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4015b1c:	00bffa84 	movi	r2,-22
 4015b20:	00001306 	br	4015b70 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4015b24:	e0bffe17 	ldw	r2,-8(fp)
 4015b28:	e0ffff17 	ldw	r3,-4(fp)
 4015b2c:	e0fffc15 	stw	r3,-16(fp)
 4015b30:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4015b34:	e0bffd17 	ldw	r2,-12(fp)
 4015b38:	e0fffc17 	ldw	r3,-16(fp)
 4015b3c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4015b40:	e0bffc17 	ldw	r2,-16(fp)
 4015b44:	10c00017 	ldw	r3,0(r2)
 4015b48:	e0bffd17 	ldw	r2,-12(fp)
 4015b4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4015b50:	e0bffc17 	ldw	r2,-16(fp)
 4015b54:	10800017 	ldw	r2,0(r2)
 4015b58:	e0fffd17 	ldw	r3,-12(fp)
 4015b5c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4015b60:	e0bffc17 	ldw	r2,-16(fp)
 4015b64:	e0fffd17 	ldw	r3,-12(fp)
 4015b68:	10c00015 	stw	r3,0(r2)

  return 0;  
 4015b6c:	0005883a 	mov	r2,zero
}
 4015b70:	e037883a 	mov	sp,fp
 4015b74:	dfc00117 	ldw	ra,4(sp)
 4015b78:	df000017 	ldw	fp,0(sp)
 4015b7c:	dec00204 	addi	sp,sp,8
 4015b80:	f800283a 	ret

04015b84 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4015b84:	defffd04 	addi	sp,sp,-12
 4015b88:	dfc00215 	stw	ra,8(sp)
 4015b8c:	df000115 	stw	fp,4(sp)
 4015b90:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4015b94:	00810074 	movhi	r2,1025
 4015b98:	109a5504 	addi	r2,r2,26964
 4015b9c:	e0bfff15 	stw	r2,-4(fp)
 4015ba0:	00000606 	br	4015bbc <_do_ctors+0x38>
        (*ctor) (); 
 4015ba4:	e0bfff17 	ldw	r2,-4(fp)
 4015ba8:	10800017 	ldw	r2,0(r2)
 4015bac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4015bb0:	e0bfff17 	ldw	r2,-4(fp)
 4015bb4:	10bfff04 	addi	r2,r2,-4
 4015bb8:	e0bfff15 	stw	r2,-4(fp)
 4015bbc:	e0ffff17 	ldw	r3,-4(fp)
 4015bc0:	00810074 	movhi	r2,1025
 4015bc4:	109a5604 	addi	r2,r2,26968
 4015bc8:	18bff62e 	bgeu	r3,r2,4015ba4 <__reset+0xfb014ba4>
        (*ctor) (); 
}
 4015bcc:	e037883a 	mov	sp,fp
 4015bd0:	dfc00117 	ldw	ra,4(sp)
 4015bd4:	df000017 	ldw	fp,0(sp)
 4015bd8:	dec00204 	addi	sp,sp,8
 4015bdc:	f800283a 	ret

04015be0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4015be0:	defffd04 	addi	sp,sp,-12
 4015be4:	dfc00215 	stw	ra,8(sp)
 4015be8:	df000115 	stw	fp,4(sp)
 4015bec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4015bf0:	00810074 	movhi	r2,1025
 4015bf4:	109a5504 	addi	r2,r2,26964
 4015bf8:	e0bfff15 	stw	r2,-4(fp)
 4015bfc:	00000606 	br	4015c18 <_do_dtors+0x38>
        (*dtor) (); 
 4015c00:	e0bfff17 	ldw	r2,-4(fp)
 4015c04:	10800017 	ldw	r2,0(r2)
 4015c08:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4015c0c:	e0bfff17 	ldw	r2,-4(fp)
 4015c10:	10bfff04 	addi	r2,r2,-4
 4015c14:	e0bfff15 	stw	r2,-4(fp)
 4015c18:	e0ffff17 	ldw	r3,-4(fp)
 4015c1c:	00810074 	movhi	r2,1025
 4015c20:	109a5604 	addi	r2,r2,26968
 4015c24:	18bff62e 	bgeu	r3,r2,4015c00 <__reset+0xfb014c00>
        (*dtor) (); 
}
 4015c28:	e037883a 	mov	sp,fp
 4015c2c:	dfc00117 	ldw	ra,4(sp)
 4015c30:	df000017 	ldw	fp,0(sp)
 4015c34:	dec00204 	addi	sp,sp,8
 4015c38:	f800283a 	ret

04015c3c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4015c3c:	defffc04 	addi	sp,sp,-16
 4015c40:	dfc00315 	stw	ra,12(sp)
 4015c44:	df000215 	stw	fp,8(sp)
 4015c48:	df000204 	addi	fp,sp,8
 4015c4c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4015c50:	e13fff17 	ldw	r4,-4(fp)
 4015c54:	d1601204 	addi	r5,gp,-32696
 4015c58:	401630c0 	call	401630c <alt_find_dev>
 4015c5c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 4015c60:	e0bffe17 	ldw	r2,-8(fp)
 4015c64:	10000926 	beq	r2,zero,4015c8c <alt_flash_open_dev+0x50>
 4015c68:	e0bffe17 	ldw	r2,-8(fp)
 4015c6c:	10800317 	ldw	r2,12(r2)
 4015c70:	10000626 	beq	r2,zero,4015c8c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 4015c74:	e0bffe17 	ldw	r2,-8(fp)
 4015c78:	10800317 	ldw	r2,12(r2)
 4015c7c:	e13ffe17 	ldw	r4,-8(fp)
 4015c80:	e17fff17 	ldw	r5,-4(fp)
 4015c84:	103ee83a 	callr	r2
 4015c88:	00000106 	br	4015c90 <alt_flash_open_dev+0x54>
  }

  return dev;
 4015c8c:	e0bffe17 	ldw	r2,-8(fp)
}
 4015c90:	e037883a 	mov	sp,fp
 4015c94:	dfc00117 	ldw	ra,4(sp)
 4015c98:	df000017 	ldw	fp,0(sp)
 4015c9c:	dec00204 	addi	sp,sp,8
 4015ca0:	f800283a 	ret

04015ca4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 4015ca4:	defffd04 	addi	sp,sp,-12
 4015ca8:	dfc00215 	stw	ra,8(sp)
 4015cac:	df000115 	stw	fp,4(sp)
 4015cb0:	df000104 	addi	fp,sp,4
 4015cb4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 4015cb8:	e0bfff17 	ldw	r2,-4(fp)
 4015cbc:	10000726 	beq	r2,zero,4015cdc <alt_flash_close_dev+0x38>
 4015cc0:	e0bfff17 	ldw	r2,-4(fp)
 4015cc4:	10800417 	ldw	r2,16(r2)
 4015cc8:	10000426 	beq	r2,zero,4015cdc <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 4015ccc:	e0bfff17 	ldw	r2,-4(fp)
 4015cd0:	10800417 	ldw	r2,16(r2)
 4015cd4:	e13fff17 	ldw	r4,-4(fp)
 4015cd8:	103ee83a 	callr	r2
  }
  return;
 4015cdc:	0001883a 	nop
}
 4015ce0:	e037883a 	mov	sp,fp
 4015ce4:	dfc00117 	ldw	ra,4(sp)
 4015ce8:	df000017 	ldw	fp,0(sp)
 4015cec:	dec00204 	addi	sp,sp,8
 4015cf0:	f800283a 	ret

04015cf4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4015cf4:	defff804 	addi	sp,sp,-32
 4015cf8:	dfc00715 	stw	ra,28(sp)
 4015cfc:	df000615 	stw	fp,24(sp)
 4015d00:	dc000515 	stw	r16,20(sp)
 4015d04:	df000504 	addi	fp,sp,20
 4015d08:	e13ffc15 	stw	r4,-16(fp)
 4015d0c:	e17ffd15 	stw	r5,-12(fp)
 4015d10:	e1bffe15 	stw	r6,-8(fp)
 4015d14:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4015d18:	e13ffd17 	ldw	r4,-12(fp)
 4015d1c:	e17ffe17 	ldw	r5,-8(fp)
 4015d20:	e1bfff17 	ldw	r6,-4(fp)
 4015d24:	4015f8c0 	call	4015f8c <open>
 4015d28:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4015d2c:	e0bffb17 	ldw	r2,-20(fp)
 4015d30:	10002216 	blt	r2,zero,4015dbc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4015d34:	040101f4 	movhi	r16,1031
 4015d38:	841ec304 	addi	r16,r16,31500
 4015d3c:	e0bffb17 	ldw	r2,-20(fp)
 4015d40:	1009883a 	mov	r4,r2
 4015d44:	01400304 	movi	r5,12
 4015d48:	4009dd80 	call	4009dd8 <__mulsi3>
 4015d4c:	8085883a 	add	r2,r16,r2
 4015d50:	10c00017 	ldw	r3,0(r2)
 4015d54:	e0bffc17 	ldw	r2,-16(fp)
 4015d58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4015d5c:	040101f4 	movhi	r16,1031
 4015d60:	841ec304 	addi	r16,r16,31500
 4015d64:	e0bffb17 	ldw	r2,-20(fp)
 4015d68:	1009883a 	mov	r4,r2
 4015d6c:	01400304 	movi	r5,12
 4015d70:	4009dd80 	call	4009dd8 <__mulsi3>
 4015d74:	8085883a 	add	r2,r16,r2
 4015d78:	10800104 	addi	r2,r2,4
 4015d7c:	10c00017 	ldw	r3,0(r2)
 4015d80:	e0bffc17 	ldw	r2,-16(fp)
 4015d84:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4015d88:	040101f4 	movhi	r16,1031
 4015d8c:	841ec304 	addi	r16,r16,31500
 4015d90:	e0bffb17 	ldw	r2,-20(fp)
 4015d94:	1009883a 	mov	r4,r2
 4015d98:	01400304 	movi	r5,12
 4015d9c:	4009dd80 	call	4009dd8 <__mulsi3>
 4015da0:	8085883a 	add	r2,r16,r2
 4015da4:	10800204 	addi	r2,r2,8
 4015da8:	10c00017 	ldw	r3,0(r2)
 4015dac:	e0bffc17 	ldw	r2,-16(fp)
 4015db0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4015db4:	e13ffb17 	ldw	r4,-20(fp)
 4015db8:	40137e00 	call	40137e0 <alt_release_fd>
  }
} 
 4015dbc:	e037883a 	mov	sp,fp
 4015dc0:	dfc00217 	ldw	ra,8(sp)
 4015dc4:	df000117 	ldw	fp,4(sp)
 4015dc8:	dc000017 	ldw	r16,0(sp)
 4015dcc:	dec00304 	addi	sp,sp,12
 4015dd0:	f800283a 	ret

04015dd4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4015dd4:	defffb04 	addi	sp,sp,-20
 4015dd8:	dfc00415 	stw	ra,16(sp)
 4015ddc:	df000315 	stw	fp,12(sp)
 4015de0:	df000304 	addi	fp,sp,12
 4015de4:	e13ffd15 	stw	r4,-12(fp)
 4015de8:	e17ffe15 	stw	r5,-8(fp)
 4015dec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4015df0:	010101f4 	movhi	r4,1031
 4015df4:	211ec604 	addi	r4,r4,31512
 4015df8:	e17ffd17 	ldw	r5,-12(fp)
 4015dfc:	01800044 	movi	r6,1
 4015e00:	01c07fc4 	movi	r7,511
 4015e04:	4015cf40 	call	4015cf4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4015e08:	010101f4 	movhi	r4,1031
 4015e0c:	211ec304 	addi	r4,r4,31500
 4015e10:	e17ffe17 	ldw	r5,-8(fp)
 4015e14:	000d883a 	mov	r6,zero
 4015e18:	01c07fc4 	movi	r7,511
 4015e1c:	4015cf40 	call	4015cf4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4015e20:	010101f4 	movhi	r4,1031
 4015e24:	211ec904 	addi	r4,r4,31524
 4015e28:	e17fff17 	ldw	r5,-4(fp)
 4015e2c:	01800044 	movi	r6,1
 4015e30:	01c07fc4 	movi	r7,511
 4015e34:	4015cf40 	call	4015cf4 <alt_open_fd>
}  
 4015e38:	e037883a 	mov	sp,fp
 4015e3c:	dfc00117 	ldw	ra,4(sp)
 4015e40:	df000017 	ldw	fp,0(sp)
 4015e44:	dec00204 	addi	sp,sp,8
 4015e48:	f800283a 	ret

04015e4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4015e4c:	defffe04 	addi	sp,sp,-8
 4015e50:	dfc00115 	stw	ra,4(sp)
 4015e54:	df000015 	stw	fp,0(sp)
 4015e58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4015e5c:	00810234 	movhi	r2,1032
 4015e60:	10a37a04 	addi	r2,r2,-29208
 4015e64:	10800017 	ldw	r2,0(r2)
 4015e68:	10000526 	beq	r2,zero,4015e80 <alt_get_errno+0x34>
 4015e6c:	00810234 	movhi	r2,1032
 4015e70:	10a37a04 	addi	r2,r2,-29208
 4015e74:	10800017 	ldw	r2,0(r2)
 4015e78:	103ee83a 	callr	r2
 4015e7c:	00000206 	br	4015e88 <alt_get_errno+0x3c>
 4015e80:	00810234 	movhi	r2,1032
 4015e84:	10a38504 	addi	r2,r2,-29164
}
 4015e88:	e037883a 	mov	sp,fp
 4015e8c:	dfc00117 	ldw	ra,4(sp)
 4015e90:	df000017 	ldw	fp,0(sp)
 4015e94:	dec00204 	addi	sp,sp,8
 4015e98:	f800283a 	ret

04015e9c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4015e9c:	defffb04 	addi	sp,sp,-20
 4015ea0:	dfc00415 	stw	ra,16(sp)
 4015ea4:	df000315 	stw	fp,12(sp)
 4015ea8:	dc000215 	stw	r16,8(sp)
 4015eac:	df000204 	addi	fp,sp,8
 4015eb0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4015eb4:	e0bfff17 	ldw	r2,-4(fp)
 4015eb8:	10800217 	ldw	r2,8(r2)
 4015ebc:	10d00034 	orhi	r3,r2,16384
 4015ec0:	e0bfff17 	ldw	r2,-4(fp)
 4015ec4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4015ec8:	e03ffe15 	stw	zero,-8(fp)
 4015ecc:	00002206 	br	4015f58 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4015ed0:	040101f4 	movhi	r16,1031
 4015ed4:	841ec304 	addi	r16,r16,31500
 4015ed8:	e0bffe17 	ldw	r2,-8(fp)
 4015edc:	1009883a 	mov	r4,r2
 4015ee0:	01400304 	movi	r5,12
 4015ee4:	4009dd80 	call	4009dd8 <__mulsi3>
 4015ee8:	8085883a 	add	r2,r16,r2
 4015eec:	10c00017 	ldw	r3,0(r2)
 4015ef0:	e0bfff17 	ldw	r2,-4(fp)
 4015ef4:	10800017 	ldw	r2,0(r2)
 4015ef8:	1880141e 	bne	r3,r2,4015f4c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4015efc:	040101f4 	movhi	r16,1031
 4015f00:	841ec304 	addi	r16,r16,31500
 4015f04:	e0bffe17 	ldw	r2,-8(fp)
 4015f08:	1009883a 	mov	r4,r2
 4015f0c:	01400304 	movi	r5,12
 4015f10:	4009dd80 	call	4009dd8 <__mulsi3>
 4015f14:	8085883a 	add	r2,r16,r2
 4015f18:	10800204 	addi	r2,r2,8
 4015f1c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4015f20:	10000a0e 	bge	r2,zero,4015f4c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4015f24:	e13ffe17 	ldw	r4,-8(fp)
 4015f28:	01400304 	movi	r5,12
 4015f2c:	4009dd80 	call	4009dd8 <__mulsi3>
 4015f30:	00c101f4 	movhi	r3,1031
 4015f34:	18dec304 	addi	r3,r3,31500
 4015f38:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4015f3c:	e0bfff17 	ldw	r2,-4(fp)
 4015f40:	18800226 	beq	r3,r2,4015f4c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4015f44:	00bffcc4 	movi	r2,-13
 4015f48:	00000a06 	br	4015f74 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4015f4c:	e0bffe17 	ldw	r2,-8(fp)
 4015f50:	10800044 	addi	r2,r2,1
 4015f54:	e0bffe15 	stw	r2,-8(fp)
 4015f58:	00810234 	movhi	r2,1032
 4015f5c:	10a37904 	addi	r2,r2,-29212
 4015f60:	10800017 	ldw	r2,0(r2)
 4015f64:	1007883a 	mov	r3,r2
 4015f68:	e0bffe17 	ldw	r2,-8(fp)
 4015f6c:	18bfd82e 	bgeu	r3,r2,4015ed0 <__reset+0xfb014ed0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4015f70:	0005883a 	mov	r2,zero
}
 4015f74:	e037883a 	mov	sp,fp
 4015f78:	dfc00217 	ldw	ra,8(sp)
 4015f7c:	df000117 	ldw	fp,4(sp)
 4015f80:	dc000017 	ldw	r16,0(sp)
 4015f84:	dec00304 	addi	sp,sp,12
 4015f88:	f800283a 	ret

04015f8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4015f8c:	defff604 	addi	sp,sp,-40
 4015f90:	dfc00915 	stw	ra,36(sp)
 4015f94:	df000815 	stw	fp,32(sp)
 4015f98:	df000804 	addi	fp,sp,32
 4015f9c:	e13ffd15 	stw	r4,-12(fp)
 4015fa0:	e17ffe15 	stw	r5,-8(fp)
 4015fa4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4015fa8:	00bfffc4 	movi	r2,-1
 4015fac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4015fb0:	00bffb44 	movi	r2,-19
 4015fb4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4015fb8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4015fbc:	e13ffd17 	ldw	r4,-12(fp)
 4015fc0:	01410234 	movhi	r5,1032
 4015fc4:	29637704 	addi	r5,r5,-29220
 4015fc8:	401630c0 	call	401630c <alt_find_dev>
 4015fcc:	e0bff815 	stw	r2,-32(fp)
 4015fd0:	e0bff817 	ldw	r2,-32(fp)
 4015fd4:	1000051e 	bne	r2,zero,4015fec <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4015fd8:	e13ffd17 	ldw	r4,-12(fp)
 4015fdc:	401639c0 	call	401639c <alt_find_file>
 4015fe0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4015fe4:	00800044 	movi	r2,1
 4015fe8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4015fec:	e0bff817 	ldw	r2,-32(fp)
 4015ff0:	10002a26 	beq	r2,zero,401609c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4015ff4:	e13ff817 	ldw	r4,-32(fp)
 4015ff8:	40164b00 	call	40164b0 <alt_get_fd>
 4015ffc:	e0bff915 	stw	r2,-28(fp)
 4016000:	e0bff917 	ldw	r2,-28(fp)
 4016004:	1000030e 	bge	r2,zero,4016014 <open+0x88>
    {
      status = index;
 4016008:	e0bff917 	ldw	r2,-28(fp)
 401600c:	e0bffa15 	stw	r2,-24(fp)
 4016010:	00002406 	br	40160a4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4016014:	e13ff917 	ldw	r4,-28(fp)
 4016018:	01400304 	movi	r5,12
 401601c:	4009dd80 	call	4009dd8 <__mulsi3>
 4016020:	00c101f4 	movhi	r3,1031
 4016024:	18dec304 	addi	r3,r3,31500
 4016028:	10c5883a 	add	r2,r2,r3
 401602c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4016030:	e0fffe17 	ldw	r3,-8(fp)
 4016034:	00900034 	movhi	r2,16384
 4016038:	10bfffc4 	addi	r2,r2,-1
 401603c:	1886703a 	and	r3,r3,r2
 4016040:	e0bffc17 	ldw	r2,-16(fp)
 4016044:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4016048:	e0bffb17 	ldw	r2,-20(fp)
 401604c:	1000051e 	bne	r2,zero,4016064 <open+0xd8>
 4016050:	e13ffc17 	ldw	r4,-16(fp)
 4016054:	4015e9c0 	call	4015e9c <alt_file_locked>
 4016058:	e0bffa15 	stw	r2,-24(fp)
 401605c:	e0bffa17 	ldw	r2,-24(fp)
 4016060:	10001016 	blt	r2,zero,40160a4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4016064:	e0bff817 	ldw	r2,-32(fp)
 4016068:	10800317 	ldw	r2,12(r2)
 401606c:	10000826 	beq	r2,zero,4016090 <open+0x104>
 4016070:	e0bff817 	ldw	r2,-32(fp)
 4016074:	10800317 	ldw	r2,12(r2)
 4016078:	e13ffc17 	ldw	r4,-16(fp)
 401607c:	e17ffd17 	ldw	r5,-12(fp)
 4016080:	e1bffe17 	ldw	r6,-8(fp)
 4016084:	e1ffff17 	ldw	r7,-4(fp)
 4016088:	103ee83a 	callr	r2
 401608c:	00000106 	br	4016094 <open+0x108>
 4016090:	0005883a 	mov	r2,zero
 4016094:	e0bffa15 	stw	r2,-24(fp)
 4016098:	00000206 	br	40160a4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401609c:	00bffb44 	movi	r2,-19
 40160a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40160a4:	e0bffa17 	ldw	r2,-24(fp)
 40160a8:	1000080e 	bge	r2,zero,40160cc <open+0x140>
  {
    alt_release_fd (index);  
 40160ac:	e13ff917 	ldw	r4,-28(fp)
 40160b0:	40137e00 	call	40137e0 <alt_release_fd>
    ALT_ERRNO = -status;
 40160b4:	4015e4c0 	call	4015e4c <alt_get_errno>
 40160b8:	e0fffa17 	ldw	r3,-24(fp)
 40160bc:	00c7c83a 	sub	r3,zero,r3
 40160c0:	10c00015 	stw	r3,0(r2)
    return -1;
 40160c4:	00bfffc4 	movi	r2,-1
 40160c8:	00000106 	br	40160d0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 40160cc:	e0bff917 	ldw	r2,-28(fp)
}
 40160d0:	e037883a 	mov	sp,fp
 40160d4:	dfc00117 	ldw	ra,4(sp)
 40160d8:	df000017 	ldw	fp,0(sp)
 40160dc:	dec00204 	addi	sp,sp,8
 40160e0:	f800283a 	ret

040160e4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 40160e4:	deffff04 	addi	sp,sp,-4
 40160e8:	df000015 	stw	fp,0(sp)
 40160ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40160f0:	000170fa 	wrctl	ienable,zero
}
 40160f4:	e037883a 	mov	sp,fp
 40160f8:	df000017 	ldw	fp,0(sp)
 40160fc:	dec00104 	addi	sp,sp,4
 4016100:	f800283a 	ret

04016104 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4016104:	defff404 	addi	sp,sp,-48
 4016108:	df000b15 	stw	fp,44(sp)
 401610c:	df000b04 	addi	fp,sp,44
 4016110:	e13ffc15 	stw	r4,-16(fp)
 4016114:	e17ffd15 	stw	r5,-12(fp)
 4016118:	e1bffe15 	stw	r6,-8(fp)
 401611c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 4016120:	e0ffff17 	ldw	r3,-4(fp)
 4016124:	e0bffe17 	ldw	r2,-8(fp)
 4016128:	1885883a 	add	r2,r3,r2
 401612c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 4016130:	e0c00217 	ldw	r3,8(fp)
 4016134:	e0800117 	ldw	r2,4(fp)
 4016138:	1885883a 	add	r2,r3,r2
 401613c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 4016140:	e0800117 	ldw	r2,4(fp)
 4016144:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 4016148:	e0bffe17 	ldw	r2,-8(fp)
 401614c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4016150:	00800044 	movi	r2,1
 4016154:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4016158:	e0bffc17 	ldw	r2,-16(fp)
 401615c:	10800504 	addi	r2,r2,20
 4016160:	e0fffd17 	ldw	r3,-12(fp)
 4016164:	01000044 	movi	r4,1
 4016168:	20c6983a 	sll	r3,r4,r3
 401616c:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4016170:	e0800317 	ldw	r2,12(fp)
 4016174:	1080008c 	andi	r2,r2,2
 4016178:	1000041e 	bne	r2,zero,401618c <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401617c:	e0bffc17 	ldw	r2,-16(fp)
 4016180:	10800304 	addi	r2,r2,12
 4016184:	00c10004 	movi	r3,1024
 4016188:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401618c:	e0bffc17 	ldw	r2,-16(fp)
 4016190:	10800037 	ldwio	r2,0(r2)
 4016194:	00000106 	br	401619c <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
 4016198:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401619c:	e0bffc17 	ldw	r2,-16(fp)
 40161a0:	10800204 	addi	r2,r2,8
 40161a4:	10800037 	ldwio	r2,0(r2)
 40161a8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 40161ac:	e0bffa17 	ldw	r2,-24(fp)
 40161b0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 40161b4:	10000226 	beq	r2,zero,40161c0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 40161b8:	e0bff717 	ldw	r2,-36(fp)
 40161bc:	1000031e 	bne	r2,zero,40161cc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 40161c0:	e0bffa17 	ldw	r2,-24(fp)
 40161c4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 40161c8:	103ff426 	beq	r2,zero,401619c <__reset+0xfb01519c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 40161cc:	e0bffa17 	ldw	r2,-24(fp)
 40161d0:	1080100c 	andi	r2,r2,64
 40161d4:	10001e26 	beq	r2,zero,4016250 <alt_avalon_spi_command+0x14c>
 40161d8:	e0bff717 	ldw	r2,-36(fp)
 40161dc:	00801c0e 	bge	zero,r2,4016250 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 40161e0:	e0bff717 	ldw	r2,-36(fp)
 40161e4:	10bfffc4 	addi	r2,r2,-1
 40161e8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 40161ec:	e0ffff17 	ldw	r3,-4(fp)
 40161f0:	e0bff817 	ldw	r2,-32(fp)
 40161f4:	18800a2e 	bgeu	r3,r2,4016220 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 40161f8:	e0bffc17 	ldw	r2,-16(fp)
 40161fc:	10800104 	addi	r2,r2,4
 4016200:	e0ffff17 	ldw	r3,-4(fp)
 4016204:	18c00003 	ldbu	r3,0(r3)
 4016208:	18c03fcc 	andi	r3,r3,255
 401620c:	e13fff17 	ldw	r4,-4(fp)
 4016210:	21000044 	addi	r4,r4,1
 4016214:	e13fff15 	stw	r4,-4(fp)
 4016218:	10c00035 	stwio	r3,0(r2)
 401621c:	00000c06 	br	4016250 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 4016220:	e0bff517 	ldw	r2,-44(fp)
 4016224:	10000826 	beq	r2,zero,4016248 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 4016228:	e0bff517 	ldw	r2,-44(fp)
 401622c:	10bfffc4 	addi	r2,r2,-1
 4016230:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4016234:	e0bffc17 	ldw	r2,-16(fp)
 4016238:	10800104 	addi	r2,r2,4
 401623c:	0007883a 	mov	r3,zero
 4016240:	10c00035 	stwio	r3,0(r2)
 4016244:	00000206 	br	4016250 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 4016248:	00bf0004 	movi	r2,-1024
 401624c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4016250:	e0bffa17 	ldw	r2,-24(fp)
 4016254:	1080200c 	andi	r2,r2,128
 4016258:	103fcf26 	beq	r2,zero,4016198 <__reset+0xfb015198>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401625c:	e0bffc17 	ldw	r2,-16(fp)
 4016260:	10800037 	ldwio	r2,0(r2)
 4016264:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4016268:	e0bff617 	ldw	r2,-40(fp)
 401626c:	10000426 	beq	r2,zero,4016280 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4016270:	e0bff617 	ldw	r2,-40(fp)
 4016274:	10bfffc4 	addi	r2,r2,-1
 4016278:	e0bff615 	stw	r2,-40(fp)
 401627c:	00000706 	br	401629c <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
 4016280:	e0bffb17 	ldw	r2,-20(fp)
 4016284:	1007883a 	mov	r3,r2
 4016288:	e0800217 	ldw	r2,8(fp)
 401628c:	10c00005 	stb	r3,0(r2)
 4016290:	e0800217 	ldw	r2,8(fp)
 4016294:	10800044 	addi	r2,r2,1
 4016298:	e0800215 	stw	r2,8(fp)
      credits++;
 401629c:	e0bff717 	ldw	r2,-36(fp)
 40162a0:	10800044 	addi	r2,r2,1
 40162a4:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 40162a8:	e0bff617 	ldw	r2,-40(fp)
 40162ac:	103fba1e 	bne	r2,zero,4016198 <__reset+0xfb015198>
 40162b0:	e0c00217 	ldw	r3,8(fp)
 40162b4:	e0bff917 	ldw	r2,-28(fp)
 40162b8:	18bfb71e 	bne	r3,r2,4016198 <__reset+0xfb015198>
        break;
 40162bc:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 40162c0:	e0bffc17 	ldw	r2,-16(fp)
 40162c4:	10800204 	addi	r2,r2,8
 40162c8:	10800037 	ldwio	r2,0(r2)
 40162cc:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 40162d0:	e0bffa17 	ldw	r2,-24(fp)
 40162d4:	1080080c 	andi	r2,r2,32
 40162d8:	103ff926 	beq	r2,zero,40162c0 <__reset+0xfb0152c0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 40162dc:	e0800317 	ldw	r2,12(fp)
 40162e0:	1080004c 	andi	r2,r2,1
 40162e4:	1000041e 	bne	r2,zero,40162f8 <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 40162e8:	e0bffc17 	ldw	r2,-16(fp)
 40162ec:	10800304 	addi	r2,r2,12
 40162f0:	0007883a 	mov	r3,zero
 40162f4:	10c00035 	stwio	r3,0(r2)

  return read_length;
 40162f8:	e0800117 	ldw	r2,4(fp)
}
 40162fc:	e037883a 	mov	sp,fp
 4016300:	df000017 	ldw	fp,0(sp)
 4016304:	dec00104 	addi	sp,sp,4
 4016308:	f800283a 	ret

0401630c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401630c:	defffa04 	addi	sp,sp,-24
 4016310:	dfc00515 	stw	ra,20(sp)
 4016314:	df000415 	stw	fp,16(sp)
 4016318:	df000404 	addi	fp,sp,16
 401631c:	e13ffe15 	stw	r4,-8(fp)
 4016320:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4016324:	e0bfff17 	ldw	r2,-4(fp)
 4016328:	10800017 	ldw	r2,0(r2)
 401632c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4016330:	e13ffe17 	ldw	r4,-8(fp)
 4016334:	400b0f40 	call	400b0f4 <strlen>
 4016338:	10800044 	addi	r2,r2,1
 401633c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4016340:	00000d06 	br	4016378 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4016344:	e0bffc17 	ldw	r2,-16(fp)
 4016348:	10c00217 	ldw	r3,8(r2)
 401634c:	e0bffd17 	ldw	r2,-12(fp)
 4016350:	1809883a 	mov	r4,r3
 4016354:	e17ffe17 	ldw	r5,-8(fp)
 4016358:	100d883a 	mov	r6,r2
 401635c:	40165d00 	call	40165d0 <memcmp>
 4016360:	1000021e 	bne	r2,zero,401636c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4016364:	e0bffc17 	ldw	r2,-16(fp)
 4016368:	00000706 	br	4016388 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401636c:	e0bffc17 	ldw	r2,-16(fp)
 4016370:	10800017 	ldw	r2,0(r2)
 4016374:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4016378:	e0fffc17 	ldw	r3,-16(fp)
 401637c:	e0bfff17 	ldw	r2,-4(fp)
 4016380:	18bff01e 	bne	r3,r2,4016344 <__reset+0xfb015344>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4016384:	0005883a 	mov	r2,zero
}
 4016388:	e037883a 	mov	sp,fp
 401638c:	dfc00117 	ldw	ra,4(sp)
 4016390:	df000017 	ldw	fp,0(sp)
 4016394:	dec00204 	addi	sp,sp,8
 4016398:	f800283a 	ret

0401639c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401639c:	defffb04 	addi	sp,sp,-20
 40163a0:	dfc00415 	stw	ra,16(sp)
 40163a4:	df000315 	stw	fp,12(sp)
 40163a8:	df000304 	addi	fp,sp,12
 40163ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40163b0:	00810234 	movhi	r2,1032
 40163b4:	10a37504 	addi	r2,r2,-29228
 40163b8:	10800017 	ldw	r2,0(r2)
 40163bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40163c0:	00003106 	br	4016488 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 40163c4:	e0bffd17 	ldw	r2,-12(fp)
 40163c8:	10800217 	ldw	r2,8(r2)
 40163cc:	1009883a 	mov	r4,r2
 40163d0:	400b0f40 	call	400b0f4 <strlen>
 40163d4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40163d8:	e0bffd17 	ldw	r2,-12(fp)
 40163dc:	10c00217 	ldw	r3,8(r2)
 40163e0:	e0bffe17 	ldw	r2,-8(fp)
 40163e4:	10bfffc4 	addi	r2,r2,-1
 40163e8:	1885883a 	add	r2,r3,r2
 40163ec:	10800003 	ldbu	r2,0(r2)
 40163f0:	10803fcc 	andi	r2,r2,255
 40163f4:	1080201c 	xori	r2,r2,128
 40163f8:	10bfe004 	addi	r2,r2,-128
 40163fc:	10800bd8 	cmpnei	r2,r2,47
 4016400:	1000031e 	bne	r2,zero,4016410 <alt_find_file+0x74>
    {
      len -= 1;
 4016404:	e0bffe17 	ldw	r2,-8(fp)
 4016408:	10bfffc4 	addi	r2,r2,-1
 401640c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4016410:	e0bffe17 	ldw	r2,-8(fp)
 4016414:	e0ffff17 	ldw	r3,-4(fp)
 4016418:	1885883a 	add	r2,r3,r2
 401641c:	10800003 	ldbu	r2,0(r2)
 4016420:	10803fcc 	andi	r2,r2,255
 4016424:	1080201c 	xori	r2,r2,128
 4016428:	10bfe004 	addi	r2,r2,-128
 401642c:	10800be0 	cmpeqi	r2,r2,47
 4016430:	1000081e 	bne	r2,zero,4016454 <alt_find_file+0xb8>
 4016434:	e0bffe17 	ldw	r2,-8(fp)
 4016438:	e0ffff17 	ldw	r3,-4(fp)
 401643c:	1885883a 	add	r2,r3,r2
 4016440:	10800003 	ldbu	r2,0(r2)
 4016444:	10803fcc 	andi	r2,r2,255
 4016448:	1080201c 	xori	r2,r2,128
 401644c:	10bfe004 	addi	r2,r2,-128
 4016450:	10000a1e 	bne	r2,zero,401647c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 4016454:	e0bffd17 	ldw	r2,-12(fp)
 4016458:	10c00217 	ldw	r3,8(r2)
 401645c:	e0bffe17 	ldw	r2,-8(fp)
 4016460:	1809883a 	mov	r4,r3
 4016464:	e17fff17 	ldw	r5,-4(fp)
 4016468:	100d883a 	mov	r6,r2
 401646c:	40165d00 	call	40165d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4016470:	1000021e 	bne	r2,zero,401647c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4016474:	e0bffd17 	ldw	r2,-12(fp)
 4016478:	00000806 	br	401649c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 401647c:	e0bffd17 	ldw	r2,-12(fp)
 4016480:	10800017 	ldw	r2,0(r2)
 4016484:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4016488:	e0fffd17 	ldw	r3,-12(fp)
 401648c:	00810234 	movhi	r2,1032
 4016490:	10a37504 	addi	r2,r2,-29228
 4016494:	18bfcb1e 	bne	r3,r2,40163c4 <__reset+0xfb0153c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4016498:	0005883a 	mov	r2,zero
}
 401649c:	e037883a 	mov	sp,fp
 40164a0:	dfc00117 	ldw	ra,4(sp)
 40164a4:	df000017 	ldw	fp,0(sp)
 40164a8:	dec00204 	addi	sp,sp,8
 40164ac:	f800283a 	ret

040164b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40164b0:	defffa04 	addi	sp,sp,-24
 40164b4:	dfc00515 	stw	ra,20(sp)
 40164b8:	df000415 	stw	fp,16(sp)
 40164bc:	dc000315 	stw	r16,12(sp)
 40164c0:	df000304 	addi	fp,sp,12
 40164c4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40164c8:	00bffa04 	movi	r2,-24
 40164cc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40164d0:	e03ffd15 	stw	zero,-12(fp)
 40164d4:	00002106 	br	401655c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 40164d8:	040101f4 	movhi	r16,1031
 40164dc:	841ec304 	addi	r16,r16,31500
 40164e0:	e0bffd17 	ldw	r2,-12(fp)
 40164e4:	1009883a 	mov	r4,r2
 40164e8:	01400304 	movi	r5,12
 40164ec:	4009dd80 	call	4009dd8 <__mulsi3>
 40164f0:	8085883a 	add	r2,r16,r2
 40164f4:	10800017 	ldw	r2,0(r2)
 40164f8:	1000151e 	bne	r2,zero,4016550 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 40164fc:	040101f4 	movhi	r16,1031
 4016500:	841ec304 	addi	r16,r16,31500
 4016504:	e0bffd17 	ldw	r2,-12(fp)
 4016508:	1009883a 	mov	r4,r2
 401650c:	01400304 	movi	r5,12
 4016510:	4009dd80 	call	4009dd8 <__mulsi3>
 4016514:	8085883a 	add	r2,r16,r2
 4016518:	e0ffff17 	ldw	r3,-4(fp)
 401651c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4016520:	00810234 	movhi	r2,1032
 4016524:	10a37904 	addi	r2,r2,-29212
 4016528:	10c00017 	ldw	r3,0(r2)
 401652c:	e0bffd17 	ldw	r2,-12(fp)
 4016530:	1880040e 	bge	r3,r2,4016544 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 4016534:	00810234 	movhi	r2,1032
 4016538:	10a37904 	addi	r2,r2,-29212
 401653c:	e0fffd17 	ldw	r3,-12(fp)
 4016540:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 4016544:	e0bffd17 	ldw	r2,-12(fp)
 4016548:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 401654c:	00000606 	br	4016568 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4016550:	e0bffd17 	ldw	r2,-12(fp)
 4016554:	10800044 	addi	r2,r2,1
 4016558:	e0bffd15 	stw	r2,-12(fp)
 401655c:	e0bffd17 	ldw	r2,-12(fp)
 4016560:	10800810 	cmplti	r2,r2,32
 4016564:	103fdc1e 	bne	r2,zero,40164d8 <__reset+0xfb0154d8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4016568:	e0bffe17 	ldw	r2,-8(fp)
}
 401656c:	e037883a 	mov	sp,fp
 4016570:	dfc00217 	ldw	ra,8(sp)
 4016574:	df000117 	ldw	fp,4(sp)
 4016578:	dc000017 	ldw	r16,0(sp)
 401657c:	dec00304 	addi	sp,sp,12
 4016580:	f800283a 	ret

04016584 <atexit>:
 4016584:	200b883a 	mov	r5,r4
 4016588:	000d883a 	mov	r6,zero
 401658c:	0009883a 	mov	r4,zero
 4016590:	000f883a 	mov	r7,zero
 4016594:	401664c1 	jmpi	401664c <__register_exitproc>

04016598 <exit>:
 4016598:	defffe04 	addi	sp,sp,-8
 401659c:	000b883a 	mov	r5,zero
 40165a0:	dc000015 	stw	r16,0(sp)
 40165a4:	dfc00115 	stw	ra,4(sp)
 40165a8:	2021883a 	mov	r16,r4
 40165ac:	401677c0 	call	401677c <__call_exitprocs>
 40165b0:	00810234 	movhi	r2,1032
 40165b4:	10a37004 	addi	r2,r2,-29248
 40165b8:	11000017 	ldw	r4,0(r2)
 40165bc:	20800f17 	ldw	r2,60(r4)
 40165c0:	10000126 	beq	r2,zero,40165c8 <exit+0x30>
 40165c4:	103ee83a 	callr	r2
 40165c8:	8009883a 	mov	r4,r16
 40165cc:	401691c0 	call	401691c <_exit>

040165d0 <memcmp>:
 40165d0:	01c000c4 	movi	r7,3
 40165d4:	3980192e 	bgeu	r7,r6,401663c <memcmp+0x6c>
 40165d8:	2904b03a 	or	r2,r5,r4
 40165dc:	11c4703a 	and	r2,r2,r7
 40165e0:	10000f26 	beq	r2,zero,4016620 <memcmp+0x50>
 40165e4:	20c00003 	ldbu	r3,0(r4)
 40165e8:	28800003 	ldbu	r2,0(r5)
 40165ec:	1880151e 	bne	r3,r2,4016644 <memcmp+0x74>
 40165f0:	31bfff84 	addi	r6,r6,-2
 40165f4:	01ffffc4 	movi	r7,-1
 40165f8:	00000406 	br	401660c <memcmp+0x3c>
 40165fc:	20c00003 	ldbu	r3,0(r4)
 4016600:	28800003 	ldbu	r2,0(r5)
 4016604:	31bfffc4 	addi	r6,r6,-1
 4016608:	18800e1e 	bne	r3,r2,4016644 <memcmp+0x74>
 401660c:	21000044 	addi	r4,r4,1
 4016610:	29400044 	addi	r5,r5,1
 4016614:	31fff91e 	bne	r6,r7,40165fc <__reset+0xfb0155fc>
 4016618:	0005883a 	mov	r2,zero
 401661c:	f800283a 	ret
 4016620:	20c00017 	ldw	r3,0(r4)
 4016624:	28800017 	ldw	r2,0(r5)
 4016628:	1880041e 	bne	r3,r2,401663c <memcmp+0x6c>
 401662c:	31bfff04 	addi	r6,r6,-4
 4016630:	21000104 	addi	r4,r4,4
 4016634:	29400104 	addi	r5,r5,4
 4016638:	39bff936 	bltu	r7,r6,4016620 <__reset+0xfb015620>
 401663c:	303fe91e 	bne	r6,zero,40165e4 <__reset+0xfb0155e4>
 4016640:	003ff506 	br	4016618 <__reset+0xfb015618>
 4016644:	1885c83a 	sub	r2,r3,r2
 4016648:	f800283a 	ret

0401664c <__register_exitproc>:
 401664c:	defffa04 	addi	sp,sp,-24
 4016650:	00810234 	movhi	r2,1032
 4016654:	10a37004 	addi	r2,r2,-29248
 4016658:	dc000315 	stw	r16,12(sp)
 401665c:	14000017 	ldw	r16,0(r2)
 4016660:	dc400415 	stw	r17,16(sp)
 4016664:	dfc00515 	stw	ra,20(sp)
 4016668:	80805217 	ldw	r2,328(r16)
 401666c:	2023883a 	mov	r17,r4
 4016670:	10003e26 	beq	r2,zero,401676c <__register_exitproc+0x120>
 4016674:	10c00117 	ldw	r3,4(r2)
 4016678:	020007c4 	movi	r8,31
 401667c:	40c0180e 	bge	r8,r3,40166e0 <__register_exitproc+0x94>
 4016680:	00810074 	movhi	r2,1025
 4016684:	10a91304 	addi	r2,r2,-23476
 4016688:	1000061e 	bne	r2,zero,40166a4 <__register_exitproc+0x58>
 401668c:	00bfffc4 	movi	r2,-1
 4016690:	dfc00517 	ldw	ra,20(sp)
 4016694:	dc400417 	ldw	r17,16(sp)
 4016698:	dc000317 	ldw	r16,12(sp)
 401669c:	dec00604 	addi	sp,sp,24
 40166a0:	f800283a 	ret
 40166a4:	01006404 	movi	r4,400
 40166a8:	d9400015 	stw	r5,0(sp)
 40166ac:	d9800115 	stw	r6,4(sp)
 40166b0:	d9c00215 	stw	r7,8(sp)
 40166b4:	400a44c0 	call	400a44c <malloc>
 40166b8:	d9400017 	ldw	r5,0(sp)
 40166bc:	d9800117 	ldw	r6,4(sp)
 40166c0:	d9c00217 	ldw	r7,8(sp)
 40166c4:	103ff126 	beq	r2,zero,401668c <__reset+0xfb01568c>
 40166c8:	80c05217 	ldw	r3,328(r16)
 40166cc:	10000115 	stw	zero,4(r2)
 40166d0:	10c00015 	stw	r3,0(r2)
 40166d4:	80805215 	stw	r2,328(r16)
 40166d8:	10006215 	stw	zero,392(r2)
 40166dc:	10006315 	stw	zero,396(r2)
 40166e0:	10c00117 	ldw	r3,4(r2)
 40166e4:	88000d1e 	bne	r17,zero,401671c <__register_exitproc+0xd0>
 40166e8:	19000084 	addi	r4,r3,2
 40166ec:	2109883a 	add	r4,r4,r4
 40166f0:	18c00044 	addi	r3,r3,1
 40166f4:	2109883a 	add	r4,r4,r4
 40166f8:	1109883a 	add	r4,r2,r4
 40166fc:	10c00115 	stw	r3,4(r2)
 4016700:	0005883a 	mov	r2,zero
 4016704:	21400015 	stw	r5,0(r4)
 4016708:	dfc00517 	ldw	ra,20(sp)
 401670c:	dc400417 	ldw	r17,16(sp)
 4016710:	dc000317 	ldw	r16,12(sp)
 4016714:	dec00604 	addi	sp,sp,24
 4016718:	f800283a 	ret
 401671c:	02400044 	movi	r9,1
 4016720:	12806217 	ldw	r10,392(r2)
 4016724:	48d2983a 	sll	r9,r9,r3
 4016728:	19000804 	addi	r4,r3,32
 401672c:	18d1883a 	add	r8,r3,r3
 4016730:	2109883a 	add	r4,r4,r4
 4016734:	4211883a 	add	r8,r8,r8
 4016738:	2109883a 	add	r4,r4,r4
 401673c:	1109883a 	add	r4,r2,r4
 4016740:	1211883a 	add	r8,r2,r8
 4016744:	5254b03a 	or	r10,r10,r9
 4016748:	21c02215 	stw	r7,136(r4)
 401674c:	41802215 	stw	r6,136(r8)
 4016750:	12806215 	stw	r10,392(r2)
 4016754:	01000084 	movi	r4,2
 4016758:	893fe31e 	bne	r17,r4,40166e8 <__reset+0xfb0156e8>
 401675c:	11006317 	ldw	r4,396(r2)
 4016760:	2252b03a 	or	r9,r4,r9
 4016764:	12406315 	stw	r9,396(r2)
 4016768:	003fdf06 	br	40166e8 <__reset+0xfb0156e8>
 401676c:	00810234 	movhi	r2,1032
 4016770:	10a3d904 	addi	r2,r2,-28828
 4016774:	80805215 	stw	r2,328(r16)
 4016778:	003fbe06 	br	4016674 <__reset+0xfb015674>

0401677c <__call_exitprocs>:
 401677c:	00810234 	movhi	r2,1032
 4016780:	10a37004 	addi	r2,r2,-29248
 4016784:	10800017 	ldw	r2,0(r2)
 4016788:	defff304 	addi	sp,sp,-52
 401678c:	df000b15 	stw	fp,44(sp)
 4016790:	d8800015 	stw	r2,0(sp)
 4016794:	10805204 	addi	r2,r2,328
 4016798:	dd400815 	stw	r21,32(sp)
 401679c:	dfc00c15 	stw	ra,48(sp)
 40167a0:	ddc00a15 	stw	r23,40(sp)
 40167a4:	dd800915 	stw	r22,36(sp)
 40167a8:	dd000715 	stw	r20,28(sp)
 40167ac:	dcc00615 	stw	r19,24(sp)
 40167b0:	dc800515 	stw	r18,20(sp)
 40167b4:	dc400415 	stw	r17,16(sp)
 40167b8:	dc000315 	stw	r16,12(sp)
 40167bc:	d9000115 	stw	r4,4(sp)
 40167c0:	2839883a 	mov	fp,r5
 40167c4:	d8800215 	stw	r2,8(sp)
 40167c8:	057fffc4 	movi	r21,-1
 40167cc:	d8800017 	ldw	r2,0(sp)
 40167d0:	ddc00217 	ldw	r23,8(sp)
 40167d4:	14805217 	ldw	r18,328(r2)
 40167d8:	90001726 	beq	r18,zero,4016838 <__call_exitprocs+0xbc>
 40167dc:	94400117 	ldw	r17,4(r18)
 40167e0:	8c3fffc4 	addi	r16,r17,-1
 40167e4:	80001116 	blt	r16,zero,401682c <__call_exitprocs+0xb0>
 40167e8:	8c400044 	addi	r17,r17,1
 40167ec:	8427883a 	add	r19,r16,r16
 40167f0:	8c63883a 	add	r17,r17,r17
 40167f4:	95802204 	addi	r22,r18,136
 40167f8:	9ce7883a 	add	r19,r19,r19
 40167fc:	8c63883a 	add	r17,r17,r17
 4016800:	b4e7883a 	add	r19,r22,r19
 4016804:	9463883a 	add	r17,r18,r17
 4016808:	e0001726 	beq	fp,zero,4016868 <__call_exitprocs+0xec>
 401680c:	8c87c83a 	sub	r3,r17,r18
 4016810:	b0c7883a 	add	r3,r22,r3
 4016814:	18c01e17 	ldw	r3,120(r3)
 4016818:	1f001326 	beq	r3,fp,4016868 <__call_exitprocs+0xec>
 401681c:	843fffc4 	addi	r16,r16,-1
 4016820:	9cffff04 	addi	r19,r19,-4
 4016824:	8c7fff04 	addi	r17,r17,-4
 4016828:	857ff71e 	bne	r16,r21,4016808 <__reset+0xfb015808>
 401682c:	00810074 	movhi	r2,1025
 4016830:	10a91804 	addi	r2,r2,-23456
 4016834:	10002a1e 	bne	r2,zero,40168e0 <__call_exitprocs+0x164>
 4016838:	dfc00c17 	ldw	ra,48(sp)
 401683c:	df000b17 	ldw	fp,44(sp)
 4016840:	ddc00a17 	ldw	r23,40(sp)
 4016844:	dd800917 	ldw	r22,36(sp)
 4016848:	dd400817 	ldw	r21,32(sp)
 401684c:	dd000717 	ldw	r20,28(sp)
 4016850:	dcc00617 	ldw	r19,24(sp)
 4016854:	dc800517 	ldw	r18,20(sp)
 4016858:	dc400417 	ldw	r17,16(sp)
 401685c:	dc000317 	ldw	r16,12(sp)
 4016860:	dec00d04 	addi	sp,sp,52
 4016864:	f800283a 	ret
 4016868:	91000117 	ldw	r4,4(r18)
 401686c:	88c00017 	ldw	r3,0(r17)
 4016870:	213fffc4 	addi	r4,r4,-1
 4016874:	24001526 	beq	r4,r16,40168cc <__call_exitprocs+0x150>
 4016878:	88000015 	stw	zero,0(r17)
 401687c:	183fe726 	beq	r3,zero,401681c <__reset+0xfb01581c>
 4016880:	00800044 	movi	r2,1
 4016884:	1408983a 	sll	r4,r2,r16
 4016888:	91406217 	ldw	r5,392(r18)
 401688c:	95000117 	ldw	r20,4(r18)
 4016890:	214a703a 	and	r5,r4,r5
 4016894:	28000b26 	beq	r5,zero,40168c4 <__call_exitprocs+0x148>
 4016898:	91406317 	ldw	r5,396(r18)
 401689c:	2148703a 	and	r4,r4,r5
 40168a0:	20000c1e 	bne	r4,zero,40168d4 <__call_exitprocs+0x158>
 40168a4:	99400017 	ldw	r5,0(r19)
 40168a8:	d9000117 	ldw	r4,4(sp)
 40168ac:	183ee83a 	callr	r3
 40168b0:	90c00117 	ldw	r3,4(r18)
 40168b4:	1d3fc51e 	bne	r3,r20,40167cc <__reset+0xfb0157cc>
 40168b8:	b8c00017 	ldw	r3,0(r23)
 40168bc:	1cbfd726 	beq	r3,r18,401681c <__reset+0xfb01581c>
 40168c0:	003fc206 	br	40167cc <__reset+0xfb0157cc>
 40168c4:	183ee83a 	callr	r3
 40168c8:	003ff906 	br	40168b0 <__reset+0xfb0158b0>
 40168cc:	94000115 	stw	r16,4(r18)
 40168d0:	003fea06 	br	401687c <__reset+0xfb01587c>
 40168d4:	99000017 	ldw	r4,0(r19)
 40168d8:	183ee83a 	callr	r3
 40168dc:	003ff406 	br	40168b0 <__reset+0xfb0158b0>
 40168e0:	90c00117 	ldw	r3,4(r18)
 40168e4:	1800071e 	bne	r3,zero,4016904 <__call_exitprocs+0x188>
 40168e8:	90c00017 	ldw	r3,0(r18)
 40168ec:	18000926 	beq	r3,zero,4016914 <__call_exitprocs+0x198>
 40168f0:	9009883a 	mov	r4,r18
 40168f4:	b8c00015 	stw	r3,0(r23)
 40168f8:	400a4600 	call	400a460 <free>
 40168fc:	bc800017 	ldw	r18,0(r23)
 4016900:	003fb506 	br	40167d8 <__reset+0xfb0157d8>
 4016904:	90c00017 	ldw	r3,0(r18)
 4016908:	902f883a 	mov	r23,r18
 401690c:	1825883a 	mov	r18,r3
 4016910:	003fb106 	br	40167d8 <__reset+0xfb0157d8>
 4016914:	0007883a 	mov	r3,zero
 4016918:	003ffb06 	br	4016908 <__reset+0xfb015908>

0401691c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401691c:	defffc04 	addi	sp,sp,-16
 4016920:	df000315 	stw	fp,12(sp)
 4016924:	df000304 	addi	fp,sp,12
 4016928:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401692c:	0001883a 	nop
 4016930:	e0bfff17 	ldw	r2,-4(fp)
 4016934:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 4016938:	e0bffd17 	ldw	r2,-12(fp)
 401693c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4016940:	e0bffe17 	ldw	r2,-8(fp)
 4016944:	10000226 	beq	r2,zero,4016950 <_exit+0x34>
    ALT_SIM_FAIL();
 4016948:	002af070 	cmpltui	zero,zero,43969
 401694c:	00000106 	br	4016954 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 4016950:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4016954:	003fff06 	br	4016954 <__reset+0xfb015954>
